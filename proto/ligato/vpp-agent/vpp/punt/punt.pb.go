// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ligato/vpp-agent/vpp/punt/punt.proto

package vpp_punt

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// L3Protocol defines Layer 3 protocols.
type L3Protocol int32

const (
	L3Protocol_UNDEFINED_L3 L3Protocol = 0
	L3Protocol_IPV4         L3Protocol = 4
	L3Protocol_IPV6         L3Protocol = 6
	L3Protocol_ALL          L3Protocol = 10
)

var L3Protocol_name = map[int32]string{
	0:  "UNDEFINED_L3",
	4:  "IPV4",
	6:  "IPV6",
	10: "ALL",
}

var L3Protocol_value = map[string]int32{
	"UNDEFINED_L3": 0,
	"IPV4":         4,
	"IPV6":         6,
	"ALL":          10,
}

func (x L3Protocol) String() string {
	return proto.EnumName(L3Protocol_name, int32(x))
}

func (L3Protocol) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_44e21c3981ca4881, []int{0}
}

// L4Protocol defines Layer 4 protocols.
type L4Protocol int32

const (
	L4Protocol_UNDEFINED_L4 L4Protocol = 0
	L4Protocol_TCP          L4Protocol = 6
	L4Protocol_UDP          L4Protocol = 17
)

var L4Protocol_name = map[int32]string{
	0:  "UNDEFINED_L4",
	6:  "TCP",
	17: "UDP",
}

var L4Protocol_value = map[string]int32{
	"UNDEFINED_L4": 0,
	"TCP":          6,
	"UDP":          17,
}

func (x L4Protocol) String() string {
	return proto.EnumName(L4Protocol_name, int32(x))
}

func (L4Protocol) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_44e21c3981ca4881, []int{1}
}

// IPRedirect allows otherwise dropped packet which destination IP address
// matching some of the VPP addresses to redirect to the defined next hop address
// via the TX interface.
type IPRedirect struct {
	// L3 protocol to be redirected
	L3Protocol L3Protocol `protobuf:"varint,1,opt,name=l3_protocol,json=l3Protocol,proto3,enum=vpp.punt.L3Protocol" json:"l3_protocol,omitempty"`
	// Receive interface name. Optional, only redirect traffic incoming from this interface
	RxInterface string `protobuf:"bytes,2,opt,name=rx_interface,json=rxInterface,proto3" json:"rx_interface,omitempty"`
	// Transmit interface name
	TxInterface string `protobuf:"bytes,3,opt,name=tx_interface,json=txInterface,proto3" json:"tx_interface,omitempty"`
	// Next hop IP where the traffic is redirected
	NextHop              string   `protobuf:"bytes,4,opt,name=next_hop,json=nextHop,proto3" json:"next_hop,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IPRedirect) Reset()         { *m = IPRedirect{} }
func (m *IPRedirect) String() string { return proto.CompactTextString(m) }
func (*IPRedirect) ProtoMessage()    {}
func (*IPRedirect) Descriptor() ([]byte, []int) {
	return fileDescriptor_44e21c3981ca4881, []int{0}
}

func (m *IPRedirect) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IPRedirect.Unmarshal(m, b)
}
func (m *IPRedirect) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IPRedirect.Marshal(b, m, deterministic)
}
func (m *IPRedirect) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IPRedirect.Merge(m, src)
}
func (m *IPRedirect) XXX_Size() int {
	return xxx_messageInfo_IPRedirect.Size(m)
}
func (m *IPRedirect) XXX_DiscardUnknown() {
	xxx_messageInfo_IPRedirect.DiscardUnknown(m)
}

var xxx_messageInfo_IPRedirect proto.InternalMessageInfo

func (m *IPRedirect) GetL3Protocol() L3Protocol {
	if m != nil {
		return m.L3Protocol
	}
	return L3Protocol_UNDEFINED_L3
}

func (m *IPRedirect) GetRxInterface() string {
	if m != nil {
		return m.RxInterface
	}
	return ""
}

func (m *IPRedirect) GetTxInterface() string {
	if m != nil {
		return m.TxInterface
	}
	return ""
}

func (m *IPRedirect) GetNextHop() string {
	if m != nil {
		return m.NextHop
	}
	return ""
}

// ToHost allows otherwise dropped packet which destination IP address matching
// some of the VPP interface IP addresses to be punted to the host.
// L3 and L4 protocols can be used for filtering */
type ToHost struct {
	// L3 destination protocol a packet has to match in order to be punted.
	L3Protocol L3Protocol `protobuf:"varint,2,opt,name=l3_protocol,json=l3Protocol,proto3,enum=vpp.punt.L3Protocol" json:"l3_protocol,omitempty"`
	// L4 destination protocol a packet has to match.
	// Currently VPP only supports UDP.
	L4Protocol L4Protocol `protobuf:"varint,3,opt,name=l4_protocol,json=l4Protocol,proto3,enum=vpp.punt.L4Protocol" json:"l4_protocol,omitempty"`
	// Destination port
	Port uint32 `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	// SocketPath defines path to unix domain socket
	// used for punt packets to the host.
	// In dumps, it will actually contain the socket
	// defined in VPP config under punt section.
	SocketPath           string   `protobuf:"bytes,5,opt,name=socket_path,json=socketPath,proto3" json:"socket_path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ToHost) Reset()         { *m = ToHost{} }
func (m *ToHost) String() string { return proto.CompactTextString(m) }
func (*ToHost) ProtoMessage()    {}
func (*ToHost) Descriptor() ([]byte, []int) {
	return fileDescriptor_44e21c3981ca4881, []int{1}
}

func (m *ToHost) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ToHost.Unmarshal(m, b)
}
func (m *ToHost) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ToHost.Marshal(b, m, deterministic)
}
func (m *ToHost) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ToHost.Merge(m, src)
}
func (m *ToHost) XXX_Size() int {
	return xxx_messageInfo_ToHost.Size(m)
}
func (m *ToHost) XXX_DiscardUnknown() {
	xxx_messageInfo_ToHost.DiscardUnknown(m)
}

var xxx_messageInfo_ToHost proto.InternalMessageInfo

func (m *ToHost) GetL3Protocol() L3Protocol {
	if m != nil {
		return m.L3Protocol
	}
	return L3Protocol_UNDEFINED_L3
}

func (m *ToHost) GetL4Protocol() L4Protocol {
	if m != nil {
		return m.L4Protocol
	}
	return L4Protocol_UNDEFINED_L4
}

func (m *ToHost) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *ToHost) GetSocketPath() string {
	if m != nil {
		return m.SocketPath
	}
	return ""
}

// Exception allows specifying punt exceptions used for punting packets.
// The type of exception is defined by reason name.
type Exception struct {
	// Name should contain reason name, e.g. `ipsec4-spi-0`.
	Reason string `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
	// SocketPath defines path to unix domain socket
	// used for punt packets to the host.
	// In dumps, it will actually contain the socket
	// defined in VPP config under punt section.
	SocketPath           string   `protobuf:"bytes,2,opt,name=socket_path,json=socketPath,proto3" json:"socket_path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Exception) Reset()         { *m = Exception{} }
func (m *Exception) String() string { return proto.CompactTextString(m) }
func (*Exception) ProtoMessage()    {}
func (*Exception) Descriptor() ([]byte, []int) {
	return fileDescriptor_44e21c3981ca4881, []int{2}
}

func (m *Exception) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Exception.Unmarshal(m, b)
}
func (m *Exception) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Exception.Marshal(b, m, deterministic)
}
func (m *Exception) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Exception.Merge(m, src)
}
func (m *Exception) XXX_Size() int {
	return xxx_messageInfo_Exception.Size(m)
}
func (m *Exception) XXX_DiscardUnknown() {
	xxx_messageInfo_Exception.DiscardUnknown(m)
}

var xxx_messageInfo_Exception proto.InternalMessageInfo

func (m *Exception) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *Exception) GetSocketPath() string {
	if m != nil {
		return m.SocketPath
	}
	return ""
}

// Reason represents punt reason used in exceptions.
// List of known exceptions can be retrieved in VPP CLI
// with following command:
//
// vpp# show punt reasons
//    [0] ipsec4-spi-0 from:[ipsec ]
//    [1] ipsec6-spi-0 from:[ipsec ]
//    [2] ipsec4-spi-o-udp-0 from:[ipsec ]
//    [3] ipsec4-no-such-tunnel from:[ipsec ]
//    [4] ipsec6-no-such-tunnel from:[ipsec ]
//    [5] VXLAN-GBP-no-such-v4-tunnel from:[vxlan-gbp ]
//    [6] VXLAN-GBP-no-such-v6-tunnel from:[vxlan-gbp ]
//
type Reason struct {
	// Name contains reason name.
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Reason) Reset()         { *m = Reason{} }
func (m *Reason) String() string { return proto.CompactTextString(m) }
func (*Reason) ProtoMessage()    {}
func (*Reason) Descriptor() ([]byte, []int) {
	return fileDescriptor_44e21c3981ca4881, []int{3}
}

func (m *Reason) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Reason.Unmarshal(m, b)
}
func (m *Reason) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Reason.Marshal(b, m, deterministic)
}
func (m *Reason) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Reason.Merge(m, src)
}
func (m *Reason) XXX_Size() int {
	return xxx_messageInfo_Reason.Size(m)
}
func (m *Reason) XXX_DiscardUnknown() {
	xxx_messageInfo_Reason.DiscardUnknown(m)
}

var xxx_messageInfo_Reason proto.InternalMessageInfo

func (m *Reason) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterEnum("vpp.punt.L3Protocol", L3Protocol_name, L3Protocol_value)
	proto.RegisterEnum("vpp.punt.L4Protocol", L4Protocol_name, L4Protocol_value)
	proto.RegisterType((*IPRedirect)(nil), "vpp.punt.IPRedirect")
	proto.RegisterType((*ToHost)(nil), "vpp.punt.ToHost")
	proto.RegisterType((*Exception)(nil), "vpp.punt.Exception")
	proto.RegisterType((*Reason)(nil), "vpp.punt.Reason")
}

func init() {
	proto.RegisterFile("ligato/vpp-agent/vpp/punt/punt.proto", fileDescriptor_44e21c3981ca4881)
}

var fileDescriptor_44e21c3981ca4881 = []byte{
	// 381 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xc1, 0x6b, 0xe2, 0x40,
	0x14, 0xc6, 0x8d, 0x66, 0xa3, 0x3e, 0xdd, 0x25, 0x3b, 0x2c, 0x4b, 0x0a, 0x85, 0x5a, 0xe9, 0x41,
	0x84, 0xc6, 0xd2, 0xa4, 0xbd, 0x78, 0x28, 0xb6, 0xb1, 0x18, 0x08, 0x12, 0x82, 0xf6, 0xd0, 0x4b,
	0x48, 0xd3, 0xa9, 0x86, 0xa6, 0x99, 0x21, 0x4e, 0x25, 0x7f, 0x50, 0x6f, 0xfd, 0x27, 0xcb, 0x4c,
	0xa2, 0x06, 0xa5, 0xd0, 0xcb, 0xf0, 0xbd, 0x99, 0xdf, 0xf7, 0xf8, 0xe6, 0xf1, 0xe0, 0x2c, 0x8e,
	0x16, 0x01, 0x23, 0x83, 0x35, 0xa5, 0xe7, 0xc1, 0x02, 0x27, 0x8c, 0xab, 0x01, 0x7d, 0x4f, 0x98,
	0x38, 0x74, 0x9a, 0x12, 0x46, 0x50, 0x63, 0x4d, 0xa9, 0xce, 0xeb, 0xee, 0x87, 0x04, 0x60, 0xbb,
	0x1e, 0x7e, 0x8e, 0x52, 0x1c, 0x32, 0x74, 0x05, 0xad, 0xd8, 0xf0, 0x05, 0x14, 0x92, 0x58, 0x93,
	0x3a, 0x52, 0xef, 0xcf, 0xe5, 0x3f, 0x7d, 0x83, 0xeb, 0x8e, 0xe1, 0x16, 0x6f, 0x1e, 0xc4, 0x5b,
	0x8d, 0x4e, 0xa1, 0x9d, 0x66, 0x7e, 0x94, 0x30, 0x9c, 0xbe, 0x04, 0x21, 0xd6, 0xaa, 0x1d, 0xa9,
	0xd7, 0xf4, 0x5a, 0x69, 0x66, 0x6f, 0xae, 0x38, 0xc2, 0xca, 0x48, 0x2d, 0x47, 0x58, 0x09, 0x39,
	0x82, 0x46, 0x82, 0x33, 0xe6, 0x2f, 0x09, 0xd5, 0x64, 0xf1, 0x5c, 0xe7, 0xf5, 0x84, 0xd0, 0xee,
	0xa7, 0x04, 0xca, 0x8c, 0x4c, 0xc8, 0xea, 0x20, 0x62, 0xf5, 0x87, 0x11, 0xb9, 0xcd, 0xdc, 0xd9,
	0x6a, 0x07, 0x36, 0xb3, 0x64, 0xdb, 0x6a, 0x84, 0x40, 0xa6, 0x24, 0x65, 0x22, 0xcf, 0x6f, 0x4f,
	0x68, 0x74, 0x02, 0xad, 0x15, 0x09, 0x5f, 0x31, 0xf3, 0x69, 0xc0, 0x96, 0xda, 0x2f, 0x11, 0x15,
	0xf2, 0x2b, 0x37, 0x60, 0xcb, 0xae, 0x05, 0xcd, 0x71, 0x16, 0x62, 0xca, 0x22, 0x92, 0xa0, 0xff,
	0xa0, 0xa4, 0x38, 0x58, 0x91, 0x44, 0x4c, 0xb3, 0xe9, 0x15, 0xd5, 0x7e, 0x97, 0xea, 0x41, 0x97,
	0x63, 0x50, 0xbc, 0x1c, 0x45, 0x20, 0x27, 0xc1, 0x1b, 0x2e, 0x1a, 0x08, 0xdd, 0x1f, 0x02, 0xec,
	0x7e, 0x8a, 0x54, 0x68, 0xcf, 0xa7, 0xd6, 0xf8, 0xde, 0x9e, 0x8e, 0x2d, 0xdf, 0x31, 0xd4, 0x0a,
	0x6a, 0x80, 0x6c, 0xbb, 0x0f, 0xa6, 0x2a, 0x17, 0xea, 0x5a, 0x55, 0x50, 0x1d, 0x6a, 0x23, 0xc7,
	0x51, 0xa1, 0x7f, 0x01, 0xb0, 0xfb, 0xef, 0x9e, 0xd9, 0x54, 0x2b, 0x1c, 0x9c, 0xdd, 0xb9, 0xb9,
	0x63, 0x6e, 0xb9, 0xea, 0xdf, 0xdb, 0xd1, 0xe3, 0xcd, 0x82, 0xe8, 0xf9, 0x72, 0xe9, 0x51, 0x79,
	0xbf, 0xc4, 0x48, 0x07, 0xdf, 0xae, 0xdd, 0x70, 0x4d, 0xa9, 0xcf, 0xc5, 0x93, 0x22, 0x48, 0xe3,
	0x2b, 0x00, 0x00, 0xff, 0xff, 0xc2, 0xcf, 0x81, 0xc2, 0xa3, 0x02, 0x00, 0x00,
}
