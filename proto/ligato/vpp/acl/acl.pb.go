// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.4
// source: ligato/vpp/acl/acl.proto

package vpp_acl

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ACL_Rule_Action int32

const (
	ACL_Rule_DENY    ACL_Rule_Action = 0
	ACL_Rule_PERMIT  ACL_Rule_Action = 1
	ACL_Rule_REFLECT ACL_Rule_Action = 2
)

// Enum value maps for ACL_Rule_Action.
var (
	ACL_Rule_Action_name = map[int32]string{
		0: "DENY",
		1: "PERMIT",
		2: "REFLECT",
	}
	ACL_Rule_Action_value = map[string]int32{
		"DENY":    0,
		"PERMIT":  1,
		"REFLECT": 2,
	}
)

func (x ACL_Rule_Action) Enum() *ACL_Rule_Action {
	p := new(ACL_Rule_Action)
	*p = x
	return p
}

func (x ACL_Rule_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ACL_Rule_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_ligato_vpp_acl_acl_proto_enumTypes[0].Descriptor()
}

func (ACL_Rule_Action) Type() protoreflect.EnumType {
	return &file_ligato_vpp_acl_acl_proto_enumTypes[0]
}

func (x ACL_Rule_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ACL_Rule_Action.Descriptor instead.
func (ACL_Rule_Action) EnumDescriptor() ([]byte, []int) {
	return file_ligato_vpp_acl_acl_proto_rawDescGZIP(), []int{0, 0, 0}
}

// ACL defines Access Control List.
type ACL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of an access list. A device MAY restrict the length
	// and value of this name, possibly spaces and special
	// characters are not allowed.
	Name       string          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Rules      []*ACL_Rule     `protobuf:"bytes,2,rep,name=rules,proto3" json:"rules,omitempty"`
	Interfaces *ACL_Interfaces `protobuf:"bytes,3,opt,name=interfaces,proto3" json:"interfaces,omitempty"`
}

func (x *ACL) Reset() {
	*x = ACL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ligato_vpp_acl_acl_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ACL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ACL) ProtoMessage() {}

func (x *ACL) ProtoReflect() protoreflect.Message {
	mi := &file_ligato_vpp_acl_acl_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ACL.ProtoReflect.Descriptor instead.
func (*ACL) Descriptor() ([]byte, []int) {
	return file_ligato_vpp_acl_acl_proto_rawDescGZIP(), []int{0}
}

func (x *ACL) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ACL) GetRules() []*ACL_Rule {
	if x != nil {
		return x.Rules
	}
	return nil
}

func (x *ACL) GetInterfaces() *ACL_Interfaces {
	if x != nil {
		return x.Interfaces
	}
	return nil
}

// List of access list entries (Rules). Each Access Control Rule has
// a list of match criteria and a list of actions.
// Access List entry that can define:
// - IPv4/IPv6 src ip prefix
// - src MAC address mask
// - src MAC address value
// - can be used only for static ACLs.
type ACL_Rule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action    ACL_Rule_Action     `protobuf:"varint,1,opt,name=action,proto3,enum=ligato.vpp.acl.ACL_Rule_Action" json:"action,omitempty"`
	IpRule    *ACL_Rule_IpRule    `protobuf:"bytes,2,opt,name=ip_rule,json=ipRule,proto3" json:"ip_rule,omitempty"`
	MacipRule *ACL_Rule_MacIpRule `protobuf:"bytes,3,opt,name=macip_rule,json=macipRule,proto3" json:"macip_rule,omitempty"`
}

func (x *ACL_Rule) Reset() {
	*x = ACL_Rule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ligato_vpp_acl_acl_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ACL_Rule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ACL_Rule) ProtoMessage() {}

func (x *ACL_Rule) ProtoReflect() protoreflect.Message {
	mi := &file_ligato_vpp_acl_acl_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ACL_Rule.ProtoReflect.Descriptor instead.
func (*ACL_Rule) Descriptor() ([]byte, []int) {
	return file_ligato_vpp_acl_acl_proto_rawDescGZIP(), []int{0, 0}
}

func (x *ACL_Rule) GetAction() ACL_Rule_Action {
	if x != nil {
		return x.Action
	}
	return ACL_Rule_DENY
}

func (x *ACL_Rule) GetIpRule() *ACL_Rule_IpRule {
	if x != nil {
		return x.IpRule
	}
	return nil
}

func (x *ACL_Rule) GetMacipRule() *ACL_Rule_MacIpRule {
	if x != nil {
		return x.MacipRule
	}
	return nil
}

// The set of interfaces that has assigned this ACL on ingres or egress.
type ACL_Interfaces struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Egress  []string `protobuf:"bytes,1,rep,name=egress,proto3" json:"egress,omitempty"`
	Ingress []string `protobuf:"bytes,2,rep,name=ingress,proto3" json:"ingress,omitempty"`
}

func (x *ACL_Interfaces) Reset() {
	*x = ACL_Interfaces{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ligato_vpp_acl_acl_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ACL_Interfaces) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ACL_Interfaces) ProtoMessage() {}

func (x *ACL_Interfaces) ProtoReflect() protoreflect.Message {
	mi := &file_ligato_vpp_acl_acl_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ACL_Interfaces.ProtoReflect.Descriptor instead.
func (*ACL_Interfaces) Descriptor() ([]byte, []int) {
	return file_ligato_vpp_acl_acl_proto_rawDescGZIP(), []int{0, 1}
}

func (x *ACL_Interfaces) GetEgress() []string {
	if x != nil {
		return x.Egress
	}
	return nil
}

func (x *ACL_Interfaces) GetIngress() []string {
	if x != nil {
		return x.Ingress
	}
	return nil
}

type ACL_Rule_IpRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip   *ACL_Rule_IpRule_Ip   `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Icmp *ACL_Rule_IpRule_Icmp `protobuf:"bytes,2,opt,name=icmp,proto3" json:"icmp,omitempty"`
	Tcp  *ACL_Rule_IpRule_Tcp  `protobuf:"bytes,3,opt,name=tcp,proto3" json:"tcp,omitempty"`
	Udp  *ACL_Rule_IpRule_Udp  `protobuf:"bytes,4,opt,name=udp,proto3" json:"udp,omitempty"`
}

func (x *ACL_Rule_IpRule) Reset() {
	*x = ACL_Rule_IpRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ligato_vpp_acl_acl_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ACL_Rule_IpRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ACL_Rule_IpRule) ProtoMessage() {}

func (x *ACL_Rule_IpRule) ProtoReflect() protoreflect.Message {
	mi := &file_ligato_vpp_acl_acl_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ACL_Rule_IpRule.ProtoReflect.Descriptor instead.
func (*ACL_Rule_IpRule) Descriptor() ([]byte, []int) {
	return file_ligato_vpp_acl_acl_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *ACL_Rule_IpRule) GetIp() *ACL_Rule_IpRule_Ip {
	if x != nil {
		return x.Ip
	}
	return nil
}

func (x *ACL_Rule_IpRule) GetIcmp() *ACL_Rule_IpRule_Icmp {
	if x != nil {
		return x.Icmp
	}
	return nil
}

func (x *ACL_Rule_IpRule) GetTcp() *ACL_Rule_IpRule_Tcp {
	if x != nil {
		return x.Tcp
	}
	return nil
}

func (x *ACL_Rule_IpRule) GetUdp() *ACL_Rule_IpRule_Udp {
	if x != nil {
		return x.Udp
	}
	return nil
}

type ACL_Rule_MacIpRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceAddress       string `protobuf:"bytes,1,opt,name=source_address,json=sourceAddress,proto3" json:"source_address,omitempty"`
	SourceAddressPrefix uint32 `protobuf:"varint,2,opt,name=source_address_prefix,json=sourceAddressPrefix,proto3" json:"source_address_prefix,omitempty"`
	// Before source-mac-address is compared with source mac address field of the packet
	// being matched, source-mac-address-mask is applied to packet field value.
	SourceMacAddress string `protobuf:"bytes,3,opt,name=source_mac_address,json=sourceMacAddress,proto3" json:"source_mac_address,omitempty"`
	// Source MAC address mask.
	// Applied as logical AND with source mac address field of the packet being matched,
	// before it is compared with source-mac-address.
	SourceMacAddressMask string `protobuf:"bytes,4,opt,name=source_mac_address_mask,json=sourceMacAddressMask,proto3" json:"source_mac_address_mask,omitempty"`
}

func (x *ACL_Rule_MacIpRule) Reset() {
	*x = ACL_Rule_MacIpRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ligato_vpp_acl_acl_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ACL_Rule_MacIpRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ACL_Rule_MacIpRule) ProtoMessage() {}

func (x *ACL_Rule_MacIpRule) ProtoReflect() protoreflect.Message {
	mi := &file_ligato_vpp_acl_acl_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ACL_Rule_MacIpRule.ProtoReflect.Descriptor instead.
func (*ACL_Rule_MacIpRule) Descriptor() ([]byte, []int) {
	return file_ligato_vpp_acl_acl_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (x *ACL_Rule_MacIpRule) GetSourceAddress() string {
	if x != nil {
		return x.SourceAddress
	}
	return ""
}

func (x *ACL_Rule_MacIpRule) GetSourceAddressPrefix() uint32 {
	if x != nil {
		return x.SourceAddressPrefix
	}
	return 0
}

func (x *ACL_Rule_MacIpRule) GetSourceMacAddress() string {
	if x != nil {
		return x.SourceMacAddress
	}
	return ""
}

func (x *ACL_Rule_MacIpRule) GetSourceMacAddressMask() string {
	if x != nil {
		return x.SourceMacAddressMask
	}
	return ""
}

// IP  used in this Access List Entry.
type ACL_Rule_IpRule_Ip struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Destination IPv4/IPv6 network address (<ip>/<network>)
	DestinationNetwork string `protobuf:"bytes,1,opt,name=destination_network,json=destinationNetwork,proto3" json:"destination_network,omitempty"`
	// Destination IPv4/IPv6 network address (<ip>/<network>)
	SourceNetwork string `protobuf:"bytes,2,opt,name=source_network,json=sourceNetwork,proto3" json:"source_network,omitempty"`
}

func (x *ACL_Rule_IpRule_Ip) Reset() {
	*x = ACL_Rule_IpRule_Ip{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ligato_vpp_acl_acl_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ACL_Rule_IpRule_Ip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ACL_Rule_IpRule_Ip) ProtoMessage() {}

func (x *ACL_Rule_IpRule_Ip) ProtoReflect() protoreflect.Message {
	mi := &file_ligato_vpp_acl_acl_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ACL_Rule_IpRule_Ip.ProtoReflect.Descriptor instead.
func (*ACL_Rule_IpRule_Ip) Descriptor() ([]byte, []int) {
	return file_ligato_vpp_acl_acl_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

func (x *ACL_Rule_IpRule_Ip) GetDestinationNetwork() string {
	if x != nil {
		return x.DestinationNetwork
	}
	return ""
}

func (x *ACL_Rule_IpRule_Ip) GetSourceNetwork() string {
	if x != nil {
		return x.SourceNetwork
	}
	return ""
}

type ACL_Rule_IpRule_Icmp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ICMPv6 flag, if false ICMPv4 will be used
	Icmpv6 bool `protobuf:"varint,1,opt,name=icmpv6,proto3" json:"icmpv6,omitempty"`
	// Inclusive range representing icmp codes to be used.
	IcmpCodeRange *ACL_Rule_IpRule_Icmp_Range `protobuf:"bytes,2,opt,name=icmp_code_range,json=icmpCodeRange,proto3" json:"icmp_code_range,omitempty"`
	IcmpTypeRange *ACL_Rule_IpRule_Icmp_Range `protobuf:"bytes,3,opt,name=icmp_type_range,json=icmpTypeRange,proto3" json:"icmp_type_range,omitempty"`
}

func (x *ACL_Rule_IpRule_Icmp) Reset() {
	*x = ACL_Rule_IpRule_Icmp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ligato_vpp_acl_acl_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ACL_Rule_IpRule_Icmp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ACL_Rule_IpRule_Icmp) ProtoMessage() {}

func (x *ACL_Rule_IpRule_Icmp) ProtoReflect() protoreflect.Message {
	mi := &file_ligato_vpp_acl_acl_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ACL_Rule_IpRule_Icmp.ProtoReflect.Descriptor instead.
func (*ACL_Rule_IpRule_Icmp) Descriptor() ([]byte, []int) {
	return file_ligato_vpp_acl_acl_proto_rawDescGZIP(), []int{0, 0, 0, 1}
}

func (x *ACL_Rule_IpRule_Icmp) GetIcmpv6() bool {
	if x != nil {
		return x.Icmpv6
	}
	return false
}

func (x *ACL_Rule_IpRule_Icmp) GetIcmpCodeRange() *ACL_Rule_IpRule_Icmp_Range {
	if x != nil {
		return x.IcmpCodeRange
	}
	return nil
}

func (x *ACL_Rule_IpRule_Icmp) GetIcmpTypeRange() *ACL_Rule_IpRule_Icmp_Range {
	if x != nil {
		return x.IcmpTypeRange
	}
	return nil
}

// Inclusive range representing destination ports to be used. When
// only lower-port is present, it represents a single port.
type ACL_Rule_IpRule_PortRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LowerPort uint32 `protobuf:"varint,1,opt,name=lower_port,json=lowerPort,proto3" json:"lower_port,omitempty"`
	// If upper port is set, it must
	// be greater or equal to lower port
	UpperPort uint32 `protobuf:"varint,2,opt,name=upper_port,json=upperPort,proto3" json:"upper_port,omitempty"`
}

func (x *ACL_Rule_IpRule_PortRange) Reset() {
	*x = ACL_Rule_IpRule_PortRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ligato_vpp_acl_acl_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ACL_Rule_IpRule_PortRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ACL_Rule_IpRule_PortRange) ProtoMessage() {}

func (x *ACL_Rule_IpRule_PortRange) ProtoReflect() protoreflect.Message {
	mi := &file_ligato_vpp_acl_acl_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ACL_Rule_IpRule_PortRange.ProtoReflect.Descriptor instead.
func (*ACL_Rule_IpRule_PortRange) Descriptor() ([]byte, []int) {
	return file_ligato_vpp_acl_acl_proto_rawDescGZIP(), []int{0, 0, 0, 2}
}

func (x *ACL_Rule_IpRule_PortRange) GetLowerPort() uint32 {
	if x != nil {
		return x.LowerPort
	}
	return 0
}

func (x *ACL_Rule_IpRule_PortRange) GetUpperPort() uint32 {
	if x != nil {
		return x.UpperPort
	}
	return 0
}

type ACL_Rule_IpRule_Tcp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestinationPortRange *ACL_Rule_IpRule_PortRange `protobuf:"bytes,1,opt,name=destination_port_range,json=destinationPortRange,proto3" json:"destination_port_range,omitempty"`
	SourcePortRange      *ACL_Rule_IpRule_PortRange `protobuf:"bytes,2,opt,name=source_port_range,json=sourcePortRange,proto3" json:"source_port_range,omitempty"`
	// Binary mask for tcp flags to match. MSB order (FIN at position 0).
	// Applied as logical AND to tcp flags field of the packet being matched,
	// before it is compared with tcp-flags-value.
	TcpFlagsMask uint32 `protobuf:"varint,3,opt,name=tcp_flags_mask,json=tcpFlagsMask,proto3" json:"tcp_flags_mask,omitempty"`
	// Binary value for tcp flags to match. MSB order (FIN at position 0).
	// Before tcp-flags-value is compared with tcp flags field of the packet being matched,
	// tcp-flags-mask is applied to packet field value.
	TcpFlagsValue uint32 `protobuf:"varint,4,opt,name=tcp_flags_value,json=tcpFlagsValue,proto3" json:"tcp_flags_value,omitempty"`
}

func (x *ACL_Rule_IpRule_Tcp) Reset() {
	*x = ACL_Rule_IpRule_Tcp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ligato_vpp_acl_acl_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ACL_Rule_IpRule_Tcp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ACL_Rule_IpRule_Tcp) ProtoMessage() {}

func (x *ACL_Rule_IpRule_Tcp) ProtoReflect() protoreflect.Message {
	mi := &file_ligato_vpp_acl_acl_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ACL_Rule_IpRule_Tcp.ProtoReflect.Descriptor instead.
func (*ACL_Rule_IpRule_Tcp) Descriptor() ([]byte, []int) {
	return file_ligato_vpp_acl_acl_proto_rawDescGZIP(), []int{0, 0, 0, 3}
}

func (x *ACL_Rule_IpRule_Tcp) GetDestinationPortRange() *ACL_Rule_IpRule_PortRange {
	if x != nil {
		return x.DestinationPortRange
	}
	return nil
}

func (x *ACL_Rule_IpRule_Tcp) GetSourcePortRange() *ACL_Rule_IpRule_PortRange {
	if x != nil {
		return x.SourcePortRange
	}
	return nil
}

func (x *ACL_Rule_IpRule_Tcp) GetTcpFlagsMask() uint32 {
	if x != nil {
		return x.TcpFlagsMask
	}
	return 0
}

func (x *ACL_Rule_IpRule_Tcp) GetTcpFlagsValue() uint32 {
	if x != nil {
		return x.TcpFlagsValue
	}
	return 0
}

type ACL_Rule_IpRule_Udp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestinationPortRange *ACL_Rule_IpRule_PortRange `protobuf:"bytes,1,opt,name=destination_port_range,json=destinationPortRange,proto3" json:"destination_port_range,omitempty"`
	SourcePortRange      *ACL_Rule_IpRule_PortRange `protobuf:"bytes,2,opt,name=source_port_range,json=sourcePortRange,proto3" json:"source_port_range,omitempty"`
}

func (x *ACL_Rule_IpRule_Udp) Reset() {
	*x = ACL_Rule_IpRule_Udp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ligato_vpp_acl_acl_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ACL_Rule_IpRule_Udp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ACL_Rule_IpRule_Udp) ProtoMessage() {}

func (x *ACL_Rule_IpRule_Udp) ProtoReflect() protoreflect.Message {
	mi := &file_ligato_vpp_acl_acl_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ACL_Rule_IpRule_Udp.ProtoReflect.Descriptor instead.
func (*ACL_Rule_IpRule_Udp) Descriptor() ([]byte, []int) {
	return file_ligato_vpp_acl_acl_proto_rawDescGZIP(), []int{0, 0, 0, 4}
}

func (x *ACL_Rule_IpRule_Udp) GetDestinationPortRange() *ACL_Rule_IpRule_PortRange {
	if x != nil {
		return x.DestinationPortRange
	}
	return nil
}

func (x *ACL_Rule_IpRule_Udp) GetSourcePortRange() *ACL_Rule_IpRule_PortRange {
	if x != nil {
		return x.SourcePortRange
	}
	return nil
}

type ACL_Rule_IpRule_Icmp_Range struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	First uint32 `protobuf:"varint,1,opt,name=first,proto3" json:"first,omitempty"`
	Last  uint32 `protobuf:"varint,2,opt,name=last,proto3" json:"last,omitempty"`
}

func (x *ACL_Rule_IpRule_Icmp_Range) Reset() {
	*x = ACL_Rule_IpRule_Icmp_Range{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ligato_vpp_acl_acl_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ACL_Rule_IpRule_Icmp_Range) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ACL_Rule_IpRule_Icmp_Range) ProtoMessage() {}

func (x *ACL_Rule_IpRule_Icmp_Range) ProtoReflect() protoreflect.Message {
	mi := &file_ligato_vpp_acl_acl_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ACL_Rule_IpRule_Icmp_Range.ProtoReflect.Descriptor instead.
func (*ACL_Rule_IpRule_Icmp_Range) Descriptor() ([]byte, []int) {
	return file_ligato_vpp_acl_acl_proto_rawDescGZIP(), []int{0, 0, 0, 1, 0}
}

func (x *ACL_Rule_IpRule_Icmp_Range) GetFirst() uint32 {
	if x != nil {
		return x.First
	}
	return 0
}

func (x *ACL_Rule_IpRule_Icmp_Range) GetLast() uint32 {
	if x != nil {
		return x.Last
	}
	return 0
}

var File_ligato_vpp_acl_acl_proto protoreflect.FileDescriptor

var file_ligato_vpp_acl_acl_proto_rawDesc = []byte{
	0x0a, 0x18, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2f, 0x76, 0x70, 0x70, 0x2f, 0x61, 0x63, 0x6c,
	0x2f, 0x61, 0x63, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x6c, 0x69, 0x67, 0x61,
	0x74, 0x6f, 0x2e, 0x76, 0x70, 0x70, 0x2e, 0x61, 0x63, 0x6c, 0x22, 0xdd, 0x0d, 0x0a, 0x03, 0x41,
	0x43, 0x4c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2e, 0x76,
	0x70, 0x70, 0x2e, 0x61, 0x63, 0x6c, 0x2e, 0x41, 0x43, 0x4c, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x69, 0x67,
	0x61, 0x74, 0x6f, 0x2e, 0x76, 0x70, 0x70, 0x2e, 0x61, 0x63, 0x6c, 0x2e, 0x41, 0x43, 0x4c, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x1a, 0x91, 0x0c, 0x0a, 0x04, 0x52, 0x75, 0x6c, 0x65, 0x12,
	0x37, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1f, 0x2e, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2e, 0x76, 0x70, 0x70, 0x2e, 0x61, 0x63, 0x6c,
	0x2e, 0x41, 0x43, 0x4c, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x07, 0x69, 0x70, 0x5f, 0x72,
	0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x69, 0x67, 0x61,
	0x74, 0x6f, 0x2e, 0x76, 0x70, 0x70, 0x2e, 0x61, 0x63, 0x6c, 0x2e, 0x41, 0x43, 0x4c, 0x2e, 0x52,
	0x75, 0x6c, 0x65, 0x2e, 0x49, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x06, 0x69, 0x70, 0x52, 0x75,
	0x6c, 0x65, 0x12, 0x41, 0x0a, 0x0a, 0x6d, 0x61, 0x63, 0x69, 0x70, 0x5f, 0x72, 0x75, 0x6c, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2e,
	0x76, 0x70, 0x70, 0x2e, 0x61, 0x63, 0x6c, 0x2e, 0x41, 0x43, 0x4c, 0x2e, 0x52, 0x75, 0x6c, 0x65,
	0x2e, 0x4d, 0x61, 0x63, 0x49, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x09, 0x6d, 0x61, 0x63, 0x69,
	0x70, 0x52, 0x75, 0x6c, 0x65, 0x1a, 0xd7, 0x08, 0x0a, 0x06, 0x49, 0x70, 0x52, 0x75, 0x6c, 0x65,
	0x12, 0x32, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6c,
	0x69, 0x67, 0x61, 0x74, 0x6f, 0x2e, 0x76, 0x70, 0x70, 0x2e, 0x61, 0x63, 0x6c, 0x2e, 0x41, 0x43,
	0x4c, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x49, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x49, 0x70,
	0x52, 0x02, 0x69, 0x70, 0x12, 0x38, 0x0a, 0x04, 0x69, 0x63, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2e, 0x76, 0x70, 0x70, 0x2e,
	0x61, 0x63, 0x6c, 0x2e, 0x41, 0x43, 0x4c, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x49, 0x70, 0x52,
	0x75, 0x6c, 0x65, 0x2e, 0x49, 0x63, 0x6d, 0x70, 0x52, 0x04, 0x69, 0x63, 0x6d, 0x70, 0x12, 0x35,
	0x0a, 0x03, 0x74, 0x63, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x69,
	0x67, 0x61, 0x74, 0x6f, 0x2e, 0x76, 0x70, 0x70, 0x2e, 0x61, 0x63, 0x6c, 0x2e, 0x41, 0x43, 0x4c,
	0x2e, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x49, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x54, 0x63, 0x70,
	0x52, 0x03, 0x74, 0x63, 0x70, 0x12, 0x35, 0x0a, 0x03, 0x75, 0x64, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2e, 0x76, 0x70, 0x70, 0x2e,
	0x61, 0x63, 0x6c, 0x2e, 0x41, 0x43, 0x4c, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x49, 0x70, 0x52,
	0x75, 0x6c, 0x65, 0x2e, 0x55, 0x64, 0x70, 0x52, 0x03, 0x75, 0x64, 0x70, 0x1a, 0x5c, 0x0a, 0x02,
	0x49, 0x70, 0x12, 0x2f, 0x0a, 0x13, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x1a, 0xf9, 0x01, 0x0a, 0x04, 0x49,
	0x63, 0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x63, 0x6d, 0x70, 0x76, 0x36, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x63, 0x6d, 0x70, 0x76, 0x36, 0x12, 0x52, 0x0a, 0x0f, 0x69,
	0x63, 0x6d, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2e, 0x76, 0x70,
	0x70, 0x2e, 0x61, 0x63, 0x6c, 0x2e, 0x41, 0x43, 0x4c, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x49,
	0x70, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x49, 0x63, 0x6d, 0x70, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x0d, 0x69, 0x63, 0x6d, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x52, 0x0a, 0x0f, 0x69, 0x63, 0x6d, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6c, 0x69, 0x67, 0x61, 0x74,
	0x6f, 0x2e, 0x76, 0x70, 0x70, 0x2e, 0x61, 0x63, 0x6c, 0x2e, 0x41, 0x43, 0x4c, 0x2e, 0x52, 0x75,
	0x6c, 0x65, 0x2e, 0x49, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x49, 0x63, 0x6d, 0x70, 0x2e, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x0d, 0x69, 0x63, 0x6d, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x1a, 0x31, 0x0a, 0x05, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x1a, 0x49, 0x0a, 0x09, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x50, 0x6f,
	0x72, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x75, 0x70, 0x70, 0x65, 0x72, 0x50, 0x6f, 0x72,
	0x74, 0x1a, 0x8b, 0x02, 0x0a, 0x03, 0x54, 0x63, 0x70, 0x12, 0x5f, 0x0a, 0x16, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6c, 0x69, 0x67, 0x61,
	0x74, 0x6f, 0x2e, 0x76, 0x70, 0x70, 0x2e, 0x61, 0x63, 0x6c, 0x2e, 0x41, 0x43, 0x4c, 0x2e, 0x52,
	0x75, 0x6c, 0x65, 0x2e, 0x49, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x14, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x55, 0x0a, 0x11, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2e, 0x76,
	0x70, 0x70, 0x2e, 0x61, 0x63, 0x6c, 0x2e, 0x41, 0x43, 0x4c, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x2e,
	0x49, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x63, 0x70, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x5f, 0x6d,
	0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x63, 0x70, 0x46, 0x6c,
	0x61, 0x67, 0x73, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x63, 0x70, 0x5f, 0x66,
	0x6c, 0x61, 0x67, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x74, 0x63, 0x70, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a,
	0xbd, 0x01, 0x0a, 0x03, 0x55, 0x64, 0x70, 0x12, 0x5f, 0x0a, 0x16, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f,
	0x2e, 0x76, 0x70, 0x70, 0x2e, 0x61, 0x63, 0x6c, 0x2e, 0x41, 0x43, 0x4c, 0x2e, 0x52, 0x75, 0x6c,
	0x65, 0x2e, 0x49, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x14, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x6f, 0x72, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x55, 0x0a, 0x11, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2e, 0x76, 0x70, 0x70,
	0x2e, 0x61, 0x63, 0x6c, 0x2e, 0x41, 0x43, 0x4c, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x49, 0x70,
	0x52, 0x75, 0x6c, 0x65, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x1a,
	0xcb, 0x01, 0x0a, 0x09, 0x4d, 0x61, 0x63, 0x49, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x13, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x63, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6d, 0x61, 0x73,
	0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d,
	0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x2b, 0x0a,
	0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x45, 0x4e, 0x59, 0x10,
	0x00, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x54, 0x10, 0x01, 0x12, 0x0b, 0x0a,
	0x07, 0x52, 0x45, 0x46, 0x4c, 0x45, 0x43, 0x54, 0x10, 0x02, 0x1a, 0x3e, 0x0a, 0x0a, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x42, 0x38, 0x5a, 0x36, 0x67, 0x6f,
	0x2e, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2e, 0x69, 0x6f, 0x2f, 0x76, 0x70, 0x70, 0x2d, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x33, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6c, 0x69,
	0x67, 0x61, 0x74, 0x6f, 0x2f, 0x76, 0x70, 0x70, 0x2f, 0x61, 0x63, 0x6c, 0x3b, 0x76, 0x70, 0x70,
	0x5f, 0x61, 0x63, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ligato_vpp_acl_acl_proto_rawDescOnce sync.Once
	file_ligato_vpp_acl_acl_proto_rawDescData = file_ligato_vpp_acl_acl_proto_rawDesc
)

func file_ligato_vpp_acl_acl_proto_rawDescGZIP() []byte {
	file_ligato_vpp_acl_acl_proto_rawDescOnce.Do(func() {
		file_ligato_vpp_acl_acl_proto_rawDescData = protoimpl.X.CompressGZIP(file_ligato_vpp_acl_acl_proto_rawDescData)
	})
	return file_ligato_vpp_acl_acl_proto_rawDescData
}

var file_ligato_vpp_acl_acl_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_ligato_vpp_acl_acl_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_ligato_vpp_acl_acl_proto_goTypes = []interface{}{
	(ACL_Rule_Action)(0),               // 0: ligato.vpp.acl.ACL.Rule.Action
	(*ACL)(nil),                        // 1: ligato.vpp.acl.ACL
	(*ACL_Rule)(nil),                   // 2: ligato.vpp.acl.ACL.Rule
	(*ACL_Interfaces)(nil),             // 3: ligato.vpp.acl.ACL.Interfaces
	(*ACL_Rule_IpRule)(nil),            // 4: ligato.vpp.acl.ACL.Rule.IpRule
	(*ACL_Rule_MacIpRule)(nil),         // 5: ligato.vpp.acl.ACL.Rule.MacIpRule
	(*ACL_Rule_IpRule_Ip)(nil),         // 6: ligato.vpp.acl.ACL.Rule.IpRule.Ip
	(*ACL_Rule_IpRule_Icmp)(nil),       // 7: ligato.vpp.acl.ACL.Rule.IpRule.Icmp
	(*ACL_Rule_IpRule_PortRange)(nil),  // 8: ligato.vpp.acl.ACL.Rule.IpRule.PortRange
	(*ACL_Rule_IpRule_Tcp)(nil),        // 9: ligato.vpp.acl.ACL.Rule.IpRule.Tcp
	(*ACL_Rule_IpRule_Udp)(nil),        // 10: ligato.vpp.acl.ACL.Rule.IpRule.Udp
	(*ACL_Rule_IpRule_Icmp_Range)(nil), // 11: ligato.vpp.acl.ACL.Rule.IpRule.Icmp.Range
}
var file_ligato_vpp_acl_acl_proto_depIdxs = []int32{
	2,  // 0: ligato.vpp.acl.ACL.rules:type_name -> ligato.vpp.acl.ACL.Rule
	3,  // 1: ligato.vpp.acl.ACL.interfaces:type_name -> ligato.vpp.acl.ACL.Interfaces
	0,  // 2: ligato.vpp.acl.ACL.Rule.action:type_name -> ligato.vpp.acl.ACL.Rule.Action
	4,  // 3: ligato.vpp.acl.ACL.Rule.ip_rule:type_name -> ligato.vpp.acl.ACL.Rule.IpRule
	5,  // 4: ligato.vpp.acl.ACL.Rule.macip_rule:type_name -> ligato.vpp.acl.ACL.Rule.MacIpRule
	6,  // 5: ligato.vpp.acl.ACL.Rule.IpRule.ip:type_name -> ligato.vpp.acl.ACL.Rule.IpRule.Ip
	7,  // 6: ligato.vpp.acl.ACL.Rule.IpRule.icmp:type_name -> ligato.vpp.acl.ACL.Rule.IpRule.Icmp
	9,  // 7: ligato.vpp.acl.ACL.Rule.IpRule.tcp:type_name -> ligato.vpp.acl.ACL.Rule.IpRule.Tcp
	10, // 8: ligato.vpp.acl.ACL.Rule.IpRule.udp:type_name -> ligato.vpp.acl.ACL.Rule.IpRule.Udp
	11, // 9: ligato.vpp.acl.ACL.Rule.IpRule.Icmp.icmp_code_range:type_name -> ligato.vpp.acl.ACL.Rule.IpRule.Icmp.Range
	11, // 10: ligato.vpp.acl.ACL.Rule.IpRule.Icmp.icmp_type_range:type_name -> ligato.vpp.acl.ACL.Rule.IpRule.Icmp.Range
	8,  // 11: ligato.vpp.acl.ACL.Rule.IpRule.Tcp.destination_port_range:type_name -> ligato.vpp.acl.ACL.Rule.IpRule.PortRange
	8,  // 12: ligato.vpp.acl.ACL.Rule.IpRule.Tcp.source_port_range:type_name -> ligato.vpp.acl.ACL.Rule.IpRule.PortRange
	8,  // 13: ligato.vpp.acl.ACL.Rule.IpRule.Udp.destination_port_range:type_name -> ligato.vpp.acl.ACL.Rule.IpRule.PortRange
	8,  // 14: ligato.vpp.acl.ACL.Rule.IpRule.Udp.source_port_range:type_name -> ligato.vpp.acl.ACL.Rule.IpRule.PortRange
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_ligato_vpp_acl_acl_proto_init() }
func file_ligato_vpp_acl_acl_proto_init() {
	if File_ligato_vpp_acl_acl_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ligato_vpp_acl_acl_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ACL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ligato_vpp_acl_acl_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ACL_Rule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ligato_vpp_acl_acl_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ACL_Interfaces); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ligato_vpp_acl_acl_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ACL_Rule_IpRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ligato_vpp_acl_acl_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ACL_Rule_MacIpRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ligato_vpp_acl_acl_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ACL_Rule_IpRule_Ip); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ligato_vpp_acl_acl_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ACL_Rule_IpRule_Icmp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ligato_vpp_acl_acl_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ACL_Rule_IpRule_PortRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ligato_vpp_acl_acl_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ACL_Rule_IpRule_Tcp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ligato_vpp_acl_acl_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ACL_Rule_IpRule_Udp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ligato_vpp_acl_acl_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ACL_Rule_IpRule_Icmp_Range); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ligato_vpp_acl_acl_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ligato_vpp_acl_acl_proto_goTypes,
		DependencyIndexes: file_ligato_vpp_acl_acl_proto_depIdxs,
		EnumInfos:         file_ligato_vpp_acl_acl_proto_enumTypes,
		MessageInfos:      file_ligato_vpp_acl_acl_proto_msgTypes,
	}.Build()
	File_ligato_vpp_acl_acl_proto = out.File
	file_ligato_vpp_acl_acl_proto_rawDesc = nil
	file_ligato_vpp_acl_acl_proto_goTypes = nil
	file_ligato_vpp_acl_acl_proto_depIdxs = nil
}
