// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.4
// source: ligato/vpp/nat/nat.proto

package vpp_nat

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Available protocols.
type DNat44_Protocol int32

const (
	DNat44_TCP DNat44_Protocol = 0
	DNat44_UDP DNat44_Protocol = 1
	// ICMP is not permitted for load balanced entries.
	DNat44_ICMP DNat44_Protocol = 2
)

// Enum value maps for DNat44_Protocol.
var (
	DNat44_Protocol_name = map[int32]string{
		0: "TCP",
		1: "UDP",
		2: "ICMP",
	}
	DNat44_Protocol_value = map[string]int32{
		"TCP":  0,
		"UDP":  1,
		"ICMP": 2,
	}
)

func (x DNat44_Protocol) Enum() *DNat44_Protocol {
	p := new(DNat44_Protocol)
	*p = x
	return p
}

func (x DNat44_Protocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DNat44_Protocol) Descriptor() protoreflect.EnumDescriptor {
	return file_ligato_vpp_nat_nat_proto_enumTypes[0].Descriptor()
}

func (DNat44_Protocol) Type() protoreflect.EnumType {
	return &file_ligato_vpp_nat_nat_proto_enumTypes[0]
}

func (x DNat44_Protocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DNat44_Protocol.Descriptor instead.
func (DNat44_Protocol) EnumDescriptor() ([]byte, []int) {
	return file_ligato_vpp_nat_nat_proto_rawDescGZIP(), []int{1, 0}
}

// Available twice-NAT modes.
type DNat44_StaticMapping_TwiceNatMode int32

const (
	DNat44_StaticMapping_DISABLED DNat44_StaticMapping_TwiceNatMode = 0
	DNat44_StaticMapping_ENABLED  DNat44_StaticMapping_TwiceNatMode = 1
	DNat44_StaticMapping_SELF     DNat44_StaticMapping_TwiceNatMode = 2
)

// Enum value maps for DNat44_StaticMapping_TwiceNatMode.
var (
	DNat44_StaticMapping_TwiceNatMode_name = map[int32]string{
		0: "DISABLED",
		1: "ENABLED",
		2: "SELF",
	}
	DNat44_StaticMapping_TwiceNatMode_value = map[string]int32{
		"DISABLED": 0,
		"ENABLED":  1,
		"SELF":     2,
	}
)

func (x DNat44_StaticMapping_TwiceNatMode) Enum() *DNat44_StaticMapping_TwiceNatMode {
	p := new(DNat44_StaticMapping_TwiceNatMode)
	*p = x
	return p
}

func (x DNat44_StaticMapping_TwiceNatMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DNat44_StaticMapping_TwiceNatMode) Descriptor() protoreflect.EnumDescriptor {
	return file_ligato_vpp_nat_nat_proto_enumTypes[1].Descriptor()
}

func (DNat44_StaticMapping_TwiceNatMode) Type() protoreflect.EnumType {
	return &file_ligato_vpp_nat_nat_proto_enumTypes[1]
}

func (x DNat44_StaticMapping_TwiceNatMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DNat44_StaticMapping_TwiceNatMode.Descriptor instead.
func (DNat44_StaticMapping_TwiceNatMode) EnumDescriptor() ([]byte, []int) {
	return file_ligato_vpp_nat_nat_proto_rawDescGZIP(), []int{1, 0, 0}
}

// Nat44Global defines global NAT44 configuration.
type Nat44Global struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Enable/disable forwarding.
	Forwarding bool `protobuf:"varint,1,opt,name=forwarding,proto3" json:"forwarding,omitempty"`
	// List of NAT-enabled interfaces. Deprecated - use separate Nat44Interface entries instead.
	//
	// Deprecated: Do not use.
	NatInterfaces []*Nat44Global_Interface `protobuf:"bytes,2,rep,name=nat_interfaces,json=natInterfaces,proto3" json:"nat_interfaces,omitempty"`
	// Address pool used for source IP NAT. Deprecated - use separate Nat44AddressPool entries instead.
	//
	// Deprecated: Do not use.
	AddressPool []*Nat44Global_Address `protobuf:"bytes,3,rep,name=address_pool,json=addressPool,proto3" json:"address_pool,omitempty"`
	// Virtual reassembly for IPv4.
	VirtualReassembly *VirtualReassembly `protobuf:"bytes,4,opt,name=virtual_reassembly,json=virtualReassembly,proto3" json:"virtual_reassembly,omitempty"`
}

func (x *Nat44Global) Reset() {
	*x = Nat44Global{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ligato_vpp_nat_nat_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Nat44Global) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Nat44Global) ProtoMessage() {}

func (x *Nat44Global) ProtoReflect() protoreflect.Message {
	mi := &file_ligato_vpp_nat_nat_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Nat44Global.ProtoReflect.Descriptor instead.
func (*Nat44Global) Descriptor() ([]byte, []int) {
	return file_ligato_vpp_nat_nat_proto_rawDescGZIP(), []int{0}
}

func (x *Nat44Global) GetForwarding() bool {
	if x != nil {
		return x.Forwarding
	}
	return false
}

// Deprecated: Do not use.
func (x *Nat44Global) GetNatInterfaces() []*Nat44Global_Interface {
	if x != nil {
		return x.NatInterfaces
	}
	return nil
}

// Deprecated: Do not use.
func (x *Nat44Global) GetAddressPool() []*Nat44Global_Address {
	if x != nil {
		return x.AddressPool
	}
	return nil
}

func (x *Nat44Global) GetVirtualReassembly() *VirtualReassembly {
	if x != nil {
		return x.VirtualReassembly
	}
	return nil
}

// DNat44 defines destination NAT44 configuration.
type DNat44 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier for the DNAT configuration.
	Label string `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	// A list of static mappings in DNAT.
	StMappings []*DNat44_StaticMapping `protobuf:"bytes,2,rep,name=st_mappings,json=stMappings,proto3" json:"st_mappings,omitempty"`
	// A list of identity mappings in DNAT.
	IdMappings []*DNat44_IdentityMapping `protobuf:"bytes,3,rep,name=id_mappings,json=idMappings,proto3" json:"id_mappings,omitempty"`
}

func (x *DNat44) Reset() {
	*x = DNat44{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ligato_vpp_nat_nat_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DNat44) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DNat44) ProtoMessage() {}

func (x *DNat44) ProtoReflect() protoreflect.Message {
	mi := &file_ligato_vpp_nat_nat_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DNat44.ProtoReflect.Descriptor instead.
func (*DNat44) Descriptor() ([]byte, []int) {
	return file_ligato_vpp_nat_nat_proto_rawDescGZIP(), []int{1}
}

func (x *DNat44) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *DNat44) GetStMappings() []*DNat44_StaticMapping {
	if x != nil {
		return x.StMappings
	}
	return nil
}

func (x *DNat44) GetIdMappings() []*DNat44_IdentityMapping {
	if x != nil {
		return x.IdMappings
	}
	return nil
}

// Nat44Interface defines a local network interfaces enabled for NAT44.
type Nat44Interface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Interface name (logical).
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Enable/disable NAT on inside.
	NatInside bool `protobuf:"varint,2,opt,name=nat_inside,json=natInside,proto3" json:"nat_inside,omitempty"`
	// Enable/disable NAT on outside.
	NatOutside bool `protobuf:"varint,3,opt,name=nat_outside,json=natOutside,proto3" json:"nat_outside,omitempty"`
	//  Enable/disable output feature.
	OutputFeature bool `protobuf:"varint,4,opt,name=output_feature,json=outputFeature,proto3" json:"output_feature,omitempty"`
}

func (x *Nat44Interface) Reset() {
	*x = Nat44Interface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ligato_vpp_nat_nat_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Nat44Interface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Nat44Interface) ProtoMessage() {}

func (x *Nat44Interface) ProtoReflect() protoreflect.Message {
	mi := &file_ligato_vpp_nat_nat_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Nat44Interface.ProtoReflect.Descriptor instead.
func (*Nat44Interface) Descriptor() ([]byte, []int) {
	return file_ligato_vpp_nat_nat_proto_rawDescGZIP(), []int{2}
}

func (x *Nat44Interface) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Nat44Interface) GetNatInside() bool {
	if x != nil {
		return x.NatInside
	}
	return false
}

func (x *Nat44Interface) GetNatOutside() bool {
	if x != nil {
		return x.NatOutside
	}
	return false
}

func (x *Nat44Interface) GetOutputFeature() bool {
	if x != nil {
		return x.OutputFeature
	}
	return false
}

// Nat44AddressPool defines an address pool used for NAT44.
type Nat44AddressPool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// VRF id of tenant, 0xFFFFFFFF means independent of VRF.
	// Non-zero (and not all-ones) VRF has to be explicitly created (see api/models/vpp/l3/vrf.proto).
	VrfId uint32 `protobuf:"varint,1,opt,name=vrf_id,json=vrfId,proto3" json:"vrf_id,omitempty"`
	// First IP address of the pool.
	FirstIp string `protobuf:"bytes,2,opt,name=first_ip,json=firstIp,proto3" json:"first_ip,omitempty"`
	// Last IP address of the pool. Should be higher than first_ip or empty.
	LastIp string `protobuf:"bytes,3,opt,name=last_ip,json=lastIp,proto3" json:"last_ip,omitempty"`
	// Enable/disable twice NAT.
	TwiceNat bool `protobuf:"varint,4,opt,name=twice_nat,json=twiceNat,proto3" json:"twice_nat,omitempty"`
}

func (x *Nat44AddressPool) Reset() {
	*x = Nat44AddressPool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ligato_vpp_nat_nat_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Nat44AddressPool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Nat44AddressPool) ProtoMessage() {}

func (x *Nat44AddressPool) ProtoReflect() protoreflect.Message {
	mi := &file_ligato_vpp_nat_nat_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Nat44AddressPool.ProtoReflect.Descriptor instead.
func (*Nat44AddressPool) Descriptor() ([]byte, []int) {
	return file_ligato_vpp_nat_nat_proto_rawDescGZIP(), []int{3}
}

func (x *Nat44AddressPool) GetVrfId() uint32 {
	if x != nil {
		return x.VrfId
	}
	return 0
}

func (x *Nat44AddressPool) GetFirstIp() string {
	if x != nil {
		return x.FirstIp
	}
	return ""
}

func (x *Nat44AddressPool) GetLastIp() string {
	if x != nil {
		return x.LastIp
	}
	return ""
}

func (x *Nat44AddressPool) GetTwiceNat() bool {
	if x != nil {
		return x.TwiceNat
	}
	return false
}

// VirtualReassembly defines NAT virtual reassembly settings.
type VirtualReassembly struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reassembly timeout.
	Timeout uint32 `protobuf:"varint,1,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// Maximum number of concurrent reassemblies.
	MaxReassemblies uint32 `protobuf:"varint,2,opt,name=max_reassemblies,json=maxReassemblies,proto3" json:"max_reassemblies,omitempty"`
	// Maximum number of fragments per reassembly.
	MaxFragments uint32 `protobuf:"varint,3,opt,name=max_fragments,json=maxFragments,proto3" json:"max_fragments,omitempty"`
	// If set to true fragments are dropped, translated otherwise.
	DropFragments bool `protobuf:"varint,4,opt,name=drop_fragments,json=dropFragments,proto3" json:"drop_fragments,omitempty"`
}

func (x *VirtualReassembly) Reset() {
	*x = VirtualReassembly{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ligato_vpp_nat_nat_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualReassembly) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualReassembly) ProtoMessage() {}

func (x *VirtualReassembly) ProtoReflect() protoreflect.Message {
	mi := &file_ligato_vpp_nat_nat_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualReassembly.ProtoReflect.Descriptor instead.
func (*VirtualReassembly) Descriptor() ([]byte, []int) {
	return file_ligato_vpp_nat_nat_proto_rawDescGZIP(), []int{4}
}

func (x *VirtualReassembly) GetTimeout() uint32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *VirtualReassembly) GetMaxReassemblies() uint32 {
	if x != nil {
		return x.MaxReassemblies
	}
	return 0
}

func (x *VirtualReassembly) GetMaxFragments() uint32 {
	if x != nil {
		return x.MaxFragments
	}
	return 0
}

func (x *VirtualReassembly) GetDropFragments() bool {
	if x != nil {
		return x.DropFragments
	}
	return false
}

// Interface defines a network interface enabled for NAT.
type Nat44Global_Interface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Interface name (logical).
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Distinguish between inside/outside interface.
	IsInside bool `protobuf:"varint,2,opt,name=is_inside,json=isInside,proto3" json:"is_inside,omitempty"`
	// Enable/disable output feature.
	OutputFeature bool `protobuf:"varint,3,opt,name=output_feature,json=outputFeature,proto3" json:"output_feature,omitempty"`
}

func (x *Nat44Global_Interface) Reset() {
	*x = Nat44Global_Interface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ligato_vpp_nat_nat_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Nat44Global_Interface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Nat44Global_Interface) ProtoMessage() {}

func (x *Nat44Global_Interface) ProtoReflect() protoreflect.Message {
	mi := &file_ligato_vpp_nat_nat_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Nat44Global_Interface.ProtoReflect.Descriptor instead.
func (*Nat44Global_Interface) Descriptor() ([]byte, []int) {
	return file_ligato_vpp_nat_nat_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Nat44Global_Interface) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Nat44Global_Interface) GetIsInside() bool {
	if x != nil {
		return x.IsInside
	}
	return false
}

func (x *Nat44Global_Interface) GetOutputFeature() bool {
	if x != nil {
		return x.OutputFeature
	}
	return false
}

// Address defines an address to be used for source IP NAT.
type Nat44Global_Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IPv4 address.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// VRF id of tenant, 0xFFFFFFFF means independent of VRF.
	// Non-zero (and not all-ones) VRF has to be explicitly created (see api/models/vpp/l3/vrf.proto).
	VrfId uint32 `protobuf:"varint,2,opt,name=vrf_id,json=vrfId,proto3" json:"vrf_id,omitempty"`
	// Enable/disable twice NAT.
	TwiceNat bool `protobuf:"varint,3,opt,name=twice_nat,json=twiceNat,proto3" json:"twice_nat,omitempty"`
}

func (x *Nat44Global_Address) Reset() {
	*x = Nat44Global_Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ligato_vpp_nat_nat_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Nat44Global_Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Nat44Global_Address) ProtoMessage() {}

func (x *Nat44Global_Address) ProtoReflect() protoreflect.Message {
	mi := &file_ligato_vpp_nat_nat_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Nat44Global_Address.ProtoReflect.Descriptor instead.
func (*Nat44Global_Address) Descriptor() ([]byte, []int) {
	return file_ligato_vpp_nat_nat_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Nat44Global_Address) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Nat44Global_Address) GetVrfId() uint32 {
	if x != nil {
		return x.VrfId
	}
	return 0
}

func (x *Nat44Global_Address) GetTwiceNat() bool {
	if x != nil {
		return x.TwiceNat
	}
	return false
}

// StaticMapping defines a list of static mappings in DNAT.
type DNat44_StaticMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Interface to use external IP from; preferred over external_ip.
	ExternalInterface string `protobuf:"bytes,1,opt,name=external_interface,json=externalInterface,proto3" json:"external_interface,omitempty"`
	// External address.
	ExternalIp string `protobuf:"bytes,2,opt,name=external_ip,json=externalIp,proto3" json:"external_ip,omitempty"`
	// Port (do not set for address mapping).
	ExternalPort uint32 `protobuf:"varint,3,opt,name=external_port,json=externalPort,proto3" json:"external_port,omitempty"`
	// List of local IP addresses. If there is more than one entry, load-balancing is enabled.
	LocalIps []*DNat44_StaticMapping_LocalIP `protobuf:"bytes,4,rep,name=local_ips,json=localIps,proto3" json:"local_ips,omitempty"`
	// Protocol used for static mapping.
	Protocol DNat44_Protocol `protobuf:"varint,5,opt,name=protocol,proto3,enum=ligato.vpp.nat.DNat44_Protocol" json:"protocol,omitempty"`
	// Enable/disable (self-)twice NAT.
	TwiceNat DNat44_StaticMapping_TwiceNatMode `protobuf:"varint,6,opt,name=twice_nat,json=twiceNat,proto3,enum=ligato.vpp.nat.DNat44_StaticMapping_TwiceNatMode" json:"twice_nat,omitempty"`
	// Session affinity. 0 means disabled, otherwise client IP affinity sticky time in seconds.
	SessionAffinity uint32 `protobuf:"varint,7,opt,name=session_affinity,json=sessionAffinity,proto3" json:"session_affinity,omitempty"`
}

func (x *DNat44_StaticMapping) Reset() {
	*x = DNat44_StaticMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ligato_vpp_nat_nat_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DNat44_StaticMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DNat44_StaticMapping) ProtoMessage() {}

func (x *DNat44_StaticMapping) ProtoReflect() protoreflect.Message {
	mi := &file_ligato_vpp_nat_nat_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DNat44_StaticMapping.ProtoReflect.Descriptor instead.
func (*DNat44_StaticMapping) Descriptor() ([]byte, []int) {
	return file_ligato_vpp_nat_nat_proto_rawDescGZIP(), []int{1, 0}
}

func (x *DNat44_StaticMapping) GetExternalInterface() string {
	if x != nil {
		return x.ExternalInterface
	}
	return ""
}

func (x *DNat44_StaticMapping) GetExternalIp() string {
	if x != nil {
		return x.ExternalIp
	}
	return ""
}

func (x *DNat44_StaticMapping) GetExternalPort() uint32 {
	if x != nil {
		return x.ExternalPort
	}
	return 0
}

func (x *DNat44_StaticMapping) GetLocalIps() []*DNat44_StaticMapping_LocalIP {
	if x != nil {
		return x.LocalIps
	}
	return nil
}

func (x *DNat44_StaticMapping) GetProtocol() DNat44_Protocol {
	if x != nil {
		return x.Protocol
	}
	return DNat44_TCP
}

func (x *DNat44_StaticMapping) GetTwiceNat() DNat44_StaticMapping_TwiceNatMode {
	if x != nil {
		return x.TwiceNat
	}
	return DNat44_StaticMapping_DISABLED
}

func (x *DNat44_StaticMapping) GetSessionAffinity() uint32 {
	if x != nil {
		return x.SessionAffinity
	}
	return 0
}

// IdentityMapping defines an identity mapping in DNAT.
type DNat44_IdentityMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// VRF (table) ID. Non-zero VRF has to be explicitly created (see api/models/vpp/l3/vrf.proto).
	VrfId uint32 `protobuf:"varint,1,opt,name=vrf_id,json=vrfId,proto3" json:"vrf_id,omitempty"`
	// Name of the interface to use address from; preferred over ip_address.
	Interface string `protobuf:"bytes,2,opt,name=interface,proto3" json:"interface,omitempty"`
	// IP address.
	IpAddress string `protobuf:"bytes,3,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	// Port (do not set for address mapping).
	Port uint32 `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	// Protocol used for identity mapping.
	Protocol DNat44_Protocol `protobuf:"varint,5,opt,name=protocol,proto3,enum=ligato.vpp.nat.DNat44_Protocol" json:"protocol,omitempty"`
}

func (x *DNat44_IdentityMapping) Reset() {
	*x = DNat44_IdentityMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ligato_vpp_nat_nat_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DNat44_IdentityMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DNat44_IdentityMapping) ProtoMessage() {}

func (x *DNat44_IdentityMapping) ProtoReflect() protoreflect.Message {
	mi := &file_ligato_vpp_nat_nat_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DNat44_IdentityMapping.ProtoReflect.Descriptor instead.
func (*DNat44_IdentityMapping) Descriptor() ([]byte, []int) {
	return file_ligato_vpp_nat_nat_proto_rawDescGZIP(), []int{1, 1}
}

func (x *DNat44_IdentityMapping) GetVrfId() uint32 {
	if x != nil {
		return x.VrfId
	}
	return 0
}

func (x *DNat44_IdentityMapping) GetInterface() string {
	if x != nil {
		return x.Interface
	}
	return ""
}

func (x *DNat44_IdentityMapping) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *DNat44_IdentityMapping) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *DNat44_IdentityMapping) GetProtocol() DNat44_Protocol {
	if x != nil {
		return x.Protocol
	}
	return DNat44_TCP
}

// LocalIP defines a local IP addresses.
type DNat44_StaticMapping_LocalIP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// VRF (table) ID. Non-zero VRF has to be explicitly created (see api/models/vpp/l3/vrf.proto).
	VrfId uint32 `protobuf:"varint,1,opt,name=vrf_id,json=vrfId,proto3" json:"vrf_id,omitempty"`
	// Local IP address).
	LocalIp string `protobuf:"bytes,2,opt,name=local_ip,json=localIp,proto3" json:"local_ip,omitempty"`
	// Port (do not set for address mapping).
	LocalPort uint32 `protobuf:"varint,3,opt,name=local_port,json=localPort,proto3" json:"local_port,omitempty"`
	// Probability level for load-balancing mode.
	Probability uint32 `protobuf:"varint,4,opt,name=probability,proto3" json:"probability,omitempty"`
}

func (x *DNat44_StaticMapping_LocalIP) Reset() {
	*x = DNat44_StaticMapping_LocalIP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ligato_vpp_nat_nat_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DNat44_StaticMapping_LocalIP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DNat44_StaticMapping_LocalIP) ProtoMessage() {}

func (x *DNat44_StaticMapping_LocalIP) ProtoReflect() protoreflect.Message {
	mi := &file_ligato_vpp_nat_nat_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DNat44_StaticMapping_LocalIP.ProtoReflect.Descriptor instead.
func (*DNat44_StaticMapping_LocalIP) Descriptor() ([]byte, []int) {
	return file_ligato_vpp_nat_nat_proto_rawDescGZIP(), []int{1, 0, 0}
}

func (x *DNat44_StaticMapping_LocalIP) GetVrfId() uint32 {
	if x != nil {
		return x.VrfId
	}
	return 0
}

func (x *DNat44_StaticMapping_LocalIP) GetLocalIp() string {
	if x != nil {
		return x.LocalIp
	}
	return ""
}

func (x *DNat44_StaticMapping_LocalIP) GetLocalPort() uint32 {
	if x != nil {
		return x.LocalPort
	}
	return 0
}

func (x *DNat44_StaticMapping_LocalIP) GetProbability() uint32 {
	if x != nil {
		return x.Probability
	}
	return 0
}

var File_ligato_vpp_nat_nat_proto protoreflect.FileDescriptor

var file_ligato_vpp_nat_nat_proto_rawDesc = []byte{
	0x0a, 0x18, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2f, 0x76, 0x70, 0x70, 0x2f, 0x6e, 0x61, 0x74,
	0x2f, 0x6e, 0x61, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x6c, 0x69, 0x67, 0x61,
	0x74, 0x6f, 0x2e, 0x76, 0x70, 0x70, 0x2e, 0x6e, 0x61, 0x74, 0x22, 0xdb, 0x03, 0x0a, 0x0b, 0x4e,
	0x61, 0x74, 0x34, 0x34, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x50, 0x0a, 0x0e, 0x6e, 0x61,
	0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2e, 0x76, 0x70, 0x70, 0x2e,
	0x6e, 0x61, 0x74, 0x2e, 0x4e, 0x61, 0x74, 0x34, 0x34, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0d, 0x6e,
	0x61, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x0c,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2e, 0x76, 0x70, 0x70, 0x2e,
	0x6e, 0x61, 0x74, 0x2e, 0x4e, 0x61, 0x74, 0x34, 0x34, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0b, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x50, 0x0a, 0x12, 0x76, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2e, 0x76, 0x70,
	0x70, 0x2e, 0x6e, 0x61, 0x74, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x52, 0x65, 0x61,
	0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x52, 0x11, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x52, 0x65, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x1a, 0x63, 0x0a, 0x09, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69,
	0x73, 0x5f, 0x69, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x69, 0x73, 0x49, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x1a,
	0x57, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x76, 0x72, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x72, 0x66, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x77, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x74, 0x77, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x74, 0x22, 0xcc, 0x07, 0x0a, 0x06, 0x44, 0x4e, 0x61,
	0x74, 0x34, 0x34, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x45, 0x0a, 0x0b, 0x73, 0x74, 0x5f,
	0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2e, 0x76, 0x70, 0x70, 0x2e, 0x6e, 0x61, 0x74, 0x2e,
	0x44, 0x4e, 0x61, 0x74, 0x34, 0x34, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x47, 0x0a, 0x0b, 0x69, 0x64, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2e, 0x76,
	0x70, 0x70, 0x2e, 0x6e, 0x61, 0x74, 0x2e, 0x44, 0x4e, 0x61, 0x74, 0x34, 0x34, 0x2e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x69,
	0x64, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0xba, 0x04, 0x0a, 0x0d, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x63, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x2d, 0x0a, 0x12, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74,
	0x12, 0x49, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x70, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2e, 0x76, 0x70, 0x70,
	0x2e, 0x6e, 0x61, 0x74, 0x2e, 0x44, 0x4e, 0x61, 0x74, 0x34, 0x34, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x63, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49,
	0x50, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x70, 0x73, 0x12, 0x3b, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e,
	0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2e, 0x76, 0x70, 0x70, 0x2e, 0x6e, 0x61, 0x74, 0x2e, 0x44,
	0x4e, 0x61, 0x74, 0x34, 0x34, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x4e, 0x0a, 0x09, 0x74, 0x77, 0x69, 0x63,
	0x65, 0x5f, 0x6e, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6c, 0x69,
	0x67, 0x61, 0x74, 0x6f, 0x2e, 0x76, 0x70, 0x70, 0x2e, 0x6e, 0x61, 0x74, 0x2e, 0x44, 0x4e, 0x61,
	0x74, 0x34, 0x34, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x2e, 0x54, 0x77, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x08,
	0x74, 0x77, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x66, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x79, 0x1a, 0x7c, 0x0a, 0x07, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x50, 0x12, 0x15,
	0x0a, 0x06, 0x76, 0x72, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x76, 0x72, 0x66, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x69,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x70,
	0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x22, 0x33, 0x0a, 0x0c, 0x54, 0x77, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x74, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x07, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04,
	0x53, 0x45, 0x4c, 0x46, 0x10, 0x02, 0x1a, 0xb6, 0x01, 0x0a, 0x0f, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x15, 0x0a, 0x06, 0x76, 0x72,
	0x66, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x72, 0x66, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x3b, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2e, 0x76, 0x70,
	0x70, 0x2e, 0x6e, 0x61, 0x74, 0x2e, 0x44, 0x4e, 0x61, 0x74, 0x34, 0x34, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x22,
	0x26, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x07, 0x0a, 0x03, 0x54,
	0x43, 0x50, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x55, 0x44, 0x50, 0x10, 0x01, 0x12, 0x08, 0x0a,
	0x04, 0x49, 0x43, 0x4d, 0x50, 0x10, 0x02, 0x22, 0x8b, 0x01, 0x0a, 0x0e, 0x4e, 0x61, 0x74, 0x34,
	0x34, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x6e, 0x61, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x6e, 0x61, 0x74, 0x49, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x6e, 0x61, 0x74, 0x5f, 0x6f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x6e, 0x61, 0x74, 0x4f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x7a, 0x0a, 0x10, 0x4e, 0x61, 0x74, 0x34, 0x34, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x15, 0x0a, 0x06, 0x76, 0x72, 0x66,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x72, 0x66, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x72, 0x73, 0x74, 0x49, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61,
	0x73, 0x74, 0x49, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x77, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x74, 0x77, 0x69, 0x63, 0x65, 0x4e, 0x61,
	0x74, 0x22, 0xa4, 0x01, 0x0a, 0x11, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x52, 0x65, 0x61,
	0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x12, 0x29, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x73, 0x65, 0x6d,
	0x62, 0x6c, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6d, 0x61, 0x78,
	0x52, 0x65, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x69, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x6d, 0x61, 0x78, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x64, 0x72, 0x6f, 0x70, 0x46,
	0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x38, 0x5a, 0x36, 0x67, 0x6f, 0x2e, 0x6c,
	0x69, 0x67, 0x61, 0x74, 0x6f, 0x2e, 0x69, 0x6f, 0x2f, 0x76, 0x70, 0x70, 0x2d, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x2f, 0x76, 0x33, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6c, 0x69, 0x67, 0x61,
	0x74, 0x6f, 0x2f, 0x76, 0x70, 0x70, 0x2f, 0x6e, 0x61, 0x74, 0x3b, 0x76, 0x70, 0x70, 0x5f, 0x6e,
	0x61, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ligato_vpp_nat_nat_proto_rawDescOnce sync.Once
	file_ligato_vpp_nat_nat_proto_rawDescData = file_ligato_vpp_nat_nat_proto_rawDesc
)

func file_ligato_vpp_nat_nat_proto_rawDescGZIP() []byte {
	file_ligato_vpp_nat_nat_proto_rawDescOnce.Do(func() {
		file_ligato_vpp_nat_nat_proto_rawDescData = protoimpl.X.CompressGZIP(file_ligato_vpp_nat_nat_proto_rawDescData)
	})
	return file_ligato_vpp_nat_nat_proto_rawDescData
}

var file_ligato_vpp_nat_nat_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_ligato_vpp_nat_nat_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_ligato_vpp_nat_nat_proto_goTypes = []interface{}{
	(DNat44_Protocol)(0),                   // 0: ligato.vpp.nat.DNat44.Protocol
	(DNat44_StaticMapping_TwiceNatMode)(0), // 1: ligato.vpp.nat.DNat44.StaticMapping.TwiceNatMode
	(*Nat44Global)(nil),                    // 2: ligato.vpp.nat.Nat44Global
	(*DNat44)(nil),                         // 3: ligato.vpp.nat.DNat44
	(*Nat44Interface)(nil),                 // 4: ligato.vpp.nat.Nat44Interface
	(*Nat44AddressPool)(nil),               // 5: ligato.vpp.nat.Nat44AddressPool
	(*VirtualReassembly)(nil),              // 6: ligato.vpp.nat.VirtualReassembly
	(*Nat44Global_Interface)(nil),          // 7: ligato.vpp.nat.Nat44Global.Interface
	(*Nat44Global_Address)(nil),            // 8: ligato.vpp.nat.Nat44Global.Address
	(*DNat44_StaticMapping)(nil),           // 9: ligato.vpp.nat.DNat44.StaticMapping
	(*DNat44_IdentityMapping)(nil),         // 10: ligato.vpp.nat.DNat44.IdentityMapping
	(*DNat44_StaticMapping_LocalIP)(nil),   // 11: ligato.vpp.nat.DNat44.StaticMapping.LocalIP
}
var file_ligato_vpp_nat_nat_proto_depIdxs = []int32{
	7,  // 0: ligato.vpp.nat.Nat44Global.nat_interfaces:type_name -> ligato.vpp.nat.Nat44Global.Interface
	8,  // 1: ligato.vpp.nat.Nat44Global.address_pool:type_name -> ligato.vpp.nat.Nat44Global.Address
	6,  // 2: ligato.vpp.nat.Nat44Global.virtual_reassembly:type_name -> ligato.vpp.nat.VirtualReassembly
	9,  // 3: ligato.vpp.nat.DNat44.st_mappings:type_name -> ligato.vpp.nat.DNat44.StaticMapping
	10, // 4: ligato.vpp.nat.DNat44.id_mappings:type_name -> ligato.vpp.nat.DNat44.IdentityMapping
	11, // 5: ligato.vpp.nat.DNat44.StaticMapping.local_ips:type_name -> ligato.vpp.nat.DNat44.StaticMapping.LocalIP
	0,  // 6: ligato.vpp.nat.DNat44.StaticMapping.protocol:type_name -> ligato.vpp.nat.DNat44.Protocol
	1,  // 7: ligato.vpp.nat.DNat44.StaticMapping.twice_nat:type_name -> ligato.vpp.nat.DNat44.StaticMapping.TwiceNatMode
	0,  // 8: ligato.vpp.nat.DNat44.IdentityMapping.protocol:type_name -> ligato.vpp.nat.DNat44.Protocol
	9,  // [9:9] is the sub-list for method output_type
	9,  // [9:9] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_ligato_vpp_nat_nat_proto_init() }
func file_ligato_vpp_nat_nat_proto_init() {
	if File_ligato_vpp_nat_nat_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ligato_vpp_nat_nat_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Nat44Global); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ligato_vpp_nat_nat_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DNat44); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ligato_vpp_nat_nat_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Nat44Interface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ligato_vpp_nat_nat_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Nat44AddressPool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ligato_vpp_nat_nat_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualReassembly); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ligato_vpp_nat_nat_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Nat44Global_Interface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ligato_vpp_nat_nat_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Nat44Global_Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ligato_vpp_nat_nat_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DNat44_StaticMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ligato_vpp_nat_nat_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DNat44_IdentityMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ligato_vpp_nat_nat_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DNat44_StaticMapping_LocalIP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ligato_vpp_nat_nat_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ligato_vpp_nat_nat_proto_goTypes,
		DependencyIndexes: file_ligato_vpp_nat_nat_proto_depIdxs,
		EnumInfos:         file_ligato_vpp_nat_nat_proto_enumTypes,
		MessageInfos:      file_ligato_vpp_nat_nat_proto_msgTypes,
	}.Build()
	File_ligato_vpp_nat_nat_proto = out.File
	file_ligato_vpp_nat_nat_proto_rawDesc = nil
	file_ligato_vpp_nat_nat_proto_goTypes = nil
	file_ligato_vpp_nat_nat_proto_depIdxs = nil
}
