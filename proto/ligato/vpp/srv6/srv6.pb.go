// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.4
// source: ligato/vpp/srv6/srv6.proto

package vpp_srv6

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type LocalSID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sid               string `protobuf:"bytes,1,opt,name=sid,proto3" json:"sid,omitempty"` // segment id (IPv6 Address)
	InstallationVrfId uint32 `protobuf:"varint,2,opt,name=installation_vrf_id,json=installationVrfId,proto3" json:"installation_vrf_id,omitempty"`
	// Configuration for end functions (all end functions are mutually exclusive)
	// Types that are assignable to EndFunction:
	//	*LocalSID_BaseEndFunction
	//	*LocalSID_EndFunctionX
	//	*LocalSID_EndFunctionT
	//	*LocalSID_EndFunctionDx2
	//	*LocalSID_EndFunctionDx4
	//	*LocalSID_EndFunctionDx6
	//	*LocalSID_EndFunctionDt4
	//	*LocalSID_EndFunctionDt6
	//	*LocalSID_EndFunctionAd
	EndFunction isLocalSID_EndFunction `protobuf_oneof:"end_function"`
}

func (x *LocalSID) Reset() {
	*x = LocalSID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ligato_vpp_srv6_srv6_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocalSID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalSID) ProtoMessage() {}

func (x *LocalSID) ProtoReflect() protoreflect.Message {
	mi := &file_ligato_vpp_srv6_srv6_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalSID.ProtoReflect.Descriptor instead.
func (*LocalSID) Descriptor() ([]byte, []int) {
	return file_ligato_vpp_srv6_srv6_proto_rawDescGZIP(), []int{0}
}

func (x *LocalSID) GetSid() string {
	if x != nil {
		return x.Sid
	}
	return ""
}

func (x *LocalSID) GetInstallationVrfId() uint32 {
	if x != nil {
		return x.InstallationVrfId
	}
	return 0
}

func (m *LocalSID) GetEndFunction() isLocalSID_EndFunction {
	if m != nil {
		return m.EndFunction
	}
	return nil
}

func (x *LocalSID) GetBaseEndFunction() *LocalSID_End {
	if x, ok := x.GetEndFunction().(*LocalSID_BaseEndFunction); ok {
		return x.BaseEndFunction
	}
	return nil
}

func (x *LocalSID) GetEndFunctionX() *LocalSID_EndX {
	if x, ok := x.GetEndFunction().(*LocalSID_EndFunctionX); ok {
		return x.EndFunctionX
	}
	return nil
}

func (x *LocalSID) GetEndFunctionT() *LocalSID_EndT {
	if x, ok := x.GetEndFunction().(*LocalSID_EndFunctionT); ok {
		return x.EndFunctionT
	}
	return nil
}

func (x *LocalSID) GetEndFunctionDx2() *LocalSID_EndDX2 {
	if x, ok := x.GetEndFunction().(*LocalSID_EndFunctionDx2); ok {
		return x.EndFunctionDx2
	}
	return nil
}

func (x *LocalSID) GetEndFunctionDx4() *LocalSID_EndDX4 {
	if x, ok := x.GetEndFunction().(*LocalSID_EndFunctionDx4); ok {
		return x.EndFunctionDx4
	}
	return nil
}

func (x *LocalSID) GetEndFunctionDx6() *LocalSID_EndDX6 {
	if x, ok := x.GetEndFunction().(*LocalSID_EndFunctionDx6); ok {
		return x.EndFunctionDx6
	}
	return nil
}

func (x *LocalSID) GetEndFunctionDt4() *LocalSID_EndDT4 {
	if x, ok := x.GetEndFunction().(*LocalSID_EndFunctionDt4); ok {
		return x.EndFunctionDt4
	}
	return nil
}

func (x *LocalSID) GetEndFunctionDt6() *LocalSID_EndDT6 {
	if x, ok := x.GetEndFunction().(*LocalSID_EndFunctionDt6); ok {
		return x.EndFunctionDt6
	}
	return nil
}

func (x *LocalSID) GetEndFunctionAd() *LocalSID_EndAD {
	if x, ok := x.GetEndFunction().(*LocalSID_EndFunctionAd); ok {
		return x.EndFunctionAd
	}
	return nil
}

type isLocalSID_EndFunction interface {
	isLocalSID_EndFunction()
}

type LocalSID_BaseEndFunction struct {
	BaseEndFunction *LocalSID_End `protobuf:"bytes,3,opt,name=base_end_function,json=baseEndFunction,proto3,oneof"`
}

type LocalSID_EndFunctionX struct {
	EndFunctionX *LocalSID_EndX `protobuf:"bytes,4,opt,name=end_function_x,json=endFunctionX,proto3,oneof"`
}

type LocalSID_EndFunctionT struct {
	EndFunctionT *LocalSID_EndT `protobuf:"bytes,5,opt,name=end_function_t,json=endFunctionT,proto3,oneof"`
}

type LocalSID_EndFunctionDx2 struct {
	EndFunctionDx2 *LocalSID_EndDX2 `protobuf:"bytes,6,opt,name=end_function_dx2,json=endFunctionDx2,proto3,oneof"`
}

type LocalSID_EndFunctionDx4 struct {
	EndFunctionDx4 *LocalSID_EndDX4 `protobuf:"bytes,7,opt,name=end_function_dx4,json=endFunctionDx4,proto3,oneof"`
}

type LocalSID_EndFunctionDx6 struct {
	EndFunctionDx6 *LocalSID_EndDX6 `protobuf:"bytes,8,opt,name=end_function_dx6,json=endFunctionDx6,proto3,oneof"`
}

type LocalSID_EndFunctionDt4 struct {
	EndFunctionDt4 *LocalSID_EndDT4 `protobuf:"bytes,9,opt,name=end_function_dt4,json=endFunctionDt4,proto3,oneof"`
}

type LocalSID_EndFunctionDt6 struct {
	EndFunctionDt6 *LocalSID_EndDT6 `protobuf:"bytes,10,opt,name=end_function_dt6,json=endFunctionDt6,proto3,oneof"`
}

type LocalSID_EndFunctionAd struct {
	EndFunctionAd *LocalSID_EndAD `protobuf:"bytes,11,opt,name=end_function_ad,json=endFunctionAd,proto3,oneof"`
}

func (*LocalSID_BaseEndFunction) isLocalSID_EndFunction() {}

func (*LocalSID_EndFunctionX) isLocalSID_EndFunction() {}

func (*LocalSID_EndFunctionT) isLocalSID_EndFunction() {}

func (*LocalSID_EndFunctionDx2) isLocalSID_EndFunction() {}

func (*LocalSID_EndFunctionDx4) isLocalSID_EndFunction() {}

func (*LocalSID_EndFunctionDx6) isLocalSID_EndFunction() {}

func (*LocalSID_EndFunctionDt4) isLocalSID_EndFunction() {}

func (*LocalSID_EndFunctionDt6) isLocalSID_EndFunction() {}

func (*LocalSID_EndFunctionAd) isLocalSID_EndFunction() {}

// Model for SRv6 policy (policy without at least one policy segment is only cached in ligato and not written to VPP)
type Policy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bsid              string                `protobuf:"bytes,1,opt,name=bsid,proto3" json:"bsid,omitempty"` // binding SID (IPv6 Address)
	InstallationVrfId uint32                `protobuf:"varint,2,opt,name=installation_vrf_id,json=installationVrfId,proto3" json:"installation_vrf_id,omitempty"`
	SrhEncapsulation  bool                  `protobuf:"varint,3,opt,name=srh_encapsulation,json=srhEncapsulation,proto3" json:"srh_encapsulation,omitempty"` // are SR headers handled by encapsulation? (no means insertion of SR headers)
	SprayBehaviour    bool                  `protobuf:"varint,4,opt,name=spray_behaviour,json=sprayBehaviour,proto3" json:"spray_behaviour,omitempty"`       // spray(multicast) to all policy segments? (no means to use PolicySegment.weight to loadbalance traffic)
	SegmentLists      []*Policy_SegmentList `protobuf:"bytes,5,rep,name=segment_lists,json=segmentLists,proto3" json:"segment_lists,omitempty"`
}

func (x *Policy) Reset() {
	*x = Policy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ligato_vpp_srv6_srv6_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Policy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Policy) ProtoMessage() {}

func (x *Policy) ProtoReflect() protoreflect.Message {
	mi := &file_ligato_vpp_srv6_srv6_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Policy.ProtoReflect.Descriptor instead.
func (*Policy) Descriptor() ([]byte, []int) {
	return file_ligato_vpp_srv6_srv6_proto_rawDescGZIP(), []int{1}
}

func (x *Policy) GetBsid() string {
	if x != nil {
		return x.Bsid
	}
	return ""
}

func (x *Policy) GetInstallationVrfId() uint32 {
	if x != nil {
		return x.InstallationVrfId
	}
	return 0
}

func (x *Policy) GetSrhEncapsulation() bool {
	if x != nil {
		return x.SrhEncapsulation
	}
	return false
}

func (x *Policy) GetSprayBehaviour() bool {
	if x != nil {
		return x.SprayBehaviour
	}
	return false
}

func (x *Policy) GetSegmentLists() []*Policy_SegmentList {
	if x != nil {
		return x.SegmentLists
	}
	return nil
}

// Model for steering traffic to SRv6 policy
type Steering struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"` // globally unique steering identification (used in keys when is steering stored in key-value stores(i.e. ETCD))
	// Referencing policy that should be used for steering traffic into (all policy references are mutual exclusive)
	// Types that are assignable to PolicyRef:
	//	*Steering_PolicyBsid
	//	*Steering_PolicyIndex
	PolicyRef isSteering_PolicyRef `protobuf_oneof:"policy_ref"`
	// Traffic configuration (all traffic messages are mutual exclusive)
	// Types that are assignable to Traffic:
	//	*Steering_L2Traffic_
	//	*Steering_L3Traffic_
	Traffic isSteering_Traffic `protobuf_oneof:"traffic"`
}

func (x *Steering) Reset() {
	*x = Steering{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ligato_vpp_srv6_srv6_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Steering) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Steering) ProtoMessage() {}

func (x *Steering) ProtoReflect() protoreflect.Message {
	mi := &file_ligato_vpp_srv6_srv6_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Steering.ProtoReflect.Descriptor instead.
func (*Steering) Descriptor() ([]byte, []int) {
	return file_ligato_vpp_srv6_srv6_proto_rawDescGZIP(), []int{2}
}

func (x *Steering) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (m *Steering) GetPolicyRef() isSteering_PolicyRef {
	if m != nil {
		return m.PolicyRef
	}
	return nil
}

func (x *Steering) GetPolicyBsid() string {
	if x, ok := x.GetPolicyRef().(*Steering_PolicyBsid); ok {
		return x.PolicyBsid
	}
	return ""
}

func (x *Steering) GetPolicyIndex() uint32 {
	if x, ok := x.GetPolicyRef().(*Steering_PolicyIndex); ok {
		return x.PolicyIndex
	}
	return 0
}

func (m *Steering) GetTraffic() isSteering_Traffic {
	if m != nil {
		return m.Traffic
	}
	return nil
}

func (x *Steering) GetL2Traffic() *Steering_L2Traffic {
	if x, ok := x.GetTraffic().(*Steering_L2Traffic_); ok {
		return x.L2Traffic
	}
	return nil
}

func (x *Steering) GetL3Traffic() *Steering_L3Traffic {
	if x, ok := x.GetTraffic().(*Steering_L3Traffic_); ok {
		return x.L3Traffic
	}
	return nil
}

type isSteering_PolicyRef interface {
	isSteering_PolicyRef()
}

type Steering_PolicyBsid struct {
	PolicyBsid string `protobuf:"bytes,1,opt,name=policy_bsid,json=policyBsid,proto3,oneof"` // BSID identifier for policy to which we want to steer routing into (policyBSID and policyIndex are mutual exclusive)
}

type Steering_PolicyIndex struct {
	PolicyIndex uint32 `protobuf:"varint,2,opt,name=policy_index,json=policyIndex,proto3,oneof"` // (vpp-internal)Index identifier for policy to which we want to steer routing into (policyBSID and policyIndex are mutual exclusive)
}

func (*Steering_PolicyBsid) isSteering_PolicyRef() {}

func (*Steering_PolicyIndex) isSteering_PolicyRef() {}

type isSteering_Traffic interface {
	isSteering_Traffic()
}

type Steering_L2Traffic_ struct {
	L2Traffic *Steering_L2Traffic `protobuf:"bytes,3,opt,name=l2_traffic,json=l2Traffic,proto3,oneof"`
}

type Steering_L3Traffic_ struct {
	L3Traffic *Steering_L3Traffic `protobuf:"bytes,4,opt,name=l3_traffic,json=l3Traffic,proto3,oneof"`
}

func (*Steering_L2Traffic_) isSteering_Traffic() {}

func (*Steering_L3Traffic_) isSteering_Traffic() {}

// Global SRv6 config
type SRv6Global struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncapSourceAddress string `protobuf:"bytes,1,opt,name=encap_source_address,json=encapSourceAddress,proto3" json:"encap_source_address,omitempty"` // IPv6 source address for sr encapsulated packets
}

func (x *SRv6Global) Reset() {
	*x = SRv6Global{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ligato_vpp_srv6_srv6_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SRv6Global) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SRv6Global) ProtoMessage() {}

func (x *SRv6Global) ProtoReflect() protoreflect.Message {
	mi := &file_ligato_vpp_srv6_srv6_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SRv6Global.ProtoReflect.Descriptor instead.
func (*SRv6Global) Descriptor() ([]byte, []int) {
	return file_ligato_vpp_srv6_srv6_proto_rawDescGZIP(), []int{3}
}

func (x *SRv6Global) GetEncapSourceAddress() string {
	if x != nil {
		return x.EncapSourceAddress
	}
	return ""
}

// End function behavior of simple endpoint
type LocalSID_End struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Psp bool `protobuf:"varint,1,opt,name=psp,proto3" json:"psp,omitempty"` // use PSP (penultimate segment POP of the SRH) or by default use USP (Ultimate Segment Pop of the SRH)
}

func (x *LocalSID_End) Reset() {
	*x = LocalSID_End{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ligato_vpp_srv6_srv6_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocalSID_End) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalSID_End) ProtoMessage() {}

func (x *LocalSID_End) ProtoReflect() protoreflect.Message {
	mi := &file_ligato_vpp_srv6_srv6_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalSID_End.ProtoReflect.Descriptor instead.
func (*LocalSID_End) Descriptor() ([]byte, []int) {
	return file_ligato_vpp_srv6_srv6_proto_rawDescGZIP(), []int{0, 0}
}

func (x *LocalSID_End) GetPsp() bool {
	if x != nil {
		return x.Psp
	}
	return false
}

// End function behavior of endpoint with Layer-3 cross-connect (IPv6)
type LocalSID_EndX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Psp               bool   `protobuf:"varint,1,opt,name=psp,proto3" json:"psp,omitempty"`                                                     // use PSP (penultimate segment POP of the SRH) or by default use USP (Ultimate Segment Pop of the SRH)
	OutgoingInterface string `protobuf:"bytes,2,opt,name=outgoing_interface,json=outgoingInterface,proto3" json:"outgoing_interface,omitempty"` // name of cross-connected outgoing interface
	NextHop           string `protobuf:"bytes,3,opt,name=next_hop,json=nextHop,proto3" json:"next_hop,omitempty"`                               // IPv6 next hop address for cross-connected link
}

func (x *LocalSID_EndX) Reset() {
	*x = LocalSID_EndX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ligato_vpp_srv6_srv6_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocalSID_EndX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalSID_EndX) ProtoMessage() {}

func (x *LocalSID_EndX) ProtoReflect() protoreflect.Message {
	mi := &file_ligato_vpp_srv6_srv6_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalSID_EndX.ProtoReflect.Descriptor instead.
func (*LocalSID_EndX) Descriptor() ([]byte, []int) {
	return file_ligato_vpp_srv6_srv6_proto_rawDescGZIP(), []int{0, 1}
}

func (x *LocalSID_EndX) GetPsp() bool {
	if x != nil {
		return x.Psp
	}
	return false
}

func (x *LocalSID_EndX) GetOutgoingInterface() string {
	if x != nil {
		return x.OutgoingInterface
	}
	return ""
}

func (x *LocalSID_EndX) GetNextHop() string {
	if x != nil {
		return x.NextHop
	}
	return ""
}

// End function behavior of endpoint with specific IPv6 table lookup
type LocalSID_EndT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Psp   bool   `protobuf:"varint,1,opt,name=psp,proto3" json:"psp,omitempty"` // use PSP (penultimate segment POP of the SRH) or by default use USP (Ultimate Segment Pop of the SRH)
	VrfId uint32 `protobuf:"varint,2,opt,name=vrf_id,json=vrfId,proto3" json:"vrf_id,omitempty"`
}

func (x *LocalSID_EndT) Reset() {
	*x = LocalSID_EndT{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ligato_vpp_srv6_srv6_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocalSID_EndT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalSID_EndT) ProtoMessage() {}

func (x *LocalSID_EndT) ProtoReflect() protoreflect.Message {
	mi := &file_ligato_vpp_srv6_srv6_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalSID_EndT.ProtoReflect.Descriptor instead.
func (*LocalSID_EndT) Descriptor() ([]byte, []int) {
	return file_ligato_vpp_srv6_srv6_proto_rawDescGZIP(), []int{0, 2}
}

func (x *LocalSID_EndT) GetPsp() bool {
	if x != nil {
		return x.Psp
	}
	return false
}

func (x *LocalSID_EndT) GetVrfId() uint32 {
	if x != nil {
		return x.VrfId
	}
	return 0
}

// End function behavior of endpoint with decapsulation and Layer-2 cross-connect (or DX2 with egress VLAN rewrite when VLAN notzero - not supported this variant yet)
type LocalSID_EndDX2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VlanTag           uint32 `protobuf:"varint,1,opt,name=vlan_tag,json=vlanTag,proto3" json:"vlan_tag,omitempty"`                              // Outgoing VLAN tag
	OutgoingInterface string `protobuf:"bytes,2,opt,name=outgoing_interface,json=outgoingInterface,proto3" json:"outgoing_interface,omitempty"` // name of cross-connected outgoing interface
}

func (x *LocalSID_EndDX2) Reset() {
	*x = LocalSID_EndDX2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ligato_vpp_srv6_srv6_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocalSID_EndDX2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalSID_EndDX2) ProtoMessage() {}

func (x *LocalSID_EndDX2) ProtoReflect() protoreflect.Message {
	mi := &file_ligato_vpp_srv6_srv6_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalSID_EndDX2.ProtoReflect.Descriptor instead.
func (*LocalSID_EndDX2) Descriptor() ([]byte, []int) {
	return file_ligato_vpp_srv6_srv6_proto_rawDescGZIP(), []int{0, 3}
}

func (x *LocalSID_EndDX2) GetVlanTag() uint32 {
	if x != nil {
		return x.VlanTag
	}
	return 0
}

func (x *LocalSID_EndDX2) GetOutgoingInterface() string {
	if x != nil {
		return x.OutgoingInterface
	}
	return ""
}

// End function behavior of endpoint with decapsulation and IPv4 cross-connect
type LocalSID_EndDX4 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutgoingInterface string `protobuf:"bytes,1,opt,name=outgoing_interface,json=outgoingInterface,proto3" json:"outgoing_interface,omitempty"` // name of cross-connected outgoing interface
	NextHop           string `protobuf:"bytes,2,opt,name=next_hop,json=nextHop,proto3" json:"next_hop,omitempty"`                               // next hop address for cross-connected link
}

func (x *LocalSID_EndDX4) Reset() {
	*x = LocalSID_EndDX4{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ligato_vpp_srv6_srv6_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocalSID_EndDX4) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalSID_EndDX4) ProtoMessage() {}

func (x *LocalSID_EndDX4) ProtoReflect() protoreflect.Message {
	mi := &file_ligato_vpp_srv6_srv6_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalSID_EndDX4.ProtoReflect.Descriptor instead.
func (*LocalSID_EndDX4) Descriptor() ([]byte, []int) {
	return file_ligato_vpp_srv6_srv6_proto_rawDescGZIP(), []int{0, 4}
}

func (x *LocalSID_EndDX4) GetOutgoingInterface() string {
	if x != nil {
		return x.OutgoingInterface
	}
	return ""
}

func (x *LocalSID_EndDX4) GetNextHop() string {
	if x != nil {
		return x.NextHop
	}
	return ""
}

// End function behavior of endpoint with decapsulation and IPv6 cross-connect
type LocalSID_EndDX6 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutgoingInterface string `protobuf:"bytes,1,opt,name=outgoing_interface,json=outgoingInterface,proto3" json:"outgoing_interface,omitempty"` // name of cross-connected outgoing interface
	NextHop           string `protobuf:"bytes,2,opt,name=next_hop,json=nextHop,proto3" json:"next_hop,omitempty"`                               // next hop address for cross-connected link
}

func (x *LocalSID_EndDX6) Reset() {
	*x = LocalSID_EndDX6{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ligato_vpp_srv6_srv6_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocalSID_EndDX6) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalSID_EndDX6) ProtoMessage() {}

func (x *LocalSID_EndDX6) ProtoReflect() protoreflect.Message {
	mi := &file_ligato_vpp_srv6_srv6_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalSID_EndDX6.ProtoReflect.Descriptor instead.
func (*LocalSID_EndDX6) Descriptor() ([]byte, []int) {
	return file_ligato_vpp_srv6_srv6_proto_rawDescGZIP(), []int{0, 5}
}

func (x *LocalSID_EndDX6) GetOutgoingInterface() string {
	if x != nil {
		return x.OutgoingInterface
	}
	return ""
}

func (x *LocalSID_EndDX6) GetNextHop() string {
	if x != nil {
		return x.NextHop
	}
	return ""
}

// End function behavior of endpoint with decapsulation and specific IPv4 table lookup
type LocalSID_EndDT4 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VrfId uint32 `protobuf:"varint,1,opt,name=vrf_id,json=vrfId,proto3" json:"vrf_id,omitempty"`
}

func (x *LocalSID_EndDT4) Reset() {
	*x = LocalSID_EndDT4{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ligato_vpp_srv6_srv6_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocalSID_EndDT4) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalSID_EndDT4) ProtoMessage() {}

func (x *LocalSID_EndDT4) ProtoReflect() protoreflect.Message {
	mi := &file_ligato_vpp_srv6_srv6_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalSID_EndDT4.ProtoReflect.Descriptor instead.
func (*LocalSID_EndDT4) Descriptor() ([]byte, []int) {
	return file_ligato_vpp_srv6_srv6_proto_rawDescGZIP(), []int{0, 6}
}

func (x *LocalSID_EndDT4) GetVrfId() uint32 {
	if x != nil {
		return x.VrfId
	}
	return 0
}

// End function behavior of endpoint with decapsulation and specific IPv6 table lookup
type LocalSID_EndDT6 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VrfId uint32 `protobuf:"varint,1,opt,name=vrf_id,json=vrfId,proto3" json:"vrf_id,omitempty"`
}

func (x *LocalSID_EndDT6) Reset() {
	*x = LocalSID_EndDT6{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ligato_vpp_srv6_srv6_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocalSID_EndDT6) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalSID_EndDT6) ProtoMessage() {}

func (x *LocalSID_EndDT6) ProtoReflect() protoreflect.Message {
	mi := &file_ligato_vpp_srv6_srv6_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalSID_EndDT6.ProtoReflect.Descriptor instead.
func (*LocalSID_EndDT6) Descriptor() ([]byte, []int) {
	return file_ligato_vpp_srv6_srv6_proto_rawDescGZIP(), []int{0, 7}
}

func (x *LocalSID_EndDT6) GetVrfId() uint32 {
	if x != nil {
		return x.VrfId
	}
	return 0
}

// End function behavior of dynamic segment routing proxy endpoint
type LocalSID_EndAD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutgoingInterface string `protobuf:"bytes,2,opt,name=outgoing_interface,json=outgoingInterface,proto3" json:"outgoing_interface,omitempty"` // name of interface on segment routing proxy side sending data to segment routing unaware service
	IncomingInterface string `protobuf:"bytes,3,opt,name=incoming_interface,json=incomingInterface,proto3" json:"incoming_interface,omitempty"` // name of interface on segment routing proxy side receiving data from segment routing unaware service
	L3ServiceAddress  string `protobuf:"bytes,4,opt,name=l3_service_address,json=l3ServiceAddress,proto3" json:"l3_service_address,omitempty"`  // IPv6/IPv4 address of L3 SR-unaware service (address type depends whether service is IPv4 or IPv6 service), in case of L2 service it must be empty
}

func (x *LocalSID_EndAD) Reset() {
	*x = LocalSID_EndAD{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ligato_vpp_srv6_srv6_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocalSID_EndAD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalSID_EndAD) ProtoMessage() {}

func (x *LocalSID_EndAD) ProtoReflect() protoreflect.Message {
	mi := &file_ligato_vpp_srv6_srv6_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalSID_EndAD.ProtoReflect.Descriptor instead.
func (*LocalSID_EndAD) Descriptor() ([]byte, []int) {
	return file_ligato_vpp_srv6_srv6_proto_rawDescGZIP(), []int{0, 8}
}

func (x *LocalSID_EndAD) GetOutgoingInterface() string {
	if x != nil {
		return x.OutgoingInterface
	}
	return ""
}

func (x *LocalSID_EndAD) GetIncomingInterface() string {
	if x != nil {
		return x.IncomingInterface
	}
	return ""
}

func (x *LocalSID_EndAD) GetL3ServiceAddress() string {
	if x != nil {
		return x.L3ServiceAddress
	}
	return ""
}

// Model for SRv6 Segment List
type Policy_SegmentList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Weight   uint32   `protobuf:"varint,1,opt,name=weight,proto3" json:"weight,omitempty"`    // used for loadbalancing in case of multiple policy segments in routing process (ignored in case of spray policies)
	Segments []string `protobuf:"bytes,2,rep,name=segments,proto3" json:"segments,omitempty"` // list of sids creating one segmented road
}

func (x *Policy_SegmentList) Reset() {
	*x = Policy_SegmentList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ligato_vpp_srv6_srv6_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Policy_SegmentList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Policy_SegmentList) ProtoMessage() {}

func (x *Policy_SegmentList) ProtoReflect() protoreflect.Message {
	mi := &file_ligato_vpp_srv6_srv6_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Policy_SegmentList.ProtoReflect.Descriptor instead.
func (*Policy_SegmentList) Descriptor() ([]byte, []int) {
	return file_ligato_vpp_srv6_srv6_proto_rawDescGZIP(), []int{1, 0}
}

func (x *Policy_SegmentList) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *Policy_SegmentList) GetSegments() []string {
	if x != nil {
		return x.Segments
	}
	return nil
}

type Steering_L2Traffic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceName string `protobuf:"bytes,1,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"` // name of interface with incoming traffic that should be steered to SR policy
}

func (x *Steering_L2Traffic) Reset() {
	*x = Steering_L2Traffic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ligato_vpp_srv6_srv6_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Steering_L2Traffic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Steering_L2Traffic) ProtoMessage() {}

func (x *Steering_L2Traffic) ProtoReflect() protoreflect.Message {
	mi := &file_ligato_vpp_srv6_srv6_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Steering_L2Traffic.ProtoReflect.Descriptor instead.
func (*Steering_L2Traffic) Descriptor() ([]byte, []int) {
	return file_ligato_vpp_srv6_srv6_proto_rawDescGZIP(), []int{2, 0}
}

func (x *Steering_L2Traffic) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

type Steering_L3Traffic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstallationVrfId uint32 `protobuf:"varint,1,opt,name=installation_vrf_id,json=installationVrfId,proto3" json:"installation_vrf_id,omitempty"`
	PrefixAddress     string `protobuf:"bytes,2,opt,name=prefix_address,json=prefixAddress,proto3" json:"prefix_address,omitempty"` // IPv4/IPv6 prefix address(CIRD format) of traffic destination. All traffic with given destination will be steered to given SR policy
}

func (x *Steering_L3Traffic) Reset() {
	*x = Steering_L3Traffic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ligato_vpp_srv6_srv6_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Steering_L3Traffic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Steering_L3Traffic) ProtoMessage() {}

func (x *Steering_L3Traffic) ProtoReflect() protoreflect.Message {
	mi := &file_ligato_vpp_srv6_srv6_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Steering_L3Traffic.ProtoReflect.Descriptor instead.
func (*Steering_L3Traffic) Descriptor() ([]byte, []int) {
	return file_ligato_vpp_srv6_srv6_proto_rawDescGZIP(), []int{2, 1}
}

func (x *Steering_L3Traffic) GetInstallationVrfId() uint32 {
	if x != nil {
		return x.InstallationVrfId
	}
	return 0
}

func (x *Steering_L3Traffic) GetPrefixAddress() string {
	if x != nil {
		return x.PrefixAddress
	}
	return ""
}

var File_ligato_vpp_srv6_srv6_proto protoreflect.FileDescriptor

var file_ligato_vpp_srv6_srv6_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2f, 0x76, 0x70, 0x70, 0x2f, 0x73, 0x72, 0x76,
	0x36, 0x2f, 0x73, 0x72, 0x76, 0x36, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x6c, 0x69,
	0x67, 0x61, 0x74, 0x6f, 0x2e, 0x76, 0x70, 0x70, 0x2e, 0x73, 0x72, 0x76, 0x36, 0x22, 0x8c, 0x0b,
	0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x13,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x72, 0x66,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x72, 0x66, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x11,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f,
	0x2e, 0x76, 0x70, 0x70, 0x2e, 0x73, 0x72, 0x76, 0x36, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53,
	0x49, 0x44, 0x2e, 0x45, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x0f, 0x62, 0x61, 0x73, 0x65, 0x45, 0x6e,
	0x64, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x0e, 0x65, 0x6e, 0x64,
	0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2e, 0x76, 0x70, 0x70, 0x2e, 0x73,
	0x72, 0x76, 0x36, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x49, 0x44, 0x2e, 0x45, 0x6e, 0x64,
	0x58, 0x48, 0x00, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x58, 0x12, 0x46, 0x0a, 0x0e, 0x65, 0x6e, 0x64, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x69, 0x67, 0x61,
	0x74, 0x6f, 0x2e, 0x76, 0x70, 0x70, 0x2e, 0x73, 0x72, 0x76, 0x36, 0x2e, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x53, 0x49, 0x44, 0x2e, 0x45, 0x6e, 0x64, 0x54, 0x48, 0x00, 0x52, 0x0c, 0x65, 0x6e, 0x64,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x12, 0x4c, 0x0a, 0x10, 0x65, 0x6e, 0x64,
	0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x78, 0x32, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2e, 0x76, 0x70, 0x70,
	0x2e, 0x73, 0x72, 0x76, 0x36, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x49, 0x44, 0x2e, 0x45,
	0x6e, 0x64, 0x44, 0x58, 0x32, 0x48, 0x00, 0x52, 0x0e, 0x65, 0x6e, 0x64, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x78, 0x32, 0x12, 0x4c, 0x0a, 0x10, 0x65, 0x6e, 0x64, 0x5f, 0x66,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x78, 0x34, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2e, 0x76, 0x70, 0x70, 0x2e, 0x73,
	0x72, 0x76, 0x36, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x49, 0x44, 0x2e, 0x45, 0x6e, 0x64,
	0x44, 0x58, 0x34, 0x48, 0x00, 0x52, 0x0e, 0x65, 0x6e, 0x64, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x78, 0x34, 0x12, 0x4c, 0x0a, 0x10, 0x65, 0x6e, 0x64, 0x5f, 0x66, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x78, 0x36, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2e, 0x76, 0x70, 0x70, 0x2e, 0x73, 0x72, 0x76,
	0x36, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x49, 0x44, 0x2e, 0x45, 0x6e, 0x64, 0x44, 0x58,
	0x36, 0x48, 0x00, 0x52, 0x0e, 0x65, 0x6e, 0x64, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x78, 0x36, 0x12, 0x4c, 0x0a, 0x10, 0x65, 0x6e, 0x64, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x34, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2e, 0x76, 0x70, 0x70, 0x2e, 0x73, 0x72, 0x76, 0x36, 0x2e,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x49, 0x44, 0x2e, 0x45, 0x6e, 0x64, 0x44, 0x54, 0x34, 0x48,
	0x00, 0x52, 0x0e, 0x65, 0x6e, 0x64, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x74,
	0x34, 0x12, 0x4c, 0x0a, 0x10, 0x65, 0x6e, 0x64, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x64, 0x74, 0x36, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6c, 0x69,
	0x67, 0x61, 0x74, 0x6f, 0x2e, 0x76, 0x70, 0x70, 0x2e, 0x73, 0x72, 0x76, 0x36, 0x2e, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x53, 0x49, 0x44, 0x2e, 0x45, 0x6e, 0x64, 0x44, 0x54, 0x36, 0x48, 0x00, 0x52,
	0x0e, 0x65, 0x6e, 0x64, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x74, 0x36, 0x12,
	0x49, 0x0a, 0x0f, 0x65, 0x6e, 0x64, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x61, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x69, 0x67, 0x61, 0x74,
	0x6f, 0x2e, 0x76, 0x70, 0x70, 0x2e, 0x73, 0x72, 0x76, 0x36, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x53, 0x49, 0x44, 0x2e, 0x45, 0x6e, 0x64, 0x41, 0x44, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x6e, 0x64,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x1a, 0x17, 0x0a, 0x03, 0x45, 0x6e,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03,
	0x70, 0x73, 0x70, 0x1a, 0x62, 0x0a, 0x04, 0x45, 0x6e, 0x64, 0x58, 0x12, 0x10, 0x0a, 0x03, 0x70,
	0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x70, 0x73, 0x70, 0x12, 0x2d, 0x0a,
	0x12, 0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6f, 0x75, 0x74, 0x67, 0x6f,
	0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x1a, 0x2f, 0x0a, 0x04, 0x45, 0x6e, 0x64, 0x54, 0x12,
	0x10, 0x0a, 0x03, 0x70, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x70, 0x73,
	0x70, 0x12, 0x15, 0x0a, 0x06, 0x76, 0x72, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x76, 0x72, 0x66, 0x49, 0x64, 0x1a, 0x52, 0x0a, 0x06, 0x45, 0x6e, 0x64, 0x44,
	0x58, 0x32, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x54, 0x61, 0x67, 0x12, 0x2d, 0x0a,
	0x12, 0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6f, 0x75, 0x74, 0x67, 0x6f,
	0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x1a, 0x52, 0x0a, 0x06,
	0x45, 0x6e, 0x64, 0x44, 0x58, 0x34, 0x12, 0x2d, 0x0a, 0x12, 0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69,
	0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70,
	0x1a, 0x52, 0x0a, 0x06, 0x45, 0x6e, 0x64, 0x44, 0x58, 0x36, 0x12, 0x2d, 0x0a, 0x12, 0x6f, 0x75,
	0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x68, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x78,
	0x74, 0x48, 0x6f, 0x70, 0x1a, 0x1f, 0x0a, 0x06, 0x45, 0x6e, 0x64, 0x44, 0x54, 0x34, 0x12, 0x15,
	0x0a, 0x06, 0x76, 0x72, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x76, 0x72, 0x66, 0x49, 0x64, 0x1a, 0x1f, 0x0a, 0x06, 0x45, 0x6e, 0x64, 0x44, 0x54, 0x36, 0x12,
	0x15, 0x0a, 0x06, 0x76, 0x72, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x76, 0x72, 0x66, 0x49, 0x64, 0x1a, 0x93, 0x01, 0x0a, 0x05, 0x45, 0x6e, 0x64, 0x41, 0x44,
	0x12, 0x2d, 0x0a, 0x12, 0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6f, 0x75,
	0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12,
	0x2d, 0x0a, 0x12, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x69, 0x6e, 0x63,
	0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x2c,
	0x0a, 0x12, 0x6c, 0x33, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6c, 0x33, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x0e, 0x0a, 0x0c,
	0x65, 0x6e, 0x64, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xaf, 0x02, 0x0a,
	0x06, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x73, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x73, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x72, 0x66, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x72, 0x66, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x73,
	0x72, 0x68, 0x5f, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x73, 0x72, 0x68, 0x45, 0x6e, 0x63, 0x61, 0x70,
	0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x70, 0x72, 0x61,
	0x79, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x75, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x73, 0x70, 0x72, 0x61, 0x79, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x75,
	0x72, 0x12, 0x48, 0x0a, 0x0d, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x69, 0x67, 0x61, 0x74,
	0x6f, 0x2e, 0x76, 0x70, 0x70, 0x2e, 0x73, 0x72, 0x76, 0x36, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0c, 0x73,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x1a, 0x41, 0x0a, 0x0b, 0x53,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xa3,
	0x03, 0x0a, 0x08, 0x53, 0x74, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x21, 0x0a, 0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x62, 0x73, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x73,
	0x69, 0x64, 0x12, 0x23, 0x0a, 0x0c, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x44, 0x0a, 0x0a, 0x6c, 0x32, 0x5f, 0x74, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x69,
	0x67, 0x61, 0x74, 0x6f, 0x2e, 0x76, 0x70, 0x70, 0x2e, 0x73, 0x72, 0x76, 0x36, 0x2e, 0x53, 0x74,
	0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x32, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x48, 0x01, 0x52, 0x09, 0x6c, 0x32, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x12, 0x44, 0x0a,
	0x0a, 0x6c, 0x33, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2e, 0x76, 0x70, 0x70, 0x2e, 0x73,
	0x72, 0x76, 0x36, 0x2e, 0x53, 0x74, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x33, 0x54,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x48, 0x01, 0x52, 0x09, 0x6c, 0x33, 0x54, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x1a, 0x32, 0x0a, 0x09, 0x4c, 0x32, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x62, 0x0a, 0x09, 0x4c, 0x33, 0x54, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x72, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x11, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56,
	0x72, 0x66, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x72, 0x65, 0x66, 0x42, 0x09, 0x0a, 0x07, 0x74, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x22, 0x3e, 0x0a, 0x0a, 0x53, 0x52, 0x76, 0x36, 0x47, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x12, 0x30, 0x0a, 0x14, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x42, 0x3a, 0x5a, 0x38, 0x67, 0x6f, 0x2e, 0x6c, 0x69, 0x67, 0x61, 0x74,
	0x6f, 0x2e, 0x69, 0x6f, 0x2f, 0x76, 0x70, 0x70, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x76,
	0x33, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2f, 0x76,
	0x70, 0x70, 0x2f, 0x73, 0x72, 0x76, 0x36, 0x3b, 0x76, 0x70, 0x70, 0x5f, 0x73, 0x72, 0x76, 0x36,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ligato_vpp_srv6_srv6_proto_rawDescOnce sync.Once
	file_ligato_vpp_srv6_srv6_proto_rawDescData = file_ligato_vpp_srv6_srv6_proto_rawDesc
)

func file_ligato_vpp_srv6_srv6_proto_rawDescGZIP() []byte {
	file_ligato_vpp_srv6_srv6_proto_rawDescOnce.Do(func() {
		file_ligato_vpp_srv6_srv6_proto_rawDescData = protoimpl.X.CompressGZIP(file_ligato_vpp_srv6_srv6_proto_rawDescData)
	})
	return file_ligato_vpp_srv6_srv6_proto_rawDescData
}

var file_ligato_vpp_srv6_srv6_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_ligato_vpp_srv6_srv6_proto_goTypes = []interface{}{
	(*LocalSID)(nil),           // 0: ligato.vpp.srv6.LocalSID
	(*Policy)(nil),             // 1: ligato.vpp.srv6.Policy
	(*Steering)(nil),           // 2: ligato.vpp.srv6.Steering
	(*SRv6Global)(nil),         // 3: ligato.vpp.srv6.SRv6Global
	(*LocalSID_End)(nil),       // 4: ligato.vpp.srv6.LocalSID.End
	(*LocalSID_EndX)(nil),      // 5: ligato.vpp.srv6.LocalSID.EndX
	(*LocalSID_EndT)(nil),      // 6: ligato.vpp.srv6.LocalSID.EndT
	(*LocalSID_EndDX2)(nil),    // 7: ligato.vpp.srv6.LocalSID.EndDX2
	(*LocalSID_EndDX4)(nil),    // 8: ligato.vpp.srv6.LocalSID.EndDX4
	(*LocalSID_EndDX6)(nil),    // 9: ligato.vpp.srv6.LocalSID.EndDX6
	(*LocalSID_EndDT4)(nil),    // 10: ligato.vpp.srv6.LocalSID.EndDT4
	(*LocalSID_EndDT6)(nil),    // 11: ligato.vpp.srv6.LocalSID.EndDT6
	(*LocalSID_EndAD)(nil),     // 12: ligato.vpp.srv6.LocalSID.EndAD
	(*Policy_SegmentList)(nil), // 13: ligato.vpp.srv6.Policy.SegmentList
	(*Steering_L2Traffic)(nil), // 14: ligato.vpp.srv6.Steering.L2Traffic
	(*Steering_L3Traffic)(nil), // 15: ligato.vpp.srv6.Steering.L3Traffic
}
var file_ligato_vpp_srv6_srv6_proto_depIdxs = []int32{
	4,  // 0: ligato.vpp.srv6.LocalSID.base_end_function:type_name -> ligato.vpp.srv6.LocalSID.End
	5,  // 1: ligato.vpp.srv6.LocalSID.end_function_x:type_name -> ligato.vpp.srv6.LocalSID.EndX
	6,  // 2: ligato.vpp.srv6.LocalSID.end_function_t:type_name -> ligato.vpp.srv6.LocalSID.EndT
	7,  // 3: ligato.vpp.srv6.LocalSID.end_function_dx2:type_name -> ligato.vpp.srv6.LocalSID.EndDX2
	8,  // 4: ligato.vpp.srv6.LocalSID.end_function_dx4:type_name -> ligato.vpp.srv6.LocalSID.EndDX4
	9,  // 5: ligato.vpp.srv6.LocalSID.end_function_dx6:type_name -> ligato.vpp.srv6.LocalSID.EndDX6
	10, // 6: ligato.vpp.srv6.LocalSID.end_function_dt4:type_name -> ligato.vpp.srv6.LocalSID.EndDT4
	11, // 7: ligato.vpp.srv6.LocalSID.end_function_dt6:type_name -> ligato.vpp.srv6.LocalSID.EndDT6
	12, // 8: ligato.vpp.srv6.LocalSID.end_function_ad:type_name -> ligato.vpp.srv6.LocalSID.EndAD
	13, // 9: ligato.vpp.srv6.Policy.segment_lists:type_name -> ligato.vpp.srv6.Policy.SegmentList
	14, // 10: ligato.vpp.srv6.Steering.l2_traffic:type_name -> ligato.vpp.srv6.Steering.L2Traffic
	15, // 11: ligato.vpp.srv6.Steering.l3_traffic:type_name -> ligato.vpp.srv6.Steering.L3Traffic
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_ligato_vpp_srv6_srv6_proto_init() }
func file_ligato_vpp_srv6_srv6_proto_init() {
	if File_ligato_vpp_srv6_srv6_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ligato_vpp_srv6_srv6_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocalSID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ligato_vpp_srv6_srv6_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Policy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ligato_vpp_srv6_srv6_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Steering); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ligato_vpp_srv6_srv6_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SRv6Global); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ligato_vpp_srv6_srv6_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocalSID_End); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ligato_vpp_srv6_srv6_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocalSID_EndX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ligato_vpp_srv6_srv6_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocalSID_EndT); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ligato_vpp_srv6_srv6_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocalSID_EndDX2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ligato_vpp_srv6_srv6_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocalSID_EndDX4); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ligato_vpp_srv6_srv6_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocalSID_EndDX6); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ligato_vpp_srv6_srv6_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocalSID_EndDT4); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ligato_vpp_srv6_srv6_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocalSID_EndDT6); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ligato_vpp_srv6_srv6_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocalSID_EndAD); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ligato_vpp_srv6_srv6_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Policy_SegmentList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ligato_vpp_srv6_srv6_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Steering_L2Traffic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ligato_vpp_srv6_srv6_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Steering_L3Traffic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_ligato_vpp_srv6_srv6_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*LocalSID_BaseEndFunction)(nil),
		(*LocalSID_EndFunctionX)(nil),
		(*LocalSID_EndFunctionT)(nil),
		(*LocalSID_EndFunctionDx2)(nil),
		(*LocalSID_EndFunctionDx4)(nil),
		(*LocalSID_EndFunctionDx6)(nil),
		(*LocalSID_EndFunctionDt4)(nil),
		(*LocalSID_EndFunctionDt6)(nil),
		(*LocalSID_EndFunctionAd)(nil),
	}
	file_ligato_vpp_srv6_srv6_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*Steering_PolicyBsid)(nil),
		(*Steering_PolicyIndex)(nil),
		(*Steering_L2Traffic_)(nil),
		(*Steering_L3Traffic_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ligato_vpp_srv6_srv6_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ligato_vpp_srv6_srv6_proto_goTypes,
		DependencyIndexes: file_ligato_vpp_srv6_srv6_proto_depIdxs,
		MessageInfos:      file_ligato_vpp_srv6_srv6_proto_msgTypes,
	}.Build()
	File_ligato_vpp_srv6_srv6_proto = out.File
	file_ligato_vpp_srv6_srv6_proto_rawDesc = nil
	file_ligato_vpp_srv6_srv6_proto_goTypes = nil
	file_ligato_vpp_srv6_srv6_proto_depIdxs = nil
}
