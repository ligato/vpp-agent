// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.4
// source: ligato/vpp/ipsec/ipsec.proto

package vpp_ipsec

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Cryptographic algorithm for encryption
type CryptoAlg int32

const (
	CryptoAlg_NONE_CRYPTO CryptoAlg = 0
	CryptoAlg_AES_CBC_128 CryptoAlg = 1
	CryptoAlg_AES_CBC_192 CryptoAlg = 2
	CryptoAlg_AES_CBC_256 CryptoAlg = 3
	CryptoAlg_AES_CTR_128 CryptoAlg = 4
	CryptoAlg_AES_CTR_192 CryptoAlg = 5
	CryptoAlg_AES_CTR_256 CryptoAlg = 6
	CryptoAlg_AES_GCM_128 CryptoAlg = 7
	CryptoAlg_AES_GCM_192 CryptoAlg = 8
	CryptoAlg_AES_GCM_256 CryptoAlg = 9
	CryptoAlg_DES_CBC     CryptoAlg = 10
	CryptoAlg_DES3_CBC    CryptoAlg = 11 // 3DES_CBC
)

// Enum value maps for CryptoAlg.
var (
	CryptoAlg_name = map[int32]string{
		0:  "NONE_CRYPTO",
		1:  "AES_CBC_128",
		2:  "AES_CBC_192",
		3:  "AES_CBC_256",
		4:  "AES_CTR_128",
		5:  "AES_CTR_192",
		6:  "AES_CTR_256",
		7:  "AES_GCM_128",
		8:  "AES_GCM_192",
		9:  "AES_GCM_256",
		10: "DES_CBC",
		11: "DES3_CBC",
	}
	CryptoAlg_value = map[string]int32{
		"NONE_CRYPTO": 0,
		"AES_CBC_128": 1,
		"AES_CBC_192": 2,
		"AES_CBC_256": 3,
		"AES_CTR_128": 4,
		"AES_CTR_192": 5,
		"AES_CTR_256": 6,
		"AES_GCM_128": 7,
		"AES_GCM_192": 8,
		"AES_GCM_256": 9,
		"DES_CBC":     10,
		"DES3_CBC":    11,
	}
)

func (x CryptoAlg) Enum() *CryptoAlg {
	p := new(CryptoAlg)
	*p = x
	return p
}

func (x CryptoAlg) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CryptoAlg) Descriptor() protoreflect.EnumDescriptor {
	return file_ligato_vpp_ipsec_ipsec_proto_enumTypes[0].Descriptor()
}

func (CryptoAlg) Type() protoreflect.EnumType {
	return &file_ligato_vpp_ipsec_ipsec_proto_enumTypes[0]
}

func (x CryptoAlg) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CryptoAlg.Descriptor instead.
func (CryptoAlg) EnumDescriptor() ([]byte, []int) {
	return file_ligato_vpp_ipsec_ipsec_proto_rawDescGZIP(), []int{0}
}

// Cryptographic algorithm for authentication
type IntegAlg int32

const (
	IntegAlg_NONE_INTEG  IntegAlg = 0
	IntegAlg_MD5_96      IntegAlg = 1 // RFC2403
	IntegAlg_SHA1_96     IntegAlg = 2 // RFC2404
	IntegAlg_SHA_256_96  IntegAlg = 3 // draft-ietf-ipsec-ciph-sha-256-00
	IntegAlg_SHA_256_128 IntegAlg = 4 // RFC4868
	IntegAlg_SHA_384_192 IntegAlg = 5 // RFC4868
	IntegAlg_SHA_512_256 IntegAlg = 6 // RFC4868
)

// Enum value maps for IntegAlg.
var (
	IntegAlg_name = map[int32]string{
		0: "NONE_INTEG",
		1: "MD5_96",
		2: "SHA1_96",
		3: "SHA_256_96",
		4: "SHA_256_128",
		5: "SHA_384_192",
		6: "SHA_512_256",
	}
	IntegAlg_value = map[string]int32{
		"NONE_INTEG":  0,
		"MD5_96":      1,
		"SHA1_96":     2,
		"SHA_256_96":  3,
		"SHA_256_128": 4,
		"SHA_384_192": 5,
		"SHA_512_256": 6,
	}
)

func (x IntegAlg) Enum() *IntegAlg {
	p := new(IntegAlg)
	*p = x
	return p
}

func (x IntegAlg) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IntegAlg) Descriptor() protoreflect.EnumDescriptor {
	return file_ligato_vpp_ipsec_ipsec_proto_enumTypes[1].Descriptor()
}

func (IntegAlg) Type() protoreflect.EnumType {
	return &file_ligato_vpp_ipsec_ipsec_proto_enumTypes[1]
}

func (x IntegAlg) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IntegAlg.Descriptor instead.
func (IntegAlg) EnumDescriptor() ([]byte, []int) {
	return file_ligato_vpp_ipsec_ipsec_proto_rawDescGZIP(), []int{1}
}

type SecurityPolicyDatabase_PolicyEntry_Action int32

const (
	SecurityPolicyDatabase_PolicyEntry_BYPASS  SecurityPolicyDatabase_PolicyEntry_Action = 0
	SecurityPolicyDatabase_PolicyEntry_DISCARD SecurityPolicyDatabase_PolicyEntry_Action = 1
	SecurityPolicyDatabase_PolicyEntry_RESOLVE SecurityPolicyDatabase_PolicyEntry_Action = 2 // Note: this particular action is unused in VPP
	SecurityPolicyDatabase_PolicyEntry_PROTECT SecurityPolicyDatabase_PolicyEntry_Action = 3
)

// Enum value maps for SecurityPolicyDatabase_PolicyEntry_Action.
var (
	SecurityPolicyDatabase_PolicyEntry_Action_name = map[int32]string{
		0: "BYPASS",
		1: "DISCARD",
		2: "RESOLVE",
		3: "PROTECT",
	}
	SecurityPolicyDatabase_PolicyEntry_Action_value = map[string]int32{
		"BYPASS":  0,
		"DISCARD": 1,
		"RESOLVE": 2,
		"PROTECT": 3,
	}
)

func (x SecurityPolicyDatabase_PolicyEntry_Action) Enum() *SecurityPolicyDatabase_PolicyEntry_Action {
	p := new(SecurityPolicyDatabase_PolicyEntry_Action)
	*p = x
	return p
}

func (x SecurityPolicyDatabase_PolicyEntry_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SecurityPolicyDatabase_PolicyEntry_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_ligato_vpp_ipsec_ipsec_proto_enumTypes[2].Descriptor()
}

func (SecurityPolicyDatabase_PolicyEntry_Action) Type() protoreflect.EnumType {
	return &file_ligato_vpp_ipsec_ipsec_proto_enumTypes[2]
}

func (x SecurityPolicyDatabase_PolicyEntry_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SecurityPolicyDatabase_PolicyEntry_Action.Descriptor instead.
func (SecurityPolicyDatabase_PolicyEntry_Action) EnumDescriptor() ([]byte, []int) {
	return file_ligato_vpp_ipsec_ipsec_proto_rawDescGZIP(), []int{0, 1, 0}
}

type SecurityPolicy_Action int32

const (
	SecurityPolicy_BYPASS  SecurityPolicy_Action = 0
	SecurityPolicy_DISCARD SecurityPolicy_Action = 1
	SecurityPolicy_RESOLVE SecurityPolicy_Action = 2 // Note: this particular action is unused in VPP
	SecurityPolicy_PROTECT SecurityPolicy_Action = 3
)

// Enum value maps for SecurityPolicy_Action.
var (
	SecurityPolicy_Action_name = map[int32]string{
		0: "BYPASS",
		1: "DISCARD",
		2: "RESOLVE",
		3: "PROTECT",
	}
	SecurityPolicy_Action_value = map[string]int32{
		"BYPASS":  0,
		"DISCARD": 1,
		"RESOLVE": 2,
		"PROTECT": 3,
	}
)

func (x SecurityPolicy_Action) Enum() *SecurityPolicy_Action {
	p := new(SecurityPolicy_Action)
	*p = x
	return p
}

func (x SecurityPolicy_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SecurityPolicy_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_ligato_vpp_ipsec_ipsec_proto_enumTypes[3].Descriptor()
}

func (SecurityPolicy_Action) Type() protoreflect.EnumType {
	return &file_ligato_vpp_ipsec_ipsec_proto_enumTypes[3]
}

func (x SecurityPolicy_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SecurityPolicy_Action.Descriptor instead.
func (SecurityPolicy_Action) EnumDescriptor() ([]byte, []int) {
	return file_ligato_vpp_ipsec_ipsec_proto_rawDescGZIP(), []int{1, 0}
}

type SecurityAssociation_IPSecProtocol int32

const (
	SecurityAssociation_AH  SecurityAssociation_IPSecProtocol = 0 // Authentication Header, provides a mechanism for authentication only
	SecurityAssociation_ESP SecurityAssociation_IPSecProtocol = 1 // Encapsulating Security Payload is for data confidentiality and authentication
)

// Enum value maps for SecurityAssociation_IPSecProtocol.
var (
	SecurityAssociation_IPSecProtocol_name = map[int32]string{
		0: "AH",
		1: "ESP",
	}
	SecurityAssociation_IPSecProtocol_value = map[string]int32{
		"AH":  0,
		"ESP": 1,
	}
)

func (x SecurityAssociation_IPSecProtocol) Enum() *SecurityAssociation_IPSecProtocol {
	p := new(SecurityAssociation_IPSecProtocol)
	*p = x
	return p
}

func (x SecurityAssociation_IPSecProtocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SecurityAssociation_IPSecProtocol) Descriptor() protoreflect.EnumDescriptor {
	return file_ligato_vpp_ipsec_ipsec_proto_enumTypes[4].Descriptor()
}

func (SecurityAssociation_IPSecProtocol) Type() protoreflect.EnumType {
	return &file_ligato_vpp_ipsec_ipsec_proto_enumTypes[4]
}

func (x SecurityAssociation_IPSecProtocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SecurityAssociation_IPSecProtocol.Descriptor instead.
func (SecurityAssociation_IPSecProtocol) EnumDescriptor() ([]byte, []int) {
	return file_ligato_vpp_ipsec_ipsec_proto_rawDescGZIP(), []int{2, 0}
}

// Security Policy Database (SPD)
type SecurityPolicyDatabase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index      uint32                              `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`          // Numerical security policy database index, serves as a unique identifier
	Interfaces []*SecurityPolicyDatabase_Interface `protobuf:"bytes,2,rep,name=interfaces,proto3" json:"interfaces,omitempty"` // List of interfaces belonging to this SPD
	// List of policy entries belonging to this SPD.
	// Deprecated and actually trying to use this will return an error.
	// Use separate model for Security Policy (SP) defined below.
	//
	// Deprecated: Do not use.
	PolicyEntries []*SecurityPolicyDatabase_PolicyEntry `protobuf:"bytes,3,rep,name=policy_entries,json=policyEntries,proto3" json:"policy_entries,omitempty"`
}

func (x *SecurityPolicyDatabase) Reset() {
	*x = SecurityPolicyDatabase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ligato_vpp_ipsec_ipsec_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecurityPolicyDatabase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecurityPolicyDatabase) ProtoMessage() {}

func (x *SecurityPolicyDatabase) ProtoReflect() protoreflect.Message {
	mi := &file_ligato_vpp_ipsec_ipsec_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecurityPolicyDatabase.ProtoReflect.Descriptor instead.
func (*SecurityPolicyDatabase) Descriptor() ([]byte, []int) {
	return file_ligato_vpp_ipsec_ipsec_proto_rawDescGZIP(), []int{0}
}

func (x *SecurityPolicyDatabase) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *SecurityPolicyDatabase) GetInterfaces() []*SecurityPolicyDatabase_Interface {
	if x != nil {
		return x.Interfaces
	}
	return nil
}

// Deprecated: Do not use.
func (x *SecurityPolicyDatabase) GetPolicyEntries() []*SecurityPolicyDatabase_PolicyEntry {
	if x != nil {
		return x.PolicyEntries
	}
	return nil
}

type SecurityPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpdIndex        uint32                `protobuf:"varint,1,opt,name=spd_index,json=spdIndex,proto3" json:"spd_index,omitempty"` // Security policy database index
	SaIndex         uint32                `protobuf:"varint,2,opt,name=sa_index,json=saIndex,proto3" json:"sa_index,omitempty"`    // Security association index
	Priority        int32                 `protobuf:"varint,3,opt,name=priority,proto3" json:"priority,omitempty"`
	IsOutbound      bool                  `protobuf:"varint,4,opt,name=is_outbound,json=isOutbound,proto3" json:"is_outbound,omitempty"`
	RemoteAddrStart string                `protobuf:"bytes,5,opt,name=remote_addr_start,json=remoteAddrStart,proto3" json:"remote_addr_start,omitempty"`
	RemoteAddrStop  string                `protobuf:"bytes,6,opt,name=remote_addr_stop,json=remoteAddrStop,proto3" json:"remote_addr_stop,omitempty"`
	LocalAddrStart  string                `protobuf:"bytes,7,opt,name=local_addr_start,json=localAddrStart,proto3" json:"local_addr_start,omitempty"`
	LocalAddrStop   string                `protobuf:"bytes,8,opt,name=local_addr_stop,json=localAddrStop,proto3" json:"local_addr_stop,omitempty"`
	Protocol        uint32                `protobuf:"varint,9,opt,name=protocol,proto3" json:"protocol,omitempty"`
	RemotePortStart uint32                `protobuf:"varint,10,opt,name=remote_port_start,json=remotePortStart,proto3" json:"remote_port_start,omitempty"`
	RemotePortStop  uint32                `protobuf:"varint,11,opt,name=remote_port_stop,json=remotePortStop,proto3" json:"remote_port_stop,omitempty"`
	LocalPortStart  uint32                `protobuf:"varint,12,opt,name=local_port_start,json=localPortStart,proto3" json:"local_port_start,omitempty"`
	LocalPortStop   uint32                `protobuf:"varint,13,opt,name=local_port_stop,json=localPortStop,proto3" json:"local_port_stop,omitempty"`
	Action          SecurityPolicy_Action `protobuf:"varint,14,opt,name=action,proto3,enum=ligato.vpp.ipsec.SecurityPolicy_Action" json:"action,omitempty"`
}

func (x *SecurityPolicy) Reset() {
	*x = SecurityPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ligato_vpp_ipsec_ipsec_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecurityPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecurityPolicy) ProtoMessage() {}

func (x *SecurityPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_ligato_vpp_ipsec_ipsec_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecurityPolicy.ProtoReflect.Descriptor instead.
func (*SecurityPolicy) Descriptor() ([]byte, []int) {
	return file_ligato_vpp_ipsec_ipsec_proto_rawDescGZIP(), []int{1}
}

func (x *SecurityPolicy) GetSpdIndex() uint32 {
	if x != nil {
		return x.SpdIndex
	}
	return 0
}

func (x *SecurityPolicy) GetSaIndex() uint32 {
	if x != nil {
		return x.SaIndex
	}
	return 0
}

func (x *SecurityPolicy) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *SecurityPolicy) GetIsOutbound() bool {
	if x != nil {
		return x.IsOutbound
	}
	return false
}

func (x *SecurityPolicy) GetRemoteAddrStart() string {
	if x != nil {
		return x.RemoteAddrStart
	}
	return ""
}

func (x *SecurityPolicy) GetRemoteAddrStop() string {
	if x != nil {
		return x.RemoteAddrStop
	}
	return ""
}

func (x *SecurityPolicy) GetLocalAddrStart() string {
	if x != nil {
		return x.LocalAddrStart
	}
	return ""
}

func (x *SecurityPolicy) GetLocalAddrStop() string {
	if x != nil {
		return x.LocalAddrStop
	}
	return ""
}

func (x *SecurityPolicy) GetProtocol() uint32 {
	if x != nil {
		return x.Protocol
	}
	return 0
}

func (x *SecurityPolicy) GetRemotePortStart() uint32 {
	if x != nil {
		return x.RemotePortStart
	}
	return 0
}

func (x *SecurityPolicy) GetRemotePortStop() uint32 {
	if x != nil {
		return x.RemotePortStop
	}
	return 0
}

func (x *SecurityPolicy) GetLocalPortStart() uint32 {
	if x != nil {
		return x.LocalPortStart
	}
	return 0
}

func (x *SecurityPolicy) GetLocalPortStop() uint32 {
	if x != nil {
		return x.LocalPortStop
	}
	return 0
}

func (x *SecurityPolicy) GetAction() SecurityPolicy_Action {
	if x != nil {
		return x.Action
	}
	return SecurityPolicy_BYPASS
}

// Security Association (SA)
type SecurityAssociation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index          uint32                            `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"` // Numerical security association index, serves as a unique identifier
	Spi            uint32                            `protobuf:"varint,2,opt,name=spi,proto3" json:"spi,omitempty"`     // Security parameter index
	Protocol       SecurityAssociation_IPSecProtocol `protobuf:"varint,3,opt,name=protocol,proto3,enum=ligato.vpp.ipsec.SecurityAssociation_IPSecProtocol" json:"protocol,omitempty"`
	CryptoAlg      CryptoAlg                         `protobuf:"varint,4,opt,name=crypto_alg,json=cryptoAlg,proto3,enum=ligato.vpp.ipsec.CryptoAlg" json:"crypto_alg,omitempty"` // Cryptographic algorithm for encryption
	CryptoKey      string                            `protobuf:"bytes,5,opt,name=crypto_key,json=cryptoKey,proto3" json:"crypto_key,omitempty"`
	CryptoSalt     uint32                            `protobuf:"varint,15,opt,name=crypto_salt,json=cryptoSalt,proto3" json:"crypto_salt,omitempty"`
	IntegAlg       IntegAlg                          `protobuf:"varint,6,opt,name=integ_alg,json=integAlg,proto3,enum=ligato.vpp.ipsec.IntegAlg" json:"integ_alg,omitempty"` // Cryptographic algorithm for authentication
	IntegKey       string                            `protobuf:"bytes,7,opt,name=integ_key,json=integKey,proto3" json:"integ_key,omitempty"`
	UseEsn         bool                              `protobuf:"varint,8,opt,name=use_esn,json=useEsn,proto3" json:"use_esn,omitempty"`                        // Use extended sequence number
	UseAntiReplay  bool                              `protobuf:"varint,9,opt,name=use_anti_replay,json=useAntiReplay,proto3" json:"use_anti_replay,omitempty"` // Use anti replay
	TunnelSrcAddr  string                            `protobuf:"bytes,10,opt,name=tunnel_src_addr,json=tunnelSrcAddr,proto3" json:"tunnel_src_addr,omitempty"`
	TunnelDstAddr  string                            `protobuf:"bytes,11,opt,name=tunnel_dst_addr,json=tunnelDstAddr,proto3" json:"tunnel_dst_addr,omitempty"`
	EnableUdpEncap bool                              `protobuf:"varint,12,opt,name=enable_udp_encap,json=enableUdpEncap,proto3" json:"enable_udp_encap,omitempty"` // Enable UDP encapsulation for NAT traversal
	TunnelSrcPort  uint32                            `protobuf:"varint,13,opt,name=tunnel_src_port,json=tunnelSrcPort,proto3" json:"tunnel_src_port,omitempty"`
	TunnelDstPort  uint32                            `protobuf:"varint,14,opt,name=tunnel_dst_port,json=tunnelDstPort,proto3" json:"tunnel_dst_port,omitempty"`
}

func (x *SecurityAssociation) Reset() {
	*x = SecurityAssociation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ligato_vpp_ipsec_ipsec_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecurityAssociation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecurityAssociation) ProtoMessage() {}

func (x *SecurityAssociation) ProtoReflect() protoreflect.Message {
	mi := &file_ligato_vpp_ipsec_ipsec_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecurityAssociation.ProtoReflect.Descriptor instead.
func (*SecurityAssociation) Descriptor() ([]byte, []int) {
	return file_ligato_vpp_ipsec_ipsec_proto_rawDescGZIP(), []int{2}
}

func (x *SecurityAssociation) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *SecurityAssociation) GetSpi() uint32 {
	if x != nil {
		return x.Spi
	}
	return 0
}

func (x *SecurityAssociation) GetProtocol() SecurityAssociation_IPSecProtocol {
	if x != nil {
		return x.Protocol
	}
	return SecurityAssociation_AH
}

func (x *SecurityAssociation) GetCryptoAlg() CryptoAlg {
	if x != nil {
		return x.CryptoAlg
	}
	return CryptoAlg_NONE_CRYPTO
}

func (x *SecurityAssociation) GetCryptoKey() string {
	if x != nil {
		return x.CryptoKey
	}
	return ""
}

func (x *SecurityAssociation) GetCryptoSalt() uint32 {
	if x != nil {
		return x.CryptoSalt
	}
	return 0
}

func (x *SecurityAssociation) GetIntegAlg() IntegAlg {
	if x != nil {
		return x.IntegAlg
	}
	return IntegAlg_NONE_INTEG
}

func (x *SecurityAssociation) GetIntegKey() string {
	if x != nil {
		return x.IntegKey
	}
	return ""
}

func (x *SecurityAssociation) GetUseEsn() bool {
	if x != nil {
		return x.UseEsn
	}
	return false
}

func (x *SecurityAssociation) GetUseAntiReplay() bool {
	if x != nil {
		return x.UseAntiReplay
	}
	return false
}

func (x *SecurityAssociation) GetTunnelSrcAddr() string {
	if x != nil {
		return x.TunnelSrcAddr
	}
	return ""
}

func (x *SecurityAssociation) GetTunnelDstAddr() string {
	if x != nil {
		return x.TunnelDstAddr
	}
	return ""
}

func (x *SecurityAssociation) GetEnableUdpEncap() bool {
	if x != nil {
		return x.EnableUdpEncap
	}
	return false
}

func (x *SecurityAssociation) GetTunnelSrcPort() uint32 {
	if x != nil {
		return x.TunnelSrcPort
	}
	return 0
}

func (x *SecurityAssociation) GetTunnelDstPort() uint32 {
	if x != nil {
		return x.TunnelDstPort
	}
	return 0
}

// TunnelProtection allows enabling IPSec tunnel protection on an existing interface
// (only IPIP tunnel interfaces are currently supported)
type TunnelProtection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the interface to be protected with IPSec.
	Interface string `protobuf:"bytes,1,opt,name=interface,proto3" json:"interface,omitempty"`
	// Outbound security associations identified by SA index.
	SaOut []uint32 `protobuf:"varint,2,rep,packed,name=sa_out,json=saOut,proto3" json:"sa_out,omitempty"`
	// Inbound security associations identified by SA index.
	SaIn []uint32 `protobuf:"varint,3,rep,packed,name=sa_in,json=saIn,proto3" json:"sa_in,omitempty"`
	// (Optional) Next hop IP address, used for multipoint tunnels.
	NextHopAddr string `protobuf:"bytes,4,opt,name=next_hop_addr,json=nextHopAddr,proto3" json:"next_hop_addr,omitempty"`
}

func (x *TunnelProtection) Reset() {
	*x = TunnelProtection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ligato_vpp_ipsec_ipsec_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TunnelProtection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelProtection) ProtoMessage() {}

func (x *TunnelProtection) ProtoReflect() protoreflect.Message {
	mi := &file_ligato_vpp_ipsec_ipsec_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelProtection.ProtoReflect.Descriptor instead.
func (*TunnelProtection) Descriptor() ([]byte, []int) {
	return file_ligato_vpp_ipsec_ipsec_proto_rawDescGZIP(), []int{3}
}

func (x *TunnelProtection) GetInterface() string {
	if x != nil {
		return x.Interface
	}
	return ""
}

func (x *TunnelProtection) GetSaOut() []uint32 {
	if x != nil {
		return x.SaOut
	}
	return nil
}

func (x *TunnelProtection) GetSaIn() []uint32 {
	if x != nil {
		return x.SaIn
	}
	return nil
}

func (x *TunnelProtection) GetNextHopAddr() string {
	if x != nil {
		return x.NextHopAddr
	}
	return ""
}

type SecurityPolicyDatabase_Interface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // Name of the related interface
}

func (x *SecurityPolicyDatabase_Interface) Reset() {
	*x = SecurityPolicyDatabase_Interface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ligato_vpp_ipsec_ipsec_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecurityPolicyDatabase_Interface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecurityPolicyDatabase_Interface) ProtoMessage() {}

func (x *SecurityPolicyDatabase_Interface) ProtoReflect() protoreflect.Message {
	mi := &file_ligato_vpp_ipsec_ipsec_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecurityPolicyDatabase_Interface.ProtoReflect.Descriptor instead.
func (*SecurityPolicyDatabase_Interface) Descriptor() ([]byte, []int) {
	return file_ligato_vpp_ipsec_ipsec_proto_rawDescGZIP(), []int{0, 0}
}

func (x *SecurityPolicyDatabase_Interface) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type SecurityPolicyDatabase_PolicyEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SaIndex         uint32                                    `protobuf:"varint,1,opt,name=sa_index,json=saIndex,proto3" json:"sa_index,omitempty"` // Security association index
	Priority        int32                                     `protobuf:"varint,2,opt,name=priority,proto3" json:"priority,omitempty"`
	IsOutbound      bool                                      `protobuf:"varint,3,opt,name=is_outbound,json=isOutbound,proto3" json:"is_outbound,omitempty"`
	RemoteAddrStart string                                    `protobuf:"bytes,4,opt,name=remote_addr_start,json=remoteAddrStart,proto3" json:"remote_addr_start,omitempty"`
	RemoteAddrStop  string                                    `protobuf:"bytes,5,opt,name=remote_addr_stop,json=remoteAddrStop,proto3" json:"remote_addr_stop,omitempty"`
	LocalAddrStart  string                                    `protobuf:"bytes,6,opt,name=local_addr_start,json=localAddrStart,proto3" json:"local_addr_start,omitempty"`
	LocalAddrStop   string                                    `protobuf:"bytes,7,opt,name=local_addr_stop,json=localAddrStop,proto3" json:"local_addr_stop,omitempty"`
	Protocol        uint32                                    `protobuf:"varint,8,opt,name=protocol,proto3" json:"protocol,omitempty"`
	RemotePortStart uint32                                    `protobuf:"varint,9,opt,name=remote_port_start,json=remotePortStart,proto3" json:"remote_port_start,omitempty"`
	RemotePortStop  uint32                                    `protobuf:"varint,10,opt,name=remote_port_stop,json=remotePortStop,proto3" json:"remote_port_stop,omitempty"`
	LocalPortStart  uint32                                    `protobuf:"varint,11,opt,name=local_port_start,json=localPortStart,proto3" json:"local_port_start,omitempty"`
	LocalPortStop   uint32                                    `protobuf:"varint,12,opt,name=local_port_stop,json=localPortStop,proto3" json:"local_port_stop,omitempty"`
	Action          SecurityPolicyDatabase_PolicyEntry_Action `protobuf:"varint,13,opt,name=action,proto3,enum=ligato.vpp.ipsec.SecurityPolicyDatabase_PolicyEntry_Action" json:"action,omitempty"`
}

func (x *SecurityPolicyDatabase_PolicyEntry) Reset() {
	*x = SecurityPolicyDatabase_PolicyEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ligato_vpp_ipsec_ipsec_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecurityPolicyDatabase_PolicyEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecurityPolicyDatabase_PolicyEntry) ProtoMessage() {}

func (x *SecurityPolicyDatabase_PolicyEntry) ProtoReflect() protoreflect.Message {
	mi := &file_ligato_vpp_ipsec_ipsec_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecurityPolicyDatabase_PolicyEntry.ProtoReflect.Descriptor instead.
func (*SecurityPolicyDatabase_PolicyEntry) Descriptor() ([]byte, []int) {
	return file_ligato_vpp_ipsec_ipsec_proto_rawDescGZIP(), []int{0, 1}
}

func (x *SecurityPolicyDatabase_PolicyEntry) GetSaIndex() uint32 {
	if x != nil {
		return x.SaIndex
	}
	return 0
}

func (x *SecurityPolicyDatabase_PolicyEntry) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *SecurityPolicyDatabase_PolicyEntry) GetIsOutbound() bool {
	if x != nil {
		return x.IsOutbound
	}
	return false
}

func (x *SecurityPolicyDatabase_PolicyEntry) GetRemoteAddrStart() string {
	if x != nil {
		return x.RemoteAddrStart
	}
	return ""
}

func (x *SecurityPolicyDatabase_PolicyEntry) GetRemoteAddrStop() string {
	if x != nil {
		return x.RemoteAddrStop
	}
	return ""
}

func (x *SecurityPolicyDatabase_PolicyEntry) GetLocalAddrStart() string {
	if x != nil {
		return x.LocalAddrStart
	}
	return ""
}

func (x *SecurityPolicyDatabase_PolicyEntry) GetLocalAddrStop() string {
	if x != nil {
		return x.LocalAddrStop
	}
	return ""
}

func (x *SecurityPolicyDatabase_PolicyEntry) GetProtocol() uint32 {
	if x != nil {
		return x.Protocol
	}
	return 0
}

func (x *SecurityPolicyDatabase_PolicyEntry) GetRemotePortStart() uint32 {
	if x != nil {
		return x.RemotePortStart
	}
	return 0
}

func (x *SecurityPolicyDatabase_PolicyEntry) GetRemotePortStop() uint32 {
	if x != nil {
		return x.RemotePortStop
	}
	return 0
}

func (x *SecurityPolicyDatabase_PolicyEntry) GetLocalPortStart() uint32 {
	if x != nil {
		return x.LocalPortStart
	}
	return 0
}

func (x *SecurityPolicyDatabase_PolicyEntry) GetLocalPortStop() uint32 {
	if x != nil {
		return x.LocalPortStop
	}
	return 0
}

func (x *SecurityPolicyDatabase_PolicyEntry) GetAction() SecurityPolicyDatabase_PolicyEntry_Action {
	if x != nil {
		return x.Action
	}
	return SecurityPolicyDatabase_PolicyEntry_BYPASS
}

var File_ligato_vpp_ipsec_ipsec_proto protoreflect.FileDescriptor

var file_ligato_vpp_ipsec_ipsec_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2f, 0x76, 0x70, 0x70, 0x2f, 0x69, 0x70, 0x73,
	0x65, 0x63, 0x2f, 0x69, 0x70, 0x73, 0x65, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10,
	0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2e, 0x76, 0x70, 0x70, 0x2e, 0x69, 0x70, 0x73, 0x65, 0x63,
	0x22, 0xea, 0x06, 0x0a, 0x16, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x52, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2e, 0x76,
	0x70, 0x70, 0x2e, 0x69, 0x70, 0x73, 0x65, 0x63, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x5f, 0x0a, 0x0e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f,
	0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2e, 0x76, 0x70, 0x70, 0x2e, 0x69, 0x70, 0x73, 0x65, 0x63,
	0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x45,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x1a, 0x1f, 0x0a, 0x09, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0xe3, 0x04, 0x0a, 0x0b, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x61, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x61, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1f,
	0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x12,
	0x2a, 0x0a, 0x11, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64,
	0x72, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x26, 0x0a, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x73, 0x74,
	0x6f, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41,
	0x64, 0x64, 0x72, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x28, 0x0a, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73,
	0x74, 0x6f, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x53, 0x0a, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x6c, 0x69,
	0x67, 0x61, 0x74, 0x6f, 0x2e, 0x76, 0x70, 0x70, 0x2e, 0x69, 0x70, 0x73, 0x65, 0x63, 0x2e, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x3b, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x59,
	0x50, 0x41, 0x53, 0x53, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x49, 0x53, 0x43, 0x41, 0x52,
	0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x10, 0x02,
	0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x10, 0x03, 0x22, 0xef, 0x04,
	0x0a, 0x0e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x70, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x70, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x19, 0x0a,
	0x08, 0x73, 0x61, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x73, 0x61, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x4f, 0x75, 0x74,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x5f, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x28, 0x0a, 0x10, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x6f, 0x70, 0x12,
	0x28, 0x0a, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x6f,
	0x70, 0x12, 0x3f, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x27, 0x2e, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2e, 0x76, 0x70, 0x70, 0x2e, 0x69,
	0x70, 0x73, 0x65, 0x63, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x3b, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0a, 0x0a, 0x06,
	0x42, 0x59, 0x50, 0x41, 0x53, 0x53, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x49, 0x53, 0x43,
	0x41, 0x52, 0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45,
	0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x10, 0x03, 0x22,
	0x8d, 0x05, 0x0a, 0x13, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x73, 0x73, 0x6f,
	0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x10, 0x0a,
	0x03, 0x73, 0x70, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x73, 0x70, 0x69, 0x12,
	0x4f, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x33, 0x2e, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2e, 0x76, 0x70, 0x70, 0x2e, 0x69,
	0x70, 0x73, 0x65, 0x63, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x73, 0x73,
	0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x50, 0x53, 0x65, 0x63, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x12, 0x3a, 0x0a, 0x0a, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x61, 0x6c, 0x67, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2e, 0x76, 0x70,
	0x70, 0x2e, 0x69, 0x70, 0x73, 0x65, 0x63, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x6c,
	0x67, 0x52, 0x09, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x6c, 0x67, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x4b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x73, 0x61, 0x6c, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x53, 0x61, 0x6c, 0x74, 0x12, 0x37, 0x0a, 0x09,
	0x69, 0x6e, 0x74, 0x65, 0x67, 0x5f, 0x61, 0x6c, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1a, 0x2e, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2e, 0x76, 0x70, 0x70, 0x2e, 0x69, 0x70, 0x73,
	0x65, 0x63, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x41, 0x6c, 0x67, 0x52, 0x08, 0x69, 0x6e, 0x74,
	0x65, 0x67, 0x41, 0x6c, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x4b,
	0x65, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x5f, 0x65, 0x73, 0x6e, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x75, 0x73, 0x65, 0x45, 0x73, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x75,
	0x73, 0x65, 0x5f, 0x61, 0x6e, 0x74, 0x69, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x41, 0x6e, 0x74, 0x69, 0x52, 0x65, 0x70,
	0x6c, 0x61, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x73, 0x72,
	0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x72, 0x63, 0x41, 0x64, 0x64, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x74,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x64, 0x73, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x73, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x75, 0x64,
	0x70, 0x5f, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x64, 0x70, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x12, 0x26, 0x0a,
	0x0f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x72,
	0x63, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x64, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x22, 0x20, 0x0a,
	0x0d, 0x49, 0x50, 0x53, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x06,
	0x0a, 0x02, 0x41, 0x48, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x53, 0x50, 0x10, 0x01, 0x22,
	0x80, 0x01, 0x0a, 0x10, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x61, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x05, 0x73, 0x61, 0x4f, 0x75, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x73, 0x61, 0x5f,
	0x69, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x61, 0x49, 0x6e, 0x12, 0x22,
	0x0a, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x41, 0x64,
	0x64, 0x72, 0x2a, 0xd0, 0x01, 0x0a, 0x09, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x6c, 0x67,
	0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x4f, 0x4e, 0x45, 0x5f, 0x43, 0x52, 0x59, 0x50, 0x54, 0x4f, 0x10,
	0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x45, 0x53, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x31, 0x32, 0x38,
	0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x45, 0x53, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x31, 0x39,
	0x32, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x45, 0x53, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x32,
	0x35, 0x36, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x45, 0x53, 0x5f, 0x43, 0x54, 0x52, 0x5f,
	0x31, 0x32, 0x38, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x45, 0x53, 0x5f, 0x43, 0x54, 0x52,
	0x5f, 0x31, 0x39, 0x32, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x45, 0x53, 0x5f, 0x43, 0x54,
	0x52, 0x5f, 0x32, 0x35, 0x36, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x45, 0x53, 0x5f, 0x47,
	0x43, 0x4d, 0x5f, 0x31, 0x32, 0x38, 0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x45, 0x53, 0x5f,
	0x47, 0x43, 0x4d, 0x5f, 0x31, 0x39, 0x32, 0x10, 0x08, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x45, 0x53,
	0x5f, 0x47, 0x43, 0x4d, 0x5f, 0x32, 0x35, 0x36, 0x10, 0x09, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45,
	0x53, 0x5f, 0x43, 0x42, 0x43, 0x10, 0x0a, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45, 0x53, 0x33, 0x5f,
	0x43, 0x42, 0x43, 0x10, 0x0b, 0x2a, 0x76, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x41, 0x6c,
	0x67, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x4f, 0x4e, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x10,
	0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x44, 0x35, 0x5f, 0x39, 0x36, 0x10, 0x01, 0x12, 0x0b, 0x0a,
	0x07, 0x53, 0x48, 0x41, 0x31, 0x5f, 0x39, 0x36, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x48,
	0x41, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x39, 0x36, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x48,
	0x41, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x31, 0x32, 0x38, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x53,
	0x48, 0x41, 0x5f, 0x33, 0x38, 0x34, 0x5f, 0x31, 0x39, 0x32, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b,
	0x53, 0x48, 0x41, 0x5f, 0x35, 0x31, 0x32, 0x5f, 0x32, 0x35, 0x36, 0x10, 0x06, 0x42, 0x3c, 0x5a,
	0x3a, 0x67, 0x6f, 0x2e, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2e, 0x69, 0x6f, 0x2f, 0x76, 0x70,
	0x70, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x33, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2f, 0x76, 0x70, 0x70, 0x2f, 0x69, 0x70, 0x73, 0x65,
	0x63, 0x3b, 0x76, 0x70, 0x70, 0x5f, 0x69, 0x70, 0x73, 0x65, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_ligato_vpp_ipsec_ipsec_proto_rawDescOnce sync.Once
	file_ligato_vpp_ipsec_ipsec_proto_rawDescData = file_ligato_vpp_ipsec_ipsec_proto_rawDesc
)

func file_ligato_vpp_ipsec_ipsec_proto_rawDescGZIP() []byte {
	file_ligato_vpp_ipsec_ipsec_proto_rawDescOnce.Do(func() {
		file_ligato_vpp_ipsec_ipsec_proto_rawDescData = protoimpl.X.CompressGZIP(file_ligato_vpp_ipsec_ipsec_proto_rawDescData)
	})
	return file_ligato_vpp_ipsec_ipsec_proto_rawDescData
}

var file_ligato_vpp_ipsec_ipsec_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_ligato_vpp_ipsec_ipsec_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_ligato_vpp_ipsec_ipsec_proto_goTypes = []interface{}{
	(CryptoAlg)(0), // 0: ligato.vpp.ipsec.CryptoAlg
	(IntegAlg)(0),  // 1: ligato.vpp.ipsec.IntegAlg
	(SecurityPolicyDatabase_PolicyEntry_Action)(0), // 2: ligato.vpp.ipsec.SecurityPolicyDatabase.PolicyEntry.Action
	(SecurityPolicy_Action)(0),                     // 3: ligato.vpp.ipsec.SecurityPolicy.Action
	(SecurityAssociation_IPSecProtocol)(0),         // 4: ligato.vpp.ipsec.SecurityAssociation.IPSecProtocol
	(*SecurityPolicyDatabase)(nil),                 // 5: ligato.vpp.ipsec.SecurityPolicyDatabase
	(*SecurityPolicy)(nil),                         // 6: ligato.vpp.ipsec.SecurityPolicy
	(*SecurityAssociation)(nil),                    // 7: ligato.vpp.ipsec.SecurityAssociation
	(*TunnelProtection)(nil),                       // 8: ligato.vpp.ipsec.TunnelProtection
	(*SecurityPolicyDatabase_Interface)(nil),       // 9: ligato.vpp.ipsec.SecurityPolicyDatabase.Interface
	(*SecurityPolicyDatabase_PolicyEntry)(nil),     // 10: ligato.vpp.ipsec.SecurityPolicyDatabase.PolicyEntry
}
var file_ligato_vpp_ipsec_ipsec_proto_depIdxs = []int32{
	9,  // 0: ligato.vpp.ipsec.SecurityPolicyDatabase.interfaces:type_name -> ligato.vpp.ipsec.SecurityPolicyDatabase.Interface
	10, // 1: ligato.vpp.ipsec.SecurityPolicyDatabase.policy_entries:type_name -> ligato.vpp.ipsec.SecurityPolicyDatabase.PolicyEntry
	3,  // 2: ligato.vpp.ipsec.SecurityPolicy.action:type_name -> ligato.vpp.ipsec.SecurityPolicy.Action
	4,  // 3: ligato.vpp.ipsec.SecurityAssociation.protocol:type_name -> ligato.vpp.ipsec.SecurityAssociation.IPSecProtocol
	0,  // 4: ligato.vpp.ipsec.SecurityAssociation.crypto_alg:type_name -> ligato.vpp.ipsec.CryptoAlg
	1,  // 5: ligato.vpp.ipsec.SecurityAssociation.integ_alg:type_name -> ligato.vpp.ipsec.IntegAlg
	2,  // 6: ligato.vpp.ipsec.SecurityPolicyDatabase.PolicyEntry.action:type_name -> ligato.vpp.ipsec.SecurityPolicyDatabase.PolicyEntry.Action
	7,  // [7:7] is the sub-list for method output_type
	7,  // [7:7] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_ligato_vpp_ipsec_ipsec_proto_init() }
func file_ligato_vpp_ipsec_ipsec_proto_init() {
	if File_ligato_vpp_ipsec_ipsec_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ligato_vpp_ipsec_ipsec_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecurityPolicyDatabase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ligato_vpp_ipsec_ipsec_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecurityPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ligato_vpp_ipsec_ipsec_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecurityAssociation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ligato_vpp_ipsec_ipsec_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TunnelProtection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ligato_vpp_ipsec_ipsec_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecurityPolicyDatabase_Interface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ligato_vpp_ipsec_ipsec_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecurityPolicyDatabase_PolicyEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ligato_vpp_ipsec_ipsec_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ligato_vpp_ipsec_ipsec_proto_goTypes,
		DependencyIndexes: file_ligato_vpp_ipsec_ipsec_proto_depIdxs,
		EnumInfos:         file_ligato_vpp_ipsec_ipsec_proto_enumTypes,
		MessageInfos:      file_ligato_vpp_ipsec_ipsec_proto_msgTypes,
	}.Build()
	File_ligato_vpp_ipsec_ipsec_proto = out.File
	file_ligato_vpp_ipsec_ipsec_proto_rawDesc = nil
	file_ligato_vpp_ipsec_ipsec_proto_goTypes = nil
	file_ligato_vpp_ipsec_ipsec_proto_depIdxs = nil
}
