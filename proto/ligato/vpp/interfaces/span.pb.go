// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ligato/vpp/interfaces/span.proto

package vpp_interfaces

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Span_Direction int32

const (
	Span_UNKNOWN Span_Direction = 0
	Span_RX      Span_Direction = 1
	Span_TX      Span_Direction = 2
	Span_BOTH    Span_Direction = 3
)

var Span_Direction_name = map[int32]string{
	0: "UNKNOWN",
	1: "RX",
	2: "TX",
	3: "BOTH",
}

var Span_Direction_value = map[string]int32{
	"UNKNOWN": 0,
	"RX":      1,
	"TX":      2,
	"BOTH":    3,
}

func (x Span_Direction) String() string {
	return proto.EnumName(Span_Direction_name, int32(x))
}

func (Span_Direction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3db2120d57515158, []int{0, 0}
}

type Span struct {
	InterfaceFrom        string         `protobuf:"bytes,1,opt,name=interface_from,json=interfaceFrom,proto3" json:"interface_from,omitempty"`
	InterfaceTo          string         `protobuf:"bytes,2,opt,name=interface_to,json=interfaceTo,proto3" json:"interface_to,omitempty"`
	Direction            Span_Direction `protobuf:"varint,3,opt,name=direction,proto3,enum=ligato.vpp.interfaces.Span_Direction" json:"direction,omitempty"`
	IsL2                 bool           `protobuf:"varint,4,opt,name=is_l2,json=isL2,proto3" json:"is_l2,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Span) Reset()         { *m = Span{} }
func (m *Span) String() string { return proto.CompactTextString(m) }
func (*Span) ProtoMessage()    {}
func (*Span) Descriptor() ([]byte, []int) {
	return fileDescriptor_3db2120d57515158, []int{0}
}

func (m *Span) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Span.Unmarshal(m, b)
}
func (m *Span) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Span.Marshal(b, m, deterministic)
}
func (m *Span) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Span.Merge(m, src)
}
func (m *Span) XXX_Size() int {
	return xxx_messageInfo_Span.Size(m)
}
func (m *Span) XXX_DiscardUnknown() {
	xxx_messageInfo_Span.DiscardUnknown(m)
}

var xxx_messageInfo_Span proto.InternalMessageInfo

func (m *Span) GetInterfaceFrom() string {
	if m != nil {
		return m.InterfaceFrom
	}
	return ""
}

func (m *Span) GetInterfaceTo() string {
	if m != nil {
		return m.InterfaceTo
	}
	return ""
}

func (m *Span) GetDirection() Span_Direction {
	if m != nil {
		return m.Direction
	}
	return Span_UNKNOWN
}

func (m *Span) GetIsL2() bool {
	if m != nil {
		return m.IsL2
	}
	return false
}

func init() {
	proto.RegisterEnum("ligato.vpp.interfaces.Span_Direction", Span_Direction_name, Span_Direction_value)
	proto.RegisterType((*Span)(nil), "ligato.vpp.interfaces.Span")
}

func init() { proto.RegisterFile("ligato/vpp/interfaces/span.proto", fileDescriptor_3db2120d57515158) }

var fileDescriptor_3db2120d57515158 = []byte{
	// 254 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0xd0, 0xc1, 0x4b, 0xc3, 0x30,
	0x14, 0x06, 0x70, 0xd3, 0xd5, 0xb9, 0xbe, 0xe9, 0x28, 0x11, 0xa1, 0xc7, 0x3a, 0x18, 0xf4, 0x62,
	0x02, 0xf1, 0xe8, 0x6d, 0x8e, 0x21, 0x28, 0x1d, 0xd4, 0x8a, 0xc3, 0x4b, 0x89, 0xb3, 0x2b, 0x81,
	0x2d, 0x79, 0xa4, 0xa1, 0x7f, 0xae, 0x7f, 0x8b, 0xac, 0xb2, 0xf6, 0xd2, 0x53, 0xc8, 0xc7, 0xef,
	0xf1, 0xc1, 0x07, 0xf1, 0x41, 0x55, 0xd2, 0x19, 0xde, 0x20, 0x72, 0xa5, 0x5d, 0x69, 0xf7, 0x72,
	0x57, 0xd6, 0xbc, 0x46, 0xa9, 0x19, 0x5a, 0xe3, 0x0c, 0xbd, 0xfb, 0x17, 0xac, 0x41, 0x64, 0xbd,
	0x98, 0xff, 0x12, 0xf0, 0xdf, 0x51, 0x6a, 0xba, 0x80, 0x59, 0x17, 0x17, 0x7b, 0x6b, 0x8e, 0x11,
	0x89, 0x49, 0x12, 0x64, 0x37, 0x5d, 0xba, 0xb6, 0xe6, 0x48, 0xef, 0xe1, 0xba, 0x67, 0xce, 0x44,
	0x5e, 0x8b, 0xa6, 0x5d, 0x96, 0x1b, 0xfa, 0x0c, 0xc1, 0x8f, 0xb2, 0xe5, 0xce, 0x29, 0xa3, 0xa3,
	0x51, 0x4c, 0x92, 0x99, 0x58, 0xb0, 0xc1, 0x76, 0x76, 0x6a, 0x66, 0xab, 0x33, 0xce, 0xfa, 0x3b,
	0x7a, 0x0b, 0x97, 0xaa, 0x2e, 0x0e, 0x22, 0xf2, 0x63, 0x92, 0x4c, 0x32, 0x5f, 0xd5, 0x6f, 0x62,
	0x2e, 0x20, 0xe8, 0x30, 0x9d, 0xc2, 0xd5, 0x47, 0xfa, 0x9a, 0x6e, 0x3e, 0xd3, 0xf0, 0x82, 0x8e,
	0xc1, 0xcb, 0xb6, 0x21, 0x39, 0xbd, 0xf9, 0x36, 0xf4, 0xe8, 0x04, 0xfc, 0xe5, 0x26, 0x7f, 0x09,
	0x47, 0xcb, 0xf5, 0xd7, 0xaa, 0x32, 0xe7, 0x7a, 0xd5, 0x2e, 0xf4, 0x20, 0xab, 0x52, 0x3b, 0xde,
	0x08, 0xde, 0x4e, 0xc3, 0x07, 0xb7, 0x7b, 0x6a, 0x10, 0x8b, 0xfe, 0xfb, 0x3d, 0x6e, 0xed, 0xe3,
	0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe0, 0xaa, 0x69, 0xfe, 0x6a, 0x01, 0x00, 0x00,
}
