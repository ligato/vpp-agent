// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ligato/vpp/interfaces/interface.proto

package vpp_interfaces

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	ipsec "go.ligato.io/vpp-agent/v3/proto/ligato/vpp/ipsec"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Type defines VPP interface types.
type Interface_Type int32

const (
	Interface_UNDEFINED_TYPE    Interface_Type = 0
	Interface_SUB_INTERFACE     Interface_Type = 1
	Interface_SOFTWARE_LOOPBACK Interface_Type = 2
	Interface_DPDK              Interface_Type = 3
	Interface_MEMIF             Interface_Type = 4
	Interface_TAP               Interface_Type = 5
	Interface_AF_PACKET         Interface_Type = 6
	Interface_VXLAN_TUNNEL      Interface_Type = 7
	Interface_IPSEC_TUNNEL      Interface_Type = 8
	Interface_VMXNET3_INTERFACE Interface_Type = 9
	Interface_BOND_INTERFACE    Interface_Type = 10
	Interface_GRE_TUNNEL        Interface_Type = 11
	Interface_GTPU_TUNNEL       Interface_Type = 12
	Interface_IPIP_TUNNEL       Interface_Type = 13
)

var Interface_Type_name = map[int32]string{
	0:  "UNDEFINED_TYPE",
	1:  "SUB_INTERFACE",
	2:  "SOFTWARE_LOOPBACK",
	3:  "DPDK",
	4:  "MEMIF",
	5:  "TAP",
	6:  "AF_PACKET",
	7:  "VXLAN_TUNNEL",
	8:  "IPSEC_TUNNEL",
	9:  "VMXNET3_INTERFACE",
	10: "BOND_INTERFACE",
	11: "GRE_TUNNEL",
	12: "GTPU_TUNNEL",
	13: "IPIP_TUNNEL",
}

var Interface_Type_value = map[string]int32{
	"UNDEFINED_TYPE":    0,
	"SUB_INTERFACE":     1,
	"SOFTWARE_LOOPBACK": 2,
	"DPDK":              3,
	"MEMIF":             4,
	"TAP":               5,
	"AF_PACKET":         6,
	"VXLAN_TUNNEL":      7,
	"IPSEC_TUNNEL":      8,
	"VMXNET3_INTERFACE": 9,
	"BOND_INTERFACE":    10,
	"GRE_TUNNEL":        11,
	"GTPU_TUNNEL":       12,
	"IPIP_TUNNEL":       13,
}

func (x Interface_Type) String() string {
	return proto.EnumName(Interface_Type_name, int32(x))
}

func (Interface_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8b053108eedee97b, []int{0, 0}
}

// Type definition is from: vpp/include/vnet/interface.h
type Interface_RxMode_Type int32

const (
	Interface_RxMode_UNKNOWN   Interface_RxMode_Type = 0
	Interface_RxMode_POLLING   Interface_RxMode_Type = 1
	Interface_RxMode_INTERRUPT Interface_RxMode_Type = 2
	Interface_RxMode_ADAPTIVE  Interface_RxMode_Type = 3
	Interface_RxMode_DEFAULT   Interface_RxMode_Type = 4
)

var Interface_RxMode_Type_name = map[int32]string{
	0: "UNKNOWN",
	1: "POLLING",
	2: "INTERRUPT",
	3: "ADAPTIVE",
	4: "DEFAULT",
}

var Interface_RxMode_Type_value = map[string]int32{
	"UNKNOWN":   0,
	"POLLING":   1,
	"INTERRUPT": 2,
	"ADAPTIVE":  3,
	"DEFAULT":   4,
}

func (x Interface_RxMode_Type) String() string {
	return proto.EnumName(Interface_RxMode_Type_name, int32(x))
}

func (Interface_RxMode_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8b053108eedee97b, []int{0, 1, 0}
}

type SubInterface_TagRewriteOptions int32

const (
	SubInterface_DISABLED    SubInterface_TagRewriteOptions = 0
	SubInterface_PUSH1       SubInterface_TagRewriteOptions = 1
	SubInterface_PUSH2       SubInterface_TagRewriteOptions = 2
	SubInterface_POP1        SubInterface_TagRewriteOptions = 3
	SubInterface_POP2        SubInterface_TagRewriteOptions = 4
	SubInterface_TRANSLATE11 SubInterface_TagRewriteOptions = 5
	SubInterface_TRANSLATE12 SubInterface_TagRewriteOptions = 6
	SubInterface_TRANSLATE21 SubInterface_TagRewriteOptions = 7
	SubInterface_TRANSLATE22 SubInterface_TagRewriteOptions = 8
)

var SubInterface_TagRewriteOptions_name = map[int32]string{
	0: "DISABLED",
	1: "PUSH1",
	2: "PUSH2",
	3: "POP1",
	4: "POP2",
	5: "TRANSLATE11",
	6: "TRANSLATE12",
	7: "TRANSLATE21",
	8: "TRANSLATE22",
}

var SubInterface_TagRewriteOptions_value = map[string]int32{
	"DISABLED":    0,
	"PUSH1":       1,
	"PUSH2":       2,
	"POP1":        3,
	"POP2":        4,
	"TRANSLATE11": 5,
	"TRANSLATE12": 6,
	"TRANSLATE21": 7,
	"TRANSLATE22": 8,
}

func (x SubInterface_TagRewriteOptions) String() string {
	return proto.EnumName(SubInterface_TagRewriteOptions_name, int32(x))
}

func (SubInterface_TagRewriteOptions) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8b053108eedee97b, []int{1, 0}
}

type MemifLink_MemifMode int32

const (
	MemifLink_ETHERNET    MemifLink_MemifMode = 0
	MemifLink_IP          MemifLink_MemifMode = 1
	MemifLink_PUNT_INJECT MemifLink_MemifMode = 2
)

var MemifLink_MemifMode_name = map[int32]string{
	0: "ETHERNET",
	1: "IP",
	2: "PUNT_INJECT",
}

var MemifLink_MemifMode_value = map[string]int32{
	"ETHERNET":    0,
	"IP":          1,
	"PUNT_INJECT": 2,
}

func (x MemifLink_MemifMode) String() string {
	return proto.EnumName(MemifLink_MemifMode_name, int32(x))
}

func (MemifLink_MemifMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8b053108eedee97b, []int{2, 0}
}

type VxlanLink_Gpe_Protocol int32

const (
	VxlanLink_Gpe_UNKNOWN  VxlanLink_Gpe_Protocol = 0
	VxlanLink_Gpe_IP4      VxlanLink_Gpe_Protocol = 1
	VxlanLink_Gpe_IP6      VxlanLink_Gpe_Protocol = 2
	VxlanLink_Gpe_ETHERNET VxlanLink_Gpe_Protocol = 3
	VxlanLink_Gpe_NSH      VxlanLink_Gpe_Protocol = 4
)

var VxlanLink_Gpe_Protocol_name = map[int32]string{
	0: "UNKNOWN",
	1: "IP4",
	2: "IP6",
	3: "ETHERNET",
	4: "NSH",
}

var VxlanLink_Gpe_Protocol_value = map[string]int32{
	"UNKNOWN":  0,
	"IP4":      1,
	"IP6":      2,
	"ETHERNET": 3,
	"NSH":      4,
}

func (x VxlanLink_Gpe_Protocol) String() string {
	return proto.EnumName(VxlanLink_Gpe_Protocol_name, int32(x))
}

func (VxlanLink_Gpe_Protocol) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8b053108eedee97b, []int{3, 0, 0}
}

type BondLink_Mode int32

const (
	BondLink_UNKNOWN       BondLink_Mode = 0
	BondLink_ROUND_ROBIN   BondLink_Mode = 1
	BondLink_ACTIVE_BACKUP BondLink_Mode = 2
	BondLink_XOR           BondLink_Mode = 3
	BondLink_BROADCAST     BondLink_Mode = 4
	BondLink_LACP          BondLink_Mode = 5
)

var BondLink_Mode_name = map[int32]string{
	0: "UNKNOWN",
	1: "ROUND_ROBIN",
	2: "ACTIVE_BACKUP",
	3: "XOR",
	4: "BROADCAST",
	5: "LACP",
}

var BondLink_Mode_value = map[string]int32{
	"UNKNOWN":       0,
	"ROUND_ROBIN":   1,
	"ACTIVE_BACKUP": 2,
	"XOR":           3,
	"BROADCAST":     4,
	"LACP":          5,
}

func (x BondLink_Mode) String() string {
	return proto.EnumName(BondLink_Mode_name, int32(x))
}

func (BondLink_Mode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8b053108eedee97b, []int{8, 0}
}

type BondLink_LoadBalance int32

const (
	BondLink_L2  BondLink_LoadBalance = 0
	BondLink_L34 BondLink_LoadBalance = 1
	BondLink_L23 BondLink_LoadBalance = 2
	// Round robin
	BondLink_RR BondLink_LoadBalance = 3
	// Broadcast
	BondLink_BC BondLink_LoadBalance = 4
	// Active backup
	BondLink_AB BondLink_LoadBalance = 5
)

var BondLink_LoadBalance_name = map[int32]string{
	0: "L2",
	1: "L34",
	2: "L23",
	3: "RR",
	4: "BC",
	5: "AB",
}

var BondLink_LoadBalance_value = map[string]int32{
	"L2":  0,
	"L34": 1,
	"L23": 2,
	"RR":  3,
	"BC":  4,
	"AB":  5,
}

func (x BondLink_LoadBalance) String() string {
	return proto.EnumName(BondLink_LoadBalance_name, int32(x))
}

func (BondLink_LoadBalance) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8b053108eedee97b, []int{8, 1}
}

type GreLink_Type int32

const (
	GreLink_UNKNOWN GreLink_Type = 0
	// L3 GRE (i.e. this tunnel is in L3 mode)
	GreLink_L3 GreLink_Type = 1
	// TEB - Transparent Ethernet Bridging - the tunnel is in L2 mode
	GreLink_TEB GreLink_Type = 2
	// ERSPAN - the tunnel is for port mirror SPAN output
	GreLink_ERSPAN GreLink_Type = 3
)

var GreLink_Type_name = map[int32]string{
	0: "UNKNOWN",
	1: "L3",
	2: "TEB",
	3: "ERSPAN",
}

var GreLink_Type_value = map[string]int32{
	"UNKNOWN": 0,
	"L3":      1,
	"TEB":     2,
	"ERSPAN":  3,
}

func (x GreLink_Type) String() string {
	return proto.EnumName(GreLink_Type_name, int32(x))
}

func (GreLink_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8b053108eedee97b, []int{9, 0}
}

type GtpuLink_NextNode int32

const (
	// The default next node is l2-input
	GtpuLink_DEFAULT GtpuLink_NextNode = 0
	// l2-input
	GtpuLink_L2 GtpuLink_NextNode = 1
	// ip4-input
	GtpuLink_IP4 GtpuLink_NextNode = 2
	// ip6-input
	GtpuLink_IP6 GtpuLink_NextNode = 3
)

var GtpuLink_NextNode_name = map[int32]string{
	0: "DEFAULT",
	1: "L2",
	2: "IP4",
	3: "IP6",
}

var GtpuLink_NextNode_value = map[string]int32{
	"DEFAULT": 0,
	"L2":      1,
	"IP4":     2,
	"IP6":     3,
}

func (x GtpuLink_NextNode) String() string {
	return proto.EnumName(GtpuLink_NextNode_name, int32(x))
}

func (GtpuLink_NextNode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8b053108eedee97b, []int{10, 0}
}

type IPIPLink_Mode int32

const (
	// point-to-point tunnel
	IPIPLink_POINT_TO_POINT IPIPLink_Mode = 0
)

var IPIPLink_Mode_name = map[int32]string{
	0: "POINT_TO_POINT",
}

var IPIPLink_Mode_value = map[string]int32{
	"POINT_TO_POINT": 0,
}

func (x IPIPLink_Mode) String() string {
	return proto.EnumName(IPIPLink_Mode_name, int32(x))
}

func (IPIPLink_Mode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8b053108eedee97b, []int{11, 0}
}

// Interface defines a VPP interface.
type Interface struct {
	// Name is mandatory field representing logical name for the interface.
	// It must be unique across all configured VPP interfaces.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Type represents the type of VPP interface and it must match the actual Link.
	Type Interface_Type `protobuf:"varint,2,opt,name=type,proto3,enum=ligato.vpp.interfaces.Interface_Type" json:"type,omitempty"`
	// Enabled controls if the interface should be UP.
	Enabled bool `protobuf:"varint,3,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// PhysAddress represents physical address (MAC) of the interface.
	// Random address will be assigned if left empty.
	PhysAddress string `protobuf:"bytes,4,opt,name=phys_address,json=physAddress,proto3" json:"phys_address,omitempty"`
	// IPAddresses define list of IP addresses for the interface and must be
	// defined in the following format: <ipAddress>/<ipPrefix>.
	// Interface IP address can be also allocated via netalloc plugin and
	// referenced here, see: api/models/netalloc/netalloc.proto
	IpAddresses []string `protobuf:"bytes,5,rep,name=ip_addresses,json=ipAddresses,proto3" json:"ip_addresses,omitempty"`
	// Vrf defines the ID of VRF table that the interface is assigned to.
	// The VRF table must be explicitely configured (see api/models/vpp/l3/vrf.proto).
	// When using unnumbered interface the actual vrf is inherited from
	// the interface referenced by the numbered interface and this field is ignored.
	Vrf           uint32                   `protobuf:"varint,6,opt,name=vrf,proto3" json:"vrf,omitempty"`
	SetDhcpClient bool                     `protobuf:"varint,7,opt,name=set_dhcp_client,json=setDhcpClient,proto3" json:"set_dhcp_client,omitempty"`
	Mtu           uint32                   `protobuf:"varint,8,opt,name=mtu,proto3" json:"mtu,omitempty"`
	Unnumbered    *Interface_Unnumbered    `protobuf:"bytes,9,opt,name=unnumbered,proto3" json:"unnumbered,omitempty"`
	RxModes       []*Interface_RxMode      `protobuf:"bytes,12,rep,name=rx_modes,json=rxModes,proto3" json:"rx_modes,omitempty"`
	RxPlacements  []*Interface_RxPlacement `protobuf:"bytes,13,rep,name=rx_placements,json=rxPlacements,proto3" json:"rx_placements,omitempty"`
	// Link defines configuration for specific interface types.
	// It can be nil for some interfaces types like: loopback and DPDK.
	//
	// Types that are valid to be assigned to Link:
	//	*Interface_Sub
	//	*Interface_Memif
	//	*Interface_Afpacket
	//	*Interface_Tap
	//	*Interface_Vxlan
	//	*Interface_Ipsec
	//	*Interface_VmxNet3
	//	*Interface_Bond
	//	*Interface_Gre
	//	*Interface_Gtpu
	//	*Interface_Ipip
	Link                 isInterface_Link `protobuf_oneof:"link"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Interface) Reset()         { *m = Interface{} }
func (m *Interface) String() string { return proto.CompactTextString(m) }
func (*Interface) ProtoMessage()    {}
func (*Interface) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b053108eedee97b, []int{0}
}

func (m *Interface) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Interface.Unmarshal(m, b)
}
func (m *Interface) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Interface.Marshal(b, m, deterministic)
}
func (m *Interface) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Interface.Merge(m, src)
}
func (m *Interface) XXX_Size() int {
	return xxx_messageInfo_Interface.Size(m)
}
func (m *Interface) XXX_DiscardUnknown() {
	xxx_messageInfo_Interface.DiscardUnknown(m)
}

var xxx_messageInfo_Interface proto.InternalMessageInfo

func (m *Interface) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Interface) GetType() Interface_Type {
	if m != nil {
		return m.Type
	}
	return Interface_UNDEFINED_TYPE
}

func (m *Interface) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *Interface) GetPhysAddress() string {
	if m != nil {
		return m.PhysAddress
	}
	return ""
}

func (m *Interface) GetIpAddresses() []string {
	if m != nil {
		return m.IpAddresses
	}
	return nil
}

func (m *Interface) GetVrf() uint32 {
	if m != nil {
		return m.Vrf
	}
	return 0
}

func (m *Interface) GetSetDhcpClient() bool {
	if m != nil {
		return m.SetDhcpClient
	}
	return false
}

func (m *Interface) GetMtu() uint32 {
	if m != nil {
		return m.Mtu
	}
	return 0
}

func (m *Interface) GetUnnumbered() *Interface_Unnumbered {
	if m != nil {
		return m.Unnumbered
	}
	return nil
}

func (m *Interface) GetRxModes() []*Interface_RxMode {
	if m != nil {
		return m.RxModes
	}
	return nil
}

func (m *Interface) GetRxPlacements() []*Interface_RxPlacement {
	if m != nil {
		return m.RxPlacements
	}
	return nil
}

type isInterface_Link interface {
	isInterface_Link()
}

type Interface_Sub struct {
	Sub *SubInterface `protobuf:"bytes,100,opt,name=sub,proto3,oneof"`
}

type Interface_Memif struct {
	Memif *MemifLink `protobuf:"bytes,101,opt,name=memif,proto3,oneof"`
}

type Interface_Afpacket struct {
	Afpacket *AfpacketLink `protobuf:"bytes,102,opt,name=afpacket,proto3,oneof"`
}

type Interface_Tap struct {
	Tap *TapLink `protobuf:"bytes,103,opt,name=tap,proto3,oneof"`
}

type Interface_Vxlan struct {
	Vxlan *VxlanLink `protobuf:"bytes,104,opt,name=vxlan,proto3,oneof"`
}

type Interface_Ipsec struct {
	Ipsec *IPSecLink `protobuf:"bytes,105,opt,name=ipsec,proto3,oneof"`
}

type Interface_VmxNet3 struct {
	VmxNet3 *VmxNet3Link `protobuf:"bytes,106,opt,name=vmx_net3,json=vmxNet3,proto3,oneof"`
}

type Interface_Bond struct {
	Bond *BondLink `protobuf:"bytes,107,opt,name=bond,proto3,oneof"`
}

type Interface_Gre struct {
	Gre *GreLink `protobuf:"bytes,108,opt,name=gre,proto3,oneof"`
}

type Interface_Gtpu struct {
	Gtpu *GtpuLink `protobuf:"bytes,109,opt,name=gtpu,proto3,oneof"`
}

type Interface_Ipip struct {
	Ipip *IPIPLink `protobuf:"bytes,110,opt,name=ipip,proto3,oneof"`
}

func (*Interface_Sub) isInterface_Link() {}

func (*Interface_Memif) isInterface_Link() {}

func (*Interface_Afpacket) isInterface_Link() {}

func (*Interface_Tap) isInterface_Link() {}

func (*Interface_Vxlan) isInterface_Link() {}

func (*Interface_Ipsec) isInterface_Link() {}

func (*Interface_VmxNet3) isInterface_Link() {}

func (*Interface_Bond) isInterface_Link() {}

func (*Interface_Gre) isInterface_Link() {}

func (*Interface_Gtpu) isInterface_Link() {}

func (*Interface_Ipip) isInterface_Link() {}

func (m *Interface) GetLink() isInterface_Link {
	if m != nil {
		return m.Link
	}
	return nil
}

func (m *Interface) GetSub() *SubInterface {
	if x, ok := m.GetLink().(*Interface_Sub); ok {
		return x.Sub
	}
	return nil
}

func (m *Interface) GetMemif() *MemifLink {
	if x, ok := m.GetLink().(*Interface_Memif); ok {
		return x.Memif
	}
	return nil
}

func (m *Interface) GetAfpacket() *AfpacketLink {
	if x, ok := m.GetLink().(*Interface_Afpacket); ok {
		return x.Afpacket
	}
	return nil
}

func (m *Interface) GetTap() *TapLink {
	if x, ok := m.GetLink().(*Interface_Tap); ok {
		return x.Tap
	}
	return nil
}

func (m *Interface) GetVxlan() *VxlanLink {
	if x, ok := m.GetLink().(*Interface_Vxlan); ok {
		return x.Vxlan
	}
	return nil
}

func (m *Interface) GetIpsec() *IPSecLink {
	if x, ok := m.GetLink().(*Interface_Ipsec); ok {
		return x.Ipsec
	}
	return nil
}

func (m *Interface) GetVmxNet3() *VmxNet3Link {
	if x, ok := m.GetLink().(*Interface_VmxNet3); ok {
		return x.VmxNet3
	}
	return nil
}

func (m *Interface) GetBond() *BondLink {
	if x, ok := m.GetLink().(*Interface_Bond); ok {
		return x.Bond
	}
	return nil
}

func (m *Interface) GetGre() *GreLink {
	if x, ok := m.GetLink().(*Interface_Gre); ok {
		return x.Gre
	}
	return nil
}

func (m *Interface) GetGtpu() *GtpuLink {
	if x, ok := m.GetLink().(*Interface_Gtpu); ok {
		return x.Gtpu
	}
	return nil
}

func (m *Interface) GetIpip() *IPIPLink {
	if x, ok := m.GetLink().(*Interface_Ipip); ok {
		return x.Ipip
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Interface) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Interface_Sub)(nil),
		(*Interface_Memif)(nil),
		(*Interface_Afpacket)(nil),
		(*Interface_Tap)(nil),
		(*Interface_Vxlan)(nil),
		(*Interface_Ipsec)(nil),
		(*Interface_VmxNet3)(nil),
		(*Interface_Bond)(nil),
		(*Interface_Gre)(nil),
		(*Interface_Gtpu)(nil),
		(*Interface_Ipip)(nil),
	}
}

type Interface_Unnumbered struct {
	InterfaceWithIp      string   `protobuf:"bytes,1,opt,name=interface_with_ip,json=interfaceWithIp,proto3" json:"interface_with_ip,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Interface_Unnumbered) Reset()         { *m = Interface_Unnumbered{} }
func (m *Interface_Unnumbered) String() string { return proto.CompactTextString(m) }
func (*Interface_Unnumbered) ProtoMessage()    {}
func (*Interface_Unnumbered) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b053108eedee97b, []int{0, 0}
}

func (m *Interface_Unnumbered) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Interface_Unnumbered.Unmarshal(m, b)
}
func (m *Interface_Unnumbered) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Interface_Unnumbered.Marshal(b, m, deterministic)
}
func (m *Interface_Unnumbered) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Interface_Unnumbered.Merge(m, src)
}
func (m *Interface_Unnumbered) XXX_Size() int {
	return xxx_messageInfo_Interface_Unnumbered.Size(m)
}
func (m *Interface_Unnumbered) XXX_DiscardUnknown() {
	xxx_messageInfo_Interface_Unnumbered.DiscardUnknown(m)
}

var xxx_messageInfo_Interface_Unnumbered proto.InternalMessageInfo

func (m *Interface_Unnumbered) GetInterfaceWithIp() string {
	if m != nil {
		return m.InterfaceWithIp
	}
	return ""
}

type Interface_RxMode struct {
	Queue uint32                `protobuf:"varint,1,opt,name=queue,proto3" json:"queue,omitempty"`
	Mode  Interface_RxMode_Type `protobuf:"varint,2,opt,name=mode,proto3,enum=ligato.vpp.interfaces.Interface_RxMode_Type" json:"mode,omitempty"`
	// DefaultMode, if set to true, the <queue> field will be ignored
	// and the <mode> will be used as a default for all the queues.
	DefaultMode          bool     `protobuf:"varint,3,opt,name=default_mode,json=defaultMode,proto3" json:"default_mode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Interface_RxMode) Reset()         { *m = Interface_RxMode{} }
func (m *Interface_RxMode) String() string { return proto.CompactTextString(m) }
func (*Interface_RxMode) ProtoMessage()    {}
func (*Interface_RxMode) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b053108eedee97b, []int{0, 1}
}

func (m *Interface_RxMode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Interface_RxMode.Unmarshal(m, b)
}
func (m *Interface_RxMode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Interface_RxMode.Marshal(b, m, deterministic)
}
func (m *Interface_RxMode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Interface_RxMode.Merge(m, src)
}
func (m *Interface_RxMode) XXX_Size() int {
	return xxx_messageInfo_Interface_RxMode.Size(m)
}
func (m *Interface_RxMode) XXX_DiscardUnknown() {
	xxx_messageInfo_Interface_RxMode.DiscardUnknown(m)
}

var xxx_messageInfo_Interface_RxMode proto.InternalMessageInfo

func (m *Interface_RxMode) GetQueue() uint32 {
	if m != nil {
		return m.Queue
	}
	return 0
}

func (m *Interface_RxMode) GetMode() Interface_RxMode_Type {
	if m != nil {
		return m.Mode
	}
	return Interface_RxMode_UNKNOWN
}

func (m *Interface_RxMode) GetDefaultMode() bool {
	if m != nil {
		return m.DefaultMode
	}
	return false
}

type Interface_RxPlacement struct {
	// Select from interval <0, number-of-queues)
	Queue uint32 `protobuf:"varint,1,opt,name=queue,proto3" json:"queue,omitempty"`
	// Select from interval <0, number-of-workers)
	Worker uint32 `protobuf:"varint,2,opt,name=worker,proto3" json:"worker,omitempty"`
	// Let the main thread to process the given queue
	//  - if enabled, value of <worker> is ignored
	MainThread           bool     `protobuf:"varint,3,opt,name=main_thread,json=mainThread,proto3" json:"main_thread,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Interface_RxPlacement) Reset()         { *m = Interface_RxPlacement{} }
func (m *Interface_RxPlacement) String() string { return proto.CompactTextString(m) }
func (*Interface_RxPlacement) ProtoMessage()    {}
func (*Interface_RxPlacement) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b053108eedee97b, []int{0, 2}
}

func (m *Interface_RxPlacement) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Interface_RxPlacement.Unmarshal(m, b)
}
func (m *Interface_RxPlacement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Interface_RxPlacement.Marshal(b, m, deterministic)
}
func (m *Interface_RxPlacement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Interface_RxPlacement.Merge(m, src)
}
func (m *Interface_RxPlacement) XXX_Size() int {
	return xxx_messageInfo_Interface_RxPlacement.Size(m)
}
func (m *Interface_RxPlacement) XXX_DiscardUnknown() {
	xxx_messageInfo_Interface_RxPlacement.DiscardUnknown(m)
}

var xxx_messageInfo_Interface_RxPlacement proto.InternalMessageInfo

func (m *Interface_RxPlacement) GetQueue() uint32 {
	if m != nil {
		return m.Queue
	}
	return 0
}

func (m *Interface_RxPlacement) GetWorker() uint32 {
	if m != nil {
		return m.Worker
	}
	return 0
}

func (m *Interface_RxPlacement) GetMainThread() bool {
	if m != nil {
		return m.MainThread
	}
	return false
}

// SubInterface defines configuration for interface type: SUB_INTERFACE
type SubInterface struct {
	// Name of the parent (super) interface
	ParentName string `protobuf:"bytes,1,opt,name=parent_name,json=parentName,proto3" json:"parent_name,omitempty"`
	// SubInterface ID, used as VLAN
	SubId uint32 `protobuf:"varint,2,opt,name=sub_id,json=subId,proto3" json:"sub_id,omitempty"`
	// VLAN tag rewrite rule applied for given tag for sub-interface
	TagRwOption SubInterface_TagRewriteOptions `protobuf:"varint,3,opt,name=tag_rw_option,json=tagRwOption,proto3,enum=ligato.vpp.interfaces.SubInterface_TagRewriteOptions" json:"tag_rw_option,omitempty"`
	// Set ether-type of the first tag to dot1q if true, dot1ad otherwise
	PushDot1Q bool `protobuf:"varint,4,opt,name=push_dot1q,json=pushDot1q,proto3" json:"push_dot1q,omitempty"`
	// First tag (required for PUSH1 and any TRANSLATE)
	Tag1 uint32 `protobuf:"varint,5,opt,name=tag1,proto3" json:"tag1,omitempty"`
	// Second tag (required for PUSH2 and any TRANSLATE)
	Tag2                 uint32   `protobuf:"varint,6,opt,name=tag2,proto3" json:"tag2,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubInterface) Reset()         { *m = SubInterface{} }
func (m *SubInterface) String() string { return proto.CompactTextString(m) }
func (*SubInterface) ProtoMessage()    {}
func (*SubInterface) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b053108eedee97b, []int{1}
}

func (m *SubInterface) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubInterface.Unmarshal(m, b)
}
func (m *SubInterface) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubInterface.Marshal(b, m, deterministic)
}
func (m *SubInterface) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubInterface.Merge(m, src)
}
func (m *SubInterface) XXX_Size() int {
	return xxx_messageInfo_SubInterface.Size(m)
}
func (m *SubInterface) XXX_DiscardUnknown() {
	xxx_messageInfo_SubInterface.DiscardUnknown(m)
}

var xxx_messageInfo_SubInterface proto.InternalMessageInfo

func (m *SubInterface) GetParentName() string {
	if m != nil {
		return m.ParentName
	}
	return ""
}

func (m *SubInterface) GetSubId() uint32 {
	if m != nil {
		return m.SubId
	}
	return 0
}

func (m *SubInterface) GetTagRwOption() SubInterface_TagRewriteOptions {
	if m != nil {
		return m.TagRwOption
	}
	return SubInterface_DISABLED
}

func (m *SubInterface) GetPushDot1Q() bool {
	if m != nil {
		return m.PushDot1Q
	}
	return false
}

func (m *SubInterface) GetTag1() uint32 {
	if m != nil {
		return m.Tag1
	}
	return 0
}

func (m *SubInterface) GetTag2() uint32 {
	if m != nil {
		return m.Tag2
	}
	return 0
}

// MemifLink defines configuration for interface type: MEMIF
type MemifLink struct {
	Mode   MemifLink_MemifMode `protobuf:"varint,1,opt,name=mode,proto3,enum=ligato.vpp.interfaces.MemifLink_MemifMode" json:"mode,omitempty"`
	Master bool                `protobuf:"varint,2,opt,name=master,proto3" json:"master,omitempty"`
	// Id is a 32bit integer used to authenticate and match opposite sides of the connection
	Id uint32 `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	// Filename of the socket used for connection establishment
	SocketFilename string `protobuf:"bytes,4,opt,name=socket_filename,json=socketFilename,proto3" json:"socket_filename,omitempty"`
	Secret         string `protobuf:"bytes,5,opt,name=secret,proto3" json:"secret,omitempty"`
	// The number of entries of RX/TX rings
	RingSize uint32 `protobuf:"varint,6,opt,name=ring_size,json=ringSize,proto3" json:"ring_size,omitempty"`
	// Size of the buffer allocated for each ring entry
	BufferSize uint32 `protobuf:"varint,7,opt,name=buffer_size,json=bufferSize,proto3" json:"buffer_size,omitempty"`
	// Number of rx queues (only valid for slave)
	RxQueues uint32 `protobuf:"varint,8,opt,name=rx_queues,json=rxQueues,proto3" json:"rx_queues,omitempty"`
	// Number of tx queues (only valid for slave)
	TxQueues             uint32   `protobuf:"varint,9,opt,name=tx_queues,json=txQueues,proto3" json:"tx_queues,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MemifLink) Reset()         { *m = MemifLink{} }
func (m *MemifLink) String() string { return proto.CompactTextString(m) }
func (*MemifLink) ProtoMessage()    {}
func (*MemifLink) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b053108eedee97b, []int{2}
}

func (m *MemifLink) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MemifLink.Unmarshal(m, b)
}
func (m *MemifLink) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MemifLink.Marshal(b, m, deterministic)
}
func (m *MemifLink) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MemifLink.Merge(m, src)
}
func (m *MemifLink) XXX_Size() int {
	return xxx_messageInfo_MemifLink.Size(m)
}
func (m *MemifLink) XXX_DiscardUnknown() {
	xxx_messageInfo_MemifLink.DiscardUnknown(m)
}

var xxx_messageInfo_MemifLink proto.InternalMessageInfo

func (m *MemifLink) GetMode() MemifLink_MemifMode {
	if m != nil {
		return m.Mode
	}
	return MemifLink_ETHERNET
}

func (m *MemifLink) GetMaster() bool {
	if m != nil {
		return m.Master
	}
	return false
}

func (m *MemifLink) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MemifLink) GetSocketFilename() string {
	if m != nil {
		return m.SocketFilename
	}
	return ""
}

func (m *MemifLink) GetSecret() string {
	if m != nil {
		return m.Secret
	}
	return ""
}

func (m *MemifLink) GetRingSize() uint32 {
	if m != nil {
		return m.RingSize
	}
	return 0
}

func (m *MemifLink) GetBufferSize() uint32 {
	if m != nil {
		return m.BufferSize
	}
	return 0
}

func (m *MemifLink) GetRxQueues() uint32 {
	if m != nil {
		return m.RxQueues
	}
	return 0
}

func (m *MemifLink) GetTxQueues() uint32 {
	if m != nil {
		return m.TxQueues
	}
	return 0
}

// VxlanLink defines configuration for interface type: VXLAN_TUNNEL
type VxlanLink struct {
	// SrcAddress is source VTEP address
	SrcAddress string `protobuf:"bytes,1,opt,name=src_address,json=srcAddress,proto3" json:"src_address,omitempty"`
	// DstAddress is destination VTEP address
	DstAddress string `protobuf:"bytes,2,opt,name=dst_address,json=dstAddress,proto3" json:"dst_address,omitempty"`
	// Vni stands for VXLAN Network Identifier
	Vni uint32 `protobuf:"varint,3,opt,name=vni,proto3" json:"vni,omitempty"`
	// Multicast defines name of multicast interface
	Multicast            string         `protobuf:"bytes,4,opt,name=multicast,proto3" json:"multicast,omitempty"`
	Gpe                  *VxlanLink_Gpe `protobuf:"bytes,5,opt,name=gpe,proto3" json:"gpe,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *VxlanLink) Reset()         { *m = VxlanLink{} }
func (m *VxlanLink) String() string { return proto.CompactTextString(m) }
func (*VxlanLink) ProtoMessage()    {}
func (*VxlanLink) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b053108eedee97b, []int{3}
}

func (m *VxlanLink) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VxlanLink.Unmarshal(m, b)
}
func (m *VxlanLink) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VxlanLink.Marshal(b, m, deterministic)
}
func (m *VxlanLink) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VxlanLink.Merge(m, src)
}
func (m *VxlanLink) XXX_Size() int {
	return xxx_messageInfo_VxlanLink.Size(m)
}
func (m *VxlanLink) XXX_DiscardUnknown() {
	xxx_messageInfo_VxlanLink.DiscardUnknown(m)
}

var xxx_messageInfo_VxlanLink proto.InternalMessageInfo

func (m *VxlanLink) GetSrcAddress() string {
	if m != nil {
		return m.SrcAddress
	}
	return ""
}

func (m *VxlanLink) GetDstAddress() string {
	if m != nil {
		return m.DstAddress
	}
	return ""
}

func (m *VxlanLink) GetVni() uint32 {
	if m != nil {
		return m.Vni
	}
	return 0
}

func (m *VxlanLink) GetMulticast() string {
	if m != nil {
		return m.Multicast
	}
	return ""
}

func (m *VxlanLink) GetGpe() *VxlanLink_Gpe {
	if m != nil {
		return m.Gpe
	}
	return nil
}

// Gpe (Generic Protocol Extension) allows encapsulating not only Ethernet frame payload.
type VxlanLink_Gpe struct {
	DecapVrfId uint32 `protobuf:"varint,1,opt,name=decap_vrf_id,json=decapVrfId,proto3" json:"decap_vrf_id,omitempty"`
	// Protocol defines encapsulated protocol
	Protocol             VxlanLink_Gpe_Protocol `protobuf:"varint,2,opt,name=protocol,proto3,enum=ligato.vpp.interfaces.VxlanLink_Gpe_Protocol" json:"protocol,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *VxlanLink_Gpe) Reset()         { *m = VxlanLink_Gpe{} }
func (m *VxlanLink_Gpe) String() string { return proto.CompactTextString(m) }
func (*VxlanLink_Gpe) ProtoMessage()    {}
func (*VxlanLink_Gpe) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b053108eedee97b, []int{3, 0}
}

func (m *VxlanLink_Gpe) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VxlanLink_Gpe.Unmarshal(m, b)
}
func (m *VxlanLink_Gpe) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VxlanLink_Gpe.Marshal(b, m, deterministic)
}
func (m *VxlanLink_Gpe) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VxlanLink_Gpe.Merge(m, src)
}
func (m *VxlanLink_Gpe) XXX_Size() int {
	return xxx_messageInfo_VxlanLink_Gpe.Size(m)
}
func (m *VxlanLink_Gpe) XXX_DiscardUnknown() {
	xxx_messageInfo_VxlanLink_Gpe.DiscardUnknown(m)
}

var xxx_messageInfo_VxlanLink_Gpe proto.InternalMessageInfo

func (m *VxlanLink_Gpe) GetDecapVrfId() uint32 {
	if m != nil {
		return m.DecapVrfId
	}
	return 0
}

func (m *VxlanLink_Gpe) GetProtocol() VxlanLink_Gpe_Protocol {
	if m != nil {
		return m.Protocol
	}
	return VxlanLink_Gpe_UNKNOWN
}

// AfpacketLink defines configuration for interface type: AF_PACKET
type AfpacketLink struct {
	// Name of the host (Linux) interface to bind to.
	// This field is DEPRECATED. The logical reference <linux_interface> should be used instead.
	// Target Linux interface which is not configured by the same (or any) vpp-agent can be assigned
	// a logical name using a Linux interface configuration entry of type EXISTING
	// (see proto/ligato/linux/interfaces/interface.proto).
	// It is mandatory to define either <host_if_name> or <linux_interface>.
	HostIfName string `protobuf:"bytes,1,opt,name=host_if_name,json=hostIfName,proto3" json:"host_if_name,omitempty"` // Deprecated: Do not use.
	// Logical name of the Linux interface to bind to.
	// This is an alternative (and preferred) interface reference to <host_if_name>.
	// It is mandatory to define either <host_if_name> or <linux_interface>.
	LinuxInterface       string   `protobuf:"bytes,2,opt,name=linux_interface,json=linuxInterface,proto3" json:"linux_interface,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AfpacketLink) Reset()         { *m = AfpacketLink{} }
func (m *AfpacketLink) String() string { return proto.CompactTextString(m) }
func (*AfpacketLink) ProtoMessage()    {}
func (*AfpacketLink) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b053108eedee97b, []int{4}
}

func (m *AfpacketLink) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AfpacketLink.Unmarshal(m, b)
}
func (m *AfpacketLink) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AfpacketLink.Marshal(b, m, deterministic)
}
func (m *AfpacketLink) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AfpacketLink.Merge(m, src)
}
func (m *AfpacketLink) XXX_Size() int {
	return xxx_messageInfo_AfpacketLink.Size(m)
}
func (m *AfpacketLink) XXX_DiscardUnknown() {
	xxx_messageInfo_AfpacketLink.DiscardUnknown(m)
}

var xxx_messageInfo_AfpacketLink proto.InternalMessageInfo

// Deprecated: Do not use.
func (m *AfpacketLink) GetHostIfName() string {
	if m != nil {
		return m.HostIfName
	}
	return ""
}

func (m *AfpacketLink) GetLinuxInterface() string {
	if m != nil {
		return m.LinuxInterface
	}
	return ""
}

// TapLink defines configuration for interface type: TAP
type TapLink struct {
	// 1 / unset = use the original TAP interface; 2 = use a fast virtio-based TAP
	Version uint32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	// Name of the TAP interface in the host OS;
	// if empty, it will be auto-generated (suitable for combination with TAP_TO_VPP
	// interface from Linux ifplugin, because then this name is only temporary anyway)
	HostIfName string `protobuf:"bytes,2,opt,name=host_if_name,json=hostIfName,proto3" json:"host_if_name,omitempty"`
	// If TAP connects VPP with microservice, fill this parameter with the target
	// microservice name - should match with the namespace reference of the associated
	// TAP_TO_VPP interface (it is still moved to the namespace by Linux-ifplugin but
	// VPP-ifplugin needs to be aware of this dependency)
	ToMicroservice string `protobuf:"bytes,3,opt,name=to_microservice,json=toMicroservice,proto3" json:"to_microservice,omitempty"`
	// Rx ring buffer size; must be power of 2; default is 256; only for TAP v.2
	RxRingSize uint32 `protobuf:"varint,4,opt,name=rx_ring_size,json=rxRingSize,proto3" json:"rx_ring_size,omitempty"`
	// Tx ring buffer size; must be power of 2; default is 256; only for TAP v.2
	TxRingSize           uint32   `protobuf:"varint,5,opt,name=tx_ring_size,json=txRingSize,proto3" json:"tx_ring_size,omitempty"`
	EnableGso            bool     `protobuf:"varint,6,opt,name=enable_gso,json=enableGso,proto3" json:"enable_gso,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TapLink) Reset()         { *m = TapLink{} }
func (m *TapLink) String() string { return proto.CompactTextString(m) }
func (*TapLink) ProtoMessage()    {}
func (*TapLink) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b053108eedee97b, []int{5}
}

func (m *TapLink) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TapLink.Unmarshal(m, b)
}
func (m *TapLink) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TapLink.Marshal(b, m, deterministic)
}
func (m *TapLink) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TapLink.Merge(m, src)
}
func (m *TapLink) XXX_Size() int {
	return xxx_messageInfo_TapLink.Size(m)
}
func (m *TapLink) XXX_DiscardUnknown() {
	xxx_messageInfo_TapLink.DiscardUnknown(m)
}

var xxx_messageInfo_TapLink proto.InternalMessageInfo

func (m *TapLink) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *TapLink) GetHostIfName() string {
	if m != nil {
		return m.HostIfName
	}
	return ""
}

func (m *TapLink) GetToMicroservice() string {
	if m != nil {
		return m.ToMicroservice
	}
	return ""
}

func (m *TapLink) GetRxRingSize() uint32 {
	if m != nil {
		return m.RxRingSize
	}
	return 0
}

func (m *TapLink) GetTxRingSize() uint32 {
	if m != nil {
		return m.TxRingSize
	}
	return 0
}

func (m *TapLink) GetEnableGso() bool {
	if m != nil {
		return m.EnableGso
	}
	return false
}

// IPSecLink defines configuration for interface type: IPSEC_TUNNEL
type IPSecLink struct {
	// Extended sequence number
	Esn bool `protobuf:"varint,2,opt,name=esn,proto3" json:"esn,omitempty"`
	// Anti replay option
	AntiReplay bool `protobuf:"varint,3,opt,name=anti_replay,json=antiReplay,proto3" json:"anti_replay,omitempty"`
	// Local IP address
	LocalIp string `protobuf:"bytes,4,opt,name=local_ip,json=localIp,proto3" json:"local_ip,omitempty"`
	// Remote IP address
	RemoteIp string `protobuf:"bytes,5,opt,name=remote_ip,json=remoteIp,proto3" json:"remote_ip,omitempty"`
	// Local security parameter index
	LocalSpi uint32 `protobuf:"varint,6,opt,name=local_spi,json=localSpi,proto3" json:"local_spi,omitempty"`
	// Remote security parameter index
	RemoteSpi uint32 `protobuf:"varint,7,opt,name=remote_spi,json=remoteSpi,proto3" json:"remote_spi,omitempty"`
	// Cryptographic algorithm for encryption
	CryptoAlg       ipsec.CryptoAlg `protobuf:"varint,8,opt,name=crypto_alg,json=cryptoAlg,proto3,enum=ligato.vpp.ipsec.CryptoAlg" json:"crypto_alg,omitempty"`
	LocalCryptoKey  string          `protobuf:"bytes,9,opt,name=local_crypto_key,json=localCryptoKey,proto3" json:"local_crypto_key,omitempty"`
	RemoteCryptoKey string          `protobuf:"bytes,10,opt,name=remote_crypto_key,json=remoteCryptoKey,proto3" json:"remote_crypto_key,omitempty"`
	// Cryptographic algorithm for authentication
	IntegAlg             ipsec.IntegAlg `protobuf:"varint,11,opt,name=integ_alg,json=integAlg,proto3,enum=ligato.vpp.ipsec.IntegAlg" json:"integ_alg,omitempty"`
	LocalIntegKey        string         `protobuf:"bytes,12,opt,name=local_integ_key,json=localIntegKey,proto3" json:"local_integ_key,omitempty"`
	RemoteIntegKey       string         `protobuf:"bytes,13,opt,name=remote_integ_key,json=remoteIntegKey,proto3" json:"remote_integ_key,omitempty"`
	EnableUdpEncap       bool           `protobuf:"varint,14,opt,name=enable_udp_encap,json=enableUdpEncap,proto3" json:"enable_udp_encap,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *IPSecLink) Reset()         { *m = IPSecLink{} }
func (m *IPSecLink) String() string { return proto.CompactTextString(m) }
func (*IPSecLink) ProtoMessage()    {}
func (*IPSecLink) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b053108eedee97b, []int{6}
}

func (m *IPSecLink) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IPSecLink.Unmarshal(m, b)
}
func (m *IPSecLink) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IPSecLink.Marshal(b, m, deterministic)
}
func (m *IPSecLink) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IPSecLink.Merge(m, src)
}
func (m *IPSecLink) XXX_Size() int {
	return xxx_messageInfo_IPSecLink.Size(m)
}
func (m *IPSecLink) XXX_DiscardUnknown() {
	xxx_messageInfo_IPSecLink.DiscardUnknown(m)
}

var xxx_messageInfo_IPSecLink proto.InternalMessageInfo

func (m *IPSecLink) GetEsn() bool {
	if m != nil {
		return m.Esn
	}
	return false
}

func (m *IPSecLink) GetAntiReplay() bool {
	if m != nil {
		return m.AntiReplay
	}
	return false
}

func (m *IPSecLink) GetLocalIp() string {
	if m != nil {
		return m.LocalIp
	}
	return ""
}

func (m *IPSecLink) GetRemoteIp() string {
	if m != nil {
		return m.RemoteIp
	}
	return ""
}

func (m *IPSecLink) GetLocalSpi() uint32 {
	if m != nil {
		return m.LocalSpi
	}
	return 0
}

func (m *IPSecLink) GetRemoteSpi() uint32 {
	if m != nil {
		return m.RemoteSpi
	}
	return 0
}

func (m *IPSecLink) GetCryptoAlg() ipsec.CryptoAlg {
	if m != nil {
		return m.CryptoAlg
	}
	return ipsec.CryptoAlg_NONE_CRYPTO
}

func (m *IPSecLink) GetLocalCryptoKey() string {
	if m != nil {
		return m.LocalCryptoKey
	}
	return ""
}

func (m *IPSecLink) GetRemoteCryptoKey() string {
	if m != nil {
		return m.RemoteCryptoKey
	}
	return ""
}

func (m *IPSecLink) GetIntegAlg() ipsec.IntegAlg {
	if m != nil {
		return m.IntegAlg
	}
	return ipsec.IntegAlg_NONE_INTEG
}

func (m *IPSecLink) GetLocalIntegKey() string {
	if m != nil {
		return m.LocalIntegKey
	}
	return ""
}

func (m *IPSecLink) GetRemoteIntegKey() string {
	if m != nil {
		return m.RemoteIntegKey
	}
	return ""
}

func (m *IPSecLink) GetEnableUdpEncap() bool {
	if m != nil {
		return m.EnableUdpEncap
	}
	return false
}

// VmxNet3Link defines configuration for interface type: VMXNET3_INTERFACE
// PCI address (unsigned 32bit int) is derived from vmxnet3 interface name. It is expected that the interface
// name is in format "vmxnet3-<d>/<b>/<s>/<f>", where 'd' stands for domain (max ffff), 'b' is bus (max ff),
// 's' is slot (max 1f) and 'f is function' (max 7). All values are base 16
type VmxNet3Link struct {
	// Turn on elog
	EnableElog bool `protobuf:"varint,2,opt,name=enable_elog,json=enableElog,proto3" json:"enable_elog,omitempty"`
	// Receive queue size (default is 1024)
	RxqSize uint32 `protobuf:"varint,3,opt,name=rxq_size,json=rxqSize,proto3" json:"rxq_size,omitempty"`
	// Transmit queue size (default is 1024)
	TxqSize              uint32   `protobuf:"varint,4,opt,name=txq_size,json=txqSize,proto3" json:"txq_size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmxNet3Link) Reset()         { *m = VmxNet3Link{} }
func (m *VmxNet3Link) String() string { return proto.CompactTextString(m) }
func (*VmxNet3Link) ProtoMessage()    {}
func (*VmxNet3Link) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b053108eedee97b, []int{7}
}

func (m *VmxNet3Link) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmxNet3Link.Unmarshal(m, b)
}
func (m *VmxNet3Link) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmxNet3Link.Marshal(b, m, deterministic)
}
func (m *VmxNet3Link) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmxNet3Link.Merge(m, src)
}
func (m *VmxNet3Link) XXX_Size() int {
	return xxx_messageInfo_VmxNet3Link.Size(m)
}
func (m *VmxNet3Link) XXX_DiscardUnknown() {
	xxx_messageInfo_VmxNet3Link.DiscardUnknown(m)
}

var xxx_messageInfo_VmxNet3Link proto.InternalMessageInfo

func (m *VmxNet3Link) GetEnableElog() bool {
	if m != nil {
		return m.EnableElog
	}
	return false
}

func (m *VmxNet3Link) GetRxqSize() uint32 {
	if m != nil {
		return m.RxqSize
	}
	return 0
}

func (m *VmxNet3Link) GetTxqSize() uint32 {
	if m != nil {
		return m.TxqSize
	}
	return 0
}

// BondLink defines configuration for interface type: BOND_INTERFACE
type BondLink struct {
	Id   uint32        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Mode BondLink_Mode `protobuf:"varint,3,opt,name=mode,proto3,enum=ligato.vpp.interfaces.BondLink_Mode" json:"mode,omitempty"`
	// Load balance is optional and valid only for XOR and LACP modes
	Lb                   BondLink_LoadBalance        `protobuf:"varint,4,opt,name=lb,proto3,enum=ligato.vpp.interfaces.BondLink_LoadBalance" json:"lb,omitempty"`
	BondedInterfaces     []*BondLink_BondedInterface `protobuf:"bytes,12,rep,name=bonded_interfaces,json=bondedInterfaces,proto3" json:"bonded_interfaces,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *BondLink) Reset()         { *m = BondLink{} }
func (m *BondLink) String() string { return proto.CompactTextString(m) }
func (*BondLink) ProtoMessage()    {}
func (*BondLink) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b053108eedee97b, []int{8}
}

func (m *BondLink) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BondLink.Unmarshal(m, b)
}
func (m *BondLink) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BondLink.Marshal(b, m, deterministic)
}
func (m *BondLink) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BondLink.Merge(m, src)
}
func (m *BondLink) XXX_Size() int {
	return xxx_messageInfo_BondLink.Size(m)
}
func (m *BondLink) XXX_DiscardUnknown() {
	xxx_messageInfo_BondLink.DiscardUnknown(m)
}

var xxx_messageInfo_BondLink proto.InternalMessageInfo

func (m *BondLink) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *BondLink) GetMode() BondLink_Mode {
	if m != nil {
		return m.Mode
	}
	return BondLink_UNKNOWN
}

func (m *BondLink) GetLb() BondLink_LoadBalance {
	if m != nil {
		return m.Lb
	}
	return BondLink_L2
}

func (m *BondLink) GetBondedInterfaces() []*BondLink_BondedInterface {
	if m != nil {
		return m.BondedInterfaces
	}
	return nil
}

type BondLink_BondedInterface struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	IsPassive            bool     `protobuf:"varint,2,opt,name=is_passive,json=isPassive,proto3" json:"is_passive,omitempty"`
	IsLongTimeout        bool     `protobuf:"varint,3,opt,name=is_long_timeout,json=isLongTimeout,proto3" json:"is_long_timeout,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BondLink_BondedInterface) Reset()         { *m = BondLink_BondedInterface{} }
func (m *BondLink_BondedInterface) String() string { return proto.CompactTextString(m) }
func (*BondLink_BondedInterface) ProtoMessage()    {}
func (*BondLink_BondedInterface) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b053108eedee97b, []int{8, 0}
}

func (m *BondLink_BondedInterface) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BondLink_BondedInterface.Unmarshal(m, b)
}
func (m *BondLink_BondedInterface) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BondLink_BondedInterface.Marshal(b, m, deterministic)
}
func (m *BondLink_BondedInterface) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BondLink_BondedInterface.Merge(m, src)
}
func (m *BondLink_BondedInterface) XXX_Size() int {
	return xxx_messageInfo_BondLink_BondedInterface.Size(m)
}
func (m *BondLink_BondedInterface) XXX_DiscardUnknown() {
	xxx_messageInfo_BondLink_BondedInterface.DiscardUnknown(m)
}

var xxx_messageInfo_BondLink_BondedInterface proto.InternalMessageInfo

func (m *BondLink_BondedInterface) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BondLink_BondedInterface) GetIsPassive() bool {
	if m != nil {
		return m.IsPassive
	}
	return false
}

func (m *BondLink_BondedInterface) GetIsLongTimeout() bool {
	if m != nil {
		return m.IsLongTimeout
	}
	return false
}

type GreLink struct {
	TunnelType           GreLink_Type `protobuf:"varint,1,opt,name=tunnel_type,json=tunnelType,proto3,enum=ligato.vpp.interfaces.GreLink_Type" json:"tunnel_type,omitempty"`
	SrcAddr              string       `protobuf:"bytes,2,opt,name=src_addr,json=srcAddr,proto3" json:"src_addr,omitempty"`
	DstAddr              string       `protobuf:"bytes,3,opt,name=dst_addr,json=dstAddr,proto3" json:"dst_addr,omitempty"`
	OuterFibId           uint32       `protobuf:"varint,4,opt,name=outer_fib_id,json=outerFibId,proto3" json:"outer_fib_id,omitempty"`
	SessionId            uint32       `protobuf:"varint,5,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *GreLink) Reset()         { *m = GreLink{} }
func (m *GreLink) String() string { return proto.CompactTextString(m) }
func (*GreLink) ProtoMessage()    {}
func (*GreLink) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b053108eedee97b, []int{9}
}

func (m *GreLink) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GreLink.Unmarshal(m, b)
}
func (m *GreLink) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GreLink.Marshal(b, m, deterministic)
}
func (m *GreLink) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GreLink.Merge(m, src)
}
func (m *GreLink) XXX_Size() int {
	return xxx_messageInfo_GreLink.Size(m)
}
func (m *GreLink) XXX_DiscardUnknown() {
	xxx_messageInfo_GreLink.DiscardUnknown(m)
}

var xxx_messageInfo_GreLink proto.InternalMessageInfo

func (m *GreLink) GetTunnelType() GreLink_Type {
	if m != nil {
		return m.TunnelType
	}
	return GreLink_UNKNOWN
}

func (m *GreLink) GetSrcAddr() string {
	if m != nil {
		return m.SrcAddr
	}
	return ""
}

func (m *GreLink) GetDstAddr() string {
	if m != nil {
		return m.DstAddr
	}
	return ""
}

func (m *GreLink) GetOuterFibId() uint32 {
	if m != nil {
		return m.OuterFibId
	}
	return 0
}

func (m *GreLink) GetSessionId() uint32 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

type GtpuLink struct {
	// Source VTEP address
	SrcAddr string `protobuf:"bytes,1,opt,name=src_addr,json=srcAddr,proto3" json:"src_addr,omitempty"`
	// Destination VTEP address
	DstAddr string `protobuf:"bytes,2,opt,name=dst_addr,json=dstAddr,proto3" json:"dst_addr,omitempty"`
	// Name of multicast interface
	Multicast string `protobuf:"bytes,3,opt,name=multicast,proto3" json:"multicast,omitempty"`
	// Tunnel endpoint identifier
	Teid uint32 `protobuf:"varint,4,opt,name=teid,proto3" json:"teid,omitempty"`
	// VRF id for the encapsulated packets
	EncapVrfId uint32 `protobuf:"varint,5,opt,name=encap_vrf_id,json=encapVrfId,proto3" json:"encap_vrf_id,omitempty"`
	// Next VPP node after decapsulation
	DecapNext            GtpuLink_NextNode `protobuf:"varint,6,opt,name=decap_next,json=decapNext,proto3,enum=ligato.vpp.interfaces.GtpuLink_NextNode" json:"decap_next,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *GtpuLink) Reset()         { *m = GtpuLink{} }
func (m *GtpuLink) String() string { return proto.CompactTextString(m) }
func (*GtpuLink) ProtoMessage()    {}
func (*GtpuLink) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b053108eedee97b, []int{10}
}

func (m *GtpuLink) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GtpuLink.Unmarshal(m, b)
}
func (m *GtpuLink) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GtpuLink.Marshal(b, m, deterministic)
}
func (m *GtpuLink) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GtpuLink.Merge(m, src)
}
func (m *GtpuLink) XXX_Size() int {
	return xxx_messageInfo_GtpuLink.Size(m)
}
func (m *GtpuLink) XXX_DiscardUnknown() {
	xxx_messageInfo_GtpuLink.DiscardUnknown(m)
}

var xxx_messageInfo_GtpuLink proto.InternalMessageInfo

func (m *GtpuLink) GetSrcAddr() string {
	if m != nil {
		return m.SrcAddr
	}
	return ""
}

func (m *GtpuLink) GetDstAddr() string {
	if m != nil {
		return m.DstAddr
	}
	return ""
}

func (m *GtpuLink) GetMulticast() string {
	if m != nil {
		return m.Multicast
	}
	return ""
}

func (m *GtpuLink) GetTeid() uint32 {
	if m != nil {
		return m.Teid
	}
	return 0
}

func (m *GtpuLink) GetEncapVrfId() uint32 {
	if m != nil {
		return m.EncapVrfId
	}
	return 0
}

func (m *GtpuLink) GetDecapNext() GtpuLink_NextNode {
	if m != nil {
		return m.DecapNext
	}
	return GtpuLink_DEFAULT
}

type IPIPLink struct {
	// Mode of the IPIP tunnel
	TunnelMode IPIPLink_Mode `protobuf:"varint,1,opt,name=tunnel_mode,json=tunnelMode,proto3,enum=ligato.vpp.interfaces.IPIPLink_Mode" json:"tunnel_mode,omitempty"`
	// Source VTEP IP address
	SrcAddr string `protobuf:"bytes,2,opt,name=src_addr,json=srcAddr,proto3" json:"src_addr,omitempty"`
	// Destination VTEP IP address
	DstAddr              string   `protobuf:"bytes,3,opt,name=dst_addr,json=dstAddr,proto3" json:"dst_addr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IPIPLink) Reset()         { *m = IPIPLink{} }
func (m *IPIPLink) String() string { return proto.CompactTextString(m) }
func (*IPIPLink) ProtoMessage()    {}
func (*IPIPLink) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b053108eedee97b, []int{11}
}

func (m *IPIPLink) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IPIPLink.Unmarshal(m, b)
}
func (m *IPIPLink) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IPIPLink.Marshal(b, m, deterministic)
}
func (m *IPIPLink) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IPIPLink.Merge(m, src)
}
func (m *IPIPLink) XXX_Size() int {
	return xxx_messageInfo_IPIPLink.Size(m)
}
func (m *IPIPLink) XXX_DiscardUnknown() {
	xxx_messageInfo_IPIPLink.DiscardUnknown(m)
}

var xxx_messageInfo_IPIPLink proto.InternalMessageInfo

func (m *IPIPLink) GetTunnelMode() IPIPLink_Mode {
	if m != nil {
		return m.TunnelMode
	}
	return IPIPLink_POINT_TO_POINT
}

func (m *IPIPLink) GetSrcAddr() string {
	if m != nil {
		return m.SrcAddr
	}
	return ""
}

func (m *IPIPLink) GetDstAddr() string {
	if m != nil {
		return m.DstAddr
	}
	return ""
}

func init() {
	proto.RegisterEnum("ligato.vpp.interfaces.Interface_Type", Interface_Type_name, Interface_Type_value)
	proto.RegisterEnum("ligato.vpp.interfaces.Interface_RxMode_Type", Interface_RxMode_Type_name, Interface_RxMode_Type_value)
	proto.RegisterEnum("ligato.vpp.interfaces.SubInterface_TagRewriteOptions", SubInterface_TagRewriteOptions_name, SubInterface_TagRewriteOptions_value)
	proto.RegisterEnum("ligato.vpp.interfaces.MemifLink_MemifMode", MemifLink_MemifMode_name, MemifLink_MemifMode_value)
	proto.RegisterEnum("ligato.vpp.interfaces.VxlanLink_Gpe_Protocol", VxlanLink_Gpe_Protocol_name, VxlanLink_Gpe_Protocol_value)
	proto.RegisterEnum("ligato.vpp.interfaces.BondLink_Mode", BondLink_Mode_name, BondLink_Mode_value)
	proto.RegisterEnum("ligato.vpp.interfaces.BondLink_LoadBalance", BondLink_LoadBalance_name, BondLink_LoadBalance_value)
	proto.RegisterEnum("ligato.vpp.interfaces.GreLink_Type", GreLink_Type_name, GreLink_Type_value)
	proto.RegisterEnum("ligato.vpp.interfaces.GtpuLink_NextNode", GtpuLink_NextNode_name, GtpuLink_NextNode_value)
	proto.RegisterEnum("ligato.vpp.interfaces.IPIPLink_Mode", IPIPLink_Mode_name, IPIPLink_Mode_value)
	proto.RegisterType((*Interface)(nil), "ligato.vpp.interfaces.Interface")
	proto.RegisterType((*Interface_Unnumbered)(nil), "ligato.vpp.interfaces.Interface.Unnumbered")
	proto.RegisterType((*Interface_RxMode)(nil), "ligato.vpp.interfaces.Interface.RxMode")
	proto.RegisterType((*Interface_RxPlacement)(nil), "ligato.vpp.interfaces.Interface.RxPlacement")
	proto.RegisterType((*SubInterface)(nil), "ligato.vpp.interfaces.SubInterface")
	proto.RegisterType((*MemifLink)(nil), "ligato.vpp.interfaces.MemifLink")
	proto.RegisterType((*VxlanLink)(nil), "ligato.vpp.interfaces.VxlanLink")
	proto.RegisterType((*VxlanLink_Gpe)(nil), "ligato.vpp.interfaces.VxlanLink.Gpe")
	proto.RegisterType((*AfpacketLink)(nil), "ligato.vpp.interfaces.AfpacketLink")
	proto.RegisterType((*TapLink)(nil), "ligato.vpp.interfaces.TapLink")
	proto.RegisterType((*IPSecLink)(nil), "ligato.vpp.interfaces.IPSecLink")
	proto.RegisterType((*VmxNet3Link)(nil), "ligato.vpp.interfaces.VmxNet3Link")
	proto.RegisterType((*BondLink)(nil), "ligato.vpp.interfaces.BondLink")
	proto.RegisterType((*BondLink_BondedInterface)(nil), "ligato.vpp.interfaces.BondLink.BondedInterface")
	proto.RegisterType((*GreLink)(nil), "ligato.vpp.interfaces.GreLink")
	proto.RegisterType((*GtpuLink)(nil), "ligato.vpp.interfaces.GtpuLink")
	proto.RegisterType((*IPIPLink)(nil), "ligato.vpp.interfaces.IPIPLink")
}

func init() {
	proto.RegisterFile("ligato/vpp/interfaces/interface.proto", fileDescriptor_8b053108eedee97b)
}

var fileDescriptor_8b053108eedee97b = []byte{
	// 2293 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x58, 0xdd, 0x72, 0xdb, 0xc6,
	0x15, 0x16, 0x48, 0x4a, 0x04, 0x0f, 0x45, 0x0a, 0xde, 0x69, 0x32, 0x88, 0x12, 0x37, 0x2a, 0xe3,
	0x34, 0x9a, 0x34, 0x91, 0x2b, 0xaa, 0xf9, 0x69, 0x33, 0xd3, 0x04, 0x14, 0x21, 0x99, 0x31, 0x0d,
	0x22, 0x20, 0xe8, 0x24, 0x9d, 0x74, 0x30, 0x10, 0xb1, 0xa4, 0x50, 0x83, 0x00, 0x0c, 0x2c, 0x69,
	0x2a, 0x2f, 0xd1, 0xbe, 0x43, 0x5f, 0xa1, 0x2f, 0xd1, 0xab, 0x4e, 0xdf, 0xa0, 0x0f, 0xd0, 0xab,
	0x5e, 0xb5, 0xbd, 0xea, 0x9c, 0xdd, 0x05, 0x45, 0x26, 0x96, 0xe4, 0xe9, 0x8d, 0xb4, 0xfb, 0xed,
	0xf9, 0x76, 0x0f, 0xce, 0x9e, 0xbf, 0x25, 0xbc, 0x1b, 0x85, 0x53, 0x9f, 0x25, 0x0f, 0x17, 0x69,
	0xfa, 0x30, 0x8c, 0x19, 0xcd, 0x26, 0xfe, 0x98, 0xe6, 0xd7, 0xc3, 0xa3, 0x34, 0x4b, 0x58, 0x42,
	0x5e, 0x13, 0x62, 0x47, 0x8b, 0x34, 0x3d, 0xba, 0x16, 0xdb, 0x7f, 0x6b, 0x9d, 0x9d, 0xe6, 0x74,
	0x2c, 0xfe, 0x0a, 0x52, 0xeb, 0xaf, 0x0d, 0xa8, 0xf5, 0x0a, 0x61, 0x42, 0xa0, 0x12, 0xfb, 0x33,
	0xaa, 0x2b, 0x07, 0xca, 0x61, 0xcd, 0xe1, 0x63, 0xf2, 0x6b, 0xa8, 0xb0, 0xab, 0x94, 0xea, 0xa5,
	0x03, 0xe5, 0xb0, 0xd9, 0x7e, 0xf7, 0xe8, 0xa5, 0xa7, 0x1c, 0xad, 0xf6, 0x38, 0x72, 0xaf, 0x52,
	0xea, 0x70, 0x0a, 0xd1, 0xa1, 0x4a, 0x63, 0xff, 0x22, 0xa2, 0x81, 0x5e, 0x3e, 0x50, 0x0e, 0x55,
	0xa7, 0x98, 0x92, 0x9f, 0xc1, 0x6e, 0x7a, 0x79, 0x95, 0x7b, 0x7e, 0x10, 0x64, 0x34, 0xcf, 0xf5,
	0x0a, 0x3f, 0xb0, 0x8e, 0x98, 0x21, 0x20, 0x14, 0x09, 0xd3, 0x42, 0x80, 0xe6, 0xfa, 0xf6, 0x41,
	0x19, 0x45, 0xc2, 0xd4, 0x28, 0x20, 0xa2, 0x41, 0x79, 0x91, 0x4d, 0xf4, 0x9d, 0x03, 0xe5, 0xb0,
	0xe1, 0xe0, 0x90, 0xfc, 0x1c, 0xf6, 0x72, 0xca, 0xbc, 0xe0, 0x72, 0x9c, 0x7a, 0xe3, 0x28, 0xa4,
	0x31, 0xd3, 0xab, 0xfc, 0xe4, 0x46, 0x4e, 0x59, 0xf7, 0x72, 0x9c, 0x9e, 0x72, 0x10, 0x99, 0x33,
	0x36, 0xd7, 0x55, 0xc1, 0x9c, 0xb1, 0x39, 0x79, 0x0c, 0x30, 0x8f, 0xe3, 0xf9, 0xec, 0x82, 0x66,
	0x34, 0xd0, 0x6b, 0x07, 0xca, 0x61, 0xbd, 0xfd, 0x8b, 0x3b, 0x3f, 0x76, 0xb4, 0xa2, 0x38, 0x6b,
	0x74, 0xd2, 0x01, 0x35, 0x5b, 0x7a, 0xb3, 0x24, 0xa0, 0xb9, 0xbe, 0x7b, 0x50, 0x3e, 0xac, 0xb7,
	0xdf, 0xbb, 0x73, 0x2b, 0x67, 0xf9, 0x24, 0x09, 0xa8, 0x53, 0xcd, 0xf8, 0xff, 0x9c, 0x7c, 0x05,
	0x8d, 0x6c, 0xe9, 0xa5, 0x91, 0x3f, 0xa6, 0x33, 0x1a, 0xb3, 0x5c, 0x6f, 0xf0, 0x8d, 0x3e, 0x78,
	0x85, 0x8d, 0xec, 0x82, 0xe4, 0xec, 0x66, 0xd7, 0x93, 0x9c, 0x7c, 0x02, 0xe5, 0x7c, 0x7e, 0xa1,
	0x07, 0xfc, 0xe3, 0xde, 0xb9, 0x61, 0xa3, 0xe1, 0xfc, 0x62, 0xb5, 0xd7, 0xa3, 0x2d, 0x07, 0x19,
	0xe4, 0x53, 0xd8, 0x9e, 0xd1, 0x59, 0x38, 0xd1, 0x29, 0xa7, 0x1e, 0xdc, 0x40, 0x7d, 0x82, 0x32,
	0xfd, 0x30, 0x7e, 0xf6, 0x68, 0xcb, 0x11, 0x04, 0x62, 0x80, 0xea, 0x4f, 0x52, 0x7f, 0xfc, 0x8c,
	0x32, 0x7d, 0x72, 0xeb, 0xb9, 0x86, 0x14, 0x93, 0xfc, 0x15, 0x8d, 0xb4, 0xa1, 0xcc, 0xfc, 0x54,
	0x9f, 0x72, 0xf6, 0x4f, 0x6f, 0x60, 0xbb, 0x7e, 0x2a, 0x89, 0x28, 0x8c, 0x0a, 0x2f, 0x96, 0x91,
	0x1f, 0xeb, 0x97, 0xb7, 0x2a, 0xfc, 0x14, 0x65, 0x0a, 0x85, 0x39, 0x01, 0x99, 0x3c, 0x3e, 0xf4,
	0xf0, 0x56, 0x66, 0xcf, 0x1e, 0xd2, 0x71, 0xc1, 0xe4, 0x04, 0xf2, 0x39, 0xa8, 0x8b, 0xd9, 0xd2,
	0x8b, 0x29, 0x3b, 0xd1, 0xff, 0xc0, 0xc9, 0xad, 0x9b, 0x8e, 0x9d, 0x2d, 0x2d, 0xca, 0x4e, 0x24,
	0xbd, 0xba, 0x10, 0x53, 0xf2, 0x11, 0x54, 0x2e, 0x92, 0x38, 0xd0, 0x9f, 0x71, 0xf2, 0xdb, 0x37,
	0x90, 0x3b, 0x49, 0x1c, 0x48, 0x26, 0x17, 0x47, 0xfb, 0x4c, 0x33, 0xaa, 0x47, 0xb7, 0xda, 0xe7,
	0x3c, 0xa3, 0x85, 0x7d, 0xa6, 0x19, 0xc5, 0xa3, 0xa6, 0x2c, 0x9d, 0xeb, 0xb3, 0x5b, 0x8f, 0x3a,
	0x67, 0xe9, 0xbc, 0x38, 0x0a, 0xc5, 0x91, 0x16, 0xa6, 0x61, 0xaa, 0xc7, 0xb7, 0xd2, 0x7a, 0x76,
	0xcf, 0x2e, 0x68, 0x28, 0xbe, 0xff, 0x29, 0xc0, 0x75, 0xa0, 0x90, 0xf7, 0xe1, 0xde, 0x4a, 0xd8,
	0x7b, 0x11, 0xb2, 0x4b, 0x2f, 0x4c, 0x65, 0xc6, 0xd9, 0x5b, 0x2d, 0x7c, 0x1d, 0xb2, 0xcb, 0x5e,
	0xba, 0xff, 0x37, 0x05, 0x76, 0x44, 0x60, 0x90, 0x9f, 0xc0, 0xf6, 0xf3, 0x39, 0x9d, 0x8b, 0xe4,
	0xd4, 0x70, 0xc4, 0x84, 0x7c, 0x01, 0x15, 0x0c, 0x33, 0x99, 0x9d, 0x3e, 0x78, 0xc5, 0x28, 0x93,
	0x49, 0x0a, 0x99, 0x98, 0x67, 0x02, 0x3a, 0xf1, 0xe7, 0x11, 0xe3, 0x01, 0x2b, 0x33, 0x55, 0x5d,
	0x62, 0x28, 0xdd, 0xfa, 0x12, 0x2a, 0x48, 0x20, 0x75, 0xa8, 0x8e, 0xac, 0xc7, 0xd6, 0xe0, 0x6b,
	0x4b, 0xdb, 0xc2, 0x89, 0x3d, 0xe8, 0xf7, 0x7b, 0xd6, 0xb9, 0xa6, 0x10, 0xcc, 0xa2, 0x96, 0x6b,
	0x3a, 0xce, 0xc8, 0x76, 0xb5, 0x12, 0xd9, 0x05, 0xd5, 0xe8, 0x1a, 0xb6, 0xdb, 0x7b, 0x6a, 0x6a,
	0x65, 0x94, 0xec, 0x9a, 0x67, 0xc6, 0xa8, 0xef, 0x6a, 0x95, 0xfd, 0xef, 0xa0, 0xbe, 0x16, 0xa0,
	0x37, 0x7c, 0xd5, 0xeb, 0xb0, 0xf3, 0x22, 0xc9, 0x9e, 0xd1, 0x8c, 0x7f, 0x57, 0xc3, 0x91, 0x33,
	0xf2, 0x36, 0xd4, 0x67, 0x7e, 0x18, 0x7b, 0xec, 0x32, 0xa3, 0x7e, 0x91, 0x54, 0x01, 0x21, 0x97,
	0x23, 0xad, 0x7f, 0x29, 0x52, 0x55, 0x02, 0xcd, 0x91, 0xd5, 0x35, 0xcf, 0x7a, 0x96, 0xd9, 0xf5,
	0xdc, 0x6f, 0x6d, 0x53, 0xdb, 0x22, 0xf7, 0xa0, 0x31, 0x1c, 0x75, 0x3c, 0xae, 0xe8, 0x99, 0x71,
	0x6a, 0x6a, 0x0a, 0x79, 0x0d, 0xee, 0x0d, 0x07, 0x67, 0xee, 0xd7, 0x86, 0x63, 0x7a, 0xfd, 0xc1,
	0xc0, 0xee, 0x18, 0xa7, 0x8f, 0xb5, 0x12, 0x51, 0xa1, 0xd2, 0xb5, 0xbb, 0x8f, 0xb5, 0x32, 0xa9,
	0xc1, 0xf6, 0x13, 0xf3, 0x49, 0xef, 0x4c, 0xab, 0x90, 0x2a, 0x94, 0x5d, 0xc3, 0xd6, 0xb6, 0xf1,
	0x63, 0x8d, 0x33, 0xcf, 0x36, 0x4e, 0x1f, 0x9b, 0xae, 0xb6, 0x43, 0x34, 0xd8, 0x7d, 0xfa, 0x4d,
	0xdf, 0xb0, 0x3c, 0x77, 0x64, 0x59, 0x66, 0x5f, 0xab, 0x22, 0xd2, 0xb3, 0x87, 0xe6, 0x69, 0x81,
	0xa8, 0x78, 0xce, 0xd3, 0x27, 0xdf, 0x58, 0xa6, 0x7b, 0xb2, 0x76, 0x7c, 0x0d, 0xb5, 0xec, 0x0c,
	0xac, 0xee, 0x1a, 0x06, 0xa4, 0x09, 0x70, 0xee, 0x98, 0x05, 0xb5, 0x4e, 0xf6, 0xa0, 0x7e, 0xee,
	0xda, 0xa3, 0x02, 0xd8, 0x45, 0x00, 0x3d, 0xac, 0x00, 0x1a, 0x9d, 0x1d, 0xa8, 0x44, 0x61, 0xfc,
	0xac, 0xf5, 0xdf, 0x12, 0xec, 0xae, 0x67, 0x2f, 0x34, 0x57, 0xea, 0x67, 0x34, 0x66, 0xde, 0x5a,
	0x55, 0x03, 0x01, 0x59, 0x58, 0xdb, 0x5e, 0x83, 0x9d, 0x7c, 0x7e, 0xe1, 0x85, 0x81, 0xb4, 0xf3,
	0x76, 0x3e, 0xbf, 0xe8, 0x05, 0xe4, 0x5b, 0x68, 0x30, 0x7f, 0xea, 0x65, 0x2f, 0xbc, 0x24, 0x65,
	0x61, 0x12, 0x73, 0x43, 0x37, 0xdb, 0x1f, 0xbd, 0x42, 0xc6, 0x3c, 0x72, 0xfd, 0xa9, 0x43, 0x5f,
	0x64, 0x21, 0xa3, 0x03, 0xce, 0xcd, 0x9d, 0x3a, 0xf3, 0xa7, 0xce, 0x0b, 0x31, 0x23, 0xf7, 0x01,
	0xd2, 0x79, 0x7e, 0xe9, 0x05, 0x09, 0x3b, 0x7e, 0xce, 0xcb, 0x9e, 0xea, 0xd4, 0x10, 0xe9, 0x22,
	0x80, 0x05, 0x98, 0xf9, 0xd3, 0x63, 0x7d, 0x9b, 0xab, 0xc3, 0xc7, 0x12, 0x6b, 0xcb, 0x32, 0xc7,
	0xc7, 0xad, 0x3f, 0x2a, 0x70, 0xef, 0x47, 0x27, 0xa1, 0xdb, 0x75, 0x7b, 0x43, 0xa3, 0xd3, 0x37,
	0xbb, 0xda, 0x16, 0x5e, 0x9d, 0x3d, 0x1a, 0x3e, 0x3a, 0xd6, 0x94, 0x62, 0xd8, 0x16, 0x57, 0x6b,
	0x0f, 0xec, 0x63, 0xad, 0x2c, 0x47, 0x6d, 0xad, 0x82, 0x16, 0x75, 0x1d, 0xc3, 0x1a, 0xf6, 0x0d,
	0xd7, 0x3c, 0x3e, 0xd6, 0xb6, 0x37, 0x81, 0xb6, 0xb6, 0xb3, 0x01, 0xb4, 0x8f, 0xb5, 0xea, 0x26,
	0xd0, 0xd6, 0xd4, 0xd6, 0x3f, 0x4a, 0x50, 0x5b, 0xe5, 0x7f, 0xf2, 0x5b, 0x19, 0x96, 0x0a, 0x37,
	0xdc, 0xfb, 0x77, 0xd5, 0x0b, 0x31, 0xe2, 0xf5, 0x4f, 0x04, 0xe5, 0xeb, 0xb0, 0x33, 0xf3, 0x73,
	0x26, 0x03, 0x40, 0x75, 0xe4, 0x8c, 0x34, 0xa1, 0x14, 0x0a, 0xbf, 0x6f, 0x38, 0xa5, 0x30, 0x20,
	0xef, 0xc1, 0x5e, 0x9e, 0x60, 0x95, 0xf0, 0x26, 0x61, 0x44, 0xf9, 0x2d, 0x8b, 0x56, 0xa2, 0x29,
	0xe0, 0x33, 0x89, 0xe2, 0x86, 0x39, 0x1d, 0x67, 0x94, 0x71, 0xd3, 0xd6, 0x1c, 0x39, 0x23, 0x6f,
	0x42, 0x2d, 0x0b, 0xe3, 0xa9, 0x97, 0x87, 0xdf, 0x53, 0x69, 0x61, 0x15, 0x81, 0x61, 0xf8, 0x3d,
	0xf7, 0x9f, 0x8b, 0xf9, 0x64, 0x42, 0x33, 0xb1, 0x5c, 0xe5, 0xcb, 0x20, 0x20, 0x2e, 0x80, 0xec,
	0xa5, 0xc7, 0x63, 0x36, 0x97, 0xcd, 0x84, 0x9a, 0x2d, 0xbf, 0xe2, 0x73, 0x5c, 0x64, 0xab, 0xc5,
	0x9a, 0x58, 0x64, 0x72, 0xb1, 0xd5, 0x96, 0xd6, 0xe2, 0xa9, 0x6d, 0x17, 0x54, 0xd3, 0x7d, 0x64,
	0x3a, 0x96, 0xe9, 0x6a, 0x5b, 0x64, 0x07, 0x4a, 0x3d, 0x5b, 0x53, 0xd0, 0xc4, 0xf6, 0xc8, 0x72,
	0xbd, 0x9e, 0xf5, 0xa5, 0x79, 0xea, 0x6a, 0xa5, 0xd6, 0x3f, 0x4b, 0x50, 0x5b, 0x55, 0x2c, 0x54,
	0x2e, 0xcf, 0xc6, 0xab, 0x0e, 0x4a, 0x3a, 0x77, 0x9e, 0x8d, 0x8b, 0x06, 0xea, 0x6d, 0xa8, 0x07,
	0x39, 0x5b, 0x09, 0x94, 0x84, 0x40, 0x90, 0xb3, 0x42, 0x00, 0xdb, 0xa7, 0x38, 0x94, 0xd6, 0xc4,
	0x21, 0x79, 0x0b, 0x6a, 0xb3, 0x79, 0xc4, 0xc2, 0xb1, 0x9f, 0x33, 0x69, 0xc8, 0x6b, 0x80, 0x7c,
	0x0c, 0xe5, 0x69, 0x4a, 0xb9, 0x01, 0xeb, 0xed, 0x07, 0x77, 0x95, 0xd4, 0xa3, 0xf3, 0x94, 0x3a,
	0x48, 0xd8, 0xff, 0x8b, 0x02, 0xe5, 0xf3, 0x94, 0x92, 0x03, 0xcc, 0xb4, 0x63, 0x3f, 0xf5, 0x16,
	0xd9, 0x04, 0x63, 0x4e, 0xa4, 0x3c, 0xe0, 0xd8, 0xd3, 0x6c, 0xd2, 0x0b, 0x48, 0x0f, 0x54, 0xde,
	0x96, 0x8e, 0x93, 0x48, 0x66, 0xf4, 0x0f, 0x5f, 0xe5, 0x98, 0x23, 0x5b, 0x92, 0x9c, 0x15, 0xbd,
	0xf5, 0x05, 0xa8, 0x05, 0xba, 0x99, 0xb7, 0xab, 0x50, 0xee, 0xd9, 0xbf, 0xd2, 0x14, 0x31, 0xf8,
	0x58, 0x64, 0xeb, 0x95, 0xf9, 0xcb, 0x08, 0x5b, 0xc3, 0x47, 0x5a, 0xa5, 0xf5, 0x7b, 0xd8, 0x5d,
	0xef, 0x49, 0xc8, 0x03, 0xd8, 0xbd, 0x4c, 0x72, 0xe6, 0x85, 0x93, 0xb5, 0x74, 0xd2, 0x29, 0xe9,
	0x8a, 0x03, 0x88, 0xf7, 0x26, 0x3c, 0xa5, 0xbc, 0x07, 0x7b, 0x51, 0x18, 0xcf, 0x97, 0xde, 0x4a,
	0x59, 0x69, 0xf9, 0x26, 0x87, 0x57, 0x89, 0xa2, 0xf5, 0x77, 0x05, 0xaa, 0xb2, 0x6b, 0xc1, 0x46,
	0x79, 0x41, 0xb3, 0x1c, 0x53, 0x8d, 0x30, 0x4a, 0x31, 0x45, 0x9b, 0x6d, 0x1c, 0x2a, 0x6f, 0x71,
	0xf3, 0x40, 0x96, 0x78, 0xb3, 0x70, 0x9c, 0x25, 0x39, 0xcd, 0x16, 0xe1, 0x58, 0x94, 0xb0, 0x9a,
	0xd3, 0x64, 0xc9, 0x93, 0x35, 0x14, 0xb7, 0xca, 0x96, 0xde, 0xb5, 0xb7, 0x57, 0x84, 0xf9, 0xb3,
	0xa5, 0x53, 0xf8, 0xfb, 0x01, 0xec, 0xb2, 0x75, 0x09, 0x91, 0x85, 0x80, 0x5d, 0x4b, 0xdc, 0x07,
	0x10, 0x2d, 0xbc, 0x37, 0xcd, 0x13, 0x1e, 0x2f, 0xaa, 0x53, 0x13, 0xc8, 0x79, 0x9e, 0xb4, 0xfe,
	0x53, 0x86, 0xda, 0xaa, 0x33, 0x42, 0xff, 0xa2, 0x79, 0x2c, 0x23, 0x18, 0x87, 0xe8, 0x92, 0x7e,
	0xcc, 0x42, 0x2f, 0xa3, 0x69, 0xe4, 0x5f, 0x15, 0xf5, 0x0b, 0x21, 0x87, 0x23, 0xe4, 0x0d, 0x50,
	0xa3, 0x64, 0xec, 0x47, 0xd8, 0x12, 0x08, 0xff, 0xab, 0xf2, 0x79, 0x2f, 0xe5, 0xb1, 0x46, 0x67,
	0x09, 0xa3, 0xb8, 0x26, 0x82, 0x58, 0x15, 0x80, 0x58, 0x14, 0xbc, 0x3c, 0x0d, 0x8b, 0x30, 0xe6,
	0xc0, 0x30, 0x0d, 0x51, 0x69, 0xc9, 0xc4, 0x55, 0x11, 0xc5, 0x72, 0x2f, 0x5c, 0xfe, 0x0d, 0xc0,
	0x38, 0xbb, 0x4a, 0x59, 0xe2, 0xf9, 0xd1, 0x94, 0x47, 0x71, 0xb3, 0xfd, 0xe6, 0x86, 0xdb, 0xf1,
	0xf7, 0xd2, 0x29, 0x97, 0x31, 0xa2, 0xa9, 0x53, 0x1b, 0x17, 0x43, 0x72, 0x08, 0x9a, 0x38, 0x57,
	0xee, 0xf0, 0x8c, 0x5e, 0xf1, 0x50, 0xc7, 0xeb, 0x46, 0x5c, 0x90, 0x1e, 0xd3, 0x2b, 0xec, 0x7a,
	0xa4, 0x12, 0x6b, 0xa2, 0x20, 0xba, 0x1e, 0xb1, 0x70, 0x2d, 0xfb, 0x09, 0xd4, 0xd0, 0x7b, 0xa6,
	0x5c, 0xa1, 0x3a, 0x57, 0x68, 0xff, 0xc7, 0x0a, 0xa1, 0x2b, 0x4d, 0x51, 0x1f, 0x35, 0x94, 0x23,
	0x7c, 0xfe, 0x48, 0xf3, 0x71, 0x3a, 0x1e, 0xb1, 0xcb, 0x8f, 0x68, 0x08, 0x2b, 0x22, 0x8a, 0x07,
	0x1c, 0x82, 0x56, 0xd8, 0x72, 0x25, 0xd8, 0x10, 0x6a, 0x4b, 0x93, 0xae, 0x49, 0xca, 0x0b, 0x9f,
	0x07, 0xa9, 0x47, 0xe3, 0xb1, 0x9f, 0xea, 0x4d, 0x7e, 0x6d, 0x4d, 0x81, 0x8f, 0x82, 0xd4, 0x44,
	0xb4, 0x15, 0x40, 0x7d, 0xad, 0xaf, 0xc5, 0xab, 0x96, 0x44, 0x1a, 0x25, 0x53, 0xe9, 0x04, 0xd2,
	0x79, 0xcc, 0x28, 0x99, 0xe2, 0x55, 0x67, 0xcb, 0xe7, 0xc2, 0xd1, 0x44, 0x0a, 0xaa, 0x66, 0xcb,
	0xe7, 0xdc, 0xcb, 0xde, 0x00, 0x95, 0x15, 0x4b, 0xc2, 0x4b, 0xab, 0x4c, 0x2c, 0xa1, 0x87, 0xa9,
	0x45, 0x07, 0x2c, 0xab, 0x81, 0xb2, 0xaa, 0x06, 0x9f, 0xca, 0xaa, 0x23, 0xca, 0xf5, 0x83, 0x3b,
	0x1a, 0xe8, 0xa3, 0xb5, 0x7a, 0xf3, 0x19, 0x94, 0xa2, 0x0b, 0x7e, 0x56, 0xf3, 0xc6, 0x57, 0xdf,
	0x8a, 0xd7, 0x4f, 0xfc, 0xa0, 0xe3, 0x47, 0x7e, 0x3c, 0xa6, 0x4e, 0x29, 0xba, 0x20, 0xdf, 0xc1,
	0x3d, 0x6c, 0xc4, 0x69, 0x70, 0x1d, 0xf3, 0xc5, 0xb3, 0xef, 0xe1, 0x5d, 0x7b, 0x75, 0x38, 0x71,
	0x95, 0x15, 0x1c, 0xed, 0x62, 0x13, 0xc8, 0xf7, 0x23, 0xd8, 0xfb, 0x81, 0xd0, 0x4b, 0x9f, 0xe9,
	0xf7, 0x01, 0xc2, 0xdc, 0x4b, 0xfd, 0x3c, 0x0f, 0x17, 0x54, 0x9a, 0xbb, 0x16, 0xe6, 0xb6, 0x00,
	0xd0, 0x33, 0xc2, 0xdc, 0x8b, 0x92, 0x78, 0xea, 0xb1, 0x70, 0x46, 0x93, 0x39, 0x93, 0xd1, 0xd7,
	0x08, 0xf3, 0x7e, 0x12, 0x4f, 0x5d, 0x01, 0xb6, 0xbe, 0x85, 0x0a, 0x2f, 0x49, 0x1b, 0x29, 0x73,
	0x0f, 0xea, 0xce, 0x60, 0x64, 0x75, 0x3d, 0x67, 0xd0, 0xe9, 0x59, 0x9a, 0x82, 0x9d, 0xa4, 0x71,
	0x8a, 0xdd, 0xad, 0x87, 0x0d, 0xe3, 0xc8, 0xd6, 0x4a, 0x98, 0x36, 0xbf, 0x19, 0x38, 0x5a, 0x19,
	0xbb, 0xc3, 0x8e, 0x33, 0x30, 0xba, 0xa7, 0xc6, 0xd0, 0xd5, 0x2a, 0xd8, 0x65, 0xf4, 0x8d, 0x53,
	0x5b, 0xdb, 0x6e, 0x7d, 0x0e, 0xf5, 0x35, 0xcb, 0x61, 0x99, 0xeb, 0xb7, 0x45, 0x3e, 0xee, 0x9f,
	0xc8, 0x7c, 0xdc, 0x6f, 0x9f, 0x68, 0x25, 0x5c, 0x71, 0x70, 0xa7, 0x1d, 0x28, 0x75, 0x4e, 0xb5,
	0x0a, 0xfe, 0x37, 0x3a, 0xda, 0x76, 0xeb, 0xdf, 0x0a, 0x54, 0xe5, 0x3b, 0x86, 0x74, 0xa1, 0xce,
	0xe6, 0x71, 0x4c, 0x23, 0x8f, 0xff, 0x38, 0x21, 0xfa, 0x8c, 0x77, 0x6e, 0x7f, 0xfc, 0x88, 0xae,
	0x1f, 0x04, 0x8f, 0x77, 0xc9, 0x6f, 0x80, 0x5a, 0xd4, 0x50, 0x99, 0x59, 0xab, 0xb2, 0x80, 0xe2,
	0x52, 0x51, 0x3d, 0x65, 0x3e, 0xad, 0xca, 0xd2, 0x89, 0x69, 0x32, 0x99, 0x33, 0x9a, 0x79, 0x93,
	0x90, 0xf7, 0x8e, 0x32, 0x91, 0x72, 0xec, 0x2c, 0xc4, 0x06, 0xf2, 0x3e, 0x40, 0x4e, 0x73, 0x4c,
	0xe0, 0xb8, 0x2e, 0xd2, 0x68, 0x4d, 0x22, 0xbd, 0xa0, 0xf5, 0xcb, 0x97, 0xbd, 0x27, 0xd0, 0x1e,
	0x27, 0xc2, 0x0c, 0xae, 0xd9, 0xd1, 0x4a, 0x04, 0x60, 0xc7, 0x74, 0x86, 0xb6, 0x61, 0x69, 0xe5,
	0xd6, 0x9f, 0x4a, 0xa0, 0x16, 0xaf, 0xb1, 0x0d, 0xad, 0x95, 0x9b, 0xb5, 0x2e, 0x6d, 0x6a, 0xbd,
	0x51, 0xdb, 0xcb, 0x3f, 0xac, 0xed, 0xd8, 0x64, 0xd2, 0xd5, 0xb7, 0xf0, 0x31, 0x7e, 0x27, 0x0f,
	0xf8, 0xa2, 0x5e, 0xcb, 0x72, 0xc0, 0x31, 0x51, 0xaf, 0xcf, 0x41, 0x54, 0x6f, 0x2f, 0xa6, 0x4b,
	0xc6, 0xf3, 0x6e, 0xb3, 0x7d, 0x78, 0xc7, 0x63, 0xf2, 0xc8, 0xa2, 0x4b, 0x66, 0x61, 0xe8, 0xd5,
	0x38, 0x17, 0xa7, 0xad, 0x63, 0x50, 0x0b, 0x78, 0xfd, 0xb9, 0xb4, 0x25, 0xbd, 0x44, 0x29, 0xaa,
	0x76, 0xa9, 0xa8, 0xda, 0xe5, 0xd6, 0x9f, 0x15, 0x50, 0x8b, 0x97, 0x26, 0x31, 0x57, 0xee, 0xb0,
	0xd6, 0x76, 0x3e, 0xb8, 0xe3, 0x7d, 0x2a, 0x12, 0x80, 0xf4, 0x07, 0xee, 0xf5, 0xff, 0x97, 0x3f,
	0xb4, 0xf6, 0x65, 0xcc, 0x10, 0x68, 0xda, 0x83, 0x9e, 0xe5, 0x7a, 0xee, 0xc0, 0xe3, 0x03, 0x6d,
	0xab, 0x73, 0xf6, 0xbb, 0xee, 0x34, 0x29, 0xf4, 0x08, 0xf9, 0xaf, 0x70, 0x1f, 0xfa, 0x53, 0x1a,
	0xb3, 0x87, 0x8b, 0x93, 0x87, 0xbc, 0x59, 0x79, 0xf8, 0xd2, 0x5f, 0xf7, 0x3e, 0x5b, 0xa4, 0xe9,
	0x5a, 0x3a, 0xb9, 0xd8, 0xe1, 0xb2, 0x27, 0xff, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x33, 0xd7, 0x90,
	0xe8, 0x0c, 0x14, 0x00, 0x00,
}
