// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.4
// source: ligato/vpp/interfaces/interface.proto

package vpp_interfaces

import (
	proto "github.com/golang/protobuf/proto"
	ipsec "go.ligato.io/vpp-agent/v3/proto/ligato/vpp/ipsec"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Type defines VPP interface types.
type Interface_Type int32

const (
	Interface_UNDEFINED_TYPE    Interface_Type = 0
	Interface_SUB_INTERFACE     Interface_Type = 1
	Interface_SOFTWARE_LOOPBACK Interface_Type = 2
	Interface_DPDK              Interface_Type = 3
	Interface_MEMIF             Interface_Type = 4
	Interface_TAP               Interface_Type = 5
	Interface_AF_PACKET         Interface_Type = 6
	Interface_VXLAN_TUNNEL      Interface_Type = 7
	// Deprecated: Do not use.
	Interface_IPSEC_TUNNEL      Interface_Type = 8 // Deprecated in VPP 20.01+. Use IPIP_TUNNEL + ipsec.TunnelProtection instead.
	Interface_VMXNET3_INTERFACE Interface_Type = 9
	Interface_BOND_INTERFACE    Interface_Type = 10
	Interface_GRE_TUNNEL        Interface_Type = 11
	Interface_GTPU_TUNNEL       Interface_Type = 12
	Interface_IPIP_TUNNEL       Interface_Type = 13
)

// Enum value maps for Interface_Type.
var (
	Interface_Type_name = map[int32]string{
		0:  "UNDEFINED_TYPE",
		1:  "SUB_INTERFACE",
		2:  "SOFTWARE_LOOPBACK",
		3:  "DPDK",
		4:  "MEMIF",
		5:  "TAP",
		6:  "AF_PACKET",
		7:  "VXLAN_TUNNEL",
		8:  "IPSEC_TUNNEL",
		9:  "VMXNET3_INTERFACE",
		10: "BOND_INTERFACE",
		11: "GRE_TUNNEL",
		12: "GTPU_TUNNEL",
		13: "IPIP_TUNNEL",
	}
	Interface_Type_value = map[string]int32{
		"UNDEFINED_TYPE":    0,
		"SUB_INTERFACE":     1,
		"SOFTWARE_LOOPBACK": 2,
		"DPDK":              3,
		"MEMIF":             4,
		"TAP":               5,
		"AF_PACKET":         6,
		"VXLAN_TUNNEL":      7,
		"IPSEC_TUNNEL":      8,
		"VMXNET3_INTERFACE": 9,
		"BOND_INTERFACE":    10,
		"GRE_TUNNEL":        11,
		"GTPU_TUNNEL":       12,
		"IPIP_TUNNEL":       13,
	}
)

func (x Interface_Type) Enum() *Interface_Type {
	p := new(Interface_Type)
	*p = x
	return p
}

func (x Interface_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Interface_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_ligato_vpp_interfaces_interface_proto_enumTypes[0].Descriptor()
}

func (Interface_Type) Type() protoreflect.EnumType {
	return &file_ligato_vpp_interfaces_interface_proto_enumTypes[0]
}

func (x Interface_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Interface_Type.Descriptor instead.
func (Interface_Type) EnumDescriptor() ([]byte, []int) {
	return file_ligato_vpp_interfaces_interface_proto_rawDescGZIP(), []int{0, 0}
}

// Type definition is from: vpp/include/vnet/interface.h
type Interface_RxMode_Type int32

const (
	Interface_RxMode_UNKNOWN   Interface_RxMode_Type = 0
	Interface_RxMode_POLLING   Interface_RxMode_Type = 1
	Interface_RxMode_INTERRUPT Interface_RxMode_Type = 2
	Interface_RxMode_ADAPTIVE  Interface_RxMode_Type = 3
	Interface_RxMode_DEFAULT   Interface_RxMode_Type = 4
)

// Enum value maps for Interface_RxMode_Type.
var (
	Interface_RxMode_Type_name = map[int32]string{
		0: "UNKNOWN",
		1: "POLLING",
		2: "INTERRUPT",
		3: "ADAPTIVE",
		4: "DEFAULT",
	}
	Interface_RxMode_Type_value = map[string]int32{
		"UNKNOWN":   0,
		"POLLING":   1,
		"INTERRUPT": 2,
		"ADAPTIVE":  3,
		"DEFAULT":   4,
	}
)

func (x Interface_RxMode_Type) Enum() *Interface_RxMode_Type {
	p := new(Interface_RxMode_Type)
	*p = x
	return p
}

func (x Interface_RxMode_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Interface_RxMode_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_ligato_vpp_interfaces_interface_proto_enumTypes[1].Descriptor()
}

func (Interface_RxMode_Type) Type() protoreflect.EnumType {
	return &file_ligato_vpp_interfaces_interface_proto_enumTypes[1]
}

func (x Interface_RxMode_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Interface_RxMode_Type.Descriptor instead.
func (Interface_RxMode_Type) EnumDescriptor() ([]byte, []int) {
	return file_ligato_vpp_interfaces_interface_proto_rawDescGZIP(), []int{0, 2, 0}
}

type SubInterface_TagRewriteOptions int32

const (
	SubInterface_DISABLED    SubInterface_TagRewriteOptions = 0
	SubInterface_PUSH1       SubInterface_TagRewriteOptions = 1
	SubInterface_PUSH2       SubInterface_TagRewriteOptions = 2
	SubInterface_POP1        SubInterface_TagRewriteOptions = 3
	SubInterface_POP2        SubInterface_TagRewriteOptions = 4
	SubInterface_TRANSLATE11 SubInterface_TagRewriteOptions = 5
	SubInterface_TRANSLATE12 SubInterface_TagRewriteOptions = 6
	SubInterface_TRANSLATE21 SubInterface_TagRewriteOptions = 7
	SubInterface_TRANSLATE22 SubInterface_TagRewriteOptions = 8
)

// Enum value maps for SubInterface_TagRewriteOptions.
var (
	SubInterface_TagRewriteOptions_name = map[int32]string{
		0: "DISABLED",
		1: "PUSH1",
		2: "PUSH2",
		3: "POP1",
		4: "POP2",
		5: "TRANSLATE11",
		6: "TRANSLATE12",
		7: "TRANSLATE21",
		8: "TRANSLATE22",
	}
	SubInterface_TagRewriteOptions_value = map[string]int32{
		"DISABLED":    0,
		"PUSH1":       1,
		"PUSH2":       2,
		"POP1":        3,
		"POP2":        4,
		"TRANSLATE11": 5,
		"TRANSLATE12": 6,
		"TRANSLATE21": 7,
		"TRANSLATE22": 8,
	}
)

func (x SubInterface_TagRewriteOptions) Enum() *SubInterface_TagRewriteOptions {
	p := new(SubInterface_TagRewriteOptions)
	*p = x
	return p
}

func (x SubInterface_TagRewriteOptions) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubInterface_TagRewriteOptions) Descriptor() protoreflect.EnumDescriptor {
	return file_ligato_vpp_interfaces_interface_proto_enumTypes[2].Descriptor()
}

func (SubInterface_TagRewriteOptions) Type() protoreflect.EnumType {
	return &file_ligato_vpp_interfaces_interface_proto_enumTypes[2]
}

func (x SubInterface_TagRewriteOptions) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubInterface_TagRewriteOptions.Descriptor instead.
func (SubInterface_TagRewriteOptions) EnumDescriptor() ([]byte, []int) {
	return file_ligato_vpp_interfaces_interface_proto_rawDescGZIP(), []int{1, 0}
}

type MemifLink_MemifMode int32

const (
	MemifLink_ETHERNET    MemifLink_MemifMode = 0
	MemifLink_IP          MemifLink_MemifMode = 1
	MemifLink_PUNT_INJECT MemifLink_MemifMode = 2
)

// Enum value maps for MemifLink_MemifMode.
var (
	MemifLink_MemifMode_name = map[int32]string{
		0: "ETHERNET",
		1: "IP",
		2: "PUNT_INJECT",
	}
	MemifLink_MemifMode_value = map[string]int32{
		"ETHERNET":    0,
		"IP":          1,
		"PUNT_INJECT": 2,
	}
)

func (x MemifLink_MemifMode) Enum() *MemifLink_MemifMode {
	p := new(MemifLink_MemifMode)
	*p = x
	return p
}

func (x MemifLink_MemifMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MemifLink_MemifMode) Descriptor() protoreflect.EnumDescriptor {
	return file_ligato_vpp_interfaces_interface_proto_enumTypes[3].Descriptor()
}

func (MemifLink_MemifMode) Type() protoreflect.EnumType {
	return &file_ligato_vpp_interfaces_interface_proto_enumTypes[3]
}

func (x MemifLink_MemifMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MemifLink_MemifMode.Descriptor instead.
func (MemifLink_MemifMode) EnumDescriptor() ([]byte, []int) {
	return file_ligato_vpp_interfaces_interface_proto_rawDescGZIP(), []int{2, 0}
}

type VxlanLink_Gpe_Protocol int32

const (
	VxlanLink_Gpe_UNKNOWN  VxlanLink_Gpe_Protocol = 0
	VxlanLink_Gpe_IP4      VxlanLink_Gpe_Protocol = 1
	VxlanLink_Gpe_IP6      VxlanLink_Gpe_Protocol = 2
	VxlanLink_Gpe_ETHERNET VxlanLink_Gpe_Protocol = 3
	VxlanLink_Gpe_NSH      VxlanLink_Gpe_Protocol = 4
)

// Enum value maps for VxlanLink_Gpe_Protocol.
var (
	VxlanLink_Gpe_Protocol_name = map[int32]string{
		0: "UNKNOWN",
		1: "IP4",
		2: "IP6",
		3: "ETHERNET",
		4: "NSH",
	}
	VxlanLink_Gpe_Protocol_value = map[string]int32{
		"UNKNOWN":  0,
		"IP4":      1,
		"IP6":      2,
		"ETHERNET": 3,
		"NSH":      4,
	}
)

func (x VxlanLink_Gpe_Protocol) Enum() *VxlanLink_Gpe_Protocol {
	p := new(VxlanLink_Gpe_Protocol)
	*p = x
	return p
}

func (x VxlanLink_Gpe_Protocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VxlanLink_Gpe_Protocol) Descriptor() protoreflect.EnumDescriptor {
	return file_ligato_vpp_interfaces_interface_proto_enumTypes[4].Descriptor()
}

func (VxlanLink_Gpe_Protocol) Type() protoreflect.EnumType {
	return &file_ligato_vpp_interfaces_interface_proto_enumTypes[4]
}

func (x VxlanLink_Gpe_Protocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VxlanLink_Gpe_Protocol.Descriptor instead.
func (VxlanLink_Gpe_Protocol) EnumDescriptor() ([]byte, []int) {
	return file_ligato_vpp_interfaces_interface_proto_rawDescGZIP(), []int{3, 0, 0}
}

type BondLink_Mode int32

const (
	BondLink_UNKNOWN       BondLink_Mode = 0
	BondLink_ROUND_ROBIN   BondLink_Mode = 1
	BondLink_ACTIVE_BACKUP BondLink_Mode = 2
	BondLink_XOR           BondLink_Mode = 3
	BondLink_BROADCAST     BondLink_Mode = 4
	BondLink_LACP          BondLink_Mode = 5
)

// Enum value maps for BondLink_Mode.
var (
	BondLink_Mode_name = map[int32]string{
		0: "UNKNOWN",
		1: "ROUND_ROBIN",
		2: "ACTIVE_BACKUP",
		3: "XOR",
		4: "BROADCAST",
		5: "LACP",
	}
	BondLink_Mode_value = map[string]int32{
		"UNKNOWN":       0,
		"ROUND_ROBIN":   1,
		"ACTIVE_BACKUP": 2,
		"XOR":           3,
		"BROADCAST":     4,
		"LACP":          5,
	}
)

func (x BondLink_Mode) Enum() *BondLink_Mode {
	p := new(BondLink_Mode)
	*p = x
	return p
}

func (x BondLink_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BondLink_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_ligato_vpp_interfaces_interface_proto_enumTypes[5].Descriptor()
}

func (BondLink_Mode) Type() protoreflect.EnumType {
	return &file_ligato_vpp_interfaces_interface_proto_enumTypes[5]
}

func (x BondLink_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BondLink_Mode.Descriptor instead.
func (BondLink_Mode) EnumDescriptor() ([]byte, []int) {
	return file_ligato_vpp_interfaces_interface_proto_rawDescGZIP(), []int{8, 0}
}

type BondLink_LoadBalance int32

const (
	BondLink_L2  BondLink_LoadBalance = 0
	BondLink_L34 BondLink_LoadBalance = 1
	BondLink_L23 BondLink_LoadBalance = 2
	// Round robin
	BondLink_RR BondLink_LoadBalance = 3
	// Broadcast
	BondLink_BC BondLink_LoadBalance = 4
	// Active backup
	BondLink_AB BondLink_LoadBalance = 5
)

// Enum value maps for BondLink_LoadBalance.
var (
	BondLink_LoadBalance_name = map[int32]string{
		0: "L2",
		1: "L34",
		2: "L23",
		3: "RR",
		4: "BC",
		5: "AB",
	}
	BondLink_LoadBalance_value = map[string]int32{
		"L2":  0,
		"L34": 1,
		"L23": 2,
		"RR":  3,
		"BC":  4,
		"AB":  5,
	}
)

func (x BondLink_LoadBalance) Enum() *BondLink_LoadBalance {
	p := new(BondLink_LoadBalance)
	*p = x
	return p
}

func (x BondLink_LoadBalance) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BondLink_LoadBalance) Descriptor() protoreflect.EnumDescriptor {
	return file_ligato_vpp_interfaces_interface_proto_enumTypes[6].Descriptor()
}

func (BondLink_LoadBalance) Type() protoreflect.EnumType {
	return &file_ligato_vpp_interfaces_interface_proto_enumTypes[6]
}

func (x BondLink_LoadBalance) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BondLink_LoadBalance.Descriptor instead.
func (BondLink_LoadBalance) EnumDescriptor() ([]byte, []int) {
	return file_ligato_vpp_interfaces_interface_proto_rawDescGZIP(), []int{8, 1}
}

type GreLink_Type int32

const (
	GreLink_UNKNOWN GreLink_Type = 0
	// L3 GRE (i.e. this tunnel is in L3 mode)
	GreLink_L3 GreLink_Type = 1
	// TEB - Transparent Ethernet Bridging - the tunnel is in L2 mode
	GreLink_TEB GreLink_Type = 2
	// ERSPAN - the tunnel is for port mirror SPAN output
	GreLink_ERSPAN GreLink_Type = 3
)

// Enum value maps for GreLink_Type.
var (
	GreLink_Type_name = map[int32]string{
		0: "UNKNOWN",
		1: "L3",
		2: "TEB",
		3: "ERSPAN",
	}
	GreLink_Type_value = map[string]int32{
		"UNKNOWN": 0,
		"L3":      1,
		"TEB":     2,
		"ERSPAN":  3,
	}
)

func (x GreLink_Type) Enum() *GreLink_Type {
	p := new(GreLink_Type)
	*p = x
	return p
}

func (x GreLink_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GreLink_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_ligato_vpp_interfaces_interface_proto_enumTypes[7].Descriptor()
}

func (GreLink_Type) Type() protoreflect.EnumType {
	return &file_ligato_vpp_interfaces_interface_proto_enumTypes[7]
}

func (x GreLink_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GreLink_Type.Descriptor instead.
func (GreLink_Type) EnumDescriptor() ([]byte, []int) {
	return file_ligato_vpp_interfaces_interface_proto_rawDescGZIP(), []int{9, 0}
}

type GtpuLink_NextNode int32

const (
	// The default next node is l2-input
	GtpuLink_DEFAULT GtpuLink_NextNode = 0
	// l2-input
	GtpuLink_L2 GtpuLink_NextNode = 1
	// ip4-input
	GtpuLink_IP4 GtpuLink_NextNode = 2
	// ip6-input
	GtpuLink_IP6 GtpuLink_NextNode = 3
)

// Enum value maps for GtpuLink_NextNode.
var (
	GtpuLink_NextNode_name = map[int32]string{
		0: "DEFAULT",
		1: "L2",
		2: "IP4",
		3: "IP6",
	}
	GtpuLink_NextNode_value = map[string]int32{
		"DEFAULT": 0,
		"L2":      1,
		"IP4":     2,
		"IP6":     3,
	}
)

func (x GtpuLink_NextNode) Enum() *GtpuLink_NextNode {
	p := new(GtpuLink_NextNode)
	*p = x
	return p
}

func (x GtpuLink_NextNode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GtpuLink_NextNode) Descriptor() protoreflect.EnumDescriptor {
	return file_ligato_vpp_interfaces_interface_proto_enumTypes[8].Descriptor()
}

func (GtpuLink_NextNode) Type() protoreflect.EnumType {
	return &file_ligato_vpp_interfaces_interface_proto_enumTypes[8]
}

func (x GtpuLink_NextNode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GtpuLink_NextNode.Descriptor instead.
func (GtpuLink_NextNode) EnumDescriptor() ([]byte, []int) {
	return file_ligato_vpp_interfaces_interface_proto_rawDescGZIP(), []int{10, 0}
}

type IPIPLink_Mode int32

const (
	// point-to-point tunnel
	IPIPLink_POINT_TO_POINT IPIPLink_Mode = 0
	// point-to multipoint tunnel (supported starting from VPP 20.05)
	IPIPLink_POINT_TO_MULTIPOINT IPIPLink_Mode = 1
)

// Enum value maps for IPIPLink_Mode.
var (
	IPIPLink_Mode_name = map[int32]string{
		0: "POINT_TO_POINT",
		1: "POINT_TO_MULTIPOINT",
	}
	IPIPLink_Mode_value = map[string]int32{
		"POINT_TO_POINT":      0,
		"POINT_TO_MULTIPOINT": 1,
	}
)

func (x IPIPLink_Mode) Enum() *IPIPLink_Mode {
	p := new(IPIPLink_Mode)
	*p = x
	return p
}

func (x IPIPLink_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IPIPLink_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_ligato_vpp_interfaces_interface_proto_enumTypes[9].Descriptor()
}

func (IPIPLink_Mode) Type() protoreflect.EnumType {
	return &file_ligato_vpp_interfaces_interface_proto_enumTypes[9]
}

func (x IPIPLink_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IPIPLink_Mode.Descriptor instead.
func (IPIPLink_Mode) EnumDescriptor() ([]byte, []int) {
	return file_ligato_vpp_interfaces_interface_proto_rawDescGZIP(), []int{11, 0}
}

// Interface defines a VPP interface.
type Interface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name is mandatory field representing logical name for the interface.
	// It must be unique across all configured VPP interfaces.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Type represents the type of VPP interface and it must match the actual Link.
	Type Interface_Type `protobuf:"varint,2,opt,name=type,proto3,enum=ligato.vpp.interfaces.Interface_Type" json:"type,omitempty"`
	// Enabled controls if the interface should be UP.
	Enabled bool `protobuf:"varint,3,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// PhysAddress represents physical address (MAC) of the interface.
	// Random address will be assigned if left empty.
	PhysAddress string `protobuf:"bytes,4,opt,name=phys_address,json=physAddress,proto3" json:"phys_address,omitempty"`
	// IPAddresses define list of IP addresses for the interface and must be
	// defined in the following format: <ipAddress>/<ipPrefix>.
	// Interface IP address can be also allocated via netalloc plugin and
	// referenced here, see: api/models/netalloc/netalloc.proto
	IpAddresses []string `protobuf:"bytes,5,rep,name=ip_addresses,json=ipAddresses,proto3" json:"ip_addresses,omitempty"`
	// Vrf defines the ID of VRF table that the interface is assigned to.
	// The VRF table must be explicitely configured (see api/models/vpp/l3/vrf.proto).
	// When using unnumbered interface the actual vrf is inherited from
	// the interface referenced by the numbered interface and this field is ignored.
	Vrf uint32 `protobuf:"varint,6,opt,name=vrf,proto3" json:"vrf,omitempty"`
	// SetDhcpClient enables DHCP client on interface.
	SetDhcpClient bool             `protobuf:"varint,7,opt,name=set_dhcp_client,json=setDhcpClient,proto3" json:"set_dhcp_client,omitempty"`
	Ip6Nd         *Interface_IP6ND `protobuf:"bytes,14,opt,name=ip6_nd,json=ip6Nd,proto3" json:"ip6_nd,omitempty"`
	// Mtu sets MTU (Maximum Transmission Unit) for this interface.
	// If set to zero, default MTU (usually 9216) will be used.
	Mtu          uint32                   `protobuf:"varint,8,opt,name=mtu,proto3" json:"mtu,omitempty"`
	Unnumbered   *Interface_Unnumbered    `protobuf:"bytes,9,opt,name=unnumbered,proto3" json:"unnumbered,omitempty"`
	RxModes      []*Interface_RxMode      `protobuf:"bytes,12,rep,name=rx_modes,json=rxModes,proto3" json:"rx_modes,omitempty"`
	RxPlacements []*Interface_RxPlacement `protobuf:"bytes,13,rep,name=rx_placements,json=rxPlacements,proto3" json:"rx_placements,omitempty"`
	// Link defines configuration for specific interface types.
	// It can be nil for some interfaces types like: loopback and DPDK.
	//
	// Types that are assignable to Link:
	//	*Interface_Sub
	//	*Interface_Memif
	//	*Interface_Afpacket
	//	*Interface_Tap
	//	*Interface_Vxlan
	//	*Interface_Ipsec
	//	*Interface_VmxNet3
	//	*Interface_Bond
	//	*Interface_Gre
	//	*Interface_Gtpu
	//	*Interface_Ipip
	Link isInterface_Link `protobuf_oneof:"link"`
}

func (x *Interface) Reset() {
	*x = Interface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ligato_vpp_interfaces_interface_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interface) ProtoMessage() {}

func (x *Interface) ProtoReflect() protoreflect.Message {
	mi := &file_ligato_vpp_interfaces_interface_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interface.ProtoReflect.Descriptor instead.
func (*Interface) Descriptor() ([]byte, []int) {
	return file_ligato_vpp_interfaces_interface_proto_rawDescGZIP(), []int{0}
}

func (x *Interface) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Interface) GetType() Interface_Type {
	if x != nil {
		return x.Type
	}
	return Interface_UNDEFINED_TYPE
}

func (x *Interface) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Interface) GetPhysAddress() string {
	if x != nil {
		return x.PhysAddress
	}
	return ""
}

func (x *Interface) GetIpAddresses() []string {
	if x != nil {
		return x.IpAddresses
	}
	return nil
}

func (x *Interface) GetVrf() uint32 {
	if x != nil {
		return x.Vrf
	}
	return 0
}

func (x *Interface) GetSetDhcpClient() bool {
	if x != nil {
		return x.SetDhcpClient
	}
	return false
}

func (x *Interface) GetIp6Nd() *Interface_IP6ND {
	if x != nil {
		return x.Ip6Nd
	}
	return nil
}

func (x *Interface) GetMtu() uint32 {
	if x != nil {
		return x.Mtu
	}
	return 0
}

func (x *Interface) GetUnnumbered() *Interface_Unnumbered {
	if x != nil {
		return x.Unnumbered
	}
	return nil
}

func (x *Interface) GetRxModes() []*Interface_RxMode {
	if x != nil {
		return x.RxModes
	}
	return nil
}

func (x *Interface) GetRxPlacements() []*Interface_RxPlacement {
	if x != nil {
		return x.RxPlacements
	}
	return nil
}

func (m *Interface) GetLink() isInterface_Link {
	if m != nil {
		return m.Link
	}
	return nil
}

func (x *Interface) GetSub() *SubInterface {
	if x, ok := x.GetLink().(*Interface_Sub); ok {
		return x.Sub
	}
	return nil
}

func (x *Interface) GetMemif() *MemifLink {
	if x, ok := x.GetLink().(*Interface_Memif); ok {
		return x.Memif
	}
	return nil
}

func (x *Interface) GetAfpacket() *AfpacketLink {
	if x, ok := x.GetLink().(*Interface_Afpacket); ok {
		return x.Afpacket
	}
	return nil
}

func (x *Interface) GetTap() *TapLink {
	if x, ok := x.GetLink().(*Interface_Tap); ok {
		return x.Tap
	}
	return nil
}

func (x *Interface) GetVxlan() *VxlanLink {
	if x, ok := x.GetLink().(*Interface_Vxlan); ok {
		return x.Vxlan
	}
	return nil
}

// Deprecated: Do not use.
func (x *Interface) GetIpsec() *IPSecLink {
	if x, ok := x.GetLink().(*Interface_Ipsec); ok {
		return x.Ipsec
	}
	return nil
}

func (x *Interface) GetVmxNet3() *VmxNet3Link {
	if x, ok := x.GetLink().(*Interface_VmxNet3); ok {
		return x.VmxNet3
	}
	return nil
}

func (x *Interface) GetBond() *BondLink {
	if x, ok := x.GetLink().(*Interface_Bond); ok {
		return x.Bond
	}
	return nil
}

func (x *Interface) GetGre() *GreLink {
	if x, ok := x.GetLink().(*Interface_Gre); ok {
		return x.Gre
	}
	return nil
}

func (x *Interface) GetGtpu() *GtpuLink {
	if x, ok := x.GetLink().(*Interface_Gtpu); ok {
		return x.Gtpu
	}
	return nil
}

func (x *Interface) GetIpip() *IPIPLink {
	if x, ok := x.GetLink().(*Interface_Ipip); ok {
		return x.Ipip
	}
	return nil
}

type isInterface_Link interface {
	isInterface_Link()
}

type Interface_Sub struct {
	Sub *SubInterface `protobuf:"bytes,100,opt,name=sub,proto3,oneof"`
}

type Interface_Memif struct {
	Memif *MemifLink `protobuf:"bytes,101,opt,name=memif,proto3,oneof"`
}

type Interface_Afpacket struct {
	Afpacket *AfpacketLink `protobuf:"bytes,102,opt,name=afpacket,proto3,oneof"`
}

type Interface_Tap struct {
	Tap *TapLink `protobuf:"bytes,103,opt,name=tap,proto3,oneof"`
}

type Interface_Vxlan struct {
	Vxlan *VxlanLink `protobuf:"bytes,104,opt,name=vxlan,proto3,oneof"`
}

type Interface_Ipsec struct {
	// Deprecated: Do not use.
	Ipsec *IPSecLink `protobuf:"bytes,105,opt,name=ipsec,proto3,oneof"` // Deprecated in VPP 20.01+. Use IPIP_TUNNEL + ipsec.TunnelProtection instead.
}

type Interface_VmxNet3 struct {
	VmxNet3 *VmxNet3Link `protobuf:"bytes,106,opt,name=vmx_net3,json=vmxNet3,proto3,oneof"`
}

type Interface_Bond struct {
	Bond *BondLink `protobuf:"bytes,107,opt,name=bond,proto3,oneof"`
}

type Interface_Gre struct {
	Gre *GreLink `protobuf:"bytes,108,opt,name=gre,proto3,oneof"`
}

type Interface_Gtpu struct {
	Gtpu *GtpuLink `protobuf:"bytes,109,opt,name=gtpu,proto3,oneof"`
}

type Interface_Ipip struct {
	Ipip *IPIPLink `protobuf:"bytes,110,opt,name=ipip,proto3,oneof"`
}

func (*Interface_Sub) isInterface_Link() {}

func (*Interface_Memif) isInterface_Link() {}

func (*Interface_Afpacket) isInterface_Link() {}

func (*Interface_Tap) isInterface_Link() {}

func (*Interface_Vxlan) isInterface_Link() {}

func (*Interface_Ipsec) isInterface_Link() {}

func (*Interface_VmxNet3) isInterface_Link() {}

func (*Interface_Bond) isInterface_Link() {}

func (*Interface_Gre) isInterface_Link() {}

func (*Interface_Gtpu) isInterface_Link() {}

func (*Interface_Ipip) isInterface_Link() {}

// SubInterface defines configuration for interface type: SUB_INTERFACE
type SubInterface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the parent (super) interface
	ParentName string `protobuf:"bytes,1,opt,name=parent_name,json=parentName,proto3" json:"parent_name,omitempty"`
	// SubInterface ID, used as VLAN
	SubId uint32 `protobuf:"varint,2,opt,name=sub_id,json=subId,proto3" json:"sub_id,omitempty"`
	// VLAN tag rewrite rule applied for given tag for sub-interface
	TagRwOption SubInterface_TagRewriteOptions `protobuf:"varint,3,opt,name=tag_rw_option,json=tagRwOption,proto3,enum=ligato.vpp.interfaces.SubInterface_TagRewriteOptions" json:"tag_rw_option,omitempty"`
	// Set ether-type of the first tag to dot1q if true, dot1ad otherwise
	PushDot1Q bool `protobuf:"varint,4,opt,name=push_dot1q,json=pushDot1q,proto3" json:"push_dot1q,omitempty"`
	// First tag (required for PUSH1 and any TRANSLATE)
	Tag1 uint32 `protobuf:"varint,5,opt,name=tag1,proto3" json:"tag1,omitempty"`
	// Second tag (required for PUSH2 and any TRANSLATE)
	Tag2 uint32 `protobuf:"varint,6,opt,name=tag2,proto3" json:"tag2,omitempty"`
}

func (x *SubInterface) Reset() {
	*x = SubInterface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ligato_vpp_interfaces_interface_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubInterface) ProtoMessage() {}

func (x *SubInterface) ProtoReflect() protoreflect.Message {
	mi := &file_ligato_vpp_interfaces_interface_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubInterface.ProtoReflect.Descriptor instead.
func (*SubInterface) Descriptor() ([]byte, []int) {
	return file_ligato_vpp_interfaces_interface_proto_rawDescGZIP(), []int{1}
}

func (x *SubInterface) GetParentName() string {
	if x != nil {
		return x.ParentName
	}
	return ""
}

func (x *SubInterface) GetSubId() uint32 {
	if x != nil {
		return x.SubId
	}
	return 0
}

func (x *SubInterface) GetTagRwOption() SubInterface_TagRewriteOptions {
	if x != nil {
		return x.TagRwOption
	}
	return SubInterface_DISABLED
}

func (x *SubInterface) GetPushDot1Q() bool {
	if x != nil {
		return x.PushDot1Q
	}
	return false
}

func (x *SubInterface) GetTag1() uint32 {
	if x != nil {
		return x.Tag1
	}
	return 0
}

func (x *SubInterface) GetTag2() uint32 {
	if x != nil {
		return x.Tag2
	}
	return 0
}

// MemifLink defines configuration for interface type: MEMIF
type MemifLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode   MemifLink_MemifMode `protobuf:"varint,1,opt,name=mode,proto3,enum=ligato.vpp.interfaces.MemifLink_MemifMode" json:"mode,omitempty"`
	Master bool                `protobuf:"varint,2,opt,name=master,proto3" json:"master,omitempty"`
	// Id is a 32bit integer used to authenticate and match opposite sides of the connection
	Id uint32 `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	// Filename of the socket used for connection establishment
	SocketFilename string `protobuf:"bytes,4,opt,name=socket_filename,json=socketFilename,proto3" json:"socket_filename,omitempty"`
	Secret         string `protobuf:"bytes,5,opt,name=secret,proto3" json:"secret,omitempty"`
	// The number of entries of RX/TX rings
	RingSize uint32 `protobuf:"varint,6,opt,name=ring_size,json=ringSize,proto3" json:"ring_size,omitempty"`
	// Size of the buffer allocated for each ring entry
	BufferSize uint32 `protobuf:"varint,7,opt,name=buffer_size,json=bufferSize,proto3" json:"buffer_size,omitempty"`
	// Number of rx queues (only valid for slave)
	RxQueues uint32 `protobuf:"varint,8,opt,name=rx_queues,json=rxQueues,proto3" json:"rx_queues,omitempty"`
	// Number of tx queues (only valid for slave)
	TxQueues uint32 `protobuf:"varint,9,opt,name=tx_queues,json=txQueues,proto3" json:"tx_queues,omitempty"`
}

func (x *MemifLink) Reset() {
	*x = MemifLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ligato_vpp_interfaces_interface_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemifLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemifLink) ProtoMessage() {}

func (x *MemifLink) ProtoReflect() protoreflect.Message {
	mi := &file_ligato_vpp_interfaces_interface_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemifLink.ProtoReflect.Descriptor instead.
func (*MemifLink) Descriptor() ([]byte, []int) {
	return file_ligato_vpp_interfaces_interface_proto_rawDescGZIP(), []int{2}
}

func (x *MemifLink) GetMode() MemifLink_MemifMode {
	if x != nil {
		return x.Mode
	}
	return MemifLink_ETHERNET
}

func (x *MemifLink) GetMaster() bool {
	if x != nil {
		return x.Master
	}
	return false
}

func (x *MemifLink) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MemifLink) GetSocketFilename() string {
	if x != nil {
		return x.SocketFilename
	}
	return ""
}

func (x *MemifLink) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

func (x *MemifLink) GetRingSize() uint32 {
	if x != nil {
		return x.RingSize
	}
	return 0
}

func (x *MemifLink) GetBufferSize() uint32 {
	if x != nil {
		return x.BufferSize
	}
	return 0
}

func (x *MemifLink) GetRxQueues() uint32 {
	if x != nil {
		return x.RxQueues
	}
	return 0
}

func (x *MemifLink) GetTxQueues() uint32 {
	if x != nil {
		return x.TxQueues
	}
	return 0
}

// VxlanLink defines configuration for interface type: VXLAN_TUNNEL
type VxlanLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SrcAddress is source VTEP address
	SrcAddress string `protobuf:"bytes,1,opt,name=src_address,json=srcAddress,proto3" json:"src_address,omitempty"`
	// DstAddress is destination VTEP address
	DstAddress string `protobuf:"bytes,2,opt,name=dst_address,json=dstAddress,proto3" json:"dst_address,omitempty"`
	// Vni stands for VXLAN Network Identifier
	Vni uint32 `protobuf:"varint,3,opt,name=vni,proto3" json:"vni,omitempty"`
	// Multicast defines name of multicast interface
	Multicast string         `protobuf:"bytes,4,opt,name=multicast,proto3" json:"multicast,omitempty"`
	Gpe       *VxlanLink_Gpe `protobuf:"bytes,5,opt,name=gpe,proto3" json:"gpe,omitempty"`
}

func (x *VxlanLink) Reset() {
	*x = VxlanLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ligato_vpp_interfaces_interface_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VxlanLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VxlanLink) ProtoMessage() {}

func (x *VxlanLink) ProtoReflect() protoreflect.Message {
	mi := &file_ligato_vpp_interfaces_interface_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VxlanLink.ProtoReflect.Descriptor instead.
func (*VxlanLink) Descriptor() ([]byte, []int) {
	return file_ligato_vpp_interfaces_interface_proto_rawDescGZIP(), []int{3}
}

func (x *VxlanLink) GetSrcAddress() string {
	if x != nil {
		return x.SrcAddress
	}
	return ""
}

func (x *VxlanLink) GetDstAddress() string {
	if x != nil {
		return x.DstAddress
	}
	return ""
}

func (x *VxlanLink) GetVni() uint32 {
	if x != nil {
		return x.Vni
	}
	return 0
}

func (x *VxlanLink) GetMulticast() string {
	if x != nil {
		return x.Multicast
	}
	return ""
}

func (x *VxlanLink) GetGpe() *VxlanLink_Gpe {
	if x != nil {
		return x.Gpe
	}
	return nil
}

// AfpacketLink defines configuration for interface type: AF_PACKET
type AfpacketLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the host (Linux) interface to bind to.
	// This field is DEPRECATED. The logical reference <linux_interface> should be used instead.
	// Target Linux interface which is not configured by the same (or any) vpp-agent can be assigned
	// a logical name using a Linux interface configuration entry of type EXISTING
	// (see proto/ligato/linux/interfaces/interface.proto).
	// It is mandatory to define either <host_if_name> or <linux_interface>.
	//
	// Deprecated: Do not use.
	HostIfName string `protobuf:"bytes,1,opt,name=host_if_name,json=hostIfName,proto3" json:"host_if_name,omitempty"`
	// Logical name of the Linux interface to bind to.
	// This is an alternative (and preferred) interface reference to <host_if_name>.
	// It is mandatory to define either <host_if_name> or <linux_interface>.
	LinuxInterface string `protobuf:"bytes,2,opt,name=linux_interface,json=linuxInterface,proto3" json:"linux_interface,omitempty"`
}

func (x *AfpacketLink) Reset() {
	*x = AfpacketLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ligato_vpp_interfaces_interface_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AfpacketLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AfpacketLink) ProtoMessage() {}

func (x *AfpacketLink) ProtoReflect() protoreflect.Message {
	mi := &file_ligato_vpp_interfaces_interface_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AfpacketLink.ProtoReflect.Descriptor instead.
func (*AfpacketLink) Descriptor() ([]byte, []int) {
	return file_ligato_vpp_interfaces_interface_proto_rawDescGZIP(), []int{4}
}

// Deprecated: Do not use.
func (x *AfpacketLink) GetHostIfName() string {
	if x != nil {
		return x.HostIfName
	}
	return ""
}

func (x *AfpacketLink) GetLinuxInterface() string {
	if x != nil {
		return x.LinuxInterface
	}
	return ""
}

// TapLink defines configuration for interface type: TAP
type TapLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 1 / unset = use the original TAP interface; 2 = use a fast virtio-based TAP
	Version uint32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	// Name of the TAP interface in the host OS;
	// if empty, it will be auto-generated (suitable for combination with TAP_TO_VPP
	// interface from Linux ifplugin, because then this name is only temporary anyway)
	HostIfName string `protobuf:"bytes,2,opt,name=host_if_name,json=hostIfName,proto3" json:"host_if_name,omitempty"`
	// If TAP connects VPP with microservice, fill this parameter with the target
	// microservice name - should match with the namespace reference of the associated
	// TAP_TO_VPP interface (it is still moved to the namespace by Linux-ifplugin but
	// VPP-ifplugin needs to be aware of this dependency)
	ToMicroservice string `protobuf:"bytes,3,opt,name=to_microservice,json=toMicroservice,proto3" json:"to_microservice,omitempty"`
	// Rx ring buffer size; must be power of 2; default is 256; only for TAP v.2
	RxRingSize uint32 `protobuf:"varint,4,opt,name=rx_ring_size,json=rxRingSize,proto3" json:"rx_ring_size,omitempty"`
	// Tx ring buffer size; must be power of 2; default is 256; only for TAP v.2
	TxRingSize uint32 `protobuf:"varint,5,opt,name=tx_ring_size,json=txRingSize,proto3" json:"tx_ring_size,omitempty"`
	// EnableGso enables GSO mode for TAP interface.
	EnableGso bool `protobuf:"varint,6,opt,name=enable_gso,json=enableGso,proto3" json:"enable_gso,omitempty"`
	// EnableTunnel enables tunnel mode for TAP interface.
	EnableTunnel bool `protobuf:"varint,7,opt,name=enable_tunnel,json=enableTunnel,proto3" json:"enable_tunnel,omitempty"`
}

func (x *TapLink) Reset() {
	*x = TapLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ligato_vpp_interfaces_interface_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TapLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TapLink) ProtoMessage() {}

func (x *TapLink) ProtoReflect() protoreflect.Message {
	mi := &file_ligato_vpp_interfaces_interface_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TapLink.ProtoReflect.Descriptor instead.
func (*TapLink) Descriptor() ([]byte, []int) {
	return file_ligato_vpp_interfaces_interface_proto_rawDescGZIP(), []int{5}
}

func (x *TapLink) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *TapLink) GetHostIfName() string {
	if x != nil {
		return x.HostIfName
	}
	return ""
}

func (x *TapLink) GetToMicroservice() string {
	if x != nil {
		return x.ToMicroservice
	}
	return ""
}

func (x *TapLink) GetRxRingSize() uint32 {
	if x != nil {
		return x.RxRingSize
	}
	return 0
}

func (x *TapLink) GetTxRingSize() uint32 {
	if x != nil {
		return x.TxRingSize
	}
	return 0
}

func (x *TapLink) GetEnableGso() bool {
	if x != nil {
		return x.EnableGso
	}
	return false
}

func (x *TapLink) GetEnableTunnel() bool {
	if x != nil {
		return x.EnableTunnel
	}
	return false
}

// IPSecLink defines configuration for interface type: IPSEC_TUNNEL
type IPSecLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Extended sequence number
	Esn bool `protobuf:"varint,2,opt,name=esn,proto3" json:"esn,omitempty"`
	// Anti replay option
	AntiReplay bool `protobuf:"varint,3,opt,name=anti_replay,json=antiReplay,proto3" json:"anti_replay,omitempty"`
	// Local IP address
	LocalIp string `protobuf:"bytes,4,opt,name=local_ip,json=localIp,proto3" json:"local_ip,omitempty"`
	// Remote IP address
	RemoteIp string `protobuf:"bytes,5,opt,name=remote_ip,json=remoteIp,proto3" json:"remote_ip,omitempty"`
	// Local security parameter index
	LocalSpi uint32 `protobuf:"varint,6,opt,name=local_spi,json=localSpi,proto3" json:"local_spi,omitempty"`
	// Remote security parameter index
	RemoteSpi uint32 `protobuf:"varint,7,opt,name=remote_spi,json=remoteSpi,proto3" json:"remote_spi,omitempty"`
	// Cryptographic algorithm for encryption
	CryptoAlg       ipsec.CryptoAlg `protobuf:"varint,8,opt,name=crypto_alg,json=cryptoAlg,proto3,enum=ligato.vpp.ipsec.CryptoAlg" json:"crypto_alg,omitempty"`
	LocalCryptoKey  string          `protobuf:"bytes,9,opt,name=local_crypto_key,json=localCryptoKey,proto3" json:"local_crypto_key,omitempty"`
	RemoteCryptoKey string          `protobuf:"bytes,10,opt,name=remote_crypto_key,json=remoteCryptoKey,proto3" json:"remote_crypto_key,omitempty"`
	// Cryptographic algorithm for authentication
	IntegAlg       ipsec.IntegAlg `protobuf:"varint,11,opt,name=integ_alg,json=integAlg,proto3,enum=ligato.vpp.ipsec.IntegAlg" json:"integ_alg,omitempty"`
	LocalIntegKey  string         `protobuf:"bytes,12,opt,name=local_integ_key,json=localIntegKey,proto3" json:"local_integ_key,omitempty"`
	RemoteIntegKey string         `protobuf:"bytes,13,opt,name=remote_integ_key,json=remoteIntegKey,proto3" json:"remote_integ_key,omitempty"`
	EnableUdpEncap bool           `protobuf:"varint,14,opt,name=enable_udp_encap,json=enableUdpEncap,proto3" json:"enable_udp_encap,omitempty"`
}

func (x *IPSecLink) Reset() {
	*x = IPSecLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ligato_vpp_interfaces_interface_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPSecLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPSecLink) ProtoMessage() {}

func (x *IPSecLink) ProtoReflect() protoreflect.Message {
	mi := &file_ligato_vpp_interfaces_interface_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPSecLink.ProtoReflect.Descriptor instead.
func (*IPSecLink) Descriptor() ([]byte, []int) {
	return file_ligato_vpp_interfaces_interface_proto_rawDescGZIP(), []int{6}
}

func (x *IPSecLink) GetEsn() bool {
	if x != nil {
		return x.Esn
	}
	return false
}

func (x *IPSecLink) GetAntiReplay() bool {
	if x != nil {
		return x.AntiReplay
	}
	return false
}

func (x *IPSecLink) GetLocalIp() string {
	if x != nil {
		return x.LocalIp
	}
	return ""
}

func (x *IPSecLink) GetRemoteIp() string {
	if x != nil {
		return x.RemoteIp
	}
	return ""
}

func (x *IPSecLink) GetLocalSpi() uint32 {
	if x != nil {
		return x.LocalSpi
	}
	return 0
}

func (x *IPSecLink) GetRemoteSpi() uint32 {
	if x != nil {
		return x.RemoteSpi
	}
	return 0
}

func (x *IPSecLink) GetCryptoAlg() ipsec.CryptoAlg {
	if x != nil {
		return x.CryptoAlg
	}
	return ipsec.CryptoAlg_NONE_CRYPTO
}

func (x *IPSecLink) GetLocalCryptoKey() string {
	if x != nil {
		return x.LocalCryptoKey
	}
	return ""
}

func (x *IPSecLink) GetRemoteCryptoKey() string {
	if x != nil {
		return x.RemoteCryptoKey
	}
	return ""
}

func (x *IPSecLink) GetIntegAlg() ipsec.IntegAlg {
	if x != nil {
		return x.IntegAlg
	}
	return ipsec.IntegAlg_NONE_INTEG
}

func (x *IPSecLink) GetLocalIntegKey() string {
	if x != nil {
		return x.LocalIntegKey
	}
	return ""
}

func (x *IPSecLink) GetRemoteIntegKey() string {
	if x != nil {
		return x.RemoteIntegKey
	}
	return ""
}

func (x *IPSecLink) GetEnableUdpEncap() bool {
	if x != nil {
		return x.EnableUdpEncap
	}
	return false
}

// VmxNet3Link defines configuration for interface type: VMXNET3_INTERFACE
// PCI address (unsigned 32bit int) is derived from vmxnet3 interface name. It is expected that the interface
// name is in format "vmxnet3-<d>/<b>/<s>/<f>", where 'd' stands for domain (max ffff), 'b' is bus (max ff),
// 's' is slot (max 1f) and 'f is function' (max 7). All values are base 16
type VmxNet3Link struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Turn on elog
	EnableElog bool `protobuf:"varint,2,opt,name=enable_elog,json=enableElog,proto3" json:"enable_elog,omitempty"`
	// Receive queue size (default is 1024)
	RxqSize uint32 `protobuf:"varint,3,opt,name=rxq_size,json=rxqSize,proto3" json:"rxq_size,omitempty"`
	// Transmit queue size (default is 1024)
	TxqSize uint32 `protobuf:"varint,4,opt,name=txq_size,json=txqSize,proto3" json:"txq_size,omitempty"`
}

func (x *VmxNet3Link) Reset() {
	*x = VmxNet3Link{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ligato_vpp_interfaces_interface_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VmxNet3Link) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VmxNet3Link) ProtoMessage() {}

func (x *VmxNet3Link) ProtoReflect() protoreflect.Message {
	mi := &file_ligato_vpp_interfaces_interface_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VmxNet3Link.ProtoReflect.Descriptor instead.
func (*VmxNet3Link) Descriptor() ([]byte, []int) {
	return file_ligato_vpp_interfaces_interface_proto_rawDescGZIP(), []int{7}
}

func (x *VmxNet3Link) GetEnableElog() bool {
	if x != nil {
		return x.EnableElog
	}
	return false
}

func (x *VmxNet3Link) GetRxqSize() uint32 {
	if x != nil {
		return x.RxqSize
	}
	return 0
}

func (x *VmxNet3Link) GetTxqSize() uint32 {
	if x != nil {
		return x.TxqSize
	}
	return 0
}

// BondLink defines configuration for interface type: BOND_INTERFACE
type BondLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   uint32        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Mode BondLink_Mode `protobuf:"varint,3,opt,name=mode,proto3,enum=ligato.vpp.interfaces.BondLink_Mode" json:"mode,omitempty"`
	// Load balance is optional and valid only for XOR and LACP modes
	Lb               BondLink_LoadBalance        `protobuf:"varint,4,opt,name=lb,proto3,enum=ligato.vpp.interfaces.BondLink_LoadBalance" json:"lb,omitempty"`
	BondedInterfaces []*BondLink_BondedInterface `protobuf:"bytes,12,rep,name=bonded_interfaces,json=bondedInterfaces,proto3" json:"bonded_interfaces,omitempty"`
}

func (x *BondLink) Reset() {
	*x = BondLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ligato_vpp_interfaces_interface_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BondLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BondLink) ProtoMessage() {}

func (x *BondLink) ProtoReflect() protoreflect.Message {
	mi := &file_ligato_vpp_interfaces_interface_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BondLink.ProtoReflect.Descriptor instead.
func (*BondLink) Descriptor() ([]byte, []int) {
	return file_ligato_vpp_interfaces_interface_proto_rawDescGZIP(), []int{8}
}

func (x *BondLink) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BondLink) GetMode() BondLink_Mode {
	if x != nil {
		return x.Mode
	}
	return BondLink_UNKNOWN
}

func (x *BondLink) GetLb() BondLink_LoadBalance {
	if x != nil {
		return x.Lb
	}
	return BondLink_L2
}

func (x *BondLink) GetBondedInterfaces() []*BondLink_BondedInterface {
	if x != nil {
		return x.BondedInterfaces
	}
	return nil
}

type GreLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TunnelType GreLink_Type `protobuf:"varint,1,opt,name=tunnel_type,json=tunnelType,proto3,enum=ligato.vpp.interfaces.GreLink_Type" json:"tunnel_type,omitempty"`
	SrcAddr    string       `protobuf:"bytes,2,opt,name=src_addr,json=srcAddr,proto3" json:"src_addr,omitempty"`
	DstAddr    string       `protobuf:"bytes,3,opt,name=dst_addr,json=dstAddr,proto3" json:"dst_addr,omitempty"`
	OuterFibId uint32       `protobuf:"varint,4,opt,name=outer_fib_id,json=outerFibId,proto3" json:"outer_fib_id,omitempty"`
	SessionId  uint32       `protobuf:"varint,5,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
}

func (x *GreLink) Reset() {
	*x = GreLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ligato_vpp_interfaces_interface_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GreLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GreLink) ProtoMessage() {}

func (x *GreLink) ProtoReflect() protoreflect.Message {
	mi := &file_ligato_vpp_interfaces_interface_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GreLink.ProtoReflect.Descriptor instead.
func (*GreLink) Descriptor() ([]byte, []int) {
	return file_ligato_vpp_interfaces_interface_proto_rawDescGZIP(), []int{9}
}

func (x *GreLink) GetTunnelType() GreLink_Type {
	if x != nil {
		return x.TunnelType
	}
	return GreLink_UNKNOWN
}

func (x *GreLink) GetSrcAddr() string {
	if x != nil {
		return x.SrcAddr
	}
	return ""
}

func (x *GreLink) GetDstAddr() string {
	if x != nil {
		return x.DstAddr
	}
	return ""
}

func (x *GreLink) GetOuterFibId() uint32 {
	if x != nil {
		return x.OuterFibId
	}
	return 0
}

func (x *GreLink) GetSessionId() uint32 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

type GtpuLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Source VTEP address
	SrcAddr string `protobuf:"bytes,1,opt,name=src_addr,json=srcAddr,proto3" json:"src_addr,omitempty"`
	// Destination VTEP address
	DstAddr string `protobuf:"bytes,2,opt,name=dst_addr,json=dstAddr,proto3" json:"dst_addr,omitempty"`
	// Name of multicast interface
	Multicast string `protobuf:"bytes,3,opt,name=multicast,proto3" json:"multicast,omitempty"`
	// Tunnel endpoint identifier
	Teid uint32 `protobuf:"varint,4,opt,name=teid,proto3" json:"teid,omitempty"`
	// VRF id for the encapsulated packets
	EncapVrfId uint32 `protobuf:"varint,5,opt,name=encap_vrf_id,json=encapVrfId,proto3" json:"encap_vrf_id,omitempty"`
	// Next VPP node after decapsulation
	DecapNext GtpuLink_NextNode `protobuf:"varint,6,opt,name=decap_next,json=decapNext,proto3,enum=ligato.vpp.interfaces.GtpuLink_NextNode" json:"decap_next,omitempty"`
}

func (x *GtpuLink) Reset() {
	*x = GtpuLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ligato_vpp_interfaces_interface_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GtpuLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GtpuLink) ProtoMessage() {}

func (x *GtpuLink) ProtoReflect() protoreflect.Message {
	mi := &file_ligato_vpp_interfaces_interface_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GtpuLink.ProtoReflect.Descriptor instead.
func (*GtpuLink) Descriptor() ([]byte, []int) {
	return file_ligato_vpp_interfaces_interface_proto_rawDescGZIP(), []int{10}
}

func (x *GtpuLink) GetSrcAddr() string {
	if x != nil {
		return x.SrcAddr
	}
	return ""
}

func (x *GtpuLink) GetDstAddr() string {
	if x != nil {
		return x.DstAddr
	}
	return ""
}

func (x *GtpuLink) GetMulticast() string {
	if x != nil {
		return x.Multicast
	}
	return ""
}

func (x *GtpuLink) GetTeid() uint32 {
	if x != nil {
		return x.Teid
	}
	return 0
}

func (x *GtpuLink) GetEncapVrfId() uint32 {
	if x != nil {
		return x.EncapVrfId
	}
	return 0
}

func (x *GtpuLink) GetDecapNext() GtpuLink_NextNode {
	if x != nil {
		return x.DecapNext
	}
	return GtpuLink_DEFAULT
}

type IPIPLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Mode of the IPIP tunnel
	TunnelMode IPIPLink_Mode `protobuf:"varint,1,opt,name=tunnel_mode,json=tunnelMode,proto3,enum=ligato.vpp.interfaces.IPIPLink_Mode" json:"tunnel_mode,omitempty"`
	// Source VTEP IP address
	SrcAddr string `protobuf:"bytes,2,opt,name=src_addr,json=srcAddr,proto3" json:"src_addr,omitempty"`
	// Destination VTEP IP address
	DstAddr string `protobuf:"bytes,3,opt,name=dst_addr,json=dstAddr,proto3" json:"dst_addr,omitempty"`
}

func (x *IPIPLink) Reset() {
	*x = IPIPLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ligato_vpp_interfaces_interface_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPIPLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPIPLink) ProtoMessage() {}

func (x *IPIPLink) ProtoReflect() protoreflect.Message {
	mi := &file_ligato_vpp_interfaces_interface_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPIPLink.ProtoReflect.Descriptor instead.
func (*IPIPLink) Descriptor() ([]byte, []int) {
	return file_ligato_vpp_interfaces_interface_proto_rawDescGZIP(), []int{11}
}

func (x *IPIPLink) GetTunnelMode() IPIPLink_Mode {
	if x != nil {
		return x.TunnelMode
	}
	return IPIPLink_POINT_TO_POINT
}

func (x *IPIPLink) GetSrcAddr() string {
	if x != nil {
		return x.SrcAddr
	}
	return ""
}

func (x *IPIPLink) GetDstAddr() string {
	if x != nil {
		return x.DstAddr
	}
	return ""
}

// Ip6Nd is used to enable/disable IPv6 ND address autoconfiguration
// and setting up default routes
type Interface_IP6ND struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Enable IPv6 ND address autoconfiguration.
	AddressAutoconfig bool `protobuf:"varint,1,opt,name=address_autoconfig,json=addressAutoconfig,proto3" json:"address_autoconfig,omitempty"`
	// Enable installing default routes.
	InstallDefaultRoutes bool `protobuf:"varint,2,opt,name=install_default_routes,json=installDefaultRoutes,proto3" json:"install_default_routes,omitempty"`
}

func (x *Interface_IP6ND) Reset() {
	*x = Interface_IP6ND{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ligato_vpp_interfaces_interface_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interface_IP6ND) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interface_IP6ND) ProtoMessage() {}

func (x *Interface_IP6ND) ProtoReflect() protoreflect.Message {
	mi := &file_ligato_vpp_interfaces_interface_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interface_IP6ND.ProtoReflect.Descriptor instead.
func (*Interface_IP6ND) Descriptor() ([]byte, []int) {
	return file_ligato_vpp_interfaces_interface_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Interface_IP6ND) GetAddressAutoconfig() bool {
	if x != nil {
		return x.AddressAutoconfig
	}
	return false
}

func (x *Interface_IP6ND) GetInstallDefaultRoutes() bool {
	if x != nil {
		return x.InstallDefaultRoutes
	}
	return false
}

// Unnumbered is used for inheriting IP address from another interface.
type Interface_Unnumbered struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// InterfaceWithIp is the name of interface to inherit IP address from.
	InterfaceWithIp string `protobuf:"bytes,1,opt,name=interface_with_ip,json=interfaceWithIp,proto3" json:"interface_with_ip,omitempty"`
}

func (x *Interface_Unnumbered) Reset() {
	*x = Interface_Unnumbered{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ligato_vpp_interfaces_interface_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interface_Unnumbered) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interface_Unnumbered) ProtoMessage() {}

func (x *Interface_Unnumbered) ProtoReflect() protoreflect.Message {
	mi := &file_ligato_vpp_interfaces_interface_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interface_Unnumbered.ProtoReflect.Descriptor instead.
func (*Interface_Unnumbered) Descriptor() ([]byte, []int) {
	return file_ligato_vpp_interfaces_interface_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Interface_Unnumbered) GetInterfaceWithIp() string {
	if x != nil {
		return x.InterfaceWithIp
	}
	return ""
}

type Interface_RxMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Queue uint32                `protobuf:"varint,1,opt,name=queue,proto3" json:"queue,omitempty"`
	Mode  Interface_RxMode_Type `protobuf:"varint,2,opt,name=mode,proto3,enum=ligato.vpp.interfaces.Interface_RxMode_Type" json:"mode,omitempty"`
	// DefaultMode, if set to true, the <queue> field will be ignored
	// and the <mode> will be used as a default for all the queues.
	DefaultMode bool `protobuf:"varint,3,opt,name=default_mode,json=defaultMode,proto3" json:"default_mode,omitempty"`
}

func (x *Interface_RxMode) Reset() {
	*x = Interface_RxMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ligato_vpp_interfaces_interface_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interface_RxMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interface_RxMode) ProtoMessage() {}

func (x *Interface_RxMode) ProtoReflect() protoreflect.Message {
	mi := &file_ligato_vpp_interfaces_interface_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interface_RxMode.ProtoReflect.Descriptor instead.
func (*Interface_RxMode) Descriptor() ([]byte, []int) {
	return file_ligato_vpp_interfaces_interface_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Interface_RxMode) GetQueue() uint32 {
	if x != nil {
		return x.Queue
	}
	return 0
}

func (x *Interface_RxMode) GetMode() Interface_RxMode_Type {
	if x != nil {
		return x.Mode
	}
	return Interface_RxMode_UNKNOWN
}

func (x *Interface_RxMode) GetDefaultMode() bool {
	if x != nil {
		return x.DefaultMode
	}
	return false
}

type Interface_RxPlacement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Select from interval <0, number-of-queues)
	Queue uint32 `protobuf:"varint,1,opt,name=queue,proto3" json:"queue,omitempty"`
	// Select from interval <0, number-of-workers)
	Worker uint32 `protobuf:"varint,2,opt,name=worker,proto3" json:"worker,omitempty"`
	// Let the main thread to process the given queue
	//  - if enabled, value of <worker> is ignored
	MainThread bool `protobuf:"varint,3,opt,name=main_thread,json=mainThread,proto3" json:"main_thread,omitempty"`
}

func (x *Interface_RxPlacement) Reset() {
	*x = Interface_RxPlacement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ligato_vpp_interfaces_interface_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interface_RxPlacement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interface_RxPlacement) ProtoMessage() {}

func (x *Interface_RxPlacement) ProtoReflect() protoreflect.Message {
	mi := &file_ligato_vpp_interfaces_interface_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interface_RxPlacement.ProtoReflect.Descriptor instead.
func (*Interface_RxPlacement) Descriptor() ([]byte, []int) {
	return file_ligato_vpp_interfaces_interface_proto_rawDescGZIP(), []int{0, 3}
}

func (x *Interface_RxPlacement) GetQueue() uint32 {
	if x != nil {
		return x.Queue
	}
	return 0
}

func (x *Interface_RxPlacement) GetWorker() uint32 {
	if x != nil {
		return x.Worker
	}
	return 0
}

func (x *Interface_RxPlacement) GetMainThread() bool {
	if x != nil {
		return x.MainThread
	}
	return false
}

// Gpe (Generic Protocol Extension) allows encapsulating not only Ethernet frame payload.
type VxlanLink_Gpe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DecapVrfId uint32 `protobuf:"varint,1,opt,name=decap_vrf_id,json=decapVrfId,proto3" json:"decap_vrf_id,omitempty"`
	// Protocol defines encapsulated protocol
	Protocol VxlanLink_Gpe_Protocol `protobuf:"varint,2,opt,name=protocol,proto3,enum=ligato.vpp.interfaces.VxlanLink_Gpe_Protocol" json:"protocol,omitempty"`
}

func (x *VxlanLink_Gpe) Reset() {
	*x = VxlanLink_Gpe{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ligato_vpp_interfaces_interface_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VxlanLink_Gpe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VxlanLink_Gpe) ProtoMessage() {}

func (x *VxlanLink_Gpe) ProtoReflect() protoreflect.Message {
	mi := &file_ligato_vpp_interfaces_interface_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VxlanLink_Gpe.ProtoReflect.Descriptor instead.
func (*VxlanLink_Gpe) Descriptor() ([]byte, []int) {
	return file_ligato_vpp_interfaces_interface_proto_rawDescGZIP(), []int{3, 0}
}

func (x *VxlanLink_Gpe) GetDecapVrfId() uint32 {
	if x != nil {
		return x.DecapVrfId
	}
	return 0
}

func (x *VxlanLink_Gpe) GetProtocol() VxlanLink_Gpe_Protocol {
	if x != nil {
		return x.Protocol
	}
	return VxlanLink_Gpe_UNKNOWN
}

type BondLink_BondedInterface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	IsPassive     bool   `protobuf:"varint,2,opt,name=is_passive,json=isPassive,proto3" json:"is_passive,omitempty"`
	IsLongTimeout bool   `protobuf:"varint,3,opt,name=is_long_timeout,json=isLongTimeout,proto3" json:"is_long_timeout,omitempty"`
}

func (x *BondLink_BondedInterface) Reset() {
	*x = BondLink_BondedInterface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ligato_vpp_interfaces_interface_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BondLink_BondedInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BondLink_BondedInterface) ProtoMessage() {}

func (x *BondLink_BondedInterface) ProtoReflect() protoreflect.Message {
	mi := &file_ligato_vpp_interfaces_interface_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BondLink_BondedInterface.ProtoReflect.Descriptor instead.
func (*BondLink_BondedInterface) Descriptor() ([]byte, []int) {
	return file_ligato_vpp_interfaces_interface_proto_rawDescGZIP(), []int{8, 0}
}

func (x *BondLink_BondedInterface) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BondLink_BondedInterface) GetIsPassive() bool {
	if x != nil {
		return x.IsPassive
	}
	return false
}

func (x *BondLink_BondedInterface) GetIsLongTimeout() bool {
	if x != nil {
		return x.IsLongTimeout
	}
	return false
}

var File_ligato_vpp_interfaces_interface_proto protoreflect.FileDescriptor

var file_ligato_vpp_interfaces_interface_proto_rawDesc = []byte{
	0x0a, 0x25, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2f, 0x76, 0x70, 0x70, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2e,
	0x76, 0x70, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x1a, 0x1c,
	0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2f, 0x76, 0x70, 0x70, 0x2f, 0x69, 0x70, 0x73, 0x65, 0x63,
	0x2f, 0x69, 0x70, 0x73, 0x65, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfe, 0x0e, 0x0a,
	0x09, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x39,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6c,
	0x69, 0x67, 0x61, 0x74, 0x6f, 0x2e, 0x76, 0x70, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68, 0x79, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x79, 0x73, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x70,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x72, 0x66,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x76, 0x72, 0x66, 0x12, 0x26, 0x0a, 0x0f, 0x73,
	0x65, 0x74, 0x5f, 0x64, 0x68, 0x63, 0x70, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x65, 0x74, 0x44, 0x68, 0x63, 0x70, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x06, 0x69, 0x70, 0x36, 0x5f, 0x6e, 0x64, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2e, 0x76, 0x70, 0x70,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x50, 0x36, 0x4e, 0x44, 0x52, 0x05, 0x69, 0x70, 0x36,
	0x4e, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x74, 0x75, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x6d, 0x74, 0x75, 0x12, 0x4b, 0x0a, 0x0a, 0x75, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6c, 0x69, 0x67, 0x61, 0x74,
	0x6f, 0x2e, 0x76, 0x70, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x55, 0x6e, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x65, 0x64, 0x52, 0x0a, 0x75, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65,
	0x64, 0x12, 0x42, 0x0a, 0x08, 0x72, 0x78, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x0c, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2e, 0x76, 0x70, 0x70,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x78, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x78,
	0x4d, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x51, 0x0a, 0x0d, 0x72, 0x78, 0x5f, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6c,
	0x69, 0x67, 0x61, 0x74, 0x6f, 0x2e, 0x76, 0x70, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x52,
	0x78, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0c, 0x72, 0x78, 0x50, 0x6c,
	0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x37, 0x0a, 0x03, 0x73, 0x75, 0x62, 0x18,
	0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2e, 0x76,
	0x70, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75,
	0x62, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x48, 0x00, 0x52, 0x03, 0x73, 0x75,
	0x62, 0x12, 0x38, 0x0a, 0x05, 0x6d, 0x65, 0x6d, 0x69, 0x66, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2e, 0x76, 0x70, 0x70, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x69, 0x66, 0x4c, 0x69,
	0x6e, 0x6b, 0x48, 0x00, 0x52, 0x05, 0x6d, 0x65, 0x6d, 0x69, 0x66, 0x12, 0x41, 0x0a, 0x08, 0x61,
	0x66, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2e, 0x76, 0x70, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x41, 0x66, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x69,
	0x6e, 0x6b, 0x48, 0x00, 0x52, 0x08, 0x61, 0x66, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x32,
	0x0a, 0x03, 0x74, 0x61, 0x70, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x69,
	0x67, 0x61, 0x74, 0x6f, 0x2e, 0x76, 0x70, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x54, 0x61, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x48, 0x00, 0x52, 0x03, 0x74,
	0x61, 0x70, 0x12, 0x38, 0x0a, 0x05, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x18, 0x68, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2e, 0x76, 0x70, 0x70, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x56, 0x78, 0x6c, 0x61, 0x6e, 0x4c,
	0x69, 0x6e, 0x6b, 0x48, 0x00, 0x52, 0x05, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x12, 0x3c, 0x0a, 0x05,
	0x69, 0x70, 0x73, 0x65, 0x63, 0x18, 0x69, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6c, 0x69,
	0x67, 0x61, 0x74, 0x6f, 0x2e, 0x76, 0x70, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x50, 0x53, 0x65, 0x63, 0x4c, 0x69, 0x6e, 0x6b, 0x42, 0x02, 0x18,
	0x01, 0x48, 0x00, 0x52, 0x05, 0x69, 0x70, 0x73, 0x65, 0x63, 0x12, 0x3f, 0x0a, 0x08, 0x76, 0x6d,
	0x78, 0x5f, 0x6e, 0x65, 0x74, 0x33, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6c,
	0x69, 0x67, 0x61, 0x74, 0x6f, 0x2e, 0x76, 0x70, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x56, 0x6d, 0x78, 0x4e, 0x65, 0x74, 0x33, 0x4c, 0x69, 0x6e, 0x6b,
	0x48, 0x00, 0x52, 0x07, 0x76, 0x6d, 0x78, 0x4e, 0x65, 0x74, 0x33, 0x12, 0x35, 0x0a, 0x04, 0x62,
	0x6f, 0x6e, 0x64, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x69, 0x67, 0x61,
	0x74, 0x6f, 0x2e, 0x76, 0x70, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x42, 0x6f, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x48, 0x00, 0x52, 0x04, 0x62, 0x6f,
	0x6e, 0x64, 0x12, 0x32, 0x0a, 0x03, 0x67, 0x72, 0x65, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2e, 0x76, 0x70, 0x70, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x72, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x48,
	0x00, 0x52, 0x03, 0x67, 0x72, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x67, 0x74, 0x70, 0x75, 0x18, 0x6d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2e, 0x76, 0x70,
	0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x74, 0x70,
	0x75, 0x4c, 0x69, 0x6e, 0x6b, 0x48, 0x00, 0x52, 0x04, 0x67, 0x74, 0x70, 0x75, 0x12, 0x35, 0x0a,
	0x04, 0x69, 0x70, 0x69, 0x70, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x69,
	0x67, 0x61, 0x74, 0x6f, 0x2e, 0x76, 0x70, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x50, 0x49, 0x50, 0x4c, 0x69, 0x6e, 0x6b, 0x48, 0x00, 0x52, 0x04,
	0x69, 0x70, 0x69, 0x70, 0x1a, 0x6c, 0x0a, 0x05, 0x49, 0x50, 0x36, 0x4e, 0x44, 0x12, 0x2d, 0x0a,
	0x12, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x34, 0x0a, 0x16,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x1a, 0x38, 0x0a, 0x0a, 0x55, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64,
	0x12, 0x2a, 0x0a, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x77, 0x69,
	0x74, 0x68, 0x5f, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x57, 0x69, 0x74, 0x68, 0x49, 0x70, 0x1a, 0xcf, 0x01, 0x0a,
	0x06, 0x52, 0x78, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x12, 0x40, 0x0a,
	0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x6c, 0x69,
	0x67, 0x61, 0x74, 0x6f, 0x2e, 0x76, 0x70, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x78,
	0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x22, 0x4a, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x4f, 0x4c, 0x4c, 0x49,
	0x4e, 0x47, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x52, 0x55, 0x50,
	0x54, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x44, 0x41, 0x50, 0x54, 0x49, 0x56, 0x45, 0x10,
	0x03, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x04, 0x1a, 0x5c,
	0x0a, 0x0b, 0x52, 0x78, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x6d,
	0x61, 0x69, 0x6e, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x22, 0xf6, 0x01, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e,
	0x45, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x55, 0x42,
	0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11,
	0x53, 0x4f, 0x46, 0x54, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x4c, 0x4f, 0x4f, 0x50, 0x42, 0x41, 0x43,
	0x4b, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x50, 0x44, 0x4b, 0x10, 0x03, 0x12, 0x09, 0x0a,
	0x05, 0x4d, 0x45, 0x4d, 0x49, 0x46, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x41, 0x50, 0x10,
	0x05, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x46, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x10, 0x06,
	0x12, 0x10, 0x0a, 0x0c, 0x56, 0x58, 0x4c, 0x41, 0x4e, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c,
	0x10, 0x07, 0x12, 0x14, 0x0a, 0x0c, 0x49, 0x50, 0x53, 0x45, 0x43, 0x5f, 0x54, 0x55, 0x4e, 0x4e,
	0x45, 0x4c, 0x10, 0x08, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x56, 0x4d, 0x58, 0x4e,
	0x45, 0x54, 0x33, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x10, 0x09, 0x12,
	0x12, 0x0a, 0x0e, 0x42, 0x4f, 0x4e, 0x44, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43,
	0x45, 0x10, 0x0a, 0x12, 0x0e, 0x0a, 0x0a, 0x47, 0x52, 0x45, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45,
	0x4c, 0x10, 0x0b, 0x12, 0x0f, 0x0a, 0x0b, 0x47, 0x54, 0x50, 0x55, 0x5f, 0x54, 0x55, 0x4e, 0x4e,
	0x45, 0x4c, 0x10, 0x0c, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x50, 0x49, 0x50, 0x5f, 0x54, 0x55, 0x4e,
	0x4e, 0x45, 0x4c, 0x10, 0x0d, 0x42, 0x06, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x22, 0xfa, 0x02,
	0x0a, 0x0c, 0x53, 0x75, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x15, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x73, 0x75, 0x62, 0x49, 0x64, 0x12, 0x59, 0x0a, 0x0d, 0x74, 0x61, 0x67, 0x5f, 0x72, 0x77,
	0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e,
	0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2e, 0x76, 0x70, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x54, 0x61, 0x67, 0x52, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x74, 0x61, 0x67, 0x52, 0x77, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x64, 0x6f, 0x74, 0x31, 0x71, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x70, 0x75, 0x73, 0x68, 0x44, 0x6f, 0x74, 0x31, 0x71,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x31, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x74, 0x61, 0x67, 0x31, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x32, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x74, 0x61, 0x67, 0x32, 0x22, 0x8f, 0x01, 0x0a, 0x11, 0x54, 0x61, 0x67,
	0x52, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x0c,
	0x0a, 0x08, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05,
	0x50, 0x55, 0x53, 0x48, 0x31, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x55, 0x53, 0x48, 0x32,
	0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x4f, 0x50, 0x31, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04,
	0x50, 0x4f, 0x50, 0x32, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x4c,
	0x41, 0x54, 0x45, 0x31, 0x31, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x4c, 0x41, 0x54, 0x45, 0x31, 0x32, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x4c, 0x41, 0x54, 0x45, 0x32, 0x31, 0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x4c, 0x41, 0x54, 0x45, 0x32, 0x32, 0x10, 0x08, 0x22, 0xe0, 0x02, 0x0a, 0x09, 0x4d,
	0x65, 0x6d, 0x69, 0x66, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x3e, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2e,
	0x76, 0x70, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x4d,
	0x65, 0x6d, 0x69, 0x66, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x4d, 0x65, 0x6d, 0x69, 0x66, 0x4d, 0x6f,
	0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x27, 0x0a, 0x0f, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x6f, 0x63, 0x6b, 0x65,
	0x74, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x72, 0x78, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x72, 0x78, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x78, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x74, 0x78, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x22, 0x32, 0x0a, 0x09, 0x4d, 0x65, 0x6d,
	0x69, 0x66, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e,
	0x45, 0x54, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x49, 0x50, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b,
	0x50, 0x55, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x02, 0x22, 0xec, 0x02,
	0x0a, 0x09, 0x56, 0x78, 0x6c, 0x61, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x72, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x72, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x64, 0x73, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x64, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a,
	0x03, 0x76, 0x6e, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x76, 0x6e, 0x69, 0x12,
	0x1c, 0x0a, 0x09, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x12, 0x36, 0x0a,
	0x03, 0x67, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6c, 0x69, 0x67,
	0x61, 0x74, 0x6f, 0x2e, 0x76, 0x70, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x2e, 0x56, 0x78, 0x6c, 0x61, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x47, 0x70, 0x65,
	0x52, 0x03, 0x67, 0x70, 0x65, 0x1a, 0xb4, 0x01, 0x0a, 0x03, 0x47, 0x70, 0x65, 0x12, 0x20, 0x0a,
	0x0c, 0x64, 0x65, 0x63, 0x61, 0x70, 0x5f, 0x76, 0x72, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x65, 0x63, 0x61, 0x70, 0x56, 0x72, 0x66, 0x49, 0x64, 0x12,
	0x49, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2d, 0x2e, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2e, 0x76, 0x70, 0x70, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x56, 0x78, 0x6c, 0x61, 0x6e, 0x4c,
	0x69, 0x6e, 0x6b, 0x2e, 0x47, 0x70, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x22, 0x40, 0x0a, 0x08, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x50, 0x34, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03,
	0x49, 0x50, 0x36, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45,
	0x54, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x53, 0x48, 0x10, 0x04, 0x22, 0x5d, 0x0a, 0x0c,
	0x41, 0x66, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x24, 0x0a, 0x0c,
	0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x66, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x69, 0x6e,
	0x75, 0x78, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x22, 0xf6, 0x01, 0x0a, 0x07,
	0x54, 0x61, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x20, 0x0a, 0x0c, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x66, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x66, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x6f, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x6f,
	0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0c,
	0x72, 0x78, 0x5f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x72, 0x78, 0x52, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x20,
	0x0a, 0x0c, 0x74, 0x78, 0x5f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x78, 0x52, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x67, 0x73, 0x6f, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x73, 0x6f, 0x12,
	0x23, 0x0a, 0x0d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x22, 0xf9, 0x03, 0x0a, 0x09, 0x49, 0x50, 0x53, 0x65, 0x63, 0x4c, 0x69,
	0x6e, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x73, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x03, 0x65, 0x73, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x6e, 0x74, 0x69, 0x5f, 0x72, 0x65, 0x70,
	0x6c, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x61, 0x6e, 0x74, 0x69, 0x52,
	0x65, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x69,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x70,
	0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x70, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x70, 0x12, 0x1b, 0x0a,
	0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x70, 0x69, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x70, 0x69, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x73, 0x70, 0x69, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x70, 0x69, 0x12, 0x3a, 0x0a, 0x0a, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x5f, 0x61, 0x6c, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e,
	0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2e, 0x76, 0x70, 0x70, 0x2e, 0x69, 0x70, 0x73, 0x65, 0x63,
	0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x6c, 0x67, 0x52, 0x09, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x41, 0x6c, 0x67, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x4b, 0x65, 0x79, 0x12,
	0x2a, 0x0a, 0x11, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x4b, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x09, 0x69,
	0x6e, 0x74, 0x65, 0x67, 0x5f, 0x61, 0x6c, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a,
	0x2e, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2e, 0x76, 0x70, 0x70, 0x2e, 0x69, 0x70, 0x73, 0x65,
	0x63, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x41, 0x6c, 0x67, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x41, 0x6c, 0x67, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x4b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x10,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x6e,
	0x74, 0x65, 0x67, 0x4b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x75, 0x64, 0x70, 0x5f, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x64, 0x70, 0x45, 0x6e, 0x63, 0x61, 0x70,
	0x22, 0x64, 0x0a, 0x0b, 0x56, 0x6d, 0x78, 0x4e, 0x65, 0x74, 0x33, 0x4c, 0x69, 0x6e, 0x6b, 0x12,
	0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x6c, 0x6f, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6c, 0x6f, 0x67,
	0x12, 0x19, 0x0a, 0x08, 0x72, 0x78, 0x71, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x72, 0x78, 0x71, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74,
	0x78, 0x71, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74,
	0x78, 0x71, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xf9, 0x03, 0x0a, 0x08, 0x42, 0x6f, 0x6e, 0x64, 0x4c,
	0x69, 0x6e, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x24, 0x2e, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2e, 0x76, 0x70, 0x70, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x42, 0x6f, 0x6e, 0x64, 0x4c, 0x69,
	0x6e, 0x6b, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x3b, 0x0a,
	0x02, 0x6c, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x6c, 0x69, 0x67, 0x61,
	0x74, 0x6f, 0x2e, 0x76, 0x70, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x42, 0x6f, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x02, 0x6c, 0x62, 0x12, 0x5c, 0x0a, 0x11, 0x62, 0x6f,
	0x6e, 0x64, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2e, 0x76,
	0x70, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x42, 0x6f,
	0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x42, 0x6f, 0x6e, 0x64, 0x65, 0x64, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x10, 0x62, 0x6f, 0x6e, 0x64, 0x65, 0x64, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x1a, 0x6c, 0x0a, 0x0f, 0x42, 0x6f, 0x6e, 0x64,
	0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x12, 0x26,
	0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x4c, 0x6f, 0x6e, 0x67, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x59, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0b,
	0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x52,
	0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x52, 0x4f, 0x42, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x55, 0x50, 0x10, 0x02, 0x12,
	0x07, 0x0a, 0x03, 0x58, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x52, 0x4f, 0x41,
	0x44, 0x43, 0x41, 0x53, 0x54, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x41, 0x43, 0x50, 0x10,
	0x05, 0x22, 0x3f, 0x0a, 0x0b, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x06, 0x0a, 0x02, 0x4c, 0x32, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x33, 0x34, 0x10,
	0x01, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x32, 0x33, 0x10, 0x02, 0x12, 0x06, 0x0a, 0x02, 0x52, 0x52,
	0x10, 0x03, 0x12, 0x06, 0x0a, 0x02, 0x42, 0x43, 0x10, 0x04, 0x12, 0x06, 0x0a, 0x02, 0x41, 0x42,
	0x10, 0x05, 0x22, 0xf8, 0x01, 0x0a, 0x07, 0x47, 0x72, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x44,
	0x0a, 0x0b, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2e, 0x76, 0x70, 0x70,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x72, 0x65, 0x4c,
	0x69, 0x6e, 0x6b, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x72, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x72, 0x63, 0x41, 0x64, 0x64, 0x72, 0x12,
	0x19, 0x0a, 0x08, 0x64, 0x73, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x64, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x12, 0x20, 0x0a, 0x0c, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x46, 0x69, 0x62, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x30, 0x0a, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x06, 0x0a, 0x02, 0x4c, 0x33, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x45, 0x42, 0x10,
	0x02, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x52, 0x53, 0x50, 0x41, 0x4e, 0x10, 0x03, 0x22, 0x90, 0x02,
	0x0a, 0x08, 0x47, 0x74, 0x70, 0x75, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x72,
	0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x72,
	0x63, 0x41, 0x64, 0x64, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x73, 0x74, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72,
	0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x65, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x65,
	0x69, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x5f, 0x76, 0x72, 0x66, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x56,
	0x72, 0x66, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x0a, 0x64, 0x65, 0x63, 0x61, 0x70, 0x5f, 0x6e, 0x65,
	0x78, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6c, 0x69, 0x67, 0x61, 0x74,
	0x6f, 0x2e, 0x76, 0x70, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x2e, 0x47, 0x74, 0x70, 0x75, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x09, 0x64, 0x65, 0x63, 0x61, 0x70, 0x4e, 0x65, 0x78, 0x74, 0x22, 0x31, 0x0a,
	0x08, 0x4e, 0x65, 0x78, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x46,
	0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x4c, 0x32, 0x10, 0x01, 0x12, 0x07,
	0x0a, 0x03, 0x49, 0x50, 0x34, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x50, 0x36, 0x10, 0x03,
	0x22, 0xbc, 0x01, 0x0a, 0x08, 0x49, 0x50, 0x49, 0x50, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x45, 0x0a,
	0x0b, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2e, 0x76, 0x70, 0x70, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x50, 0x49, 0x50, 0x4c,
	0x69, 0x6e, 0x6b, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x72, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x72, 0x63, 0x41, 0x64, 0x64, 0x72, 0x12,
	0x19, 0x0a, 0x08, 0x64, 0x73, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x64, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x22, 0x33, 0x0a, 0x04, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x54, 0x4f, 0x5f, 0x50,
	0x4f, 0x49, 0x4e, 0x54, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f,
	0x54, 0x4f, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0x01, 0x42,
	0x46, 0x5a, 0x44, 0x67, 0x6f, 0x2e, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2e, 0x69, 0x6f, 0x2f,
	0x76, 0x70, 0x70, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x33, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2f, 0x76, 0x70, 0x70, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x3b, 0x76, 0x70, 0x70, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ligato_vpp_interfaces_interface_proto_rawDescOnce sync.Once
	file_ligato_vpp_interfaces_interface_proto_rawDescData = file_ligato_vpp_interfaces_interface_proto_rawDesc
)

func file_ligato_vpp_interfaces_interface_proto_rawDescGZIP() []byte {
	file_ligato_vpp_interfaces_interface_proto_rawDescOnce.Do(func() {
		file_ligato_vpp_interfaces_interface_proto_rawDescData = protoimpl.X.CompressGZIP(file_ligato_vpp_interfaces_interface_proto_rawDescData)
	})
	return file_ligato_vpp_interfaces_interface_proto_rawDescData
}

var file_ligato_vpp_interfaces_interface_proto_enumTypes = make([]protoimpl.EnumInfo, 10)
var file_ligato_vpp_interfaces_interface_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_ligato_vpp_interfaces_interface_proto_goTypes = []interface{}{
	(Interface_Type)(0),                 // 0: ligato.vpp.interfaces.Interface.Type
	(Interface_RxMode_Type)(0),          // 1: ligato.vpp.interfaces.Interface.RxMode.Type
	(SubInterface_TagRewriteOptions)(0), // 2: ligato.vpp.interfaces.SubInterface.TagRewriteOptions
	(MemifLink_MemifMode)(0),            // 3: ligato.vpp.interfaces.MemifLink.MemifMode
	(VxlanLink_Gpe_Protocol)(0),         // 4: ligato.vpp.interfaces.VxlanLink.Gpe.Protocol
	(BondLink_Mode)(0),                  // 5: ligato.vpp.interfaces.BondLink.Mode
	(BondLink_LoadBalance)(0),           // 6: ligato.vpp.interfaces.BondLink.LoadBalance
	(GreLink_Type)(0),                   // 7: ligato.vpp.interfaces.GreLink.Type
	(GtpuLink_NextNode)(0),              // 8: ligato.vpp.interfaces.GtpuLink.NextNode
	(IPIPLink_Mode)(0),                  // 9: ligato.vpp.interfaces.IPIPLink.Mode
	(*Interface)(nil),                   // 10: ligato.vpp.interfaces.Interface
	(*SubInterface)(nil),                // 11: ligato.vpp.interfaces.SubInterface
	(*MemifLink)(nil),                   // 12: ligato.vpp.interfaces.MemifLink
	(*VxlanLink)(nil),                   // 13: ligato.vpp.interfaces.VxlanLink
	(*AfpacketLink)(nil),                // 14: ligato.vpp.interfaces.AfpacketLink
	(*TapLink)(nil),                     // 15: ligato.vpp.interfaces.TapLink
	(*IPSecLink)(nil),                   // 16: ligato.vpp.interfaces.IPSecLink
	(*VmxNet3Link)(nil),                 // 17: ligato.vpp.interfaces.VmxNet3Link
	(*BondLink)(nil),                    // 18: ligato.vpp.interfaces.BondLink
	(*GreLink)(nil),                     // 19: ligato.vpp.interfaces.GreLink
	(*GtpuLink)(nil),                    // 20: ligato.vpp.interfaces.GtpuLink
	(*IPIPLink)(nil),                    // 21: ligato.vpp.interfaces.IPIPLink
	(*Interface_IP6ND)(nil),             // 22: ligato.vpp.interfaces.Interface.IP6ND
	(*Interface_Unnumbered)(nil),        // 23: ligato.vpp.interfaces.Interface.Unnumbered
	(*Interface_RxMode)(nil),            // 24: ligato.vpp.interfaces.Interface.RxMode
	(*Interface_RxPlacement)(nil),       // 25: ligato.vpp.interfaces.Interface.RxPlacement
	(*VxlanLink_Gpe)(nil),               // 26: ligato.vpp.interfaces.VxlanLink.Gpe
	(*BondLink_BondedInterface)(nil),    // 27: ligato.vpp.interfaces.BondLink.BondedInterface
	(ipsec.CryptoAlg)(0),                // 28: ligato.vpp.ipsec.CryptoAlg
	(ipsec.IntegAlg)(0),                 // 29: ligato.vpp.ipsec.IntegAlg
}
var file_ligato_vpp_interfaces_interface_proto_depIdxs = []int32{
	0,  // 0: ligato.vpp.interfaces.Interface.type:type_name -> ligato.vpp.interfaces.Interface.Type
	22, // 1: ligato.vpp.interfaces.Interface.ip6_nd:type_name -> ligato.vpp.interfaces.Interface.IP6ND
	23, // 2: ligato.vpp.interfaces.Interface.unnumbered:type_name -> ligato.vpp.interfaces.Interface.Unnumbered
	24, // 3: ligato.vpp.interfaces.Interface.rx_modes:type_name -> ligato.vpp.interfaces.Interface.RxMode
	25, // 4: ligato.vpp.interfaces.Interface.rx_placements:type_name -> ligato.vpp.interfaces.Interface.RxPlacement
	11, // 5: ligato.vpp.interfaces.Interface.sub:type_name -> ligato.vpp.interfaces.SubInterface
	12, // 6: ligato.vpp.interfaces.Interface.memif:type_name -> ligato.vpp.interfaces.MemifLink
	14, // 7: ligato.vpp.interfaces.Interface.afpacket:type_name -> ligato.vpp.interfaces.AfpacketLink
	15, // 8: ligato.vpp.interfaces.Interface.tap:type_name -> ligato.vpp.interfaces.TapLink
	13, // 9: ligato.vpp.interfaces.Interface.vxlan:type_name -> ligato.vpp.interfaces.VxlanLink
	16, // 10: ligato.vpp.interfaces.Interface.ipsec:type_name -> ligato.vpp.interfaces.IPSecLink
	17, // 11: ligato.vpp.interfaces.Interface.vmx_net3:type_name -> ligato.vpp.interfaces.VmxNet3Link
	18, // 12: ligato.vpp.interfaces.Interface.bond:type_name -> ligato.vpp.interfaces.BondLink
	19, // 13: ligato.vpp.interfaces.Interface.gre:type_name -> ligato.vpp.interfaces.GreLink
	20, // 14: ligato.vpp.interfaces.Interface.gtpu:type_name -> ligato.vpp.interfaces.GtpuLink
	21, // 15: ligato.vpp.interfaces.Interface.ipip:type_name -> ligato.vpp.interfaces.IPIPLink
	2,  // 16: ligato.vpp.interfaces.SubInterface.tag_rw_option:type_name -> ligato.vpp.interfaces.SubInterface.TagRewriteOptions
	3,  // 17: ligato.vpp.interfaces.MemifLink.mode:type_name -> ligato.vpp.interfaces.MemifLink.MemifMode
	26, // 18: ligato.vpp.interfaces.VxlanLink.gpe:type_name -> ligato.vpp.interfaces.VxlanLink.Gpe
	28, // 19: ligato.vpp.interfaces.IPSecLink.crypto_alg:type_name -> ligato.vpp.ipsec.CryptoAlg
	29, // 20: ligato.vpp.interfaces.IPSecLink.integ_alg:type_name -> ligato.vpp.ipsec.IntegAlg
	5,  // 21: ligato.vpp.interfaces.BondLink.mode:type_name -> ligato.vpp.interfaces.BondLink.Mode
	6,  // 22: ligato.vpp.interfaces.BondLink.lb:type_name -> ligato.vpp.interfaces.BondLink.LoadBalance
	27, // 23: ligato.vpp.interfaces.BondLink.bonded_interfaces:type_name -> ligato.vpp.interfaces.BondLink.BondedInterface
	7,  // 24: ligato.vpp.interfaces.GreLink.tunnel_type:type_name -> ligato.vpp.interfaces.GreLink.Type
	8,  // 25: ligato.vpp.interfaces.GtpuLink.decap_next:type_name -> ligato.vpp.interfaces.GtpuLink.NextNode
	9,  // 26: ligato.vpp.interfaces.IPIPLink.tunnel_mode:type_name -> ligato.vpp.interfaces.IPIPLink.Mode
	1,  // 27: ligato.vpp.interfaces.Interface.RxMode.mode:type_name -> ligato.vpp.interfaces.Interface.RxMode.Type
	4,  // 28: ligato.vpp.interfaces.VxlanLink.Gpe.protocol:type_name -> ligato.vpp.interfaces.VxlanLink.Gpe.Protocol
	29, // [29:29] is the sub-list for method output_type
	29, // [29:29] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_ligato_vpp_interfaces_interface_proto_init() }
func file_ligato_vpp_interfaces_interface_proto_init() {
	if File_ligato_vpp_interfaces_interface_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ligato_vpp_interfaces_interface_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ligato_vpp_interfaces_interface_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubInterface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ligato_vpp_interfaces_interface_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemifLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ligato_vpp_interfaces_interface_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VxlanLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ligato_vpp_interfaces_interface_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AfpacketLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ligato_vpp_interfaces_interface_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TapLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ligato_vpp_interfaces_interface_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPSecLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ligato_vpp_interfaces_interface_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VmxNet3Link); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ligato_vpp_interfaces_interface_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BondLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ligato_vpp_interfaces_interface_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GreLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ligato_vpp_interfaces_interface_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GtpuLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ligato_vpp_interfaces_interface_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPIPLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ligato_vpp_interfaces_interface_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interface_IP6ND); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ligato_vpp_interfaces_interface_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interface_Unnumbered); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ligato_vpp_interfaces_interface_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interface_RxMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ligato_vpp_interfaces_interface_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interface_RxPlacement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ligato_vpp_interfaces_interface_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VxlanLink_Gpe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ligato_vpp_interfaces_interface_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BondLink_BondedInterface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_ligato_vpp_interfaces_interface_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Interface_Sub)(nil),
		(*Interface_Memif)(nil),
		(*Interface_Afpacket)(nil),
		(*Interface_Tap)(nil),
		(*Interface_Vxlan)(nil),
		(*Interface_Ipsec)(nil),
		(*Interface_VmxNet3)(nil),
		(*Interface_Bond)(nil),
		(*Interface_Gre)(nil),
		(*Interface_Gtpu)(nil),
		(*Interface_Ipip)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ligato_vpp_interfaces_interface_proto_rawDesc,
			NumEnums:      10,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ligato_vpp_interfaces_interface_proto_goTypes,
		DependencyIndexes: file_ligato_vpp_interfaces_interface_proto_depIdxs,
		EnumInfos:         file_ligato_vpp_interfaces_interface_proto_enumTypes,
		MessageInfos:      file_ligato_vpp_interfaces_interface_proto_msgTypes,
	}.Build()
	File_ligato_vpp_interfaces_interface_proto = out.File
	file_ligato_vpp_interfaces_interface_proto_rawDesc = nil
	file_ligato_vpp_interfaces_interface_proto_goTypes = nil
	file_ligato_vpp_interfaces_interface_proto_depIdxs = nil
}
