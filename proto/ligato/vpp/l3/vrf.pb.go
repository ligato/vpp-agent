// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.4
// source: ligato/vpp/l3/vrf.proto

package vpp_l3

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Protocol define IP protocol of VRF table.
type VrfTable_Protocol int32

const (
	VrfTable_IPV4 VrfTable_Protocol = 0
	VrfTable_IPV6 VrfTable_Protocol = 1
)

// Enum value maps for VrfTable_Protocol.
var (
	VrfTable_Protocol_name = map[int32]string{
		0: "IPV4",
		1: "IPV6",
	}
	VrfTable_Protocol_value = map[string]int32{
		"IPV4": 0,
		"IPV6": 1,
	}
)

func (x VrfTable_Protocol) Enum() *VrfTable_Protocol {
	p := new(VrfTable_Protocol)
	*p = x
	return p
}

func (x VrfTable_Protocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VrfTable_Protocol) Descriptor() protoreflect.EnumDescriptor {
	return file_ligato_vpp_l3_vrf_proto_enumTypes[0].Descriptor()
}

func (VrfTable_Protocol) Type() protoreflect.EnumType {
	return &file_ligato_vpp_l3_vrf_proto_enumTypes[0]
}

func (x VrfTable_Protocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VrfTable_Protocol.Descriptor instead.
func (VrfTable_Protocol) EnumDescriptor() ([]byte, []int) {
	return file_ligato_vpp_l3_vrf_proto_rawDescGZIP(), []int{0, 0}
}

type VrfTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID is mandatory identification for VRF table.
	// NOTE: do not confuse with fib index (shown by some VPP CLIs),
	// which is VPP's internal offset in the vector of allocated tables.
	Id       uint32            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Protocol VrfTable_Protocol `protobuf:"varint,2,opt,name=protocol,proto3,enum=ligato.vpp.l3.VrfTable_Protocol" json:"protocol,omitempty"`
	// Label is an optional description for the table.
	// - maximum allowed length is 63 characters
	// - included in the output from the VPP CLI command "show ip fib"
	// - if undefined, then VPP will generate label using the template "<protocol>-VRF:<id>"
	Label            string                     `protobuf:"bytes,3,opt,name=label,proto3" json:"label,omitempty"`
	FlowHashSettings *VrfTable_FlowHashSettings `protobuf:"bytes,4,opt,name=flow_hash_settings,json=flowHashSettings,proto3" json:"flow_hash_settings,omitempty"`
}

func (x *VrfTable) Reset() {
	*x = VrfTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ligato_vpp_l3_vrf_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VrfTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VrfTable) ProtoMessage() {}

func (x *VrfTable) ProtoReflect() protoreflect.Message {
	mi := &file_ligato_vpp_l3_vrf_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VrfTable.ProtoReflect.Descriptor instead.
func (*VrfTable) Descriptor() ([]byte, []int) {
	return file_ligato_vpp_l3_vrf_proto_rawDescGZIP(), []int{0}
}

func (x *VrfTable) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *VrfTable) GetProtocol() VrfTable_Protocol {
	if x != nil {
		return x.Protocol
	}
	return VrfTable_IPV4
}

func (x *VrfTable) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *VrfTable) GetFlowHashSettings() *VrfTable_FlowHashSettings {
	if x != nil {
		return x.FlowHashSettings
	}
	return nil
}

// FlowHashSettings allows tuning of hash calculation of IP flows in the VRF table.
// This affects hash table size as well as the stickiness of flows by load-balancing.
// If not defined, default settings that are implicitly enabled are:
//  - use_src_ip, use_dst_ip, use_src_port, use_dst_port, use_protocol
type VrfTable_FlowHashSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UseSrcIp    bool `protobuf:"varint,1,opt,name=use_src_ip,json=useSrcIp,proto3" json:"use_src_ip,omitempty"`
	UseDstIp    bool `protobuf:"varint,2,opt,name=use_dst_ip,json=useDstIp,proto3" json:"use_dst_ip,omitempty"`
	UseSrcPort  bool `protobuf:"varint,3,opt,name=use_src_port,json=useSrcPort,proto3" json:"use_src_port,omitempty"`
	UseDstPort  bool `protobuf:"varint,4,opt,name=use_dst_port,json=useDstPort,proto3" json:"use_dst_port,omitempty"`
	UseProtocol bool `protobuf:"varint,5,opt,name=use_protocol,json=useProtocol,proto3" json:"use_protocol,omitempty"`
	Reverse     bool `protobuf:"varint,6,opt,name=reverse,proto3" json:"reverse,omitempty"`
	Symmetric   bool `protobuf:"varint,7,opt,name=symmetric,proto3" json:"symmetric,omitempty"`
}

func (x *VrfTable_FlowHashSettings) Reset() {
	*x = VrfTable_FlowHashSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ligato_vpp_l3_vrf_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VrfTable_FlowHashSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VrfTable_FlowHashSettings) ProtoMessage() {}

func (x *VrfTable_FlowHashSettings) ProtoReflect() protoreflect.Message {
	mi := &file_ligato_vpp_l3_vrf_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VrfTable_FlowHashSettings.ProtoReflect.Descriptor instead.
func (*VrfTable_FlowHashSettings) Descriptor() ([]byte, []int) {
	return file_ligato_vpp_l3_vrf_proto_rawDescGZIP(), []int{0, 0}
}

func (x *VrfTable_FlowHashSettings) GetUseSrcIp() bool {
	if x != nil {
		return x.UseSrcIp
	}
	return false
}

func (x *VrfTable_FlowHashSettings) GetUseDstIp() bool {
	if x != nil {
		return x.UseDstIp
	}
	return false
}

func (x *VrfTable_FlowHashSettings) GetUseSrcPort() bool {
	if x != nil {
		return x.UseSrcPort
	}
	return false
}

func (x *VrfTable_FlowHashSettings) GetUseDstPort() bool {
	if x != nil {
		return x.UseDstPort
	}
	return false
}

func (x *VrfTable_FlowHashSettings) GetUseProtocol() bool {
	if x != nil {
		return x.UseProtocol
	}
	return false
}

func (x *VrfTable_FlowHashSettings) GetReverse() bool {
	if x != nil {
		return x.Reverse
	}
	return false
}

func (x *VrfTable_FlowHashSettings) GetSymmetric() bool {
	if x != nil {
		return x.Symmetric
	}
	return false
}

var File_ligato_vpp_l3_vrf_proto protoreflect.FileDescriptor

var file_ligato_vpp_l3_vrf_proto_rawDesc = []byte{
	0x0a, 0x17, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2f, 0x76, 0x70, 0x70, 0x2f, 0x6c, 0x33, 0x2f,
	0x76, 0x72, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x6c, 0x69, 0x67, 0x61, 0x74,
	0x6f, 0x2e, 0x76, 0x70, 0x70, 0x2e, 0x6c, 0x33, 0x22, 0xd6, 0x03, 0x0a, 0x08, 0x56, 0x72, 0x66,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f,
	0x2e, 0x76, 0x70, 0x70, 0x2e, 0x6c, 0x33, 0x2e, 0x56, 0x72, 0x66, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x56, 0x0a, 0x12, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2e, 0x76,
	0x70, 0x70, 0x2e, 0x6c, 0x33, 0x2e, 0x56, 0x72, 0x66, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x46,
	0x6c, 0x6f, 0x77, 0x48, 0x61, 0x73, 0x68, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x10, 0x66, 0x6c, 0x6f, 0x77, 0x48, 0x61, 0x73, 0x68, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x1a, 0xed, 0x01, 0x0a, 0x10, 0x46, 0x6c, 0x6f, 0x77, 0x48, 0x61, 0x73, 0x68, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x5f, 0x73, 0x72,
	0x63, 0x5f, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x75, 0x73, 0x65, 0x53,
	0x72, 0x63, 0x49, 0x70, 0x12, 0x1c, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x5f, 0x64, 0x73, 0x74, 0x5f,
	0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x75, 0x73, 0x65, 0x44, 0x73, 0x74,
	0x49, 0x70, 0x12, 0x20, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x53, 0x72, 0x63,
	0x50, 0x6f, 0x72, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x5f, 0x64, 0x73, 0x74, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x44,
	0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x75, 0x73,
	0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x76,
	0x65, 0x72, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x22, 0x1e, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x08, 0x0a,
	0x04, 0x49, 0x50, 0x56, 0x34, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x50, 0x56, 0x36, 0x10,
	0x01, 0x42, 0x36, 0x5a, 0x34, 0x67, 0x6f, 0x2e, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2e, 0x69,
	0x6f, 0x2f, 0x76, 0x70, 0x70, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x33, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2f, 0x76, 0x70, 0x70, 0x2f,
	0x6c, 0x33, 0x3b, 0x76, 0x70, 0x70, 0x5f, 0x6c, 0x33, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_ligato_vpp_l3_vrf_proto_rawDescOnce sync.Once
	file_ligato_vpp_l3_vrf_proto_rawDescData = file_ligato_vpp_l3_vrf_proto_rawDesc
)

func file_ligato_vpp_l3_vrf_proto_rawDescGZIP() []byte {
	file_ligato_vpp_l3_vrf_proto_rawDescOnce.Do(func() {
		file_ligato_vpp_l3_vrf_proto_rawDescData = protoimpl.X.CompressGZIP(file_ligato_vpp_l3_vrf_proto_rawDescData)
	})
	return file_ligato_vpp_l3_vrf_proto_rawDescData
}

var file_ligato_vpp_l3_vrf_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_ligato_vpp_l3_vrf_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_ligato_vpp_l3_vrf_proto_goTypes = []interface{}{
	(VrfTable_Protocol)(0),            // 0: ligato.vpp.l3.VrfTable.Protocol
	(*VrfTable)(nil),                  // 1: ligato.vpp.l3.VrfTable
	(*VrfTable_FlowHashSettings)(nil), // 2: ligato.vpp.l3.VrfTable.FlowHashSettings
}
var file_ligato_vpp_l3_vrf_proto_depIdxs = []int32{
	0, // 0: ligato.vpp.l3.VrfTable.protocol:type_name -> ligato.vpp.l3.VrfTable.Protocol
	2, // 1: ligato.vpp.l3.VrfTable.flow_hash_settings:type_name -> ligato.vpp.l3.VrfTable.FlowHashSettings
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_ligato_vpp_l3_vrf_proto_init() }
func file_ligato_vpp_l3_vrf_proto_init() {
	if File_ligato_vpp_l3_vrf_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ligato_vpp_l3_vrf_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VrfTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ligato_vpp_l3_vrf_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VrfTable_FlowHashSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ligato_vpp_l3_vrf_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ligato_vpp_l3_vrf_proto_goTypes,
		DependencyIndexes: file_ligato_vpp_l3_vrf_proto_depIdxs,
		EnumInfos:         file_ligato_vpp_l3_vrf_proto_enumTypes,
		MessageInfos:      file_ligato_vpp_l3_vrf_proto_msgTypes,
	}.Build()
	File_ligato_vpp_l3_vrf_proto = out.File
	file_ligato_vpp_l3_vrf_proto_rawDesc = nil
	file_ligato_vpp_l3_vrf_proto_goTypes = nil
	file_ligato_vpp_l3_vrf_proto_depIdxs = nil
}
