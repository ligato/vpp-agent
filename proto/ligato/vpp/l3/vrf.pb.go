// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ligato/vpp/l3/vrf.proto

package vpp_l3

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Protocol define IP protocol of VRF table.
type VrfTable_Protocol int32

const (
	VrfTable_IPV4 VrfTable_Protocol = 0
	VrfTable_IPV6 VrfTable_Protocol = 1
)

var VrfTable_Protocol_name = map[int32]string{
	0: "IPV4",
	1: "IPV6",
}

var VrfTable_Protocol_value = map[string]int32{
	"IPV4": 0,
	"IPV6": 1,
}

func (x VrfTable_Protocol) String() string {
	return proto.EnumName(VrfTable_Protocol_name, int32(x))
}

func (VrfTable_Protocol) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4ba58f73bd5b6328, []int{0, 0}
}

type VrfTable struct {
	// ID is mandatory identification for VRF table.
	// NOTE: do not confuse with fib index (shown by some VPP CLIs),
	// which is VPP's internal offset in the vector of allocated tables.
	Id       uint32            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Protocol VrfTable_Protocol `protobuf:"varint,2,opt,name=protocol,proto3,enum=ligato.vpp.l3.VrfTable_Protocol" json:"protocol,omitempty"`
	// Label is an optional description for the table.
	// - maximum allowed length is 63 characters
	// - included in the output from the VPP CLI command "show ip fib"
	// - if undefined, then VPP will generate label using the template "<protocol>-VRF:<id>"
	Label                string                     `protobuf:"bytes,3,opt,name=label,proto3" json:"label,omitempty"`
	FlowHashSettings     *VrfTable_FlowHashSettings `protobuf:"bytes,4,opt,name=flow_hash_settings,json=flowHashSettings,proto3" json:"flow_hash_settings,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *VrfTable) Reset()         { *m = VrfTable{} }
func (m *VrfTable) String() string { return proto.CompactTextString(m) }
func (*VrfTable) ProtoMessage()    {}
func (*VrfTable) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ba58f73bd5b6328, []int{0}
}

func (m *VrfTable) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VrfTable.Unmarshal(m, b)
}
func (m *VrfTable) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VrfTable.Marshal(b, m, deterministic)
}
func (m *VrfTable) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VrfTable.Merge(m, src)
}
func (m *VrfTable) XXX_Size() int {
	return xxx_messageInfo_VrfTable.Size(m)
}
func (m *VrfTable) XXX_DiscardUnknown() {
	xxx_messageInfo_VrfTable.DiscardUnknown(m)
}

var xxx_messageInfo_VrfTable proto.InternalMessageInfo

func (m *VrfTable) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *VrfTable) GetProtocol() VrfTable_Protocol {
	if m != nil {
		return m.Protocol
	}
	return VrfTable_IPV4
}

func (m *VrfTable) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *VrfTable) GetFlowHashSettings() *VrfTable_FlowHashSettings {
	if m != nil {
		return m.FlowHashSettings
	}
	return nil
}

// FlowHashSettings allows tuning of hash calculation of IP flows in the VRF table.
// This affects hash table size as well as the stickiness of flows by load-balancing.
// If not defined, default settings that are implicitly enabled are:
//  - use_src_ip, use_dst_ip, use_src_port, use_dst_port, use_protocol
type VrfTable_FlowHashSettings struct {
	UseSrcIp             bool     `protobuf:"varint,1,opt,name=use_src_ip,json=useSrcIp,proto3" json:"use_src_ip,omitempty"`
	UseDstIp             bool     `protobuf:"varint,2,opt,name=use_dst_ip,json=useDstIp,proto3" json:"use_dst_ip,omitempty"`
	UseSrcPort           bool     `protobuf:"varint,3,opt,name=use_src_port,json=useSrcPort,proto3" json:"use_src_port,omitempty"`
	UseDstPort           bool     `protobuf:"varint,4,opt,name=use_dst_port,json=useDstPort,proto3" json:"use_dst_port,omitempty"`
	UseProtocol          bool     `protobuf:"varint,5,opt,name=use_protocol,json=useProtocol,proto3" json:"use_protocol,omitempty"`
	Reverse              bool     `protobuf:"varint,6,opt,name=reverse,proto3" json:"reverse,omitempty"`
	Symmetric            bool     `protobuf:"varint,7,opt,name=symmetric,proto3" json:"symmetric,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VrfTable_FlowHashSettings) Reset()         { *m = VrfTable_FlowHashSettings{} }
func (m *VrfTable_FlowHashSettings) String() string { return proto.CompactTextString(m) }
func (*VrfTable_FlowHashSettings) ProtoMessage()    {}
func (*VrfTable_FlowHashSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ba58f73bd5b6328, []int{0, 0}
}

func (m *VrfTable_FlowHashSettings) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VrfTable_FlowHashSettings.Unmarshal(m, b)
}
func (m *VrfTable_FlowHashSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VrfTable_FlowHashSettings.Marshal(b, m, deterministic)
}
func (m *VrfTable_FlowHashSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VrfTable_FlowHashSettings.Merge(m, src)
}
func (m *VrfTable_FlowHashSettings) XXX_Size() int {
	return xxx_messageInfo_VrfTable_FlowHashSettings.Size(m)
}
func (m *VrfTable_FlowHashSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_VrfTable_FlowHashSettings.DiscardUnknown(m)
}

var xxx_messageInfo_VrfTable_FlowHashSettings proto.InternalMessageInfo

func (m *VrfTable_FlowHashSettings) GetUseSrcIp() bool {
	if m != nil {
		return m.UseSrcIp
	}
	return false
}

func (m *VrfTable_FlowHashSettings) GetUseDstIp() bool {
	if m != nil {
		return m.UseDstIp
	}
	return false
}

func (m *VrfTable_FlowHashSettings) GetUseSrcPort() bool {
	if m != nil {
		return m.UseSrcPort
	}
	return false
}

func (m *VrfTable_FlowHashSettings) GetUseDstPort() bool {
	if m != nil {
		return m.UseDstPort
	}
	return false
}

func (m *VrfTable_FlowHashSettings) GetUseProtocol() bool {
	if m != nil {
		return m.UseProtocol
	}
	return false
}

func (m *VrfTable_FlowHashSettings) GetReverse() bool {
	if m != nil {
		return m.Reverse
	}
	return false
}

func (m *VrfTable_FlowHashSettings) GetSymmetric() bool {
	if m != nil {
		return m.Symmetric
	}
	return false
}

func init() {
	proto.RegisterEnum("ligato.vpp.l3.VrfTable_Protocol", VrfTable_Protocol_name, VrfTable_Protocol_value)
	proto.RegisterType((*VrfTable)(nil), "ligato.vpp.l3.VrfTable")
	proto.RegisterType((*VrfTable_FlowHashSettings)(nil), "ligato.vpp.l3.VrfTable.FlowHashSettings")
}

func init() { proto.RegisterFile("ligato/vpp/l3/vrf.proto", fileDescriptor_4ba58f73bd5b6328) }

var fileDescriptor_4ba58f73bd5b6328 = []byte{
	// 356 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0x4f, 0x6b, 0xf2, 0x40,
	0x10, 0x87, 0xdf, 0xc4, 0x7f, 0x71, 0x7c, 0x95, 0xb0, 0x14, 0x1a, 0x8a, 0x94, 0xd4, 0x53, 0x2e,
	0x4d, 0xc0, 0x88, 0x97, 0xf6, 0x54, 0xa4, 0xd4, 0x9b, 0xc4, 0xe2, 0xa1, 0x97, 0x10, 0xe3, 0x26,
	0x06, 0x56, 0x77, 0xd9, 0x5d, 0x23, 0xfd, 0xa2, 0xfd, 0x16, 0xfd, 0x0e, 0xc5, 0x8d, 0x9b, 0xa2,
	0xd0, 0x5b, 0x76, 0x7e, 0xcf, 0x33, 0x64, 0x86, 0x81, 0x5b, 0x52, 0xe4, 0x89, 0xa4, 0x41, 0xc9,
	0x58, 0x40, 0xc2, 0xa0, 0xe4, 0x99, 0xcf, 0x38, 0x95, 0x14, 0xf5, 0xab, 0xc0, 0x2f, 0x19, 0xf3,
	0x49, 0x38, 0xfa, 0x6a, 0x80, 0xb5, 0xe2, 0xd9, 0x7b, 0xb2, 0x26, 0x18, 0x0d, 0xc0, 0x2c, 0x36,
	0x8e, 0xe1, 0x1a, 0x5e, 0x3f, 0x32, 0x8b, 0x0d, 0x7a, 0x06, 0x4b, 0x49, 0x29, 0x25, 0x8e, 0xe9,
	0x1a, 0xde, 0x60, 0xec, 0xfa, 0x17, 0xba, 0xaf, 0x55, 0x7f, 0x71, 0xe6, 0xa2, 0xda, 0x40, 0x37,
	0xd0, 0x22, 0xc9, 0x1a, 0x13, 0xa7, 0xe1, 0x1a, 0x5e, 0x37, 0xaa, 0x1e, 0x68, 0x05, 0x28, 0x23,
	0xf4, 0x18, 0x6f, 0x13, 0xb1, 0x8d, 0x05, 0x96, 0xb2, 0xd8, 0xe7, 0xc2, 0x69, 0xba, 0x86, 0xd7,
	0x1b, 0x7b, 0x7f, 0x75, 0x7f, 0x25, 0xf4, 0xf8, 0x96, 0x88, 0xed, 0xf2, 0xcc, 0x47, 0x76, 0x76,
	0x55, 0xb9, 0xfb, 0x36, 0xc0, 0xbe, 0xc6, 0xd0, 0x10, 0xe0, 0x20, 0x70, 0x2c, 0x78, 0x1a, 0x17,
	0x4c, 0x0d, 0x66, 0x45, 0xd6, 0x41, 0xe0, 0x25, 0x4f, 0xe7, 0x4c, 0xa7, 0x1b, 0x21, 0x4f, 0xa9,
	0x59, 0xa7, 0x33, 0x21, 0xe7, 0x0c, 0xb9, 0xf0, 0x5f, 0xbb, 0x8c, 0x72, 0xa9, 0xa6, 0xb0, 0x22,
	0xa8, 0xec, 0x05, 0xe5, 0x52, 0x13, 0x27, 0x5f, 0x11, 0xcd, 0x9a, 0x98, 0x09, 0xa9, 0x88, 0x87,
	0x8a, 0xa8, 0x97, 0xd8, 0x52, 0x44, 0xef, 0x20, 0xb0, 0xde, 0x17, 0x72, 0xa0, 0xc3, 0x71, 0x89,
	0xb9, 0xc0, 0x4e, 0x5b, 0xa5, 0xfa, 0x89, 0x86, 0xd0, 0x15, 0x9f, 0xbb, 0x1d, 0x96, 0xbc, 0x48,
	0x9d, 0x8e, 0xca, 0x7e, 0x0b, 0xa3, 0x7b, 0xb0, 0xea, 0x1e, 0x16, 0x34, 0xe7, 0x8b, 0xd5, 0xc4,
	0xfe, 0x77, 0xfe, 0x9a, 0xda, 0xc6, 0xcb, 0xf4, 0x63, 0x92, 0x53, 0xbd, 0xcf, 0x42, 0x1d, 0xc2,
	0x63, 0x92, 0xe3, 0xbd, 0x0c, 0xca, 0x30, 0x50, 0x3f, 0x14, 0x5c, 0x9c, 0xc8, 0x53, 0xc9, 0x58,
	0x4c, 0xc2, 0x75, 0x5b, 0x65, 0xe1, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc9, 0xbd, 0x72, 0xd7,
	0x41, 0x02, 0x00, 0x00,
}
