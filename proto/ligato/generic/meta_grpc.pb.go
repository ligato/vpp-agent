// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             v3.17.3
// source: ligato/generic/meta.proto

package generic

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MetaServiceClient is the client API for MetaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetaServiceClient interface {
	// KnownModels returns information about service capabilities
	// including list of models supported by the server.
	KnownModels(ctx context.Context, in *KnownModelsRequest, opts ...grpc.CallOption) (*KnownModelsResponse, error)
	// ProtoFileDescriptor returns proto file descriptor for proto file identified by full name.
	// The proto file descriptor is in form of proto messages (file descriptor proto and
	// proto of its imports) so there are needed additional steps to join them into protoreflect.FileDescriptor
	// ("google.golang.org/protobuf/reflect/protodesc".NewFile(...)).
	//
	// This rpc can be used together with knownModels rpc to retrieve additional model information.
	// Message descriptor can be retrieved from file descriptor corresponding to knownModel message
	// and used with proto reflecting to get all kinds of information about the known model.
	//
	// Due to nature of data retrieval, it is expected that at least one message from that proto file
	// is registered as known model.
	ProtoFileDescriptor(ctx context.Context, in *ProtoFileDescriptorRequest, opts ...grpc.CallOption) (*ProtoFileDescriptorResponse, error)
}

type metaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMetaServiceClient(cc grpc.ClientConnInterface) MetaServiceClient {
	return &metaServiceClient{cc}
}

func (c *metaServiceClient) KnownModels(ctx context.Context, in *KnownModelsRequest, opts ...grpc.CallOption) (*KnownModelsResponse, error) {
	out := new(KnownModelsResponse)
	err := c.cc.Invoke(ctx, "/ligato.generic.MetaService/KnownModels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaServiceClient) ProtoFileDescriptor(ctx context.Context, in *ProtoFileDescriptorRequest, opts ...grpc.CallOption) (*ProtoFileDescriptorResponse, error) {
	out := new(ProtoFileDescriptorResponse)
	err := c.cc.Invoke(ctx, "/ligato.generic.MetaService/ProtoFileDescriptor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetaServiceServer is the server API for MetaService service.
// All implementations must embed UnimplementedMetaServiceServer
// for forward compatibility
type MetaServiceServer interface {
	// KnownModels returns information about service capabilities
	// including list of models supported by the server.
	KnownModels(context.Context, *KnownModelsRequest) (*KnownModelsResponse, error)
	// ProtoFileDescriptor returns proto file descriptor for proto file identified by full name.
	// The proto file descriptor is in form of proto messages (file descriptor proto and
	// proto of its imports) so there are needed additional steps to join them into protoreflect.FileDescriptor
	// ("google.golang.org/protobuf/reflect/protodesc".NewFile(...)).
	//
	// This rpc can be used together with knownModels rpc to retrieve additional model information.
	// Message descriptor can be retrieved from file descriptor corresponding to knownModel message
	// and used with proto reflecting to get all kinds of information about the known model.
	//
	// Due to nature of data retrieval, it is expected that at least one message from that proto file
	// is registered as known model.
	ProtoFileDescriptor(context.Context, *ProtoFileDescriptorRequest) (*ProtoFileDescriptorResponse, error)
	mustEmbedUnimplementedMetaServiceServer()
}

// UnimplementedMetaServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMetaServiceServer struct {
}

func (UnimplementedMetaServiceServer) KnownModels(context.Context, *KnownModelsRequest) (*KnownModelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KnownModels not implemented")
}
func (UnimplementedMetaServiceServer) ProtoFileDescriptor(context.Context, *ProtoFileDescriptorRequest) (*ProtoFileDescriptorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProtoFileDescriptor not implemented")
}
func (UnimplementedMetaServiceServer) mustEmbedUnimplementedMetaServiceServer() {}

// UnsafeMetaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetaServiceServer will
// result in compilation errors.
type UnsafeMetaServiceServer interface {
	mustEmbedUnimplementedMetaServiceServer()
}

func RegisterMetaServiceServer(s grpc.ServiceRegistrar, srv MetaServiceServer) {
	s.RegisterService(&MetaService_ServiceDesc, srv)
}

func _MetaService_KnownModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KnownModelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaServiceServer).KnownModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ligato.generic.MetaService/KnownModels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaServiceServer).KnownModels(ctx, req.(*KnownModelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaService_ProtoFileDescriptor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProtoFileDescriptorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaServiceServer).ProtoFileDescriptor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ligato.generic.MetaService/ProtoFileDescriptor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaServiceServer).ProtoFileDescriptor(ctx, req.(*ProtoFileDescriptorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MetaService_ServiceDesc is the grpc.ServiceDesc for MetaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ligato.generic.MetaService",
	HandlerType: (*MetaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "KnownModels",
			Handler:    _MetaService_KnownModels_Handler,
		},
		{
			MethodName: "ProtoFileDescriptor",
			Handler:    _MetaService_ProtoFileDescriptor_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ligato/generic/meta.proto",
}
