syntax = "proto3";

package ligato.configurator;

option go_package = "go.ligato.io/vpp-agent/v3/proto/ligato/configurator;configurator";

import "ligato/vpp/vpp.proto";
import "ligato/linux/linux.proto";
import "ligato/netalloc/netalloc.proto";

// Config describes all supported configs into a single config message.
message Config {
    vpp.ConfigData vpp_config = 1;
    linux.ConfigData linux_config = 2;
    netalloc.ConfigData netalloc_config = 3;
}

// Notification describes all known notifications into a single message.
message Notification {
    oneof notification {
        vpp.Notification vpp_notification = 1;
        linux.Notification linux_notification = 2;
    }
}

message UpdateRequest {
    // Update is a config data to be updated.
    Config update = 1;

    // FullResync option can be used to overwrite
    // all existing config with config update.
    //
    // NOTE: Using FullResync with empty config update will
    // remove all existing config.
    bool full_resync = 2;

    // WaitDone option can be used to block until either
    // config update is done (non-pending) or request times out.
    //
    // NOTE: WaitDone is intended to be used for config updates
    // that depend on some event from dataplane to fully configure.
    // Using this with incomplete config updates will require
    // another update request to unblock.
    bool wait_done = 3;
}

message UpdateResponse {

}

message DeleteRequest {
    // Delete is a config data to be deleted.
    Config delete = 1;

    // WaitDone option can be used to block until either
    // config delete is done (non-pending) or request times out.
    //
    // NOTE: WaitDone is intended to be used for config updates
    // that depend on some event from dataplane to fully configure.
    // Using this with incomplete config updates will require
    // another update request to unblock.
    bool wait_done = 3;
}

message DeleteResponse {

}

message GetRequest {

}

message GetResponse {
    // Config describes desired config retrieved from agent.
    Config config = 1;
}

message DumpRequest {

}

message DumpResponse {
    // Dump is a running config.
    Config dump = 1;
}

message NotifyRequest {
    uint32 idx = 1;
    repeated Notification filters = 2;
}

message NotifyResponse {
    // Index of next notification
    uint32 next_idx = 1;
    // Notification contains notification data.
    Notification notification = 2;
}

// ConfiguratorService provides basic operations for managing configuration
// and monitoring actual state.
service ConfiguratorService {
    // Get is used for listing desired config.
    rpc Get(GetRequest) returns (GetResponse);

    // Update is used for updating desired config.
    rpc Update(UpdateRequest) returns (UpdateResponse);

    // Delete is used for deleting desired config.
    rpc Delete(DeleteRequest) returns (DeleteResponse);

    // Dump is used for dumping running config.
    rpc Dump(DumpRequest) returns (DumpResponse);

    // Notify is used for subscribing to notifications.
    rpc Notify(NotifyRequest) returns (stream NotifyResponse);
}
