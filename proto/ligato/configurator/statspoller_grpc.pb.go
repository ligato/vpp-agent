// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             v3.17.3
// source: ligato/configurator/statspoller.proto

package configurator

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StatsPollerServiceClient is the client API for StatsPollerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StatsPollerServiceClient interface {
	// PollStats is used for polling stats with specific period and number of pollings.
	PollStats(ctx context.Context, in *PollStatsRequest, opts ...grpc.CallOption) (StatsPollerService_PollStatsClient, error)
}

type statsPollerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStatsPollerServiceClient(cc grpc.ClientConnInterface) StatsPollerServiceClient {
	return &statsPollerServiceClient{cc}
}

func (c *statsPollerServiceClient) PollStats(ctx context.Context, in *PollStatsRequest, opts ...grpc.CallOption) (StatsPollerService_PollStatsClient, error) {
	stream, err := c.cc.NewStream(ctx, &StatsPollerService_ServiceDesc.Streams[0], "/ligato.configurator.StatsPollerService/PollStats", opts...)
	if err != nil {
		return nil, err
	}
	x := &statsPollerServicePollStatsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StatsPollerService_PollStatsClient interface {
	Recv() (*PollStatsResponse, error)
	grpc.ClientStream
}

type statsPollerServicePollStatsClient struct {
	grpc.ClientStream
}

func (x *statsPollerServicePollStatsClient) Recv() (*PollStatsResponse, error) {
	m := new(PollStatsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StatsPollerServiceServer is the server API for StatsPollerService service.
// All implementations must embed UnimplementedStatsPollerServiceServer
// for forward compatibility
type StatsPollerServiceServer interface {
	// PollStats is used for polling stats with specific period and number of pollings.
	PollStats(*PollStatsRequest, StatsPollerService_PollStatsServer) error
	mustEmbedUnimplementedStatsPollerServiceServer()
}

// UnimplementedStatsPollerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStatsPollerServiceServer struct {
}

func (UnimplementedStatsPollerServiceServer) PollStats(*PollStatsRequest, StatsPollerService_PollStatsServer) error {
	return status.Errorf(codes.Unimplemented, "method PollStats not implemented")
}
func (UnimplementedStatsPollerServiceServer) mustEmbedUnimplementedStatsPollerServiceServer() {}

// UnsafeStatsPollerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StatsPollerServiceServer will
// result in compilation errors.
type UnsafeStatsPollerServiceServer interface {
	mustEmbedUnimplementedStatsPollerServiceServer()
}

func RegisterStatsPollerServiceServer(s grpc.ServiceRegistrar, srv StatsPollerServiceServer) {
	s.RegisterService(&StatsPollerService_ServiceDesc, srv)
}

func _StatsPollerService_PollStats_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PollStatsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StatsPollerServiceServer).PollStats(m, &statsPollerServicePollStatsServer{stream})
}

type StatsPollerService_PollStatsServer interface {
	Send(*PollStatsResponse) error
	grpc.ServerStream
}

type statsPollerServicePollStatsServer struct {
	grpc.ServerStream
}

func (x *statsPollerServicePollStatsServer) Send(m *PollStatsResponse) error {
	return x.ServerStream.SendMsg(m)
}

// StatsPollerService_ServiceDesc is the grpc.ServiceDesc for StatsPollerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StatsPollerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ligato.configurator.StatsPollerService",
	HandlerType: (*StatsPollerServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PollStats",
			Handler:       _StatsPollerService_PollStats_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ligato/configurator/statspoller.proto",
}
