// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ligato/linux/namespace/namespace.proto

package linux_namespace

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type NetNamespace_ReferenceType int32

const (
	NetNamespace_UNDEFINED    NetNamespace_ReferenceType = 0
	NetNamespace_NSID         NetNamespace_ReferenceType = 1
	NetNamespace_PID          NetNamespace_ReferenceType = 2
	NetNamespace_FD           NetNamespace_ReferenceType = 3
	NetNamespace_MICROSERVICE NetNamespace_ReferenceType = 4
)

var NetNamespace_ReferenceType_name = map[int32]string{
	0: "UNDEFINED",
	1: "NSID",
	2: "PID",
	3: "FD",
	4: "MICROSERVICE",
}

var NetNamespace_ReferenceType_value = map[string]int32{
	"UNDEFINED":    0,
	"NSID":         1,
	"PID":          2,
	"FD":           3,
	"MICROSERVICE": 4,
}

func (x NetNamespace_ReferenceType) String() string {
	return proto.EnumName(NetNamespace_ReferenceType_name, int32(x))
}

func (NetNamespace_ReferenceType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_460c1221140c0b2d, []int{0, 0}
}

type NetNamespace struct {
	Type NetNamespace_ReferenceType `protobuf:"varint,1,opt,name=type,proto3,enum=ligato.linux.namespace.NetNamespace_ReferenceType" json:"type,omitempty"`
	// Reference defines reference specific
	// to the namespace type:
	//  * namespace ID (NSID)
	//  * PID number (PID)
	//  * file path (FD)
	//  * microservice label (MICROSERVICE)
	Reference            string   `protobuf:"bytes,2,opt,name=reference,proto3" json:"reference,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NetNamespace) Reset()         { *m = NetNamespace{} }
func (m *NetNamespace) String() string { return proto.CompactTextString(m) }
func (*NetNamespace) ProtoMessage()    {}
func (*NetNamespace) Descriptor() ([]byte, []int) {
	return fileDescriptor_460c1221140c0b2d, []int{0}
}

func (m *NetNamespace) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetNamespace.Unmarshal(m, b)
}
func (m *NetNamespace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetNamespace.Marshal(b, m, deterministic)
}
func (m *NetNamespace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetNamespace.Merge(m, src)
}
func (m *NetNamespace) XXX_Size() int {
	return xxx_messageInfo_NetNamespace.Size(m)
}
func (m *NetNamespace) XXX_DiscardUnknown() {
	xxx_messageInfo_NetNamespace.DiscardUnknown(m)
}

var xxx_messageInfo_NetNamespace proto.InternalMessageInfo

func (m *NetNamespace) GetType() NetNamespace_ReferenceType {
	if m != nil {
		return m.Type
	}
	return NetNamespace_UNDEFINED
}

func (m *NetNamespace) GetReference() string {
	if m != nil {
		return m.Reference
	}
	return ""
}

func init() {
	proto.RegisterEnum("ligato.linux.namespace.NetNamespace_ReferenceType", NetNamespace_ReferenceType_name, NetNamespace_ReferenceType_value)
	proto.RegisterType((*NetNamespace)(nil), "ligato.linux.namespace.NetNamespace")
}

func init() {
	proto.RegisterFile("ligato/linux/namespace/namespace.proto", fileDescriptor_460c1221140c0b2d)
}

var fileDescriptor_460c1221140c0b2d = []byte{
	// 239 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0xcb, 0xc9, 0x4c, 0x4f,
	0x2c, 0xc9, 0xd7, 0xcf, 0xc9, 0xcc, 0x2b, 0xad, 0xd0, 0xcf, 0x4b, 0xcc, 0x4d, 0x2d, 0x2e, 0x48,
	0x4c, 0x4e, 0x45, 0xb0, 0xf4, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85, 0xc4, 0x20, 0xea, 0xf4, 0xc0,
	0xea, 0xf4, 0xe0, 0xb2, 0x4a, 0x07, 0x19, 0xb9, 0x78, 0xfc, 0x52, 0x4b, 0xfc, 0x60, 0x02, 0x42,
	0x6e, 0x5c, 0x2c, 0x25, 0x95, 0x05, 0xa9, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x7c, 0x46, 0x46, 0x7a,
	0xd8, 0xf5, 0xe9, 0x21, 0xeb, 0xd1, 0x0b, 0x4a, 0x4d, 0x4b, 0x2d, 0x4a, 0xcd, 0x4b, 0x4e, 0x0d,
	0xa9, 0x2c, 0x48, 0x0d, 0x02, 0xeb, 0x17, 0x92, 0xe1, 0xe2, 0x2c, 0x82, 0x09, 0x4b, 0x30, 0x29,
	0x30, 0x6a, 0x70, 0x06, 0x21, 0x04, 0x94, 0xbc, 0xb9, 0x78, 0x51, 0x34, 0x09, 0xf1, 0x72, 0x71,
	0x86, 0xfa, 0xb9, 0xb8, 0xba, 0x79, 0xfa, 0xb9, 0xba, 0x08, 0x30, 0x08, 0x71, 0x70, 0xb1, 0xf8,
	0x05, 0x7b, 0xba, 0x08, 0x30, 0x0a, 0xb1, 0x73, 0x31, 0x07, 0x78, 0xba, 0x08, 0x30, 0x09, 0xb1,
	0x71, 0x31, 0xb9, 0xb9, 0x08, 0x30, 0x0b, 0x09, 0x70, 0xf1, 0xf8, 0x7a, 0x3a, 0x07, 0xf9, 0x07,
	0xbb, 0x06, 0x85, 0x79, 0x3a, 0xbb, 0x0a, 0xb0, 0x38, 0x79, 0x44, 0xb9, 0xa5, 0xe7, 0xc3, 0x1c,
	0x9a, 0x99, 0xaf, 0x5f, 0x56, 0x50, 0xa0, 0x9b, 0x98, 0x9e, 0x9a, 0x57, 0xa2, 0x5f, 0x66, 0xa4,
	0x0f, 0xf6, 0xbe, 0x3e, 0xf6, 0x50, 0xb2, 0x06, 0xf3, 0xe3, 0xe1, 0xfc, 0x24, 0x36, 0xb0, 0x6a,
	0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0xca, 0x61, 0x96, 0xd6, 0x56, 0x01, 0x00, 0x00,
}
