// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.4
// source: ligato/linux/iptables/iptables.proto

package linux_iptables

import (
	proto "github.com/golang/protobuf/proto"
	namespace "go.ligato.io/vpp-agent/v3/proto/ligato/linux/namespace"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type RuleChain_Protocol int32

const (
	RuleChain_IPV4 RuleChain_Protocol = 0
	RuleChain_IPV6 RuleChain_Protocol = 1
)

// Enum value maps for RuleChain_Protocol.
var (
	RuleChain_Protocol_name = map[int32]string{
		0: "IPV4",
		1: "IPV6",
	}
	RuleChain_Protocol_value = map[string]int32{
		"IPV4": 0,
		"IPV6": 1,
	}
)

func (x RuleChain_Protocol) Enum() *RuleChain_Protocol {
	p := new(RuleChain_Protocol)
	*p = x
	return p
}

func (x RuleChain_Protocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RuleChain_Protocol) Descriptor() protoreflect.EnumDescriptor {
	return file_ligato_linux_iptables_iptables_proto_enumTypes[0].Descriptor()
}

func (RuleChain_Protocol) Type() protoreflect.EnumType {
	return &file_ligato_linux_iptables_iptables_proto_enumTypes[0]
}

func (x RuleChain_Protocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RuleChain_Protocol.Descriptor instead.
func (RuleChain_Protocol) EnumDescriptor() ([]byte, []int) {
	return file_ligato_linux_iptables_iptables_proto_rawDescGZIP(), []int{0, 0}
}

type RuleChain_Table int32

const (
	RuleChain_FILTER   RuleChain_Table = 0
	RuleChain_NAT      RuleChain_Table = 1
	RuleChain_MANGLE   RuleChain_Table = 2
	RuleChain_RAW      RuleChain_Table = 3
	RuleChain_SECURITY RuleChain_Table = 4
)

// Enum value maps for RuleChain_Table.
var (
	RuleChain_Table_name = map[int32]string{
		0: "FILTER",
		1: "NAT",
		2: "MANGLE",
		3: "RAW",
		4: "SECURITY",
	}
	RuleChain_Table_value = map[string]int32{
		"FILTER":   0,
		"NAT":      1,
		"MANGLE":   2,
		"RAW":      3,
		"SECURITY": 4,
	}
)

func (x RuleChain_Table) Enum() *RuleChain_Table {
	p := new(RuleChain_Table)
	*p = x
	return p
}

func (x RuleChain_Table) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RuleChain_Table) Descriptor() protoreflect.EnumDescriptor {
	return file_ligato_linux_iptables_iptables_proto_enumTypes[1].Descriptor()
}

func (RuleChain_Table) Type() protoreflect.EnumType {
	return &file_ligato_linux_iptables_iptables_proto_enumTypes[1]
}

func (x RuleChain_Table) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RuleChain_Table.Descriptor instead.
func (RuleChain_Table) EnumDescriptor() ([]byte, []int) {
	return file_ligato_linux_iptables_iptables_proto_rawDescGZIP(), []int{0, 1}
}

type RuleChain_ChainType int32

const (
	RuleChain_CUSTOM      RuleChain_ChainType = 0
	RuleChain_INPUT       RuleChain_ChainType = 1
	RuleChain_OUTPUT      RuleChain_ChainType = 2
	RuleChain_FORWARD     RuleChain_ChainType = 3
	RuleChain_PREROUTING  RuleChain_ChainType = 4
	RuleChain_POSTROUTING RuleChain_ChainType = 5
)

// Enum value maps for RuleChain_ChainType.
var (
	RuleChain_ChainType_name = map[int32]string{
		0: "CUSTOM",
		1: "INPUT",
		2: "OUTPUT",
		3: "FORWARD",
		4: "PREROUTING",
		5: "POSTROUTING",
	}
	RuleChain_ChainType_value = map[string]int32{
		"CUSTOM":      0,
		"INPUT":       1,
		"OUTPUT":      2,
		"FORWARD":     3,
		"PREROUTING":  4,
		"POSTROUTING": 5,
	}
)

func (x RuleChain_ChainType) Enum() *RuleChain_ChainType {
	p := new(RuleChain_ChainType)
	*p = x
	return p
}

func (x RuleChain_ChainType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RuleChain_ChainType) Descriptor() protoreflect.EnumDescriptor {
	return file_ligato_linux_iptables_iptables_proto_enumTypes[2].Descriptor()
}

func (RuleChain_ChainType) Type() protoreflect.EnumType {
	return &file_ligato_linux_iptables_iptables_proto_enumTypes[2]
}

func (x RuleChain_ChainType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RuleChain_ChainType.Descriptor instead.
func (RuleChain_ChainType) EnumDescriptor() ([]byte, []int) {
	return file_ligato_linux_iptables_iptables_proto_rawDescGZIP(), []int{0, 2}
}

type RuleChain_Policy int32

const (
	RuleChain_NONE   RuleChain_Policy = 0
	RuleChain_ACCEPT RuleChain_Policy = 1
	RuleChain_DROP   RuleChain_Policy = 2
	RuleChain_QUEUE  RuleChain_Policy = 3
	RuleChain_RETURN RuleChain_Policy = 4
)

// Enum value maps for RuleChain_Policy.
var (
	RuleChain_Policy_name = map[int32]string{
		0: "NONE",
		1: "ACCEPT",
		2: "DROP",
		3: "QUEUE",
		4: "RETURN",
	}
	RuleChain_Policy_value = map[string]int32{
		"NONE":   0,
		"ACCEPT": 1,
		"DROP":   2,
		"QUEUE":  3,
		"RETURN": 4,
	}
)

func (x RuleChain_Policy) Enum() *RuleChain_Policy {
	p := new(RuleChain_Policy)
	*p = x
	return p
}

func (x RuleChain_Policy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RuleChain_Policy) Descriptor() protoreflect.EnumDescriptor {
	return file_ligato_linux_iptables_iptables_proto_enumTypes[3].Descriptor()
}

func (RuleChain_Policy) Type() protoreflect.EnumType {
	return &file_ligato_linux_iptables_iptables_proto_enumTypes[3]
}

func (x RuleChain_Policy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RuleChain_Policy.Descriptor instead.
func (RuleChain_Policy) EnumDescriptor() ([]byte, []int) {
	return file_ligato_linux_iptables_iptables_proto_rawDescGZIP(), []int{0, 3}
}

type RuleChain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string                  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Namespace     *namespace.NetNamespace `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`                                                                           // network namespace in which this rule chain is applied
	Interfaces    []string                `protobuf:"bytes,3,rep,name=interfaces,proto3" json:"interfaces,omitempty"`                                                                         // list of interfaces referred by the rules (optional)
	Protocol      RuleChain_Protocol      `protobuf:"varint,4,opt,name=protocol,proto3,enum=ligato.linux.iptables.RuleChain_Protocol" json:"protocol,omitempty"`                              // protocol (address family) of the rule chain
	Table         RuleChain_Table         `protobuf:"varint,5,opt,name=table,proto3,enum=ligato.linux.iptables.RuleChain_Table" json:"table,omitempty"`                                       // table the rule chain belongs to
	ChainType     RuleChain_ChainType     `protobuf:"varint,6,opt,name=chain_type,json=chainType,proto3,enum=ligato.linux.iptables.RuleChain_ChainType" json:"chain_type,omitempty"`          // type of the chain
	ChainName     string                  `protobuf:"bytes,7,opt,name=chain_name,json=chainName,proto3" json:"chain_name,omitempty"`                                                          // name of the chain, used only for chains with CUSTOM chain_type
	DefaultPolicy RuleChain_Policy        `protobuf:"varint,8,opt,name=default_policy,json=defaultPolicy,proto3,enum=ligato.linux.iptables.RuleChain_Policy" json:"default_policy,omitempty"` // default policy of the chain. Used for FILTER tables only.
	Rules         []string                `protobuf:"bytes,10,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (x *RuleChain) Reset() {
	*x = RuleChain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ligato_linux_iptables_iptables_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuleChain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleChain) ProtoMessage() {}

func (x *RuleChain) ProtoReflect() protoreflect.Message {
	mi := &file_ligato_linux_iptables_iptables_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleChain.ProtoReflect.Descriptor instead.
func (*RuleChain) Descriptor() ([]byte, []int) {
	return file_ligato_linux_iptables_iptables_proto_rawDescGZIP(), []int{0}
}

func (x *RuleChain) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RuleChain) GetNamespace() *namespace.NetNamespace {
	if x != nil {
		return x.Namespace
	}
	return nil
}

func (x *RuleChain) GetInterfaces() []string {
	if x != nil {
		return x.Interfaces
	}
	return nil
}

func (x *RuleChain) GetProtocol() RuleChain_Protocol {
	if x != nil {
		return x.Protocol
	}
	return RuleChain_IPV4
}

func (x *RuleChain) GetTable() RuleChain_Table {
	if x != nil {
		return x.Table
	}
	return RuleChain_FILTER
}

func (x *RuleChain) GetChainType() RuleChain_ChainType {
	if x != nil {
		return x.ChainType
	}
	return RuleChain_CUSTOM
}

func (x *RuleChain) GetChainName() string {
	if x != nil {
		return x.ChainName
	}
	return ""
}

func (x *RuleChain) GetDefaultPolicy() RuleChain_Policy {
	if x != nil {
		return x.DefaultPolicy
	}
	return RuleChain_NONE
}

func (x *RuleChain) GetRules() []string {
	if x != nil {
		return x.Rules
	}
	return nil
}

var File_ligato_linux_iptables_iptables_proto protoreflect.FileDescriptor

var file_ligato_linux_iptables_iptables_proto_rawDesc = []byte{
	0x0a, 0x24, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2f, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x2f, 0x69,
	0x70, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x2f, 0x69, 0x70, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2e, 0x6c,
	0x69, 0x6e, 0x75, 0x78, 0x2e, 0x69, 0x70, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x1a, 0x26, 0x6c,
	0x69, 0x67, 0x61, 0x74, 0x6f, 0x2f, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x2f, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd8, 0x05, 0x0a, 0x09, 0x52, 0x75, 0x6c, 0x65, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6c, 0x69, 0x67,
	0x61, 0x74, 0x6f, 0x2e, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x2e, 0x4e, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e,
	0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2e, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x2e, 0x69, 0x70, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x12, 0x3c, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x26, 0x2e, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2e, 0x6c, 0x69, 0x6e, 0x75, 0x78,
	0x2e, 0x69, 0x70, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x49, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2e, 0x6c, 0x69,
	0x6e, 0x75, 0x78, 0x2e, 0x69, 0x70, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x2e, 0x52, 0x75, 0x6c,
	0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x0e, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2e, 0x6c, 0x69, 0x6e, 0x75,
	0x78, 0x2e, 0x69, 0x70, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0d, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x75,
	0x6c, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73,
	0x22, 0x1e, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x08, 0x0a, 0x04,
	0x49, 0x50, 0x56, 0x34, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x50, 0x56, 0x36, 0x10, 0x01,
	0x22, 0x3f, 0x0a, 0x05, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x49, 0x4c,
	0x54, 0x45, 0x52, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x41, 0x54, 0x10, 0x01, 0x12, 0x0a,
	0x0a, 0x06, 0x4d, 0x41, 0x4e, 0x47, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x41,
	0x57, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x10,
	0x04, 0x22, 0x5c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a,
	0x0a, 0x06, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4e,
	0x50, 0x55, 0x54, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x10,
	0x02, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x10, 0x03, 0x12, 0x0e,
	0x0a, 0x0a, 0x50, 0x52, 0x45, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x0f,
	0x0a, 0x0b, 0x50, 0x4f, 0x53, 0x54, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x22,
	0x3f, 0x0a, 0x06, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e,
	0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x10, 0x01, 0x12,
	0x08, 0x0a, 0x04, 0x44, 0x52, 0x4f, 0x50, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x51, 0x55, 0x45,
	0x55, 0x45, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x54, 0x55, 0x52, 0x4e, 0x10, 0x04,
	0x42, 0x46, 0x5a, 0x44, 0x67, 0x6f, 0x2e, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2e, 0x69, 0x6f,
	0x2f, 0x76, 0x70, 0x70, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x33, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2f, 0x6c, 0x69, 0x6e, 0x75, 0x78,
	0x2f, 0x69, 0x70, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x3b, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x5f,
	0x69, 0x70, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ligato_linux_iptables_iptables_proto_rawDescOnce sync.Once
	file_ligato_linux_iptables_iptables_proto_rawDescData = file_ligato_linux_iptables_iptables_proto_rawDesc
)

func file_ligato_linux_iptables_iptables_proto_rawDescGZIP() []byte {
	file_ligato_linux_iptables_iptables_proto_rawDescOnce.Do(func() {
		file_ligato_linux_iptables_iptables_proto_rawDescData = protoimpl.X.CompressGZIP(file_ligato_linux_iptables_iptables_proto_rawDescData)
	})
	return file_ligato_linux_iptables_iptables_proto_rawDescData
}

var file_ligato_linux_iptables_iptables_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_ligato_linux_iptables_iptables_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_ligato_linux_iptables_iptables_proto_goTypes = []interface{}{
	(RuleChain_Protocol)(0),        // 0: ligato.linux.iptables.RuleChain.Protocol
	(RuleChain_Table)(0),           // 1: ligato.linux.iptables.RuleChain.Table
	(RuleChain_ChainType)(0),       // 2: ligato.linux.iptables.RuleChain.ChainType
	(RuleChain_Policy)(0),          // 3: ligato.linux.iptables.RuleChain.Policy
	(*RuleChain)(nil),              // 4: ligato.linux.iptables.RuleChain
	(*namespace.NetNamespace)(nil), // 5: ligato.linux.namespace.NetNamespace
}
var file_ligato_linux_iptables_iptables_proto_depIdxs = []int32{
	5, // 0: ligato.linux.iptables.RuleChain.namespace:type_name -> ligato.linux.namespace.NetNamespace
	0, // 1: ligato.linux.iptables.RuleChain.protocol:type_name -> ligato.linux.iptables.RuleChain.Protocol
	1, // 2: ligato.linux.iptables.RuleChain.table:type_name -> ligato.linux.iptables.RuleChain.Table
	2, // 3: ligato.linux.iptables.RuleChain.chain_type:type_name -> ligato.linux.iptables.RuleChain.ChainType
	3, // 4: ligato.linux.iptables.RuleChain.default_policy:type_name -> ligato.linux.iptables.RuleChain.Policy
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_ligato_linux_iptables_iptables_proto_init() }
func file_ligato_linux_iptables_iptables_proto_init() {
	if File_ligato_linux_iptables_iptables_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ligato_linux_iptables_iptables_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuleChain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ligato_linux_iptables_iptables_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ligato_linux_iptables_iptables_proto_goTypes,
		DependencyIndexes: file_ligato_linux_iptables_iptables_proto_depIdxs,
		EnumInfos:         file_ligato_linux_iptables_iptables_proto_enumTypes,
		MessageInfos:      file_ligato_linux_iptables_iptables_proto_msgTypes,
	}.Build()
	File_ligato_linux_iptables_iptables_proto = out.File
	file_ligato_linux_iptables_iptables_proto_rawDesc = nil
	file_ligato_linux_iptables_iptables_proto_goTypes = nil
	file_ligato_linux_iptables_iptables_proto_depIdxs = nil
}
