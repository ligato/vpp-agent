// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.4
// source: ligato/linux/interfaces/interface.proto

package linux_interfaces

import (
	proto "github.com/golang/protobuf/proto"
	namespace "go.ligato.io/vpp-agent/v3/proto/ligato/linux/namespace"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Interface_Type int32

const (
	Interface_UNDEFINED  Interface_Type = 0
	Interface_VETH       Interface_Type = 1
	Interface_TAP_TO_VPP Interface_Type = 2 // TAP created by VPP to have the Linux-side further configured
	Interface_LOOPBACK   Interface_Type = 3
	Interface_EXISTING   Interface_Type = 4
)

// Enum value maps for Interface_Type.
var (
	Interface_Type_name = map[int32]string{
		0: "UNDEFINED",
		1: "VETH",
		2: "TAP_TO_VPP",
		3: "LOOPBACK",
		4: "EXISTING",
	}
	Interface_Type_value = map[string]int32{
		"UNDEFINED":  0,
		"VETH":       1,
		"TAP_TO_VPP": 2,
		"LOOPBACK":   3,
		"EXISTING":   4,
	}
)

func (x Interface_Type) Enum() *Interface_Type {
	p := new(Interface_Type)
	*p = x
	return p
}

func (x Interface_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Interface_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_ligato_linux_interfaces_interface_proto_enumTypes[0].Descriptor()
}

func (Interface_Type) Type() protoreflect.EnumType {
	return &file_ligato_linux_interfaces_interface_proto_enumTypes[0]
}

func (x Interface_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Interface_Type.Descriptor instead.
func (Interface_Type) EnumDescriptor() ([]byte, []int) {
	return file_ligato_linux_interfaces_interface_proto_rawDescGZIP(), []int{0, 0}
}

type VethLink_ChecksumOffloading int32

const (
	VethLink_CHKSM_OFFLOAD_DEFAULT  VethLink_ChecksumOffloading = 0
	VethLink_CHKSM_OFFLOAD_ENABLED  VethLink_ChecksumOffloading = 1
	VethLink_CHKSM_OFFLOAD_DISABLED VethLink_ChecksumOffloading = 2
)

// Enum value maps for VethLink_ChecksumOffloading.
var (
	VethLink_ChecksumOffloading_name = map[int32]string{
		0: "CHKSM_OFFLOAD_DEFAULT",
		1: "CHKSM_OFFLOAD_ENABLED",
		2: "CHKSM_OFFLOAD_DISABLED",
	}
	VethLink_ChecksumOffloading_value = map[string]int32{
		"CHKSM_OFFLOAD_DEFAULT":  0,
		"CHKSM_OFFLOAD_ENABLED":  1,
		"CHKSM_OFFLOAD_DISABLED": 2,
	}
)

func (x VethLink_ChecksumOffloading) Enum() *VethLink_ChecksumOffloading {
	p := new(VethLink_ChecksumOffloading)
	*p = x
	return p
}

func (x VethLink_ChecksumOffloading) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VethLink_ChecksumOffloading) Descriptor() protoreflect.EnumDescriptor {
	return file_ligato_linux_interfaces_interface_proto_enumTypes[1].Descriptor()
}

func (VethLink_ChecksumOffloading) Type() protoreflect.EnumType {
	return &file_ligato_linux_interfaces_interface_proto_enumTypes[1]
}

func (x VethLink_ChecksumOffloading) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VethLink_ChecksumOffloading.Descriptor instead.
func (VethLink_ChecksumOffloading) EnumDescriptor() ([]byte, []int) {
	return file_ligato_linux_interfaces_interface_proto_rawDescGZIP(), []int{1, 0}
}

type Interface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name is mandatory field representing logical name for the interface.
	// It must be unique across all configured interfaces.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Type represents the type of interface and It must match with actual Link.
	Type Interface_Type `protobuf:"varint,2,opt,name=type,proto3,enum=ligato.linux.interfaces.Interface_Type" json:"type,omitempty"`
	// Namespace is a reference to a Linux network namespace where the interface
	// should be put into.
	Namespace *namespace.NetNamespace `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Name of the interface in the host OS. If not set, the host name will be
	// the same as the interface logical name.
	HostIfName string `protobuf:"bytes,4,opt,name=host_if_name,json=hostIfName,proto3" json:"host_if_name,omitempty"`
	// Enabled controls if the interface should be UP.
	Enabled bool `protobuf:"varint,5,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// IPAddresses define list of IP addresses for the interface and must be
	// defined in the following format: <ipAddress>/<ipPrefix>.
	// Interface IP address can be also allocated via netalloc plugin and
	// referenced here, see: api/models/netalloc/netalloc.proto
	IpAddresses []string `protobuf:"bytes,6,rep,name=ip_addresses,json=ipAddresses,proto3" json:"ip_addresses,omitempty"`
	// PhysAddress represents physical address (MAC) of the interface.
	// Random address will be assigned if left empty.
	PhysAddress string `protobuf:"bytes,7,opt,name=phys_address,json=physAddress,proto3" json:"phys_address,omitempty"`
	// MTU is the maximum transmission unit value.
	Mtu uint32 `protobuf:"varint,8,opt,name=mtu,proto3" json:"mtu,omitempty"`
	// Types that are assignable to Link:
	//	*Interface_Veth
	//	*Interface_Tap
	Link isInterface_Link `protobuf_oneof:"link"`
	// Configure/Resync link only. IP/MAC addresses are expected to be configured
	// externally - i.e. by a different agent or manually via CLI.
	LinkOnly bool `protobuf:"varint,9,opt,name=link_only,json=linkOnly,proto3" json:"link_only,omitempty"`
}

func (x *Interface) Reset() {
	*x = Interface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ligato_linux_interfaces_interface_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interface) ProtoMessage() {}

func (x *Interface) ProtoReflect() protoreflect.Message {
	mi := &file_ligato_linux_interfaces_interface_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interface.ProtoReflect.Descriptor instead.
func (*Interface) Descriptor() ([]byte, []int) {
	return file_ligato_linux_interfaces_interface_proto_rawDescGZIP(), []int{0}
}

func (x *Interface) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Interface) GetType() Interface_Type {
	if x != nil {
		return x.Type
	}
	return Interface_UNDEFINED
}

func (x *Interface) GetNamespace() *namespace.NetNamespace {
	if x != nil {
		return x.Namespace
	}
	return nil
}

func (x *Interface) GetHostIfName() string {
	if x != nil {
		return x.HostIfName
	}
	return ""
}

func (x *Interface) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Interface) GetIpAddresses() []string {
	if x != nil {
		return x.IpAddresses
	}
	return nil
}

func (x *Interface) GetPhysAddress() string {
	if x != nil {
		return x.PhysAddress
	}
	return ""
}

func (x *Interface) GetMtu() uint32 {
	if x != nil {
		return x.Mtu
	}
	return 0
}

func (m *Interface) GetLink() isInterface_Link {
	if m != nil {
		return m.Link
	}
	return nil
}

func (x *Interface) GetVeth() *VethLink {
	if x, ok := x.GetLink().(*Interface_Veth); ok {
		return x.Veth
	}
	return nil
}

func (x *Interface) GetTap() *TapLink {
	if x, ok := x.GetLink().(*Interface_Tap); ok {
		return x.Tap
	}
	return nil
}

func (x *Interface) GetLinkOnly() bool {
	if x != nil {
		return x.LinkOnly
	}
	return false
}

type isInterface_Link interface {
	isInterface_Link()
}

type Interface_Veth struct {
	// VETH-specific configuration
	Veth *VethLink `protobuf:"bytes,20,opt,name=veth,proto3,oneof"`
}

type Interface_Tap struct {
	// TAP_TO_VPP-specific configuration
	Tap *TapLink `protobuf:"bytes,21,opt,name=tap,proto3,oneof"`
}

func (*Interface_Veth) isInterface_Link() {}

func (*Interface_Tap) isInterface_Link() {}

type VethLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the VETH peer, i.e. other end of the linux veth (mandatory for VETH)
	PeerIfName string `protobuf:"bytes,1,opt,name=peer_if_name,json=peerIfName,proto3" json:"peer_if_name,omitempty"`
	// Checksum offloading - Rx side (enabled by default)
	RxChecksumOffloading VethLink_ChecksumOffloading `protobuf:"varint,2,opt,name=rx_checksum_offloading,json=rxChecksumOffloading,proto3,enum=ligato.linux.interfaces.VethLink_ChecksumOffloading" json:"rx_checksum_offloading,omitempty"`
	// Checksum offloading - Tx side (enabled by default)
	TxChecksumOffloading VethLink_ChecksumOffloading `protobuf:"varint,3,opt,name=tx_checksum_offloading,json=txChecksumOffloading,proto3,enum=ligato.linux.interfaces.VethLink_ChecksumOffloading" json:"tx_checksum_offloading,omitempty"`
}

func (x *VethLink) Reset() {
	*x = VethLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ligato_linux_interfaces_interface_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VethLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VethLink) ProtoMessage() {}

func (x *VethLink) ProtoReflect() protoreflect.Message {
	mi := &file_ligato_linux_interfaces_interface_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VethLink.ProtoReflect.Descriptor instead.
func (*VethLink) Descriptor() ([]byte, []int) {
	return file_ligato_linux_interfaces_interface_proto_rawDescGZIP(), []int{1}
}

func (x *VethLink) GetPeerIfName() string {
	if x != nil {
		return x.PeerIfName
	}
	return ""
}

func (x *VethLink) GetRxChecksumOffloading() VethLink_ChecksumOffloading {
	if x != nil {
		return x.RxChecksumOffloading
	}
	return VethLink_CHKSM_OFFLOAD_DEFAULT
}

func (x *VethLink) GetTxChecksumOffloading() VethLink_ChecksumOffloading {
	if x != nil {
		return x.TxChecksumOffloading
	}
	return VethLink_CHKSM_OFFLOAD_DEFAULT
}

type TapLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical name of the VPP TAP interface (mandatory for TAP_TO_VPP)
	VppTapIfName string `protobuf:"bytes,1,opt,name=vpp_tap_if_name,json=vppTapIfName,proto3" json:"vpp_tap_if_name,omitempty"`
}

func (x *TapLink) Reset() {
	*x = TapLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ligato_linux_interfaces_interface_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TapLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TapLink) ProtoMessage() {}

func (x *TapLink) ProtoReflect() protoreflect.Message {
	mi := &file_ligato_linux_interfaces_interface_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TapLink.ProtoReflect.Descriptor instead.
func (*TapLink) Descriptor() ([]byte, []int) {
	return file_ligato_linux_interfaces_interface_proto_rawDescGZIP(), []int{2}
}

func (x *TapLink) GetVppTapIfName() string {
	if x != nil {
		return x.VppTapIfName
	}
	return ""
}

var File_ligato_linux_interfaces_interface_proto protoreflect.FileDescriptor

var file_ligato_linux_interfaces_interface_proto_rawDesc = []byte{
	0x0a, 0x27, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2f, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x6c, 0x69, 0x67, 0x61, 0x74,
	0x6f, 0x2e, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x1a, 0x26, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2f, 0x6c, 0x69, 0x6e, 0x75, 0x78,
	0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x95, 0x04, 0x0a, 0x09, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6c, 0x69, 0x67,
	0x61, 0x74, 0x6f, 0x2e, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6c,
	0x69, 0x67, 0x61, 0x74, 0x6f, 0x2e, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x2e, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x4e, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x20, 0x0a,
	0x0c, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x70, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0b, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x70, 0x68, 0x79, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x79, 0x73, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x74, 0x75, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d, 0x74,
	0x75, 0x12, 0x37, 0x0a, 0x04, 0x76, 0x65, 0x74, 0x68, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2e, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x56, 0x65, 0x74, 0x68, 0x4c, 0x69,
	0x6e, 0x6b, 0x48, 0x00, 0x52, 0x04, 0x76, 0x65, 0x74, 0x68, 0x12, 0x34, 0x0a, 0x03, 0x74, 0x61,
	0x70, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f,
	0x2e, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x2e, 0x54, 0x61, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x48, 0x00, 0x52, 0x03, 0x74, 0x61, 0x70,
	0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0x4b, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x56, 0x45, 0x54, 0x48, 0x10, 0x01, 0x12, 0x0e,
	0x0a, 0x0a, 0x54, 0x41, 0x50, 0x5f, 0x54, 0x4f, 0x5f, 0x56, 0x50, 0x50, 0x10, 0x02, 0x12, 0x0c,
	0x0a, 0x08, 0x4c, 0x4f, 0x4f, 0x50, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08,
	0x45, 0x58, 0x49, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x42, 0x06, 0x0a, 0x04, 0x6c, 0x69,
	0x6e, 0x6b, 0x22, 0xec, 0x02, 0x0a, 0x08, 0x56, 0x65, 0x74, 0x68, 0x4c, 0x69, 0x6e, 0x6b, 0x12,
	0x20, 0x0a, 0x0c, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x65, 0x65, 0x72, 0x49, 0x66, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x6a, 0x0a, 0x16, 0x72, 0x78, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d,
	0x5f, 0x6f, 0x66, 0x66, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x34, 0x2e, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2e, 0x6c, 0x69, 0x6e, 0x75, 0x78,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x56, 0x65, 0x74, 0x68,
	0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x4f, 0x66, 0x66,
	0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x14, 0x72, 0x78, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x73, 0x75, 0x6d, 0x4f, 0x66, 0x66, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x6a, 0x0a,
	0x16, 0x74, 0x78, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x5f, 0x6f, 0x66, 0x66,
	0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e,
	0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2e, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x56, 0x65, 0x74, 0x68, 0x4c, 0x69, 0x6e, 0x6b,
	0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x4f, 0x66, 0x66, 0x6c, 0x6f, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x52, 0x14, 0x74, 0x78, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x4f,
	0x66, 0x66, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x66, 0x0a, 0x12, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x73, 0x75, 0x6d, 0x4f, 0x66, 0x66, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12,
	0x19, 0x0a, 0x15, 0x43, 0x48, 0x4b, 0x53, 0x4d, 0x5f, 0x4f, 0x46, 0x46, 0x4c, 0x4f, 0x41, 0x44,
	0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x48,
	0x4b, 0x53, 0x4d, 0x5f, 0x4f, 0x46, 0x46, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x45, 0x4e, 0x41, 0x42,
	0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x48, 0x4b, 0x53, 0x4d, 0x5f, 0x4f,
	0x46, 0x46, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10,
	0x02, 0x22, 0x30, 0x0a, 0x07, 0x54, 0x61, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x25, 0x0a, 0x0f,
	0x76, 0x70, 0x70, 0x5f, 0x74, 0x61, 0x70, 0x5f, 0x69, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x70, 0x70, 0x54, 0x61, 0x70, 0x49, 0x66, 0x4e,
	0x61, 0x6d, 0x65, 0x42, 0x4a, 0x5a, 0x48, 0x67, 0x6f, 0x2e, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f,
	0x2e, 0x69, 0x6f, 0x2f, 0x76, 0x70, 0x70, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x33,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2f, 0x6c, 0x69,
	0x6e, 0x75, 0x78, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x3b, 0x6c,
	0x69, 0x6e, 0x75, 0x78, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ligato_linux_interfaces_interface_proto_rawDescOnce sync.Once
	file_ligato_linux_interfaces_interface_proto_rawDescData = file_ligato_linux_interfaces_interface_proto_rawDesc
)

func file_ligato_linux_interfaces_interface_proto_rawDescGZIP() []byte {
	file_ligato_linux_interfaces_interface_proto_rawDescOnce.Do(func() {
		file_ligato_linux_interfaces_interface_proto_rawDescData = protoimpl.X.CompressGZIP(file_ligato_linux_interfaces_interface_proto_rawDescData)
	})
	return file_ligato_linux_interfaces_interface_proto_rawDescData
}

var file_ligato_linux_interfaces_interface_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_ligato_linux_interfaces_interface_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_ligato_linux_interfaces_interface_proto_goTypes = []interface{}{
	(Interface_Type)(0),              // 0: ligato.linux.interfaces.Interface.Type
	(VethLink_ChecksumOffloading)(0), // 1: ligato.linux.interfaces.VethLink.ChecksumOffloading
	(*Interface)(nil),                // 2: ligato.linux.interfaces.Interface
	(*VethLink)(nil),                 // 3: ligato.linux.interfaces.VethLink
	(*TapLink)(nil),                  // 4: ligato.linux.interfaces.TapLink
	(*namespace.NetNamespace)(nil),   // 5: ligato.linux.namespace.NetNamespace
}
var file_ligato_linux_interfaces_interface_proto_depIdxs = []int32{
	0, // 0: ligato.linux.interfaces.Interface.type:type_name -> ligato.linux.interfaces.Interface.Type
	5, // 1: ligato.linux.interfaces.Interface.namespace:type_name -> ligato.linux.namespace.NetNamespace
	3, // 2: ligato.linux.interfaces.Interface.veth:type_name -> ligato.linux.interfaces.VethLink
	4, // 3: ligato.linux.interfaces.Interface.tap:type_name -> ligato.linux.interfaces.TapLink
	1, // 4: ligato.linux.interfaces.VethLink.rx_checksum_offloading:type_name -> ligato.linux.interfaces.VethLink.ChecksumOffloading
	1, // 5: ligato.linux.interfaces.VethLink.tx_checksum_offloading:type_name -> ligato.linux.interfaces.VethLink.ChecksumOffloading
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_ligato_linux_interfaces_interface_proto_init() }
func file_ligato_linux_interfaces_interface_proto_init() {
	if File_ligato_linux_interfaces_interface_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ligato_linux_interfaces_interface_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ligato_linux_interfaces_interface_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VethLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ligato_linux_interfaces_interface_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TapLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_ligato_linux_interfaces_interface_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Interface_Veth)(nil),
		(*Interface_Tap)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ligato_linux_interfaces_interface_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ligato_linux_interfaces_interface_proto_goTypes,
		DependencyIndexes: file_ligato_linux_interfaces_interface_proto_depIdxs,
		EnumInfos:         file_ligato_linux_interfaces_interface_proto_enumTypes,
		MessageInfos:      file_ligato_linux_interfaces_interface_proto_msgTypes,
	}.Build()
	File_ligato_linux_interfaces_interface_proto = out.File
	file_ligato_linux_interfaces_interface_proto_rawDesc = nil
	file_ligato_linux_interfaces_interface_proto_goTypes = nil
	file_ligato_linux_interfaces_interface_proto_depIdxs = nil
}
