// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.4
// source: ligato/netalloc/netalloc.proto

// Netalloc allows to disassociate topology from addressing in the network
// configuration. Instead of inserting specific IP/MAC addresses, VXLAN VNIs, etc.,
// into the configuration data for interfaces, routes, ARPs and other network
// objects, the addresses can be symbolic references into the pool of allocated
// addresses known to the netalloc plugin.
//
// The ability to separate addresses from the rest of the network configuration
// is especially useful in scenarios where address allocations are provided
// externally, for example by another control-plane agent, IPAM tool or by CNI
// in containerized environments.
//
// But for now, only model for IP address allocations has been implemented.
// To allocate a new IP address, an instance of the proto message IPAllocation
// should be submitted into the vpp-agent through one of the supported NB
// transports (etcd, GRPC, ...) under the corresponding key. Network object which
// references (to-be or already) allocated address will have a dependency on the
// corresponding key-value instance of IPAllocation and will read and apply the
// address only once it is available.

package netalloc

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// IPAddressForm can be used in descriptors whose models reference allocated IP
// addresses, to ask for a specific form in which the address should applied.
type IPAddressForm int32

const (
	IPAddressForm_UNDEFINED_FORM IPAddressForm = 0
	// ADDR_ONLY = apply address without mask, e.g. 192.168.2.5
	IPAddressForm_ADDR_ONLY IPAddressForm = 1
	// ADDR_WITH_MASK = apply address including the mask of the network,
	// e.g. 192.168.2.5/24
	IPAddressForm_ADDR_WITH_MASK IPAddressForm = 2
	// ADDR_NET = apply network implied by the address,
	// e.g. for 192.168.2.10/24 apply 192.168.2.0/24
	IPAddressForm_ADDR_NET IPAddressForm = 3
	// SINGLE_ADDR_NET = apply address with an all-ones mask (i.e. /32 for IPv4,
	// /128 for IPv6)
	IPAddressForm_SINGLE_ADDR_NET IPAddressForm = 4
)

// Enum value maps for IPAddressForm.
var (
	IPAddressForm_name = map[int32]string{
		0: "UNDEFINED_FORM",
		1: "ADDR_ONLY",
		2: "ADDR_WITH_MASK",
		3: "ADDR_NET",
		4: "SINGLE_ADDR_NET",
	}
	IPAddressForm_value = map[string]int32{
		"UNDEFINED_FORM":  0,
		"ADDR_ONLY":       1,
		"ADDR_WITH_MASK":  2,
		"ADDR_NET":        3,
		"SINGLE_ADDR_NET": 4,
	}
)

func (x IPAddressForm) Enum() *IPAddressForm {
	p := new(IPAddressForm)
	*p = x
	return p
}

func (x IPAddressForm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IPAddressForm) Descriptor() protoreflect.EnumDescriptor {
	return file_ligato_netalloc_netalloc_proto_enumTypes[0].Descriptor()
}

func (IPAddressForm) Type() protoreflect.EnumType {
	return &file_ligato_netalloc_netalloc_proto_enumTypes[0]
}

func (x IPAddressForm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IPAddressForm.Descriptor instead.
func (IPAddressForm) EnumDescriptor() ([]byte, []int) {
	return file_ligato_netalloc_netalloc_proto_rawDescGZIP(), []int{0}
}

// IPAddressSource can be used to remember the source of an IP address.
// (e.g. to distinguish allocated IP addresses from statically defined ones)
type IPAddressSource int32

const (
	IPAddressSource_UNDEFINED_SOURCE IPAddressSource = 0
	// STATIC is IP address statically assigned in the NB configuration.
	IPAddressSource_STATIC IPAddressSource = 1
	// FROM_DHCP is set when IP address is obtained from DHCP.
	IPAddressSource_FROM_DHCP IPAddressSource = 2
	// ALLOC_REF is a reference inside NB configuration to an allocated
	// IP address.
	IPAddressSource_ALLOC_REF IPAddressSource = 3
)

// Enum value maps for IPAddressSource.
var (
	IPAddressSource_name = map[int32]string{
		0: "UNDEFINED_SOURCE",
		1: "STATIC",
		2: "FROM_DHCP",
		3: "ALLOC_REF",
	}
	IPAddressSource_value = map[string]int32{
		"UNDEFINED_SOURCE": 0,
		"STATIC":           1,
		"FROM_DHCP":        2,
		"ALLOC_REF":        3,
	}
)

func (x IPAddressSource) Enum() *IPAddressSource {
	p := new(IPAddressSource)
	*p = x
	return p
}

func (x IPAddressSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IPAddressSource) Descriptor() protoreflect.EnumDescriptor {
	return file_ligato_netalloc_netalloc_proto_enumTypes[1].Descriptor()
}

func (IPAddressSource) Type() protoreflect.EnumType {
	return &file_ligato_netalloc_netalloc_proto_enumTypes[1]
}

func (x IPAddressSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IPAddressSource.Descriptor instead.
func (IPAddressSource) EnumDescriptor() ([]byte, []int) {
	return file_ligato_netalloc_netalloc_proto_rawDescGZIP(), []int{1}
}

// IPAllocation represents a single allocated IP address.
//
// To reference allocated address, instead of entering specific IP address
// for interface/route/ARP/..., use one of the following string templates
// prefixed with netalloc keyword "alloc" followed by colon:
//  a) reference IP address allocated for an interface:
//        "alloc:<network_name>/<interface_name>"
//  b) when interface is given (e.g. when asked for IP from interface model),
//     interface_name can be omitted:
//        "alloc:<network_name>"
//  c) reference default gateway IP address assigned to an interface:
//        "alloc:<network_name>/<interface_name>/GW"
//  d) when asking for GW IP for interface which is given, interface_name
//     can be omitted:
//        "alloc:<network_name>/GW"
type IPAllocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// NetworkName is some label assigned to the network where the IP address
	// was assigned to the given interface.
	// In theory, interface can have multiple IP adresses or there can be multiple
	// address allocators and the network name allows to separate them.
	// The network name is not allowed to contain forward slashes.
	NetworkName string `protobuf:"bytes,1,opt,name=network_name,json=networkName,proto3" json:"network_name,omitempty"`
	// InterfaceName is the logical VPP or Linux interface name for which the
	// address is allocated.
	InterfaceName string `protobuf:"bytes,2,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
	// Address is an IP addres allocated to the interface inside the given
	// network.
	// If the address is specified without a mask, the all-ones mask (/32 for
	// IPv4, /128 for IPv6) will be assumed.
	Address string `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	// Gw is the address of the default gateway assigned to the interface in
	// the given network.
	// If the address is specified without a mask, then either:
	//  a) the mask of the <address> is used provided that GW IP falls into the
	//     same network IP range, or
	//  b) the all-ones mask is used otherwise
	Gw string `protobuf:"bytes,5,opt,name=gw,proto3" json:"gw,omitempty"`
}

func (x *IPAllocation) Reset() {
	*x = IPAllocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ligato_netalloc_netalloc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPAllocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPAllocation) ProtoMessage() {}

func (x *IPAllocation) ProtoReflect() protoreflect.Message {
	mi := &file_ligato_netalloc_netalloc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPAllocation.ProtoReflect.Descriptor instead.
func (*IPAllocation) Descriptor() ([]byte, []int) {
	return file_ligato_netalloc_netalloc_proto_rawDescGZIP(), []int{0}
}

func (x *IPAllocation) GetNetworkName() string {
	if x != nil {
		return x.NetworkName
	}
	return ""
}

func (x *IPAllocation) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

func (x *IPAllocation) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *IPAllocation) GetGw() string {
	if x != nil {
		return x.Gw
	}
	return ""
}

// ConfigData wraps all configuration items exported by netalloc.
// TBD: MACs, VXLAN VNIs, memif IDs, etc.
type ConfigData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpAddresses []*IPAllocation `protobuf:"bytes,10,rep,name=ip_addresses,json=ipAddresses,proto3" json:"ip_addresses,omitempty"`
}

func (x *ConfigData) Reset() {
	*x = ConfigData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ligato_netalloc_netalloc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigData) ProtoMessage() {}

func (x *ConfigData) ProtoReflect() protoreflect.Message {
	mi := &file_ligato_netalloc_netalloc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigData.ProtoReflect.Descriptor instead.
func (*ConfigData) Descriptor() ([]byte, []int) {
	return file_ligato_netalloc_netalloc_proto_rawDescGZIP(), []int{1}
}

func (x *ConfigData) GetIpAddresses() []*IPAllocation {
	if x != nil {
		return x.IpAddresses
	}
	return nil
}

var File_ligato_netalloc_netalloc_proto protoreflect.FileDescriptor

var file_ligato_netalloc_netalloc_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2f, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6c, 0x6f,
	0x63, 0x2f, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0f, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2e, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6c, 0x6f,
	0x63, 0x22, 0x82, 0x01, 0x0a, 0x0c, 0x49, 0x50, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x67, 0x77, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x67, 0x77, 0x22, 0x4e, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x40, 0x0a, 0x0c, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6c, 0x69, 0x67,
	0x61, 0x74, 0x6f, 0x2e, 0x6e, 0x65, 0x74, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x2e, 0x49, 0x50, 0x41,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x69, 0x70, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2a, 0x69, 0x0a, 0x0d, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x46, 0x6f, 0x72, 0x6d, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x4e, 0x44, 0x45, 0x46,
	0x49, 0x4e, 0x45, 0x44, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x41,
	0x44, 0x44, 0x52, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x44,
	0x44, 0x52, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x4d, 0x41, 0x53, 0x4b, 0x10, 0x02, 0x12, 0x0c,
	0x0a, 0x08, 0x41, 0x44, 0x44, 0x52, 0x5f, 0x4e, 0x45, 0x54, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f,
	0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x5f, 0x4e, 0x45, 0x54, 0x10,
	0x04, 0x2a, 0x51, 0x0a, 0x0f, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45,
	0x44, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54,
	0x41, 0x54, 0x49, 0x43, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x44,
	0x48, 0x43, 0x50, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x5f, 0x52,
	0x45, 0x46, 0x10, 0x03, 0x42, 0x31, 0x5a, 0x2f, 0x67, 0x6f, 0x2e, 0x6c, 0x69, 0x67, 0x61, 0x74,
	0x6f, 0x2e, 0x69, 0x6f, 0x2f, 0x76, 0x70, 0x70, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x76,
	0x33, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2f, 0x6e,
	0x65, 0x74, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ligato_netalloc_netalloc_proto_rawDescOnce sync.Once
	file_ligato_netalloc_netalloc_proto_rawDescData = file_ligato_netalloc_netalloc_proto_rawDesc
)

func file_ligato_netalloc_netalloc_proto_rawDescGZIP() []byte {
	file_ligato_netalloc_netalloc_proto_rawDescOnce.Do(func() {
		file_ligato_netalloc_netalloc_proto_rawDescData = protoimpl.X.CompressGZIP(file_ligato_netalloc_netalloc_proto_rawDescData)
	})
	return file_ligato_netalloc_netalloc_proto_rawDescData
}

var file_ligato_netalloc_netalloc_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_ligato_netalloc_netalloc_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_ligato_netalloc_netalloc_proto_goTypes = []interface{}{
	(IPAddressForm)(0),   // 0: ligato.netalloc.IPAddressForm
	(IPAddressSource)(0), // 1: ligato.netalloc.IPAddressSource
	(*IPAllocation)(nil), // 2: ligato.netalloc.IPAllocation
	(*ConfigData)(nil),   // 3: ligato.netalloc.ConfigData
}
var file_ligato_netalloc_netalloc_proto_depIdxs = []int32{
	2, // 0: ligato.netalloc.ConfigData.ip_addresses:type_name -> ligato.netalloc.IPAllocation
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_ligato_netalloc_netalloc_proto_init() }
func file_ligato_netalloc_netalloc_proto_init() {
	if File_ligato_netalloc_netalloc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ligato_netalloc_netalloc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPAllocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ligato_netalloc_netalloc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ligato_netalloc_netalloc_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ligato_netalloc_netalloc_proto_goTypes,
		DependencyIndexes: file_ligato_netalloc_netalloc_proto_depIdxs,
		EnumInfos:         file_ligato_netalloc_netalloc_proto_enumTypes,
		MessageInfos:      file_ligato_netalloc_netalloc_proto_msgTypes,
	}.Build()
	File_ligato_netalloc_netalloc_proto = out.File
	file_ligato_netalloc_netalloc_proto_rawDesc = nil
	file_ligato_netalloc_netalloc_proto_goTypes = nil
	file_ligato_netalloc_netalloc_proto_depIdxs = nil
}
