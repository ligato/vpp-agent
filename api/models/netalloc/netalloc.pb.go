// Code generated by protoc-gen-go. DO NOT EDIT.
// source: models/netalloc/netalloc.proto

// Netalloc allows to disassociate topology from addressing in the network
// configuration. Instead of inserting specific IP/MAC addresses, VXLAN VNIs, etc.,
// into the configuration data for interfaces, routes, ARPs and other network
// objects, the addresses can be symbolic references into the pool of allocated
// addresses known to the netalloc plugin.
//
// The ability to separate addresses from the rest of the network configuration
// is especially useful in scenarios where address allocations are provided
// externally, for example by another control-plane agent, IPAM tool or by CNI
// in containerized environments.
//
// But for now, only model for IP address allocations has been implemented.
// To allocate a new IP address, an instance of the proto message IPAllocation
// should be submitted into the vpp-agent through one of the supported NB
// transports (etcd, GRPC, ...) under the corresponding key. Network object which
// references (to-be or already) allocated address will have a dependency on the
// corresponding key-value instance of IPAllocation and will read and apply the
// address only once it is available.

package netalloc

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// IPAddressForm can be used in descriptors whose models reference allocated IP
// addresses, to ask for a specific form in which the address should applied.
type IPAddressForm int32

const (
	IPAddressForm_UNDEFINED_FORM IPAddressForm = 0
	// ADDR_ONLY = apply address without mask, e.g. 192.168.2.5
	IPAddressForm_ADDR_ONLY IPAddressForm = 1
	// ADDR_WITH_MASK = apply address including the mask of the network,
	// e.g. 192.168.2.5/24
	IPAddressForm_ADDR_WITH_MASK IPAddressForm = 2
	// ADDR_NET = apply network implied by the address,
	// e.g. for 192.168.2.10/24 apply 192.168.2.0/24
	IPAddressForm_ADDR_NET IPAddressForm = 3
	// SINGLE_ADDR_NET = apply address with an all-ones mask (i.e. /32 for IPv4,
	// /128 for IPv6)
	IPAddressForm_SINGLE_ADDR_NET IPAddressForm = 4
)

var IPAddressForm_name = map[int32]string{
	0: "UNDEFINED_FORM",
	1: "ADDR_ONLY",
	2: "ADDR_WITH_MASK",
	3: "ADDR_NET",
	4: "SINGLE_ADDR_NET",
}

var IPAddressForm_value = map[string]int32{
	"UNDEFINED_FORM":  0,
	"ADDR_ONLY":       1,
	"ADDR_WITH_MASK":  2,
	"ADDR_NET":        3,
	"SINGLE_ADDR_NET": 4,
}

func (x IPAddressForm) String() string {
	return proto.EnumName(IPAddressForm_name, int32(x))
}

func (IPAddressForm) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_871b6a8ed3ae2830, []int{0}
}

// IPAddressSource can be used to remember the source of an IP address.
// (e.g. to distinguish allocated IP addresses from statically defined ones)
type IPAddressSource int32

const (
	IPAddressSource_UNDEFINED_SOURCE IPAddressSource = 0
	// STATIC is IP address statically assigned in the NB configuration.
	IPAddressSource_STATIC IPAddressSource = 1
	// FROM_DHCP is set when IP address is obtained from DHCP.
	IPAddressSource_FROM_DHCP IPAddressSource = 2
	// ALLOC_REF is a reference inside NB configuration to an allocated
	// IP address.
	IPAddressSource_ALLOC_REF IPAddressSource = 3
)

var IPAddressSource_name = map[int32]string{
	0: "UNDEFINED_SOURCE",
	1: "STATIC",
	2: "FROM_DHCP",
	3: "ALLOC_REF",
}

var IPAddressSource_value = map[string]int32{
	"UNDEFINED_SOURCE": 0,
	"STATIC":           1,
	"FROM_DHCP":        2,
	"ALLOC_REF":        3,
}

func (x IPAddressSource) String() string {
	return proto.EnumName(IPAddressSource_name, int32(x))
}

func (IPAddressSource) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_871b6a8ed3ae2830, []int{1}
}

// IPAllocation represents a single allocated IP address.
//
// To reference allocated address, instead of entering specific IP address
// for interface/route/ARP/..., use one of the following string templates
// prefixed with netalloc keyword "alloc" followed by colon:
//  a) reference IP address allocated for an interface:
//        "alloc:<network_name>/<interface_name>"
//  b) when interface is given (e.g. when asked for IP from interface model),
//     interface_name can be omitted:
//        "alloc:<network_name>"
//  c) reference default gateway IP address assigned to an interface:
//        "alloc:<network_name>/<interface_name>/GW"
//  d) when asking for GW IP for interface which is given, interface_name
//     can be omitted:
//        "alloc:<network_name>/GW"
type IPAllocation struct {
	// NetworkName is some label assigned to the network where the IP address
	// was assigned to the given interface.
	// In theory, interface can have multiple IP adresses or there can be multiple
	// address allocators and the network name allows to separate them.
	// The network name is not allowed to contain forward slashes.
	NetworkName string `protobuf:"bytes,1,opt,name=network_name,json=networkName,proto3" json:"network_name,omitempty"`
	// InterfaceName is the logical VPP or Linux interface name for which the
	// address is allocated.
	InterfaceName string `protobuf:"bytes,2,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
	// Address is an IP addres allocated to the interface inside the given
	// network.
	// If the address is specified without a mask, the all-ones mask (/32 for
	// IPv4, /128 for IPv6) will be assumed.
	Address string `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	// Gw is the address of the default gateway assigned to the interface in
	// the given network.
	// If the address is specified without a mask, then either:
	//  a) the mask of the <address> is used provided that GW IP falls into the
	//     same network IP range, or
	//  b) the all-ones mask is used otherwise
	Gw                   string   `protobuf:"bytes,5,opt,name=gw,proto3" json:"gw,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IPAllocation) Reset()         { *m = IPAllocation{} }
func (m *IPAllocation) String() string { return proto.CompactTextString(m) }
func (*IPAllocation) ProtoMessage()    {}
func (*IPAllocation) Descriptor() ([]byte, []int) {
	return fileDescriptor_871b6a8ed3ae2830, []int{0}
}

func (m *IPAllocation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IPAllocation.Unmarshal(m, b)
}
func (m *IPAllocation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IPAllocation.Marshal(b, m, deterministic)
}
func (m *IPAllocation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IPAllocation.Merge(m, src)
}
func (m *IPAllocation) XXX_Size() int {
	return xxx_messageInfo_IPAllocation.Size(m)
}
func (m *IPAllocation) XXX_DiscardUnknown() {
	xxx_messageInfo_IPAllocation.DiscardUnknown(m)
}

var xxx_messageInfo_IPAllocation proto.InternalMessageInfo

func (m *IPAllocation) GetNetworkName() string {
	if m != nil {
		return m.NetworkName
	}
	return ""
}

func (m *IPAllocation) GetInterfaceName() string {
	if m != nil {
		return m.InterfaceName
	}
	return ""
}

func (m *IPAllocation) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *IPAllocation) GetGw() string {
	if m != nil {
		return m.Gw
	}
	return ""
}

// ConfigData wraps all configuration items exported by netalloc.
// TBD: MACs, VXLAN VNIs, memif IDs, etc.
type ConfigData struct {
	IpAddresses          []*IPAllocation `protobuf:"bytes,10,rep,name=ip_addresses,json=ipAddresses,proto3" json:"ip_addresses,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ConfigData) Reset()         { *m = ConfigData{} }
func (m *ConfigData) String() string { return proto.CompactTextString(m) }
func (*ConfigData) ProtoMessage()    {}
func (*ConfigData) Descriptor() ([]byte, []int) {
	return fileDescriptor_871b6a8ed3ae2830, []int{1}
}

func (m *ConfigData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConfigData.Unmarshal(m, b)
}
func (m *ConfigData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConfigData.Marshal(b, m, deterministic)
}
func (m *ConfigData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigData.Merge(m, src)
}
func (m *ConfigData) XXX_Size() int {
	return xxx_messageInfo_ConfigData.Size(m)
}
func (m *ConfigData) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigData.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigData proto.InternalMessageInfo

func (m *ConfigData) GetIpAddresses() []*IPAllocation {
	if m != nil {
		return m.IpAddresses
	}
	return nil
}

func init() {
	proto.RegisterEnum("netalloc.IPAddressForm", IPAddressForm_name, IPAddressForm_value)
	proto.RegisterEnum("netalloc.IPAddressSource", IPAddressSource_name, IPAddressSource_value)
	proto.RegisterType((*IPAllocation)(nil), "netalloc.IPAllocation")
	proto.RegisterType((*ConfigData)(nil), "netalloc.ConfigData")
}

func init() { proto.RegisterFile("models/netalloc/netalloc.proto", fileDescriptor_871b6a8ed3ae2830) }

var fileDescriptor_871b6a8ed3ae2830 = []byte{
	// 365 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x91, 0xcf, 0x8f, 0x93, 0x40,
	0x14, 0xc7, 0x17, 0xba, 0xae, 0xbb, 0xaf, 0xb4, 0x3b, 0x19, 0x8d, 0xe1, 0x64, 0x6a, 0x13, 0x93,
	0xa6, 0x89, 0x25, 0xea, 0xc9, 0x23, 0xf2, 0xa3, 0x25, 0x52, 0xa8, 0x40, 0x63, 0xf4, 0x32, 0x99,
	0xd2, 0x29, 0x4e, 0x04, 0x86, 0xc0, 0xd4, 0xde, 0xfd, 0xcb, 0x4d, 0xc7, 0x16, 0x8d, 0xb7, 0xf7,
	0xfd, 0xcc, 0x27, 0xf9, 0xbe, 0xc9, 0x83, 0x97, 0x95, 0xd8, 0xb3, 0xb2, 0xb3, 0x6a, 0x26, 0x69,
	0x59, 0x8a, 0xbc, 0x1f, 0x16, 0x4d, 0x2b, 0xa4, 0xc0, 0xf7, 0xd7, 0x3c, 0xfd, 0xa5, 0x81, 0x11,
	0x6c, 0xec, 0xf3, 0x4c, 0x25, 0x17, 0x35, 0x7e, 0x05, 0x46, 0xcd, 0xe4, 0x49, 0xb4, 0x3f, 0x48,
	0x4d, 0x2b, 0x66, 0x6a, 0x13, 0x6d, 0xf6, 0x90, 0x0c, 0x2f, 0x2c, 0xa2, 0x15, 0xc3, 0xaf, 0x61,
	0xcc, 0x6b, 0xc9, 0xda, 0x03, 0xcd, 0xd9, 0x1f, 0x49, 0x57, 0xd2, 0xa8, 0xa7, 0x4a, 0x33, 0xe1,
	0x29, 0xdd, 0xef, 0x5b, 0xd6, 0x75, 0xe6, 0xad, 0x7a, 0xbf, 0x46, 0x3c, 0x06, 0xbd, 0x38, 0x99,
	0x4f, 0x14, 0xd4, 0x8b, 0xd3, 0x74, 0x09, 0xe0, 0x88, 0xfa, 0xc0, 0x0b, 0x97, 0x4a, 0x8a, 0x3f,
	0x80, 0xc1, 0x1b, 0x72, 0x71, 0x59, 0x67, 0xc2, 0x64, 0x30, 0x1b, 0xbe, 0x7b, 0xb1, 0xe8, 0xff,
	0xf0, 0xef, 0xbe, 0xc9, 0x90, 0x37, 0xf6, 0x55, 0x9d, 0x73, 0x18, 0x05, 0x9b, 0x4b, 0xf4, 0x45,
	0x5b, 0x61, 0x0c, 0xe3, 0x6d, 0xe4, 0x7a, 0x7e, 0x10, 0x79, 0x2e, 0xf1, 0xe3, 0x64, 0x8d, 0x6e,
	0xf0, 0x08, 0x1e, 0x6c, 0xd7, 0x4d, 0x48, 0x1c, 0x85, 0x5f, 0x91, 0x76, 0x56, 0x54, 0xfc, 0x12,
	0x64, 0x2b, 0xb2, 0xb6, 0xd3, 0x4f, 0x48, 0xc7, 0x06, 0xdc, 0x2b, 0x16, 0x79, 0x19, 0x1a, 0xe0,
	0x67, 0xf0, 0x98, 0x06, 0xd1, 0x32, 0xf4, 0x48, 0x0f, 0x6f, 0xe7, 0x9f, 0xe1, 0xb1, 0xaf, 0x4a,
	0xc5, 0xb1, 0xcd, 0x19, 0x7e, 0x0e, 0xe8, 0x6f, 0x59, 0x1a, 0x6f, 0x13, 0xc7, 0x43, 0x37, 0x18,
	0xe0, 0x2e, 0xcd, 0xec, 0x2c, 0x70, 0x90, 0x76, 0xae, 0xf6, 0x93, 0x78, 0x4d, 0xdc, 0x95, 0xb3,
	0x41, 0xba, 0xda, 0x24, 0x0c, 0x63, 0x87, 0x24, 0x9e, 0x8f, 0x06, 0x1f, 0xdf, 0x7e, 0xb3, 0x0a,
	0x2e, 0xbf, 0x1f, 0x77, 0x8b, 0x5c, 0x54, 0x56, 0xc9, 0x0b, 0x2a, 0x85, 0xf5, 0xb3, 0x69, 0xde,
	0xd0, 0x82, 0xd5, 0xd2, 0xa2, 0x0d, 0xb7, 0xfe, 0xbb, 0xeb, 0xee, 0x4e, 0xdd, 0xf3, 0xfd, 0xef,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x97, 0x52, 0x30, 0x48, 0xf1, 0x01, 0x00, 0x00,
}
