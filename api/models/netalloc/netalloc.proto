syntax = "proto3";

// Netalloc allows to disassociate topology from addressing in the network
// configuration. Instead of inserting specific IP/MAC addresses, VXLAN VNIs, etc.,
// into the configuration data for interfaces, routes, ARPs and other network
// objects, the addresses can be symbolic references into the pool of allocated
// addresses known to the netalloc plugin.
// To allocate a new address, an instance of the proto message AddressAllocation
// should be submitted into the vpp-agent through one of the supported NB
// transports (etcd, GRPC, ...) under the corresponding key. Network object which
// references (to-be) allocated address will have a dependency on the corresponding
// key-value instance of AddressAllocation and will read and apply the address
// only once it is available.
// The ability to separate addresses from the rest of the network configuration
// is especially useful in scenarios where IP address allocations are provided
// externally, for example by another control-plane agent, IPAM tool or by CNI
// in containerized environments.
package netalloc;

option go_package = "github.com/ligato/vpp-agent/api/models/netalloc";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
option (gogoproto.messagename_all) = true;

// AddressType lists all different types of addresses that can be allocated
// and referenced from models of other plugins.
enum AddressType {
    UNDEFINED = 0;

    // IPV4_ADDR = IPv4 address of an interface
    IPV4_ADDR = 1;

    // IPV4_GW = IPv4 address of a gateway set for a given interface
    IPV4_GW = 2;

    // IPV6_ADDR = IPv6 address of an interface
    IPV6_ADDR = 3;

    // IPV6_GW = IPv6 address of a gateway set for a given interface
    IPV6_GW = 4;

    // TBD: HW addresses have to be first derived out in order to be dependant
    //      on allocation
    // HW_ADDR = 5;
};

// IPAddressForm can be used in descriptors whose models reference allocated IP
// addresses, to ask for a specific form in which the address should applied.
enum IPAddressForm {
    UNDEFINED_FORM = 0;

    // ADDR_ONLY = apply address without mask, e.g. 192.168.2.5
    ADDR_ONLY = 1;

    // ADDR_WITH_MASK = apply address including the mask of the network,
    // e.g. 192.168.2.5/24
    ADDR_WITH_MASK = 2;

    // ADDR_NET = apply network implied by the address,
    // e.g. for 192.168.2.10/24 apply 192.168.2.0/24
    ADDR_NET = 3;

    // SINGLE_ADDR_NET = apply address with an all-ones mask (i.e. /32 for IPv4,
    // /128 for IPv6)
    SINGLE_ADDR_NET = 4;
};

// IPAddressSource can be used to remember the source of an IP address.
// (e.g. to distinguish allocated IP addresses from statically defined ones)
enum IPAddressSource {
    UNDEFINED_SOURCE = 0;

    // STATIC is IP address statically assigned in the NB configuration.
    STATIC = 1;

    // FROM_DHCP is set when IP address is obtained from DHCP.
    FROM_DHCP = 2;

    // ALLOC_REF is a reference inside NB configuration to an allocated
    // IP address.
    ALLOC_REF = 3;

    // ALLOCATED IP address via netalloc.
    ALLOCATED = 4;
}

// AddressAllocation represents a single allocated IP address.
//
// To reference allocated address, instead of entering specific IP address
// for interface/route/ARP/..., use one of the following string templates prefixed
// with netalloc keyword "alloc":
//  a) full reference (for available address types see AddressType above):
//        "alloc:<network_name>/<interface_name>/<address_type>"
//  b) IPv4 is the default address to pick up, so for IPv4 the <address-type>
//     can be omitted:
//        "alloc:<network_name>/<interface_name>"
//  c) when interface is given (e.g. when asked for IP from interface model),
//     interface_name can be omitted:
//        "alloc:<network_name>/<address_type>"
//  d) when interface is given and IPv4 address is requested, then just specify
//      the network name:
//        "alloc:<network_name>"
message AddressAllocation {
    // NetworkName is some label assigned to the network where the IP address
    // was assigned to the given interface.
    // In theory, interface can have multiple IP adresses or there can be multiple
    // address allocators and the network name allows to separate them.
    // The network name is not allowed to contain forward slashes.
    string network_name = 1;

    // InterfaceName is the logical VPP or Linux interface name for which the
    // address is allocated.
    string interface_name = 2;

    // AddressType specifies the type of the address assigned to the interface.
    AddressType address_type = 3;

    // Address is IP or MAC or address of some other type, as given by AddressType
    // (see the field above).
    // If address is IP address but without a mask, the all-ones mask (/32 for
    // IPv4, /128 for IPv6) will be assumed.
    string address = 4;
}

// ConfigData wraps all configuration items exported by netalloc.
// TBD: VXLAN VNIs, memif IDs, etc.
message ConfigData {
    repeated AddressAllocation addresses = 10;
}