// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ligato/vpp-agent/api/models/vpp/interfaces/dhcp.proto

package vpp_interfaces

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// DHCPLease is a notification, i.e. flows from SB upwards
type DHCPLease struct {
	InterfaceName        string   `protobuf:"bytes,1,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
	HostName             string   `protobuf:"bytes,2,opt,name=host_name,json=hostName,proto3" json:"host_name,omitempty"`
	IsIpv6               bool     `protobuf:"varint,3,opt,name=is_ipv6,json=isIpv6,proto3" json:"is_ipv6,omitempty"`
	HostPhysAddress      string   `protobuf:"bytes,4,opt,name=host_phys_address,json=hostPhysAddress,proto3" json:"host_phys_address,omitempty"`
	HostIpAddress        string   `protobuf:"bytes,5,opt,name=host_ip_address,json=hostIpAddress,proto3" json:"host_ip_address,omitempty"`
	RouterIpAddress      string   `protobuf:"bytes,6,opt,name=router_ip_address,json=routerIpAddress,proto3" json:"router_ip_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DHCPLease) Reset()         { *m = DHCPLease{} }
func (m *DHCPLease) String() string { return proto.CompactTextString(m) }
func (*DHCPLease) ProtoMessage()    {}
func (*DHCPLease) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c1d112638dbd501, []int{0}
}

func (m *DHCPLease) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DHCPLease.Unmarshal(m, b)
}
func (m *DHCPLease) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DHCPLease.Marshal(b, m, deterministic)
}
func (m *DHCPLease) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DHCPLease.Merge(m, src)
}
func (m *DHCPLease) XXX_Size() int {
	return xxx_messageInfo_DHCPLease.Size(m)
}
func (m *DHCPLease) XXX_DiscardUnknown() {
	xxx_messageInfo_DHCPLease.DiscardUnknown(m)
}

var xxx_messageInfo_DHCPLease proto.InternalMessageInfo

func (m *DHCPLease) GetInterfaceName() string {
	if m != nil {
		return m.InterfaceName
	}
	return ""
}

func (m *DHCPLease) GetHostName() string {
	if m != nil {
		return m.HostName
	}
	return ""
}

func (m *DHCPLease) GetIsIpv6() bool {
	if m != nil {
		return m.IsIpv6
	}
	return false
}

func (m *DHCPLease) GetHostPhysAddress() string {
	if m != nil {
		return m.HostPhysAddress
	}
	return ""
}

func (m *DHCPLease) GetHostIpAddress() string {
	if m != nil {
		return m.HostIpAddress
	}
	return ""
}

func (m *DHCPLease) GetRouterIpAddress() string {
	if m != nil {
		return m.RouterIpAddress
	}
	return ""
}

func init() {
	proto.RegisterType((*DHCPLease)(nil), "vpp.interfaces.DHCPLease")
}

func init() {
	proto.RegisterFile("ligato/vpp-agent/api/models/vpp/interfaces/dhcp.proto", fileDescriptor_9c1d112638dbd501)
}

var fileDescriptor_9c1d112638dbd501 = []byte{
	// 257 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x90, 0xcf, 0x4b, 0xc3, 0x30,
	0x14, 0x80, 0xa9, 0x3f, 0xe6, 0x1a, 0x70, 0xb2, 0x5e, 0x2c, 0x78, 0x19, 0x82, 0x32, 0x06, 0x36,
	0x07, 0x71, 0x17, 0x4f, 0xea, 0x10, 0x07, 0x22, 0x63, 0x47, 0x2f, 0x21, 0x6b, 0x9f, 0x4d, 0x60,
	0x6d, 0x1e, 0x79, 0x59, 0x60, 0xff, 0xb1, 0x7f, 0x86, 0x34, 0xc1, 0xce, 0xa3, 0xc7, 0x7c, 0xdf,
	0xf7, 0xc2, 0xe3, 0xb1, 0x87, 0xad, 0xae, 0xa5, 0x33, 0xdc, 0x23, 0xde, 0xc9, 0x1a, 0x5a, 0xc7,
	0x25, 0x6a, 0xde, 0x98, 0x0a, 0xb6, 0xd4, 0x41, 0xae, 0x5b, 0x07, 0xf6, 0x4b, 0x96, 0x40, 0xbc,
	0x52, 0x25, 0x16, 0x68, 0x8d, 0x33, 0xd9, 0xc8, 0x23, 0x16, 0x07, 0x75, 0xfd, 0x9d, 0xb0, 0x74,
	0xf1, 0xf6, 0xb2, 0x7a, 0x07, 0x49, 0x90, 0xdd, 0xb0, 0x51, 0xef, 0x44, 0x2b, 0x1b, 0xc8, 0x93,
	0x49, 0x32, 0x4d, 0xd7, 0xe7, 0x3d, 0xfd, 0x90, 0x0d, 0x64, 0x57, 0x2c, 0x55, 0x86, 0x5c, 0x2c,
	0x8e, 0x42, 0x31, 0xec, 0x40, 0x90, 0x97, 0xec, 0x4c, 0x93, 0xd0, 0xe8, 0xe7, 0xf9, 0xf1, 0x24,
	0x99, 0x0e, 0xd7, 0x03, 0x4d, 0x4b, 0xf4, 0xf3, 0x6c, 0xc6, 0xc6, 0x61, 0x0a, 0xd5, 0x9e, 0x84,
	0xac, 0x2a, 0x0b, 0x44, 0xf9, 0x49, 0x98, 0xbe, 0xe8, 0xc4, 0x4a, 0xed, 0xe9, 0x29, 0xe2, 0xec,
	0x96, 0x05, 0x24, 0x34, 0xf6, 0xe5, 0x69, 0xdc, 0xa4, 0xc3, 0x4b, 0xfc, 0xed, 0x66, 0x6c, 0x6c,
	0xcd, 0xce, 0x81, 0xfd, 0x5b, 0x0e, 0xe2, 0x9f, 0x51, 0xf4, 0xed, 0xf3, 0xeb, 0xe7, 0xa2, 0xd6,
	0x4e, 0xed, 0x36, 0x45, 0x69, 0x1a, 0xfe, 0xff, 0xf3, 0x3d, 0x7a, 0x44, 0x71, 0x78, 0x6e, 0x06,
	0xe1, 0x92, 0xf7, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x64, 0xf5, 0x6b, 0x4c, 0x82, 0x01, 0x00,
	0x00,
}
