// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: models/vpp/interfaces/interface.proto

package vpp_interfaces

import (
	fmt "fmt"
	math "math"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	ipsec "github.com/ligato/vpp-agent/api/models/vpp/ipsec"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Interface_Type int32

const (
	Interface_UNDEFINED_TYPE    Interface_Type = 0
	Interface_SUB_INTERFACE     Interface_Type = 1
	Interface_SOFTWARE_LOOPBACK Interface_Type = 2
	Interface_DPDK              Interface_Type = 3
	Interface_MEMIF             Interface_Type = 4
	Interface_TAP               Interface_Type = 5
	Interface_AF_PACKET         Interface_Type = 6
	Interface_VXLAN_TUNNEL      Interface_Type = 7
	Interface_IPSEC_TUNNEL      Interface_Type = 8
	Interface_VMXNET3_INTERFACE Interface_Type = 9
	Interface_BOND_INTERFACE    Interface_Type = 10
)

var Interface_Type_name = map[int32]string{
	0:  "UNDEFINED_TYPE",
	1:  "SUB_INTERFACE",
	2:  "SOFTWARE_LOOPBACK",
	3:  "DPDK",
	4:  "MEMIF",
	5:  "TAP",
	6:  "AF_PACKET",
	7:  "VXLAN_TUNNEL",
	8:  "IPSEC_TUNNEL",
	9:  "VMXNET3_INTERFACE",
	10: "BOND_INTERFACE",
}

var Interface_Type_value = map[string]int32{
	"UNDEFINED_TYPE":    0,
	"SUB_INTERFACE":     1,
	"SOFTWARE_LOOPBACK": 2,
	"DPDK":              3,
	"MEMIF":             4,
	"TAP":               5,
	"AF_PACKET":         6,
	"VXLAN_TUNNEL":      7,
	"IPSEC_TUNNEL":      8,
	"VMXNET3_INTERFACE": 9,
	"BOND_INTERFACE":    10,
}

func (x Interface_Type) String() string {
	return proto.EnumName(Interface_Type_name, int32(x))
}

func (Interface_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1ac7cab935c1dc4d, []int{0, 0}
}

// Type definition is from: vpp/include/vnet/interface.h
type Interface_RxMode_Type int32

const (
	Interface_RxMode_UNKNOWN   Interface_RxMode_Type = 0
	Interface_RxMode_POLLING   Interface_RxMode_Type = 1
	Interface_RxMode_INTERRUPT Interface_RxMode_Type = 2
	Interface_RxMode_ADAPTIVE  Interface_RxMode_Type = 3
	Interface_RxMode_DEFAULT   Interface_RxMode_Type = 4
)

var Interface_RxMode_Type_name = map[int32]string{
	0: "UNKNOWN",
	1: "POLLING",
	2: "INTERRUPT",
	3: "ADAPTIVE",
	4: "DEFAULT",
}

var Interface_RxMode_Type_value = map[string]int32{
	"UNKNOWN":   0,
	"POLLING":   1,
	"INTERRUPT": 2,
	"ADAPTIVE":  3,
	"DEFAULT":   4,
}

func (x Interface_RxMode_Type) String() string {
	return proto.EnumName(Interface_RxMode_Type_name, int32(x))
}

func (Interface_RxMode_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1ac7cab935c1dc4d, []int{0, 1, 0}
}

type SubInterface_TagRewriteOptions int32

const (
	SubInterface_DISABLED    SubInterface_TagRewriteOptions = 0
	SubInterface_PUSH1       SubInterface_TagRewriteOptions = 1
	SubInterface_PUSH2       SubInterface_TagRewriteOptions = 2
	SubInterface_POP1        SubInterface_TagRewriteOptions = 3
	SubInterface_POP2        SubInterface_TagRewriteOptions = 4
	SubInterface_TRANSLATE11 SubInterface_TagRewriteOptions = 5
	SubInterface_TRANSLATE12 SubInterface_TagRewriteOptions = 6
	SubInterface_TRANSLATE21 SubInterface_TagRewriteOptions = 7
	SubInterface_TRANSLATE22 SubInterface_TagRewriteOptions = 8
)

var SubInterface_TagRewriteOptions_name = map[int32]string{
	0: "DISABLED",
	1: "PUSH1",
	2: "PUSH2",
	3: "POP1",
	4: "POP2",
	5: "TRANSLATE11",
	6: "TRANSLATE12",
	7: "TRANSLATE21",
	8: "TRANSLATE22",
}

var SubInterface_TagRewriteOptions_value = map[string]int32{
	"DISABLED":    0,
	"PUSH1":       1,
	"PUSH2":       2,
	"POP1":        3,
	"POP2":        4,
	"TRANSLATE11": 5,
	"TRANSLATE12": 6,
	"TRANSLATE21": 7,
	"TRANSLATE22": 8,
}

func (x SubInterface_TagRewriteOptions) String() string {
	return proto.EnumName(SubInterface_TagRewriteOptions_name, int32(x))
}

func (SubInterface_TagRewriteOptions) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1ac7cab935c1dc4d, []int{1, 0}
}

type MemifLink_MemifMode int32

const (
	MemifLink_ETHERNET    MemifLink_MemifMode = 0
	MemifLink_IP          MemifLink_MemifMode = 1
	MemifLink_PUNT_INJECT MemifLink_MemifMode = 2
)

var MemifLink_MemifMode_name = map[int32]string{
	0: "ETHERNET",
	1: "IP",
	2: "PUNT_INJECT",
}

var MemifLink_MemifMode_value = map[string]int32{
	"ETHERNET":    0,
	"IP":          1,
	"PUNT_INJECT": 2,
}

func (x MemifLink_MemifMode) String() string {
	return proto.EnumName(MemifLink_MemifMode_name, int32(x))
}

func (MemifLink_MemifMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1ac7cab935c1dc4d, []int{2, 0}
}

type BondLink_Mode int32

const (
	BondLink_UNKNOWN       BondLink_Mode = 0
	BondLink_ROUND_ROBIN   BondLink_Mode = 1
	BondLink_ACTIVE_BACKUP BondLink_Mode = 2
	BondLink_XOR           BondLink_Mode = 3
	BondLink_BROADCAST     BondLink_Mode = 4
	BondLink_LACP          BondLink_Mode = 5
)

var BondLink_Mode_name = map[int32]string{
	0: "UNKNOWN",
	1: "ROUND_ROBIN",
	2: "ACTIVE_BACKUP",
	3: "XOR",
	4: "BROADCAST",
	5: "LACP",
}

var BondLink_Mode_value = map[string]int32{
	"UNKNOWN":       0,
	"ROUND_ROBIN":   1,
	"ACTIVE_BACKUP": 2,
	"XOR":           3,
	"BROADCAST":     4,
	"LACP":          5,
}

func (x BondLink_Mode) String() string {
	return proto.EnumName(BondLink_Mode_name, int32(x))
}

func (BondLink_Mode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1ac7cab935c1dc4d, []int{8, 0}
}

type BondLink_LoadBalance int32

const (
	BondLink_L2  BondLink_LoadBalance = 0
	BondLink_L34 BondLink_LoadBalance = 1
	BondLink_L23 BondLink_LoadBalance = 2
)

var BondLink_LoadBalance_name = map[int32]string{
	0: "L2",
	1: "L34",
	2: "L23",
}

var BondLink_LoadBalance_value = map[string]int32{
	"L2":  0,
	"L34": 1,
	"L23": 2,
}

func (x BondLink_LoadBalance) String() string {
	return proto.EnumName(BondLink_LoadBalance_name, int32(x))
}

func (BondLink_LoadBalance) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1ac7cab935c1dc4d, []int{8, 1}
}

type Interface struct {
	// Name is mandatory field representing logical name for the interface.
	// It must be unique across all configured interfaces.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Type represents the type of interface and It must match with actual Link.
	Type Interface_Type `protobuf:"varint,2,opt,name=type,proto3,enum=vpp.interfaces.Interface_Type" json:"type,omitempty"`
	// Enabled controls if the interface should be
	Enabled bool `protobuf:"varint,3,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// PhysAddress represents physical address (MAC) of the interface.
	// Random address will be assigned if left empty.
	PhysAddress string `protobuf:"bytes,4,opt,name=phys_address,json=physAddress,proto3" json:"phys_address,omitempty"`
	// IPAddresses define list of IP addresses for the interface and must be
	// defined in the following format: <ipAddress>/<ipPrefix>
	IpAddresses []string `protobuf:"bytes,5,rep,name=ip_addresses,json=ipAddresses,proto3" json:"ip_addresses,omitempty"`
	// Vrf defines the ID of VRF table that the interface is assigned to.
	// The VRF table must be explicitely configured (see api/models/vpp/l3/vrf.proto).
	// When using unnumbered interface the actual vrf is inherited from
	// the interface referenced by the numbered interface and this field is ignored.
	Vrf           uint32                   `protobuf:"varint,6,opt,name=vrf,proto3" json:"vrf,omitempty"`
	SetDhcpClient bool                     `protobuf:"varint,7,opt,name=set_dhcp_client,json=setDhcpClient,proto3" json:"set_dhcp_client,omitempty"`
	Mtu           uint32                   `protobuf:"varint,8,opt,name=mtu,proto3" json:"mtu,omitempty"`
	Unnumbered    *Interface_Unnumbered    `protobuf:"bytes,9,opt,name=unnumbered,proto3" json:"unnumbered,omitempty"`
	RxModes       []*Interface_RxMode      `protobuf:"bytes,12,rep,name=rx_modes,json=rxModes,proto3" json:"rx_modes,omitempty"`
	RxPlacements  []*Interface_RxPlacement `protobuf:"bytes,13,rep,name=rx_placements,json=rxPlacements,proto3" json:"rx_placements,omitempty"`
	// Link defines configuration for specific interface types.
	// It can be nil for some interfaces types like: loopback and DPDK.
	//
	// Types that are valid to be assigned to Link:
	//	*Interface_Sub
	//	*Interface_Memif
	//	*Interface_Afpacket
	//	*Interface_Tap
	//	*Interface_Vxlan
	//	*Interface_Ipsec
	//	*Interface_VmxNet3
	//	*Interface_Bond
	Link                 isInterface_Link `protobuf_oneof:"link"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Interface) Reset()         { *m = Interface{} }
func (m *Interface) String() string { return proto.CompactTextString(m) }
func (*Interface) ProtoMessage()    {}
func (*Interface) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ac7cab935c1dc4d, []int{0}
}
func (m *Interface) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Interface.Unmarshal(m, b)
}
func (m *Interface) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Interface.Marshal(b, m, deterministic)
}
func (m *Interface) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Interface.Merge(m, src)
}
func (m *Interface) XXX_Size() int {
	return xxx_messageInfo_Interface.Size(m)
}
func (m *Interface) XXX_DiscardUnknown() {
	xxx_messageInfo_Interface.DiscardUnknown(m)
}

var xxx_messageInfo_Interface proto.InternalMessageInfo

type isInterface_Link interface {
	isInterface_Link()
}

type Interface_Sub struct {
	Sub *SubInterface `protobuf:"bytes,100,opt,name=sub,proto3,oneof"`
}
type Interface_Memif struct {
	Memif *MemifLink `protobuf:"bytes,101,opt,name=memif,proto3,oneof"`
}
type Interface_Afpacket struct {
	Afpacket *AfpacketLink `protobuf:"bytes,102,opt,name=afpacket,proto3,oneof"`
}
type Interface_Tap struct {
	Tap *TapLink `protobuf:"bytes,103,opt,name=tap,proto3,oneof"`
}
type Interface_Vxlan struct {
	Vxlan *VxlanLink `protobuf:"bytes,104,opt,name=vxlan,proto3,oneof"`
}
type Interface_Ipsec struct {
	Ipsec *IPSecLink `protobuf:"bytes,105,opt,name=ipsec,proto3,oneof"`
}
type Interface_VmxNet3 struct {
	VmxNet3 *VmxNet3Link `protobuf:"bytes,106,opt,name=vmx_net3,json=vmxNet3,proto3,oneof"`
}
type Interface_Bond struct {
	Bond *BondLink `protobuf:"bytes,107,opt,name=bond,proto3,oneof"`
}

func (*Interface_Sub) isInterface_Link()      {}
func (*Interface_Memif) isInterface_Link()    {}
func (*Interface_Afpacket) isInterface_Link() {}
func (*Interface_Tap) isInterface_Link()      {}
func (*Interface_Vxlan) isInterface_Link()    {}
func (*Interface_Ipsec) isInterface_Link()    {}
func (*Interface_VmxNet3) isInterface_Link()  {}
func (*Interface_Bond) isInterface_Link()     {}

func (m *Interface) GetLink() isInterface_Link {
	if m != nil {
		return m.Link
	}
	return nil
}

func (m *Interface) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Interface) GetType() Interface_Type {
	if m != nil {
		return m.Type
	}
	return Interface_UNDEFINED_TYPE
}

func (m *Interface) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *Interface) GetPhysAddress() string {
	if m != nil {
		return m.PhysAddress
	}
	return ""
}

func (m *Interface) GetIpAddresses() []string {
	if m != nil {
		return m.IpAddresses
	}
	return nil
}

func (m *Interface) GetVrf() uint32 {
	if m != nil {
		return m.Vrf
	}
	return 0
}

func (m *Interface) GetSetDhcpClient() bool {
	if m != nil {
		return m.SetDhcpClient
	}
	return false
}

func (m *Interface) GetMtu() uint32 {
	if m != nil {
		return m.Mtu
	}
	return 0
}

func (m *Interface) GetUnnumbered() *Interface_Unnumbered {
	if m != nil {
		return m.Unnumbered
	}
	return nil
}

func (m *Interface) GetRxModes() []*Interface_RxMode {
	if m != nil {
		return m.RxModes
	}
	return nil
}

func (m *Interface) GetRxPlacements() []*Interface_RxPlacement {
	if m != nil {
		return m.RxPlacements
	}
	return nil
}

func (m *Interface) GetSub() *SubInterface {
	if x, ok := m.GetLink().(*Interface_Sub); ok {
		return x.Sub
	}
	return nil
}

func (m *Interface) GetMemif() *MemifLink {
	if x, ok := m.GetLink().(*Interface_Memif); ok {
		return x.Memif
	}
	return nil
}

func (m *Interface) GetAfpacket() *AfpacketLink {
	if x, ok := m.GetLink().(*Interface_Afpacket); ok {
		return x.Afpacket
	}
	return nil
}

func (m *Interface) GetTap() *TapLink {
	if x, ok := m.GetLink().(*Interface_Tap); ok {
		return x.Tap
	}
	return nil
}

func (m *Interface) GetVxlan() *VxlanLink {
	if x, ok := m.GetLink().(*Interface_Vxlan); ok {
		return x.Vxlan
	}
	return nil
}

func (m *Interface) GetIpsec() *IPSecLink {
	if x, ok := m.GetLink().(*Interface_Ipsec); ok {
		return x.Ipsec
	}
	return nil
}

func (m *Interface) GetVmxNet3() *VmxNet3Link {
	if x, ok := m.GetLink().(*Interface_VmxNet3); ok {
		return x.VmxNet3
	}
	return nil
}

func (m *Interface) GetBond() *BondLink {
	if x, ok := m.GetLink().(*Interface_Bond); ok {
		return x.Bond
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Interface) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Interface_OneofMarshaler, _Interface_OneofUnmarshaler, _Interface_OneofSizer, []interface{}{
		(*Interface_Sub)(nil),
		(*Interface_Memif)(nil),
		(*Interface_Afpacket)(nil),
		(*Interface_Tap)(nil),
		(*Interface_Vxlan)(nil),
		(*Interface_Ipsec)(nil),
		(*Interface_VmxNet3)(nil),
		(*Interface_Bond)(nil),
	}
}

func _Interface_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Interface)
	// link
	switch x := m.Link.(type) {
	case *Interface_Sub:
		_ = b.EncodeVarint(100<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Sub); err != nil {
			return err
		}
	case *Interface_Memif:
		_ = b.EncodeVarint(101<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Memif); err != nil {
			return err
		}
	case *Interface_Afpacket:
		_ = b.EncodeVarint(102<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Afpacket); err != nil {
			return err
		}
	case *Interface_Tap:
		_ = b.EncodeVarint(103<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Tap); err != nil {
			return err
		}
	case *Interface_Vxlan:
		_ = b.EncodeVarint(104<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Vxlan); err != nil {
			return err
		}
	case *Interface_Ipsec:
		_ = b.EncodeVarint(105<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Ipsec); err != nil {
			return err
		}
	case *Interface_VmxNet3:
		_ = b.EncodeVarint(106<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.VmxNet3); err != nil {
			return err
		}
	case *Interface_Bond:
		_ = b.EncodeVarint(107<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Bond); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Interface.Link has unexpected type %T", x)
	}
	return nil
}

func _Interface_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Interface)
	switch tag {
	case 100: // link.sub
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SubInterface)
		err := b.DecodeMessage(msg)
		m.Link = &Interface_Sub{msg}
		return true, err
	case 101: // link.memif
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MemifLink)
		err := b.DecodeMessage(msg)
		m.Link = &Interface_Memif{msg}
		return true, err
	case 102: // link.afpacket
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AfpacketLink)
		err := b.DecodeMessage(msg)
		m.Link = &Interface_Afpacket{msg}
		return true, err
	case 103: // link.tap
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TapLink)
		err := b.DecodeMessage(msg)
		m.Link = &Interface_Tap{msg}
		return true, err
	case 104: // link.vxlan
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(VxlanLink)
		err := b.DecodeMessage(msg)
		m.Link = &Interface_Vxlan{msg}
		return true, err
	case 105: // link.ipsec
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(IPSecLink)
		err := b.DecodeMessage(msg)
		m.Link = &Interface_Ipsec{msg}
		return true, err
	case 106: // link.vmx_net3
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(VmxNet3Link)
		err := b.DecodeMessage(msg)
		m.Link = &Interface_VmxNet3{msg}
		return true, err
	case 107: // link.bond
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BondLink)
		err := b.DecodeMessage(msg)
		m.Link = &Interface_Bond{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Interface_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Interface)
	// link
	switch x := m.Link.(type) {
	case *Interface_Sub:
		s := proto.Size(x.Sub)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Interface_Memif:
		s := proto.Size(x.Memif)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Interface_Afpacket:
		s := proto.Size(x.Afpacket)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Interface_Tap:
		s := proto.Size(x.Tap)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Interface_Vxlan:
		s := proto.Size(x.Vxlan)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Interface_Ipsec:
		s := proto.Size(x.Ipsec)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Interface_VmxNet3:
		s := proto.Size(x.VmxNet3)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Interface_Bond:
		s := proto.Size(x.Bond)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func (*Interface) XXX_MessageName() string {
	return "vpp.interfaces.Interface"
}

type Interface_Unnumbered struct {
	InterfaceWithIp      string   `protobuf:"bytes,1,opt,name=interface_with_ip,json=interfaceWithIp,proto3" json:"interface_with_ip,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Interface_Unnumbered) Reset()         { *m = Interface_Unnumbered{} }
func (m *Interface_Unnumbered) String() string { return proto.CompactTextString(m) }
func (*Interface_Unnumbered) ProtoMessage()    {}
func (*Interface_Unnumbered) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ac7cab935c1dc4d, []int{0, 0}
}
func (m *Interface_Unnumbered) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Interface_Unnumbered.Unmarshal(m, b)
}
func (m *Interface_Unnumbered) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Interface_Unnumbered.Marshal(b, m, deterministic)
}
func (m *Interface_Unnumbered) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Interface_Unnumbered.Merge(m, src)
}
func (m *Interface_Unnumbered) XXX_Size() int {
	return xxx_messageInfo_Interface_Unnumbered.Size(m)
}
func (m *Interface_Unnumbered) XXX_DiscardUnknown() {
	xxx_messageInfo_Interface_Unnumbered.DiscardUnknown(m)
}

var xxx_messageInfo_Interface_Unnumbered proto.InternalMessageInfo

func (m *Interface_Unnumbered) GetInterfaceWithIp() string {
	if m != nil {
		return m.InterfaceWithIp
	}
	return ""
}

func (*Interface_Unnumbered) XXX_MessageName() string {
	return "vpp.interfaces.Interface.Unnumbered"
}

type Interface_RxMode struct {
	Queue uint32                `protobuf:"varint,1,opt,name=queue,proto3" json:"queue,omitempty"`
	Mode  Interface_RxMode_Type `protobuf:"varint,2,opt,name=mode,proto3,enum=vpp.interfaces.Interface_RxMode_Type" json:"mode,omitempty"`
	// DefaultMode, if set to true, the <queue> field will be ignored
	// and the <mode> will be used as a default for all the queues.
	DefaultMode          bool     `protobuf:"varint,3,opt,name=default_mode,json=defaultMode,proto3" json:"default_mode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Interface_RxMode) Reset()         { *m = Interface_RxMode{} }
func (m *Interface_RxMode) String() string { return proto.CompactTextString(m) }
func (*Interface_RxMode) ProtoMessage()    {}
func (*Interface_RxMode) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ac7cab935c1dc4d, []int{0, 1}
}
func (m *Interface_RxMode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Interface_RxMode.Unmarshal(m, b)
}
func (m *Interface_RxMode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Interface_RxMode.Marshal(b, m, deterministic)
}
func (m *Interface_RxMode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Interface_RxMode.Merge(m, src)
}
func (m *Interface_RxMode) XXX_Size() int {
	return xxx_messageInfo_Interface_RxMode.Size(m)
}
func (m *Interface_RxMode) XXX_DiscardUnknown() {
	xxx_messageInfo_Interface_RxMode.DiscardUnknown(m)
}

var xxx_messageInfo_Interface_RxMode proto.InternalMessageInfo

func (m *Interface_RxMode) GetQueue() uint32 {
	if m != nil {
		return m.Queue
	}
	return 0
}

func (m *Interface_RxMode) GetMode() Interface_RxMode_Type {
	if m != nil {
		return m.Mode
	}
	return Interface_RxMode_UNKNOWN
}

func (m *Interface_RxMode) GetDefaultMode() bool {
	if m != nil {
		return m.DefaultMode
	}
	return false
}

func (*Interface_RxMode) XXX_MessageName() string {
	return "vpp.interfaces.Interface.RxMode"
}

type Interface_RxPlacement struct {
	// select from interval <0, number-of-queues)
	Queue uint32 `protobuf:"varint,1,opt,name=queue,proto3" json:"queue,omitempty"`
	// select from interval <0, number-of-workers)
	Worker uint32 `protobuf:"varint,2,opt,name=worker,proto3" json:"worker,omitempty"`
	// let the main thread to process the given queue
	//  - if enabled, value of <worker> is ignored
	MainThread           bool     `protobuf:"varint,3,opt,name=main_thread,json=mainThread,proto3" json:"main_thread,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Interface_RxPlacement) Reset()         { *m = Interface_RxPlacement{} }
func (m *Interface_RxPlacement) String() string { return proto.CompactTextString(m) }
func (*Interface_RxPlacement) ProtoMessage()    {}
func (*Interface_RxPlacement) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ac7cab935c1dc4d, []int{0, 2}
}
func (m *Interface_RxPlacement) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Interface_RxPlacement.Unmarshal(m, b)
}
func (m *Interface_RxPlacement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Interface_RxPlacement.Marshal(b, m, deterministic)
}
func (m *Interface_RxPlacement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Interface_RxPlacement.Merge(m, src)
}
func (m *Interface_RxPlacement) XXX_Size() int {
	return xxx_messageInfo_Interface_RxPlacement.Size(m)
}
func (m *Interface_RxPlacement) XXX_DiscardUnknown() {
	xxx_messageInfo_Interface_RxPlacement.DiscardUnknown(m)
}

var xxx_messageInfo_Interface_RxPlacement proto.InternalMessageInfo

func (m *Interface_RxPlacement) GetQueue() uint32 {
	if m != nil {
		return m.Queue
	}
	return 0
}

func (m *Interface_RxPlacement) GetWorker() uint32 {
	if m != nil {
		return m.Worker
	}
	return 0
}

func (m *Interface_RxPlacement) GetMainThread() bool {
	if m != nil {
		return m.MainThread
	}
	return false
}

func (*Interface_RxPlacement) XXX_MessageName() string {
	return "vpp.interfaces.Interface.RxPlacement"
}

// SubInterface defines configuration for interface type: SUB_INTERFACE
type SubInterface struct {
	ParentName           string                         `protobuf:"bytes,1,opt,name=parent_name,json=parentName,proto3" json:"parent_name,omitempty"`
	SubId                uint32                         `protobuf:"varint,2,opt,name=sub_id,json=subId,proto3" json:"sub_id,omitempty"`
	TagRwOption          SubInterface_TagRewriteOptions `protobuf:"varint,3,opt,name=tag_rw_option,json=tagRwOption,proto3,enum=vpp.interfaces.SubInterface_TagRewriteOptions" json:"tag_rw_option,omitempty"`
	PushDot1Q            bool                           `protobuf:"varint,4,opt,name=push_dot1q,json=pushDot1q,proto3" json:"push_dot1q,omitempty"`
	Tag1                 uint32                         `protobuf:"varint,5,opt,name=tag1,proto3" json:"tag1,omitempty"`
	Tag2                 uint32                         `protobuf:"varint,6,opt,name=tag2,proto3" json:"tag2,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *SubInterface) Reset()         { *m = SubInterface{} }
func (m *SubInterface) String() string { return proto.CompactTextString(m) }
func (*SubInterface) ProtoMessage()    {}
func (*SubInterface) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ac7cab935c1dc4d, []int{1}
}
func (m *SubInterface) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubInterface.Unmarshal(m, b)
}
func (m *SubInterface) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubInterface.Marshal(b, m, deterministic)
}
func (m *SubInterface) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubInterface.Merge(m, src)
}
func (m *SubInterface) XXX_Size() int {
	return xxx_messageInfo_SubInterface.Size(m)
}
func (m *SubInterface) XXX_DiscardUnknown() {
	xxx_messageInfo_SubInterface.DiscardUnknown(m)
}

var xxx_messageInfo_SubInterface proto.InternalMessageInfo

func (m *SubInterface) GetParentName() string {
	if m != nil {
		return m.ParentName
	}
	return ""
}

func (m *SubInterface) GetSubId() uint32 {
	if m != nil {
		return m.SubId
	}
	return 0
}

func (m *SubInterface) GetTagRwOption() SubInterface_TagRewriteOptions {
	if m != nil {
		return m.TagRwOption
	}
	return SubInterface_DISABLED
}

func (m *SubInterface) GetPushDot1Q() bool {
	if m != nil {
		return m.PushDot1Q
	}
	return false
}

func (m *SubInterface) GetTag1() uint32 {
	if m != nil {
		return m.Tag1
	}
	return 0
}

func (m *SubInterface) GetTag2() uint32 {
	if m != nil {
		return m.Tag2
	}
	return 0
}

func (*SubInterface) XXX_MessageName() string {
	return "vpp.interfaces.SubInterface"
}

// MemifLink defines configuration for interface type: MEMIF
type MemifLink struct {
	Mode                 MemifLink_MemifMode `protobuf:"varint,1,opt,name=mode,proto3,enum=vpp.interfaces.MemifLink_MemifMode" json:"mode,omitempty"`
	Master               bool                `protobuf:"varint,2,opt,name=master,proto3" json:"master,omitempty"`
	Id                   uint32              `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	SocketFilename       string              `protobuf:"bytes,4,opt,name=socket_filename,json=socketFilename,proto3" json:"socket_filename,omitempty"`
	Secret               string              `protobuf:"bytes,5,opt,name=secret,proto3" json:"secret,omitempty"`
	RingSize             uint32              `protobuf:"varint,6,opt,name=ring_size,json=ringSize,proto3" json:"ring_size,omitempty"`
	BufferSize           uint32              `protobuf:"varint,7,opt,name=buffer_size,json=bufferSize,proto3" json:"buffer_size,omitempty"`
	RxQueues             uint32              `protobuf:"varint,8,opt,name=rx_queues,json=rxQueues,proto3" json:"rx_queues,omitempty"`
	TxQueues             uint32              `protobuf:"varint,9,opt,name=tx_queues,json=txQueues,proto3" json:"tx_queues,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *MemifLink) Reset()         { *m = MemifLink{} }
func (m *MemifLink) String() string { return proto.CompactTextString(m) }
func (*MemifLink) ProtoMessage()    {}
func (*MemifLink) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ac7cab935c1dc4d, []int{2}
}
func (m *MemifLink) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MemifLink.Unmarshal(m, b)
}
func (m *MemifLink) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MemifLink.Marshal(b, m, deterministic)
}
func (m *MemifLink) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MemifLink.Merge(m, src)
}
func (m *MemifLink) XXX_Size() int {
	return xxx_messageInfo_MemifLink.Size(m)
}
func (m *MemifLink) XXX_DiscardUnknown() {
	xxx_messageInfo_MemifLink.DiscardUnknown(m)
}

var xxx_messageInfo_MemifLink proto.InternalMessageInfo

func (m *MemifLink) GetMode() MemifLink_MemifMode {
	if m != nil {
		return m.Mode
	}
	return MemifLink_ETHERNET
}

func (m *MemifLink) GetMaster() bool {
	if m != nil {
		return m.Master
	}
	return false
}

func (m *MemifLink) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MemifLink) GetSocketFilename() string {
	if m != nil {
		return m.SocketFilename
	}
	return ""
}

func (m *MemifLink) GetSecret() string {
	if m != nil {
		return m.Secret
	}
	return ""
}

func (m *MemifLink) GetRingSize() uint32 {
	if m != nil {
		return m.RingSize
	}
	return 0
}

func (m *MemifLink) GetBufferSize() uint32 {
	if m != nil {
		return m.BufferSize
	}
	return 0
}

func (m *MemifLink) GetRxQueues() uint32 {
	if m != nil {
		return m.RxQueues
	}
	return 0
}

func (m *MemifLink) GetTxQueues() uint32 {
	if m != nil {
		return m.TxQueues
	}
	return 0
}

func (*MemifLink) XXX_MessageName() string {
	return "vpp.interfaces.MemifLink"
}

// VxlanLink defines configuration for interface type: VXLAN_TUNNEL
type VxlanLink struct {
	SrcAddress           string   `protobuf:"bytes,1,opt,name=src_address,json=srcAddress,proto3" json:"src_address,omitempty"`
	DstAddress           string   `protobuf:"bytes,2,opt,name=dst_address,json=dstAddress,proto3" json:"dst_address,omitempty"`
	Vni                  uint32   `protobuf:"varint,3,opt,name=vni,proto3" json:"vni,omitempty"`
	Multicast            string   `protobuf:"bytes,4,opt,name=multicast,proto3" json:"multicast,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VxlanLink) Reset()         { *m = VxlanLink{} }
func (m *VxlanLink) String() string { return proto.CompactTextString(m) }
func (*VxlanLink) ProtoMessage()    {}
func (*VxlanLink) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ac7cab935c1dc4d, []int{3}
}
func (m *VxlanLink) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VxlanLink.Unmarshal(m, b)
}
func (m *VxlanLink) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VxlanLink.Marshal(b, m, deterministic)
}
func (m *VxlanLink) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VxlanLink.Merge(m, src)
}
func (m *VxlanLink) XXX_Size() int {
	return xxx_messageInfo_VxlanLink.Size(m)
}
func (m *VxlanLink) XXX_DiscardUnknown() {
	xxx_messageInfo_VxlanLink.DiscardUnknown(m)
}

var xxx_messageInfo_VxlanLink proto.InternalMessageInfo

func (m *VxlanLink) GetSrcAddress() string {
	if m != nil {
		return m.SrcAddress
	}
	return ""
}

func (m *VxlanLink) GetDstAddress() string {
	if m != nil {
		return m.DstAddress
	}
	return ""
}

func (m *VxlanLink) GetVni() uint32 {
	if m != nil {
		return m.Vni
	}
	return 0
}

func (m *VxlanLink) GetMulticast() string {
	if m != nil {
		return m.Multicast
	}
	return ""
}

func (*VxlanLink) XXX_MessageName() string {
	return "vpp.interfaces.VxlanLink"
}

// AfpacketLink defines configuration for interface type: AF_PACKET
type AfpacketLink struct {
	HostIfName           string   `protobuf:"bytes,1,opt,name=host_if_name,json=hostIfName,proto3" json:"host_if_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AfpacketLink) Reset()         { *m = AfpacketLink{} }
func (m *AfpacketLink) String() string { return proto.CompactTextString(m) }
func (*AfpacketLink) ProtoMessage()    {}
func (*AfpacketLink) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ac7cab935c1dc4d, []int{4}
}
func (m *AfpacketLink) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AfpacketLink.Unmarshal(m, b)
}
func (m *AfpacketLink) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AfpacketLink.Marshal(b, m, deterministic)
}
func (m *AfpacketLink) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AfpacketLink.Merge(m, src)
}
func (m *AfpacketLink) XXX_Size() int {
	return xxx_messageInfo_AfpacketLink.Size(m)
}
func (m *AfpacketLink) XXX_DiscardUnknown() {
	xxx_messageInfo_AfpacketLink.DiscardUnknown(m)
}

var xxx_messageInfo_AfpacketLink proto.InternalMessageInfo

func (m *AfpacketLink) GetHostIfName() string {
	if m != nil {
		return m.HostIfName
	}
	return ""
}

func (*AfpacketLink) XXX_MessageName() string {
	return "vpp.interfaces.AfpacketLink"
}

// TapLink defines configuration for interface type: TAP
type TapLink struct {
	Version              uint32   `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	HostIfName           string   `protobuf:"bytes,2,opt,name=host_if_name,json=hostIfName,proto3" json:"host_if_name,omitempty"`
	ToMicroservice       string   `protobuf:"bytes,3,opt,name=to_microservice,json=toMicroservice,proto3" json:"to_microservice,omitempty"`
	RxRingSize           uint32   `protobuf:"varint,4,opt,name=rx_ring_size,json=rxRingSize,proto3" json:"rx_ring_size,omitempty"`
	TxRingSize           uint32   `protobuf:"varint,5,opt,name=tx_ring_size,json=txRingSize,proto3" json:"tx_ring_size,omitempty"`
	EnableGso            bool     `protobuf:"varint,6,opt,name=enable_gso,json=enableGso,proto3" json:"enable_gso,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TapLink) Reset()         { *m = TapLink{} }
func (m *TapLink) String() string { return proto.CompactTextString(m) }
func (*TapLink) ProtoMessage()    {}
func (*TapLink) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ac7cab935c1dc4d, []int{5}
}
func (m *TapLink) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TapLink.Unmarshal(m, b)
}
func (m *TapLink) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TapLink.Marshal(b, m, deterministic)
}
func (m *TapLink) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TapLink.Merge(m, src)
}
func (m *TapLink) XXX_Size() int {
	return xxx_messageInfo_TapLink.Size(m)
}
func (m *TapLink) XXX_DiscardUnknown() {
	xxx_messageInfo_TapLink.DiscardUnknown(m)
}

var xxx_messageInfo_TapLink proto.InternalMessageInfo

func (m *TapLink) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *TapLink) GetHostIfName() string {
	if m != nil {
		return m.HostIfName
	}
	return ""
}

func (m *TapLink) GetToMicroservice() string {
	if m != nil {
		return m.ToMicroservice
	}
	return ""
}

func (m *TapLink) GetRxRingSize() uint32 {
	if m != nil {
		return m.RxRingSize
	}
	return 0
}

func (m *TapLink) GetTxRingSize() uint32 {
	if m != nil {
		return m.TxRingSize
	}
	return 0
}

func (m *TapLink) GetEnableGso() bool {
	if m != nil {
		return m.EnableGso
	}
	return false
}

func (*TapLink) XXX_MessageName() string {
	return "vpp.interfaces.TapLink"
}

// IPSecLink defines configuration for interface type: IPSEC_TUNNEL
type IPSecLink struct {
	Esn                  bool            `protobuf:"varint,2,opt,name=esn,proto3" json:"esn,omitempty"`
	AntiReplay           bool            `protobuf:"varint,3,opt,name=anti_replay,json=antiReplay,proto3" json:"anti_replay,omitempty"`
	LocalIp              string          `protobuf:"bytes,4,opt,name=local_ip,json=localIp,proto3" json:"local_ip,omitempty"`
	RemoteIp             string          `protobuf:"bytes,5,opt,name=remote_ip,json=remoteIp,proto3" json:"remote_ip,omitempty"`
	LocalSpi             uint32          `protobuf:"varint,6,opt,name=local_spi,json=localSpi,proto3" json:"local_spi,omitempty"`
	RemoteSpi            uint32          `protobuf:"varint,7,opt,name=remote_spi,json=remoteSpi,proto3" json:"remote_spi,omitempty"`
	CryptoAlg            ipsec.CryptoAlg `protobuf:"varint,8,opt,name=crypto_alg,json=cryptoAlg,proto3,enum=vpp.ipsec.CryptoAlg" json:"crypto_alg,omitempty"`
	LocalCryptoKey       string          `protobuf:"bytes,9,opt,name=local_crypto_key,json=localCryptoKey,proto3" json:"local_crypto_key,omitempty"`
	RemoteCryptoKey      string          `protobuf:"bytes,10,opt,name=remote_crypto_key,json=remoteCryptoKey,proto3" json:"remote_crypto_key,omitempty"`
	IntegAlg             ipsec.IntegAlg  `protobuf:"varint,11,opt,name=integ_alg,json=integAlg,proto3,enum=vpp.ipsec.IntegAlg" json:"integ_alg,omitempty"`
	LocalIntegKey        string          `protobuf:"bytes,12,opt,name=local_integ_key,json=localIntegKey,proto3" json:"local_integ_key,omitempty"`
	RemoteIntegKey       string          `protobuf:"bytes,13,opt,name=remote_integ_key,json=remoteIntegKey,proto3" json:"remote_integ_key,omitempty"`
	EnableUdpEncap       bool            `protobuf:"varint,14,opt,name=enable_udp_encap,json=enableUdpEncap,proto3" json:"enable_udp_encap,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *IPSecLink) Reset()         { *m = IPSecLink{} }
func (m *IPSecLink) String() string { return proto.CompactTextString(m) }
func (*IPSecLink) ProtoMessage()    {}
func (*IPSecLink) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ac7cab935c1dc4d, []int{6}
}
func (m *IPSecLink) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IPSecLink.Unmarshal(m, b)
}
func (m *IPSecLink) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IPSecLink.Marshal(b, m, deterministic)
}
func (m *IPSecLink) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IPSecLink.Merge(m, src)
}
func (m *IPSecLink) XXX_Size() int {
	return xxx_messageInfo_IPSecLink.Size(m)
}
func (m *IPSecLink) XXX_DiscardUnknown() {
	xxx_messageInfo_IPSecLink.DiscardUnknown(m)
}

var xxx_messageInfo_IPSecLink proto.InternalMessageInfo

func (m *IPSecLink) GetEsn() bool {
	if m != nil {
		return m.Esn
	}
	return false
}

func (m *IPSecLink) GetAntiReplay() bool {
	if m != nil {
		return m.AntiReplay
	}
	return false
}

func (m *IPSecLink) GetLocalIp() string {
	if m != nil {
		return m.LocalIp
	}
	return ""
}

func (m *IPSecLink) GetRemoteIp() string {
	if m != nil {
		return m.RemoteIp
	}
	return ""
}

func (m *IPSecLink) GetLocalSpi() uint32 {
	if m != nil {
		return m.LocalSpi
	}
	return 0
}

func (m *IPSecLink) GetRemoteSpi() uint32 {
	if m != nil {
		return m.RemoteSpi
	}
	return 0
}

func (m *IPSecLink) GetCryptoAlg() ipsec.CryptoAlg {
	if m != nil {
		return m.CryptoAlg
	}
	return ipsec.CryptoAlg_NONE_CRYPTO
}

func (m *IPSecLink) GetLocalCryptoKey() string {
	if m != nil {
		return m.LocalCryptoKey
	}
	return ""
}

func (m *IPSecLink) GetRemoteCryptoKey() string {
	if m != nil {
		return m.RemoteCryptoKey
	}
	return ""
}

func (m *IPSecLink) GetIntegAlg() ipsec.IntegAlg {
	if m != nil {
		return m.IntegAlg
	}
	return ipsec.IntegAlg_NONE_INTEG
}

func (m *IPSecLink) GetLocalIntegKey() string {
	if m != nil {
		return m.LocalIntegKey
	}
	return ""
}

func (m *IPSecLink) GetRemoteIntegKey() string {
	if m != nil {
		return m.RemoteIntegKey
	}
	return ""
}

func (m *IPSecLink) GetEnableUdpEncap() bool {
	if m != nil {
		return m.EnableUdpEncap
	}
	return false
}

func (*IPSecLink) XXX_MessageName() string {
	return "vpp.interfaces.IPSecLink"
}

// PCI address (unsigned 32bit int) is derived from vmxnet3 interface name. It is expected that the interface
//name is in format "vmxnet3-<d>/<b>/<s>/<f>", where 'd' stands for domain (max ffff), 'b' is bus (max ff),
//'s' is slot (max 1f) and 'f is function' (max 7). All values are base 16
type VmxNet3Link struct {
	EnableElog           bool     `protobuf:"varint,2,opt,name=enable_elog,json=enableElog,proto3" json:"enable_elog,omitempty"`
	RxqSize              uint32   `protobuf:"varint,3,opt,name=rxq_size,json=rxqSize,proto3" json:"rxq_size,omitempty"`
	TxqSize              uint32   `protobuf:"varint,4,opt,name=txq_size,json=txqSize,proto3" json:"txq_size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmxNet3Link) Reset()         { *m = VmxNet3Link{} }
func (m *VmxNet3Link) String() string { return proto.CompactTextString(m) }
func (*VmxNet3Link) ProtoMessage()    {}
func (*VmxNet3Link) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ac7cab935c1dc4d, []int{7}
}
func (m *VmxNet3Link) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VmxNet3Link.Unmarshal(m, b)
}
func (m *VmxNet3Link) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VmxNet3Link.Marshal(b, m, deterministic)
}
func (m *VmxNet3Link) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmxNet3Link.Merge(m, src)
}
func (m *VmxNet3Link) XXX_Size() int {
	return xxx_messageInfo_VmxNet3Link.Size(m)
}
func (m *VmxNet3Link) XXX_DiscardUnknown() {
	xxx_messageInfo_VmxNet3Link.DiscardUnknown(m)
}

var xxx_messageInfo_VmxNet3Link proto.InternalMessageInfo

func (m *VmxNet3Link) GetEnableElog() bool {
	if m != nil {
		return m.EnableElog
	}
	return false
}

func (m *VmxNet3Link) GetRxqSize() uint32 {
	if m != nil {
		return m.RxqSize
	}
	return 0
}

func (m *VmxNet3Link) GetTxqSize() uint32 {
	if m != nil {
		return m.TxqSize
	}
	return 0
}

func (*VmxNet3Link) XXX_MessageName() string {
	return "vpp.interfaces.VmxNet3Link"
}

// BondLink defines configuration for interface type: BOND_INTERFACE
type BondLink struct {
	Id                   uint32                      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Mode                 BondLink_Mode               `protobuf:"varint,3,opt,name=mode,proto3,enum=vpp.interfaces.BondLink_Mode" json:"mode,omitempty"`
	Lb                   BondLink_LoadBalance        `protobuf:"varint,4,opt,name=lb,proto3,enum=vpp.interfaces.BondLink_LoadBalance" json:"lb,omitempty"`
	BondedInterfaces     []*BondLink_BondedInterface `protobuf:"bytes,12,rep,name=bonded_interfaces,json=bondedInterfaces,proto3" json:"bonded_interfaces,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *BondLink) Reset()         { *m = BondLink{} }
func (m *BondLink) String() string { return proto.CompactTextString(m) }
func (*BondLink) ProtoMessage()    {}
func (*BondLink) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ac7cab935c1dc4d, []int{8}
}
func (m *BondLink) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BondLink.Unmarshal(m, b)
}
func (m *BondLink) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BondLink.Marshal(b, m, deterministic)
}
func (m *BondLink) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BondLink.Merge(m, src)
}
func (m *BondLink) XXX_Size() int {
	return xxx_messageInfo_BondLink.Size(m)
}
func (m *BondLink) XXX_DiscardUnknown() {
	xxx_messageInfo_BondLink.DiscardUnknown(m)
}

var xxx_messageInfo_BondLink proto.InternalMessageInfo

func (m *BondLink) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *BondLink) GetMode() BondLink_Mode {
	if m != nil {
		return m.Mode
	}
	return BondLink_UNKNOWN
}

func (m *BondLink) GetLb() BondLink_LoadBalance {
	if m != nil {
		return m.Lb
	}
	return BondLink_L2
}

func (m *BondLink) GetBondedInterfaces() []*BondLink_BondedInterface {
	if m != nil {
		return m.BondedInterfaces
	}
	return nil
}

func (*BondLink) XXX_MessageName() string {
	return "vpp.interfaces.BondLink"
}

type BondLink_BondedInterface struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	IsPassive            bool     `protobuf:"varint,2,opt,name=is_passive,json=isPassive,proto3" json:"is_passive,omitempty"`
	IsLongTimeout        bool     `protobuf:"varint,3,opt,name=is_long_timeout,json=isLongTimeout,proto3" json:"is_long_timeout,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BondLink_BondedInterface) Reset()         { *m = BondLink_BondedInterface{} }
func (m *BondLink_BondedInterface) String() string { return proto.CompactTextString(m) }
func (*BondLink_BondedInterface) ProtoMessage()    {}
func (*BondLink_BondedInterface) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ac7cab935c1dc4d, []int{8, 0}
}
func (m *BondLink_BondedInterface) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BondLink_BondedInterface.Unmarshal(m, b)
}
func (m *BondLink_BondedInterface) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BondLink_BondedInterface.Marshal(b, m, deterministic)
}
func (m *BondLink_BondedInterface) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BondLink_BondedInterface.Merge(m, src)
}
func (m *BondLink_BondedInterface) XXX_Size() int {
	return xxx_messageInfo_BondLink_BondedInterface.Size(m)
}
func (m *BondLink_BondedInterface) XXX_DiscardUnknown() {
	xxx_messageInfo_BondLink_BondedInterface.DiscardUnknown(m)
}

var xxx_messageInfo_BondLink_BondedInterface proto.InternalMessageInfo

func (m *BondLink_BondedInterface) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BondLink_BondedInterface) GetIsPassive() bool {
	if m != nil {
		return m.IsPassive
	}
	return false
}

func (m *BondLink_BondedInterface) GetIsLongTimeout() bool {
	if m != nil {
		return m.IsLongTimeout
	}
	return false
}

func (*BondLink_BondedInterface) XXX_MessageName() string {
	return "vpp.interfaces.BondLink.BondedInterface"
}
func init() {
	proto.RegisterEnum("vpp.interfaces.Interface_Type", Interface_Type_name, Interface_Type_value)
	proto.RegisterEnum("vpp.interfaces.Interface_RxMode_Type", Interface_RxMode_Type_name, Interface_RxMode_Type_value)
	proto.RegisterEnum("vpp.interfaces.SubInterface_TagRewriteOptions", SubInterface_TagRewriteOptions_name, SubInterface_TagRewriteOptions_value)
	proto.RegisterEnum("vpp.interfaces.MemifLink_MemifMode", MemifLink_MemifMode_name, MemifLink_MemifMode_value)
	proto.RegisterEnum("vpp.interfaces.BondLink_Mode", BondLink_Mode_name, BondLink_Mode_value)
	proto.RegisterEnum("vpp.interfaces.BondLink_LoadBalance", BondLink_LoadBalance_name, BondLink_LoadBalance_value)
	proto.RegisterType((*Interface)(nil), "vpp.interfaces.Interface")
	proto.RegisterType((*Interface_Unnumbered)(nil), "vpp.interfaces.Interface.Unnumbered")
	proto.RegisterType((*Interface_RxMode)(nil), "vpp.interfaces.Interface.RxMode")
	proto.RegisterType((*Interface_RxPlacement)(nil), "vpp.interfaces.Interface.RxPlacement")
	proto.RegisterType((*SubInterface)(nil), "vpp.interfaces.SubInterface")
	proto.RegisterType((*MemifLink)(nil), "vpp.interfaces.MemifLink")
	proto.RegisterType((*VxlanLink)(nil), "vpp.interfaces.VxlanLink")
	proto.RegisterType((*AfpacketLink)(nil), "vpp.interfaces.AfpacketLink")
	proto.RegisterType((*TapLink)(nil), "vpp.interfaces.TapLink")
	proto.RegisterType((*IPSecLink)(nil), "vpp.interfaces.IPSecLink")
	proto.RegisterType((*VmxNet3Link)(nil), "vpp.interfaces.VmxNet3Link")
	proto.RegisterType((*BondLink)(nil), "vpp.interfaces.BondLink")
	proto.RegisterType((*BondLink_BondedInterface)(nil), "vpp.interfaces.BondLink.BondedInterface")
}

func init() {
	proto.RegisterFile("models/vpp/interfaces/interface.proto", fileDescriptor_1ac7cab935c1dc4d)
}

var fileDescriptor_1ac7cab935c1dc4d = []byte{
	// 1878 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x57, 0xcd, 0x72, 0xe3, 0xc6,
	0x11, 0x16, 0x7f, 0x24, 0x02, 0xcd, 0x1f, 0x61, 0x27, 0xb6, 0x83, 0x95, 0x77, 0x6d, 0x85, 0xc9,
	0xc6, 0xaa, 0xa4, 0x2c, 0xad, 0x28, 0x57, 0xc5, 0x89, 0x4f, 0xa0, 0x08, 0x79, 0xb9, 0x4b, 0x81,
	0x0c, 0x08, 0xee, 0xae, 0x53, 0xa9, 0x42, 0x81, 0xc0, 0x10, 0x44, 0x04, 0x02, 0x58, 0xcc, 0x90,
	0x4b, 0xb9, 0x2a, 0xcf, 0x90, 0x7b, 0x9e, 0x26, 0x47, 0x1f, 0x72, 0xc9, 0x31, 0xe7, 0x1c, 0x73,
	0xcc, 0x0b, 0xa4, 0xe6, 0x07, 0x14, 0xa5, 0x95, 0xec, 0x8b, 0x34, 0xf3, 0x75, 0x7f, 0x3d, 0x8d,
	0x9e, 0xee, 0x9e, 0x26, 0x3c, 0x5b, 0xa4, 0x01, 0x8e, 0xc9, 0xc9, 0x2a, 0xcb, 0x4e, 0xa2, 0x84,
	0xe2, 0x7c, 0xe6, 0xf9, 0x98, 0xdc, 0x2c, 0x8f, 0xb3, 0x3c, 0xa5, 0x29, 0x6a, 0xad, 0xb2, 0xec,
	0xf8, 0x46, 0x7e, 0xf0, 0x65, 0x18, 0xd1, 0xf9, 0x72, 0x7a, 0xec, 0xa7, 0x8b, 0x93, 0x30, 0x0d,
	0xd3, 0x13, 0xae, 0x36, 0x5d, 0xce, 0xf8, 0x8e, 0x6f, 0xf8, 0x4a, 0xd0, 0x0f, 0x9e, 0x6c, 0x9f,
	0x92, 0x11, 0xec, 0x8b, 0xbf, 0x42, 0xda, 0xfe, 0x7b, 0x1d, 0xd4, 0x7e, 0x61, 0x1b, 0x21, 0xa8,
	0x26, 0xde, 0x02, 0xeb, 0xa5, 0xc3, 0xd2, 0x91, 0x6a, 0xf3, 0x35, 0xea, 0x40, 0x95, 0x5e, 0x67,
	0x58, 0x2f, 0x1f, 0x96, 0x8e, 0x5a, 0x9d, 0xcf, 0x8e, 0x6f, 0x7b, 0x73, 0xbc, 0x21, 0x1f, 0x3b,
	0xd7, 0x19, 0xb6, 0xb9, 0x2e, 0xd2, 0xa1, 0x86, 0x13, 0x6f, 0x1a, 0xe3, 0x40, 0xaf, 0x1c, 0x96,
	0x8e, 0x14, 0xbb, 0xd8, 0xa2, 0x5f, 0x40, 0x23, 0x9b, 0x5f, 0x13, 0xd7, 0x0b, 0x82, 0x1c, 0x13,
	0xa2, 0x57, 0xf9, 0x49, 0x75, 0x86, 0x19, 0x02, 0x62, 0x2a, 0x51, 0x56, 0x28, 0x60, 0xa2, 0xef,
	0x1e, 0x56, 0x98, 0x4a, 0x94, 0x19, 0x05, 0x84, 0x34, 0xa8, 0xac, 0xf2, 0x99, 0xbe, 0x77, 0x58,
	0x3a, 0x6a, 0xda, 0x6c, 0x89, 0x7e, 0x0d, 0xfb, 0x04, 0x53, 0x37, 0x98, 0xfb, 0x99, 0xeb, 0xc7,
	0x11, 0x4e, 0xa8, 0x5e, 0xe3, 0x27, 0x37, 0x09, 0xa6, 0xbd, 0xb9, 0x9f, 0x9d, 0x73, 0x90, 0x31,
	0x17, 0x74, 0xa9, 0x2b, 0x82, 0xb9, 0xa0, 0x4b, 0xd4, 0x03, 0x58, 0x26, 0xc9, 0x72, 0x31, 0xc5,
	0x39, 0x0e, 0x74, 0xf5, 0xb0, 0x74, 0x54, 0xef, 0xfc, 0xea, 0xe1, 0xaf, 0x9c, 0x6c, 0x74, 0xed,
	0x2d, 0x1e, 0xfa, 0x06, 0x94, 0x7c, 0xed, 0xb2, 0x50, 0x13, 0xbd, 0x71, 0x58, 0x39, 0xaa, 0x77,
	0x0e, 0x1f, 0xb6, 0x61, 0xaf, 0x2f, 0xd3, 0x00, 0xdb, 0xb5, 0x9c, 0xff, 0x27, 0xe8, 0x25, 0x34,
	0xf3, 0xb5, 0x9b, 0xc5, 0x9e, 0x8f, 0x17, 0x38, 0xa1, 0x44, 0x6f, 0x72, 0x0b, 0xcf, 0x7e, 0xcc,
	0xc2, 0xa8, 0xd0, 0xb6, 0x1b, 0xf9, 0xcd, 0x86, 0xa0, 0xe7, 0x50, 0x21, 0xcb, 0xa9, 0x1e, 0xf0,
	0xef, 0x78, 0x72, 0xd7, 0xc2, 0x78, 0x39, 0xdd, 0x18, 0x79, 0xb1, 0x63, 0x33, 0x55, 0x74, 0x0a,
	0xbb, 0x0b, 0xbc, 0x88, 0x66, 0x3a, 0xe6, 0x9c, 0xc7, 0x77, 0x39, 0x97, 0x4c, 0x38, 0x88, 0x92,
	0xab, 0x17, 0x3b, 0xb6, 0xd0, 0x44, 0x7f, 0x00, 0xc5, 0x9b, 0x65, 0x9e, 0x7f, 0x85, 0xa9, 0x3e,
	0xbb, 0xff, 0x24, 0x43, 0xca, 0x25, 0x71, 0xa3, 0x8f, 0x7e, 0x0b, 0x15, 0xea, 0x65, 0x7a, 0xc8,
	0x69, 0x3f, 0xbf, 0x4b, 0x73, 0xbc, 0x4c, 0x32, 0x98, 0x16, 0xf3, 0x6d, 0xb5, 0x8e, 0xbd, 0x44,
	0x9f, 0xdf, 0xef, 0xdb, 0x6b, 0x26, 0x2c, 0x7c, 0xe3, 0x9a, 0x8c, 0xc2, 0x13, 0x5c, 0x8f, 0xee,
	0xa7, 0xf4, 0x47, 0x63, 0xec, 0x17, 0x14, 0xae, 0x89, 0xbe, 0x06, 0x65, 0xb5, 0x58, 0xbb, 0x09,
	0xa6, 0x67, 0xfa, 0x5f, 0x38, 0xeb, 0xd3, 0x0f, 0x0e, 0x5a, 0xac, 0x2d, 0x4c, 0xcf, 0x24, 0xaf,
	0xb6, 0x12, 0x5b, 0x74, 0x0c, 0xd5, 0x69, 0x9a, 0x04, 0xfa, 0x15, 0x67, 0xe9, 0x77, 0x59, 0xdd,
	0x34, 0x09, 0x24, 0x85, 0xeb, 0x1d, 0x7c, 0x0d, 0x70, 0x93, 0x40, 0xe8, 0x37, 0xf0, 0x68, 0xa3,
	0xec, 0xbe, 0x8f, 0xe8, 0xdc, 0x8d, 0x32, 0x59, 0x7b, 0xfb, 0x1b, 0xc1, 0x9b, 0x88, 0xce, 0xfb,
	0xd9, 0xc1, 0x0f, 0x25, 0xd8, 0x13, 0x79, 0x83, 0x3e, 0x82, 0xdd, 0x77, 0x4b, 0xbc, 0x14, 0x65,
	0xda, 0xb4, 0xc5, 0x06, 0xfd, 0x1e, 0xaa, 0x2c, 0xfd, 0x64, 0x9d, 0x3e, 0xfb, 0xa9, 0xec, 0x93,
	0xe5, 0xca, 0x28, 0xac, 0xe2, 0x02, 0x3c, 0xf3, 0x96, 0x31, 0xe5, 0x19, 0x2c, 0x6b, 0xb6, 0x2e,
	0x31, 0xa6, 0xdd, 0x7e, 0x09, 0x55, 0x46, 0x40, 0x75, 0xa8, 0x4d, 0xac, 0x57, 0xd6, 0xf0, 0x8d,
	0xa5, 0xed, 0xb0, 0xcd, 0x68, 0x38, 0x18, 0xf4, 0xad, 0x6f, 0xb5, 0x12, 0x6a, 0x82, 0xda, 0xb7,
	0x1c, 0xd3, 0xb6, 0x27, 0x23, 0x47, 0x2b, 0xa3, 0x06, 0x28, 0x46, 0xcf, 0x18, 0x39, 0xfd, 0xd7,
	0xa6, 0x56, 0x61, 0x9a, 0x3d, 0xf3, 0xc2, 0x98, 0x0c, 0x1c, 0xad, 0x7a, 0xf0, 0x67, 0xa8, 0x6f,
	0xe5, 0xef, 0x03, 0x9f, 0xf3, 0x09, 0xec, 0xbd, 0x4f, 0xf3, 0x2b, 0x9c, 0xf3, 0x0f, 0x6a, 0xda,
	0x72, 0x87, 0x3e, 0x87, 0xfa, 0xc2, 0x8b, 0x12, 0x97, 0xce, 0x73, 0xec, 0x15, 0xed, 0x05, 0x18,
	0xe4, 0x70, 0xa4, 0xfd, 0x8f, 0x92, 0x74, 0x15, 0x41, 0x6b, 0x62, 0xf5, 0xcc, 0x8b, 0xbe, 0x65,
	0xf6, 0x5c, 0xe7, 0xbb, 0x91, 0xa9, 0xed, 0xa0, 0x47, 0xd0, 0x1c, 0x4f, 0xba, 0x2e, 0x77, 0xf4,
	0xc2, 0x38, 0x37, 0xb5, 0x12, 0xfa, 0x18, 0x1e, 0x8d, 0x87, 0x17, 0xce, 0x1b, 0xc3, 0x36, 0xdd,
	0xc1, 0x70, 0x38, 0xea, 0x1a, 0xe7, 0xaf, 0xb4, 0x32, 0x52, 0xa0, 0xda, 0x1b, 0xf5, 0x5e, 0x69,
	0x15, 0xa4, 0xc2, 0xee, 0xa5, 0x79, 0xd9, 0xbf, 0xd0, 0xaa, 0xa8, 0x06, 0x15, 0xc7, 0x18, 0x69,
	0xbb, 0xec, 0x63, 0x8d, 0x0b, 0x77, 0x64, 0x9c, 0xbf, 0x32, 0x1d, 0x6d, 0x0f, 0x69, 0xd0, 0x78,
	0xfd, 0x76, 0x60, 0x58, 0xae, 0x33, 0xb1, 0x2c, 0x73, 0xa0, 0xd5, 0x18, 0xd2, 0x1f, 0x8d, 0xcd,
	0xf3, 0x02, 0x51, 0xd8, 0x39, 0xaf, 0x2f, 0xdf, 0x5a, 0xa6, 0x73, 0xb6, 0x75, 0xbc, 0xca, 0xbc,
	0xec, 0x0e, 0xad, 0xde, 0x16, 0x06, 0xdd, 0x3d, 0xa8, 0xc6, 0x51, 0x72, 0xd5, 0xfe, 0x5f, 0x19,
	0x1a, 0xdb, 0x15, 0xcb, 0x3e, 0x3e, 0xf3, 0x72, 0x9c, 0x50, 0x77, 0xab, 0x4d, 0x83, 0x80, 0x2c,
	0xd6, 0xac, 0x3f, 0x86, 0x3d, 0xb2, 0x9c, 0xba, 0x51, 0x20, 0xa3, 0xb6, 0x4b, 0x96, 0xd3, 0x7e,
	0x80, 0x6c, 0x68, 0x52, 0x2f, 0x74, 0xf3, 0xf7, 0x6e, 0x9a, 0xd1, 0x28, 0x4d, 0x78, 0xd8, 0x5a,
	0x9d, 0xe3, 0x1f, 0x6b, 0x0f, 0xc7, 0x8e, 0x17, 0xda, 0xf8, 0x7d, 0x1e, 0x51, 0x3c, 0xe4, 0x24,
	0x62, 0xd7, 0xa9, 0x17, 0xda, 0xef, 0xc5, 0x0e, 0x3d, 0x05, 0xc8, 0x96, 0x64, 0xee, 0x06, 0x29,
	0x3d, 0x7d, 0xc7, 0xfb, 0xb8, 0x62, 0xab, 0x0c, 0xe9, 0x31, 0x80, 0x3d, 0x25, 0xd4, 0x0b, 0x4f,
	0xf5, 0x5d, 0xee, 0x07, 0x5f, 0x4b, 0xac, 0x23, 0xfb, 0x36, 0x5f, 0xb7, 0xff, 0x56, 0x82, 0x47,
	0x1f, 0x9c, 0xc4, 0xb2, 0xa7, 0xd7, 0x1f, 0x1b, 0xdd, 0x81, 0xd9, 0xd3, 0x76, 0xd8, 0x0d, 0x8c,
	0x26, 0xe3, 0x17, 0xa7, 0x5a, 0xa9, 0x58, 0x76, 0xc4, 0x0d, 0x8d, 0x86, 0xa3, 0x53, 0xad, 0x22,
	0x57, 0x1d, 0xad, 0x8a, 0xf6, 0xa1, 0xee, 0xd8, 0x86, 0x35, 0x1e, 0x18, 0x8e, 0x79, 0x7a, 0xaa,
	0xed, 0xde, 0x06, 0x3a, 0xda, 0xde, 0x2d, 0xa0, 0x73, 0xaa, 0xd5, 0x6e, 0x03, 0x1d, 0x4d, 0x69,
	0xff, 0xbb, 0x0c, 0xea, 0xa6, 0xe7, 0xa1, 0xdf, 0xc9, 0xb2, 0x2a, 0xf1, 0x88, 0xfd, 0xf2, 0xc1,
	0xe6, 0x28, 0x56, 0xbc, 0xaf, 0x8b, 0xa2, 0xfa, 0x04, 0xf6, 0x16, 0x1e, 0xa1, 0x32, 0x81, 0x15,
	0x5b, 0xee, 0x50, 0x0b, 0xca, 0x91, 0xc8, 0xdb, 0xa6, 0x5d, 0x8e, 0x02, 0xf4, 0x05, 0xec, 0x93,
	0x94, 0x75, 0x46, 0x77, 0x16, 0xc5, 0x98, 0xdf, 0xab, 0x78, 0x14, 0x5b, 0x02, 0xbe, 0x90, 0x28,
	0x33, 0x48, 0xb0, 0x9f, 0x63, 0xca, 0x63, 0xaa, 0xda, 0x72, 0x87, 0x3e, 0x05, 0x35, 0x8f, 0x92,
	0xd0, 0x25, 0xd1, 0xf7, 0x58, 0x86, 0x56, 0x61, 0xc0, 0x38, 0xfa, 0x9e, 0x67, 0xcc, 0x74, 0x39,
	0x9b, 0xe1, 0x5c, 0x88, 0x6b, 0x5c, 0x0c, 0x02, 0xe2, 0x0a, 0x8c, 0xbd, 0x76, 0x79, 0xcd, 0x11,
	0xf9, 0x2c, 0x2a, 0xf9, 0xfa, 0x8f, 0x7c, 0xcf, 0x84, 0x74, 0x23, 0x54, 0x85, 0x90, 0x4a, 0x61,
	0xbb, 0x23, 0xc3, 0xc4, 0x7b, 0x52, 0x03, 0x14, 0xd3, 0x79, 0x61, 0xda, 0x96, 0xe9, 0x68, 0x3b,
	0x68, 0x0f, 0xca, 0xfd, 0x91, 0x56, 0x62, 0xb1, 0x1d, 0x4d, 0x2c, 0xc7, 0xed, 0x5b, 0x2f, 0xcd,
	0x73, 0x47, 0x2b, 0xb7, 0xff, 0x0a, 0xea, 0xa6, 0x65, 0x33, 0xdf, 0x48, 0xee, 0x6f, 0x46, 0x01,
	0x99, 0xcd, 0x24, 0xf7, 0x8b, 0x49, 0xe0, 0x73, 0xa8, 0x07, 0x84, 0x6e, 0x14, 0xca, 0x42, 0x21,
	0x20, 0xb4, 0x50, 0x60, 0x73, 0x40, 0x12, 0xc9, 0x60, 0xb2, 0x25, 0x7a, 0x02, 0xea, 0x62, 0x19,
	0xd3, 0xc8, 0xf7, 0x08, 0x95, 0x71, 0xbc, 0x01, 0xda, 0xcf, 0xa1, 0xb1, 0xfd, 0x2e, 0xa1, 0x43,
	0x68, 0xcc, 0x53, 0x42, 0xdd, 0x68, 0x76, 0xab, 0xa0, 0x18, 0xd6, 0x9f, 0xb1, 0x82, 0x6a, 0xff,
	0xab, 0x04, 0x35, 0xf9, 0x26, 0xb1, 0xa9, 0x66, 0x85, 0x73, 0xc2, 0xea, 0x47, 0xb4, 0xaa, 0x62,
	0xfb, 0x81, 0x9d, 0xf2, 0x5d, 0x3b, 0xec, 0x96, 0x69, 0xea, 0x2e, 0x22, 0x3f, 0x4f, 0x09, 0xce,
	0x57, 0x91, 0x2f, 0xba, 0xac, 0x6a, 0xb7, 0x68, 0x7a, 0xb9, 0x85, 0x32, 0x53, 0xf9, 0xda, 0xbd,
	0xb9, 0xd0, 0xaa, 0xb8, 0xb1, 0x7c, 0x6d, 0x17, 0x57, 0x7a, 0x08, 0x0d, 0xba, 0xad, 0x21, 0x2a,
	0x0c, 0xe8, 0x8d, 0xc6, 0x53, 0x00, 0x31, 0x6f, 0xb9, 0x21, 0x49, 0x79, 0x4a, 0x28, 0xb6, 0x2a,
	0x90, 0x6f, 0x49, 0xda, 0xfe, 0x6f, 0x05, 0xd4, 0xcd, 0x2b, 0xc8, 0x62, 0x88, 0x49, 0x22, 0x93,
	0x94, 0x2d, 0x59, 0xd8, 0xbd, 0x84, 0x46, 0x6e, 0x8e, 0xb3, 0xd8, 0xbb, 0x2e, 0x5a, 0x2c, 0x83,
	0x6c, 0x8e, 0xa0, 0xc7, 0xa0, 0xc4, 0xa9, 0xef, 0xc5, 0xec, 0xb9, 0x12, 0x31, 0xae, 0xf1, 0x7d,
	0x3f, 0xe3, 0xe9, 0x84, 0x17, 0x29, 0xc5, 0x4c, 0x26, 0xf2, 0x54, 0x11, 0x80, 0x10, 0x0a, 0x1e,
	0xc9, 0xa2, 0x22, 0x53, 0x39, 0x30, 0xce, 0x22, 0xe6, 0xb4, 0x64, 0x32, 0xa9, 0x48, 0x54, 0x69,
	0x8b, 0x89, 0xcf, 0x00, 0xfc, 0xfc, 0x3a, 0xa3, 0xa9, 0xeb, 0xc5, 0x21, 0x4f, 0xd4, 0x56, 0xe7,
	0x23, 0x51, 0x8d, 0x7c, 0x9c, 0x3d, 0xe7, 0x42, 0x23, 0x0e, 0x6d, 0xd5, 0x2f, 0x96, 0xe8, 0x08,
	0x34, 0x71, 0xa0, 0xa4, 0x5e, 0xe1, 0x6b, 0x9e, 0xc6, 0xaa, 0xdd, 0xe2, 0xb8, 0x20, 0xbd, 0xc2,
	0xd7, 0xec, 0x29, 0x96, 0xa7, 0x6f, 0xa9, 0x82, 0x78, 0x8a, 0x85, 0xe0, 0x46, 0xf7, 0x39, 0xa8,
	0xac, 0x03, 0x84, 0xdc, 0x93, 0x3a, 0xf7, 0xe4, 0x67, 0x5b, 0x9e, 0xb0, 0x0e, 0x1a, 0x32, 0x47,
	0x94, 0x48, 0xae, 0xd8, 0x74, 0x2a, 0x03, 0xc6, 0x79, 0xcc, 0x76, 0x83, 0xdb, 0x6e, 0x8a, 0xb8,
	0x31, 0x94, 0x59, 0x3e, 0x02, 0xad, 0x88, 0xde, 0x46, 0xb1, 0x29, 0xfc, 0x95, 0x41, 0xdc, 0xd2,
	0x94, 0x57, 0xbc, 0x0c, 0x32, 0x17, 0x27, 0xbe, 0x97, 0xe9, 0x2d, 0x7e, 0x51, 0x2d, 0x81, 0x4f,
	0x82, 0xcc, 0x64, 0x68, 0x3b, 0x80, 0xfa, 0xd6, 0xf0, 0xc2, 0x2e, 0x57, 0x12, 0x71, 0x9c, 0x86,
	0xf2, 0xda, 0x65, 0xba, 0x98, 0x71, 0x1a, 0xb2, 0xcb, 0xcd, 0xd7, 0xef, 0x44, 0x6a, 0x89, 0xc2,
	0xaa, 0xe5, 0xeb, 0x77, 0x3c, 0xaf, 0x1e, 0x83, 0x42, 0x0b, 0x91, 0xc8, 0xcb, 0x1a, 0x15, 0xa2,
	0xf6, 0x3f, 0x2b, 0xa0, 0x14, 0xd3, 0x8e, 0x6c, 0x71, 0xa5, 0x4d, 0x8b, 0x3b, 0x95, 0x3d, 0x54,
	0xbc, 0x3a, 0x4f, 0x1f, 0x9a, 0x92, 0x8e, 0xb7, 0xba, 0xe7, 0x57, 0x50, 0x8e, 0xa7, 0xfc, 0x90,
	0xd6, 0x87, 0xd3, 0xf8, 0x86, 0x30, 0x48, 0xbd, 0xa0, 0xeb, 0xc5, 0x5e, 0xe2, 0x63, 0xbb, 0x1c,
	0x4f, 0xd1, 0x04, 0x1e, 0xb1, 0x31, 0x0b, 0x07, 0xee, 0x8d, 0xb6, 0x1c, 0xc7, 0x8f, 0x1e, 0x34,
	0xd2, 0xe5, 0x8c, 0xcd, 0xbb, 0x67, 0x6b, 0xd3, 0xdb, 0x00, 0x39, 0x88, 0x61, 0xff, 0x8e, 0xd2,
	0xbd, 0xbf, 0x94, 0x9e, 0x02, 0x44, 0xc4, 0xcd, 0x3c, 0x42, 0xa2, 0x15, 0x96, 0x91, 0x55, 0x23,
	0x32, 0x12, 0x00, 0x4b, 0x82, 0x88, 0xb8, 0x71, 0x9a, 0x84, 0x2e, 0x8d, 0x16, 0x38, 0x5d, 0x52,
	0x59, 0x5a, 0xcd, 0x88, 0x0c, 0xd2, 0x24, 0x74, 0x04, 0xd8, 0xfe, 0x0e, 0xaa, 0xbc, 0xa5, 0xde,
	0x1a, 0xb5, 0xf6, 0xa1, 0x6e, 0x0f, 0x27, 0x56, 0xcf, 0xb5, 0x87, 0xdd, 0xbe, 0xa5, 0x95, 0xd8,
	0x24, 0x63, 0x9c, 0xb3, 0xe9, 0xca, 0x65, 0x03, 0xcb, 0x64, 0xa4, 0x95, 0xd9, 0x74, 0xf2, 0x76,
	0x68, 0x6b, 0x15, 0x36, 0x9d, 0x74, 0xed, 0xa1, 0xd1, 0x3b, 0x37, 0xc6, 0x8e, 0x56, 0x65, 0xcf,
	0xe3, 0xc0, 0x38, 0x1f, 0x69, 0xbb, 0xed, 0x2f, 0xa0, 0xbe, 0x15, 0x32, 0xd6, 0xa6, 0x07, 0x1d,
	0x6d, 0x87, 0x11, 0x07, 0x67, 0x5f, 0x69, 0x25, 0xbe, 0xe8, 0x9c, 0x69, 0xe5, 0xee, 0xcb, 0x1f,
	0xfe, 0xf3, 0x59, 0xe9, 0x4f, 0xbd, 0xad, 0x5f, 0x9a, 0x71, 0x14, 0x7a, 0x34, 0x65, 0xbf, 0x22,
	0xbf, 0xf4, 0x42, 0x9c, 0xd0, 0x13, 0x2f, 0x8b, 0x4e, 0xee, 0xfd, 0x01, 0xfb, 0xcd, 0x2a, 0xcb,
	0xb6, 0xe2, 0x3f, 0xdd, 0xe3, 0xbf, 0x34, 0xcf, 0xfe, 0x1f, 0x00, 0x00, 0xff, 0xff, 0xba, 0x96,
	0x18, 0x73, 0xef, 0x0e, 0x00, 0x00,
}
