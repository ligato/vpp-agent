// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/models/linux/interfaces/interface.proto

package linux_interfaces

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	namespace "github.com/ligato/vpp-agent/api/models/linux/namespace"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Interface_Type int32

const (
	Interface_UNDEFINED  Interface_Type = 0
	Interface_VETH       Interface_Type = 1
	Interface_TAP_TO_VPP Interface_Type = 2
	Interface_LOOPBACK   Interface_Type = 3
	Interface_EXISTING   Interface_Type = 4
)

var Interface_Type_name = map[int32]string{
	0: "UNDEFINED",
	1: "VETH",
	2: "TAP_TO_VPP",
	3: "LOOPBACK",
	4: "EXISTING",
}

var Interface_Type_value = map[string]int32{
	"UNDEFINED":  0,
	"VETH":       1,
	"TAP_TO_VPP": 2,
	"LOOPBACK":   3,
	"EXISTING":   4,
}

func (x Interface_Type) String() string {
	return proto.EnumName(Interface_Type_name, int32(x))
}

func (Interface_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_baac54ad634715b1, []int{0, 0}
}

type VethLink_ChecksumOffloading int32

const (
	VethLink_CHKSM_OFFLOAD_DEFAULT  VethLink_ChecksumOffloading = 0
	VethLink_CHKSM_OFFLOAD_ENABLED  VethLink_ChecksumOffloading = 1
	VethLink_CHKSM_OFFLOAD_DISABLED VethLink_ChecksumOffloading = 2
)

var VethLink_ChecksumOffloading_name = map[int32]string{
	0: "CHKSM_OFFLOAD_DEFAULT",
	1: "CHKSM_OFFLOAD_ENABLED",
	2: "CHKSM_OFFLOAD_DISABLED",
}

var VethLink_ChecksumOffloading_value = map[string]int32{
	"CHKSM_OFFLOAD_DEFAULT":  0,
	"CHKSM_OFFLOAD_ENABLED":  1,
	"CHKSM_OFFLOAD_DISABLED": 2,
}

func (x VethLink_ChecksumOffloading) String() string {
	return proto.EnumName(VethLink_ChecksumOffloading_name, int32(x))
}

func (VethLink_ChecksumOffloading) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_baac54ad634715b1, []int{1, 0}
}

type Interface struct {
	// Name is mandatory field representing logical name for the interface.
	// It must be unique across all configured interfaces.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Type represents the type of interface and It must match with actual Link.
	Type Interface_Type `protobuf:"varint,2,opt,name=type,proto3,enum=linux.interfaces.Interface_Type" json:"type,omitempty"`
	// Namespace is a reference to a Linux network namespace where the interface
	// should be put into.
	Namespace *namespace.NetNamespace `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Name of the interface in the host OS. If not set, the host name will be
	// the same as the interface logical name.
	HostIfName string `protobuf:"bytes,4,opt,name=host_if_name,json=hostIfName,proto3" json:"host_if_name,omitempty"`
	// Enabled controls if the interface should be UP.
	Enabled bool `protobuf:"varint,5,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// IPAddresses define list of IP addresses for the interface and must be
	// defined in the following format: <ipAddress>/<ipPrefix>.
	// Interface IP address can be also allocated via netalloc plugin and
	// referenced here, see: api/models/netalloc/netalloc.proto
	IpAddresses []string `protobuf:"bytes,6,rep,name=ip_addresses,json=ipAddresses,proto3" json:"ip_addresses,omitempty"`
	// PhysAddress represents physical address (MAC) of the interface.
	// Random address will be assigned if left empty.
	PhysAddress string `protobuf:"bytes,7,opt,name=phys_address,json=physAddress,proto3" json:"phys_address,omitempty"`
	// MTU is the maximum transmission unit value.
	Mtu uint32 `protobuf:"varint,8,opt,name=mtu,proto3" json:"mtu,omitempty"`
	// Types that are valid to be assigned to Link:
	//	*Interface_Veth
	//	*Interface_Tap
	Link isInterface_Link `protobuf_oneof:"link"`
	// Configure/Resync link only. IP/MAC addresses are expected to be configured
	// externally - i.e. by a different agent or manually via CLI.
	LinkOnly             bool     `protobuf:"varint,9,opt,name=link_only,json=linkOnly,proto3" json:"link_only,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Interface) Reset()         { *m = Interface{} }
func (m *Interface) String() string { return proto.CompactTextString(m) }
func (*Interface) ProtoMessage()    {}
func (*Interface) Descriptor() ([]byte, []int) {
	return fileDescriptor_baac54ad634715b1, []int{0}
}

func (m *Interface) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Interface.Unmarshal(m, b)
}
func (m *Interface) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Interface.Marshal(b, m, deterministic)
}
func (m *Interface) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Interface.Merge(m, src)
}
func (m *Interface) XXX_Size() int {
	return xxx_messageInfo_Interface.Size(m)
}
func (m *Interface) XXX_DiscardUnknown() {
	xxx_messageInfo_Interface.DiscardUnknown(m)
}

var xxx_messageInfo_Interface proto.InternalMessageInfo

func (m *Interface) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Interface) GetType() Interface_Type {
	if m != nil {
		return m.Type
	}
	return Interface_UNDEFINED
}

func (m *Interface) GetNamespace() *namespace.NetNamespace {
	if m != nil {
		return m.Namespace
	}
	return nil
}

func (m *Interface) GetHostIfName() string {
	if m != nil {
		return m.HostIfName
	}
	return ""
}

func (m *Interface) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *Interface) GetIpAddresses() []string {
	if m != nil {
		return m.IpAddresses
	}
	return nil
}

func (m *Interface) GetPhysAddress() string {
	if m != nil {
		return m.PhysAddress
	}
	return ""
}

func (m *Interface) GetMtu() uint32 {
	if m != nil {
		return m.Mtu
	}
	return 0
}

type isInterface_Link interface {
	isInterface_Link()
}

type Interface_Veth struct {
	Veth *VethLink `protobuf:"bytes,20,opt,name=veth,proto3,oneof"`
}

type Interface_Tap struct {
	Tap *TapLink `protobuf:"bytes,21,opt,name=tap,proto3,oneof"`
}

func (*Interface_Veth) isInterface_Link() {}

func (*Interface_Tap) isInterface_Link() {}

func (m *Interface) GetLink() isInterface_Link {
	if m != nil {
		return m.Link
	}
	return nil
}

func (m *Interface) GetVeth() *VethLink {
	if x, ok := m.GetLink().(*Interface_Veth); ok {
		return x.Veth
	}
	return nil
}

func (m *Interface) GetTap() *TapLink {
	if x, ok := m.GetLink().(*Interface_Tap); ok {
		return x.Tap
	}
	return nil
}

func (m *Interface) GetLinkOnly() bool {
	if m != nil {
		return m.LinkOnly
	}
	return false
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Interface) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Interface_Veth)(nil),
		(*Interface_Tap)(nil),
	}
}

type VethLink struct {
	// Name of the VETH peer, i.e. other end of the linux veth (mandatory for VETH)
	PeerIfName string `protobuf:"bytes,1,opt,name=peer_if_name,json=peerIfName,proto3" json:"peer_if_name,omitempty"`
	// Checksum offloading - Rx side (enabled by default)
	RxChecksumOffloading VethLink_ChecksumOffloading `protobuf:"varint,2,opt,name=rx_checksum_offloading,json=rxChecksumOffloading,proto3,enum=linux.interfaces.VethLink_ChecksumOffloading" json:"rx_checksum_offloading,omitempty"`
	// Checksum offloading - Tx side (enabled by default)
	TxChecksumOffloading VethLink_ChecksumOffloading `protobuf:"varint,3,opt,name=tx_checksum_offloading,json=txChecksumOffloading,proto3,enum=linux.interfaces.VethLink_ChecksumOffloading" json:"tx_checksum_offloading,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *VethLink) Reset()         { *m = VethLink{} }
func (m *VethLink) String() string { return proto.CompactTextString(m) }
func (*VethLink) ProtoMessage()    {}
func (*VethLink) Descriptor() ([]byte, []int) {
	return fileDescriptor_baac54ad634715b1, []int{1}
}

func (m *VethLink) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VethLink.Unmarshal(m, b)
}
func (m *VethLink) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VethLink.Marshal(b, m, deterministic)
}
func (m *VethLink) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VethLink.Merge(m, src)
}
func (m *VethLink) XXX_Size() int {
	return xxx_messageInfo_VethLink.Size(m)
}
func (m *VethLink) XXX_DiscardUnknown() {
	xxx_messageInfo_VethLink.DiscardUnknown(m)
}

var xxx_messageInfo_VethLink proto.InternalMessageInfo

func (m *VethLink) GetPeerIfName() string {
	if m != nil {
		return m.PeerIfName
	}
	return ""
}

func (m *VethLink) GetRxChecksumOffloading() VethLink_ChecksumOffloading {
	if m != nil {
		return m.RxChecksumOffloading
	}
	return VethLink_CHKSM_OFFLOAD_DEFAULT
}

func (m *VethLink) GetTxChecksumOffloading() VethLink_ChecksumOffloading {
	if m != nil {
		return m.TxChecksumOffloading
	}
	return VethLink_CHKSM_OFFLOAD_DEFAULT
}

type TapLink struct {
	// Logical name of the VPP TAP interface (mandatory for TAP_TO_VPP)
	VppTapIfName         string   `protobuf:"bytes,1,opt,name=vpp_tap_if_name,json=vppTapIfName,proto3" json:"vpp_tap_if_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TapLink) Reset()         { *m = TapLink{} }
func (m *TapLink) String() string { return proto.CompactTextString(m) }
func (*TapLink) ProtoMessage()    {}
func (*TapLink) Descriptor() ([]byte, []int) {
	return fileDescriptor_baac54ad634715b1, []int{2}
}

func (m *TapLink) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TapLink.Unmarshal(m, b)
}
func (m *TapLink) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TapLink.Marshal(b, m, deterministic)
}
func (m *TapLink) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TapLink.Merge(m, src)
}
func (m *TapLink) XXX_Size() int {
	return xxx_messageInfo_TapLink.Size(m)
}
func (m *TapLink) XXX_DiscardUnknown() {
	xxx_messageInfo_TapLink.DiscardUnknown(m)
}

var xxx_messageInfo_TapLink proto.InternalMessageInfo

func (m *TapLink) GetVppTapIfName() string {
	if m != nil {
		return m.VppTapIfName
	}
	return ""
}

func init() {
	proto.RegisterEnum("linux.interfaces.Interface_Type", Interface_Type_name, Interface_Type_value)
	proto.RegisterEnum("linux.interfaces.VethLink_ChecksumOffloading", VethLink_ChecksumOffloading_name, VethLink_ChecksumOffloading_value)
	proto.RegisterType((*Interface)(nil), "linux.interfaces.Interface")
	proto.RegisterType((*VethLink)(nil), "linux.interfaces.VethLink")
	proto.RegisterType((*TapLink)(nil), "linux.interfaces.TapLink")
}

func init() {
	proto.RegisterFile("api/models/linux/interfaces/interface.proto", fileDescriptor_baac54ad634715b1)
}

var fileDescriptor_baac54ad634715b1 = []byte{
	// 582 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0x41, 0x6f, 0xda, 0x30,
	0x18, 0x6d, 0x48, 0xd6, 0x92, 0xaf, 0xb4, 0x8b, 0xac, 0xb6, 0x4a, 0x3b, 0x4d, 0xca, 0x90, 0x36,
	0x21, 0x4d, 0x0d, 0x55, 0xb7, 0x5b, 0x4f, 0x50, 0xc2, 0x60, 0x65, 0x04, 0xa5, 0x69, 0x35, 0xed,
	0x62, 0xb9, 0x60, 0x48, 0xd4, 0x90, 0x58, 0x89, 0x41, 0xe5, 0xcf, 0xee, 0x7f, 0xec, 0x36, 0xd9,
	0x24, 0x44, 0x2b, 0xdd, 0x0e, 0xbb, 0x7d, 0xdf, 0xf3, 0x7b, 0x7e, 0x9f, 0x5f, 0x1c, 0xc3, 0x47,
	0xc2, 0xc2, 0xe6, 0x3c, 0x99, 0xd0, 0x28, 0x6b, 0x46, 0x61, 0xbc, 0x78, 0x6a, 0x86, 0x31, 0xa7,
	0xe9, 0x94, 0x8c, 0x69, 0x56, 0x96, 0x36, 0x4b, 0x13, 0x9e, 0x20, 0x43, 0x32, 0xec, 0x92, 0x71,
	0xf6, 0xe1, 0x0f, 0x69, 0x4c, 0xe6, 0x34, 0x63, 0x64, 0x4c, 0xcb, 0x6a, 0xad, 0xac, 0xff, 0x52,
	0x41, 0xef, 0x17, 0x32, 0x84, 0x40, 0x13, 0x04, 0x53, 0xb1, 0x94, 0x86, 0xee, 0xc9, 0x1a, 0x7d,
	0x06, 0x8d, 0xaf, 0x18, 0x35, 0x2b, 0x96, 0xd2, 0x38, 0xbc, 0xb4, 0xec, 0xe7, 0x56, 0xf6, 0x46,
	0x6e, 0xfb, 0x2b, 0x46, 0x3d, 0xc9, 0x46, 0x57, 0xa0, 0x6f, 0xac, 0x4c, 0xd5, 0x52, 0x1a, 0xfb,
	0x97, 0x6f, 0x73, 0x69, 0x39, 0xc2, 0x90, 0xf2, 0x61, 0xd1, 0x78, 0x25, 0x1f, 0x59, 0x50, 0x0b,
	0x92, 0x8c, 0xe3, 0x70, 0x8a, 0xe5, 0x38, 0x9a, 0x1c, 0x07, 0x04, 0xd6, 0x9f, 0x0a, 0x05, 0x32,
	0x61, 0x8f, 0xc6, 0xe4, 0x21, 0xa2, 0x13, 0xf3, 0x95, 0xa5, 0x34, 0xaa, 0x5e, 0xd1, 0xa2, 0x77,
	0x50, 0x0b, 0x19, 0x26, 0x93, 0x49, 0x4a, 0xb3, 0x8c, 0x66, 0xe6, 0xae, 0xa5, 0x36, 0x74, 0x6f,
	0x3f, 0x64, 0xad, 0x02, 0x12, 0x14, 0x16, 0xac, 0xb2, 0x82, 0x64, 0xee, 0xc9, 0xed, 0xf7, 0x05,
	0x96, 0x93, 0x90, 0x01, 0xea, 0x9c, 0x2f, 0xcc, 0xaa, 0xa5, 0x34, 0x0e, 0x3c, 0x51, 0xa2, 0x0b,
	0xd0, 0x96, 0x94, 0x07, 0xe6, 0x91, 0x3c, 0xcb, 0xd9, 0x76, 0x0c, 0xf7, 0x94, 0x07, 0x83, 0x30,
	0x7e, 0xec, 0xed, 0x78, 0x92, 0x89, 0xce, 0x41, 0xe5, 0x84, 0x99, 0xc7, 0x52, 0x70, 0xba, 0x2d,
	0xf0, 0x09, 0xcb, 0xf9, 0x82, 0x87, 0xde, 0x80, 0x1e, 0x85, 0xf1, 0x23, 0x4e, 0xe2, 0x68, 0x65,
	0xea, 0xf2, 0x50, 0x55, 0x01, 0xb8, 0x71, 0xb4, 0xaa, 0xdf, 0x80, 0x26, 0xc2, 0x45, 0x07, 0xa0,
	0xdf, 0x0d, 0x3b, 0x4e, 0xb7, 0x3f, 0x74, 0x3a, 0xc6, 0x0e, 0xaa, 0x82, 0x76, 0xef, 0xf8, 0x3d,
	0x43, 0x41, 0x87, 0x00, 0x7e, 0x6b, 0x84, 0x7d, 0x17, 0xdf, 0x8f, 0x46, 0x46, 0x05, 0xd5, 0xa0,
	0x3a, 0x70, 0xdd, 0x51, 0xbb, 0x75, 0x7d, 0x63, 0xa8, 0xa2, 0x73, 0xbe, 0xf7, 0x6f, 0xfd, 0xfe,
	0xf0, 0x8b, 0xa1, 0xb5, 0x77, 0x41, 0x13, 0x1b, 0xd7, 0x7f, 0x56, 0xa0, 0x5a, 0x4c, 0x2d, 0x32,
	0x67, 0x94, 0xa6, 0x9b, 0xcc, 0xd7, 0x57, 0x00, 0x04, 0x96, 0x67, 0x3e, 0x86, 0x93, 0xf4, 0x09,
	0x8f, 0x03, 0x3a, 0x7e, 0xcc, 0x16, 0x73, 0x9c, 0x4c, 0xa7, 0x51, 0x42, 0x26, 0x61, 0x3c, 0xcb,
	0xaf, 0xc6, 0xf9, 0xdf, 0x33, 0xb1, 0xaf, 0x73, 0x95, 0xbb, 0x11, 0x79, 0x47, 0xe9, 0xd3, 0x36,
	0x2a, 0x4c, 0xf8, 0xcb, 0x26, 0xea, 0x7f, 0x99, 0xf0, 0x17, 0x4c, 0xea, 0x53, 0x40, 0x2f, 0x58,
	0x9f, 0xc2, 0xf1, 0x75, 0xef, 0xe6, 0xf6, 0x1b, 0x76, 0xbb, 0xdd, 0x81, 0xdb, 0xea, 0xe0, 0x8e,
	0xd3, 0x6d, 0xdd, 0x0d, 0x7c, 0x63, 0x67, 0x7b, 0xc9, 0x19, 0xb6, 0xda, 0x03, 0xa7, 0x63, 0x28,
	0xe8, 0x0c, 0x4e, 0x9e, 0xa9, 0xfa, 0xb7, 0xeb, 0xb5, 0x4a, 0xfd, 0x02, 0xf6, 0xf2, 0x8f, 0x8c,
	0xde, 0xc3, 0xeb, 0x25, 0x63, 0x98, 0x13, 0xf6, 0x2c, 0xe1, 0xda, 0x92, 0x31, 0x9f, 0xb0, 0x75,
	0xc6, 0xed, 0xaf, 0x3f, 0x7a, 0xb3, 0x90, 0x07, 0x8b, 0x07, 0x7b, 0x9c, 0xcc, 0x9b, 0x51, 0x38,
	0x23, 0x3c, 0x69, 0x2e, 0x19, 0x3b, 0x27, 0x33, 0x1a, 0xf3, 0xe6, 0x3f, 0xde, 0x84, 0x2b, 0x09,
	0xe0, 0x12, 0x78, 0xd8, 0x95, 0x7f, 0xf8, 0xa7, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xdd, 0x79,
	0x76, 0x62, 0x4a, 0x04, 0x00, 0x00,
}
