syntax = "proto3";

package linux.interfaces;

option go_package = "github.com/ligato/vpp-agent/api/models/linux/interfaces;linux_interfaces";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
option (gogoproto.messagename_all) = true;

import "models/linux/namespace/namespace.proto";

message Interface {
    enum Type {
        UNDEFINED = 0;
        VETH = 1;
        TAP_TO_VPP = 2; // TAP created by VPP to have the Linux-side further configured
        LOOPBACK = 3;
        EXISTING = 4;
    };

    // Name is mandatory field representing logical name for the interface.
    // It must be unique across all configured interfaces.
    string name = 1;

    // Type represents the type of interface and It must match with actual Link.
    Type type = 2;

    // Namespace is a reference to a Linux network namespace where the interface
    // should be put into.
    linux.namespace.NetNamespace namespace = 3;

    // Name of the interface in the host OS. If not set, the host name will be
    // the same as the interface logical name.
    string host_if_name = 4;

    // Enabled controls if the interface should be UP.
    bool enabled = 5;

    // IPAddresses define list of IP addresses for the interface and must be
    // defined in the following format: <ipAddress>/<ipPrefix>.
    // Interface IP address can be also allocated via netalloc plugin and
    // referenced here, see: api/models/netalloc/netalloc.proto
    repeated string ip_addresses = 6;

    // PhysAddress represents physical address (MAC) of the interface.
    // Random address will be assigned if left empty.
    string phys_address = 7;

    /* MTU is the maximum transmission unit value. */
    uint32 mtu = 8;

    oneof link {
        // VETH-specific configuration
        VethLink veth = 20;

        // TAP_TO_VPP-specific configuration
        TapLink tap = 21;
    };

    // Configure/Resync link only. IP/MAC addresses are expected to be configured
    // externally - i.e. by a different agent or manually via CLI.
    bool link_only = 9;
};

message VethLink {
    // Name of the VETH peer, i.e. other end of the linux veth (mandatory for VETH)
    string peer_if_name = 1;

    enum ChecksumOffloading {
        CHKSM_OFFLOAD_DEFAULT = 0;
        CHKSM_OFFLOAD_ENABLED = 1;
        CHKSM_OFFLOAD_DISABLED = 2;
    }

    // Checksum offloading - Rx side (enabled by default)
    ChecksumOffloading rx_checksum_offloading = 2;

    // Checksum offloading - Tx side (enabled by default)
    ChecksumOffloading tx_checksum_offloading = 3;
};

message TapLink {
    // Logical name of the VPP TAP interface (mandatory for TAP_TO_VPP)
    string vpp_tap_if_name = 1;
};
