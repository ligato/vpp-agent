<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20180516 15:15:43.048" generator="Robot 3.0.3 (Python 2.7.12 on linux2)">
<suite source="/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/acl_traffic.robot" id="s1" name="Acl Traffic">
<kw type="setup" name="Testsuite Setup" library="setup-teardown">
<doc>*Testsuite Setup*</doc>
<kw name="Discard old results" library="setup-teardown">
<doc>Remove and re-create results.</doc>
<kw name="Remove Directory" library="OperatingSystem">
<doc>Removes the directory pointed to by the given ``path``.</doc>
<arguments>
<arg>${RESULTS_FOLDER}</arg>
<arg>recursive=True</arg>
</arguments>
<msg timestamp="20180516 15:15:43.421" html="yes" level="INFO">Directory '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results&lt;/a&gt;' does not exist.</msg>
<status status="PASS" endtime="20180516 15:15:43.422" starttime="20180516 15:15:43.421"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${RESULTS_FOLDER}</arg>
</arguments>
<msg timestamp="20180516 15:15:43.422" html="yes" level="INFO">Created directory '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:15:43.422" starttime="20180516 15:15:43.422"></status>
</kw>
<status status="PASS" endtime="20180516 15:15:43.422" starttime="20180516 15:15:43.421"></status>
</kw>
<kw name="Open Connection To Docker Host" library="setup-teardown">
<kw name="Open SSH Connection" library="setup-teardown">
<arguments>
<arg>docker</arg>
<arg>${DOCKER_HOST_IP}</arg>
<arg>${DOCKER_HOST_USER}</arg>
<arg>${DOCKER_HOST_PSWD}</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${name}</arg>
<arg>${ip}</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20180516 15:15:43.423" level="INFO">docker</msg>
<msg timestamp="20180516 15:15:43.423" level="INFO">192.168.100.20</msg>
<msg timestamp="20180516 15:15:43.424" level="INFO">msestak</msg>
<msg timestamp="20180516 15:15:43.424" level="INFO">Heslo9999</msg>
<status status="PASS" endtime="20180516 15:15:43.424" starttime="20180516 15:15:43.423"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${ip}</arg>
<arg>${name}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:15:43.424" starttime="20180516 15:15:43.424"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${pswd}"!="rsa_id"</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20180516 15:15:43.425" level="INFO">Logging into '192.168.100.20:22' as 'msestak'.</msg>
<msg timestamp="20180516 15:15:44.719" level="INFO">Read output: Welcome to Ubuntu 16.04.4 LTS (GNU/Linux 4.13.0-41-generic x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage

32 packages can be updated.
4 updates are security updates.

Last login: Wed May 16 14:54:43 2018 from 192.168.100.2
msestak@msestak-VirtualBox:~$</msg>
<status status="PASS" endtime="20180516 15:15:44.719" starttime="20180516 15:15:43.425"></status>
</kw>
<status status="PASS" endtime="20180516 15:15:44.719" starttime="20180516 15:15:43.424"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${pswd}"=="rsa_id"</arg>
<arg>SSHLibrary.Login_With_Public_Key</arg>
<arg>${user}</arg>
<arg>%{HOME}/.ssh/id_rsa</arg>
<arg>any</arg>
</arguments>
<status status="PASS" endtime="20180516 15:15:44.720" starttime="20180516 15:15:44.719"></status>
</kw>
<status status="PASS" endtime="20180516 15:15:44.720" starttime="20180516 15:15:43.423"></status>
</kw>
<kw name="Get Machine Status" library="setup-teardown">
<doc>*Get Machine Status ${machine}*</doc>
<arguments>
<arg>docker</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<msg timestamp="20180516 15:15:44.725" level="INFO">docker</msg>
<status status="PASS" endtime="20180516 15:15:44.725" starttime="20180516 15:15:44.725"></status>
</kw>
<kw name="Execute On Machine" library="ssh">
<doc>*Execute On Machine docker ${command}*</doc>
<arguments>
<arg>${machine}</arg>
<arg>df</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${log}</arg>
</arguments>
<msg timestamp="20180516 15:15:44.731" level="INFO">docker</msg>
<msg timestamp="20180516 15:15:44.731" level="INFO">df</msg>
<msg timestamp="20180516 15:15:44.731" level="INFO">true</msg>
<status status="PASS" endtime="20180516 15:15:44.731" starttime="20180516 15:15:44.730"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:15:44.731" starttime="20180516 15:15:44.731"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:15:44.732" level="INFO">${currdate} = 2018-05-16 15:15:44.732</msg>
<status status="PASS" endtime="20180516 15:15:44.732" starttime="20180516 15:15:44.732"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20180516 15:15:44.732" level="INFO">Executing command 'df'.</msg>
<msg timestamp="20180516 15:15:44.746" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:15:44.746" level="INFO">${out} = Filesystem     1K-blocks     Used Available Use% Mounted on
udev             2884468        0   2884468   0% /dev
tmpfs             582176    59380    522796  11% /run
/dev/sda1       44217808 2063662...</msg>
<msg timestamp="20180516 15:15:44.746" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20180516 15:15:44.747" starttime="20180516 15:15:44.732"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${out}</arg>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:15:44.747" level="INFO">Filesystem     1K-blocks     Used Available Use% Mounted on
udev             2884468        0   2884468   0% /dev
tmpfs             582176    59380    522796  11% /run
/dev/sda1       44217808 20636624  21312052  50% /
tmpfs            2910868      244   2910624   1% /dev/shm
tmpfs               5120        4      5116   1% /run/lock
tmpfs            2910868        0   2910868   0% /sys/fs/cgroup
/dev/loop0        104320   104320         0 100% /snap/skype/23
/dev/loop1         88704    88704         0 100% /snap/core/4407
/dev/loop4        150272   150272         0 100% /snap/musescore/15
/dev/loop5        151296   151296         0 100% /snap/musescore/14
/dev/loop7         88704    88704         0 100% /snap/core/4571
/dev/loop6        245760   245760         0 100% /snap/pycharm-community/60
/dev/loop3        244864   244864         0 100% /snap/pycharm-community/58
/dev/loop2         88704    88704         0 100% /snap/core/4486
/dev/loop8         98048    98048         0 100% /snap/telegram-desktop/142
/dev/loop9        149760   149760         0 100% /snap/skype/30
tmpfs             582176       56    582120   1% /run/user/1000
/dev/sr0           56614    56614         0 100% /media/msestak/VBox_GAs_5.2.8
/dev/loop10       238336   238336         0 100% /snap/pycharm-community/62</msg>
<msg timestamp="20180516 15:15:44.747" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:15:44.747" starttime="20180516 15:15:44.747"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:15:44.748" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:15:44.748" starttime="20180516 15:15:44.748"></status>
</kw>
<msg timestamp="20180516 15:15:44.748" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:15:44.748" starttime="20180516 15:15:44.748"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} on ${machine}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:15:44.749" starttime="20180516 15:15:44.749"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${log}'=='true'</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:15:44.750" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_docker.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_docker.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:15:44.750" starttime="20180516 15:15:44.750"></status>
</kw>
<status status="PASS" endtime="20180516 15:15:44.750" starttime="20180516 15:15:44.749"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:15:44.751" starttime="20180516 15:15:44.750"></status>
</kw>
<status status="PASS" endtime="20180516 15:15:44.751" starttime="20180516 15:15:44.730"></status>
</kw>
<kw name="Execute On Machine" library="ssh">
<doc>*Execute On Machine docker ${command}*</doc>
<arguments>
<arg>${machine}</arg>
<arg>free</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${log}</arg>
</arguments>
<msg timestamp="20180516 15:15:44.756" level="INFO">docker</msg>
<msg timestamp="20180516 15:15:44.756" level="INFO">free</msg>
<msg timestamp="20180516 15:15:44.757" level="INFO">true</msg>
<status status="PASS" endtime="20180516 15:15:44.757" starttime="20180516 15:15:44.756"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:15:44.757" starttime="20180516 15:15:44.757"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:15:44.757" level="INFO">${currdate} = 2018-05-16 15:15:44.757</msg>
<status status="PASS" endtime="20180516 15:15:44.758" starttime="20180516 15:15:44.757"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20180516 15:15:44.758" level="INFO">Executing command 'free'.</msg>
<msg timestamp="20180516 15:15:44.804" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:15:44.805" level="INFO">${out} =               total        used        free      shared  buff/cache   available
Mem:        5821740      982732     3217940       75676     1621068     4454892
Swap:             0           0         ...</msg>
<msg timestamp="20180516 15:15:44.805" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20180516 15:15:44.805" starttime="20180516 15:15:44.758"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${out}</arg>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:15:44.805" level="INFO">              total        used        free      shared  buff/cache   available
Mem:        5821740      982732     3217940       75676     1621068     4454892
Swap:             0           0           0</msg>
<msg timestamp="20180516 15:15:44.805" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:15:44.805" starttime="20180516 15:15:44.805"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:15:44.806" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:15:44.806" starttime="20180516 15:15:44.806"></status>
</kw>
<msg timestamp="20180516 15:15:44.806" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:15:44.806" starttime="20180516 15:15:44.806"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} on ${machine}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:15:44.808" starttime="20180516 15:15:44.807"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${log}'=='true'</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:15:44.809" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_docker.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_docker.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:15:44.809" starttime="20180516 15:15:44.809"></status>
</kw>
<status status="PASS" endtime="20180516 15:15:44.809" starttime="20180516 15:15:44.808"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:15:44.810" starttime="20180516 15:15:44.810"></status>
</kw>
<status status="PASS" endtime="20180516 15:15:44.810" starttime="20180516 15:15:44.756"></status>
</kw>
<kw name="Execute On Machine" library="ssh">
<doc>*Execute On Machine docker ${command}*</doc>
<arguments>
<arg>${machine}</arg>
<arg>ifconfig -a</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${log}</arg>
</arguments>
<msg timestamp="20180516 15:15:44.815" level="INFO">docker</msg>
<msg timestamp="20180516 15:15:44.815" level="INFO">ifconfig -a</msg>
<msg timestamp="20180516 15:15:44.815" level="INFO">true</msg>
<status status="PASS" endtime="20180516 15:15:44.815" starttime="20180516 15:15:44.815"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:15:44.816" starttime="20180516 15:15:44.815"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:15:44.816" level="INFO">${currdate} = 2018-05-16 15:15:44.816</msg>
<status status="PASS" endtime="20180516 15:15:44.816" starttime="20180516 15:15:44.816"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20180516 15:15:44.816" level="INFO">Executing command 'ifconfig -a'.</msg>
<msg timestamp="20180516 15:15:44.862" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:15:44.862" level="INFO">${out} = docker0   Link encap:Ethernet  HWaddr 02:42:05:9a:f1:2b  
          inet addr:172.17.0.1  Bcast:172.17.255.255  Mask:255.255.0.0
          inet6 addr: fe80::42:5ff:fe9a:f12b/64 Scope:Link
          UP...</msg>
<msg timestamp="20180516 15:15:44.862" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20180516 15:15:44.862" starttime="20180516 15:15:44.816"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${out}</arg>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:15:44.863" level="INFO">docker0   Link encap:Ethernet  HWaddr 02:42:05:9a:f1:2b  
          inet addr:172.17.0.1  Bcast:172.17.255.255  Mask:255.255.0.0
          inet6 addr: fe80::42:5ff:fe9a:f12b/64 Scope:Link
          UP BROADCAST MULTICAST  MTU:1500  Metric:1
          RX packets:747746 errors:0 dropped:0 overruns:0 frame:0
          TX packets:742274 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0 
          RX bytes:150099439 (150.0 MB)  TX bytes:170308309 (170.3 MB)

enp0s3    Link encap:Ethernet  HWaddr 08:00:27:cc:50:b8  
          inet addr:10.0.2.15  Bcast:10.0.2.255  Mask:255.255.255.0
          inet6 addr: fe80::17bb:f954:8f0a:d563/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:284025 errors:0 dropped:0 overruns:0 frame:0
          TX packets:210023 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000 
          RX bytes:198784057 (198.7 MB)  TX bytes:14573607 (14.5 MB)

enp0s8    Link encap:Ethernet  HWaddr 08:00:27:4b:04:11  
          inet addr:192.168.100.20  Bcast:192.168.100.255  Mask:255.255.255.0
          inet6 addr: fe80::a00:27ff:fe4b:411/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:837624 errors:0 dropped:0 overruns:0 frame:0
          TX packets:3392265 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000 
          RX bytes:57234092 (57.2 MB)  TX bytes:3968086039 (3.9 GB)

lo        Link encap:Local Loopback  
          inet addr:127.0.0.1  Mask:255.0.0.0
          inet6 addr: ::1/128 Scope:Host
          UP LOOPBACK RUNNING  MTU:65536  Metric:1
          RX packets:1848 errors:0 dropped:0 overruns:0 frame:0
          TX packets:1848 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000 
          RX bytes:124898 (124.8 KB)  TX bytes:124898 (124.8 KB)</msg>
<msg timestamp="20180516 15:15:44.863" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:15:44.863" starttime="20180516 15:15:44.863"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:15:44.864" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:15:44.864" starttime="20180516 15:15:44.864"></status>
</kw>
<msg timestamp="20180516 15:15:44.864" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:15:44.864" starttime="20180516 15:15:44.863"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} on ${machine}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:15:44.864" starttime="20180516 15:15:44.864"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${log}'=='true'</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:15:44.865" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_docker.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_docker.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:15:44.866" starttime="20180516 15:15:44.865"></status>
</kw>
<status status="PASS" endtime="20180516 15:15:44.866" starttime="20180516 15:15:44.865"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:15:44.866" starttime="20180516 15:15:44.866"></status>
</kw>
<status status="PASS" endtime="20180516 15:15:44.866" starttime="20180516 15:15:44.814"></status>
</kw>
<kw name="Execute On Machine" library="ssh">
<doc>*Execute On Machine docker ${command}*</doc>
<arguments>
<arg>${machine}</arg>
<arg>ps aux</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${log}</arg>
</arguments>
<msg timestamp="20180516 15:15:44.871" level="INFO">docker</msg>
<msg timestamp="20180516 15:15:44.871" level="INFO">ps aux</msg>
<msg timestamp="20180516 15:15:44.871" level="INFO">true</msg>
<status status="PASS" endtime="20180516 15:15:44.872" starttime="20180516 15:15:44.871"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:15:44.872" starttime="20180516 15:15:44.872"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:15:44.873" level="INFO">${currdate} = 2018-05-16 15:15:44.872</msg>
<status status="PASS" endtime="20180516 15:15:44.873" starttime="20180516 15:15:44.872"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20180516 15:15:44.873" level="INFO">Executing command 'ps aux'.</msg>
<msg timestamp="20180516 15:15:44.928" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:15:44.928" level="INFO">${out} = USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
root         1  0.0  0.0 119768  5076 ?        Ss   Mai15   0:06 /sbin/init splash
root         2  0.0  0.0      0     0 ?     ...</msg>
<msg timestamp="20180516 15:15:44.928" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20180516 15:15:44.928" starttime="20180516 15:15:44.873"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${out}</arg>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:15:44.929" level="INFO">USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
root         1  0.0  0.0 119768  5076 ?        Ss   Mai15   0:06 /sbin/init splash
root         2  0.0  0.0      0     0 ?        S    Mai15   0:00 [kthreadd]
root         4  0.0  0.0      0     0 ?        S&lt;   Mai15   0:00 [kworker/0:0H]
root         6  0.0  0.0      0     0 ?        S&lt;   Mai15   0:00 [mm_percpu_wq]
root         7  0.0  0.0      0     0 ?        S    Mai15   0:17 [ksoftirqd/0]
root         8  0.0  0.0      0     0 ?        S    Mai15   0:20 [rcu_sched]
root         9  0.0  0.0      0     0 ?        S    Mai15   0:00 [rcu_bh]
root        10  0.0  0.0      0     0 ?        S    Mai15   0:00 [migration/0]
root        11  0.0  0.0      0     0 ?        S    Mai15   0:00 [watchdog/0]
root        12  0.0  0.0      0     0 ?        S    Mai15   0:00 [cpuhp/0]
root        13  0.0  0.0      0     0 ?        S    Mai15   0:00 [kdevtmpfs]
root        14  0.0  0.0      0     0 ?        S&lt;   Mai15   0:00 [netns]
root        15  0.0  0.0      0     0 ?        S    Mai15   0:00 [khungtaskd]
root        16  0.0  0.0      0     0 ?        S    Mai15   0:00 [oom_reaper]
root        17  0.0  0.0      0     0 ?        S&lt;   Mai15   0:00 [writeback]
root        18  0.0  0.0      0     0 ?        S    Mai15   0:00 [kcompactd0]
root        19  0.0  0.0      0     0 ?        SN   Mai15   0:00 [ksmd]
root        20  0.0  0.0      0     0 ?        SN   Mai15   0:00 [khugepaged]
root        21  0.0  0.0      0     0 ?        S&lt;   Mai15   0:00 [crypto]
root        22  0.0  0.0      0     0 ?        S&lt;   Mai15   0:00 [kintegrityd]
root        23  0.0  0.0      0     0 ?        S&lt;   Mai15   0:00 [kblockd]
root        24  0.0  0.0      0     0 ?        S&lt;   Mai15   0:00 [ata_sff]
root        25  0.0  0.0      0     0 ?        S&lt;   Mai15   0:00 [md]
root        26  0.0  0.0      0     0 ?        S&lt;   Mai15   0:00 [edac-poller]
root        27  0.0  0.0      0     0 ?        S&lt;   Mai15   0:00 [devfreq_wq]
root        28  0.0  0.0      0     0 ?        S&lt;   Mai15   0:00 [watchdogd]
root        32  0.0  0.0      0     0 ?        S    Mai15   0:00 [kauditd]
root        33  0.0  0.0      0     0 ?        S    Mai15   0:24 [kswapd0]
root        34  0.0  0.0      0     0 ?        S    Mai15   0:00 [ecryptfs-kthrea]
root        76  0.0  0.0      0     0 ?        S&lt;   Mai15   0:00 [kthrotld]
root        77  0.0  0.0      0     0 ?        S&lt;   Mai15   0:00 [acpi_thermal_pm]
root        78  0.0  0.0      0     0 ?        S    Mai15   0:00 [scsi_eh_0]
root        79  0.0  0.0      0     0 ?        S&lt;   Mai15   0:00 [scsi_tmf_0]
root        80  0.0  0.0      0     0 ?        S    Mai15   0:00 [scsi_eh_1]
root        81  0.0  0.0      0     0 ?        S&lt;   Mai15   0:00 [scsi_tmf_1]
root        87  0.0  0.0      0     0 ?        S&lt;   Mai15   0:00 [ipv6_addrconf]
root       112  0.0  0.0      0     0 ?        S&lt;   Mai15   0:00 [charger_manager]
root       152  0.0  0.0      0     0 ?        S    Mai15   0:00 [scsi_eh_2]
root       153  0.0  0.0      0     0 ?        S&lt;   Mai15   0:00 [scsi_tmf_2]
root       155  0.0  0.0      0     0 ?        S&lt;   Mai15   0:03 [kworker/0:1H]
root       178  0.0  0.0      0     0 ?        S    Mai15   0:01 [jbd2/sda1-8]
root       179  0.0  0.0      0     0 ?        S&lt;   Mai15   0:00 [ext4-rsv-conver]
root       214  1.1  0.0  34488  5084 ?        Ss   Mai15  14:02 /lib/systemd/systemd-journald
root       235  0.0  0.0  45764  3900 ?        Ss   Mai15   0:02 /lib/systemd/systemd-udevd
root       278  0.0  0.0      0     0 ?        S&lt;   Mai15   0:00 [loop0]
root       279  0.0  0.0      0     0 ?        S&lt;   Mai15   0:00 [loop1]
root       284  0.0  0.0      0     0 ?        S&lt;   Mai15   0:00 [loop2]
root       285  0.0  0.0      0     0 ?        S&lt;   Mai15   0:00 [loop3]
root       290  0.0  0.0      0     0 ?        S&lt;   Mai15   0:00 [loop4]
root       291  0.0  0.0      0     0 ?        S&lt;   Mai15   0:00 [loop5]
root       292  0.0  0.0      0     0 ?        S&lt;   Mai15   0:00 [loop6]
root       293  0.0  0.0      0     0 ?        S&lt;   Mai15   0:00 [loop7]
root       294  0.0  0.0      0     0 ?        S&lt;   Mai15   0:00 [loop8]
root       295  0.0  0.0      0     0 ?        S&lt;   Mai15   0:00 [loop9]
root       358  0.0  0.0      0     0 ?        S&lt;   Mai15   0:00 [iprt-VBoxWQueue]
root       412  0.0  0.0      0     0 ?        S&lt;   Mai15   0:00 [ttm_swap]
root       892  0.0  0.0  30536  2192 ?        Ss   Mai15   0:00 /usr/sbin/cron -f
root       906  0.0  0.0   4396  1188 ?        Ss   Mai15   0:00 /usr/sbin/acpid
message+   908  0.0  0.0  44320  4756 ?        Ss   Mai15   0:20 /usr/bin/dbus-daemon --system --address=systemd: --nofork --nopidfile --systemd-activation
root       946  0.0  0.2 454616 15732 ?        Ssl  Mai15   0:06 /usr/sbin/NetworkManager --no-daemon
root       947  0.0  0.0  28624  2904 ?        Ss   Mai15   0:01 /lib/systemd/systemd-logind
syslog     949  1.0  0.0 256392  4000 ?        Ssl  Mai15  12:51 /usr/sbin/rsyslogd -n
root       952  0.0  0.1 278764  6968 ?        Ssl  Mai15   0:12 /usr/lib/accountsservice/accounts-daemon
root       957  0.0  0.1 413528  8440 ?        Ssl  Mai15   0:00 /usr/sbin/ModemManager
root       981  0.0  0.3 229788 19528 ?        Ssl  Mai15   0:16 /usr/lib/snapd/snapd
avahi      982  0.0  0.0  44908  2844 ?        Ss   Mai15   0:00 avahi-daemon: running [msestak-VirtualBox.local]
avahi     1005  0.0  0.0  44780   324 ?        S    Mai15   0:00 avahi-daemon: chroot helper
root      1031  0.0  0.1 283388  7772 ?        Ssl  Mai15   0:08 /usr/lib/policykit-1/polkitd --no-debug
root      1049  0.0  0.1  65508  6072 ?        Ss   Mai15   0:00 /usr/sbin/sshd -D
root      1268  0.0  0.1 350516  6124 ?        SLsl Mai15   0:01 /usr/sbin/lightdm
root      1293  0.0  0.0 380944  2124 ?        Sl   Mai15   0:38 /usr/sbin/VBoxService --pidfile /var/run/vboxadd-service.sh
root      1294  0.7  2.1 521068 127064 tty7    Ssl+ Mai15   8:49 /usr/lib/xorg/Xorg -core :0 -seat seat0 -auth /var/run/lightdm/root/:0 -nolisten tcp vt7 -novtswitch
root      1410  0.0  0.1 230304  6072 ?        Sl   Mai15   0:00 lightdm --session-child 12 19
root      1477  0.0  0.1 348712  7540 ?        Ssl  Mai15   0:01 /usr/lib/upower/upowerd
rtkit     1518  0.0  0.0 183544  2308 ?        SNsl Mai15   0:00 /usr/lib/rtkit/rtkit-daemon
colord    1536  0.0  0.1 302964  8592 ?        Ssl  Mai15   0:00 /usr/lib/colord/colord
msestak   1785  0.0  0.0  45384  3692 ?        Ss   Mai15   0:03 /lib/systemd/systemd --user
msestak   1804  0.0  0.0  63384  2012 ?        S    Mai15   0:00 (sd-pam)
msestak   1870  0.0  0.0 206744  5568 ?        Sl   Mai15   0:00 /usr/bin/gnome-keyring-daemon --daemonize --login
msestak   1874  0.0  0.0  48012  3784 ?        Ss   Mai15   0:01 /sbin/upstart --user
msestak   1889  0.0  0.0  51124   304 ?        S    Mai15   0:00 /usr/bin/VBoxClient --clipboard
msestak   1890  0.0  0.0 119508   704 ?        Sl   Mai15   0:00 /usr/bin/VBoxClient --clipboard
msestak   1898  0.0  0.0  51124   304 ?        S    Mai15   0:00 /usr/bin/VBoxClient --display
msestak   1900  0.0  0.0  51256  1860 ?        S    Mai15   0:00 /usr/bin/VBoxClient --display
msestak   1904  0.0  0.0  51124   304 ?        S    Mai15   0:00 /usr/bin/VBoxClient --seamless
msestak   1906  0.0  0.0 117308   384 ?        Sl   Mai15   0:00 /usr/bin/VBoxClient --seamless
msestak   1909  0.0  0.0  51124   304 ?        S    Mai15   0:00 /usr/bin/VBoxClient --draganddrop
msestak   1910  0.1  0.0 117824   488 ?        Sl   Mai15   1:56 /usr/bin/VBoxClient --draganddrop
root      1969  3.9  1.3 505368 75824 ?        Ssl  Mai15  49:47 /usr/bin/dockerd -H fd://
whoopsie  1970  0.0  0.2 522624 14444 ?        Ssl  Mai15   0:01 /usr/bin/whoopsie -f
root      1999  0.0  0.0  17464  1484 tty1     Ss+  Mai15   0:00 /sbin/agetty --noclear tty1 linux
root      2055  0.1  0.4 286328 27372 ?        Ssl  Mai15   1:17 docker-containerd --config /var/run/docker/containerd/containerd.toml
msestak   2080  0.0  0.0  34388  1364 ?        S    Mai15   0:01 upstart-udev-bridge --daemon --user
msestak   2081  0.0  0.0  43736  3892 ?        Ss   Mai15   0:04 dbus-daemon --fork --session --address=unix:abstract=/tmp/dbus-QEapkz8OQR
msestak   2097  0.0  0.0  87876  5256 ?        Ss   Mai15   0:00 /usr/lib/x86_64-linux-gnu/hud/window-stack-bridge
msestak   2163  0.0  0.0  34320  1256 ?        S    Mai15   0:02 upstart-dbus-bridge --daemon --system --user --bus-name system
msestak   2167  0.0  0.2 525168 15896 ?        Ssl  Mai15   0:00 /usr/lib/x86_64-linux-gnu/bamf/bamfdaemon
msestak   2168  0.0  0.0  34320  1088 ?        S    Mai15   0:01 upstart-dbus-bridge --daemon --session --user --bus-name session
msestak   2170  0.0  0.0  42944   988 ?        S    Mai15   0:00 upstart-file-bridge --daemon --user
msestak   2172  0.0  0.0 346624  4872 ?        Ssl  Mai15   0:00 /usr/bin/ibus-daemon --daemonize --xim --address unix:tmpdir=/tmp/ibus
msestak   2183  0.0  0.0 337976  4792 ?        Sl   Mai15   0:00 /usr/lib/at-spi2-core/at-spi-bus-launcher
msestak   2184  0.0  0.0 276056  4824 ?        Sl   Mai15   0:00 /usr/lib/gvfs/gvfsd
msestak   2215  0.0  0.0  42892  2748 ?        S    Mai15   0:00 /usr/bin/dbus-daemon --config-file=/etc/at-spi2/accessibility.conf --nofork --print-address 3
msestak   2217  0.0  0.0 406864  5352 ?        Sl   Mai15   0:00 /usr/lib/gvfs/gvfsd-fuse /run/user/1000/gvfs -f -o big_writes
msestak   2220  0.0  0.0 265788  5324 ?        Sl   Mai15   0:00 /usr/lib/ibus/ibus-dconf
msestak   2234  0.0  0.0 206968  4724 ?        Sl   Mai15   0:00 /usr/lib/at-spi2-core/at-spi2-registryd --use-gnome-session
msestak   2241  0.0  0.2 479064 15924 ?        Sl   Mai15   0:00 /usr/lib/ibus/ibus-ui-gtk3
msestak   2290  0.0  0.2 429396 12616 ?        Sl   Mai15   0:00 /usr/lib/ibus/ibus-x11 --kill-daemon
msestak   2435  0.0  0.0 189916  4796 ?        Sl   Mai15   0:00 /usr/lib/ibus/ibus-engine-simple
msestak   2636  0.0  0.0 168064   260 ?        Ss   Mai15   0:01 gpg-agent --homedir /home/msestak/.gnupg --use-standard-socket --daemon
msestak   2648  0.0  0.2 715932 16484 ?        Ssl  Mai15   0:00 /usr/lib/x86_64-linux-gnu/hud/hud-service
msestak   2650  0.0  0.4 935780 23672 ?        Ssl  Mai15   0:03 /usr/lib/unity-settings-daemon/unity-settings-daemon
msestak   2657  0.0  0.1 566868  9508 ?        Ssl  Mai15   0:00 /usr/lib/gnome-session/gnome-session-binary --session=ubuntu
msestak   2669  0.0  0.3 565972 21376 ?        Ssl  Mai15   0:07 /usr/lib/x86_64-linux-gnu/unity/unity-panel-service
msestak   2697  0.0  0.1 356088  9088 ?        Ssl  Mai15   0:02 /usr/lib/x86_64-linux-gnu/indicator-messages/indicator-messages-service
msestak   2698  0.0  0.0 408640  4224 ?        Ssl  Mai15   0:00 /usr/lib/x86_64-linux-gnu/indicator-bluetooth/indicator-bluetooth-service
msestak   2703  0.0  0.2 716072 15176 ?        Ssl  Mai15   0:00 /usr/lib/x86_64-linux-gnu/indicator-power/indicator-power-service
msestak   2705  0.0  0.1 776492 11544 ?        Ssl  Mai15   0:00 /usr/lib/x86_64-linux-gnu/indicator-datetime/indicator-datetime-service
msestak   2708  0.0  0.2 650520 15692 ?        Ssl  Mai15   0:00 /usr/lib/x86_64-linux-gnu/indicator-keyboard/indicator-keyboard-service --use-gtk
msestak   2713  0.0  0.1 738596  9516 ?        Ssl  Mai15   0:02 /usr/lib/x86_64-linux-gnu/indicator-sound/indicator-sound-service
msestak   2715  0.0  0.2 548736 12084 ?        Ssl  Mai15   0:00 /usr/lib/x86_64-linux-gnu/indicator-printers/indicator-printers-service
msestak   2716  0.0  0.1 626716  7004 ?        Ssl  Mai15   0:01 /usr/lib/x86_64-linux-gnu/indicator-session/indicator-session-service
msestak   2747  0.0  0.1 403148  8476 ?        Ssl  Mai15   0:03 /usr/lib/x86_64-linux-gnu/indicator-application/indicator-application-service
msestak   2761  0.0  0.2 720136 12304 ?        Sl   Mai15   0:00 /usr/lib/evolution/evolution-source-registry
msestak   2763  0.0  0.0 178664  4536 ?        Sl   Mai15   0:00 /usr/lib/dconf/dconf-service
msestak   2777  0.0  0.1 436480  9656 ?        Sl   Mai15   0:00 /usr/bin/pulseaudio --start --log-target=syslog
msestak   2803 17.3  3.7 1402564 216932 ?      Ssl  Mai15 217:21 compiz
msestak   2844  0.0  0.7 864540 46100 ?        Sl   Mai15   0:00 /usr/lib/evolution/evolution-calendar-factory
msestak   2855  0.0  0.7 1004912 40760 ?       Sl   Mai15   0:00 nautilus -n
msestak   2856  0.0  0.2 638372 15176 ?        Sl   Mai15   0:00 /usr/lib/policykit-1-gnome/polkit-gnome-authentication-agent-1
msestak   2857  0.0  0.4 751388 24972 ?        Sl   Mai15   0:07 nm-applet
msestak   2858  0.0  1.7 1044224 103348 ?      SLl  Mai15   0:04 /usr/bin/gnome-software --gapplication-service
msestak   2862  0.0  0.1 578380 11144 ?        Sl   Mai15   0:00 /usr/lib/unity-settings-daemon/unity-fallback-mount-helper
msestak   2889  0.0  0.1 286972  6408 ?        Sl   Mai15   0:05 /usr/lib/gvfs/gvfs-udisks2-volume-monitor
msestak   2891  0.0  0.7 817520 44636 ?        Sl   Mai15   0:00 /usr/lib/evolution/evolution-calendar-factory-subprocess --factory contacts --bus-name org.gnome.evolution.dataserver.Subprocess.Backend.Calendarx2844x2 --own-path /org/gnome/evolution/dataserver/Subprocess/Backend/Calendar/2844/2
root      2906  0.0  0.1 432452  6600 ?        Ssl  Mai15   0:00 /usr/lib/udisks2/udisksd --no-debug
msestak   2934  0.0  0.0 261052  3636 ?        Sl   Mai15   0:00 /usr/lib/gvfs/gvfs-mtp-volume-monitor
msestak   2943  0.0  0.1 405136  6756 ?        Sl   Mai15   0:00 /usr/lib/gvfs/gvfs-afc-volume-monitor
msestak   2955  0.0  0.0 273248  3752 ?        Sl   Mai15   0:00 /usr/lib/gvfs/gvfs-gphoto2-volume-monitor
root      2959  0.0  0.5 506408 29864 ?        Ssl  Mai15   0:01 /usr/lib/x86_64-linux-gnu/fwupd/fwupd
msestak   2974  0.0  0.0 259064  4664 ?        Sl   Mai15   0:00 /usr/lib/gvfs/gvfs-goa-volume-monitor
msestak   3004  0.0  0.7 801768 45344 ?        Sl   Mai15   0:00 /usr/lib/evolution/evolution-calendar-factory-subprocess --factory local --bus-name org.gnome.evolution.dataserver.Subprocess.Backend.Calendarx2844x3 --own-path /org/gnome/evolution/dataserver/Subprocess/Backend/Calendar/2844/3
msestak   3006  0.0  0.1 692096  8752 ?        Sl   Mai15   0:00 /usr/lib/evolution/evolution-addressbook-factory
msestak   3013  0.0  0.1 775792 10304 ?        Sl   Mai15   0:00 /usr/lib/evolution/evolution-addressbook-factory-subprocess --factory local --bus-name org.gnome.evolution.dataserver.Subprocess.Backend.AddressBookx3006x2 --own-path /org/gnome/evolution/dataserver/Subprocess/Backend/AddressBook/3006/2
msestak   3056  0.0  0.0 360272  4932 ?        Sl   Mai15   0:00 /usr/lib/gvfs/gvfsd-trash --spawner :1.8 /org/gtk/gvfs/exec_spaw/0
msestak   3069  0.0  0.0 187540  4544 ?        Sl   Mai15   0:00 /usr/lib/gvfs/gvfsd-metadata
msestak   3121  0.0  0.1 428260 10512 ?        Sl   Mai15   0:00 zeitgeist-datahub
msestak   3128  0.0  0.0   4504   640 ?        S    Mai15   0:00 /bin/sh -c /usr/lib/x86_64-linux-gnu/zeitgeist/zeitgeist-maybe-vacuum; /usr/bin/zeitgeist-daemon
msestak   3132  0.0  0.1 344696  5928 ?        Sl   Mai15   0:00 /usr/bin/zeitgeist-daemon
msestak   3140  0.0  0.1 317168  8876 ?        Sl   Mai15   0:00 /usr/lib/x86_64-linux-gnu/zeitgeist-fts
msestak   3150  0.0  0.2 585192 16124 ?        Sl   Mai15   0:00 /usr/lib/gvfs/gvfsd-http --spawner :1.8 /org/gtk/gvfs/exec_spaw/1
msestak   3179  0.0  0.7 779592 41500 ?        Sl   Mai15   0:04 /usr/bin/python /usr/bin/terminator
msestak   3189  0.0  0.0  62824  4024 ?        S    Mai15   0:00 /usr/lib/x86_64-linux-gnu/gconf/gconfd-2
msestak   3192  0.0  0.0  14872  1620 ?        S    Mai15   0:00 gnome-pty-helper
msestak   3206  0.0  0.0  24124  4248 pts/12   Ss+  Mai15   0:00 /bin/bash
msestak   3257  0.0  0.3 642276 18324 ?        Sl   Mai15   0:01 update-notifier
root      3285  0.0  0.0      0     0 ?        Z    Mai15   0:04 [apport-gtk] &lt;defunct&gt;
msestak   3593  0.0  0.1 584440  7432 ?        Sl   Mai15   0:00 /usr/lib/x86_64-linux-gnu/deja-dup/deja-dup-monitor
root      3703  0.0  0.0  94804  3408 ?        Ss   Mai15   0:00 /usr/sbin/cupsd -l
root      3704  0.0  0.0 274816  5460 ?        Ssl  Mai15   0:00 /usr/sbin/cups-browsed
lp        3709  0.0  0.0  81244  2668 ?        S    Mai15   0:00 /usr/lib/cups/notifier/dbus dbus://
lp        3710  0.0  0.0  81244  2568 ?        S    Mai15   0:00 /usr/lib/cups/notifier/dbus dbus://
root      5305  0.0  0.0      0     0 ?        S    14:59   0:00 [kworker/0:0]
root      5306  0.0  0.0  16128  3560 ?        S    15:00   0:00 /sbin/dhclient -d -q -sf /usr/lib/NetworkManager/nm-dhcp-helper -pf /var/run/dhclient-enp0s3.pid -lf /var/lib/NetworkManager/dhclient-eb223b05-56ee-3392-81a3-524b85f70993-enp0s3.lease -cf /var/lib/NetworkManager/dhclient-enp0s3.conf enp0s3
root      5362  0.0  0.0      0     0 ?        S    15:08   0:00 [kworker/u2:2]
root      5379  1.0  0.1  94924  6968 ?        Ss   15:15   0:00 sshd: msestak [priv]
msestak   5404  0.0  0.0  94924  4436 ?        S    15:15   0:00 sshd: msestak@pts/19
msestak   5405  3.0  0.0  24108  5060 pts/19   Ss+  15:15   0:00 -bash
msestak   5422  0.0  0.0  38892  3484 ?        Rs   15:15   0:00 ps aux
root      8971  0.0  0.0  56320  2616 ?        S    Mai15   0:00 sudo docker exec -it agent_vpp_1 /bin/bash
root      8972  0.0  0.0 305716  5680 ?        Sl   Mai15   0:02 docker exec -it agent_vpp_1 /bin/bash
root     12187  0.0  0.0  56320  2568 ?        S    Mai15   0:00 sudo docker exec -it agent_vpp_1 /bin/bash
root     12188  0.0  0.0 305716  5760 ?        Sl   Mai15   0:02 docker exec -it agent_vpp_1 /bin/bash
msestak  13006  0.0  0.0  24124  3444 pts/21   Ss+  Mai15   0:00 /bin/bash
msestak  13016  0.0  0.0  24124  3500 pts/22   Ss+  Mai15   0:00 /bin/bash
msestak  16490  0.0  0.3 488908 19968 ?        Sl   Mai15   0:01 /usr/lib/x86_64-linux-gnu/notify-osd
root     27198  0.0  0.0      0     0 ?        S&lt;   14:26   0:00 [loop10]
root     27247  0.0  0.0      0     0 ?        S    14:39   0:00 [kworker/u2:0]
msestak  27926  0.0  0.5 641560 29632 ?        Ssl  08:19   0:01 /usr/lib/x86_64-linux-gnu/unity/unity-panel-service --lockscreen-mode
root     32553  0.0  0.0      0     0 ?        S    14:53   0:00 [kworker/0:2]</msg>
<msg timestamp="20180516 15:15:44.929" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:15:44.929" starttime="20180516 15:15:44.929"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:15:44.930" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:15:44.930" starttime="20180516 15:15:44.930"></status>
</kw>
<msg timestamp="20180516 15:15:44.930" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:15:44.930" starttime="20180516 15:15:44.929"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} on ${machine}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:15:44.931" starttime="20180516 15:15:44.930"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${log}'=='true'</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:15:44.932" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_docker.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_docker.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:15:44.932" starttime="20180516 15:15:44.931"></status>
</kw>
<status status="PASS" endtime="20180516 15:15:44.932" starttime="20180516 15:15:44.931"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:15:44.932" starttime="20180516 15:15:44.932"></status>
</kw>
<status status="PASS" endtime="20180516 15:15:44.932" starttime="20180516 15:15:44.871"></status>
</kw>
<kw name="Execute On Machine" library="ssh">
<doc>*Execute On Machine docker ${command}*</doc>
<arguments>
<arg>${machine}</arg>
<arg>echo $PATH</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${log}</arg>
</arguments>
<msg timestamp="20180516 15:15:44.937" level="INFO">docker</msg>
<msg timestamp="20180516 15:15:44.937" level="INFO">echo $PATH</msg>
<msg timestamp="20180516 15:15:44.937" level="INFO">true</msg>
<status status="PASS" endtime="20180516 15:15:44.937" starttime="20180516 15:15:44.937"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:15:44.938" starttime="20180516 15:15:44.938"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:15:44.938" level="INFO">${currdate} = 2018-05-16 15:15:44.938</msg>
<status status="PASS" endtime="20180516 15:15:44.938" starttime="20180516 15:15:44.938"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20180516 15:15:44.939" level="INFO">Executing command 'echo $PATH'.</msg>
<msg timestamp="20180516 15:15:44.985" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:15:44.985" level="INFO">${out} = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games</msg>
<msg timestamp="20180516 15:15:44.985" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20180516 15:15:44.985" starttime="20180516 15:15:44.939"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${out}</arg>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:15:44.986" level="INFO">/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games</msg>
<msg timestamp="20180516 15:15:44.986" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:15:44.986" starttime="20180516 15:15:44.985"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:15:44.987" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:15:44.987" starttime="20180516 15:15:44.986"></status>
</kw>
<msg timestamp="20180516 15:15:44.987" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:15:44.987" starttime="20180516 15:15:44.986"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} on ${machine}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:15:44.987" starttime="20180516 15:15:44.987"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${log}'=='true'</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:15:44.988" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_docker.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_docker.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:15:44.988" starttime="20180516 15:15:44.988"></status>
</kw>
<status status="PASS" endtime="20180516 15:15:44.989" starttime="20180516 15:15:44.987"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:15:44.989" starttime="20180516 15:15:44.989"></status>
</kw>
<status status="PASS" endtime="20180516 15:15:44.989" starttime="20180516 15:15:44.937"></status>
</kw>
<status status="PASS" endtime="20180516 15:15:44.989" starttime="20180516 15:15:44.724"></status>
</kw>
<kw name="Execute On Machine" library="ssh">
<doc>*Execute On Machine ${machine} ${command}*</doc>
<arguments>
<arg>docker</arg>
<arg>${DOCKER_COMMAND} images</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${log}</arg>
</arguments>
<msg timestamp="20180516 15:15:44.998" level="INFO">docker</msg>
<msg timestamp="20180516 15:15:44.998" level="INFO">sudo docker images</msg>
<msg timestamp="20180516 15:15:44.998" level="INFO">true</msg>
<status status="PASS" endtime="20180516 15:15:44.998" starttime="20180516 15:15:44.998"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:15:44.998" starttime="20180516 15:15:44.998"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:15:44.999" level="INFO">${currdate} = 2018-05-16 15:15:44.999</msg>
<status status="PASS" endtime="20180516 15:15:44.999" starttime="20180516 15:15:44.999"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20180516 15:15:44.999" level="INFO">Executing command 'sudo docker images'.</msg>
<msg timestamp="20180516 15:15:45.096" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:15:45.096" level="INFO">${out} = REPOSITORY                       TAG                 IMAGE ID            CREATED             SIZE
ligato/vpp-agent                 pantheon-dev        464d48df57db        2 days ago          223MB
lig...</msg>
<msg timestamp="20180516 15:15:45.096" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20180516 15:15:45.096" starttime="20180516 15:15:44.999"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${out}</arg>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:15:45.097" level="INFO">REPOSITORY                       TAG                 IMAGE ID            CREATED             SIZE
ligato/vpp-agent                 pantheon-dev        464d48df57db        2 days ago          223MB
ligato/vpp-agent                 &lt;none&gt;              9bca8d914079        6 days ago          223MB
ligato/dev-vpp-agent             pantheon-dev        ad6e2cb89702        6 days ago          6.05GB
ligato/dev-cn-infra              latest              a513979821c4        2 months ago        1.59GB
ligato/vpp-agent                 latest              00e9f0716ed4        2 months ago        342MB
quay.io/coreos/etcd              latest              d56a5594a28c        3 months ago        39.4MB
ligato/prod_sfc_controller       latest              0c91ca650426        3 months ago        40.9MB
ligato/dev_sfc_controller        latest              54324eb23822        3 months ago        1.43GB
ligato/vpp-agent                 cmts                678fc16b9a98        5 months ago        451MB
ligato/libmemif-sample-service   test                62fa62809f2f        5 months ago        448MB
ligato/dev_sfc_controller        cmts                953d84e1589f        5 months ago        1.65GB
ligato/libmemif-sample-service   latest              68c6b7f36718        5 months ago        476MB
quay.io/coreos/etcd              v3.0.16             e11e0fd4d1e3        16 months ago       42.6MB
spotify/kafka                    latest              a9e0a5b8b15e        17 months ago       443MB</msg>
<msg timestamp="20180516 15:15:45.097" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:15:45.097" starttime="20180516 15:15:45.096"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:15:45.098" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:15:45.098" starttime="20180516 15:15:45.097"></status>
</kw>
<msg timestamp="20180516 15:15:45.098" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:15:45.098" starttime="20180516 15:15:45.097"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} on ${machine}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:15:45.099" starttime="20180516 15:15:45.098"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${log}'=='true'</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:15:45.101" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_docker.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_docker.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:15:45.101" starttime="20180516 15:15:45.100"></status>
</kw>
<status status="PASS" endtime="20180516 15:15:45.101" starttime="20180516 15:15:45.099"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:15:45.101" starttime="20180516 15:15:45.101"></status>
</kw>
<status status="PASS" endtime="20180516 15:15:45.101" starttime="20180516 15:15:44.997"></status>
</kw>
<kw name="Execute On Machine" library="ssh">
<doc>*Execute On Machine ${machine} ${command}*</doc>
<arguments>
<arg>docker</arg>
<arg>${DOCKER_COMMAND} ps -as</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${log}</arg>
</arguments>
<msg timestamp="20180516 15:15:45.109" level="INFO">docker</msg>
<msg timestamp="20180516 15:15:45.109" level="INFO">sudo docker ps -as</msg>
<msg timestamp="20180516 15:15:45.110" level="INFO">true</msg>
<status status="PASS" endtime="20180516 15:15:45.110" starttime="20180516 15:15:45.109"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:15:45.110" starttime="20180516 15:15:45.110"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:15:45.111" level="INFO">${currdate} = 2018-05-16 15:15:45.110</msg>
<status status="PASS" endtime="20180516 15:15:45.111" starttime="20180516 15:15:45.110"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20180516 15:15:45.111" level="INFO">Executing command 'sudo docker ps -as'.</msg>
<msg timestamp="20180516 15:15:45.232" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:15:45.233" level="INFO">${out} = CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES               SIZE</msg>
<msg timestamp="20180516 15:15:45.233" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20180516 15:15:45.233" starttime="20180516 15:15:45.111"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${out}</arg>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:15:45.233" level="INFO">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES               SIZE</msg>
<msg timestamp="20180516 15:15:45.233" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:15:45.234" starttime="20180516 15:15:45.233"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:15:45.234" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:15:45.234" starttime="20180516 15:15:45.234"></status>
</kw>
<msg timestamp="20180516 15:15:45.235" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:15:45.235" starttime="20180516 15:15:45.234"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} on ${machine}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:15:45.235" starttime="20180516 15:15:45.235"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${log}'=='true'</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:15:45.236" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_docker.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_docker.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:15:45.236" starttime="20180516 15:15:45.236"></status>
</kw>
<status status="PASS" endtime="20180516 15:15:45.236" starttime="20180516 15:15:45.235"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:15:45.237" starttime="20180516 15:15:45.237"></status>
</kw>
<status status="PASS" endtime="20180516 15:15:45.237" starttime="20180516 15:15:45.109"></status>
</kw>
<status status="PASS" endtime="20180516 15:15:45.237" starttime="20180516 15:15:43.422"></status>
</kw>
<kw name="Create Connections For ETCD And Kafka" library="setup-teardown">
<kw name="Open SSH Connection" library="setup-teardown">
<arguments>
<arg>etcd</arg>
<arg>${DOCKER_HOST_IP}</arg>
<arg>${DOCKER_HOST_USER}</arg>
<arg>${DOCKER_HOST_PSWD}</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${name}</arg>
<arg>${ip}</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20180516 15:15:45.238" level="INFO">etcd</msg>
<msg timestamp="20180516 15:15:45.238" level="INFO">192.168.100.20</msg>
<msg timestamp="20180516 15:15:45.238" level="INFO">msestak</msg>
<msg timestamp="20180516 15:15:45.238" level="INFO">Heslo9999</msg>
<status status="PASS" endtime="20180516 15:15:45.238" starttime="20180516 15:15:45.238"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${ip}</arg>
<arg>${name}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:15:45.239" starttime="20180516 15:15:45.239"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${pswd}"!="rsa_id"</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20180516 15:15:45.240" level="INFO">Logging into '192.168.100.20:22' as 'msestak'.</msg>
<msg timestamp="20180516 15:15:46.545" level="INFO">Read output: Welcome to Ubuntu 16.04.4 LTS (GNU/Linux 4.13.0-41-generic x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage

32 packages can be updated.
4 updates are security updates.

Last login: Wed May 16 15:15:43 2018 from 192.168.100.2
msestak@msestak-VirtualBox:~$</msg>
<status status="PASS" endtime="20180516 15:15:46.545" starttime="20180516 15:15:45.240"></status>
</kw>
<status status="PASS" endtime="20180516 15:15:46.545" starttime="20180516 15:15:45.239"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${pswd}"=="rsa_id"</arg>
<arg>SSHLibrary.Login_With_Public_Key</arg>
<arg>${user}</arg>
<arg>%{HOME}/.ssh/id_rsa</arg>
<arg>any</arg>
</arguments>
<status status="PASS" endtime="20180516 15:15:46.547" starttime="20180516 15:15:46.547"></status>
</kw>
<status status="PASS" endtime="20180516 15:15:46.547" starttime="20180516 15:15:45.237"></status>
</kw>
<kw name="Open SSH Connection" library="setup-teardown">
<arguments>
<arg>kafka</arg>
<arg>${DOCKER_HOST_IP}</arg>
<arg>${DOCKER_HOST_USER}</arg>
<arg>${DOCKER_HOST_PSWD}</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${name}</arg>
<arg>${ip}</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20180516 15:15:46.548" level="INFO">kafka</msg>
<msg timestamp="20180516 15:15:46.548" level="INFO">192.168.100.20</msg>
<msg timestamp="20180516 15:15:46.548" level="INFO">msestak</msg>
<msg timestamp="20180516 15:15:46.548" level="INFO">Heslo9999</msg>
<status status="PASS" endtime="20180516 15:15:46.549" starttime="20180516 15:15:46.548"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${ip}</arg>
<arg>${name}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:15:46.553" starttime="20180516 15:15:46.549"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${pswd}"!="rsa_id"</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20180516 15:15:46.555" level="INFO">Logging into '192.168.100.20:22' as 'msestak'.</msg>
<msg timestamp="20180516 15:15:47.782" level="INFO">Read output: Welcome to Ubuntu 16.04.4 LTS (GNU/Linux 4.13.0-41-generic x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage

32 packages can be updated.
4 updates are security updates.

Last login: Wed May 16 15:15:45 2018 from 192.168.100.2
msestak@msestak-VirtualBox:~$</msg>
<status status="PASS" endtime="20180516 15:15:47.782" starttime="20180516 15:15:46.555"></status>
</kw>
<status status="PASS" endtime="20180516 15:15:47.782" starttime="20180516 15:15:46.553"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${pswd}"=="rsa_id"</arg>
<arg>SSHLibrary.Login_With_Public_Key</arg>
<arg>${user}</arg>
<arg>%{HOME}/.ssh/id_rsa</arg>
<arg>any</arg>
</arguments>
<status status="PASS" endtime="20180516 15:15:47.782" starttime="20180516 15:15:47.782"></status>
</kw>
<status status="PASS" endtime="20180516 15:15:47.783" starttime="20180516 15:15:46.548"></status>
</kw>
<status status="PASS" endtime="20180516 15:15:47.783" starttime="20180516 15:15:45.237"></status>
</kw>
<kw name="Start Kafka Server" library="docker">
<kw name="Open SSH Connection" library="setup-teardown">
<arguments>
<arg>kafka</arg>
<arg>${DOCKER_HOST_IP}</arg>
<arg>${DOCKER_HOST_USER}</arg>
<arg>${DOCKER_HOST_PSWD}</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${name}</arg>
<arg>${ip}</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20180516 15:15:47.784" level="INFO">kafka</msg>
<msg timestamp="20180516 15:15:47.784" level="INFO">192.168.100.20</msg>
<msg timestamp="20180516 15:15:47.784" level="INFO">msestak</msg>
<msg timestamp="20180516 15:15:47.784" level="INFO">Heslo9999</msg>
<status status="PASS" endtime="20180516 15:15:47.784" starttime="20180516 15:15:47.784"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${ip}</arg>
<arg>${name}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:15:47.785" starttime="20180516 15:15:47.784"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${pswd}"!="rsa_id"</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20180516 15:15:47.786" level="INFO">Logging into '192.168.100.20:22' as 'msestak'.</msg>
<msg timestamp="20180516 15:15:49.041" level="INFO">Read output: Welcome to Ubuntu 16.04.4 LTS (GNU/Linux 4.13.0-41-generic x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage

32 packages can be updated.
4 updates are security updates.

Last login: Wed May 16 15:15:46 2018 from 192.168.100.2
msestak@msestak-VirtualBox:~$</msg>
<status status="PASS" endtime="20180516 15:15:49.041" starttime="20180516 15:15:47.785"></status>
</kw>
<status status="PASS" endtime="20180516 15:15:49.041" starttime="20180516 15:15:47.785"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${pswd}"=="rsa_id"</arg>
<arg>SSHLibrary.Login_With_Public_Key</arg>
<arg>${user}</arg>
<arg>%{HOME}/.ssh/id_rsa</arg>
<arg>any</arg>
</arguments>
<status status="PASS" endtime="20180516 15:15:49.042" starttime="20180516 15:15:49.042"></status>
</kw>
<status status="PASS" endtime="20180516 15:15:49.042" starttime="20180516 15:15:47.783"></status>
</kw>
<kw name="Execute On Machine" library="ssh">
<doc>*Execute On Machine ${machine} ${command}*</doc>
<arguments>
<arg>kafka</arg>
<arg>${KAFKA_SERVER_CREATE}</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${log}</arg>
</arguments>
<msg timestamp="20180516 15:15:49.051" level="INFO">kafka</msg>
<msg timestamp="20180516 15:15:49.051" level="INFO">sudo docker create -it -p 2181:2181 -p 9092:9092 --env ADVERTISED_PORT=9092 --name kafka spotify/kafka</msg>
<msg timestamp="20180516 15:15:49.051" level="INFO">true</msg>
<status status="PASS" endtime="20180516 15:15:49.051" starttime="20180516 15:15:49.051"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:15:49.052" starttime="20180516 15:15:49.051"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:15:49.052" level="INFO">${currdate} = 2018-05-16 15:15:49.052</msg>
<status status="PASS" endtime="20180516 15:15:49.052" starttime="20180516 15:15:49.052"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20180516 15:15:49.053" level="INFO">Executing command 'sudo docker create -it -p 2181:2181 -p 9092:9092 --env ADVERTISED_PORT=9092 --name kafka spotify/kafka'.</msg>
<msg timestamp="20180516 15:15:49.215" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:15:49.215" level="INFO">${out} = dbef312b260f0794c6620b2ab230a76886e53d6bb38bc91ab1cf624acd59f448</msg>
<msg timestamp="20180516 15:15:49.215" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20180516 15:15:49.215" starttime="20180516 15:15:49.052"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${out}</arg>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:15:49.216" level="INFO">dbef312b260f0794c6620b2ab230a76886e53d6bb38bc91ab1cf624acd59f448</msg>
<msg timestamp="20180516 15:15:49.216" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:15:49.216" starttime="20180516 15:15:49.215"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:15:49.216" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:15:49.216" starttime="20180516 15:15:49.216"></status>
</kw>
<msg timestamp="20180516 15:15:49.217" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:15:49.217" starttime="20180516 15:15:49.216"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} on ${machine}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:15:49.217" starttime="20180516 15:15:49.217"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${log}'=='true'</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:15:49.218" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_kafka.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_kafka.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:15:49.219" starttime="20180516 15:15:49.218"></status>
</kw>
<status status="PASS" endtime="20180516 15:15:49.219" starttime="20180516 15:15:49.218"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:15:49.219" starttime="20180516 15:15:49.219"></status>
</kw>
<status status="PASS" endtime="20180516 15:15:49.219" starttime="20180516 15:15:49.050"></status>
</kw>
<kw name="Write To Machine Until String" library="ssh">
<doc>*Write Machine ${machine} ${command}*</doc>
<arguments>
<arg>kafka</arg>
<arg>${DOCKER_COMMAND} start -i kafka</arg>
<arg>INFO success: kafka entered RUNNING state</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${string}</arg>
<arg>${delay}</arg>
</arguments>
<msg timestamp="20180516 15:15:49.228" level="INFO">kafka</msg>
<msg timestamp="20180516 15:15:49.228" level="INFO">sudo docker start -i kafka</msg>
<msg timestamp="20180516 15:15:49.228" level="INFO">INFO success: kafka entered RUNNING state</msg>
<msg timestamp="20180516 15:15:49.228" level="INFO">3</msg>
<status status="PASS" endtime="20180516 15:15:49.228" starttime="20180516 15:15:49.227"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:15:49.229" starttime="20180516 15:15:49.228"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:15:49.229" level="INFO">${currdate} = 2018-05-16 15:15:49.229</msg>
<status status="PASS" endtime="20180516 15:15:49.229" starttime="20180516 15:15:49.229"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20180516 15:15:49.259" level="INFO">sudo docker start -i kafka</msg>
<status status="PASS" endtime="20180516 15:15:49.259" starttime="20180516 15:15:49.229"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>${string}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20180516 15:15:51.871" level="INFO">/usr/lib/python2.7/dist-packages/supervisor/options.py:296: UserWarning: Supervisord is running as root and it is searching for its configuration file in default locations (including its current working directory); you probably want to specify a "-c" argument specifying an absolute path to a configuration file for improved security.
  'Supervisord is running as root and it is searching '
2018-05-16 13:15:49,776 CRIT Supervisor running as root (no user in config file)
2018-05-16 13:15:49,776 WARN Included extra file "/etc/supervisor/conf.d/kafka.conf" during parsing
2018-05-16 13:15:49,776 WARN Included extra file "/etc/supervisor/conf.d/zookeeper.conf" during parsing
2018-05-16 13:15:49,786 INFO RPC interface 'supervisor' initialized
2018-05-16 13:15:49,786 CRIT Server 'unix_http_server' running without any HTTP authentication checking
2018-05-16 13:15:49,786 INFO supervisord started with pid 1
2018-05-16 13:15:50,788 INFO spawned: 'zookeeper' with pid 7
2018-05-16 13:15:50,790 INFO spawned: 'kafka' with pid 8
2018-05-16 13:15:51,816 INFO success: zookeeper entered RUNNING state, process has stayed up for &gt; than 1 seconds (startsecs)
2018-05-16 13:15:51,816 INFO success: kafka entered RUNNING state</msg>
<msg timestamp="20180516 15:15:51.871" level="INFO">${out} = /usr/lib/python2.7/dist-packages/supervisor/options.py:296: UserWarning: Supervisord is running as root and it is searching for its configuration file in default locations (including its current worki...</msg>
<status status="PASS" endtime="20180516 15:15:51.871" starttime="20180516 15:15:49.259"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:15:51.872" level="INFO">/usr/lib/python2.7/dist-packages/supervisor/options.py:296: UserWarning: Supervisord is running as root and it is searching for its configuration file in default locations (including its current working directory); you probably want to specify a "-c" argument specifying an absolute path to a configuration file for improved security.
  'Supervisord is running as root and it is searching '
2018-05-16 13:15:49,776 CRIT Supervisor running as root (no user in config file)
2018-05-16 13:15:49,776 WARN Included extra file "/etc/supervisor/conf.d/kafka.conf" during parsing
2018-05-16 13:15:49,776 WARN Included extra file "/etc/supervisor/conf.d/zookeeper.conf" during parsing
2018-05-16 13:15:49,786 INFO RPC interface 'supervisor' initialized
2018-05-16 13:15:49,786 CRIT Server 'unix_http_server' running without any HTTP authentication checking
2018-05-16 13:15:49,786 INFO supervisord started with pid 1
2018-05-16 13:15:50,788 INFO spawned: 'zookeeper' with pid 7
2018-05-16 13:15:50,790 INFO spawned: 'kafka' with pid 8
2018-05-16 13:15:51,816 INFO success: zookeeper entered RUNNING state, process has stayed up for &gt; than 1 seconds (startsecs)
2018-05-16 13:15:51,816 INFO success: kafka entered RUNNING state</msg>
<status status="PASS" endtime="20180516 15:15:51.872" starttime="20180516 15:15:51.872"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>delay=${delay}</arg>
</arguments>
<assign>
<var>${out2}</var>
</assign>
<msg timestamp="20180516 15:15:54.873" level="INFO">, process has stayed up for &gt; than 1 seconds (startsecs)</msg>
<msg timestamp="20180516 15:15:54.873" level="INFO">${out2} = , process has stayed up for &gt; than 1 seconds (startsecs)
</msg>
<status status="PASS" endtime="20180516 15:15:54.873" starttime="20180516 15:15:51.872"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out2}</arg>
</arguments>
<msg timestamp="20180516 15:15:54.874" level="INFO">, process has stayed up for &gt; than 1 seconds (startsecs)
</msg>
<status status="PASS" endtime="20180516 15:15:54.874" starttime="20180516 15:15:54.874"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${out2}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:15:54.875" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_kafka.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_kafka.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:15:54.875" starttime="20180516 15:15:54.875"></status>
</kw>
<msg timestamp="20180516 15:15:54.876" level="INFO">${out} = /usr/lib/python2.7/dist-packages/supervisor/options.py:296: UserWarning: Supervisord is running as root and it is searching for its configuration file in default locations (including its current worki...</msg>
<status status="PASS" endtime="20180516 15:15:54.876" starttime="20180516 15:15:49.227"></status>
</kw>
<kw name="Execute On Machine" library="ssh">
<doc>*Execute On Machine ${machine} ${command}*</doc>
<arguments>
<arg>docker</arg>
<arg>${DOCKER_COMMAND} exec kafka bash -c 'echo $HOSTNAME'</arg>
</arguments>
<assign>
<var>${hostname}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${log}</arg>
</arguments>
<msg timestamp="20180516 15:15:54.888" level="INFO">docker</msg>
<msg timestamp="20180516 15:15:54.888" level="INFO">sudo docker exec kafka bash -c 'echo $HOSTNAME'</msg>
<msg timestamp="20180516 15:15:54.888" level="INFO">true</msg>
<status status="PASS" endtime="20180516 15:15:54.888" starttime="20180516 15:15:54.888"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:15:54.889" starttime="20180516 15:15:54.889"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:15:54.890" level="INFO">${currdate} = 2018-05-16 15:15:54.890</msg>
<status status="PASS" endtime="20180516 15:15:54.890" starttime="20180516 15:15:54.889"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20180516 15:15:54.890" level="INFO">Executing command 'sudo docker exec kafka bash -c 'echo $HOSTNAME''.</msg>
<msg timestamp="20180516 15:15:55.078" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:15:55.078" level="INFO">${out} = dbef312b260f</msg>
<msg timestamp="20180516 15:15:55.078" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20180516 15:15:55.078" starttime="20180516 15:15:54.890"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${out}</arg>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:15:55.079" level="INFO">dbef312b260f</msg>
<msg timestamp="20180516 15:15:55.079" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:15:55.079" starttime="20180516 15:15:55.079"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:15:55.080" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:15:55.080" starttime="20180516 15:15:55.080"></status>
</kw>
<msg timestamp="20180516 15:15:55.080" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:15:55.080" starttime="20180516 15:15:55.079"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} on ${machine}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:15:55.081" starttime="20180516 15:15:55.080"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${log}'=='true'</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:15:55.083" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_docker.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_docker.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:15:55.083" starttime="20180516 15:15:55.082"></status>
</kw>
<status status="PASS" endtime="20180516 15:15:55.083" starttime="20180516 15:15:55.081"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:15:55.083" starttime="20180516 15:15:55.083"></status>
</kw>
<msg timestamp="20180516 15:15:55.084" level="INFO">${hostname} = dbef312b260f</msg>
<status status="PASS" endtime="20180516 15:15:55.084" starttime="20180516 15:15:54.887"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${KAFKA_HOSTNAME}</arg>
<arg>${hostname}</arg>
</arguments>
<msg timestamp="20180516 15:15:55.086" level="INFO">${KAFKA_HOSTNAME} = dbef312b260f</msg>
<status status="PASS" endtime="20180516 15:15:55.086" starttime="20180516 15:15:55.084"></status>
</kw>
<status status="PASS" endtime="20180516 15:15:55.086" starttime="20180516 15:15:47.783"></status>
</kw>
<kw name="Start ETCD Server" library="docker">
<kw name="Open SSH Connection" library="setup-teardown">
<arguments>
<arg>etcd</arg>
<arg>${DOCKER_HOST_IP}</arg>
<arg>${DOCKER_HOST_USER}</arg>
<arg>${DOCKER_HOST_PSWD}</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${name}</arg>
<arg>${ip}</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20180516 15:15:55.088" level="INFO">etcd</msg>
<msg timestamp="20180516 15:15:55.088" level="INFO">192.168.100.20</msg>
<msg timestamp="20180516 15:15:55.088" level="INFO">msestak</msg>
<msg timestamp="20180516 15:15:55.088" level="INFO">Heslo9999</msg>
<status status="PASS" endtime="20180516 15:15:55.088" starttime="20180516 15:15:55.088"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${ip}</arg>
<arg>${name}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:15:55.089" starttime="20180516 15:15:55.089"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${pswd}"!="rsa_id"</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20180516 15:15:55.090" level="INFO">Logging into '192.168.100.20:22' as 'msestak'.</msg>
<msg timestamp="20180516 15:15:56.316" level="INFO">Read output: Welcome to Ubuntu 16.04.4 LTS (GNU/Linux 4.13.0-41-generic x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage

32 packages can be updated.
4 updates are security updates.

Last login: Wed May 16 15:15:47 2018 from 192.168.100.2
msestak@msestak-VirtualBox:~$</msg>
<status status="PASS" endtime="20180516 15:15:56.316" starttime="20180516 15:15:55.090"></status>
</kw>
<status status="PASS" endtime="20180516 15:15:56.316" starttime="20180516 15:15:55.089"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${pswd}"=="rsa_id"</arg>
<arg>SSHLibrary.Login_With_Public_Key</arg>
<arg>${user}</arg>
<arg>%{HOME}/.ssh/id_rsa</arg>
<arg>any</arg>
</arguments>
<status status="PASS" endtime="20180516 15:15:56.317" starttime="20180516 15:15:56.317"></status>
</kw>
<status status="PASS" endtime="20180516 15:15:56.318" starttime="20180516 15:15:55.087"></status>
</kw>
<kw name="Execute On Machine" library="ssh">
<doc>*Execute On Machine ${machine} ${command}*</doc>
<arguments>
<arg>etcd</arg>
<arg>${ETCD_SERVER_CREATE}</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${log}</arg>
</arguments>
<msg timestamp="20180516 15:15:56.327" level="INFO">etcd</msg>
<msg timestamp="20180516 15:15:56.327" level="INFO">sudo docker create -p 2379:2379 --name etcd -e ETCDCTL_API=3 quay.io/coreos/etcd:v3.0.16 /usr/local/bin/etcd -advertise-client-urls http://0.0.0.0:2379 -listen-client-urls http://0.0.0.0:2379</msg>
<msg timestamp="20180516 15:15:56.328" level="INFO">true</msg>
<status status="PASS" endtime="20180516 15:15:56.328" starttime="20180516 15:15:56.327"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:15:56.328" starttime="20180516 15:15:56.328"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:15:56.328" level="INFO">${currdate} = 2018-05-16 15:15:56.328</msg>
<status status="PASS" endtime="20180516 15:15:56.328" starttime="20180516 15:15:56.328"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20180516 15:15:56.329" level="INFO">Executing command 'sudo docker create -p 2379:2379 --name etcd -e ETCDCTL_API=3 quay.io/coreos/etcd:v3.0.16 /usr/local/bin/etcd -advertise-client-urls http://0.0.0.0:2379 -listen-client-urls http://0.0.0.0:2379'.</msg>
<msg timestamp="20180516 15:15:56.471" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:15:56.471" level="INFO">${out} = 5fd9956e4db0bd3e22e70789fa34a6dc23ab3c7853dc9211d1df5f06a8942d37</msg>
<msg timestamp="20180516 15:15:56.471" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20180516 15:15:56.471" starttime="20180516 15:15:56.329"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${out}</arg>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:15:56.472" level="INFO">5fd9956e4db0bd3e22e70789fa34a6dc23ab3c7853dc9211d1df5f06a8942d37</msg>
<msg timestamp="20180516 15:15:56.472" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:15:56.472" starttime="20180516 15:15:56.471"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:15:56.472" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:15:56.473" starttime="20180516 15:15:56.472"></status>
</kw>
<msg timestamp="20180516 15:15:56.473" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:15:56.473" starttime="20180516 15:15:56.472"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} on ${machine}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:15:56.473" starttime="20180516 15:15:56.473"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${log}'=='true'</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:15:56.476" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_etcd.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_etcd.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:15:56.476" starttime="20180516 15:15:56.475"></status>
</kw>
<status status="PASS" endtime="20180516 15:15:56.476" starttime="20180516 15:15:56.474"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:15:56.477" starttime="20180516 15:15:56.476"></status>
</kw>
<status status="PASS" endtime="20180516 15:15:56.477" starttime="20180516 15:15:56.327"></status>
</kw>
<kw name="Write To Machine" library="ssh">
<doc>*Write Machine ${machine} ${command}*</doc>
<arguments>
<arg>etcd</arg>
<arg>${DOCKER_COMMAND} start -i etcd</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${delay}</arg>
</arguments>
<msg timestamp="20180516 15:15:56.486" level="INFO">etcd</msg>
<msg timestamp="20180516 15:15:56.486" level="INFO">sudo docker start -i etcd</msg>
<msg timestamp="20180516 15:15:56.486" level="INFO">3s</msg>
<status status="PASS" endtime="20180516 15:15:56.486" starttime="20180516 15:15:56.485"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:15:56.486" starttime="20180516 15:15:56.486"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:15:56.487" level="INFO">${currdate} = 2018-05-16 15:15:56.487</msg>
<status status="PASS" endtime="20180516 15:15:56.487" starttime="20180516 15:15:56.487"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20180516 15:15:56.502" level="INFO">sudo docker start -i etcd</msg>
<status status="PASS" endtime="20180516 15:15:56.503" starttime="20180516 15:15:56.487"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>delay=${delay}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20180516 15:16:11.519" level="INFO">2018-05-16 13:15:56.946077 W | flags: unrecognized environment variable ETCDCTL_API=3
2018-05-16 13:15:56.946476 I | etcdmain: etcd Version: 3.0.16
2018-05-16 13:15:56.946809 I | etcdmain: Git SHA: a23109a
2018-05-16 13:15:56.947117 I | etcdmain: Go Version: go1.6.4
2018-05-16 13:15:56.947417 I | etcdmain: Go OS/Arch: linux/amd64
2018-05-16 13:15:56.947806 I | etcdmain: setting maximum number of CPUs to 1, total number of available CPUs is 1
2018-05-16 13:15:56.948308 W | etcdmain: no data-dir provided, using default data-dir ./default.etcd
2018-05-16 13:15:56.948913 I | etcdmain: listening for peers on http://localhost:2380
2018-05-16 13:15:56.949296 I | etcdmain: listening for client requests on 0.0.0.0:2379
2018-05-16 13:15:56.964784 I | etcdserver: name = default
2018-05-16 13:15:56.965167 I | etcdserver: data dir = default.etcd
2018-05-16 13:15:56.965546 I | etcdserver: member dir = default.etcd/member
2018-05-16 13:15:56.966041 I | etcdserver: heartbeat = 100ms
2018-05-16 13:15:56.966256 I | etcdserver: election = 1000ms
2018-05-16 13:15:56.966603 I | etcdserver: snapshot count = 10000
2018-05-16 13:15:56.966839 I | etcdserver: advertise client URLs = http://0.0.0.0:2379
2018-05-16 13:15:56.966867 I | etcdserver: initial advertise peer URLs = http://localhost:2380
2018-05-16 13:15:56.967238 I | etcdserver: initial cluster = default=http://localhost:2380
2018-05-16 13:15:56.971502 I | etcdserver: starting member 8e9e05c52164694d in cluster cdf818194e3a8c32
2018-05-16 13:15:56.972017 I | raft: 8e9e05c52164694d became follower at term 0
2018-05-16 13:15:56.972308 I | raft: newRaft 8e9e05c52164694d [peers: [], term: 0, commit: 0, applied: 0, lastindex: 0, lastterm: 0]
2018-05-16 13:15:56.972546 I | raft: 8e9e05c52164694d became follower at term 1
2018-05-16 13:15:56.996292 I | etcdserver: starting server... [version: 3.0.16, cluster version: to_be_decided]
2018-05-16 13:15:56.998353 I | membership: added member 8e9e05c52164694d [http://localhost:2380] to cluster cdf818194e3a8c32
2018-05-16 13:15:57.173373 I | raft: 8e9e05c52164694d is starting a new election at term 1
2018-05-16 13:15:57.174491 I | raft: 8e9e05c52164694d became candidate at term 2
2018-05-16 13:15:57.175419 I | raft: 8e9e05c52164694d received vote from 8e9e05c52164694d at term 2
2018-05-16 13:15:57.176947 I | raft: 8e9e05c52164694d became leader at term 2
2018-05-16 13:15:57.177920 I | raft: raft.node: 8e9e05c52164694d elected leader 8e9e05c52164694d at term 2
2018-05-16 13:15:57.179950 I | etcdserver: setting up the initial cluster version to 3.0
2018-05-16 13:15:57.180888 I | etcdserver: published {Name:default ClientURLs:[http://0.0.0.0:2379]} to cluster cdf818194e3a8c32
2018-05-16 13:15:57.181179 I | etcdmain: ready to serve client requests
2018-05-16 13:15:57.181936 N | etcdmain: serving insecure client requests on 0.0.0.0:2379, this is strongly discouraged!
2018-05-16 13:15:57.182863 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:15:57.183372 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:15:57.183860 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:15:57.184331 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:15:57.184920 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:15:57.185365 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:15:57.209368 N | membership: set the initial cluster version to 3.0
2018-05-16 13:15:57.216970 I | api: enabled capabilities for version 3.0
2018-05-16 13:15:58.183426 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:15:58.185236 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:15:58.186794 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:15:58.188336 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:15:58.190330 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:15:58.191203 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:15:59.546480 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:15:59.684862 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:15:59.912609 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:15:59.970277 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:16:00.004372 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:16:00.068455 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:16:01.966006 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:16:02.170084 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:16:02.361940 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:16:02.504219 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:16:02.605143 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:16:03.059422 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:16:05.697641 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:16:05.852748 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:16:05.915213 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:16:05.985046 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:16:06.423057 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:16:06.442864 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}</msg>
<msg timestamp="20180516 15:16:11.519" level="INFO">${out} = 2018-05-16 13:15:56.946077 W | flags: unrecognized environment variable ETCDCTL_API=3
2018-05-16 13:15:56.946476 I | etcdmain: etcd Version: 3.0.16
2018-05-16 13:15:56.946809 I | etcdmain: Git SHA: ...</msg>
<status status="PASS" endtime="20180516 15:16:11.519" starttime="20180516 15:15:56.503"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:16:11.520" level="INFO">2018-05-16 13:15:56.946077 W | flags: unrecognized environment variable ETCDCTL_API=3
2018-05-16 13:15:56.946476 I | etcdmain: etcd Version: 3.0.16
2018-05-16 13:15:56.946809 I | etcdmain: Git SHA: a23109a
2018-05-16 13:15:56.947117 I | etcdmain: Go Version: go1.6.4
2018-05-16 13:15:56.947417 I | etcdmain: Go OS/Arch: linux/amd64
2018-05-16 13:15:56.947806 I | etcdmain: setting maximum number of CPUs to 1, total number of available CPUs is 1
2018-05-16 13:15:56.948308 W | etcdmain: no data-dir provided, using default data-dir ./default.etcd
2018-05-16 13:15:56.948913 I | etcdmain: listening for peers on http://localhost:2380
2018-05-16 13:15:56.949296 I | etcdmain: listening for client requests on 0.0.0.0:2379
2018-05-16 13:15:56.964784 I | etcdserver: name = default
2018-05-16 13:15:56.965167 I | etcdserver: data dir = default.etcd
2018-05-16 13:15:56.965546 I | etcdserver: member dir = default.etcd/member
2018-05-16 13:15:56.966041 I | etcdserver: heartbeat = 100ms
2018-05-16 13:15:56.966256 I | etcdserver: election = 1000ms
2018-05-16 13:15:56.966603 I | etcdserver: snapshot count = 10000
2018-05-16 13:15:56.966839 I | etcdserver: advertise client URLs = http://0.0.0.0:2379
2018-05-16 13:15:56.966867 I | etcdserver: initial advertise peer URLs = http://localhost:2380
2018-05-16 13:15:56.967238 I | etcdserver: initial cluster = default=http://localhost:2380
2018-05-16 13:15:56.971502 I | etcdserver: starting member 8e9e05c52164694d in cluster cdf818194e3a8c32
2018-05-16 13:15:56.972017 I | raft: 8e9e05c52164694d became follower at term 0
2018-05-16 13:15:56.972308 I | raft: newRaft 8e9e05c52164694d [peers: [], term: 0, commit: 0, applied: 0, lastindex: 0, lastterm: 0]
2018-05-16 13:15:56.972546 I | raft: 8e9e05c52164694d became follower at term 1
2018-05-16 13:15:56.996292 I | etcdserver: starting server... [version: 3.0.16, cluster version: to_be_decided]
2018-05-16 13:15:56.998353 I | membership: added member 8e9e05c52164694d [http://localhost:2380] to cluster cdf818194e3a8c32
2018-05-16 13:15:57.173373 I | raft: 8e9e05c52164694d is starting a new election at term 1
2018-05-16 13:15:57.174491 I | raft: 8e9e05c52164694d became candidate at term 2
2018-05-16 13:15:57.175419 I | raft: 8e9e05c52164694d received vote from 8e9e05c52164694d at term 2
2018-05-16 13:15:57.176947 I | raft: 8e9e05c52164694d became leader at term 2
2018-05-16 13:15:57.177920 I | raft: raft.node: 8e9e05c52164694d elected leader 8e9e05c52164694d at term 2
2018-05-16 13:15:57.179950 I | etcdserver: setting up the initial cluster version to 3.0
2018-05-16 13:15:57.180888 I | etcdserver: published {Name:default ClientURLs:[http://0.0.0.0:2379]} to cluster cdf818194e3a8c32
2018-05-16 13:15:57.181179 I | etcdmain: ready to serve client requests
2018-05-16 13:15:57.181936 N | etcdmain: serving insecure client requests on 0.0.0.0:2379, this is strongly discouraged!
2018-05-16 13:15:57.182863 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:15:57.183372 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:15:57.183860 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:15:57.184331 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:15:57.184920 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:15:57.185365 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:15:57.209368 N | membership: set the initial cluster version to 3.0
2018-05-16 13:15:57.216970 I | api: enabled capabilities for version 3.0
2018-05-16 13:15:58.183426 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:15:58.185236 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:15:58.186794 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:15:58.188336 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:15:58.190330 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:15:58.191203 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:15:59.546480 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:15:59.684862 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:15:59.912609 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:15:59.970277 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:16:00.004372 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:16:00.068455 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:16:01.966006 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:16:02.170084 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:16:02.361940 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:16:02.504219 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:16:02.605143 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:16:03.059422 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:16:05.697641 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:16:05.852748 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:16:05.915213 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:16:05.985046 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:16:06.423057 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:16:06.442864 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
</msg>
<status status="PASS" endtime="20180516 15:16:11.520" starttime="20180516 15:16:11.520"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:16:11.521" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_etcd.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_etcd.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:16:11.522" starttime="20180516 15:16:11.521"></status>
</kw>
<status status="PASS" endtime="20180516 15:16:11.522" starttime="20180516 15:15:56.485"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>etcd</arg>
</arguments>
<assign>
<var>${hostname}</var>
</assign>
<msg timestamp="20180516 15:16:11.522" level="INFO">${hostname} = etcd</msg>
<status status="PASS" endtime="20180516 15:16:11.522" starttime="20180516 15:16:11.522"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ETCD_HOSTNAME}</arg>
<arg>${hostname}</arg>
</arguments>
<msg timestamp="20180516 15:16:11.529" level="INFO">${ETCD_HOSTNAME} = etcd</msg>
<status status="PASS" endtime="20180516 15:16:11.530" starttime="20180516 15:16:11.523"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${timeout_etcd}</arg>
<arg>5s</arg>
<arg>Check ETCD Running</arg>
</arguments>
<kw name="Check ETCD Running" library="docker">
<kw name="Write To Machine" library="ssh">
<doc>*Write Machine ${machine} ${command}*</doc>
<arguments>
<arg>docker</arg>
<arg>${DOCKER_COMMAND} exec -it etcd etcdctl version</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${delay}</arg>
</arguments>
<msg timestamp="20180516 15:16:11.557" level="INFO">docker</msg>
<msg timestamp="20180516 15:16:11.558" level="INFO">sudo docker exec -it etcd etcdctl version</msg>
<msg timestamp="20180516 15:16:11.558" level="INFO">3s</msg>
<status status="PASS" endtime="20180516 15:16:11.558" starttime="20180516 15:16:11.557"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:16:11.558" starttime="20180516 15:16:11.558"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:16:11.559" level="INFO">${currdate} = 2018-05-16 15:16:11.558</msg>
<status status="PASS" endtime="20180516 15:16:11.559" starttime="20180516 15:16:11.558"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20180516 15:16:11.565" level="INFO">sudo docker exec -it etcd etcdctl version</msg>
<status status="PASS" endtime="20180516 15:16:11.565" starttime="20180516 15:16:11.559"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>delay=${delay}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20180516 15:16:17.571" level="INFO">etcdctl version: 3.0.16
API version: 3.0
msestak@msestak-VirtualBox:~$</msg>
<msg timestamp="20180516 15:16:17.571" level="INFO">${out} = etcdctl version: 3.0.16
API version: 3.0
msestak@msestak-VirtualBox:~$ </msg>
<status status="PASS" endtime="20180516 15:16:17.571" starttime="20180516 15:16:11.565"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:16:17.572" level="INFO">etcdctl version: 3.0.16
API version: 3.0
msestak@msestak-VirtualBox:~$ </msg>
<status status="PASS" endtime="20180516 15:16:17.572" starttime="20180516 15:16:17.572"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:16:17.574" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_docker.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_docker.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:16:17.574" starttime="20180516 15:16:17.573"></status>
</kw>
<msg timestamp="20180516 15:16:17.574" level="INFO">${out} = etcdctl version: 3.0.16
API version: 3.0
msestak@msestak-VirtualBox:~$ </msg>
<status status="PASS" endtime="20180516 15:16:17.574" starttime="20180516 15:16:11.556"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:16:17.575" level="INFO">etcdctl version: 3.0.16
API version: 3.0
msestak@msestak-VirtualBox:~$ </msg>
<status status="PASS" endtime="20180516 15:16:17.575" starttime="20180516 15:16:17.574"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${out}</arg>
<arg>etcdctl version:</arg>
</arguments>
<status status="PASS" endtime="20180516 15:16:17.575" starttime="20180516 15:16:17.575"></status>
</kw>
<status status="PASS" endtime="20180516 15:16:17.576" starttime="20180516 15:16:11.530"></status>
</kw>
<status status="PASS" endtime="20180516 15:16:17.576" starttime="20180516 15:16:11.530"></status>
</kw>
<status status="PASS" endtime="20180516 15:16:17.576" starttime="20180516 15:15:55.087"></status>
</kw>
<kw name="Start VPP Ctl Container" library="docker">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20180516 15:16:17.576" level="INFO">bash</msg>
<status status="PASS" endtime="20180516 15:16:17.577" starttime="20180516 15:16:17.576"></status>
</kw>
<kw name="Open SSH Connection" library="setup-teardown">
<arguments>
<arg>vpp_agent_ctl</arg>
<arg>${DOCKER_HOST_IP}</arg>
<arg>${DOCKER_HOST_USER}</arg>
<arg>${DOCKER_HOST_PSWD}</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${name}</arg>
<arg>${ip}</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20180516 15:16:17.577" level="INFO">vpp_agent_ctl</msg>
<msg timestamp="20180516 15:16:17.577" level="INFO">192.168.100.20</msg>
<msg timestamp="20180516 15:16:17.578" level="INFO">msestak</msg>
<msg timestamp="20180516 15:16:17.578" level="INFO">Heslo9999</msg>
<status status="PASS" endtime="20180516 15:16:17.578" starttime="20180516 15:16:17.577"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${ip}</arg>
<arg>${name}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:16:17.579" starttime="20180516 15:16:17.578"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${pswd}"!="rsa_id"</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20180516 15:16:17.579" level="INFO">Logging into '192.168.100.20:22' as 'msestak'.</msg>
<msg timestamp="20180516 15:16:18.800" level="INFO">Read output: Welcome to Ubuntu 16.04.4 LTS (GNU/Linux 4.13.0-41-generic x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage

32 packages can be updated.
4 updates are security updates.

Last login: Wed May 16 15:15:55 2018 from 192.168.100.2
msestak@msestak-VirtualBox:~$</msg>
<status status="PASS" endtime="20180516 15:16:18.801" starttime="20180516 15:16:17.579"></status>
</kw>
<status status="PASS" endtime="20180516 15:16:18.801" starttime="20180516 15:16:17.579"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${pswd}"=="rsa_id"</arg>
<arg>SSHLibrary.Login_With_Public_Key</arg>
<arg>${user}</arg>
<arg>%{HOME}/.ssh/id_rsa</arg>
<arg>any</arg>
</arguments>
<status status="PASS" endtime="20180516 15:16:18.801" starttime="20180516 15:16:18.801"></status>
</kw>
<status status="PASS" endtime="20180516 15:16:18.801" starttime="20180516 15:16:17.577"></status>
</kw>
<kw name="Execute On Machine" library="ssh">
<doc>*Execute On Machine ${machine} bash*</doc>
<arguments>
<arg>vpp_agent_ctl</arg>
<arg>${DOCKER_COMMAND} create -it --name vpp_agent_ctl ${VPP_AGENT_CTL_IMAGE_NAME} ${command}</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${log}</arg>
</arguments>
<msg timestamp="20180516 15:16:18.807" level="INFO">vpp_agent_ctl</msg>
<msg timestamp="20180516 15:16:18.807" level="INFO">sudo docker create -it --name vpp_agent_ctl ligato/vpp-agent:pantheon-dev bash</msg>
<msg timestamp="20180516 15:16:18.807" level="INFO">true</msg>
<status status="PASS" endtime="20180516 15:16:18.807" starttime="20180516 15:16:18.807"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:16:18.808" starttime="20180516 15:16:18.807"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:16:18.808" level="INFO">${currdate} = 2018-05-16 15:16:18.808</msg>
<status status="PASS" endtime="20180516 15:16:18.808" starttime="20180516 15:16:18.808"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20180516 15:16:18.809" level="INFO">Executing command 'sudo docker create -it --name vpp_agent_ctl ligato/vpp-agent:pantheon-dev bash'.</msg>
<msg timestamp="20180516 15:16:18.949" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:16:18.950" level="INFO">${out} = 2f7d62033432e9ea17db0045c43ee775fb65d88729928e2d7ee8603c457988ce</msg>
<msg timestamp="20180516 15:16:18.950" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20180516 15:16:18.950" starttime="20180516 15:16:18.808"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${out}</arg>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:16:18.950" level="INFO">2f7d62033432e9ea17db0045c43ee775fb65d88729928e2d7ee8603c457988ce</msg>
<msg timestamp="20180516 15:16:18.950" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:16:18.950" starttime="20180516 15:16:18.950"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:16:18.951" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:16:18.951" starttime="20180516 15:16:18.951"></status>
</kw>
<msg timestamp="20180516 15:16:18.951" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:16:18.951" starttime="20180516 15:16:18.951"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} on ${machine}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:16:18.952" starttime="20180516 15:16:18.951"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${log}'=='true'</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:16:18.953" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_vpp_agent_ctl.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_vpp_agent_ctl.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:16:18.953" starttime="20180516 15:16:18.952"></status>
</kw>
<status status="PASS" endtime="20180516 15:16:18.953" starttime="20180516 15:16:18.952"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:16:18.954" starttime="20180516 15:16:18.953"></status>
</kw>
<status status="PASS" endtime="20180516 15:16:18.954" starttime="20180516 15:16:18.806"></status>
</kw>
<kw name="Write To Machine" library="ssh">
<doc>*Write Machine ${machine} bash*</doc>
<arguments>
<arg>vpp_agent_ctl</arg>
<arg>${DOCKER_COMMAND} start -i vpp_agent_ctl</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${delay}</arg>
</arguments>
<msg timestamp="20180516 15:16:18.959" level="INFO">vpp_agent_ctl</msg>
<msg timestamp="20180516 15:16:18.959" level="INFO">sudo docker start -i vpp_agent_ctl</msg>
<msg timestamp="20180516 15:16:18.959" level="INFO">3s</msg>
<status status="PASS" endtime="20180516 15:16:18.959" starttime="20180516 15:16:18.959"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:16:18.960" starttime="20180516 15:16:18.959"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:16:18.960" level="INFO">${currdate} = 2018-05-16 15:16:18.960</msg>
<status status="PASS" endtime="20180516 15:16:18.960" starttime="20180516 15:16:18.960"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20180516 15:16:18.983" level="INFO">sudo docker start -i vpp_agent_ctl</msg>
<status status="PASS" endtime="20180516 15:16:18.983" starttime="20180516 15:16:18.960"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>delay=${delay}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20180516 15:16:24.988" level="INFO">]0;root@2f7d62033432: ~root@2f7d62033432:~#</msg>
<msg timestamp="20180516 15:16:24.989" level="INFO">${out} = ]0;root@2f7d62033432: ~root@2f7d62033432:~# </msg>
<status status="PASS" endtime="20180516 15:16:24.989" starttime="20180516 15:16:18.984"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:16:24.991" level="INFO">]0;root@2f7d62033432: ~root@2f7d62033432:~# </msg>
<status status="PASS" endtime="20180516 15:16:24.991" starttime="20180516 15:16:24.990"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:16:24.994" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_vpp_agent_ctl.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_vpp_agent_ctl.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:16:24.994" starttime="20180516 15:16:24.992"></status>
</kw>
<status status="PASS" endtime="20180516 15:16:24.994" starttime="20180516 15:16:18.958"></status>
</kw>
<kw name="Execute On Machine" library="ssh">
<doc>*Execute On Machine ${machine} bash*</doc>
<arguments>
<arg>docker</arg>
<arg>${DOCKER_COMMAND} exec vpp_agent_ctl bash -c 'echo $HOSTNAME'</arg>
</arguments>
<assign>
<var>${hostname}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${log}</arg>
</arguments>
<msg timestamp="20180516 15:16:24.998" level="INFO">docker</msg>
<msg timestamp="20180516 15:16:24.999" level="INFO">sudo docker exec vpp_agent_ctl bash -c 'echo $HOSTNAME'</msg>
<msg timestamp="20180516 15:16:24.999" level="INFO">true</msg>
<status status="PASS" endtime="20180516 15:16:24.999" starttime="20180516 15:16:24.998"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:16:24.999" starttime="20180516 15:16:24.999"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:16:25.000" level="INFO">${currdate} = 2018-05-16 15:16:24.999</msg>
<status status="PASS" endtime="20180516 15:16:25.000" starttime="20180516 15:16:24.999"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20180516 15:16:25.000" level="INFO">Executing command 'sudo docker exec vpp_agent_ctl bash -c 'echo $HOSTNAME''.</msg>
<msg timestamp="20180516 15:16:25.160" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:16:25.161" level="INFO">${out} = 2f7d62033432</msg>
<msg timestamp="20180516 15:16:25.161" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20180516 15:16:25.161" starttime="20180516 15:16:25.000"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${out}</arg>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:16:25.162" level="INFO">2f7d62033432</msg>
<msg timestamp="20180516 15:16:25.162" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:16:25.162" starttime="20180516 15:16:25.161"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:16:25.163" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:16:25.163" starttime="20180516 15:16:25.162"></status>
</kw>
<msg timestamp="20180516 15:16:25.163" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:16:25.163" starttime="20180516 15:16:25.162"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} on ${machine}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:16:25.163" starttime="20180516 15:16:25.163"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${log}'=='true'</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:16:25.164" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_docker.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_docker.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:16:25.165" starttime="20180516 15:16:25.164"></status>
</kw>
<status status="PASS" endtime="20180516 15:16:25.165" starttime="20180516 15:16:25.163"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:16:25.165" starttime="20180516 15:16:25.165"></status>
</kw>
<msg timestamp="20180516 15:16:25.165" level="INFO">${hostname} = 2f7d62033432</msg>
<status status="PASS" endtime="20180516 15:16:25.165" starttime="20180516 15:16:24.998"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${VPP_AGENT_CTL_HOSTNAME}</arg>
<arg>${hostname}</arg>
</arguments>
<msg timestamp="20180516 15:16:25.168" level="INFO">${VPP_AGENT_CTL_HOSTNAME} = 2f7d62033432</msg>
<status status="PASS" endtime="20180516 15:16:25.168" starttime="20180516 15:16:25.166"></status>
</kw>
<status status="PASS" endtime="20180516 15:16:25.168" starttime="20180516 15:16:17.576"></status>
</kw>
<kw name="Make Datastore Snapshots" library="setup-teardown">
<arguments>
<arg>startup</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tag}</arg>
</arguments>
<msg timestamp="20180516 15:16:25.169" level="INFO">startup</msg>
<status status="PASS" endtime="20180516 15:16:25.169" starttime="20180516 15:16:25.169"></status>
</kw>
<kw name="Create Next Snapshot Prefix" library="setup-teardown">
<assign>
<var>${prefix}</var>
</assign>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>str(${snapshot_num}).zfill(3)</arg>
</arguments>
<assign>
<var>${prefix}</var>
</assign>
<msg timestamp="20180516 15:16:25.170" level="INFO">${prefix} = 000</msg>
<status status="PASS" endtime="20180516 15:16:25.170" starttime="20180516 15:16:25.170"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${snapshot_num}+1</arg>
</arguments>
<assign>
<var>${snapshot_num}</var>
</assign>
<msg timestamp="20180516 15:16:25.171" level="INFO">${snapshot_num} = 1</msg>
<status status="PASS" endtime="20180516 15:16:25.171" starttime="20180516 15:16:25.170"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${snapshot_num}</arg>
</arguments>
<msg timestamp="20180516 15:16:25.171" level="INFO">${snapshot_num} = 1</msg>
<status status="PASS" endtime="20180516 15:16:25.171" starttime="20180516 15:16:25.171"></status>
</kw>
<msg timestamp="20180516 15:16:25.171" level="INFO">${prefix} = 000</msg>
<status status="PASS" endtime="20180516 15:16:25.171" starttime="20180516 15:16:25.169"></status>
</kw>
<kw name="Take ETCD Snapshots" library="setup-teardown">
<arguments>
<arg>${prefix}_${tag}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tag}</arg>
</arguments>
<msg timestamp="20180516 15:16:25.172" level="INFO">000_startup</msg>
<status status="PASS" endtime="20180516 15:16:25.172" starttime="20180516 15:16:25.172"></status>
</kw>
<kw name="Get ETCD Dump" library="setup-teardown">
<assign>
<var>${dump}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DOCKER_COMMAND} exec etcd etcdctl get --prefix="true" ""</arg>
</arguments>
<assign>
<var>${command}</var>
</assign>
<msg timestamp="20180516 15:16:25.173" level="INFO">${command} = sudo docker exec etcd etcdctl get --prefix="true" ""</msg>
<status status="PASS" endtime="20180516 15:16:25.173" starttime="20180516 15:16:25.173"></status>
</kw>
<kw name="Execute On Machine" library="ssh">
<doc>*Execute On Machine ${machine} sudo docker exec etcd etcdctl get --prefix="true" ""*</doc>
<arguments>
<arg>docker</arg>
<arg>${command}</arg>
<arg>log=false</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${log}</arg>
</arguments>
<msg timestamp="20180516 15:16:25.178" level="INFO">docker</msg>
<msg timestamp="20180516 15:16:25.178" level="INFO">sudo docker exec etcd etcdctl get --prefix="true" ""</msg>
<msg timestamp="20180516 15:16:25.178" level="INFO">false</msg>
<status status="PASS" endtime="20180516 15:16:25.178" starttime="20180516 15:16:25.178"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:16:25.179" starttime="20180516 15:16:25.179"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:16:25.179" level="INFO">${currdate} = 2018-05-16 15:16:25.179</msg>
<status status="PASS" endtime="20180516 15:16:25.179" starttime="20180516 15:16:25.179"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20180516 15:16:25.180" level="INFO">Executing command 'sudo docker exec etcd etcdctl get --prefix="true" ""'.</msg>
<msg timestamp="20180516 15:16:25.352" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:16:25.352" level="INFO">${out} = </msg>
<msg timestamp="20180516 15:16:25.352" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20180516 15:16:25.352" starttime="20180516 15:16:25.180"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${out}</arg>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:16:25.353" level="INFO"></msg>
<msg timestamp="20180516 15:16:25.353" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:16:25.353" starttime="20180516 15:16:25.352"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:16:25.354" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:16:25.354" starttime="20180516 15:16:25.354"></status>
</kw>
<msg timestamp="20180516 15:16:25.354" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:16:25.354" starttime="20180516 15:16:25.353"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} on ${machine}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:16:25.355" starttime="20180516 15:16:25.354"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${log}'=='true'</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:16:25.355" starttime="20180516 15:16:25.355"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:16:25.356" starttime="20180516 15:16:25.355"></status>
</kw>
<msg timestamp="20180516 15:16:25.356" level="INFO">${out} = </msg>
<status status="PASS" endtime="20180516 15:16:25.356" starttime="20180516 15:16:25.178"></status>
</kw>
<msg timestamp="20180516 15:16:25.356" level="INFO">${dump} = </msg>
<status status="PASS" endtime="20180516 15:16:25.356" starttime="20180516 15:16:25.172"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/etcd_dump-${tag}.txt</arg>
<arg>${dump}</arg>
</arguments>
<msg timestamp="20180516 15:16:25.357" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/etcd_dump-000_startup.txt"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/etcd_dump-000_startup.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:16:25.357" starttime="20180516 15:16:25.356"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${dump}</arg>
<arg>/error/</arg>
</arguments>
<assign>
<var>${errors}</var>
</assign>
<msg timestamp="20180516 15:16:25.357" level="INFO">0 out of 0 lines matched</msg>
<msg timestamp="20180516 15:16:25.358" level="INFO">${errors} = </msg>
<status status="PASS" endtime="20180516 15:16:25.358" starttime="20180516 15:16:25.357"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${errors}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${errors}</arg>
</arguments>
<msg timestamp="20180516 15:16:25.358" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:16:25.358" starttime="20180516 15:16:25.358"></status>
</kw>
<msg timestamp="20180516 15:16:25.358" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:16:25.358" starttime="20180516 15:16:25.358"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>Errors detected in keys: ${errors}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:16:25.359" starttime="20180516 15:16:25.359"></status>
</kw>
<status status="PASS" endtime="20180516 15:16:25.359" starttime="20180516 15:16:25.172"></status>
</kw>
<status status="PASS" endtime="20180516 15:16:25.359" starttime="20180516 15:16:25.169"></status>
</kw>
<status status="PASS" endtime="20180516 15:16:25.359" starttime="20180516 15:15:43.420"></status>
</kw>
<test id="s1-t1" name="Configure Environment">
<kw type="setup" name="TestSetup">
<kw name="Make Datastore Snapshots" library="setup-teardown">
<arguments>
<arg>${TEST_NAME}_test_setup</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tag}</arg>
</arguments>
<msg timestamp="20180516 15:16:25.361" level="INFO">Configure Environment_test_setup</msg>
<status status="PASS" endtime="20180516 15:16:25.361" starttime="20180516 15:16:25.361"></status>
</kw>
<kw name="Create Next Snapshot Prefix" library="setup-teardown">
<assign>
<var>${prefix}</var>
</assign>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>str(${snapshot_num}).zfill(3)</arg>
</arguments>
<assign>
<var>${prefix}</var>
</assign>
<msg timestamp="20180516 15:16:25.362" level="INFO">${prefix} = 001</msg>
<status status="PASS" endtime="20180516 15:16:25.362" starttime="20180516 15:16:25.362"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${snapshot_num}+1</arg>
</arguments>
<assign>
<var>${snapshot_num}</var>
</assign>
<msg timestamp="20180516 15:16:25.362" level="INFO">${snapshot_num} = 2</msg>
<status status="PASS" endtime="20180516 15:16:25.362" starttime="20180516 15:16:25.362"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${snapshot_num}</arg>
</arguments>
<msg timestamp="20180516 15:16:25.363" level="INFO">${snapshot_num} = 2</msg>
<status status="PASS" endtime="20180516 15:16:25.363" starttime="20180516 15:16:25.363"></status>
</kw>
<msg timestamp="20180516 15:16:25.363" level="INFO">${prefix} = 001</msg>
<status status="PASS" endtime="20180516 15:16:25.363" starttime="20180516 15:16:25.361"></status>
</kw>
<kw name="Take ETCD Snapshots" library="setup-teardown">
<arguments>
<arg>${prefix}_${tag}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tag}</arg>
</arguments>
<msg timestamp="20180516 15:16:25.364" level="INFO">001_Configure Environment_test_setup</msg>
<status status="PASS" endtime="20180516 15:16:25.364" starttime="20180516 15:16:25.364"></status>
</kw>
<kw name="Get ETCD Dump" library="setup-teardown">
<assign>
<var>${dump}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DOCKER_COMMAND} exec etcd etcdctl get --prefix="true" ""</arg>
</arguments>
<assign>
<var>${command}</var>
</assign>
<msg timestamp="20180516 15:16:25.365" level="INFO">${command} = sudo docker exec etcd etcdctl get --prefix="true" ""</msg>
<status status="PASS" endtime="20180516 15:16:25.365" starttime="20180516 15:16:25.364"></status>
</kw>
<kw name="Execute On Machine" library="ssh">
<doc>*Execute On Machine ${machine} sudo docker exec etcd etcdctl get --prefix="true" ""*</doc>
<arguments>
<arg>docker</arg>
<arg>${command}</arg>
<arg>log=false</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${log}</arg>
</arguments>
<msg timestamp="20180516 15:16:25.372" level="INFO">docker</msg>
<msg timestamp="20180516 15:16:25.372" level="INFO">sudo docker exec etcd etcdctl get --prefix="true" ""</msg>
<msg timestamp="20180516 15:16:25.372" level="INFO">false</msg>
<status status="PASS" endtime="20180516 15:16:25.372" starttime="20180516 15:16:25.372"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:16:25.373" starttime="20180516 15:16:25.372"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:16:25.373" level="INFO">${currdate} = 2018-05-16 15:16:25.373</msg>
<status status="PASS" endtime="20180516 15:16:25.373" starttime="20180516 15:16:25.373"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20180516 15:16:25.373" level="INFO">Executing command 'sudo docker exec etcd etcdctl get --prefix="true" ""'.</msg>
<msg timestamp="20180516 15:16:25.581" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:16:25.582" level="INFO">${out} = </msg>
<msg timestamp="20180516 15:16:25.582" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20180516 15:16:25.582" starttime="20180516 15:16:25.373"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${out}</arg>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:16:25.582" level="INFO"></msg>
<msg timestamp="20180516 15:16:25.582" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:16:25.582" starttime="20180516 15:16:25.582"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:16:25.583" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:16:25.583" starttime="20180516 15:16:25.583"></status>
</kw>
<msg timestamp="20180516 15:16:25.583" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:16:25.584" starttime="20180516 15:16:25.583"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} on ${machine}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:16:25.584" starttime="20180516 15:16:25.584"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${log}'=='true'</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:16:25.584" starttime="20180516 15:16:25.584"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:16:25.585" starttime="20180516 15:16:25.585"></status>
</kw>
<msg timestamp="20180516 15:16:25.585" level="INFO">${out} = </msg>
<status status="PASS" endtime="20180516 15:16:25.585" starttime="20180516 15:16:25.371"></status>
</kw>
<msg timestamp="20180516 15:16:25.585" level="INFO">${dump} = </msg>
<status status="PASS" endtime="20180516 15:16:25.585" starttime="20180516 15:16:25.364"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/etcd_dump-${tag}.txt</arg>
<arg>${dump}</arg>
</arguments>
<msg timestamp="20180516 15:16:25.586" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/etcd_dump-001_Configure Environment_test_setup.txt"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/etcd_dump-001_Configure Environment_test_setup.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:16:25.586" starttime="20180516 15:16:25.585"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${dump}</arg>
<arg>/error/</arg>
</arguments>
<assign>
<var>${errors}</var>
</assign>
<msg timestamp="20180516 15:16:25.586" level="INFO">0 out of 0 lines matched</msg>
<msg timestamp="20180516 15:16:25.586" level="INFO">${errors} = </msg>
<status status="PASS" endtime="20180516 15:16:25.587" starttime="20180516 15:16:25.586"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${errors}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${errors}</arg>
</arguments>
<msg timestamp="20180516 15:16:25.587" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:16:25.587" starttime="20180516 15:16:25.587"></status>
</kw>
<msg timestamp="20180516 15:16:25.587" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:16:25.587" starttime="20180516 15:16:25.587"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>Errors detected in keys: ${errors}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:16:25.588" starttime="20180516 15:16:25.588"></status>
</kw>
<status status="PASS" endtime="20180516 15:16:25.588" starttime="20180516 15:16:25.363"></status>
</kw>
<status status="PASS" endtime="20180516 15:16:25.588" starttime="20180516 15:16:25.360"></status>
</kw>
<status status="PASS" endtime="20180516 15:16:25.588" starttime="20180516 15:16:25.360"></status>
</kw>
<kw name="Configure Environment 2" library="configurations">
<doc>Setup environment with sfc_setup</doc>
<arguments>
<arg>acl_basic.conf</arg>
</arguments>
<kw name="Add Agent VPP Node" library="docker">
<arguments>
<arg>agent_vpp_1</arg>
<arg>vswitch=${TRUE}</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${vswitch}</arg>
</arguments>
<msg timestamp="20180516 15:16:25.589" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:16:25.589" level="INFO">True</msg>
<status status="PASS" endtime="20180516 15:16:25.589" starttime="20180516 15:16:25.589"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${vswitch}</arg>
<arg>--pid=host -v "/var/run/docker.sock:/var/run/docker.sock"</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${add_params}</var>
</assign>
<msg timestamp="20180516 15:16:25.590" level="INFO">${add_params} = --pid=host -v "/var/run/docker.sock:/var/run/docker.sock"</msg>
<status status="PASS" endtime="20180516 15:16:25.590" starttime="20180516 15:16:25.590"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${add_params}</arg>
</arguments>
<msg timestamp="20180516 15:16:25.591" level="INFO">--pid=host -v "/var/run/docker.sock:/var/run/docker.sock"</msg>
<status status="PASS" endtime="20180516 15:16:25.591" starttime="20180516 15:16:25.591"></status>
</kw>
<kw name="Open SSH Connection" library="setup-teardown">
<arguments>
<arg>${node}</arg>
<arg>${DOCKER_HOST_IP}</arg>
<arg>${DOCKER_HOST_USER}</arg>
<arg>${DOCKER_HOST_PSWD}</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${name}</arg>
<arg>${ip}</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20180516 15:16:25.592" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:16:25.592" level="INFO">192.168.100.20</msg>
<msg timestamp="20180516 15:16:25.592" level="INFO">msestak</msg>
<msg timestamp="20180516 15:16:25.592" level="INFO">Heslo9999</msg>
<status status="PASS" endtime="20180516 15:16:25.592" starttime="20180516 15:16:25.592"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${ip}</arg>
<arg>${name}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:16:25.593" starttime="20180516 15:16:25.592"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${pswd}"!="rsa_id"</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20180516 15:16:25.594" level="INFO">Logging into '192.168.100.20:22' as 'msestak'.</msg>
<msg timestamp="20180516 15:16:26.850" level="INFO">Read output: Welcome to Ubuntu 16.04.4 LTS (GNU/Linux 4.13.0-41-generic x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage

32 packages can be updated.
4 updates are security updates.

Last login: Wed May 16 15:16:17 2018 from 192.168.100.2
msestak@msestak-VirtualBox:~$</msg>
<status status="PASS" endtime="20180516 15:16:26.850" starttime="20180516 15:16:25.593"></status>
</kw>
<status status="PASS" endtime="20180516 15:16:26.850" starttime="20180516 15:16:25.593"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${pswd}"=="rsa_id"</arg>
<arg>SSHLibrary.Login_With_Public_Key</arg>
<arg>${user}</arg>
<arg>%{HOME}/.ssh/id_rsa</arg>
<arg>any</arg>
</arguments>
<status status="PASS" endtime="20180516 15:16:26.851" starttime="20180516 15:16:26.851"></status>
</kw>
<status status="PASS" endtime="20180516 15:16:26.851" starttime="20180516 15:16:25.591"></status>
</kw>
<kw name="Execute On Machine" library="ssh">
<doc>*Execute On Machine ${machine} ${command}*</doc>
<arguments>
<arg>${node}</arg>
<arg>${DOCKER_COMMAND} create -e MICROSERVICE_LABEL=${node} -e DP_STATUS_PUBLISHERS=etcd -e INITIAL_LOGLVL=debug --sysctl net.ipv6.conf.all.disable_ipv6=0 -it --privileged -v "${VPP_AGENT_HOST_MEMIF_SOCKET_FOLDER}:${${node}_MEMIF_SOCKET_FOLDER}" -v "${DOCKER_SOCKET_FOLDER}:${${node}_SOCKET_FOLDER}" -p ${${node}_VPP_HOST_PORT}:${${node}_VPP_PORT} -p ${${node}_REST_API_HOST_PORT}:${${node}_REST_API_PORT} --name ${node} ${add_params} ${${node}_DOCKER_IMAGE}</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${log}</arg>
</arguments>
<msg timestamp="20180516 15:16:26.861" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:16:26.861" level="INFO">sudo docker create -e MICROSERVICE_LABEL=agent_vpp_1 -e DP_STATUS_PUBLISHERS=etcd -e INITIAL_LOGLVL=debug --sysctl net.ipv6.conf.all.disable_ipv6=0 -it --privileged -v "/run/vpp:/run/vpp" -v "/tmp/vpp_socket:/tmp" -p 5001:5002 -p 9191:9191 --name agent_vpp_1 --pid=host -v "/var/run/docker.sock:/var/run/docker.sock" ligato/vpp-agent:pantheon-dev</msg>
<msg timestamp="20180516 15:16:26.861" level="INFO">true</msg>
<status status="PASS" endtime="20180516 15:16:26.861" starttime="20180516 15:16:26.861"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:16:26.862" starttime="20180516 15:16:26.861"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:16:26.862" level="INFO">${currdate} = 2018-05-16 15:16:26.862</msg>
<status status="PASS" endtime="20180516 15:16:26.862" starttime="20180516 15:16:26.862"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20180516 15:16:26.863" level="INFO">Executing command 'sudo docker create -e MICROSERVICE_LABEL=agent_vpp_1 -e DP_STATUS_PUBLISHERS=etcd -e INITIAL_LOGLVL=debug --sysctl net.ipv6.conf.all.disable_ipv6=0 -it --privileged -v "/run/vpp:/run/vpp" -v "/tmp/vpp_socket:/tmp" -p 5001:5002 -p 9191:9191 --name agent_vpp_1 --pid=host -v "/var/run/docker.sock:/var/run/docker.sock" ligato/vpp-agent:pantheon-dev'.</msg>
<msg timestamp="20180516 15:16:27.056" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:16:27.056" level="INFO">${out} = 229bc936e9b554278970cb1b91c8f6618d28efbb634b756bff29acd84006462f</msg>
<msg timestamp="20180516 15:16:27.056" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20180516 15:16:27.056" starttime="20180516 15:16:26.862"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${out}</arg>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:16:27.057" level="INFO">229bc936e9b554278970cb1b91c8f6618d28efbb634b756bff29acd84006462f</msg>
<msg timestamp="20180516 15:16:27.057" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:16:27.057" starttime="20180516 15:16:27.056"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:16:27.058" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:16:27.058" starttime="20180516 15:16:27.058"></status>
</kw>
<msg timestamp="20180516 15:16:27.058" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:16:27.058" starttime="20180516 15:16:27.057"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} on ${machine}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:16:27.058" starttime="20180516 15:16:27.058"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${log}'=='true'</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:16:27.063" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:16:27.063" starttime="20180516 15:16:27.059"></status>
</kw>
<status status="PASS" endtime="20180516 15:16:27.063" starttime="20180516 15:16:27.059"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:16:27.064" starttime="20180516 15:16:27.063"></status>
</kw>
<status status="PASS" endtime="20180516 15:16:27.064" starttime="20180516 15:16:26.859"></status>
</kw>
<kw name="Write To Machine" library="ssh">
<doc>*Write Machine ${machine} ${command}*</doc>
<arguments>
<arg>${node}</arg>
<arg>${DOCKER_COMMAND} start ${node}</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${delay}</arg>
</arguments>
<msg timestamp="20180516 15:16:27.073" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:16:27.073" level="INFO">sudo docker start agent_vpp_1</msg>
<msg timestamp="20180516 15:16:27.073" level="INFO">3s</msg>
<status status="PASS" endtime="20180516 15:16:27.073" starttime="20180516 15:16:27.072"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:16:27.073" starttime="20180516 15:16:27.073"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:16:27.074" level="INFO">${currdate} = 2018-05-16 15:16:27.074</msg>
<status status="PASS" endtime="20180516 15:16:27.074" starttime="20180516 15:16:27.073"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20180516 15:16:27.091" level="INFO">sudo docker start agent_vpp_1</msg>
<status status="PASS" endtime="20180516 15:16:27.091" starttime="20180516 15:16:27.074"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>delay=${delay}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20180516 15:16:33.099" level="INFO">agent_vpp_1
msestak@msestak-VirtualBox:~$</msg>
<msg timestamp="20180516 15:16:33.099" level="INFO">${out} = agent_vpp_1
msestak@msestak-VirtualBox:~$ </msg>
<status status="PASS" endtime="20180516 15:16:33.099" starttime="20180516 15:16:27.091"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:16:33.100" level="INFO">agent_vpp_1
msestak@msestak-VirtualBox:~$ </msg>
<status status="PASS" endtime="20180516 15:16:33.100" starttime="20180516 15:16:33.100"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:16:33.101" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:16:33.101" starttime="20180516 15:16:33.100"></status>
</kw>
<status status="PASS" endtime="20180516 15:16:33.101" starttime="20180516 15:16:27.072"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${NODES}</arg>
<arg>${node}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:16:33.102" starttime="20180516 15:16:33.102"></status>
</kw>
<kw name="Open SSH Connection" library="setup-teardown">
<arguments>
<arg>${node}_term</arg>
<arg>${DOCKER_HOST_IP}</arg>
<arg>${DOCKER_HOST_USER}</arg>
<arg>${DOCKER_HOST_PSWD}</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${name}</arg>
<arg>${ip}</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20180516 15:16:33.103" level="INFO">agent_vpp_1_term</msg>
<msg timestamp="20180516 15:16:33.103" level="INFO">192.168.100.20</msg>
<msg timestamp="20180516 15:16:33.103" level="INFO">msestak</msg>
<msg timestamp="20180516 15:16:33.104" level="INFO">Heslo9999</msg>
<status status="PASS" endtime="20180516 15:16:33.104" starttime="20180516 15:16:33.103"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${ip}</arg>
<arg>${name}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:16:33.104" starttime="20180516 15:16:33.104"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${pswd}"!="rsa_id"</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20180516 15:16:33.105" level="INFO">Logging into '192.168.100.20:22' as 'msestak'.</msg>
<msg timestamp="20180516 15:16:34.442" level="INFO">Read output: Welcome to Ubuntu 16.04.4 LTS (GNU/Linux 4.13.0-41-generic x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage

32 packages can be updated.
4 updates are security updates.

Last login: Wed May 16 15:16:25 2018 from 192.168.100.2
msestak@msestak-VirtualBox:~$</msg>
<status status="PASS" endtime="20180516 15:16:34.442" starttime="20180516 15:16:33.105"></status>
</kw>
<status status="PASS" endtime="20180516 15:16:34.442" starttime="20180516 15:16:33.104"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${pswd}"=="rsa_id"</arg>
<arg>SSHLibrary.Login_With_Public_Key</arg>
<arg>${user}</arg>
<arg>%{HOME}/.ssh/id_rsa</arg>
<arg>any</arg>
</arguments>
<status status="PASS" endtime="20180516 15:16:34.442" starttime="20180516 15:16:34.442"></status>
</kw>
<status status="PASS" endtime="20180516 15:16:34.443" starttime="20180516 15:16:33.102"></status>
</kw>
<kw name="Open SSH Connection" library="setup-teardown">
<arguments>
<arg>${node}_vat</arg>
<arg>${DOCKER_HOST_IP}</arg>
<arg>${DOCKER_HOST_USER}</arg>
<arg>${DOCKER_HOST_PSWD}</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${name}</arg>
<arg>${ip}</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20180516 15:16:34.444" level="INFO">agent_vpp_1_vat</msg>
<msg timestamp="20180516 15:16:34.444" level="INFO">192.168.100.20</msg>
<msg timestamp="20180516 15:16:34.444" level="INFO">msestak</msg>
<msg timestamp="20180516 15:16:34.444" level="INFO">Heslo9999</msg>
<status status="PASS" endtime="20180516 15:16:34.444" starttime="20180516 15:16:34.443"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${ip}</arg>
<arg>${name}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:16:34.444" starttime="20180516 15:16:34.444"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${pswd}"!="rsa_id"</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20180516 15:16:34.445" level="INFO">Logging into '192.168.100.20:22' as 'msestak'.</msg>
<msg timestamp="20180516 15:16:35.847" level="INFO">Read output: Welcome to Ubuntu 16.04.4 LTS (GNU/Linux 4.13.0-41-generic x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage

32 packages can be updated.
4 updates are security updates.

Last login: Wed May 16 15:16:33 2018 from 192.168.100.2
msestak@msestak-VirtualBox:~$</msg>
<status status="PASS" endtime="20180516 15:16:35.848" starttime="20180516 15:16:34.445"></status>
</kw>
<status status="PASS" endtime="20180516 15:16:35.848" starttime="20180516 15:16:34.445"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${pswd}"=="rsa_id"</arg>
<arg>SSHLibrary.Login_With_Public_Key</arg>
<arg>${user}</arg>
<arg>%{HOME}/.ssh/id_rsa</arg>
<arg>any</arg>
</arguments>
<status status="PASS" endtime="20180516 15:16:35.849" starttime="20180516 15:16:35.848"></status>
</kw>
<status status="PASS" endtime="20180516 15:16:35.849" starttime="20180516 15:16:34.443"></status>
</kw>
<kw name="vpp_term: Open VPP Terminal" library="vpp_term">
<doc>Wait for VPP terminal on node agent_vpp_1 or timeout</doc>
<arguments>
<arg>${node}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${terminal_timeout}</arg>
<arg>5s</arg>
<arg>vpp_term: Check VPP Terminal</arg>
<arg>${node}</arg>
</arguments>
<kw name="vpp_term: Check VPP Terminal" library="vpp_term">
<doc>Check terminal on node agent_vpp_1</doc>
<arguments>
<arg>${node}</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${${node}_VPP_HOST_PORT}</arg>
<arg>${${node}_VPP_TERM_PROMPT}</arg>
</arguments>
<msg timestamp="20180516 15:16:35.852" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:16:35.852" level="INFO">5001</msg>
<msg timestamp="20180516 15:16:35.852" level="INFO">vpp#</msg>
<status status="PASS" endtime="20180516 15:16:35.852" starttime="20180516 15:16:35.851"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>telnet 0 ${${node}_VPP_HOST_PORT}</arg>
</arguments>
<assign>
<var>${command}</var>
</assign>
<msg timestamp="20180516 15:16:35.853" level="INFO">${command} = telnet 0 5001</msg>
<status status="PASS" endtime="20180516 15:16:35.853" starttime="20180516 15:16:35.852"></status>
</kw>
<kw name="Write To Machine" library="ssh">
<doc>*Write Machine ${machine} telnet 0 5001*</doc>
<arguments>
<arg>${node}_term</arg>
<arg>${command}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${delay}</arg>
</arguments>
<msg timestamp="20180516 15:16:35.859" level="INFO">agent_vpp_1_term</msg>
<msg timestamp="20180516 15:16:35.859" level="INFO">telnet 0 5001</msg>
<msg timestamp="20180516 15:16:35.859" level="INFO">3s</msg>
<status status="PASS" endtime="20180516 15:16:35.859" starttime="20180516 15:16:35.859"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:16:35.860" starttime="20180516 15:16:35.859"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:16:35.860" level="INFO">${currdate} = 2018-05-16 15:16:35.860</msg>
<status status="PASS" endtime="20180516 15:16:35.860" starttime="20180516 15:16:35.860"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20180516 15:16:35.863" level="INFO">telnet 0 5001</msg>
<status status="PASS" endtime="20180516 15:16:35.864" starttime="20180516 15:16:35.860"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>delay=${delay}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20180516 15:16:38.868" level="INFO">Trying 0.0.0.0...
Connected to 0.
Escape character is '^]'.
    _______    _        _   _____  ___ 
 __/ __/ _ \  (_)__    | | / / _ \/ _ \
 _/ _// // / / / _ \   | |/ / ___/ ___/
 /_/ /____(_)_/\___/   |___/_/  /_/    

vpp#</msg>
<msg timestamp="20180516 15:16:38.868" level="INFO">${out} = Trying 0.0.0.0...
Connected to 0.
Escape character is '^]'.
    _______    _        _   _____  ___ 
 __/ __/ _ \  (_)__    | | / / _ \/ _ \
 _/ _// // / / / _ \   | |/ / ___/ ___/
 /_/ /____(_)...</msg>
<status status="PASS" endtime="20180516 15:16:38.868" starttime="20180516 15:16:35.864"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:16:38.869" level="INFO">Trying 0.0.0.0...
Connected to 0.
Escape character is '^]'.
    _______    _        _   _____  ___ 
 __/ __/ _ \  (_)__    | | / / _ \/ _ \
 _/ _// // / / / _ \   | |/ / ___/ ___/
 /_/ /____(_)_/\___/   |___/_/  /_/    

vpp# </msg>
<status status="PASS" endtime="20180516 15:16:38.869" starttime="20180516 15:16:38.869"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:16:38.870" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_term.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_term.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:16:38.870" starttime="20180516 15:16:38.869"></status>
</kw>
<msg timestamp="20180516 15:16:38.870" level="INFO">${out} = Trying 0.0.0.0...
Connected to 0.
Escape character is '^]'.
    _______    _        _   _____  ___ 
 __/ __/ _ \  (_)__    | | / / _ \/ _ \
 _/ _// // / / / _ \   | |/ / ___/ ___/
 /_/ /____(_)...</msg>
<status status="PASS" endtime="20180516 15:16:38.870" starttime="20180516 15:16:35.858"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${out}</arg>
<arg>${${node}_VPP_TERM_PROMPT}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:16:38.870" starttime="20180516 15:16:38.870"></status>
</kw>
<status status="PASS" endtime="20180516 15:16:38.871" starttime="20180516 15:16:35.851"></status>
</kw>
<status status="PASS" endtime="20180516 15:16:38.871" starttime="20180516 15:16:35.850"></status>
</kw>
<status status="PASS" endtime="20180516 15:16:38.871" starttime="20180516 15:16:35.849"></status>
</kw>
<kw name="vat_term: Open VAT Terminal" library="vat_term">
<doc>Wait for VAT terminal on node agent_vpp_1 or timeout</doc>
<arguments>
<arg>${node}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${terminal_timeout}</arg>
<arg>5s</arg>
<arg>vat_term: Check VAT Terminal</arg>
<arg>${node}</arg>
</arguments>
<kw name="vat_term: Check VAT Terminal" library="vat_term">
<doc>Check VAT terminal on node agent_vpp_1</doc>
<arguments>
<arg>${node}</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${node}_vat</arg>
<arg>${VAT_START_COMMAND}</arg>
<arg>${${node}_VPP_VAT_PROMPT}</arg>
</arguments>
<msg timestamp="20180516 15:16:38.873" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:16:38.873" level="INFO">agent_vpp_1_vat</msg>
<msg timestamp="20180516 15:16:38.873" level="INFO">vpp_api_test json</msg>
<msg timestamp="20180516 15:16:38.873" level="INFO">vat#</msg>
<status status="PASS" endtime="20180516 15:16:38.873" starttime="20180516 15:16:38.872"></status>
</kw>
<kw name="Write To Machine" library="ssh">
<doc>*Write Machine ${machine} ${command}*</doc>
<arguments>
<arg>${node}_vat</arg>
<arg>${DOCKER_COMMAND} exec -it ${node} /bin/bash</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${delay}</arg>
</arguments>
<msg timestamp="20180516 15:16:38.883" level="INFO">agent_vpp_1_vat</msg>
<msg timestamp="20180516 15:16:38.883" level="INFO">sudo docker exec -it agent_vpp_1 /bin/bash</msg>
<msg timestamp="20180516 15:16:38.883" level="INFO">3s</msg>
<status status="PASS" endtime="20180516 15:16:38.883" starttime="20180516 15:16:38.883"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:16:38.884" starttime="20180516 15:16:38.884"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:16:38.885" level="INFO">${currdate} = 2018-05-16 15:16:38.885</msg>
<status status="PASS" endtime="20180516 15:16:38.885" starttime="20180516 15:16:38.885"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20180516 15:16:38.893" level="INFO">sudo docker exec -it agent_vpp_1 /bin/bash</msg>
<status status="PASS" endtime="20180516 15:16:38.894" starttime="20180516 15:16:38.885"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>delay=${delay}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20180516 15:16:44.900" level="INFO">]0;root@229bc936e9b5: ~root@229bc936e9b5:~#</msg>
<msg timestamp="20180516 15:16:44.900" level="INFO">${out} = ]0;root@229bc936e9b5: ~root@229bc936e9b5:~# </msg>
<status status="PASS" endtime="20180516 15:16:44.900" starttime="20180516 15:16:38.894"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:16:44.900" level="INFO">]0;root@229bc936e9b5: ~root@229bc936e9b5:~# </msg>
<status status="PASS" endtime="20180516 15:16:44.901" starttime="20180516 15:16:44.900"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:16:44.901" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_vat.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_vat.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:16:44.901" starttime="20180516 15:16:44.901"></status>
</kw>
<msg timestamp="20180516 15:16:44.902" level="INFO">${out} = ]0;root@229bc936e9b5: ~root@229bc936e9b5:~# </msg>
<status status="PASS" endtime="20180516 15:16:44.902" starttime="20180516 15:16:38.882"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:16:44.902" level="INFO">]0;root@229bc936e9b5: ~root@229bc936e9b5:~# </msg>
<status status="PASS" endtime="20180516 15:16:44.902" starttime="20180516 15:16:44.902"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${VAT_START_COMMAND}</arg>
</arguments>
<assign>
<var>${command}</var>
</assign>
<msg timestamp="20180516 15:16:44.903" level="INFO">${command} = vpp_api_test json</msg>
<status status="PASS" endtime="20180516 15:16:44.903" starttime="20180516 15:16:44.903"></status>
</kw>
<kw name="Write To Machine" library="ssh">
<doc>*Write Machine ${machine} vpp_api_test json*</doc>
<arguments>
<arg>${node}_vat</arg>
<arg>${command}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${delay}</arg>
</arguments>
<msg timestamp="20180516 15:16:44.908" level="INFO">agent_vpp_1_vat</msg>
<msg timestamp="20180516 15:16:44.908" level="INFO">vpp_api_test json</msg>
<msg timestamp="20180516 15:16:44.908" level="INFO">3s</msg>
<status status="PASS" endtime="20180516 15:16:44.908" starttime="20180516 15:16:44.908"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:16:44.909" starttime="20180516 15:16:44.909"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:16:44.909" level="INFO">${currdate} = 2018-05-16 15:16:44.909</msg>
<status status="PASS" endtime="20180516 15:16:44.909" starttime="20180516 15:16:44.909"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20180516 15:16:44.912" level="INFO">vpp_api_test json</msg>
<status status="PASS" endtime="20180516 15:16:44.912" starttime="20180516 15:16:44.910"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>delay=${delay}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20180516 15:16:50.918" level="INFO">load_one_plugin:68: Loaded plugin: /usr/lib/vpp_api_test_plugins/ioam_trace_test_plugin.so
load_one_plugin:68: Loaded plugin: /usr/lib/vpp_api_test_plugins/acl_test_plugin.so
load_one_plugin:68: Loaded plugin: /usr/lib/vpp_api_test_plugins/memif_test_plugin.so
load_one_plugin:68: Loaded plugin: /usr/lib/vpp_api_test_plugins/vxlan_gpe_ioam_export_test_plugin.so
load_one_plugin:68: Loaded plugin: /usr/lib/vpp_api_test_plugins/lb_test_plugin.so
load_one_plugin:68: Loaded plugin: /usr/lib/vpp_api_test_plugins/lacp_test_plugin.so
load_one_plugin:68: Loaded plugin: /usr/lib/vpp_api_test_plugins/cdp_test_plugin.so
load_one_plugin:68: Loaded plugin: /usr/lib/vpp_api_test_plugins/flowprobe_test_plugin.so
load_one_plugin:68: Loaded plugin: /usr/lib/vpp_api_test_plugins/stn_test_plugin.so
load_one_plugin:68: Loaded plugin: /usr/lib/vpp_api_test_plugins/nat_test_plugin.so
load_one_plugin:68: Loaded plugin: /usr/lib/vpp_api_test_plugins/pppoe_test_plugin.so
vl_client_get_first_plugin_msg_id:581: plugin 'dpdk_5b64184b' not registered
load_one_plugin:68: Loaded plugin: /usr/lib/vpp_api_test_plugins/dpdk_test_plugin.so
load_one_plugin:68: Loaded plugin: /usr/lib/vpp_api_test_plugins/udp_ping_test_plugin.so
load_one_plugin:68: Loaded plugin: /usr/lib/vpp_api_test_plugins/ioam_export_test_plugin.so
load_one_plugin:68: Loaded plugin: /usr/lib/vpp_api_test_plugins/kubeproxy_test_plugin.so
load_one_plugin:68: Loaded plugin: /usr/lib/vpp_api_test_plugins/ioam_pot_test_plugin.so
load_one_plugin:68: Loaded plugin: /usr/lib/vpp_api_test_plugins/gtpu_test_plugin.so
load_one_plugin:68: Loaded plugin: /usr/lib/vpp_api_test_plugins/ioam_vxlan_gpe_test_plugin.so
vat#</msg>
<msg timestamp="20180516 15:16:50.918" level="INFO">${out} = load_one_plugin:68: Loaded plugin: /usr/lib/vpp_api_test_plugins/ioam_trace_test_plugin.so
load_one_plugin:68: Loaded plugin: /usr/lib/vpp_api_test_plugins/acl_test_plugin.so
load_one_plugin:68: Loa...</msg>
<status status="PASS" endtime="20180516 15:16:50.918" starttime="20180516 15:16:44.912"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:16:50.919" level="INFO">load_one_plugin:68: Loaded plugin: /usr/lib/vpp_api_test_plugins/ioam_trace_test_plugin.so
load_one_plugin:68: Loaded plugin: /usr/lib/vpp_api_test_plugins/acl_test_plugin.so
load_one_plugin:68: Loaded plugin: /usr/lib/vpp_api_test_plugins/memif_test_plugin.so
load_one_plugin:68: Loaded plugin: /usr/lib/vpp_api_test_plugins/vxlan_gpe_ioam_export_test_plugin.so
load_one_plugin:68: Loaded plugin: /usr/lib/vpp_api_test_plugins/lb_test_plugin.so
load_one_plugin:68: Loaded plugin: /usr/lib/vpp_api_test_plugins/lacp_test_plugin.so
load_one_plugin:68: Loaded plugin: /usr/lib/vpp_api_test_plugins/cdp_test_plugin.so
load_one_plugin:68: Loaded plugin: /usr/lib/vpp_api_test_plugins/flowprobe_test_plugin.so
load_one_plugin:68: Loaded plugin: /usr/lib/vpp_api_test_plugins/stn_test_plugin.so
load_one_plugin:68: Loaded plugin: /usr/lib/vpp_api_test_plugins/nat_test_plugin.so
load_one_plugin:68: Loaded plugin: /usr/lib/vpp_api_test_plugins/pppoe_test_plugin.so
vl_client_get_first_plugin_msg_id:581: plugin 'dpdk_5b64184b' not registered
load_one_plugin:68: Loaded plugin: /usr/lib/vpp_api_test_plugins/dpdk_test_plugin.so
load_one_plugin:68: Loaded plugin: /usr/lib/vpp_api_test_plugins/udp_ping_test_plugin.so
load_one_plugin:68: Loaded plugin: /usr/lib/vpp_api_test_plugins/ioam_export_test_plugin.so
load_one_plugin:68: Loaded plugin: /usr/lib/vpp_api_test_plugins/kubeproxy_test_plugin.so
load_one_plugin:68: Loaded plugin: /usr/lib/vpp_api_test_plugins/ioam_pot_test_plugin.so
load_one_plugin:68: Loaded plugin: /usr/lib/vpp_api_test_plugins/gtpu_test_plugin.so
load_one_plugin:68: Loaded plugin: /usr/lib/vpp_api_test_plugins/ioam_vxlan_gpe_test_plugin.so
vat# </msg>
<status status="PASS" endtime="20180516 15:16:50.919" starttime="20180516 15:16:50.919"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:16:50.920" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_vat.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_vat.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:16:50.920" starttime="20180516 15:16:50.920"></status>
</kw>
<msg timestamp="20180516 15:16:50.920" level="INFO">${out} = load_one_plugin:68: Loaded plugin: /usr/lib/vpp_api_test_plugins/ioam_trace_test_plugin.so
load_one_plugin:68: Loaded plugin: /usr/lib/vpp_api_test_plugins/acl_test_plugin.so
load_one_plugin:68: Loa...</msg>
<status status="PASS" endtime="20180516 15:16:50.921" starttime="20180516 15:16:44.907"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:16:50.921" level="INFO">load_one_plugin:68: Loaded plugin: /usr/lib/vpp_api_test_plugins/ioam_trace_test_plugin.so
load_one_plugin:68: Loaded plugin: /usr/lib/vpp_api_test_plugins/acl_test_plugin.so
load_one_plugin:68: Loaded plugin: /usr/lib/vpp_api_test_plugins/memif_test_plugin.so
load_one_plugin:68: Loaded plugin: /usr/lib/vpp_api_test_plugins/vxlan_gpe_ioam_export_test_plugin.so
load_one_plugin:68: Loaded plugin: /usr/lib/vpp_api_test_plugins/lb_test_plugin.so
load_one_plugin:68: Loaded plugin: /usr/lib/vpp_api_test_plugins/lacp_test_plugin.so
load_one_plugin:68: Loaded plugin: /usr/lib/vpp_api_test_plugins/cdp_test_plugin.so
load_one_plugin:68: Loaded plugin: /usr/lib/vpp_api_test_plugins/flowprobe_test_plugin.so
load_one_plugin:68: Loaded plugin: /usr/lib/vpp_api_test_plugins/stn_test_plugin.so
load_one_plugin:68: Loaded plugin: /usr/lib/vpp_api_test_plugins/nat_test_plugin.so
load_one_plugin:68: Loaded plugin: /usr/lib/vpp_api_test_plugins/pppoe_test_plugin.so
vl_client_get_first_plugin_msg_id:581: plugin 'dpdk_5b64184b' not registered
load_one_plugin:68: Loaded plugin: /usr/lib/vpp_api_test_plugins/dpdk_test_plugin.so
load_one_plugin:68: Loaded plugin: /usr/lib/vpp_api_test_plugins/udp_ping_test_plugin.so
load_one_plugin:68: Loaded plugin: /usr/lib/vpp_api_test_plugins/ioam_export_test_plugin.so
load_one_plugin:68: Loaded plugin: /usr/lib/vpp_api_test_plugins/kubeproxy_test_plugin.so
load_one_plugin:68: Loaded plugin: /usr/lib/vpp_api_test_plugins/ioam_pot_test_plugin.so
load_one_plugin:68: Loaded plugin: /usr/lib/vpp_api_test_plugins/gtpu_test_plugin.so
load_one_plugin:68: Loaded plugin: /usr/lib/vpp_api_test_plugins/ioam_vxlan_gpe_test_plugin.so
vat# </msg>
<status status="PASS" endtime="20180516 15:16:50.921" starttime="20180516 15:16:50.921"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${out}</arg>
<arg>${${node}_VPP_VAT_PROMPT}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:16:50.921" starttime="20180516 15:16:50.921"></status>
</kw>
<status status="PASS" endtime="20180516 15:16:50.922" starttime="20180516 15:16:38.872"></status>
</kw>
<status status="PASS" endtime="20180516 15:16:50.922" starttime="20180516 15:16:38.871"></status>
</kw>
<status status="PASS" endtime="20180516 15:16:50.922" starttime="20180516 15:16:38.871"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>${node}</arg>
<arg>http://${DOCKER_HOST_IP}:${${node}_REST_API_HOST_PORT}</arg>
</arguments>
<msg timestamp="20180516 15:16:50.922" level="INFO">Creating Session using : alias=agent_vpp_1, url=http://192.168.100.20:9191, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20180516 15:16:50.923" starttime="20180516 15:16:50.922"></status>
</kw>
<kw name="Execute On Machine" library="ssh">
<doc>*Execute On Machine ${machine} ${command}*</doc>
<arguments>
<arg>docker</arg>
<arg>${DOCKER_COMMAND} exec ${node} bash -c 'echo $HOSTNAME'</arg>
</arguments>
<assign>
<var>${hostname}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${log}</arg>
</arguments>
<msg timestamp="20180516 15:16:50.933" level="INFO">docker</msg>
<msg timestamp="20180516 15:16:50.933" level="INFO">sudo docker exec agent_vpp_1 bash -c 'echo $HOSTNAME'</msg>
<msg timestamp="20180516 15:16:50.933" level="INFO">true</msg>
<status status="PASS" endtime="20180516 15:16:50.933" starttime="20180516 15:16:50.932"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:16:50.933" starttime="20180516 15:16:50.933"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:16:50.934" level="INFO">${currdate} = 2018-05-16 15:16:50.934</msg>
<status status="PASS" endtime="20180516 15:16:50.934" starttime="20180516 15:16:50.934"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20180516 15:16:50.934" level="INFO">Executing command 'sudo docker exec agent_vpp_1 bash -c 'echo $HOSTNAME''.</msg>
<msg timestamp="20180516 15:16:51.130" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:16:51.131" level="INFO">${out} = 229bc936e9b5</msg>
<msg timestamp="20180516 15:16:51.131" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20180516 15:16:51.131" starttime="20180516 15:16:50.934"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${out}</arg>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:16:51.132" level="INFO">229bc936e9b5</msg>
<msg timestamp="20180516 15:16:51.132" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:16:51.132" starttime="20180516 15:16:51.131"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:16:51.133" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:16:51.133" starttime="20180516 15:16:51.132"></status>
</kw>
<msg timestamp="20180516 15:16:51.133" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:16:51.133" starttime="20180516 15:16:51.132"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} on ${machine}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:16:51.134" starttime="20180516 15:16:51.133"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${log}'=='true'</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:16:51.135" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_docker.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_docker.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:16:51.136" starttime="20180516 15:16:51.135"></status>
</kw>
<status status="PASS" endtime="20180516 15:16:51.136" starttime="20180516 15:16:51.134"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:16:51.136" starttime="20180516 15:16:51.136"></status>
</kw>
<msg timestamp="20180516 15:16:51.136" level="INFO">${hostname} = 229bc936e9b5</msg>
<status status="PASS" endtime="20180516 15:16:51.136" starttime="20180516 15:16:50.932"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${${node}_HOSTNAME}</arg>
<arg>${hostname}</arg>
</arguments>
<msg timestamp="20180516 15:16:51.139" level="INFO">${agent_vpp_1_HOSTNAME} = 229bc936e9b5</msg>
<status status="PASS" endtime="20180516 15:16:51.140" starttime="20180516 15:16:51.137"></status>
</kw>
<kw name="Log List" library="Collections">
<doc>Logs the length and contents of the ``list`` using given ``level``.</doc>
<arguments>
<arg>${NODES}</arg>
</arguments>
<msg timestamp="20180516 15:16:51.140" level="INFO">List has one item:
agent_vpp_1</msg>
<status status="PASS" endtime="20180516 15:16:51.140" starttime="20180516 15:16:51.140"></status>
</kw>
<status status="PASS" endtime="20180516 15:16:51.140" starttime="20180516 15:16:25.589"></status>
</kw>
<kw name="Add Agent Node" library="docker">
<arguments>
<arg>node_1</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
</arguments>
<msg timestamp="20180516 15:16:51.141" level="INFO">node_1</msg>
<status status="PASS" endtime="20180516 15:16:51.141" starttime="20180516 15:16:51.141"></status>
</kw>
<kw name="Open SSH Connection" library="setup-teardown">
<arguments>
<arg>${node}</arg>
<arg>${DOCKER_HOST_IP}</arg>
<arg>${DOCKER_HOST_USER}</arg>
<arg>${DOCKER_HOST_PSWD}</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${name}</arg>
<arg>${ip}</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20180516 15:16:51.142" level="INFO">node_1</msg>
<msg timestamp="20180516 15:16:51.142" level="INFO">192.168.100.20</msg>
<msg timestamp="20180516 15:16:51.142" level="INFO">msestak</msg>
<msg timestamp="20180516 15:16:51.142" level="INFO">Heslo9999</msg>
<status status="PASS" endtime="20180516 15:16:51.142" starttime="20180516 15:16:51.142"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${ip}</arg>
<arg>${name}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:16:51.143" starttime="20180516 15:16:51.143"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${pswd}"!="rsa_id"</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20180516 15:16:51.144" level="INFO">Logging into '192.168.100.20:22' as 'msestak'.</msg>
<msg timestamp="20180516 15:16:52.435" level="INFO">Read output: Welcome to Ubuntu 16.04.4 LTS (GNU/Linux 4.13.0-41-generic x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage

32 packages can be updated.
4 updates are security updates.

Last login: Wed May 16 15:16:34 2018 from 192.168.100.2
msestak@msestak-VirtualBox:~$</msg>
<status status="PASS" endtime="20180516 15:16:52.435" starttime="20180516 15:16:51.144"></status>
</kw>
<status status="PASS" endtime="20180516 15:16:52.435" starttime="20180516 15:16:51.143"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${pswd}"=="rsa_id"</arg>
<arg>SSHLibrary.Login_With_Public_Key</arg>
<arg>${user}</arg>
<arg>%{HOME}/.ssh/id_rsa</arg>
<arg>any</arg>
</arguments>
<status status="PASS" endtime="20180516 15:16:52.436" starttime="20180516 15:16:52.436"></status>
</kw>
<status status="PASS" endtime="20180516 15:16:52.436" starttime="20180516 15:16:51.141"></status>
</kw>
<kw name="Execute On Machine" library="ssh">
<doc>*Execute On Machine ${machine} ${command}*</doc>
<arguments>
<arg>${node}</arg>
<arg>${DOCKER_COMMAND} create -e MICROSERVICE_LABEL=${node} --sysctl net.ipv6.conf.all.disable_ipv6=0 -it -p ${${node}_REST_API_HOST_PORT}:${${node}_REST_API_PORT} --name ${node} ${${node}_DOCKER_IMAGE}</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${log}</arg>
</arguments>
<msg timestamp="20180516 15:16:52.446" level="INFO">node_1</msg>
<msg timestamp="20180516 15:16:52.446" level="INFO">sudo docker create -e MICROSERVICE_LABEL=node_1 --sysctl net.ipv6.conf.all.disable_ipv6=0 -it -p 9195:9191 --name node_1 ligato/dev-cn-infra:latest</msg>
<msg timestamp="20180516 15:16:52.446" level="INFO">true</msg>
<status status="PASS" endtime="20180516 15:16:52.446" starttime="20180516 15:16:52.445"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:16:52.446" starttime="20180516 15:16:52.446"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:16:52.447" level="INFO">${currdate} = 2018-05-16 15:16:52.447</msg>
<status status="PASS" endtime="20180516 15:16:52.447" starttime="20180516 15:16:52.446"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20180516 15:16:52.447" level="INFO">Executing command 'sudo docker create -e MICROSERVICE_LABEL=node_1 --sysctl net.ipv6.conf.all.disable_ipv6=0 -it -p 9195:9191 --name node_1 ligato/dev-cn-infra:latest'.</msg>
<msg timestamp="20180516 15:16:52.688" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:16:52.688" level="INFO">${out} = 15c3e8866e047fd797d94df9dd192277cc2d34bb7af479e8e165b4604f469e1b</msg>
<msg timestamp="20180516 15:16:52.688" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20180516 15:16:52.689" starttime="20180516 15:16:52.447"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${out}</arg>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:16:52.689" level="INFO">15c3e8866e047fd797d94df9dd192277cc2d34bb7af479e8e165b4604f469e1b</msg>
<msg timestamp="20180516 15:16:52.690" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:16:52.690" starttime="20180516 15:16:52.689"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:16:52.691" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:16:52.691" starttime="20180516 15:16:52.690"></status>
</kw>
<msg timestamp="20180516 15:16:52.691" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:16:52.691" starttime="20180516 15:16:52.690"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} on ${machine}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:16:52.691" starttime="20180516 15:16:52.691"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${log}'=='true'</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:16:52.693" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_node_1.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_node_1.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:16:52.693" starttime="20180516 15:16:52.692"></status>
</kw>
<status status="PASS" endtime="20180516 15:16:52.693" starttime="20180516 15:16:52.692"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:16:52.693" starttime="20180516 15:16:52.693"></status>
</kw>
<status status="PASS" endtime="20180516 15:16:52.693" starttime="20180516 15:16:52.445"></status>
</kw>
<kw name="Write To Machine" library="ssh">
<doc>*Write Machine ${machine} ${command}*</doc>
<arguments>
<arg>${node}</arg>
<arg>${DOCKER_COMMAND} start ${node}</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${delay}</arg>
</arguments>
<msg timestamp="20180516 15:16:52.703" level="INFO">node_1</msg>
<msg timestamp="20180516 15:16:52.703" level="INFO">sudo docker start node_1</msg>
<msg timestamp="20180516 15:16:52.703" level="INFO">3s</msg>
<status status="PASS" endtime="20180516 15:16:52.703" starttime="20180516 15:16:52.703"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:16:52.703" starttime="20180516 15:16:52.703"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:16:52.704" level="INFO">${currdate} = 2018-05-16 15:16:52.704</msg>
<status status="PASS" endtime="20180516 15:16:52.704" starttime="20180516 15:16:52.704"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20180516 15:16:52.729" level="INFO">sudo docker start node_1</msg>
<status status="PASS" endtime="20180516 15:16:52.730" starttime="20180516 15:16:52.704"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>delay=${delay}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20180516 15:16:58.735" level="INFO">node_1
msestak@msestak-VirtualBox:~$</msg>
<msg timestamp="20180516 15:16:58.735" level="INFO">${out} = node_1
msestak@msestak-VirtualBox:~$ </msg>
<status status="PASS" endtime="20180516 15:16:58.735" starttime="20180516 15:16:52.730"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:16:58.735" level="INFO">node_1
msestak@msestak-VirtualBox:~$ </msg>
<status status="PASS" endtime="20180516 15:16:58.736" starttime="20180516 15:16:58.735"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:16:58.736" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_node_1.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_node_1.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:16:58.737" starttime="20180516 15:16:58.736"></status>
</kw>
<status status="PASS" endtime="20180516 15:16:58.737" starttime="20180516 15:16:52.702"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${NODES}</arg>
<arg>${node}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:16:58.737" starttime="20180516 15:16:58.737"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>${node}</arg>
<arg>http://${DOCKER_HOST_IP}:${${node}_REST_API_HOST_PORT}</arg>
</arguments>
<msg timestamp="20180516 15:16:58.738" level="INFO">Creating Session using : alias=node_1, url=http://192.168.100.20:9195, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20180516 15:16:58.738" starttime="20180516 15:16:58.737"></status>
</kw>
<kw name="Execute On Machine" library="ssh">
<doc>*Execute On Machine ${machine} ${command}*</doc>
<arguments>
<arg>docker</arg>
<arg>${DOCKER_COMMAND} exec ${node} bash -c 'echo $HOSTNAME'</arg>
</arguments>
<assign>
<var>${hostname}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${log}</arg>
</arguments>
<msg timestamp="20180516 15:16:58.747" level="INFO">docker</msg>
<msg timestamp="20180516 15:16:58.747" level="INFO">sudo docker exec node_1 bash -c 'echo $HOSTNAME'</msg>
<msg timestamp="20180516 15:16:58.747" level="INFO">true</msg>
<status status="PASS" endtime="20180516 15:16:58.747" starttime="20180516 15:16:58.746"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:16:58.747" starttime="20180516 15:16:58.747"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:16:58.748" level="INFO">${currdate} = 2018-05-16 15:16:58.748</msg>
<status status="PASS" endtime="20180516 15:16:58.748" starttime="20180516 15:16:58.747"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20180516 15:16:58.748" level="INFO">Executing command 'sudo docker exec node_1 bash -c 'echo $HOSTNAME''.</msg>
<msg timestamp="20180516 15:16:59.098" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:16:59.099" level="INFO">${out} = 15c3e8866e04</msg>
<msg timestamp="20180516 15:16:59.099" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20180516 15:16:59.099" starttime="20180516 15:16:58.748"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${out}</arg>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:16:59.099" level="INFO">15c3e8866e04</msg>
<msg timestamp="20180516 15:16:59.099" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:16:59.099" starttime="20180516 15:16:59.099"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:16:59.101" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:16:59.101" starttime="20180516 15:16:59.101"></status>
</kw>
<msg timestamp="20180516 15:16:59.101" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:16:59.101" starttime="20180516 15:16:59.100"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} on ${machine}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:16:59.102" starttime="20180516 15:16:59.101"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${log}'=='true'</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:16:59.103" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_docker.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_docker.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:16:59.103" starttime="20180516 15:16:59.102"></status>
</kw>
<status status="PASS" endtime="20180516 15:16:59.103" starttime="20180516 15:16:59.102"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:16:59.104" starttime="20180516 15:16:59.104"></status>
</kw>
<msg timestamp="20180516 15:16:59.104" level="INFO">${hostname} = 15c3e8866e04</msg>
<status status="PASS" endtime="20180516 15:16:59.104" starttime="20180516 15:16:58.746"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${${node}_HOSTNAME}</arg>
<arg>${hostname}</arg>
</arguments>
<msg timestamp="20180516 15:16:59.108" level="INFO">${node_1_HOSTNAME} = 15c3e8866e04</msg>
<status status="PASS" endtime="20180516 15:16:59.108" starttime="20180516 15:16:59.104"></status>
</kw>
<kw name="Log List" library="Collections">
<doc>Logs the length and contents of the ``list`` using given ``level``.</doc>
<arguments>
<arg>${NODES}</arg>
</arguments>
<msg timestamp="20180516 15:16:59.109" level="INFO">List length is 2 and it contains following items:
0: agent_vpp_1
1: node_1</msg>
<status status="PASS" endtime="20180516 15:16:59.109" starttime="20180516 15:16:59.108"></status>
</kw>
<status status="PASS" endtime="20180516 15:16:59.109" starttime="20180516 15:16:51.140"></status>
</kw>
<kw name="Add Agent Node" library="docker">
<arguments>
<arg>node_2</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
</arguments>
<msg timestamp="20180516 15:16:59.110" level="INFO">node_2</msg>
<status status="PASS" endtime="20180516 15:16:59.110" starttime="20180516 15:16:59.110"></status>
</kw>
<kw name="Open SSH Connection" library="setup-teardown">
<arguments>
<arg>${node}</arg>
<arg>${DOCKER_HOST_IP}</arg>
<arg>${DOCKER_HOST_USER}</arg>
<arg>${DOCKER_HOST_PSWD}</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${name}</arg>
<arg>${ip}</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20180516 15:16:59.111" level="INFO">node_2</msg>
<msg timestamp="20180516 15:16:59.111" level="INFO">192.168.100.20</msg>
<msg timestamp="20180516 15:16:59.112" level="INFO">msestak</msg>
<msg timestamp="20180516 15:16:59.112" level="INFO">Heslo9999</msg>
<status status="PASS" endtime="20180516 15:16:59.112" starttime="20180516 15:16:59.111"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${ip}</arg>
<arg>${name}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:16:59.112" starttime="20180516 15:16:59.112"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${pswd}"!="rsa_id"</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20180516 15:16:59.113" level="INFO">Logging into '192.168.100.20:22' as 'msestak'.</msg>
<msg timestamp="20180516 15:17:00.517" level="INFO">Read output: Welcome to Ubuntu 16.04.4 LTS (GNU/Linux 4.13.0-41-generic x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage

32 packages can be updated.
4 updates are security updates.

Last login: Wed May 16 15:16:51 2018 from 192.168.100.2
msestak@msestak-VirtualBox:~$</msg>
<status status="PASS" endtime="20180516 15:17:00.518" starttime="20180516 15:16:59.113"></status>
</kw>
<status status="PASS" endtime="20180516 15:17:00.518" starttime="20180516 15:16:59.113"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${pswd}"=="rsa_id"</arg>
<arg>SSHLibrary.Login_With_Public_Key</arg>
<arg>${user}</arg>
<arg>%{HOME}/.ssh/id_rsa</arg>
<arg>any</arg>
</arguments>
<status status="PASS" endtime="20180516 15:17:00.519" starttime="20180516 15:17:00.519"></status>
</kw>
<status status="PASS" endtime="20180516 15:17:00.520" starttime="20180516 15:16:59.111"></status>
</kw>
<kw name="Execute On Machine" library="ssh">
<doc>*Execute On Machine ${machine} ${command}*</doc>
<arguments>
<arg>${node}</arg>
<arg>${DOCKER_COMMAND} create -e MICROSERVICE_LABEL=${node} --sysctl net.ipv6.conf.all.disable_ipv6=0 -it -p ${${node}_REST_API_HOST_PORT}:${${node}_REST_API_PORT} --name ${node} ${${node}_DOCKER_IMAGE}</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${log}</arg>
</arguments>
<msg timestamp="20180516 15:17:00.556" level="INFO">node_2</msg>
<msg timestamp="20180516 15:17:00.557" level="INFO">sudo docker create -e MICROSERVICE_LABEL=node_2 --sysctl net.ipv6.conf.all.disable_ipv6=0 -it -p 9196:9191 --name node_2 ligato/dev-cn-infra:latest</msg>
<msg timestamp="20180516 15:17:00.557" level="INFO">true</msg>
<status status="PASS" endtime="20180516 15:17:00.557" starttime="20180516 15:17:00.556"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:17:00.559" starttime="20180516 15:17:00.559"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:17:00.561" level="INFO">${currdate} = 2018-05-16 15:17:00.561</msg>
<status status="PASS" endtime="20180516 15:17:00.561" starttime="20180516 15:17:00.560"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20180516 15:17:00.562" level="INFO">Executing command 'sudo docker create -e MICROSERVICE_LABEL=node_2 --sysctl net.ipv6.conf.all.disable_ipv6=0 -it -p 9196:9191 --name node_2 ligato/dev-cn-infra:latest'.</msg>
<msg timestamp="20180516 15:17:00.895" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:17:00.895" level="INFO">${out} = 0f26023937cfa11cb8816afdf2b76898f7d4babd3c189f2e2e6023336ff3e088</msg>
<msg timestamp="20180516 15:17:00.895" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20180516 15:17:00.895" starttime="20180516 15:17:00.561"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${out}</arg>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:17:00.895" level="INFO">0f26023937cfa11cb8816afdf2b76898f7d4babd3c189f2e2e6023336ff3e088</msg>
<msg timestamp="20180516 15:17:00.896" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:17:00.896" starttime="20180516 15:17:00.895"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:17:00.901" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:17:00.901" starttime="20180516 15:17:00.900"></status>
</kw>
<msg timestamp="20180516 15:17:00.901" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:17:00.901" starttime="20180516 15:17:00.896"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} on ${machine}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:17:00.902" starttime="20180516 15:17:00.901"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${log}'=='true'</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:17:00.920" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_node_2.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_node_2.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:17:00.922" starttime="20180516 15:17:00.902"></status>
</kw>
<status status="PASS" endtime="20180516 15:17:00.922" starttime="20180516 15:17:00.902"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:17:00.923" starttime="20180516 15:17:00.922"></status>
</kw>
<status status="PASS" endtime="20180516 15:17:00.923" starttime="20180516 15:17:00.555"></status>
</kw>
<kw name="Write To Machine" library="ssh">
<doc>*Write Machine ${machine} ${command}*</doc>
<arguments>
<arg>${node}</arg>
<arg>${DOCKER_COMMAND} start ${node}</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${delay}</arg>
</arguments>
<msg timestamp="20180516 15:17:01.013" level="INFO">node_2</msg>
<msg timestamp="20180516 15:17:01.013" level="INFO">sudo docker start node_2</msg>
<msg timestamp="20180516 15:17:01.013" level="INFO">3s</msg>
<status status="PASS" endtime="20180516 15:17:01.013" starttime="20180516 15:17:01.013"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:17:01.014" starttime="20180516 15:17:01.014"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:17:01.014" level="INFO">${currdate} = 2018-05-16 15:17:01.014</msg>
<status status="PASS" endtime="20180516 15:17:01.014" starttime="20180516 15:17:01.014"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20180516 15:17:01.024" level="INFO">sudo docker start node_2</msg>
<status status="PASS" endtime="20180516 15:17:01.024" starttime="20180516 15:17:01.014"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>delay=${delay}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20180516 15:17:07.031" level="INFO">node_2
msestak@msestak-VirtualBox:~$</msg>
<msg timestamp="20180516 15:17:07.032" level="INFO">${out} = node_2
msestak@msestak-VirtualBox:~$ </msg>
<status status="PASS" endtime="20180516 15:17:07.032" starttime="20180516 15:17:01.025"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:17:07.032" level="INFO">node_2
msestak@msestak-VirtualBox:~$ </msg>
<status status="PASS" endtime="20180516 15:17:07.032" starttime="20180516 15:17:07.032"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:17:07.033" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_node_2.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_node_2.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:17:07.033" starttime="20180516 15:17:07.032"></status>
</kw>
<status status="PASS" endtime="20180516 15:17:07.033" starttime="20180516 15:17:01.012"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${NODES}</arg>
<arg>${node}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:17:07.034" starttime="20180516 15:17:07.033"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>${node}</arg>
<arg>http://${DOCKER_HOST_IP}:${${node}_REST_API_HOST_PORT}</arg>
</arguments>
<msg timestamp="20180516 15:17:07.036" level="INFO">Creating Session using : alias=node_2, url=http://192.168.100.20:9196, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20180516 15:17:07.036" starttime="20180516 15:17:07.034"></status>
</kw>
<kw name="Execute On Machine" library="ssh">
<doc>*Execute On Machine ${machine} ${command}*</doc>
<arguments>
<arg>docker</arg>
<arg>${DOCKER_COMMAND} exec ${node} bash -c 'echo $HOSTNAME'</arg>
</arguments>
<assign>
<var>${hostname}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${log}</arg>
</arguments>
<msg timestamp="20180516 15:17:07.057" level="INFO">docker</msg>
<msg timestamp="20180516 15:17:07.057" level="INFO">sudo docker exec node_2 bash -c 'echo $HOSTNAME'</msg>
<msg timestamp="20180516 15:17:07.057" level="INFO">true</msg>
<status status="PASS" endtime="20180516 15:17:07.057" starttime="20180516 15:17:07.057"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:17:07.058" starttime="20180516 15:17:07.057"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:17:07.058" level="INFO">${currdate} = 2018-05-16 15:17:07.058</msg>
<status status="PASS" endtime="20180516 15:17:07.058" starttime="20180516 15:17:07.058"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20180516 15:17:07.059" level="INFO">Executing command 'sudo docker exec node_2 bash -c 'echo $HOSTNAME''.</msg>
<msg timestamp="20180516 15:17:07.277" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:17:07.277" level="INFO">${out} = 0f26023937cf</msg>
<msg timestamp="20180516 15:17:07.277" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20180516 15:17:07.277" starttime="20180516 15:17:07.058"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${out}</arg>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:17:07.278" level="INFO">0f26023937cf</msg>
<msg timestamp="20180516 15:17:07.278" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:17:07.278" starttime="20180516 15:17:07.278"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:17:07.279" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:17:07.279" starttime="20180516 15:17:07.279"></status>
</kw>
<msg timestamp="20180516 15:17:07.279" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:17:07.279" starttime="20180516 15:17:07.278"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} on ${machine}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:17:07.280" starttime="20180516 15:17:07.279"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${log}'=='true'</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:17:07.281" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_docker.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_docker.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:17:07.282" starttime="20180516 15:17:07.280"></status>
</kw>
<status status="PASS" endtime="20180516 15:17:07.282" starttime="20180516 15:17:07.280"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:17:07.282" starttime="20180516 15:17:07.282"></status>
</kw>
<msg timestamp="20180516 15:17:07.282" level="INFO">${hostname} = 0f26023937cf</msg>
<status status="PASS" endtime="20180516 15:17:07.282" starttime="20180516 15:17:07.056"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${${node}_HOSTNAME}</arg>
<arg>${hostname}</arg>
</arguments>
<msg timestamp="20180516 15:17:07.285" level="INFO">${node_2_HOSTNAME} = 0f26023937cf</msg>
<status status="PASS" endtime="20180516 15:17:07.285" starttime="20180516 15:17:07.283"></status>
</kw>
<kw name="Log List" library="Collections">
<doc>Logs the length and contents of the ``list`` using given ``level``.</doc>
<arguments>
<arg>${NODES}</arg>
</arguments>
<msg timestamp="20180516 15:17:07.286" level="INFO">List length is 3 and it contains following items:
0: agent_vpp_1
1: node_1
2: node_2</msg>
<status status="PASS" endtime="20180516 15:17:07.286" starttime="20180516 15:17:07.286"></status>
</kw>
<status status="PASS" endtime="20180516 15:17:07.286" starttime="20180516 15:16:59.109"></status>
</kw>
<kw name="Execute In Container" library="docker">
<arguments>
<arg>agent_vpp_1</arg>
<arg>echo $MICROSERVICE_LABEL</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${container}</arg>
<arg>${command}</arg>
</arguments>
<msg timestamp="20180516 15:17:07.287" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:17:07.287" level="INFO">echo $MICROSERVICE_LABEL</msg>
<status status="PASS" endtime="20180516 15:17:07.287" starttime="20180516 15:17:07.287"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>docker</arg>
</arguments>
<status status="PASS" endtime="20180516 15:17:07.287" starttime="20180516 15:17:07.287"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:17:07.288" level="INFO">${currdate} = 2018-05-16 15:17:07.288</msg>
<status status="PASS" endtime="20180516 15:17:07.288" starttime="20180516 15:17:07.288"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DOCKER_COMMAND} exec ${container} ${command}</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20180516 15:17:07.289" level="INFO">Executing command 'sudo docker exec agent_vpp_1 echo $MICROSERVICE_LABEL'.</msg>
<msg timestamp="20180516 15:17:07.582" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:17:07.582" level="INFO">${out} = </msg>
<msg timestamp="20180516 15:17:07.582" level="INFO">${stderr} = </msg>
<msg timestamp="20180516 15:17:07.582" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20180516 15:17:07.582" starttime="20180516 15:17:07.288"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:17:07.583" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:17:07.583" starttime="20180516 15:17:07.583"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:17:07.583" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:17:07.583" starttime="20180516 15:17:07.583"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${rc}</arg>
</arguments>
<msg timestamp="20180516 15:17:07.584" level="INFO">0</msg>
<status status="PASS" endtime="20180516 15:17:07.584" starttime="20180516 15:17:07.584"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:17:07.585" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:17:07.585" starttime="20180516 15:17:07.584"></status>
</kw>
<msg timestamp="20180516 15:17:07.585" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:17:07.585" starttime="20180516 15:17:07.584"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} in container ${container}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:17:07.585" starttime="20180516 15:17:07.585"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${container}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}***</arg>
</arguments>
<msg timestamp="20180516 15:17:07.586" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:17:07.586" starttime="20180516 15:17:07.586"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${container}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:17:07.587" starttime="20180516 15:17:07.587"></status>
</kw>
<status status="PASS" endtime="20180516 15:17:07.587" starttime="20180516 15:17:07.286"></status>
</kw>
<kw name="Execute In Container" library="docker">
<arguments>
<arg>agent_vpp_1</arg>
<arg>ls -al</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${container}</arg>
<arg>${command}</arg>
</arguments>
<msg timestamp="20180516 15:17:07.588" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:17:07.588" level="INFO">ls -al</msg>
<status status="PASS" endtime="20180516 15:17:07.588" starttime="20180516 15:17:07.587"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>docker</arg>
</arguments>
<status status="PASS" endtime="20180516 15:17:07.588" starttime="20180516 15:17:07.588"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:17:07.589" level="INFO">${currdate} = 2018-05-16 15:17:07.589</msg>
<status status="PASS" endtime="20180516 15:17:07.589" starttime="20180516 15:17:07.589"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DOCKER_COMMAND} exec ${container} ${command}</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20180516 15:17:07.589" level="INFO">Executing command 'sudo docker exec agent_vpp_1 ls -al'.</msg>
<msg timestamp="20180516 15:17:07.934" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:17:07.934" level="INFO">${out} = total 20
drwx------  2 root root 4096 May 16 13:16 .
drwxr-xr-x 54 root root 4096 May 16 13:16 ..
-rw-r--r--  1 root root 3106 Oct 22  2015 .bashrc
-rw-r--r--  1 root root  148 Aug 17  2015 .profile
-...</msg>
<msg timestamp="20180516 15:17:07.934" level="INFO">${stderr} = </msg>
<msg timestamp="20180516 15:17:07.935" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20180516 15:17:07.935" starttime="20180516 15:17:07.589"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:17:07.935" level="INFO">total 20
drwx------  2 root root 4096 May 16 13:16 .
drwxr-xr-x 54 root root 4096 May 16 13:16 ..
-rw-r--r--  1 root root 3106 Oct 22  2015 .bashrc
-rw-r--r--  1 root root  148 Aug 17  2015 .profile
-rw-r--r--  1 root root    5 May 16 13:16 supervisord.pid</msg>
<status status="PASS" endtime="20180516 15:17:07.935" starttime="20180516 15:17:07.935"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:17:07.936" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:17:07.936" starttime="20180516 15:17:07.936"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${rc}</arg>
</arguments>
<msg timestamp="20180516 15:17:07.936" level="INFO">0</msg>
<status status="PASS" endtime="20180516 15:17:07.936" starttime="20180516 15:17:07.936"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:17:07.937" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:17:07.937" starttime="20180516 15:17:07.937"></status>
</kw>
<msg timestamp="20180516 15:17:07.937" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:17:07.937" starttime="20180516 15:17:07.936"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} in container ${container}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:17:07.938" starttime="20180516 15:17:07.937"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${container}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}***</arg>
</arguments>
<msg timestamp="20180516 15:17:07.939" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:17:07.939" starttime="20180516 15:17:07.938"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${container}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:17:07.939" starttime="20180516 15:17:07.939"></status>
</kw>
<status status="PASS" endtime="20180516 15:17:07.939" starttime="20180516 15:17:07.587"></status>
</kw>
<kw name="Execute On Machine" library="ssh">
<doc>*Execute On Machine ${machine} ${command}*</doc>
<arguments>
<arg>docker</arg>
<arg>${DOCKER_COMMAND} images</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${log}</arg>
</arguments>
<msg timestamp="20180516 15:17:07.950" level="INFO">docker</msg>
<msg timestamp="20180516 15:17:07.950" level="INFO">sudo docker images</msg>
<msg timestamp="20180516 15:17:07.951" level="INFO">true</msg>
<status status="PASS" endtime="20180516 15:17:07.951" starttime="20180516 15:17:07.950"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:17:07.951" starttime="20180516 15:17:07.951"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:17:07.952" level="INFO">${currdate} = 2018-05-16 15:17:07.951</msg>
<status status="PASS" endtime="20180516 15:17:07.952" starttime="20180516 15:17:07.951"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20180516 15:17:07.952" level="INFO">Executing command 'sudo docker images'.</msg>
<msg timestamp="20180516 15:17:08.120" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:17:08.120" level="INFO">${out} = REPOSITORY                       TAG                 IMAGE ID            CREATED             SIZE
ligato/vpp-agent                 pantheon-dev        464d48df57db        2 days ago          223MB
lig...</msg>
<msg timestamp="20180516 15:17:08.120" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20180516 15:17:08.120" starttime="20180516 15:17:07.952"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${out}</arg>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:17:08.121" level="INFO">REPOSITORY                       TAG                 IMAGE ID            CREATED             SIZE
ligato/vpp-agent                 pantheon-dev        464d48df57db        2 days ago          223MB
ligato/vpp-agent                 &lt;none&gt;              9bca8d914079        6 days ago          223MB
ligato/dev-vpp-agent             pantheon-dev        ad6e2cb89702        6 days ago          6.05GB
ligato/dev-cn-infra              latest              a513979821c4        2 months ago        1.59GB
ligato/vpp-agent                 latest              00e9f0716ed4        2 months ago        342MB
quay.io/coreos/etcd              latest              d56a5594a28c        3 months ago        39.4MB
ligato/prod_sfc_controller       latest              0c91ca650426        3 months ago        40.9MB
ligato/dev_sfc_controller        latest              54324eb23822        3 months ago        1.43GB
ligato/vpp-agent                 cmts                678fc16b9a98        5 months ago        451MB
ligato/libmemif-sample-service   test                62fa62809f2f        5 months ago        448MB
ligato/dev_sfc_controller        cmts                953d84e1589f        5 months ago        1.65GB
ligato/libmemif-sample-service   latest              68c6b7f36718        5 months ago        476MB
quay.io/coreos/etcd              v3.0.16             e11e0fd4d1e3        16 months ago       42.6MB
spotify/kafka                    latest              a9e0a5b8b15e        17 months ago       443MB</msg>
<msg timestamp="20180516 15:17:08.121" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:17:08.121" starttime="20180516 15:17:08.121"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:17:08.122" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:17:08.122" starttime="20180516 15:17:08.122"></status>
</kw>
<msg timestamp="20180516 15:17:08.122" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:17:08.122" starttime="20180516 15:17:08.121"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} on ${machine}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:17:08.123" starttime="20180516 15:17:08.123"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${log}'=='true'</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:17:08.124" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_docker.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_docker.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:17:08.124" starttime="20180516 15:17:08.123"></status>
</kw>
<status status="PASS" endtime="20180516 15:17:08.124" starttime="20180516 15:17:08.123"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:17:08.125" starttime="20180516 15:17:08.124"></status>
</kw>
<status status="PASS" endtime="20180516 15:17:08.125" starttime="20180516 15:17:07.949"></status>
</kw>
<kw name="Execute On Machine" library="ssh">
<doc>*Execute On Machine ${machine} ${command}*</doc>
<arguments>
<arg>docker</arg>
<arg>${DOCKER_COMMAND} ps -as</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${log}</arg>
</arguments>
<msg timestamp="20180516 15:17:08.135" level="INFO">docker</msg>
<msg timestamp="20180516 15:17:08.135" level="INFO">sudo docker ps -as</msg>
<msg timestamp="20180516 15:17:08.135" level="INFO">true</msg>
<status status="PASS" endtime="20180516 15:17:08.135" starttime="20180516 15:17:08.134"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:17:08.135" starttime="20180516 15:17:08.135"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:17:08.136" level="INFO">${currdate} = 2018-05-16 15:17:08.136</msg>
<status status="PASS" endtime="20180516 15:17:08.136" starttime="20180516 15:17:08.135"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20180516 15:17:08.136" level="INFO">Executing command 'sudo docker ps -as'.</msg>
<msg timestamp="20180516 15:17:08.295" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:17:08.295" level="INFO">${out} = CONTAINER ID        IMAGE                           COMMAND                  CREATED              STATUS              PORTS                                            NAMES               SIZE
0f260239...</msg>
<msg timestamp="20180516 15:17:08.295" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20180516 15:17:08.295" starttime="20180516 15:17:08.136"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${out}</arg>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:17:08.295" level="INFO">CONTAINER ID        IMAGE                           COMMAND                  CREATED              STATUS              PORTS                                            NAMES               SIZE
0f26023937cf        ligato/dev-cn-infra:latest      "/usr/bin/supervisor…"   8 seconds ago        Up 6 seconds        0.0.0.0:9196-&gt;9191/tcp                           node_2              22.5kB (virtual 1.59GB)
15c3e8866e04        ligato/dev-cn-infra:latest      "/usr/bin/supervisor…"   16 seconds ago       Up 14 seconds       0.0.0.0:9195-&gt;9191/tcp                           node_1              21.7kB (virtual 1.59GB)
229bc936e9b5        ligato/vpp-agent:pantheon-dev   "/bin/sh -c 'rm -f /…"   42 seconds ago       Up 40 seconds       0.0.0.0:9191-&gt;9191/tcp, 0.0.0.0:5001-&gt;5002/tcp   agent_vpp_1         89.7kB (virtual 223MB)
2f7d62033432        ligato/vpp-agent:pantheon-dev   "bash"                   50 seconds ago       Up 48 seconds                                                        vpp_agent_ctl       0B (virtual 223MB)
5fd9956e4db0        quay.io/coreos/etcd:v3.0.16     "/usr/local/bin/etcd…"   About a minute ago   Up About a minute   0.0.0.0:2379-&gt;2379/tcp, 2380/tcp                 etcd                145MB (virtual 187MB)
dbef312b260f        spotify/kafka                   "supervisord -n"         About a minute ago   Up About a minute   0.0.0.0:2181-&gt;2181/tcp, 0.0.0.0:9092-&gt;9092/tcp   kafka               1.16GB (virtual 1.6GB)</msg>
<msg timestamp="20180516 15:17:08.296" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:17:08.296" starttime="20180516 15:17:08.295"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:17:08.297" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:17:08.297" starttime="20180516 15:17:08.296"></status>
</kw>
<msg timestamp="20180516 15:17:08.297" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:17:08.297" starttime="20180516 15:17:08.296"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} on ${machine}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:17:08.298" starttime="20180516 15:17:08.297"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${log}'=='true'</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:17:08.299" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_docker.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_docker.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:17:08.299" starttime="20180516 15:17:08.299"></status>
</kw>
<status status="PASS" endtime="20180516 15:17:08.299" starttime="20180516 15:17:08.298"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:17:08.300" starttime="20180516 15:17:08.300"></status>
</kw>
<status status="PASS" endtime="20180516 15:17:08.300" starttime="20180516 15:17:08.134"></status>
</kw>
<kw name="Start SFC Controller Container With Own Config" library="docker">
<arguments>
<arg>${sfc_conf}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${config}</arg>
</arguments>
<msg timestamp="20180516 15:17:08.301" level="INFO">acl_basic.conf</msg>
<status status="PASS" endtime="20180516 15:17:08.301" starttime="20180516 15:17:08.301"></status>
</kw>
<kw name="Open SSH Connection" library="setup-teardown">
<arguments>
<arg>sfc_controller</arg>
<arg>${DOCKER_HOST_IP}</arg>
<arg>${DOCKER_HOST_USER}</arg>
<arg>${DOCKER_HOST_PSWD}</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${name}</arg>
<arg>${ip}</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20180516 15:17:08.302" level="INFO">sfc_controller</msg>
<msg timestamp="20180516 15:17:08.302" level="INFO">192.168.100.20</msg>
<msg timestamp="20180516 15:17:08.302" level="INFO">msestak</msg>
<msg timestamp="20180516 15:17:08.302" level="INFO">Heslo9999</msg>
<status status="PASS" endtime="20180516 15:17:08.302" starttime="20180516 15:17:08.302"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${ip}</arg>
<arg>${name}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:17:08.303" starttime="20180516 15:17:08.302"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${pswd}"!="rsa_id"</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20180516 15:17:08.304" level="INFO">Logging into '192.168.100.20:22' as 'msestak'.</msg>
<msg timestamp="20180516 15:17:09.742" level="INFO">Read output: Welcome to Ubuntu 16.04.4 LTS (GNU/Linux 4.13.0-41-generic x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage

32 packages can be updated.
4 updates are security updates.

Last login: Wed May 16 15:16:59 2018 from 192.168.100.2
msestak@msestak-VirtualBox:~$</msg>
<status status="PASS" endtime="20180516 15:17:09.742" starttime="20180516 15:17:08.303"></status>
</kw>
<status status="PASS" endtime="20180516 15:17:09.742" starttime="20180516 15:17:08.303"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${pswd}"=="rsa_id"</arg>
<arg>SSHLibrary.Login_With_Public_Key</arg>
<arg>${user}</arg>
<arg>%{HOME}/.ssh/id_rsa</arg>
<arg>any</arg>
</arguments>
<status status="PASS" endtime="20180516 15:17:09.743" starttime="20180516 15:17:09.743"></status>
</kw>
<status status="PASS" endtime="20180516 15:17:09.743" starttime="20180516 15:17:08.301"></status>
</kw>
<kw name="Execute On Machine" library="ssh">
<doc>*Execute On Machine ${machine} ${command}*</doc>
<arguments>
<arg>sfc_controller</arg>
<arg>${DOCKER_COMMAND} create -it --name sfc_controller ${SFC_CONTROLLER_IMAGE_NAME}</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${log}</arg>
</arguments>
<msg timestamp="20180516 15:17:09.753" level="INFO">sfc_controller</msg>
<msg timestamp="20180516 15:17:09.753" level="INFO">sudo docker create -it --name sfc_controller ligato/prod_sfc_controller</msg>
<msg timestamp="20180516 15:17:09.753" level="INFO">true</msg>
<status status="PASS" endtime="20180516 15:17:09.753" starttime="20180516 15:17:09.753"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:17:09.754" starttime="20180516 15:17:09.753"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:17:09.754" level="INFO">${currdate} = 2018-05-16 15:17:09.754</msg>
<status status="PASS" endtime="20180516 15:17:09.754" starttime="20180516 15:17:09.754"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20180516 15:17:09.754" level="INFO">Executing command 'sudo docker create -it --name sfc_controller ligato/prod_sfc_controller'.</msg>
<msg timestamp="20180516 15:17:10.044" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:17:10.044" level="INFO">${out} = 9386c35dc335b2ceff69a81ea34076d0dbd6745babdd9a4cb2f03f7c42ebcea8</msg>
<msg timestamp="20180516 15:17:10.044" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20180516 15:17:10.044" starttime="20180516 15:17:09.754"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${out}</arg>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:17:10.045" level="INFO">9386c35dc335b2ceff69a81ea34076d0dbd6745babdd9a4cb2f03f7c42ebcea8</msg>
<msg timestamp="20180516 15:17:10.045" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:17:10.045" starttime="20180516 15:17:10.045"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:17:10.046" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:17:10.046" starttime="20180516 15:17:10.046"></status>
</kw>
<msg timestamp="20180516 15:17:10.046" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:17:10.046" starttime="20180516 15:17:10.045"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} on ${machine}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:17:10.047" starttime="20180516 15:17:10.046"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${log}'=='true'</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:17:10.053" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_sfc_controller.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_sfc_controller.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:17:10.053" starttime="20180516 15:17:10.047"></status>
</kw>
<status status="PASS" endtime="20180516 15:17:10.053" starttime="20180516 15:17:10.047"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:17:10.053" starttime="20180516 15:17:10.053"></status>
</kw>
<status status="PASS" endtime="20180516 15:17:10.054" starttime="20180516 15:17:09.752"></status>
</kw>
<kw name="Put File" library="SSHLibrary">
<doc>Uploads file(s) from the local machine to the remote machine.</doc>
<arguments>
<arg>${TEST_DATA_FOLDER}/${config}</arg>
<arg>/tmp/</arg>
</arguments>
<msg timestamp="20180516 15:17:10.094" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20180516 15:17:10.103" level="INFO">'test_data/acl_basic.conf' -&gt; '/tmp//acl_basic.conf'</msg>
<status status="PASS" endtime="20180516 15:17:10.103" starttime="20180516 15:17:10.054"></status>
</kw>
<kw name="Execute On Machine" library="ssh">
<doc>*Execute On Machine ${machine} ${command}*</doc>
<arguments>
<arg>sfc_controller</arg>
<arg>${DOCKER_COMMAND} cp /tmp/${config} sfc_controller:${SFC_CONTROLLER_CONF_PATH}</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${log}</arg>
</arguments>
<msg timestamp="20180516 15:17:10.113" level="INFO">sfc_controller</msg>
<msg timestamp="20180516 15:17:10.113" level="INFO">sudo docker cp /tmp/acl_basic.conf sfc_controller:/opt/sfc-controller/dev/sfc.conf</msg>
<msg timestamp="20180516 15:17:10.113" level="INFO">true</msg>
<status status="PASS" endtime="20180516 15:17:10.113" starttime="20180516 15:17:10.112"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:17:10.113" starttime="20180516 15:17:10.113"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:17:10.114" level="INFO">${currdate} = 2018-05-16 15:17:10.114</msg>
<status status="PASS" endtime="20180516 15:17:10.114" starttime="20180516 15:17:10.114"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20180516 15:17:10.114" level="INFO">Executing command 'sudo docker cp /tmp/acl_basic.conf sfc_controller:/opt/sfc-controller/dev/sfc.conf'.</msg>
<msg timestamp="20180516 15:17:10.478" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:17:10.478" level="INFO">${out} = </msg>
<msg timestamp="20180516 15:17:10.478" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20180516 15:17:10.478" starttime="20180516 15:17:10.114"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${out}</arg>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:17:10.479" level="INFO"></msg>
<msg timestamp="20180516 15:17:10.479" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:17:10.479" starttime="20180516 15:17:10.479"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:17:10.480" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:17:10.480" starttime="20180516 15:17:10.480"></status>
</kw>
<msg timestamp="20180516 15:17:10.480" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:17:10.480" starttime="20180516 15:17:10.480"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} on ${machine}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:17:10.481" starttime="20180516 15:17:10.481"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${log}'=='true'</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:17:10.482" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_sfc_controller.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_sfc_controller.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:17:10.482" starttime="20180516 15:17:10.482"></status>
</kw>
<status status="PASS" endtime="20180516 15:17:10.482" starttime="20180516 15:17:10.481"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:17:10.483" starttime="20180516 15:17:10.482"></status>
</kw>
<status status="PASS" endtime="20180516 15:17:10.483" starttime="20180516 15:17:10.111"></status>
</kw>
<kw name="Write To Machine" library="ssh">
<doc>*Write Machine ${machine} ${command}*</doc>
<arguments>
<arg>sfc_controller</arg>
<arg>${DOCKER_COMMAND} start -i sfc_controller</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${delay}</arg>
</arguments>
<msg timestamp="20180516 15:17:10.492" level="INFO">sfc_controller</msg>
<msg timestamp="20180516 15:17:10.492" level="INFO">sudo docker start -i sfc_controller</msg>
<msg timestamp="20180516 15:17:10.492" level="INFO">3s</msg>
<status status="PASS" endtime="20180516 15:17:10.492" starttime="20180516 15:17:10.491"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:17:10.492" starttime="20180516 15:17:10.492"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:17:10.493" level="INFO">${currdate} = 2018-05-16 15:17:10.493</msg>
<status status="PASS" endtime="20180516 15:17:10.493" starttime="20180516 15:17:10.493"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20180516 15:17:10.525" level="INFO">sudo docker start -i sfc_controller</msg>
<status status="PASS" endtime="20180516 15:17:10.525" starttime="20180516 15:17:10.493"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>delay=${delay}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20180516 15:17:19.533" level="INFO">[36mINFO[0m[0000] Starting agent                                [36mBuildDate[0m= [36mCommitHash[0m= [36mloc[0m="core/agent_core.go(195)" [36mlogger[0m=agentcore
[36mINFO[0m[0000] plugin Logs: Init took 57.463µs               [36mdurationInNs[0m=57463 [36mloc[0m="core/agent_core.go(295)" [36mlogger[0m=agentcore
[37mDEBU[0m[0000] Microservice label is set to vpp1             [37mloc[0m="servicelabel/plugin_impl_servicelabel.go(49)" [37mlogger[0m=defaultLogger
[36mINFO[0m[0000] plugin ServiceLabel: Init took 55.784µs       [36mdurationInNs[0m=55784 [36mloc[0m="core/agent_core.go(295)" [36mlogger[0m=agentcore
[36mINFO[0m[0000] plugin StatusCheck: Init took 3.22µs          [36mdurationInNs[0m=3220 [36mloc[0m="core/agent_core.go(295)" [36mlogger[0m=agentcore
[36mINFO[0m[0000] plugin HTTP: Init took 117.909µs              [36mdurationInNs[0m=117909 [36mloc[0m="core/agent_core.go(295)" [36mlogger[0m=agentcore
[36mINFO[0m[0000] plugin HealthRPC: Init took 459ns             [36mdurationInNs[0m=459 [36mloc[0m="core/agent_core.go(295)" [36mlogger[0m=agentcore
[36mINFO[0m[0000] plugin LogMngRPC: Init took 2.789µs           [36mdurationInNs[0m=2789 [36mloc[0m="core/agent_core.go(295)" [36mlogger[0m=agentcore
[36mINFO[0m[0000] Connecting to etcd took 764.186µs             [36mdurationInNs[0m=764186 [36mloc[0m="etcdv3/bytes_broker_impl.go(85)" [36mlogger[0m=etcdv3
[36mINFO[0m[0000] Plugin etcdv3: status check probe registered  [36mloc[0m="statuscheck/plugin_impl_statuscheck.go(144)" [36mlogger[0m=status-check
[36mINFO[0m[0000] plugin ETCD: Init took 3.697434ms             [36mdurationInNs[0m=3697434 [36mloc[0m="core/agent_core.go(295)" [36mlogger[0m=agentcore
[36mINFO[0m[0000] Plugin SfcController: status check probe registered  [36mloc[0m="statuscheck/plugin_impl_statuscheck.go(144)" [36mlogger[0m=status-check
[36mINFO[0m[0000] Initializing sfcCtrlPlugin 'SfcController'    [36mloc[0m="core/controller_core.go(116)" [36mlogger[0m=defaultLogger
[37mDEBU[0m[0000] LogFlags:                                     [37mloc[0m="core/controller_core.go(62)" [37mlogger[0m=defaultLogger
[37mDEBU[0m[0000] 	cnpDriver:'sfcctlrl2'                        [37mloc[0m="core/controller_core.go(63)" [37mlogger[0m=defaultLogger
[37mDEBU[0m[0000] 	sfcConfigFile:'/opt/sfc-controller/dev/sfc.conf'  [37mloc[0m="core/controller_core.go(64)" [37mlogger[0m=defaultLogger
[36mINFO[0m[0000] InitHTTPHandlers: registering controller URLs. sfcplug:%!(EXTRA *core.SfcControllerPluginHandler=&amp;{etcdv3 http 0xc420166a80 {0 0} &lt;nil&gt; &lt;nil&gt; {map[] map[] map[] {0 0 0 0 &lt;nil&gt; &lt;nil&gt;}} false 0xc42016b720 map[]})  [36mloc[0m="core/http_handlers.go(45)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] CNP Driver: Sfc Controller L2 Plugin: sfcctlrl2  [36mloc[0m="core/controller_core.go(131)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] ReconcileStart: enter ...                     [36mloc[0m="core/reconcile.go(44)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] ReconcileLoadAllVppLabels: begin ...          [36mloc[0m="core/reconcile.go(71)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] ReconcileLoadAllVppLabels: adding label to reconcile label map: agent_vpp_1  [36mloc[0m="core/reconcile.go(82)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] ReconcileLoadAllVppLabels: adding label to reconcile label map: node_1  [36mloc[0m="core/reconcile.go(82)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] ReconcileLoadAllVppLabels: adding label to reconcile label map: node_2  [36mloc[0m="core/reconcile.go(82)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] ReconcileLoadAllVppLabels: exit ...           [36mloc[0m="core/reconcile.go(91)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] ReconcileStart: begin ...                     [36mloc[0m="l2driver/reconcile.go(95)" [36mlogger[0m=defaultLogger
sequencerInitFromReconcileCache: sequence IDs after loading id's:  {0 0 0 0}
[36mINFO[0m[0000] ReconcileStart: exit ...                      [36mloc[0m="l2driver/reconcile.go(114)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] ReconcileStart: exit ...                      [36mloc[0m="core/reconcile.go(54)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] ReadEtcdDatastoreIntoRAMCache: start ...      [36mloc[0m="core/database.go(60)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] ReadEtcdDatastoreIntoRAMCache: end ...        [36mloc[0m="core/database.go(75)" [36mlogger[0m=defaultLogger
[37mDEBU[0m[0000] fpath of sfc-config: '/opt/sfc-controller/dev/sfc.conf'  [37mloc[0m="core/sfc_config_yaml.go(39)" [37mlogger[0m=defaultLogger
[37mDEBU[0m[0000] sfc-config: '&amp;{%!s(int=1) Basic Example static config for hosting 2 containers with a vnf-agent and 1 container with agent and vpp [] [{agent_vpp_1    02:00:00:AA:BB:00 6.0.0.100   %!s(bool=false) %!s(uint32=0) RX_MODE_UNKNOWN}] [{two-sample-vnf-containers Wire 2 VNF containers to the vpp switch SFC_EW_BD  %!s(uint32=0) &lt;nil&gt; [container:"node_1" port_label:"node1_veth" etcd_vpp_switch_key:"agent_vpp_1" ipv4_addr:"10.0.0.10" type:NON_VPP_CONTAINER_AFP  container:"node_2" port_label:"node2_veth" etcd_vpp_switch_key:"agent_vpp_1" ipv4_addr:"10.0.0.11" type:NON_VPP_CONTAINER_AFP ]}] {%!s(uint32=0) %!s(uint32=0) %!s(uint32=0) %!s(uint32=0) &lt;nil&gt; &lt;nil&gt;}}'  [37mloc[0m="core/sfc_config_yaml.go(52)" [37mlogger[0m=defaultLogger
[37mDEBU[0m[0000] copyYamlConfigToRAMCache: sp: %!(EXTRA controller.SystemParameters={0 0 0 0 &lt;nil&gt; &lt;nil&gt;})  [37mloc[0m="core/sfc_config_yaml.go(61)" [37mlogger[0m=defaultLogger
[37mDEBU[0m[0000] copyYamlConfigToRAMCache: he: %!(EXTRA controller.HostEntity={agent_vpp_1    02:00:00:AA:BB:00 6.0.0.100   false 0 RX_MODE_UNKNOWN})  [37mloc[0m="core/sfc_config_yaml.go(69)" [37mlogger[0m=defaultLogger
[37mDEBU[0m[0000] copyYamlConfigToRAMCache: sfc: %!(EXTRA controller.SfcEntity={two-sample-vnf-containers Wire 2 VNF containers to the vpp switch SFC_EW_BD  0 &lt;nil&gt; [container:"node_1" port_label:"node1_veth" etcd_vpp_switch_key:"agent_vpp_1" ipv4_addr:"10.0.0.10" type:NON_VPP_CONTAINER_AFP  container:"node_2" port_label:"node2_veth" etcd_vpp_switch_key:"agent_vpp_1" ipv4_addr:"10.0.0.11" type:NON_VPP_CONTAINER_AFP ]})  [37mloc[0m="core/sfc_config_yaml.go(73)" [37mlogger[0m=defaultLogger
[37mDEBU[0m[0000] copyYamlConfigToRAMCache: num_chain_elements=2  [37mloc[0m="core/sfc_config_yaml.go(74)" [37mlogger[0m=defaultLogger
[37mDEBU[0m[0000] copyYamlConfigToRAMCache: sfc_chain_element[0]=%!(EXTRA *controller.SfcEntity_SfcElement=container:"node_1" port_label:"node1_veth" etcd_vpp_switch_key:"agent_vpp_1" ipv4_addr:"10.0.0.10" type:NON_VPP_CONTAINER_AFP )  [37mloc[0m="core/sfc_config_yaml.go(76)" [37mlogger[0m=defaultLogger
[37mDEBU[0m[0000] copyYamlConfigToRAMCache: sfc_chain_element[1]=%!(EXTRA *controller.SfcEntity_SfcElement=container:"node_2" port_label:"node2_veth" etcd_vpp_switch_key:"agent_vpp_1" ipv4_addr:"10.0.0.11" type:NON_VPP_CONTAINER_AFP )  [37mloc[0m="core/sfc_config_yaml.go(76)" [37mlogger[0m=defaultLogger
[36mINFO[0m[0000] validateSystemParameters: initial SP's        [36mloc[0m="core/validate.go(53)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] validateSystemParameters: sys mtu = 0, defaulting to 1500  [36mloc[0m="core/validate.go(56)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] validateSystemParameters: sys starting vlan_id = 0, defaulting to 5000  [36mloc[0m="core/validate.go(60)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] validateSystemParameters: sys default static route weight = 0, defaulting to 5  [36mloc[0m="core/validate.go(64)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] validateSystemParameters: final SP'smtu:1500 starting_vlan_id:5000 default_static_route_weight:5 dynamic_bridge_parms:&lt;flood:true unknown_unicast_flood:true forward:true learn:true &gt; static_bridge_parms:&lt;forward:true &gt;   [36mloc[0m="core/validate.go(87)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] DatastoreSystemParametersCreate: setting key: '/sfc-controller/v1/SP'  [36mloc[0m="core/database.go(340)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] DatastoreHostEntityCreate: setting key: '/sfc-controller/v1/HE/agent_vpp_1'  [36mloc[0m="core/database.go(183)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] DatastoreSfcEntityCreate: setting key: '/sfc-controller/v1/SFC/two-sample-vnf-containers'  [36mloc[0m="core/database.go(261)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] render system parameters from ram cache       [36mloc[0m="core/renderer.go(31)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] renderSystemParameters: sp: %!(EXTRA controller.SystemParameters={1500 5000 5 0 flood:true unknown_unicast_flood:true forward:true learn:true  forward:true })  [36mloc[0m="core/renderer.go(83)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] SetSystemParameters: setting starting valnId: %!(EXTRA uint32=4999)  [36mloc[0m="l2driver/sfcctlr_l2_driver.go(174)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] SetSystemParameters: SP%!(EXTRA *controller.SystemParameters=mtu:1500 starting_vlan_id:5000 default_static_route_weight:5 dynamic_bridge_parms:&lt;flood:true unknown_unicast_flood:true forward:true learn:true &gt; static_bridge_parms:&lt;forward:true &gt; )  [36mloc[0m="l2driver/sfcctlr_l2_driver.go(176)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] render host entities from ram cache           [36mloc[0m="core/renderer.go(37)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] renderHostEntity: sh:'agent_vpp_1', configOnlyFrom=%!d(bool=true), wireToOtherEntities=%!d(bool=false)  [36mloc[0m="core/renderer.go(118)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] WireInternalsForHostEntity: he:'agent_vpp_1'  [36mloc[0m="core/renderer.go(122)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] WireInternalsForHostEntity: caching host: %!(EXTRA *controller.HostEntity=name:"agent_vpp_1" loopback_mac_addr:"02:00:00:AA:BB:00" loopback_ipv4:"6.0.0.100" )  [36mloc[0m="l2driver/sfcctlr_l2_driver.go(330)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] getMtu: 0                                     [36mloc[0m="l2driver/sfcctlr_l2_driver.go(2081)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] getMtu: replacing with system value: 1500     [36mloc[0m="l2driver/sfcctlr_l2_driver.go(2084)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] getMtu: 0                                     [36mloc[0m="l2driver/sfcctlr_l2_driver.go(2081)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] getMtu: replacing with system value: 1500     [36mloc[0m="l2driver/sfcctlr_l2_driver.go(2084)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] DatastoreHEIDsCreate: setting key: '/sfc-controller/v1/id/HE/agent_vpp_1'%!(EXTRA *l2.HEIDs=name:"agent_vpp_1" )  [36mloc[0m="l2driver/database.go(67)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] render external entities from ram cache       [36mloc[0m="core/renderer.go(45)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] renderHostEntity: sh:'agent_vpp_1', configOnlyFrom=%!d(bool=false), wireToOtherEntities=%!d(bool=true)  [36mloc[0m="core/renderer.go(118)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] render external entities from ram cache       [36mloc[0m="core/renderer.go(60)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] render sfc's from ram cache                   [36mloc[0m="core/renderer.go(68)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] renderServiceFunctionEntity: sfc:'two-sample-vnf-containers'  [36mloc[0m="core/renderer.go(151)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] renderServiceFunctionEntity: WireSfcEntities: for 'two-sample-vnf-containers'/'Wire 2 VNF containers to the vpp switch'  [36mloc[0m="core/renderer.go(159)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] wireSfcEastWestElements: sfc entity element[0]: %!(EXTRA *controller.SfcEntity_SfcElement=container:"node_1" port_label:"node1_veth" etcd_vpp_switch_key:"agent_vpp_1" ipv4_addr:"10.0.0.10" type:NON_VPP_CONTAINER_AFP )  [36mloc[0m="l2driver/sfcctlr_l2_driver.go(1048)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] createAFPacketVEthPairAndAddToBridge: vnf: 'node_1', host: 'agent_vpp_1'  [36mloc[0m="l2driver/sfcctlr_l2_driver.go(1589)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] createAFPacketVEthPair: vnf: 'node_1', host: 'agent_vpp_1'  [36mloc[0m="l2driver/sfcctlr_l2_driver.go(1454)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] DatastoreSFCIDsRetrieve: not found: /sfc-controller/v1/id/SFC/two-sample-vnf-containers/node_1_node1_veth  [36mloc[0m="l2driver/database.go(377)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] getMtu: 0                                     [36mloc[0m="l2driver/sfcctlr_l2_driver.go(2081)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] getMtu: replacing with system value: 1500     [36mloc[0m="l2driver/sfcctlr_l2_driver.go(2084)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] DatastoreSFCIDsCreate: setting key: '/sfc-controller/v1/id/SFC/two-sample-vnf-containers/node_1_node1_veth'  [36mloc[0m="l2driver/database.go(353)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] wireSfcEastWestElements: sfc entity element[1]: %!(EXTRA *controller.SfcEntity_SfcElement=container:"node_2" port_label:"node2_veth" etcd_vpp_switch_key:"agent_vpp_1" ipv4_addr:"10.0.0.11" type:NON_VPP_CONTAINER_AFP )  [36mloc[0m="l2driver/sfcctlr_l2_driver.go(1048)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] createAFPacketVEthPairAndAddToBridge: vnf: 'node_2', host: 'agent_vpp_1'  [36mloc[0m="l2driver/sfcctlr_l2_driver.go(1589)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] createAFPacketVEthPair: vnf: 'node_2', host: 'agent_vpp_1'  [36mloc[0m="l2driver/sfcctlr_l2_driver.go(1454)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] DatastoreSFCIDsRetrieve: not found: /sfc-controller/v1/id/SFC/two-sample-vnf-containers/node_2_node2_veth  [36mloc[0m="l2driver/database.go(377)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] getMtu: 0                                     [36mloc[0m="l2driver/sfcctlr_l2_driver.go(2081)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] getMtu: replacing with system value: 1500     [36mloc[0m="l2driver/sfcctlr_l2_driver.go(2084)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] DatastoreSFCIDsCreate: setting key: '/sfc-controller/v1/id/SFC/two-sample-vnf-containers/node_2_node2_veth'  [36mloc[0m="l2driver/database.go(353)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] {4999 0 2 2}                                  [36mloc[0m="l2driver/sfcctlr_l2_driver.go(2065)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] {map[] map[agent_vpp_1:{agent_vpp_1    02:00:00:AA:BB:00 6.0.0.100   false 0 RX_MODE_UNKNOWN}] map[two-sample-vnf-containers:{two-sample-vnf-containers Wire 2 VNF containers to the vpp switch SFC_EW_BD  0 &lt;nil&gt; [container:"node_1" port_label:"node1_veth" etcd_vpp_switch_key:"agent_vpp_1" ipv4_addr:"10.0.0.10" type:NON_VPP_CONTAINER_AFP  container:"node_2" port_label:"node2_veth" etcd_vpp_switch_key:"agent_vpp_1" ipv4_addr:"10.0.0.11" type:NON_VPP_CONTAINER_AFP ]}] {1500 5000 5 0 flood:true unknown_unicast_flood:true forward:true learn:true  forward:true }}  [36mloc[0m="l2driver/sfcctlr_l2_driver.go(2066)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] {map[] map[] map[] map[agent_vpp_1:0xc4202267a0] map[node_1/node1_veth:{10.0.0.10/24 02:00:00:00:00:01} node_2/node2_veth:{10.0.0.11/24 02:00:00:00:00:02}]}  [36mloc[0m="l2driver/sfcctlr_l2_driver.go(2067)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] ReconcileEnd: begin ...                       [36mloc[0m="core/reconcile.go(60)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] ReconcileEnd: begin ...                       [36mloc[0m="l2driver/reconcile.go(124)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] ReconcileEnd: reconcileBefore%!(EXTRA l2driver.reconcileCacheType={map[] map[] map[] map[] map[] map[] map[] map[]})  [36mloc[0m="l2driver/reconcile.go(125)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] ReconcileEnd: reconcileAfter%!(EXTRA l2driver.reconcileCacheType={map[/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_LOOPBACK_H_agent_vpp_1:{IF_LOOPBACK_H_agent_vpp_1  0 true 02:00:00:AA:BB:00 1500 0  [6.0.0.100] &lt;nil&gt; &lt;nil&gt; &lt;nil&gt; &lt;nil&gt; &lt;nil&gt; &lt;nil&gt;} /vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth:{IF_AFPIF_VSWITCH_node_1_node1_veth  4 true  1500 0  [] &lt;nil&gt; &lt;nil&gt; &lt;nil&gt; &lt;nil&gt; 0xc4202274d0 &lt;nil&gt;} /vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth:{IF_AFPIF_VSWITCH_node_2_node2_veth  4 true  1500 0  [] &lt;nil&gt; &lt;nil&gt; &lt;nil&gt; &lt;nil&gt; 0xc420227b80 &lt;nil&gt;}] map[/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VNF_node_1_node1_veth:{IF_VETH_VNF_node_1_node1_veth  0 true 02:00:00:00:00:01 1500 node1_veth [10.0.0.10/24] 0xc4201e3e80 0xc4202274b0} /vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VSWITCH_node_1_node1_veth:{IF_VETH_VSWITCH_node_1_node1_veth  0 true  1500 node_1_noeth_1 [] 0xc4201e3ec0 0xc4202274c0} /vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VNF_node_2_node2_veth:{IF_VETH_VNF_node_2_node2_veth  0 true 02:00:00:00:00:02 1500 node2_veth [10.0.0.11/24] 0xc42023a340 0xc420227b60} /vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VSWITCH_node_2_node2_veth:{IF_VETH_VSWITCH_node_2_node2_veth  0 true  1500 node_2_noeth_2 [] 0xc42023a380 0xc420227b70}] map[/vnf-agent/agent_vpp_1/vpp/config/v1/bd/BD_INTERNAL_EW_agent_vpp_1:{BD_INTERNAL_EW_agent_vpp_1 true true true true false 0 [0xc420209f60 0xc42023e3c0] []} /vnf-agent/agent_vpp_1/vpp/config/v1/bd/BD_INTERNAL_EW_L2FIB_agent_vpp_1:{BD_INTERNAL_EW_L2FIB_agent_vpp_1 false false true false false 0 [] []}] map[] map[/sfc-controller/v1/id/HE/agent_vpp_1:{agent_vpp_1 0}] map[] map[] map[/sfc-controller/v1/id/SFC/two-sample-vnf-containers/node_1_node1_veth:{two-sample-vnf-containers node_1 node1_veth 0 1 0 1} /sfc-controller/v1/id/SFC/two-sample-vnf-containers/node_2_node2_veth:{two-sample-vnf-containers node_2 node2_veth 0 2 0 2}]})  [36mloc[0m="l2driver/reconcile.go(126)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] ReconcileEnd: add i/f key to etcd: /vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_LOOPBACK_H_agent_vpp_1{IF_LOOPBACK_H_agent_vpp_1  SOFTWARE_LOOPBACK true 02:00:00:AA:BB:00 1500 0  [6.0.0.100] &lt;nil&gt; &lt;nil&gt; &lt;nil&gt; &lt;nil&gt; &lt;nil&gt; &lt;nil&gt;}  [36mloc[0m="l2driver/reconcile.go(154)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] ReconcileEnd: add i/f key to etcd: /vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth{IF_AFPIF_VSWITCH_node_1_node1_veth  AF_PACKET_INTERFACE true  1500 0  [] &lt;nil&gt; &lt;nil&gt; &lt;nil&gt; &lt;nil&gt; host_if_name:"node_1_noeth_1"  &lt;nil&gt;}  [36mloc[0m="l2driver/reconcile.go(154)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] ReconcileEnd: add i/f key to etcd: /vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth{IF_AFPIF_VSWITCH_node_2_node2_veth  AF_PACKET_INTERFACE true  1500 0  [] &lt;nil&gt; &lt;nil&gt; &lt;nil&gt; &lt;nil&gt; host_if_name:"node_2_noeth_2"  &lt;nil&gt;}  [36mloc[0m="l2driver/reconcile.go(154)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] ReconcileEnd: add linux i/f key to etcd: /vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VNF_node_1_node1_veth{IF_VETH_VNF_node_1_node1_veth  VETH true 02:00:00:00:00:01 1500 node1_veth [10.0.0.10/24] type:MICROSERVICE_REF_NS microservice:"node_1"  peer_if_name:"IF_VETH_VSWITCH_node_1_node1_veth" }  [36mloc[0m="l2driver/reconcile.go(179)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] ReconcileEnd: add linux i/f key to etcd: /vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VSWITCH_node_1_node1_veth{IF_VETH_VSWITCH_node_1_node1_veth  VETH true  1500 node_1_noeth_1 [] type:MICROSERVICE_REF_NS microservice:"agent_vpp_1"  peer_if_name:"IF_VETH_VNF_node_1_node1_veth" }  [36mloc[0m="l2driver/reconcile.go(179)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] ReconcileEnd: add linux i/f key to etcd: /vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VNF_node_2_node2_veth{IF_VETH_VNF_node_2_node2_veth  VETH true 02:00:00:00:00:02 1500 node2_veth [10.0.0.11/24] type:MICROSERVICE_REF_NS microservice:"node_2"  peer_if_name:"IF_VETH_VSWITCH_node_2_node2_veth" }  [36mloc[0m="l2driver/reconcile.go(179)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] ReconcileEnd: add linux i/f key to etcd: /vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VSWITCH_node_2_node2_veth{IF_VETH_VSWITCH_node_2_node2_veth  VETH true  1500 node_2_noeth_2 [] type:MICROSERVICE_REF_NS microservice:"agent_vpp_1"  peer_if_name:"IF_VETH_VNF_node_2_node2_veth" }  [36mloc[0m="l2driver/reconcile.go(179)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] ReconcileEnd: add BD key to etcd: /vnf-agent/agent_vpp_1/vpp/config/v1/bd/BD_INTERNAL_EW_agent_vpp_1{BD_INTERNAL_EW_agent_vpp_1 true true true true false 0 [name:"IF_AFPIF_VSWITCH_node_1_node1_veth"  name:"IF_AFPIF_VSWITCH_node_2_node2_veth" ] []}  [36mloc[0m="l2driver/reconcile.go(206)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] ReconcileEnd: add BD key to etcd: /vnf-agent/agent_vpp_1/vpp/config/v1/bd/BD_INTERNAL_EW_L2FIB_agent_vpp_1{BD_INTERNAL_EW_L2FIB_agent_vpp_1 false false true false false 0 [] []}  [36mloc[0m="l2driver/reconcile.go(206)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] ReconcileEnd: add HE ID key to etcd: /sfc-controller/v1/id/HE/agent_vpp_1{agent_vpp_1 0}  [36mloc[0m="l2driver/reconcile.go(268)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] ReconcileEnd: add SFC ID key to etcd: /sfc-controller/v1/id/SFC/two-sample-vnf-containers/node_1_node1_veth{two-sample-vnf-containers node_1 node1_veth 0 1 0 1}  [36mloc[0m="l2driver/reconcile.go(343)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] ReconcileEnd: add SFC ID key to etcd: /sfc-controller/v1/id/SFC/two-sample-vnf-containers/node_2_node2_veth{two-sample-vnf-containers node_2 node2_veth 0 2 0 2}  [36mloc[0m="l2driver/reconcile.go(343)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] ReconcileEnd: exit ...                        [36mloc[0m="l2driver/reconcile.go(351)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] ReconcileEnd: exit ...                        [36mloc[0m="core/reconcile.go(65)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] Agent plugin state update.                    [36mlastErr[0m="&lt;nil&gt;" [36mloc[0m="statuscheck/plugin_impl_statuscheck.go(189)" [36mlogger[0m=status-check [36mplugin[0m=SfcController [36mstate[0m=ok
[36mINFO[0m[0000] plugin Sfc: Init took 139.214887ms            [36mdurationInNs[0m=139214887 [36mloc[0m="core/agent_core.go(295)" [36mlogger[0m=agentcore
[36mINFO[0m[0000] Initializing p 'vnf-driver'                   [36mloc[0m="vnfdriver/vnfdriver.go(50)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] plugin VNFDriver: Init took 39.818µs          [36mdurationInNs[0m=39818 [36mloc[0m="core/agent_core.go(295)" [36mlogger[0m=agentcore
[36mINFO[0m[0000] plugin Logs: AfterInit took 256ns             [36mdurationInNs[0m=256 [36mloc[0m="core/agent_core.go(345)" [36mlogger[0m=agentcore
[36mINFO[0m[0000] plugin ServiceLabel: not implement AfterInit  [36mloc[0m="core/agent_core.go(348)" [36mlogger[0m=agentcore
[36mINFO[0m[0000] plugin StatusCheck: AfterInit took 1.583µs    [36mdurationInNs[0m=1583 [36mloc[0m="core/agent_core.go(345)" [36mlogger[0m=agentcore
[36mINFO[0m[0000] Listening on http://0.0.0.0:9191              [36mloc[0m="rest/plugin_impl_rest.go(100)" [36mlogger[0m=http
[36mINFO[0m[0000] plugin HTTP: AfterInit took 100.800787ms      [36mdurationInNs[0m=100800787 [36mloc[0m="core/agent_core.go(345)" [36mlogger[0m=agentcore
[36mINFO[0m[0000] Starting health http-probe on port 9191       [36mloc[0m="probe/plugin_impl_probes.go(44)" [36mlogger[0m=health-rpc
[36mINFO[0m[0000] plugin HealthRPC: AfterInit took 1.87161ms    [36mdurationInNs[0m=1871610 [36mloc[0m="core/agent_core.go(345)" [36mlogger[0m=agentcore
[36mINFO[0m[0000] plugin LogMngRPC: AfterInit took 63.481µs     [36mdurationInNs[0m=63481 [36mloc[0m="core/agent_core.go(345)" [36mlogger[0m=agentcore
[36mINFO[0m[0000] plugin ETCD: AfterInit took 384ns             [36mdurationInNs[0m=384 [36mloc[0m="core/agent_core.go(345)" [36mlogger[0m=agentcore
[36mINFO[0m[0000] plugin Sfc: not implement AfterInit           [36mloc[0m="core/agent_core.go(348)" [36mlogger[0m=agentcore
[36mINFO[0m[0000] plugin VNFDriver: not implement AfterInit     [36mloc[0m="core/agent_core.go(348)" [36mlogger[0m=agentcore
[36mINFO[0m[0000] All plugins initialized successfully, took 250.570442ms  [36mdurationInNs[0m=250570442 [36mloc[0m="core/agent_core.go(365)" [36mlogger[0m=agentcore
[36mINFO[0m[0000] Agent Init took 146.598961ms                  [36mdurationInNs[0m=146598961 [36mloc[0m="core/agent_core.go(366)" [36mlogger[0m=agentcore
[36mINFO[0m[0000] Agent AfterInit took 103.971481ms             [36mdurationInNs[0m=103971481 [36mloc[0m="core/agent_core.go(367)" [36mlogger[0m=agentcore
[36mINFO[0m[0005] Agent plugin state update.                    [36mlastErr[0m="&lt;nil&gt;" [36mloc[0m="statuscheck/plugin_impl_statuscheck.go(189)" [36mlogger[0m=status-check [36mplugin[0m=etcdv3 [36mstate[0m=ok</msg>
<msg timestamp="20180516 15:17:19.533" level="INFO">${out} = [36mINFO[0m[0000] Starting agent                                [36mBuildDate[0m= [36mCommitHash[0m= [36mloc[0m="core/agent_core.go(195)" [36mlogger[0m=agentcore
[36mINFO[0m[0000] plugin ...</msg>
<status status="PASS" endtime="20180516 15:17:19.534" starttime="20180516 15:17:10.525"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:17:19.534" level="INFO">[36mINFO[0m[0000] Starting agent                                [36mBuildDate[0m= [36mCommitHash[0m= [36mloc[0m="core/agent_core.go(195)" [36mlogger[0m=agentcore
[36mINFO[0m[0000] plugin Logs: Init took 57.463µs               [36mdurationInNs[0m=57463 [36mloc[0m="core/agent_core.go(295)" [36mlogger[0m=agentcore
[37mDEBU[0m[0000] Microservice label is set to vpp1             [37mloc[0m="servicelabel/plugin_impl_servicelabel.go(49)" [37mlogger[0m=defaultLogger
[36mINFO[0m[0000] plugin ServiceLabel: Init took 55.784µs       [36mdurationInNs[0m=55784 [36mloc[0m="core/agent_core.go(295)" [36mlogger[0m=agentcore
[36mINFO[0m[0000] plugin StatusCheck: Init took 3.22µs          [36mdurationInNs[0m=3220 [36mloc[0m="core/agent_core.go(295)" [36mlogger[0m=agentcore
[36mINFO[0m[0000] plugin HTTP: Init took 117.909µs              [36mdurationInNs[0m=117909 [36mloc[0m="core/agent_core.go(295)" [36mlogger[0m=agentcore
[36mINFO[0m[0000] plugin HealthRPC: Init took 459ns             [36mdurationInNs[0m=459 [36mloc[0m="core/agent_core.go(295)" [36mlogger[0m=agentcore
[36mINFO[0m[0000] plugin LogMngRPC: Init took 2.789µs           [36mdurationInNs[0m=2789 [36mloc[0m="core/agent_core.go(295)" [36mlogger[0m=agentcore
[36mINFO[0m[0000] Connecting to etcd took 764.186µs             [36mdurationInNs[0m=764186 [36mloc[0m="etcdv3/bytes_broker_impl.go(85)" [36mlogger[0m=etcdv3
[36mINFO[0m[0000] Plugin etcdv3: status check probe registered  [36mloc[0m="statuscheck/plugin_impl_statuscheck.go(144)" [36mlogger[0m=status-check
[36mINFO[0m[0000] plugin ETCD: Init took 3.697434ms             [36mdurationInNs[0m=3697434 [36mloc[0m="core/agent_core.go(295)" [36mlogger[0m=agentcore
[36mINFO[0m[0000] Plugin SfcController: status check probe registered  [36mloc[0m="statuscheck/plugin_impl_statuscheck.go(144)" [36mlogger[0m=status-check
[36mINFO[0m[0000] Initializing sfcCtrlPlugin 'SfcController'    [36mloc[0m="core/controller_core.go(116)" [36mlogger[0m=defaultLogger
[37mDEBU[0m[0000] LogFlags:                                     [37mloc[0m="core/controller_core.go(62)" [37mlogger[0m=defaultLogger
[37mDEBU[0m[0000] 	cnpDriver:'sfcctlrl2'                        [37mloc[0m="core/controller_core.go(63)" [37mlogger[0m=defaultLogger
[37mDEBU[0m[0000] 	sfcConfigFile:'/opt/sfc-controller/dev/sfc.conf'  [37mloc[0m="core/controller_core.go(64)" [37mlogger[0m=defaultLogger
[36mINFO[0m[0000] InitHTTPHandlers: registering controller URLs. sfcplug:%!(EXTRA *core.SfcControllerPluginHandler=&amp;{etcdv3 http 0xc420166a80 {0 0} &lt;nil&gt; &lt;nil&gt; {map[] map[] map[] {0 0 0 0 &lt;nil&gt; &lt;nil&gt;}} false 0xc42016b720 map[]})  [36mloc[0m="core/http_handlers.go(45)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] CNP Driver: Sfc Controller L2 Plugin: sfcctlrl2  [36mloc[0m="core/controller_core.go(131)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] ReconcileStart: enter ...                     [36mloc[0m="core/reconcile.go(44)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] ReconcileLoadAllVppLabels: begin ...          [36mloc[0m="core/reconcile.go(71)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] ReconcileLoadAllVppLabels: adding label to reconcile label map: agent_vpp_1  [36mloc[0m="core/reconcile.go(82)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] ReconcileLoadAllVppLabels: adding label to reconcile label map: node_1  [36mloc[0m="core/reconcile.go(82)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] ReconcileLoadAllVppLabels: adding label to reconcile label map: node_2  [36mloc[0m="core/reconcile.go(82)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] ReconcileLoadAllVppLabels: exit ...           [36mloc[0m="core/reconcile.go(91)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] ReconcileStart: begin ...                     [36mloc[0m="l2driver/reconcile.go(95)" [36mlogger[0m=defaultLogger
sequencerInitFromReconcileCache: sequence IDs after loading id's:  {0 0 0 0}
[36mINFO[0m[0000] ReconcileStart: exit ...                      [36mloc[0m="l2driver/reconcile.go(114)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] ReconcileStart: exit ...                      [36mloc[0m="core/reconcile.go(54)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] ReadEtcdDatastoreIntoRAMCache: start ...      [36mloc[0m="core/database.go(60)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] ReadEtcdDatastoreIntoRAMCache: end ...        [36mloc[0m="core/database.go(75)" [36mlogger[0m=defaultLogger
[37mDEBU[0m[0000] fpath of sfc-config: '/opt/sfc-controller/dev/sfc.conf'  [37mloc[0m="core/sfc_config_yaml.go(39)" [37mlogger[0m=defaultLogger
[37mDEBU[0m[0000] sfc-config: '&amp;{%!s(int=1) Basic Example static config for hosting 2 containers with a vnf-agent and 1 container with agent and vpp [] [{agent_vpp_1    02:00:00:AA:BB:00 6.0.0.100   %!s(bool=false) %!s(uint32=0) RX_MODE_UNKNOWN}] [{two-sample-vnf-containers Wire 2 VNF containers to the vpp switch SFC_EW_BD  %!s(uint32=0) &lt;nil&gt; [container:"node_1" port_label:"node1_veth" etcd_vpp_switch_key:"agent_vpp_1" ipv4_addr:"10.0.0.10" type:NON_VPP_CONTAINER_AFP  container:"node_2" port_label:"node2_veth" etcd_vpp_switch_key:"agent_vpp_1" ipv4_addr:"10.0.0.11" type:NON_VPP_CONTAINER_AFP ]}] {%!s(uint32=0) %!s(uint32=0) %!s(uint32=0) %!s(uint32=0) &lt;nil&gt; &lt;nil&gt;}}'  [37mloc[0m="core/sfc_config_yaml.go(52)" [37mlogger[0m=defaultLogger
[37mDEBU[0m[0000] copyYamlConfigToRAMCache: sp: %!(EXTRA controller.SystemParameters={0 0 0 0 &lt;nil&gt; &lt;nil&gt;})  [37mloc[0m="core/sfc_config_yaml.go(61)" [37mlogger[0m=defaultLogger
[37mDEBU[0m[0000] copyYamlConfigToRAMCache: he: %!(EXTRA controller.HostEntity={agent_vpp_1    02:00:00:AA:BB:00 6.0.0.100   false 0 RX_MODE_UNKNOWN})  [37mloc[0m="core/sfc_config_yaml.go(69)" [37mlogger[0m=defaultLogger
[37mDEBU[0m[0000] copyYamlConfigToRAMCache: sfc: %!(EXTRA controller.SfcEntity={two-sample-vnf-containers Wire 2 VNF containers to the vpp switch SFC_EW_BD  0 &lt;nil&gt; [container:"node_1" port_label:"node1_veth" etcd_vpp_switch_key:"agent_vpp_1" ipv4_addr:"10.0.0.10" type:NON_VPP_CONTAINER_AFP  container:"node_2" port_label:"node2_veth" etcd_vpp_switch_key:"agent_vpp_1" ipv4_addr:"10.0.0.11" type:NON_VPP_CONTAINER_AFP ]})  [37mloc[0m="core/sfc_config_yaml.go(73)" [37mlogger[0m=defaultLogger
[37mDEBU[0m[0000] copyYamlConfigToRAMCache: num_chain_elements=2  [37mloc[0m="core/sfc_config_yaml.go(74)" [37mlogger[0m=defaultLogger
[37mDEBU[0m[0000] copyYamlConfigToRAMCache: sfc_chain_element[0]=%!(EXTRA *controller.SfcEntity_SfcElement=container:"node_1" port_label:"node1_veth" etcd_vpp_switch_key:"agent_vpp_1" ipv4_addr:"10.0.0.10" type:NON_VPP_CONTAINER_AFP )  [37mloc[0m="core/sfc_config_yaml.go(76)" [37mlogger[0m=defaultLogger
[37mDEBU[0m[0000] copyYamlConfigToRAMCache: sfc_chain_element[1]=%!(EXTRA *controller.SfcEntity_SfcElement=container:"node_2" port_label:"node2_veth" etcd_vpp_switch_key:"agent_vpp_1" ipv4_addr:"10.0.0.11" type:NON_VPP_CONTAINER_AFP )  [37mloc[0m="core/sfc_config_yaml.go(76)" [37mlogger[0m=defaultLogger
[36mINFO[0m[0000] validateSystemParameters: initial SP's        [36mloc[0m="core/validate.go(53)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] validateSystemParameters: sys mtu = 0, defaulting to 1500  [36mloc[0m="core/validate.go(56)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] validateSystemParameters: sys starting vlan_id = 0, defaulting to 5000  [36mloc[0m="core/validate.go(60)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] validateSystemParameters: sys default static route weight = 0, defaulting to 5  [36mloc[0m="core/validate.go(64)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] validateSystemParameters: final SP'smtu:1500 starting_vlan_id:5000 default_static_route_weight:5 dynamic_bridge_parms:&lt;flood:true unknown_unicast_flood:true forward:true learn:true &gt; static_bridge_parms:&lt;forward:true &gt;   [36mloc[0m="core/validate.go(87)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] DatastoreSystemParametersCreate: setting key: '/sfc-controller/v1/SP'  [36mloc[0m="core/database.go(340)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] DatastoreHostEntityCreate: setting key: '/sfc-controller/v1/HE/agent_vpp_1'  [36mloc[0m="core/database.go(183)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] DatastoreSfcEntityCreate: setting key: '/sfc-controller/v1/SFC/two-sample-vnf-containers'  [36mloc[0m="core/database.go(261)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] render system parameters from ram cache       [36mloc[0m="core/renderer.go(31)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] renderSystemParameters: sp: %!(EXTRA controller.SystemParameters={1500 5000 5 0 flood:true unknown_unicast_flood:true forward:true learn:true  forward:true })  [36mloc[0m="core/renderer.go(83)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] SetSystemParameters: setting starting valnId: %!(EXTRA uint32=4999)  [36mloc[0m="l2driver/sfcctlr_l2_driver.go(174)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] SetSystemParameters: SP%!(EXTRA *controller.SystemParameters=mtu:1500 starting_vlan_id:5000 default_static_route_weight:5 dynamic_bridge_parms:&lt;flood:true unknown_unicast_flood:true forward:true learn:true &gt; static_bridge_parms:&lt;forward:true &gt; )  [36mloc[0m="l2driver/sfcctlr_l2_driver.go(176)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] render host entities from ram cache           [36mloc[0m="core/renderer.go(37)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] renderHostEntity: sh:'agent_vpp_1', configOnlyFrom=%!d(bool=true), wireToOtherEntities=%!d(bool=false)  [36mloc[0m="core/renderer.go(118)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] WireInternalsForHostEntity: he:'agent_vpp_1'  [36mloc[0m="core/renderer.go(122)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] WireInternalsForHostEntity: caching host: %!(EXTRA *controller.HostEntity=name:"agent_vpp_1" loopback_mac_addr:"02:00:00:AA:BB:00" loopback_ipv4:"6.0.0.100" )  [36mloc[0m="l2driver/sfcctlr_l2_driver.go(330)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] getMtu: 0                                     [36mloc[0m="l2driver/sfcctlr_l2_driver.go(2081)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] getMtu: replacing with system value: 1500     [36mloc[0m="l2driver/sfcctlr_l2_driver.go(2084)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] getMtu: 0                                     [36mloc[0m="l2driver/sfcctlr_l2_driver.go(2081)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] getMtu: replacing with system value: 1500     [36mloc[0m="l2driver/sfcctlr_l2_driver.go(2084)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] DatastoreHEIDsCreate: setting key: '/sfc-controller/v1/id/HE/agent_vpp_1'%!(EXTRA *l2.HEIDs=name:"agent_vpp_1" )  [36mloc[0m="l2driver/database.go(67)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] render external entities from ram cache       [36mloc[0m="core/renderer.go(45)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] renderHostEntity: sh:'agent_vpp_1', configOnlyFrom=%!d(bool=false), wireToOtherEntities=%!d(bool=true)  [36mloc[0m="core/renderer.go(118)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] render external entities from ram cache       [36mloc[0m="core/renderer.go(60)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] render sfc's from ram cache                   [36mloc[0m="core/renderer.go(68)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] renderServiceFunctionEntity: sfc:'two-sample-vnf-containers'  [36mloc[0m="core/renderer.go(151)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] renderServiceFunctionEntity: WireSfcEntities: for 'two-sample-vnf-containers'/'Wire 2 VNF containers to the vpp switch'  [36mloc[0m="core/renderer.go(159)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] wireSfcEastWestElements: sfc entity element[0]: %!(EXTRA *controller.SfcEntity_SfcElement=container:"node_1" port_label:"node1_veth" etcd_vpp_switch_key:"agent_vpp_1" ipv4_addr:"10.0.0.10" type:NON_VPP_CONTAINER_AFP )  [36mloc[0m="l2driver/sfcctlr_l2_driver.go(1048)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] createAFPacketVEthPairAndAddToBridge: vnf: 'node_1', host: 'agent_vpp_1'  [36mloc[0m="l2driver/sfcctlr_l2_driver.go(1589)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] createAFPacketVEthPair: vnf: 'node_1', host: 'agent_vpp_1'  [36mloc[0m="l2driver/sfcctlr_l2_driver.go(1454)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] DatastoreSFCIDsRetrieve: not found: /sfc-controller/v1/id/SFC/two-sample-vnf-containers/node_1_node1_veth  [36mloc[0m="l2driver/database.go(377)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] getMtu: 0                                     [36mloc[0m="l2driver/sfcctlr_l2_driver.go(2081)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] getMtu: replacing with system value: 1500     [36mloc[0m="l2driver/sfcctlr_l2_driver.go(2084)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] DatastoreSFCIDsCreate: setting key: '/sfc-controller/v1/id/SFC/two-sample-vnf-containers/node_1_node1_veth'  [36mloc[0m="l2driver/database.go(353)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] wireSfcEastWestElements: sfc entity element[1]: %!(EXTRA *controller.SfcEntity_SfcElement=container:"node_2" port_label:"node2_veth" etcd_vpp_switch_key:"agent_vpp_1" ipv4_addr:"10.0.0.11" type:NON_VPP_CONTAINER_AFP )  [36mloc[0m="l2driver/sfcctlr_l2_driver.go(1048)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] createAFPacketVEthPairAndAddToBridge: vnf: 'node_2', host: 'agent_vpp_1'  [36mloc[0m="l2driver/sfcctlr_l2_driver.go(1589)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] createAFPacketVEthPair: vnf: 'node_2', host: 'agent_vpp_1'  [36mloc[0m="l2driver/sfcctlr_l2_driver.go(1454)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] DatastoreSFCIDsRetrieve: not found: /sfc-controller/v1/id/SFC/two-sample-vnf-containers/node_2_node2_veth  [36mloc[0m="l2driver/database.go(377)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] getMtu: 0                                     [36mloc[0m="l2driver/sfcctlr_l2_driver.go(2081)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] getMtu: replacing with system value: 1500     [36mloc[0m="l2driver/sfcctlr_l2_driver.go(2084)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] DatastoreSFCIDsCreate: setting key: '/sfc-controller/v1/id/SFC/two-sample-vnf-containers/node_2_node2_veth'  [36mloc[0m="l2driver/database.go(353)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] {4999 0 2 2}                                  [36mloc[0m="l2driver/sfcctlr_l2_driver.go(2065)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] {map[] map[agent_vpp_1:{agent_vpp_1    02:00:00:AA:BB:00 6.0.0.100   false 0 RX_MODE_UNKNOWN}] map[two-sample-vnf-containers:{two-sample-vnf-containers Wire 2 VNF containers to the vpp switch SFC_EW_BD  0 &lt;nil&gt; [container:"node_1" port_label:"node1_veth" etcd_vpp_switch_key:"agent_vpp_1" ipv4_addr:"10.0.0.10" type:NON_VPP_CONTAINER_AFP  container:"node_2" port_label:"node2_veth" etcd_vpp_switch_key:"agent_vpp_1" ipv4_addr:"10.0.0.11" type:NON_VPP_CONTAINER_AFP ]}] {1500 5000 5 0 flood:true unknown_unicast_flood:true forward:true learn:true  forward:true }}  [36mloc[0m="l2driver/sfcctlr_l2_driver.go(2066)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] {map[] map[] map[] map[agent_vpp_1:0xc4202267a0] map[node_1/node1_veth:{10.0.0.10/24 02:00:00:00:00:01} node_2/node2_veth:{10.0.0.11/24 02:00:00:00:00:02}]}  [36mloc[0m="l2driver/sfcctlr_l2_driver.go(2067)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] ReconcileEnd: begin ...                       [36mloc[0m="core/reconcile.go(60)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] ReconcileEnd: begin ...                       [36mloc[0m="l2driver/reconcile.go(124)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] ReconcileEnd: reconcileBefore%!(EXTRA l2driver.reconcileCacheType={map[] map[] map[] map[] map[] map[] map[] map[]})  [36mloc[0m="l2driver/reconcile.go(125)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] ReconcileEnd: reconcileAfter%!(EXTRA l2driver.reconcileCacheType={map[/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_LOOPBACK_H_agent_vpp_1:{IF_LOOPBACK_H_agent_vpp_1  0 true 02:00:00:AA:BB:00 1500 0  [6.0.0.100] &lt;nil&gt; &lt;nil&gt; &lt;nil&gt; &lt;nil&gt; &lt;nil&gt; &lt;nil&gt;} /vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth:{IF_AFPIF_VSWITCH_node_1_node1_veth  4 true  1500 0  [] &lt;nil&gt; &lt;nil&gt; &lt;nil&gt; &lt;nil&gt; 0xc4202274d0 &lt;nil&gt;} /vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth:{IF_AFPIF_VSWITCH_node_2_node2_veth  4 true  1500 0  [] &lt;nil&gt; &lt;nil&gt; &lt;nil&gt; &lt;nil&gt; 0xc420227b80 &lt;nil&gt;}] map[/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VNF_node_1_node1_veth:{IF_VETH_VNF_node_1_node1_veth  0 true 02:00:00:00:00:01 1500 node1_veth [10.0.0.10/24] 0xc4201e3e80 0xc4202274b0} /vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VSWITCH_node_1_node1_veth:{IF_VETH_VSWITCH_node_1_node1_veth  0 true  1500 node_1_noeth_1 [] 0xc4201e3ec0 0xc4202274c0} /vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VNF_node_2_node2_veth:{IF_VETH_VNF_node_2_node2_veth  0 true 02:00:00:00:00:02 1500 node2_veth [10.0.0.11/24] 0xc42023a340 0xc420227b60} /vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VSWITCH_node_2_node2_veth:{IF_VETH_VSWITCH_node_2_node2_veth  0 true  1500 node_2_noeth_2 [] 0xc42023a380 0xc420227b70}] map[/vnf-agent/agent_vpp_1/vpp/config/v1/bd/BD_INTERNAL_EW_agent_vpp_1:{BD_INTERNAL_EW_agent_vpp_1 true true true true false 0 [0xc420209f60 0xc42023e3c0] []} /vnf-agent/agent_vpp_1/vpp/config/v1/bd/BD_INTERNAL_EW_L2FIB_agent_vpp_1:{BD_INTERNAL_EW_L2FIB_agent_vpp_1 false false true false false 0 [] []}] map[] map[/sfc-controller/v1/id/HE/agent_vpp_1:{agent_vpp_1 0}] map[] map[] map[/sfc-controller/v1/id/SFC/two-sample-vnf-containers/node_1_node1_veth:{two-sample-vnf-containers node_1 node1_veth 0 1 0 1} /sfc-controller/v1/id/SFC/two-sample-vnf-containers/node_2_node2_veth:{two-sample-vnf-containers node_2 node2_veth 0 2 0 2}]})  [36mloc[0m="l2driver/reconcile.go(126)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] ReconcileEnd: add i/f key to etcd: /vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_LOOPBACK_H_agent_vpp_1{IF_LOOPBACK_H_agent_vpp_1  SOFTWARE_LOOPBACK true 02:00:00:AA:BB:00 1500 0  [6.0.0.100] &lt;nil&gt; &lt;nil&gt; &lt;nil&gt; &lt;nil&gt; &lt;nil&gt; &lt;nil&gt;}  [36mloc[0m="l2driver/reconcile.go(154)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] ReconcileEnd: add i/f key to etcd: /vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth{IF_AFPIF_VSWITCH_node_1_node1_veth  AF_PACKET_INTERFACE true  1500 0  [] &lt;nil&gt; &lt;nil&gt; &lt;nil&gt; &lt;nil&gt; host_if_name:"node_1_noeth_1"  &lt;nil&gt;}  [36mloc[0m="l2driver/reconcile.go(154)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] ReconcileEnd: add i/f key to etcd: /vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth{IF_AFPIF_VSWITCH_node_2_node2_veth  AF_PACKET_INTERFACE true  1500 0  [] &lt;nil&gt; &lt;nil&gt; &lt;nil&gt; &lt;nil&gt; host_if_name:"node_2_noeth_2"  &lt;nil&gt;}  [36mloc[0m="l2driver/reconcile.go(154)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] ReconcileEnd: add linux i/f key to etcd: /vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VNF_node_1_node1_veth{IF_VETH_VNF_node_1_node1_veth  VETH true 02:00:00:00:00:01 1500 node1_veth [10.0.0.10/24] type:MICROSERVICE_REF_NS microservice:"node_1"  peer_if_name:"IF_VETH_VSWITCH_node_1_node1_veth" }  [36mloc[0m="l2driver/reconcile.go(179)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] ReconcileEnd: add linux i/f key to etcd: /vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VSWITCH_node_1_node1_veth{IF_VETH_VSWITCH_node_1_node1_veth  VETH true  1500 node_1_noeth_1 [] type:MICROSERVICE_REF_NS microservice:"agent_vpp_1"  peer_if_name:"IF_VETH_VNF_node_1_node1_veth" }  [36mloc[0m="l2driver/reconcile.go(179)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] ReconcileEnd: add linux i/f key to etcd: /vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VNF_node_2_node2_veth{IF_VETH_VNF_node_2_node2_veth  VETH true 02:00:00:00:00:02 1500 node2_veth [10.0.0.11/24] type:MICROSERVICE_REF_NS microservice:"node_2"  peer_if_name:"IF_VETH_VSWITCH_node_2_node2_veth" }  [36mloc[0m="l2driver/reconcile.go(179)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] ReconcileEnd: add linux i/f key to etcd: /vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VSWITCH_node_2_node2_veth{IF_VETH_VSWITCH_node_2_node2_veth  VETH true  1500 node_2_noeth_2 [] type:MICROSERVICE_REF_NS microservice:"agent_vpp_1"  peer_if_name:"IF_VETH_VNF_node_2_node2_veth" }  [36mloc[0m="l2driver/reconcile.go(179)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] ReconcileEnd: add BD key to etcd: /vnf-agent/agent_vpp_1/vpp/config/v1/bd/BD_INTERNAL_EW_agent_vpp_1{BD_INTERNAL_EW_agent_vpp_1 true true true true false 0 [name:"IF_AFPIF_VSWITCH_node_1_node1_veth"  name:"IF_AFPIF_VSWITCH_node_2_node2_veth" ] []}  [36mloc[0m="l2driver/reconcile.go(206)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] ReconcileEnd: add BD key to etcd: /vnf-agent/agent_vpp_1/vpp/config/v1/bd/BD_INTERNAL_EW_L2FIB_agent_vpp_1{BD_INTERNAL_EW_L2FIB_agent_vpp_1 false false true false false 0 [] []}  [36mloc[0m="l2driver/reconcile.go(206)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] ReconcileEnd: add HE ID key to etcd: /sfc-controller/v1/id/HE/agent_vpp_1{agent_vpp_1 0}  [36mloc[0m="l2driver/reconcile.go(268)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] ReconcileEnd: add SFC ID key to etcd: /sfc-controller/v1/id/SFC/two-sample-vnf-containers/node_1_node1_veth{two-sample-vnf-containers node_1 node1_veth 0 1 0 1}  [36mloc[0m="l2driver/reconcile.go(343)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] ReconcileEnd: add SFC ID key to etcd: /sfc-controller/v1/id/SFC/two-sample-vnf-containers/node_2_node2_veth{two-sample-vnf-containers node_2 node2_veth 0 2 0 2}  [36mloc[0m="l2driver/reconcile.go(343)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] ReconcileEnd: exit ...                        [36mloc[0m="l2driver/reconcile.go(351)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] ReconcileEnd: exit ...                        [36mloc[0m="core/reconcile.go(65)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] Agent plugin state update.                    [36mlastErr[0m="&lt;nil&gt;" [36mloc[0m="statuscheck/plugin_impl_statuscheck.go(189)" [36mlogger[0m=status-check [36mplugin[0m=SfcController [36mstate[0m=ok
[36mINFO[0m[0000] plugin Sfc: Init took 139.214887ms            [36mdurationInNs[0m=139214887 [36mloc[0m="core/agent_core.go(295)" [36mlogger[0m=agentcore
[36mINFO[0m[0000] Initializing p 'vnf-driver'                   [36mloc[0m="vnfdriver/vnfdriver.go(50)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] plugin VNFDriver: Init took 39.818µs          [36mdurationInNs[0m=39818 [36mloc[0m="core/agent_core.go(295)" [36mlogger[0m=agentcore
[36mINFO[0m[0000] plugin Logs: AfterInit took 256ns             [36mdurationInNs[0m=256 [36mloc[0m="core/agent_core.go(345)" [36mlogger[0m=agentcore
[36mINFO[0m[0000] plugin ServiceLabel: not implement AfterInit  [36mloc[0m="core/agent_core.go(348)" [36mlogger[0m=agentcore
[36mINFO[0m[0000] plugin StatusCheck: AfterInit took 1.583µs    [36mdurationInNs[0m=1583 [36mloc[0m="core/agent_core.go(345)" [36mlogger[0m=agentcore
[36mINFO[0m[0000] Listening on http://0.0.0.0:9191              [36mloc[0m="rest/plugin_impl_rest.go(100)" [36mlogger[0m=http
[36mINFO[0m[0000] plugin HTTP: AfterInit took 100.800787ms      [36mdurationInNs[0m=100800787 [36mloc[0m="core/agent_core.go(345)" [36mlogger[0m=agentcore
[36mINFO[0m[0000] Starting health http-probe on port 9191       [36mloc[0m="probe/plugin_impl_probes.go(44)" [36mlogger[0m=health-rpc
[36mINFO[0m[0000] plugin HealthRPC: AfterInit took 1.87161ms    [36mdurationInNs[0m=1871610 [36mloc[0m="core/agent_core.go(345)" [36mlogger[0m=agentcore
[36mINFO[0m[0000] plugin LogMngRPC: AfterInit took 63.481µs     [36mdurationInNs[0m=63481 [36mloc[0m="core/agent_core.go(345)" [36mlogger[0m=agentcore
[36mINFO[0m[0000] plugin ETCD: AfterInit took 384ns             [36mdurationInNs[0m=384 [36mloc[0m="core/agent_core.go(345)" [36mlogger[0m=agentcore
[36mINFO[0m[0000] plugin Sfc: not implement AfterInit           [36mloc[0m="core/agent_core.go(348)" [36mlogger[0m=agentcore
[36mINFO[0m[0000] plugin VNFDriver: not implement AfterInit     [36mloc[0m="core/agent_core.go(348)" [36mlogger[0m=agentcore
[36mINFO[0m[0000] All plugins initialized successfully, took 250.570442ms  [36mdurationInNs[0m=250570442 [36mloc[0m="core/agent_core.go(365)" [36mlogger[0m=agentcore
[36mINFO[0m[0000] Agent Init took 146.598961ms                  [36mdurationInNs[0m=146598961 [36mloc[0m="core/agent_core.go(366)" [36mlogger[0m=agentcore
[36mINFO[0m[0000] Agent AfterInit took 103.971481ms             [36mdurationInNs[0m=103971481 [36mloc[0m="core/agent_core.go(367)" [36mlogger[0m=agentcore
[36mINFO[0m[0005] Agent plugin state update.                    [36mlastErr[0m="&lt;nil&gt;" [36mloc[0m="statuscheck/plugin_impl_statuscheck.go(189)" [36mlogger[0m=status-check [36mplugin[0m=etcdv3 [36mstate[0m=ok
</msg>
<status status="PASS" endtime="20180516 15:17:19.535" starttime="20180516 15:17:19.534"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:17:19.536" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_sfc_controller.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_sfc_controller.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:17:19.536" starttime="20180516 15:17:19.535"></status>
</kw>
<status status="PASS" endtime="20180516 15:17:19.536" starttime="20180516 15:17:10.491"></status>
</kw>
<kw name="Execute On Machine" library="ssh">
<doc>*Execute On Machine ${machine} ${command}*</doc>
<arguments>
<arg>docker</arg>
<arg>${DOCKER_COMMAND} exec sfc_controller sh -c 'echo $HOSTNAME'</arg>
</arguments>
<assign>
<var>${hostname}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${log}</arg>
</arguments>
<msg timestamp="20180516 15:17:19.557" level="INFO">docker</msg>
<msg timestamp="20180516 15:17:19.557" level="INFO">sudo docker exec sfc_controller sh -c 'echo $HOSTNAME'</msg>
<msg timestamp="20180516 15:17:19.557" level="INFO">true</msg>
<status status="PASS" endtime="20180516 15:17:19.557" starttime="20180516 15:17:19.557"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:17:19.561" starttime="20180516 15:17:19.557"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:17:19.566" level="INFO">${currdate} = 2018-05-16 15:17:19.566</msg>
<status status="PASS" endtime="20180516 15:17:19.566" starttime="20180516 15:17:19.561"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20180516 15:17:19.567" level="INFO">Executing command 'sudo docker exec sfc_controller sh -c 'echo $HOSTNAME''.</msg>
<msg timestamp="20180516 15:17:19.873" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:17:19.873" level="INFO">${out} = 9386c35dc335</msg>
<msg timestamp="20180516 15:17:19.873" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20180516 15:17:19.873" starttime="20180516 15:17:19.567"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${out}</arg>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:17:19.874" level="INFO">9386c35dc335</msg>
<msg timestamp="20180516 15:17:19.874" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:17:19.874" starttime="20180516 15:17:19.873"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:17:19.875" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:17:19.875" starttime="20180516 15:17:19.875"></status>
</kw>
<msg timestamp="20180516 15:17:19.875" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:17:19.875" starttime="20180516 15:17:19.874"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} on ${machine}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:17:19.875" starttime="20180516 15:17:19.875"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${log}'=='true'</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:17:19.877" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_docker.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_docker.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:17:19.877" starttime="20180516 15:17:19.876"></status>
</kw>
<status status="PASS" endtime="20180516 15:17:19.877" starttime="20180516 15:17:19.876"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:17:19.877" starttime="20180516 15:17:19.877"></status>
</kw>
<msg timestamp="20180516 15:17:19.878" level="INFO">${hostname} = 9386c35dc335</msg>
<status status="PASS" endtime="20180516 15:17:19.878" starttime="20180516 15:17:19.556"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SFC_CONTROLLER_HOSTNAME}</arg>
<arg>${hostname}</arg>
</arguments>
<msg timestamp="20180516 15:17:19.881" level="INFO">${SFC_CONTROLLER_HOSTNAME} = 9386c35dc335</msg>
<status status="PASS" endtime="20180516 15:17:19.881" starttime="20180516 15:17:19.878"></status>
</kw>
<status status="PASS" endtime="20180516 15:17:19.881" starttime="20180516 15:17:08.300"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${SYNC_SLEEP}</arg>
</arguments>
<msg timestamp="20180516 15:17:29.882" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20180516 15:17:29.882" starttime="20180516 15:17:19.881"></status>
</kw>
<status status="PASS" endtime="20180516 15:17:29.882" starttime="20180516 15:16:25.588"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${SYNC_SLEEP}</arg>
</arguments>
<msg timestamp="20180516 15:17:39.883" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20180516 15:17:39.883" starttime="20180516 15:17:29.883"></status>
</kw>
<kw name="Show Interfaces And Other Objects">
<kw name="vpp_term: Show Interfaces" library="vpp_term">
<doc>Show interfaces through vpp terminal</doc>
<arguments>
<arg>agent_vpp_1</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${interface}</arg>
</arguments>
<msg timestamp="20180516 15:17:39.885" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:17:39.885" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:17:39.885" starttime="20180516 15:17:39.885"></status>
</kw>
<kw name="vpp_term: Issue Command" library="vpp_term">
<arguments>
<arg>${node}</arg>
<arg>sh int ${interface}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${command}</arg>
<arg>${delay}</arg>
<arg>${node}_term</arg>
<arg>${${node}_VPP_TERM_PROMPT}</arg>
</arguments>
<msg timestamp="20180516 15:17:39.887" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:17:39.887" level="INFO">sh int </msg>
<msg timestamp="20180516 15:17:39.887" level="INFO">3s</msg>
<msg timestamp="20180516 15:17:39.887" level="INFO">agent_vpp_1_term</msg>
<msg timestamp="20180516 15:17:39.887" level="INFO">vpp#</msg>
<status status="PASS" endtime="20180516 15:17:39.887" starttime="20180516 15:17:39.886"></status>
</kw>
<kw name="Write To Machine Until String" library="ssh">
<doc>*Write Machine ${machine} sh int *</doc>
<arguments>
<arg>${node}_term</arg>
<arg>${command}</arg>
<arg>${${node}_VPP_TERM_PROMPT}</arg>
<arg>delay=${delay}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${string}</arg>
<arg>${delay}</arg>
</arguments>
<msg timestamp="20180516 15:17:39.893" level="INFO">agent_vpp_1_term</msg>
<msg timestamp="20180516 15:17:39.893" level="INFO">sh int </msg>
<msg timestamp="20180516 15:17:39.893" level="INFO">vpp#</msg>
<msg timestamp="20180516 15:17:39.893" level="INFO">3s</msg>
<status status="PASS" endtime="20180516 15:17:39.893" starttime="20180516 15:17:39.892"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:17:39.895" starttime="20180516 15:17:39.893"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:17:39.896" level="INFO">${currdate} = 2018-05-16 15:17:39.895</msg>
<status status="PASS" endtime="20180516 15:17:39.896" starttime="20180516 15:17:39.895"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20180516 15:17:39.899" level="INFO">sh int</msg>
<status status="PASS" endtime="20180516 15:17:39.900" starttime="20180516 15:17:39.896"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>${string}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20180516 15:17:39.909" level="INFO">Name               Idx       State          Counter          Count     
host-node_1_noeth_1               2         up       rx packets                    15
                                                     rx bytes                    1202
                                                     tx packets                    16
                                                     tx bytes                    1312
host-node_2_noeth_2               3         up       rx packets                    16
                                                     rx bytes                    1312
                                                     tx packets                    15
                                                     tx bytes                    1202
local0                            0        down      
loop0                             1         up       
vpp#</msg>
<msg timestamp="20180516 15:17:39.910" level="INFO">${out} =               Name               Idx       State          Counter          Count     
host-node_1_noeth_1               2         up       rx packets                    15
                          ...</msg>
<status status="PASS" endtime="20180516 15:17:39.910" starttime="20180516 15:17:39.901"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:17:39.911" level="INFO">              Name               Idx       State          Counter          Count     
host-node_1_noeth_1               2         up       rx packets                    15
                                                     rx bytes                    1202
                                                     tx packets                    16
                                                     tx bytes                    1312
host-node_2_noeth_2               3         up       rx packets                    16
                                                     rx bytes                    1312
                                                     tx packets                    15
                                                     tx bytes                    1202
local0                            0        down      
loop0                             1         up       
vpp#</msg>
<status status="PASS" endtime="20180516 15:17:39.911" starttime="20180516 15:17:39.910"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>delay=${delay}</arg>
</arguments>
<assign>
<var>${out2}</var>
</assign>
<msg timestamp="20180516 15:17:42.918" level="INFO">${out2} =  </msg>
<status status="PASS" endtime="20180516 15:17:42.918" starttime="20180516 15:17:39.916"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out2}</arg>
</arguments>
<msg timestamp="20180516 15:17:42.919" level="INFO"> </msg>
<status status="PASS" endtime="20180516 15:17:42.919" starttime="20180516 15:17:42.919"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${out2}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:17:42.921" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_term.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_term.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:17:42.921" starttime="20180516 15:17:42.920"></status>
</kw>
<msg timestamp="20180516 15:17:42.921" level="INFO">${out} =               Name               Idx       State          Counter          Count     
host-node_1_noeth_1               2         up       rx packets                    15
                          ...</msg>
<status status="PASS" endtime="20180516 15:17:42.921" starttime="20180516 15:17:39.892"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:17:42.922" level="INFO">              Name               Idx       State          Counter          Count     
host-node_1_noeth_1               2         up       rx packets                    15
                                                     rx bytes                    1202
                                                     tx packets                    16
                                                     tx bytes                    1312
host-node_2_noeth_2               3         up       rx packets                    16
                                                     rx bytes                    1312
                                                     tx packets                    15
                                                     tx bytes                    1202
local0                            0        down      
loop0                             1         up       
vpp# </msg>
<status status="PASS" endtime="20180516 15:17:42.922" starttime="20180516 15:17:42.921"></status>
</kw>
<msg timestamp="20180516 15:17:42.922" level="INFO">${out} =               Name               Idx       State          Counter          Count     
host-node_1_noeth_1               2         up       rx packets                    15
                          ...</msg>
<status status="PASS" endtime="20180516 15:17:42.922" starttime="20180516 15:17:39.885"></status>
</kw>
<status status="PASS" endtime="20180516 15:17:42.923" starttime="20180516 15:17:39.884"></status>
</kw>
<kw name="Write To Machine" library="ssh">
<doc>*Write Machine ${machine} ${command}*</doc>
<arguments>
<arg>agent_vpp_1_term</arg>
<arg>show int addr</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${delay}</arg>
</arguments>
<msg timestamp="20180516 15:17:42.934" level="INFO">agent_vpp_1_term</msg>
<msg timestamp="20180516 15:17:42.935" level="INFO">show int addr</msg>
<msg timestamp="20180516 15:17:42.935" level="INFO">3s</msg>
<status status="PASS" endtime="20180516 15:17:42.935" starttime="20180516 15:17:42.934"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:17:42.935" starttime="20180516 15:17:42.935"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:17:42.936" level="INFO">${currdate} = 2018-05-16 15:17:42.936</msg>
<status status="PASS" endtime="20180516 15:17:42.936" starttime="20180516 15:17:42.935"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20180516 15:17:42.940" level="INFO">show int addr</msg>
<status status="PASS" endtime="20180516 15:17:42.940" starttime="20180516 15:17:42.936"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>delay=${delay}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20180516 15:17:45.947" level="INFO">host-node_1_noeth_1 (up):
  L2 bridge bd-id 1 idx 1 shg 0  
host-node_2_noeth_2 (up):
  L2 bridge bd-id 1 idx 1 shg 0  
local0 (dn):
loop0 (up):
  L3 6.0.0.100/32
vpp#</msg>
<msg timestamp="20180516 15:17:45.947" level="INFO">${out} = host-node_1_noeth_1 (up):
  L2 bridge bd-id 1 idx 1 shg 0  
host-node_2_noeth_2 (up):
  L2 bridge bd-id 1 idx 1 shg 0  
local0 (dn):
loop0 (up):
  L3 6.0.0.100/32
vpp# </msg>
<status status="PASS" endtime="20180516 15:17:45.947" starttime="20180516 15:17:42.942"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:17:45.948" level="INFO">host-node_1_noeth_1 (up):
  L2 bridge bd-id 1 idx 1 shg 0  
host-node_2_noeth_2 (up):
  L2 bridge bd-id 1 idx 1 shg 0  
local0 (dn):
loop0 (up):
  L3 6.0.0.100/32
vpp# </msg>
<status status="PASS" endtime="20180516 15:17:45.948" starttime="20180516 15:17:45.947"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:17:45.949" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_term.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_term.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:17:45.949" starttime="20180516 15:17:45.948"></status>
</kw>
<status status="PASS" endtime="20180516 15:17:45.949" starttime="20180516 15:17:42.933"></status>
</kw>
<kw name="Write To Machine" library="ssh">
<doc>*Write Machine ${machine} ${command}*</doc>
<arguments>
<arg>agent_vpp_1_term</arg>
<arg>show h</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${delay}</arg>
</arguments>
<msg timestamp="20180516 15:17:45.958" level="INFO">agent_vpp_1_term</msg>
<msg timestamp="20180516 15:17:45.958" level="INFO">show h</msg>
<msg timestamp="20180516 15:17:45.958" level="INFO">3s</msg>
<status status="PASS" endtime="20180516 15:17:45.959" starttime="20180516 15:17:45.958"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:17:45.959" starttime="20180516 15:17:45.959"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:17:45.959" level="INFO">${currdate} = 2018-05-16 15:17:45.959</msg>
<status status="PASS" endtime="20180516 15:17:45.959" starttime="20180516 15:17:45.959"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20180516 15:17:45.962" level="INFO">show h</msg>
<status status="PASS" endtime="20180516 15:17:45.963" starttime="20180516 15:17:45.960"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>delay=${delay}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20180516 15:17:51.972" level="INFO">Name                Idx   Link  Hardware
host-node_1_noeth_1                2     up   host-node_1_noeth_1
  Ethernet address 02:fe:3e:fd:61:28
  Linux PACKET socket interface
host-node_2_noeth_2                3     up   host-node_2_noeth_2
  Ethernet address 02:fe:42:98:22:08
  Linux PACKET socket interface
local0                             0    down  local0
  local
loop0                              1     up   loop0
  Ethernet address 02:00:00:aa:bb:00
vpp#</msg>
<msg timestamp="20180516 15:17:51.972" level="INFO">${out} =               Name                Idx   Link  Hardware
host-node_1_noeth_1                2     up   host-node_1_noeth_1
  Ethernet address 02:fe:3e:fd:61:28
  Linux PACKET socket interface
host-n...</msg>
<status status="PASS" endtime="20180516 15:17:51.972" starttime="20180516 15:17:45.966"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:17:51.974" level="INFO">              Name                Idx   Link  Hardware
host-node_1_noeth_1                2     up   host-node_1_noeth_1
  Ethernet address 02:fe:3e:fd:61:28
  Linux PACKET socket interface
host-node_2_noeth_2                3     up   host-node_2_noeth_2
  Ethernet address 02:fe:42:98:22:08
  Linux PACKET socket interface
local0                             0    down  local0
  local
loop0                              1     up   loop0
  Ethernet address 02:00:00:aa:bb:00
vpp# </msg>
<status status="PASS" endtime="20180516 15:17:51.974" starttime="20180516 15:17:51.973"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:17:51.976" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_term.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_term.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:17:51.977" starttime="20180516 15:17:51.975"></status>
</kw>
<status status="PASS" endtime="20180516 15:17:51.977" starttime="20180516 15:17:45.958"></status>
</kw>
<kw name="Write To Machine" library="ssh">
<doc>*Write Machine ${machine} ${command}*</doc>
<arguments>
<arg>agent_vpp_1_term</arg>
<arg>show br</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${delay}</arg>
</arguments>
<msg timestamp="20180516 15:17:51.994" level="INFO">agent_vpp_1_term</msg>
<msg timestamp="20180516 15:17:51.994" level="INFO">show br</msg>
<msg timestamp="20180516 15:17:51.994" level="INFO">3s</msg>
<status status="PASS" endtime="20180516 15:17:51.994" starttime="20180516 15:17:51.994"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:17:51.995" starttime="20180516 15:17:51.995"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:17:51.996" level="INFO">${currdate} = 2018-05-16 15:17:51.995</msg>
<status status="PASS" endtime="20180516 15:17:51.996" starttime="20180516 15:17:51.995"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20180516 15:17:51.998" level="INFO">show br</msg>
<status status="PASS" endtime="20180516 15:17:51.999" starttime="20180516 15:17:51.996"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>delay=${delay}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20180516 15:17:55.003" level="INFO">BD-ID   Index   BSN  Age(min)  Learning  U-Forwrd  UU-Flood  Flooding  ARP-Term  BVI-Intf
    1       1      0     off        on        on        on        on       off       N/A   
    2       2      0     off       off        on       off       off       off       N/A   
vpp#</msg>
<msg timestamp="20180516 15:17:55.003" level="INFO">${out} =   BD-ID   Index   BSN  Age(min)  Learning  U-Forwrd  UU-Flood  Flooding  ARP-Term  BVI-Intf
    1       1      0     off        on        on        on        on       off       N/A   
    2       2 ...</msg>
<status status="PASS" endtime="20180516 15:17:55.003" starttime="20180516 15:17:52.000"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:17:55.007" level="INFO">  BD-ID   Index   BSN  Age(min)  Learning  U-Forwrd  UU-Flood  Flooding  ARP-Term  BVI-Intf
    1       1      0     off        on        on        on        on       off       N/A   
    2       2      0     off       off        on       off       off       off       N/A   
vpp# </msg>
<status status="PASS" endtime="20180516 15:17:55.008" starttime="20180516 15:17:55.004"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:17:55.010" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_term.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_term.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:17:55.010" starttime="20180516 15:17:55.008"></status>
</kw>
<status status="PASS" endtime="20180516 15:17:55.010" starttime="20180516 15:17:51.993"></status>
</kw>
<kw name="Write To Machine" library="ssh">
<doc>*Write Machine ${machine} ${command}*</doc>
<arguments>
<arg>agent_vpp_1_term</arg>
<arg>show br 1 detail</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${delay}</arg>
</arguments>
<msg timestamp="20180516 15:17:55.035" level="INFO">agent_vpp_1_term</msg>
<msg timestamp="20180516 15:17:55.035" level="INFO">show br 1 detail</msg>
<msg timestamp="20180516 15:17:55.035" level="INFO">3s</msg>
<status status="PASS" endtime="20180516 15:17:55.035" starttime="20180516 15:17:55.035"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:17:55.036" starttime="20180516 15:17:55.036"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:17:55.036" level="INFO">${currdate} = 2018-05-16 15:17:55.036</msg>
<status status="PASS" endtime="20180516 15:17:55.037" starttime="20180516 15:17:55.036"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20180516 15:17:55.050" level="INFO">show br 1 detail</msg>
<status status="PASS" endtime="20180516 15:17:55.050" starttime="20180516 15:17:55.037"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>delay=${delay}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20180516 15:17:58.053" level="INFO">BD-ID   Index   BSN  Age(min)  Learning  U-Forwrd  UU-Flood  Flooding  ARP-Term  BVI-Intf
    1       1      0     off        on        on        on        on       off       N/A   

           Interface           If-idx ISN  SHG  BVI  TxFlood        VLAN-Tag-Rewrite       
      host-node_1_noeth_1        2     1    0    -      *                 none             
      host-node_2_noeth_2        3     1    0    -      *                 none             

  BD-Tag: BD_INTERNAL_EW_agent_vpp_1
vpp#</msg>
<msg timestamp="20180516 15:17:58.054" level="INFO">${out} =   BD-ID   Index   BSN  Age(min)  Learning  U-Forwrd  UU-Flood  Flooding  ARP-Term  BVI-Intf
    1       1      0     off        on        on        on        on       off       N/A   

           I...</msg>
<status status="PASS" endtime="20180516 15:17:58.054" starttime="20180516 15:17:55.050"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:17:58.054" level="INFO">  BD-ID   Index   BSN  Age(min)  Learning  U-Forwrd  UU-Flood  Flooding  ARP-Term  BVI-Intf
    1       1      0     off        on        on        on        on       off       N/A   

           Interface           If-idx ISN  SHG  BVI  TxFlood        VLAN-Tag-Rewrite       
      host-node_1_noeth_1        2     1    0    -      *                 none             
      host-node_2_noeth_2        3     1    0    -      *                 none             

  BD-Tag: BD_INTERNAL_EW_agent_vpp_1
vpp# </msg>
<status status="PASS" endtime="20180516 15:17:58.054" starttime="20180516 15:17:58.054"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:17:58.055" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_term.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_term.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:17:58.055" starttime="20180516 15:17:58.055"></status>
</kw>
<status status="PASS" endtime="20180516 15:17:58.055" starttime="20180516 15:17:55.034"></status>
</kw>
<kw name="Write To Machine" library="ssh">
<doc>*Write Machine ${machine} ${command}*</doc>
<arguments>
<arg>agent_vpp_1_term</arg>
<arg>show vxlan tunnel</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${delay}</arg>
</arguments>
<msg timestamp="20180516 15:17:58.069" level="INFO">agent_vpp_1_term</msg>
<msg timestamp="20180516 15:17:58.069" level="INFO">show vxlan tunnel</msg>
<msg timestamp="20180516 15:17:58.069" level="INFO">3s</msg>
<status status="PASS" endtime="20180516 15:17:58.074" starttime="20180516 15:17:58.068"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:17:58.075" starttime="20180516 15:17:58.075"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:17:58.076" level="INFO">${currdate} = 2018-05-16 15:17:58.075</msg>
<status status="PASS" endtime="20180516 15:17:58.076" starttime="20180516 15:17:58.075"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20180516 15:17:58.083" level="INFO">show vxlan tunnel</msg>
<status status="PASS" endtime="20180516 15:17:58.083" starttime="20180516 15:17:58.076"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>delay=${delay}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20180516 15:18:01.086" level="INFO">No vxlan tunnels configured...
vpp#</msg>
<msg timestamp="20180516 15:18:01.086" level="INFO">${out} = No vxlan tunnels configured...
vpp# </msg>
<status status="PASS" endtime="20180516 15:18:01.086" starttime="20180516 15:17:58.083"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:18:01.087" level="INFO">No vxlan tunnels configured...
vpp# </msg>
<status status="PASS" endtime="20180516 15:18:01.087" starttime="20180516 15:18:01.087"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:18:01.088" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_term.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_term.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:18:01.088" starttime="20180516 15:18:01.087"></status>
</kw>
<status status="PASS" endtime="20180516 15:18:01.088" starttime="20180516 15:17:58.066"></status>
</kw>
<kw name="Write To Machine" library="ssh">
<doc>*Write Machine ${machine} ${command}*</doc>
<arguments>
<arg>agent_vpp_1_term</arg>
<arg>show err</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${delay}</arg>
</arguments>
<msg timestamp="20180516 15:18:01.107" level="INFO">agent_vpp_1_term</msg>
<msg timestamp="20180516 15:18:01.107" level="INFO">show err</msg>
<msg timestamp="20180516 15:18:01.107" level="INFO">3s</msg>
<status status="PASS" endtime="20180516 15:18:01.107" starttime="20180516 15:18:01.107"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:01.108" starttime="20180516 15:18:01.108"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:18:01.108" level="INFO">${currdate} = 2018-05-16 15:18:01.108</msg>
<status status="PASS" endtime="20180516 15:18:01.108" starttime="20180516 15:18:01.108"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20180516 15:18:01.111" level="INFO">show err</msg>
<status status="PASS" endtime="20180516 15:18:01.112" starttime="20180516 15:18:01.108"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>delay=${delay}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20180516 15:18:04.115" level="INFO">Count                    Node                  Reason
        34                l2-output               L2 output packets
        34                l2-learn                L2 learn packets
         4                l2-learn                L2 learn misses
        34                l2-input                L2 input packets
        34                l2-flood                L2 flood packets
vpp#</msg>
<msg timestamp="20180516 15:18:04.116" level="INFO">${out} =    Count                    Node                  Reason
        34                l2-output               L2 output packets
        34                l2-learn                L2 learn packets
     ...</msg>
<status status="PASS" endtime="20180516 15:18:04.116" starttime="20180516 15:18:01.114"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:18:04.117" level="INFO">   Count                    Node                  Reason
        34                l2-output               L2 output packets
        34                l2-learn                L2 learn packets
         4                l2-learn                L2 learn misses
        34                l2-input                L2 input packets
        34                l2-flood                L2 flood packets
vpp# </msg>
<status status="PASS" endtime="20180516 15:18:04.117" starttime="20180516 15:18:04.116"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:18:04.119" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_term.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_term.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:18:04.119" starttime="20180516 15:18:04.118"></status>
</kw>
<status status="PASS" endtime="20180516 15:18:04.120" starttime="20180516 15:18:01.106"></status>
</kw>
<kw name="vpp_term: Show L2fib" library="vpp_term">
<doc>Show verbose l2fib output</doc>
<arguments>
<arg>agent_vpp_1</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
</arguments>
<msg timestamp="20180516 15:18:04.124" level="INFO">agent_vpp_1</msg>
<status status="PASS" endtime="20180516 15:18:04.124" starttime="20180516 15:18:04.123"></status>
</kw>
<kw name="vpp_term: Issue Command" library="vpp_term">
<arguments>
<arg>${node}</arg>
<arg>show l2fib verbose</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${command}</arg>
<arg>${delay}</arg>
<arg>${node}_term</arg>
<arg>${${node}_VPP_TERM_PROMPT}</arg>
</arguments>
<msg timestamp="20180516 15:18:04.126" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:18:04.126" level="INFO">show l2fib verbose</msg>
<msg timestamp="20180516 15:18:04.126" level="INFO">3s</msg>
<msg timestamp="20180516 15:18:04.126" level="INFO">agent_vpp_1_term</msg>
<msg timestamp="20180516 15:18:04.127" level="INFO">vpp#</msg>
<status status="PASS" endtime="20180516 15:18:04.127" starttime="20180516 15:18:04.125"></status>
</kw>
<kw name="Write To Machine Until String" library="ssh">
<doc>*Write Machine ${machine} show l2fib verbose*</doc>
<arguments>
<arg>${node}_term</arg>
<arg>${command}</arg>
<arg>${${node}_VPP_TERM_PROMPT}</arg>
<arg>delay=${delay}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${string}</arg>
<arg>${delay}</arg>
</arguments>
<msg timestamp="20180516 15:18:04.135" level="INFO">agent_vpp_1_term</msg>
<msg timestamp="20180516 15:18:04.136" level="INFO">show l2fib verbose</msg>
<msg timestamp="20180516 15:18:04.136" level="INFO">vpp#</msg>
<msg timestamp="20180516 15:18:04.136" level="INFO">3s</msg>
<status status="PASS" endtime="20180516 15:18:04.136" starttime="20180516 15:18:04.135"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:04.137" starttime="20180516 15:18:04.136"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:18:04.137" level="INFO">${currdate} = 2018-05-16 15:18:04.137</msg>
<status status="PASS" endtime="20180516 15:18:04.137" starttime="20180516 15:18:04.137"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20180516 15:18:04.142" level="INFO">show l2fib verbose</msg>
<status status="PASS" endtime="20180516 15:18:04.143" starttime="20180516 15:18:04.138"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>${string}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20180516 15:18:04.152" level="INFO">Mac-Address     BD-Idx If-Idx BSN-ISN Age(min) static filter bvi         Interface-Name        
 b2:f1:cb:3e:97:0b    1      2      0/1      -       -      -     -        host-node_1_noeth_1     
 22:c4:57:2e:db:6b    1      3      0/1      -       -      -     -        host-node_2_noeth_2     
 02:00:00:00:00:01    1      2      0/1      -       -      -     -        host-node_1_noeth_1     
 02:00:00:00:00:02    1      3      0/1      -       -      -     -        host-node_2_noeth_2     
L2FIB total/learned entries: 4/4  Last scan time: 0.0000e0sec  Learn limit: 4194304 
vpp#</msg>
<msg timestamp="20180516 15:18:04.152" level="INFO">${out} =     Mac-Address     BD-Idx If-Idx BSN-ISN Age(min) static filter bvi         Interface-Name        
 b2:f1:cb:3e:97:0b    1      2      0/1      -       -      -     -        host-node_1_noeth_1     ...</msg>
<status status="PASS" endtime="20180516 15:18:04.152" starttime="20180516 15:18:04.145"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:18:04.156" level="INFO">    Mac-Address     BD-Idx If-Idx BSN-ISN Age(min) static filter bvi         Interface-Name        
 b2:f1:cb:3e:97:0b    1      2      0/1      -       -      -     -        host-node_1_noeth_1     
 22:c4:57:2e:db:6b    1      3      0/1      -       -      -     -        host-node_2_noeth_2     
 02:00:00:00:00:01    1      2      0/1      -       -      -     -        host-node_1_noeth_1     
 02:00:00:00:00:02    1      3      0/1      -       -      -     -        host-node_2_noeth_2     
L2FIB total/learned entries: 4/4  Last scan time: 0.0000e0sec  Learn limit: 4194304 
vpp#</msg>
<status status="PASS" endtime="20180516 15:18:04.156" starttime="20180516 15:18:04.152"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>delay=${delay}</arg>
</arguments>
<assign>
<var>${out2}</var>
</assign>
<msg timestamp="20180516 15:18:07.159" level="INFO">${out2} =  </msg>
<status status="PASS" endtime="20180516 15:18:07.160" starttime="20180516 15:18:04.156"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out2}</arg>
</arguments>
<msg timestamp="20180516 15:18:07.160" level="INFO"> </msg>
<status status="PASS" endtime="20180516 15:18:07.160" starttime="20180516 15:18:07.160"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${out2}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:18:07.161" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_term.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_term.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:18:07.161" starttime="20180516 15:18:07.160"></status>
</kw>
<msg timestamp="20180516 15:18:07.161" level="INFO">${out} =     Mac-Address     BD-Idx If-Idx BSN-ISN Age(min) static filter bvi         Interface-Name        
 b2:f1:cb:3e:97:0b    1      2      0/1      -       -      -     -        host-node_1_noeth_1     ...</msg>
<status status="PASS" endtime="20180516 15:18:07.161" starttime="20180516 15:18:04.134"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:18:07.164" level="INFO">    Mac-Address     BD-Idx If-Idx BSN-ISN Age(min) static filter bvi         Interface-Name        
 b2:f1:cb:3e:97:0b    1      2      0/1      -       -      -     -        host-node_1_noeth_1     
 22:c4:57:2e:db:6b    1      3      0/1      -       -      -     -        host-node_2_noeth_2     
 02:00:00:00:00:01    1      2      0/1      -       -      -     -        host-node_1_noeth_1     
 02:00:00:00:00:02    1      3      0/1      -       -      -     -        host-node_2_noeth_2     
L2FIB total/learned entries: 4/4  Last scan time: 0.0000e0sec  Learn limit: 4194304 
vpp# </msg>
<status status="PASS" endtime="20180516 15:18:07.164" starttime="20180516 15:18:07.164"></status>
</kw>
<msg timestamp="20180516 15:18:07.165" level="INFO">${out} =     Mac-Address     BD-Idx If-Idx BSN-ISN Age(min) static filter bvi         Interface-Name        
 b2:f1:cb:3e:97:0b    1      2      0/1      -       -      -     -        host-node_1_noeth_1     ...</msg>
<status status="PASS" endtime="20180516 15:18:07.165" starttime="20180516 15:18:04.124"></status>
</kw>
<status status="PASS" endtime="20180516 15:18:07.165" starttime="20180516 15:18:04.120"></status>
</kw>
<kw name="vpp_term: Show IP Fib Table" library="vpp_term">
<doc>Show IP fib output for VRF table defined in input</doc>
<arguments>
<arg>agent_vpp_1</arg>
<arg>0</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${id}</arg>
</arguments>
<msg timestamp="20180516 15:18:07.166" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:18:07.166" level="INFO">0</msg>
<status status="PASS" endtime="20180516 15:18:07.166" starttime="20180516 15:18:07.165"></status>
</kw>
<kw name="vpp_term: Issue Command" library="vpp_term">
<arguments>
<arg>${node}</arg>
<arg>show ip fib table ${id}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${command}</arg>
<arg>${delay}</arg>
<arg>${node}_term</arg>
<arg>${${node}_VPP_TERM_PROMPT}</arg>
</arguments>
<msg timestamp="20180516 15:18:07.167" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:18:07.167" level="INFO">show ip fib table 0</msg>
<msg timestamp="20180516 15:18:07.167" level="INFO">3s</msg>
<msg timestamp="20180516 15:18:07.167" level="INFO">agent_vpp_1_term</msg>
<msg timestamp="20180516 15:18:07.167" level="INFO">vpp#</msg>
<status status="PASS" endtime="20180516 15:18:07.167" starttime="20180516 15:18:07.166"></status>
</kw>
<kw name="Write To Machine Until String" library="ssh">
<doc>*Write Machine ${machine} show ip fib table 0*</doc>
<arguments>
<arg>${node}_term</arg>
<arg>${command}</arg>
<arg>${${node}_VPP_TERM_PROMPT}</arg>
<arg>delay=${delay}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${string}</arg>
<arg>${delay}</arg>
</arguments>
<msg timestamp="20180516 15:18:07.176" level="INFO">agent_vpp_1_term</msg>
<msg timestamp="20180516 15:18:07.176" level="INFO">show ip fib table 0</msg>
<msg timestamp="20180516 15:18:07.176" level="INFO">vpp#</msg>
<msg timestamp="20180516 15:18:07.176" level="INFO">3s</msg>
<status status="PASS" endtime="20180516 15:18:07.176" starttime="20180516 15:18:07.176"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:07.177" starttime="20180516 15:18:07.176"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:18:07.177" level="INFO">${currdate} = 2018-05-16 15:18:07.177</msg>
<status status="PASS" endtime="20180516 15:18:07.177" starttime="20180516 15:18:07.177"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20180516 15:18:07.194" level="INFO">show ip fib table 0</msg>
<status status="PASS" endtime="20180516 15:18:07.194" starttime="20180516 15:18:07.177"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>${string}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20180516 15:18:07.208" level="INFO">ipv4-VRF:0, fib_index:0, flow hash:[src dst sport dport proto ] locks:[src:plugin-hi:2, src:default-route:1, ]
0.0.0.0/0
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:1 buckets:1 uRPF:0 to:[0:0]]
    [0] [@0]: dpo-drop ip4
0.0.0.0/32
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:2 buckets:1 uRPF:1 to:[0:0]]
    [0] [@0]: dpo-drop ip4
6.0.0.100/32
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:9 buckets:1 uRPF:8 to:[0:0]]
    [0] [@2]: dpo-receive: 6.0.0.100 on loop0
224.0.0.0/4
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:4 buckets:1 uRPF:3 to:[0:0]]
    [0] [@0]: dpo-drop ip4
240.0.0.0/4
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:3 buckets:1 uRPF:2 to:[0:0]]
    [0] [@0]: dpo-drop ip4
255.255.255.255/32
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:5 buckets:1 uRPF:4 to:[0:0]]
    [0] [@0]: dpo-drop ip4
vpp#</msg>
<msg timestamp="20180516 15:18:07.208" level="INFO">${out} = ipv4-VRF:0, fib_index:0, flow hash:[src dst sport dport proto ] locks:[src:plugin-hi:2, src:default-route:1, ]
0.0.0.0/0
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:1 buckets:1 u...</msg>
<status status="PASS" endtime="20180516 15:18:07.208" starttime="20180516 15:18:07.194"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:18:07.212" level="INFO">ipv4-VRF:0, fib_index:0, flow hash:[src dst sport dport proto ] locks:[src:plugin-hi:2, src:default-route:1, ]
0.0.0.0/0
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:1 buckets:1 uRPF:0 to:[0:0]]
    [0] [@0]: dpo-drop ip4
0.0.0.0/32
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:2 buckets:1 uRPF:1 to:[0:0]]
    [0] [@0]: dpo-drop ip4
6.0.0.100/32
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:9 buckets:1 uRPF:8 to:[0:0]]
    [0] [@2]: dpo-receive: 6.0.0.100 on loop0
224.0.0.0/4
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:4 buckets:1 uRPF:3 to:[0:0]]
    [0] [@0]: dpo-drop ip4
240.0.0.0/4
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:3 buckets:1 uRPF:2 to:[0:0]]
    [0] [@0]: dpo-drop ip4
255.255.255.255/32
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:5 buckets:1 uRPF:4 to:[0:0]]
    [0] [@0]: dpo-drop ip4
vpp#</msg>
<status status="PASS" endtime="20180516 15:18:07.212" starttime="20180516 15:18:07.211"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>delay=${delay}</arg>
</arguments>
<assign>
<var>${out2}</var>
</assign>
<msg timestamp="20180516 15:18:10.219" level="INFO">${out2} =  </msg>
<status status="PASS" endtime="20180516 15:18:10.219" starttime="20180516 15:18:07.212"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out2}</arg>
</arguments>
<msg timestamp="20180516 15:18:10.219" level="INFO"> </msg>
<status status="PASS" endtime="20180516 15:18:10.219" starttime="20180516 15:18:10.219"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${out2}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:18:10.230" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_term.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_term.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:18:10.230" starttime="20180516 15:18:10.220"></status>
</kw>
<msg timestamp="20180516 15:18:10.230" level="INFO">${out} = ipv4-VRF:0, fib_index:0, flow hash:[src dst sport dport proto ] locks:[src:plugin-hi:2, src:default-route:1, ]
0.0.0.0/0
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:1 buckets:1 u...</msg>
<status status="PASS" endtime="20180516 15:18:10.230" starttime="20180516 15:18:07.175"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:18:10.231" level="INFO">ipv4-VRF:0, fib_index:0, flow hash:[src dst sport dport proto ] locks:[src:plugin-hi:2, src:default-route:1, ]
0.0.0.0/0
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:1 buckets:1 uRPF:0 to:[0:0]]
    [0] [@0]: dpo-drop ip4
0.0.0.0/32
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:2 buckets:1 uRPF:1 to:[0:0]]
    [0] [@0]: dpo-drop ip4
6.0.0.100/32
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:9 buckets:1 uRPF:8 to:[0:0]]
    [0] [@2]: dpo-receive: 6.0.0.100 on loop0
224.0.0.0/4
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:4 buckets:1 uRPF:3 to:[0:0]]
    [0] [@0]: dpo-drop ip4
240.0.0.0/4
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:3 buckets:1 uRPF:2 to:[0:0]]
    [0] [@0]: dpo-drop ip4
255.255.255.255/32
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:5 buckets:1 uRPF:4 to:[0:0]]
    [0] [@0]: dpo-drop ip4
vpp# </msg>
<status status="PASS" endtime="20180516 15:18:10.231" starttime="20180516 15:18:10.231"></status>
</kw>
<msg timestamp="20180516 15:18:10.231" level="INFO">${out} = ipv4-VRF:0, fib_index:0, flow hash:[src dst sport dport proto ] locks:[src:plugin-hi:2, src:default-route:1, ]
0.0.0.0/0
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:1 buckets:1 u...</msg>
<status status="PASS" endtime="20180516 15:18:10.231" starttime="20180516 15:18:07.166"></status>
</kw>
<status status="PASS" endtime="20180516 15:18:10.231" starttime="20180516 15:18:07.165"></status>
</kw>
<kw name="vpp_term: Show IP Fib" library="vpp_term">
<doc>Show IP fib output</doc>
<arguments>
<arg>agent_vpp_1</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${ip}</arg>
</arguments>
<msg timestamp="20180516 15:18:10.233" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:18:10.234" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:18:10.234" starttime="20180516 15:18:10.232"></status>
</kw>
<kw name="vpp_term: Issue Command" library="vpp_term">
<arguments>
<arg>${node}</arg>
<arg>show ip fib ${ip}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${command}</arg>
<arg>${delay}</arg>
<arg>${node}_term</arg>
<arg>${${node}_VPP_TERM_PROMPT}</arg>
</arguments>
<msg timestamp="20180516 15:18:10.235" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:18:10.235" level="INFO">show ip fib </msg>
<msg timestamp="20180516 15:18:10.235" level="INFO">3s</msg>
<msg timestamp="20180516 15:18:10.235" level="INFO">agent_vpp_1_term</msg>
<msg timestamp="20180516 15:18:10.235" level="INFO">vpp#</msg>
<status status="PASS" endtime="20180516 15:18:10.235" starttime="20180516 15:18:10.234"></status>
</kw>
<kw name="Write To Machine Until String" library="ssh">
<doc>*Write Machine ${machine} show ip fib *</doc>
<arguments>
<arg>${node}_term</arg>
<arg>${command}</arg>
<arg>${${node}_VPP_TERM_PROMPT}</arg>
<arg>delay=${delay}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${string}</arg>
<arg>${delay}</arg>
</arguments>
<msg timestamp="20180516 15:18:10.255" level="INFO">agent_vpp_1_term</msg>
<msg timestamp="20180516 15:18:10.255" level="INFO">show ip fib </msg>
<msg timestamp="20180516 15:18:10.255" level="INFO">vpp#</msg>
<msg timestamp="20180516 15:18:10.255" level="INFO">3s</msg>
<status status="PASS" endtime="20180516 15:18:10.255" starttime="20180516 15:18:10.255"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:10.256" starttime="20180516 15:18:10.256"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:18:10.260" level="INFO">${currdate} = 2018-05-16 15:18:10.260</msg>
<status status="PASS" endtime="20180516 15:18:10.260" starttime="20180516 15:18:10.256"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20180516 15:18:10.277" level="INFO">show ip fib</msg>
<status status="PASS" endtime="20180516 15:18:10.277" starttime="20180516 15:18:10.260"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>${string}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20180516 15:18:10.310" level="INFO">ipv4-VRF:0, fib_index:0, flow hash:[src dst sport dport proto ] locks:[src:plugin-hi:2, src:default-route:1, ]
0.0.0.0/0
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:1 buckets:1 uRPF:0 to:[0:0]]
    [0] [@0]: dpo-drop ip4
0.0.0.0/32
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:2 buckets:1 uRPF:1 to:[0:0]]
    [0] [@0]: dpo-drop ip4
6.0.0.100/32
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:9 buckets:1 uRPF:8 to:[0:0]]
    [0] [@2]: dpo-receive: 6.0.0.100 on loop0
224.0.0.0/4
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:4 buckets:1 uRPF:3 to:[0:0]]
    [0] [@0]: dpo-drop ip4
240.0.0.0/4
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:3 buckets:1 uRPF:2 to:[0:0]]
    [0] [@0]: dpo-drop ip4
255.255.255.255/32
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:5 buckets:1 uRPF:4 to:[0:0]]
    [0] [@0]: dpo-drop ip4
vpp#</msg>
<msg timestamp="20180516 15:18:10.310" level="INFO">${out} = ipv4-VRF:0, fib_index:0, flow hash:[src dst sport dport proto ] locks:[src:plugin-hi:2, src:default-route:1, ]
0.0.0.0/0
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:1 buckets:1 u...</msg>
<status status="PASS" endtime="20180516 15:18:10.310" starttime="20180516 15:18:10.277"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:18:10.311" level="INFO">ipv4-VRF:0, fib_index:0, flow hash:[src dst sport dport proto ] locks:[src:plugin-hi:2, src:default-route:1, ]
0.0.0.0/0
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:1 buckets:1 uRPF:0 to:[0:0]]
    [0] [@0]: dpo-drop ip4
0.0.0.0/32
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:2 buckets:1 uRPF:1 to:[0:0]]
    [0] [@0]: dpo-drop ip4
6.0.0.100/32
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:9 buckets:1 uRPF:8 to:[0:0]]
    [0] [@2]: dpo-receive: 6.0.0.100 on loop0
224.0.0.0/4
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:4 buckets:1 uRPF:3 to:[0:0]]
    [0] [@0]: dpo-drop ip4
240.0.0.0/4
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:3 buckets:1 uRPF:2 to:[0:0]]
    [0] [@0]: dpo-drop ip4
255.255.255.255/32
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:5 buckets:1 uRPF:4 to:[0:0]]
    [0] [@0]: dpo-drop ip4
vpp#</msg>
<status status="PASS" endtime="20180516 15:18:10.311" starttime="20180516 15:18:10.311"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>delay=${delay}</arg>
</arguments>
<assign>
<var>${out2}</var>
</assign>
<msg timestamp="20180516 15:18:13.315" level="INFO">${out2} =  </msg>
<status status="PASS" endtime="20180516 15:18:13.315" starttime="20180516 15:18:10.311"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out2}</arg>
</arguments>
<msg timestamp="20180516 15:18:13.315" level="INFO"> </msg>
<status status="PASS" endtime="20180516 15:18:13.316" starttime="20180516 15:18:13.315"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${out2}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:18:13.317" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_term.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_term.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:18:13.317" starttime="20180516 15:18:13.316"></status>
</kw>
<msg timestamp="20180516 15:18:13.318" level="INFO">${out} = ipv4-VRF:0, fib_index:0, flow hash:[src dst sport dport proto ] locks:[src:plugin-hi:2, src:default-route:1, ]
0.0.0.0/0
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:1 buckets:1 u...</msg>
<status status="PASS" endtime="20180516 15:18:13.318" starttime="20180516 15:18:10.254"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:18:13.318" level="INFO">ipv4-VRF:0, fib_index:0, flow hash:[src dst sport dport proto ] locks:[src:plugin-hi:2, src:default-route:1, ]
0.0.0.0/0
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:1 buckets:1 uRPF:0 to:[0:0]]
    [0] [@0]: dpo-drop ip4
0.0.0.0/32
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:2 buckets:1 uRPF:1 to:[0:0]]
    [0] [@0]: dpo-drop ip4
6.0.0.100/32
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:9 buckets:1 uRPF:8 to:[0:0]]
    [0] [@2]: dpo-receive: 6.0.0.100 on loop0
224.0.0.0/4
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:4 buckets:1 uRPF:3 to:[0:0]]
    [0] [@0]: dpo-drop ip4
240.0.0.0/4
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:3 buckets:1 uRPF:2 to:[0:0]]
    [0] [@0]: dpo-drop ip4
255.255.255.255/32
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:5 buckets:1 uRPF:4 to:[0:0]]
    [0] [@0]: dpo-drop ip4
vpp# </msg>
<status status="PASS" endtime="20180516 15:18:13.318" starttime="20180516 15:18:13.318"></status>
</kw>
<msg timestamp="20180516 15:18:13.319" level="INFO">${out} = ipv4-VRF:0, fib_index:0, flow hash:[src dst sport dport proto ] locks:[src:plugin-hi:2, src:default-route:1, ]
0.0.0.0/0
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:1 buckets:1 u...</msg>
<status status="PASS" endtime="20180516 15:18:13.319" starttime="20180516 15:18:10.234"></status>
</kw>
<status status="PASS" endtime="20180516 15:18:13.319" starttime="20180516 15:18:10.231"></status>
</kw>
<kw name="vat_term: Interfaces Dump" library="vat_term">
<doc>Executing command sw_interface_dump</doc>
<arguments>
<arg>agent_vpp_1</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
</arguments>
<msg timestamp="20180516 15:18:13.320" level="INFO">agent_vpp_1</msg>
<status status="PASS" endtime="20180516 15:18:13.320" starttime="20180516 15:18:13.320"></status>
</kw>
<kw name="vat_term: Issue Command" library="vat_term">
<arguments>
<arg>${node}</arg>
<arg>sw_interface_dump</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${command}</arg>
<arg>${delay}</arg>
<arg>${node}_vat</arg>
<arg>${${node}_VPP_VAT_PROMPT}</arg>
</arguments>
<msg timestamp="20180516 15:18:13.321" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:18:13.321" level="INFO">sw_interface_dump</msg>
<msg timestamp="20180516 15:18:13.321" level="INFO">3s</msg>
<msg timestamp="20180516 15:18:13.321" level="INFO">agent_vpp_1_vat</msg>
<msg timestamp="20180516 15:18:13.322" level="INFO">vat#</msg>
<status status="PASS" endtime="20180516 15:18:13.322" starttime="20180516 15:18:13.321"></status>
</kw>
<kw name="Write To Machine Until String" library="ssh">
<doc>*Write Machine ${machine} sw_interface_dump*</doc>
<arguments>
<arg>${node}_vat</arg>
<arg>${command}</arg>
<arg>${${node}_VPP_VAT_PROMPT}</arg>
<arg>delay=${delay}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${string}</arg>
<arg>${delay}</arg>
</arguments>
<msg timestamp="20180516 15:18:13.329" level="INFO">agent_vpp_1_vat</msg>
<msg timestamp="20180516 15:18:13.329" level="INFO">sw_interface_dump</msg>
<msg timestamp="20180516 15:18:13.329" level="INFO">vat#</msg>
<msg timestamp="20180516 15:18:13.329" level="INFO">3s</msg>
<status status="PASS" endtime="20180516 15:18:13.329" starttime="20180516 15:18:13.329"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:13.330" starttime="20180516 15:18:13.329"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:18:13.330" level="INFO">${currdate} = 2018-05-16 15:18:13.330</msg>
<status status="PASS" endtime="20180516 15:18:13.330" starttime="20180516 15:18:13.330"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20180516 15:18:13.332" level="INFO">sw_interface_dump</msg>
<status status="PASS" endtime="20180516 15:18:13.332" starttime="20180516 15:18:13.330"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>${string}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20180516 15:18:13.358" level="INFO">[ 
  {
    "sw_if_index": 0,
    "sup_sw_if_index": 0,
    "l2_address_length": 0,
    "l2_address": [0, 0, 0, 0, 0, 0, 0, 0],
    "interface_name": "local0",
    "admin_up_down": 0,
    "link_up_down": 0,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 0,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 1,
    "sup_sw_if_index": 1,
    "l2_address_length": 6,
    "l2_address": [2, 0, 0, 170, 187, 0, 0, 0],
    "interface_name": "loop0",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 2,
    "sup_sw_if_index": 2,
    "l2_address_length": 6,
    "l2_address": [2, 254, 62, 253, 97, 40, 0, 0],
    "interface_name": "host-node_1_noeth_1",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 3,
    "sup_sw_if_index": 3,
    "l2_address_length": 6,
    "l2_address": [2, 254, 66, 152, 34, 8, 0, 0],
    "interface_name": "host-node_2_noeth_2",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  }
]
vat#</msg>
<msg timestamp="20180516 15:18:13.359" level="INFO">${out} = 
[ 
  {
    "sw_if_index": 0,
    "sup_sw_if_index": 0,
    "l2_address_length": 0,
    "l2_address": [0, 0, 0, 0, 0, 0, 0, 0],
    "interface_name": "local0",
    "admin_up_down": 0,
    "li...</msg>
<status status="PASS" endtime="20180516 15:18:13.359" starttime="20180516 15:18:13.332"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:18:13.360" level="INFO">
[ 
  {
    "sw_if_index": 0,
    "sup_sw_if_index": 0,
    "l2_address_length": 0,
    "l2_address": [0, 0, 0, 0, 0, 0, 0, 0],
    "interface_name": "local0",
    "admin_up_down": 0,
    "link_up_down": 0,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 0,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 1,
    "sup_sw_if_index": 1,
    "l2_address_length": 6,
    "l2_address": [2, 0, 0, 170, 187, 0, 0, 0],
    "interface_name": "loop0",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 2,
    "sup_sw_if_index": 2,
    "l2_address_length": 6,
    "l2_address": [2, 254, 62, 253, 97, 40, 0, 0],
    "interface_name": "host-node_1_noeth_1",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 3,
    "sup_sw_if_index": 3,
    "l2_address_length": 6,
    "l2_address": [2, 254, 66, 152, 34, 8, 0, 0],
    "interface_name": "host-node_2_noeth_2",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  }
]
vat#</msg>
<status status="PASS" endtime="20180516 15:18:13.360" starttime="20180516 15:18:13.359"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>delay=${delay}</arg>
</arguments>
<assign>
<var>${out2}</var>
</assign>
<msg timestamp="20180516 15:18:16.364" level="INFO">${out2} =  </msg>
<status status="PASS" endtime="20180516 15:18:16.364" starttime="20180516 15:18:13.360"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out2}</arg>
</arguments>
<msg timestamp="20180516 15:18:16.365" level="INFO"> </msg>
<status status="PASS" endtime="20180516 15:18:16.365" starttime="20180516 15:18:16.365"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${out2}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:18:16.366" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_vat.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_vat.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:18:16.366" starttime="20180516 15:18:16.366"></status>
</kw>
<msg timestamp="20180516 15:18:16.367" level="INFO">${out} = 
[ 
  {
    "sw_if_index": 0,
    "sup_sw_if_index": 0,
    "l2_address_length": 0,
    "l2_address": [0, 0, 0, 0, 0, 0, 0, 0],
    "interface_name": "local0",
    "admin_up_down": 0,
    "li...</msg>
<status status="PASS" endtime="20180516 15:18:16.367" starttime="20180516 15:18:13.327"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:18:16.367" level="INFO">
[ 
  {
    "sw_if_index": 0,
    "sup_sw_if_index": 0,
    "l2_address_length": 0,
    "l2_address": [0, 0, 0, 0, 0, 0, 0, 0],
    "interface_name": "local0",
    "admin_up_down": 0,
    "link_up_down": 0,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 0,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 1,
    "sup_sw_if_index": 1,
    "l2_address_length": 6,
    "l2_address": [2, 0, 0, 170, 187, 0, 0, 0],
    "interface_name": "loop0",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 2,
    "sup_sw_if_index": 2,
    "l2_address_length": 6,
    "l2_address": [2, 254, 62, 253, 97, 40, 0, 0],
    "interface_name": "host-node_1_noeth_1",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 3,
    "sup_sw_if_index": 3,
    "l2_address_length": 6,
    "l2_address": [2, 254, 66, 152, 34, 8, 0, 0],
    "interface_name": "host-node_2_noeth_2",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  }
]
vat# </msg>
<status status="PASS" endtime="20180516 15:18:16.367" starttime="20180516 15:18:16.367"></status>
</kw>
<msg timestamp="20180516 15:18:16.367" level="INFO">${out} = 
[ 
  {
    "sw_if_index": 0,
    "sup_sw_if_index": 0,
    "l2_address_length": 0,
    "l2_address": [0, 0, 0, 0, 0, 0, 0, 0],
    "interface_name": "local0",
    "admin_up_down": 0,
    "li...</msg>
<status status="PASS" endtime="20180516 15:18:16.367" starttime="20180516 15:18:13.320"></status>
</kw>
<status status="PASS" endtime="20180516 15:18:16.368" starttime="20180516 15:18:13.319"></status>
</kw>
<kw name="Write To Machine" library="ssh">
<doc>*Write Machine ${machine} ${command}*</doc>
<arguments>
<arg>vpp_agent_ctl</arg>
<arg>vpp-agent-ctl ${AGENT_VPP_ETCD_CONF_PATH} -ps</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${delay}</arg>
</arguments>
<msg timestamp="20180516 15:18:16.394" level="INFO">vpp_agent_ctl</msg>
<msg timestamp="20180516 15:18:16.394" level="INFO">vpp-agent-ctl /opt/vpp-agent/dev/etcd.conf -ps</msg>
<msg timestamp="20180516 15:18:16.394" level="INFO">3s</msg>
<status status="PASS" endtime="20180516 15:18:16.394" starttime="20180516 15:18:16.394"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:16.394" starttime="20180516 15:18:16.394"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:18:16.395" level="INFO">${currdate} = 2018-05-16 15:18:16.395</msg>
<status status="PASS" endtime="20180516 15:18:16.395" starttime="20180516 15:18:16.395"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20180516 15:18:16.425" level="INFO">[K]0;root@2f7d62033432: ~root@2f7d62033432:~# vpp-agent-ctl /opt/vpp-agent/dev/etcd.conf -ps</msg>
<status status="PASS" endtime="20180516 15:18:16.425" starttime="20180516 15:18:16.395"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>delay=${delay}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20180516 15:18:19.428" level="INFO">[36mINFO[0m[0000] Connecting to etcd took 6.917344ms            [36mdurationInNs[0m=6917344 [36mloc[0m="etcdv3/bytes_broker_impl.go(84)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000]  

	Crud operations with .json:
		-put	&lt;etc_key&gt;    &lt;json-file&gt;
		-get	&lt;etc_key&gt;
		-del	&lt;etc_key&gt;
		-dump
		-list

	Prearranged flags (create, delete):
		-acl,	-acld	- Access List
		-bfds,	-bfdsd	- BFD session
		-bfdk,	-bfdkd	- BFD authentication key
		-bfde,	-bfded	- BFD echo function
		-eth,	-ethd	- Physical interface
		-tap,	-tapd	- TAP type interface
		-loop,	-loopd	- Loop type interface
		-memif,	-memifd	- Memif type interface
		-vxlan,	-vxland	- VxLAN type interface
		-afpkt,	-afpktd	- af_packet type interface
		-veth,	-vethd	- Linux VETH interface pair
		-ltap,	-ltapd	- Linux TAP interface
		-stn,	-stnd	- STN rule
		-gnat,	-gnatd	- Global NAT configuration
		-snat,	-snatd	- SNAT configuration
		-dnat,	-dnatd	- DNAT configuration
		-bd,	-bdd	- Bridge doamin
		-fib,	-fibd	- L2 FIB
		-xconn,	-xconnd	- L2 X-Connect
		-route,	-routed	- L3 route
		-arp,	-arpd	- ARP entry
		-prxi,	-prxid	- Proxy ARP interfaces
		-prxr,	-prxrd	- Proxy ARP ranges
		-lrte,	-lrted	- Linux route
		-larp,	-larpd	- Linux ARP entry
		-el4,	-dl4	- L4 features
		-appns,	-appnsd	- Application namespace

	Other:
		-txn,	-txnd	- Transaction
		-errIf		- Interface error state report
		-errBd		- Bridge domain error state report
	 
]0;root@2f7d62033432: ~root@2f7d62033432:~# [K</msg>
<msg timestamp="20180516 15:18:19.429" level="INFO">${out} = [36mINFO[0m[0000] Connecting to etcd took 6.917344ms            [36mdurationInNs[0m=6917344 [36mloc[0m="etcdv3/bytes_broker_impl.go(84)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000]  

	...</msg>
<status status="PASS" endtime="20180516 15:18:19.429" starttime="20180516 15:18:16.426"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:18:19.430" level="INFO">[36mINFO[0m[0000] Connecting to etcd took 6.917344ms            [36mdurationInNs[0m=6917344 [36mloc[0m="etcdv3/bytes_broker_impl.go(84)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000]  

	Crud operations with .json:
		-put	&lt;etc_key&gt;    &lt;json-file&gt;
		-get	&lt;etc_key&gt;
		-del	&lt;etc_key&gt;
		-dump
		-list

	Prearranged flags (create, delete):
		-acl,	-acld	- Access List
		-bfds,	-bfdsd	- BFD session
		-bfdk,	-bfdkd	- BFD authentication key
		-bfde,	-bfded	- BFD echo function
		-eth,	-ethd	- Physical interface
		-tap,	-tapd	- TAP type interface
		-loop,	-loopd	- Loop type interface
		-memif,	-memifd	- Memif type interface
		-vxlan,	-vxland	- VxLAN type interface
		-afpkt,	-afpktd	- af_packet type interface
		-veth,	-vethd	- Linux VETH interface pair
		-ltap,	-ltapd	- Linux TAP interface
		-stn,	-stnd	- STN rule
		-gnat,	-gnatd	- Global NAT configuration
		-snat,	-snatd	- SNAT configuration
		-dnat,	-dnatd	- DNAT configuration
		-bd,	-bdd	- Bridge doamin
		-fib,	-fibd	- L2 FIB
		-xconn,	-xconnd	- L2 X-Connect
		-route,	-routed	- L3 route
		-arp,	-arpd	- ARP entry
		-prxi,	-prxid	- Proxy ARP interfaces
		-prxr,	-prxrd	- Proxy ARP ranges
		-lrte,	-lrted	- Linux route
		-larp,	-larpd	- Linux ARP entry
		-el4,	-dl4	- L4 features
		-appns,	-appnsd	- Application namespace

	Other:
		-txn,	-txnd	- Transaction
		-errIf		- Interface error state report
		-errBd		- Bridge domain error state report
	 
]0;root@2f7d62033432: ~root@2f7d62033432:~# [K</msg>
<status status="PASS" endtime="20180516 15:18:19.430" starttime="20180516 15:18:19.429"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:18:19.432" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_vpp_agent_ctl.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_vpp_agent_ctl.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:18:19.433" starttime="20180516 15:18:19.431"></status>
</kw>
<status status="PASS" endtime="20180516 15:18:19.433" starttime="20180516 15:18:16.393"></status>
</kw>
<kw name="Execute In Container" library="docker">
<arguments>
<arg>agent_vpp_1</arg>
<arg>ip a</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${container}</arg>
<arg>${command}</arg>
</arguments>
<msg timestamp="20180516 15:18:19.436" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:18:19.436" level="INFO">ip a</msg>
<status status="PASS" endtime="20180516 15:18:19.436" starttime="20180516 15:18:19.435"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>docker</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:19.437" starttime="20180516 15:18:19.437"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:18:19.441" level="INFO">${currdate} = 2018-05-16 15:18:19.438</msg>
<status status="PASS" endtime="20180516 15:18:19.441" starttime="20180516 15:18:19.438"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DOCKER_COMMAND} exec ${container} ${command}</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20180516 15:18:19.442" level="INFO">Executing command 'sudo docker exec agent_vpp_1 ip a'.</msg>
<msg timestamp="20180516 15:18:19.751" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:18:19.751" level="INFO">${out} = 1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lf...</msg>
<msg timestamp="20180516 15:18:19.751" level="INFO">${stderr} = </msg>
<msg timestamp="20180516 15:18:19.751" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20180516 15:18:19.751" starttime="20180516 15:18:19.441"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:18:19.752" level="INFO">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host 
       valid_lft forever preferred_lft forever
3: node_1_noeth_1@if2: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default 
    link/ether b2:f1:cb:3e:97:0b brd ff:ff:ff:ff:ff:ff link-netnsid 2
    inet6 fe80::b0f1:cbff:fe3e:970b/64 scope link 
       valid_lft forever preferred_lft forever
5: node_2_noeth_2@if4: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default 
    link/ether 22:c4:57:2e:db:6b brd ff:ff:ff:ff:ff:ff link-netnsid 3
    inet6 fe80::20c4:57ff:fe2e:db6b/64 scope link 
       valid_lft forever preferred_lft forever
289: eth0@if290: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default 
    link/ether 02:42:ac:11:00:05 brd ff:ff:ff:ff:ff:ff link-netnsid 0
    inet 172.17.0.5/16 brd 172.17.255.255 scope global eth0
       valid_lft forever preferred_lft forever
    inet6 fe80::42:acff:fe11:5/64 scope link 
       valid_lft forever preferred_lft forever</msg>
<status status="PASS" endtime="20180516 15:18:19.752" starttime="20180516 15:18:19.752"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:18:19.753" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:18:19.753" starttime="20180516 15:18:19.752"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${rc}</arg>
</arguments>
<msg timestamp="20180516 15:18:19.753" level="INFO">0</msg>
<status status="PASS" endtime="20180516 15:18:19.753" starttime="20180516 15:18:19.753"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:18:19.754" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:18:19.754" starttime="20180516 15:18:19.754"></status>
</kw>
<msg timestamp="20180516 15:18:19.754" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:18:19.754" starttime="20180516 15:18:19.753"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} in container ${container}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:19.755" starttime="20180516 15:18:19.754"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${container}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}***</arg>
</arguments>
<msg timestamp="20180516 15:18:19.755" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:18:19.755" starttime="20180516 15:18:19.755"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${container}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:19.756" starttime="20180516 15:18:19.756"></status>
</kw>
<status status="PASS" endtime="20180516 15:18:19.756" starttime="20180516 15:18:19.434"></status>
</kw>
<kw name="Execute In Container" library="docker">
<arguments>
<arg>node_1</arg>
<arg>ip a</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${container}</arg>
<arg>${command}</arg>
</arguments>
<msg timestamp="20180516 15:18:19.757" level="INFO">node_1</msg>
<msg timestamp="20180516 15:18:19.757" level="INFO">ip a</msg>
<status status="PASS" endtime="20180516 15:18:19.757" starttime="20180516 15:18:19.757"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>docker</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:19.758" starttime="20180516 15:18:19.758"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:18:19.758" level="INFO">${currdate} = 2018-05-16 15:18:19.758</msg>
<status status="PASS" endtime="20180516 15:18:19.758" starttime="20180516 15:18:19.758"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DOCKER_COMMAND} exec ${container} ${command}</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20180516 15:18:19.759" level="INFO">Executing command 'sudo docker exec node_1 ip a'.</msg>
<msg timestamp="20180516 15:18:20.176" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:18:20.176" level="INFO">${out} = 1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lf...</msg>
<msg timestamp="20180516 15:18:20.176" level="INFO">${stderr} = </msg>
<msg timestamp="20180516 15:18:20.176" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20180516 15:18:20.176" starttime="20180516 15:18:19.759"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:18:20.177" level="INFO">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host 
       valid_lft forever preferred_lft forever
2: node1_veth@if3: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default 
    link/ether 02:00:00:00:00:01 brd ff:ff:ff:ff:ff:ff link-netnsid 1
    inet 10.0.0.10/24 brd 10.0.0.255 scope global node1_veth
       valid_lft forever preferred_lft forever
    inet6 fe80::7c81:42ff:fe85:225e/64 scope link 
       valid_lft forever preferred_lft forever
291: eth0@if292: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default 
    link/ether 02:42:ac:11:00:06 brd ff:ff:ff:ff:ff:ff link-netnsid 0
    inet 172.17.0.6/16 brd 172.17.255.255 scope global eth0
       valid_lft forever preferred_lft forever
    inet6 fe80::42:acff:fe11:6/64 scope link 
       valid_lft forever preferred_lft forever</msg>
<status status="PASS" endtime="20180516 15:18:20.177" starttime="20180516 15:18:20.176"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:18:20.177" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:18:20.177" starttime="20180516 15:18:20.177"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${rc}</arg>
</arguments>
<msg timestamp="20180516 15:18:20.178" level="INFO">0</msg>
<status status="PASS" endtime="20180516 15:18:20.178" starttime="20180516 15:18:20.178"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:18:20.179" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:18:20.179" starttime="20180516 15:18:20.179"></status>
</kw>
<msg timestamp="20180516 15:18:20.179" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:18:20.179" starttime="20180516 15:18:20.178"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} in container ${container}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:20.181" starttime="20180516 15:18:20.180"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${container}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}***</arg>
</arguments>
<msg timestamp="20180516 15:18:20.182" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_node_1.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_node_1.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:18:20.182" starttime="20180516 15:18:20.181"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${container}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:20.182" starttime="20180516 15:18:20.182"></status>
</kw>
<status status="PASS" endtime="20180516 15:18:20.182" starttime="20180516 15:18:19.756"></status>
</kw>
<kw name="Execute In Container" library="docker">
<arguments>
<arg>node_2</arg>
<arg>ip a</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${container}</arg>
<arg>${command}</arg>
</arguments>
<msg timestamp="20180516 15:18:20.183" level="INFO">node_2</msg>
<msg timestamp="20180516 15:18:20.183" level="INFO">ip a</msg>
<status status="PASS" endtime="20180516 15:18:20.183" starttime="20180516 15:18:20.183"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>docker</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:20.184" starttime="20180516 15:18:20.184"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:18:20.184" level="INFO">${currdate} = 2018-05-16 15:18:20.184</msg>
<status status="PASS" endtime="20180516 15:18:20.184" starttime="20180516 15:18:20.184"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DOCKER_COMMAND} exec ${container} ${command}</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20180516 15:18:20.185" level="INFO">Executing command 'sudo docker exec node_2 ip a'.</msg>
<msg timestamp="20180516 15:18:20.442" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:18:20.442" level="INFO">${out} = 1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lf...</msg>
<msg timestamp="20180516 15:18:20.442" level="INFO">${stderr} = </msg>
<msg timestamp="20180516 15:18:20.442" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20180516 15:18:20.442" starttime="20180516 15:18:20.185"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:18:20.443" level="INFO">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host 
       valid_lft forever preferred_lft forever
4: node2_veth@if5: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default 
    link/ether 02:00:00:00:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 1
    inet 10.0.0.11/24 brd 10.0.0.255 scope global node2_veth
       valid_lft forever preferred_lft forever
    inet6 fe80::b47c:7ff:fe9a:c1b2/64 scope link 
       valid_lft forever preferred_lft forever
293: eth0@if294: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default 
    link/ether 02:42:ac:11:00:07 brd ff:ff:ff:ff:ff:ff link-netnsid 0
    inet 172.17.0.7/16 brd 172.17.255.255 scope global eth0
       valid_lft forever preferred_lft forever
    inet6 fe80::42:acff:fe11:7/64 scope link 
       valid_lft forever preferred_lft forever</msg>
<status status="PASS" endtime="20180516 15:18:20.443" starttime="20180516 15:18:20.442"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:18:20.443" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:18:20.443" starttime="20180516 15:18:20.443"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${rc}</arg>
</arguments>
<msg timestamp="20180516 15:18:20.444" level="INFO">0</msg>
<status status="PASS" endtime="20180516 15:18:20.444" starttime="20180516 15:18:20.443"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:18:20.446" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:18:20.446" starttime="20180516 15:18:20.445"></status>
</kw>
<msg timestamp="20180516 15:18:20.446" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:18:20.446" starttime="20180516 15:18:20.445"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} in container ${container}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:20.447" starttime="20180516 15:18:20.447"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${container}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}***</arg>
</arguments>
<msg timestamp="20180516 15:18:20.448" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_node_2.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_node_2.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:18:20.448" starttime="20180516 15:18:20.447"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${container}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:20.449" starttime="20180516 15:18:20.448"></status>
</kw>
<status status="PASS" endtime="20180516 15:18:20.449" starttime="20180516 15:18:20.183"></status>
</kw>
<kw name="linux: Check Processes on Node" library="linux">
<arguments>
<arg>node_1</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${node}</arg>
</arguments>
<msg timestamp="20180516 15:18:20.449" level="INFO">node_1</msg>
<status status="PASS" endtime="20180516 15:18:20.450" starttime="20180516 15:18:20.449"></status>
</kw>
<kw name="Execute In Container" library="docker">
<arguments>
<arg>${node}</arg>
<arg>ps aux</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${container}</arg>
<arg>${command}</arg>
</arguments>
<msg timestamp="20180516 15:18:20.450" level="INFO">node_1</msg>
<msg timestamp="20180516 15:18:20.451" level="INFO">ps aux</msg>
<status status="PASS" endtime="20180516 15:18:20.451" starttime="20180516 15:18:20.450"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>docker</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:20.451" starttime="20180516 15:18:20.451"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:18:20.451" level="INFO">${currdate} = 2018-05-16 15:18:20.451</msg>
<status status="PASS" endtime="20180516 15:18:20.451" starttime="20180516 15:18:20.451"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DOCKER_COMMAND} exec ${container} ${command}</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20180516 15:18:20.452" level="INFO">Executing command 'sudo docker exec node_1 ps aux'.</msg>
<msg timestamp="20180516 15:18:20.762" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:18:20.762" level="INFO">${out} = USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
root         1  0.1  0.2  47284 17444 pts/0    Ss+  13:16   0:00 /usr/bin/python /usr/bin/supervisord -c /etc/supervisord.conf
...</msg>
<msg timestamp="20180516 15:18:20.762" level="INFO">${stderr} = </msg>
<msg timestamp="20180516 15:18:20.762" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20180516 15:18:20.762" starttime="20180516 15:18:20.452"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:18:20.763" level="INFO">USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
root         1  0.1  0.2  47284 17444 pts/0    Ss+  13:16   0:00 /usr/bin/python /usr/bin/supervisord -c /etc/supervisord.conf
root         7  0.3  0.2 206248 15480 pts/0    Sl   13:16   0:00 /root/go/bin/simple-agent --etcdv3-config=/opt/agent/dev/etcd.conf --kafka-config=/opt/agent/dev/kafka.conf
root        23  0.0  0.0  34424  2724 ?        Rs   13:18   0:00 ps aux</msg>
<status status="PASS" endtime="20180516 15:18:20.763" starttime="20180516 15:18:20.763"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:18:20.763" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:18:20.764" starttime="20180516 15:18:20.763"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${rc}</arg>
</arguments>
<msg timestamp="20180516 15:18:20.764" level="INFO">0</msg>
<status status="PASS" endtime="20180516 15:18:20.764" starttime="20180516 15:18:20.764"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:18:20.765" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:18:20.765" starttime="20180516 15:18:20.765"></status>
</kw>
<msg timestamp="20180516 15:18:20.765" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:18:20.765" starttime="20180516 15:18:20.764"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} in container ${container}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:20.766" starttime="20180516 15:18:20.765"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${container}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}***</arg>
</arguments>
<msg timestamp="20180516 15:18:20.766" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_node_1.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_node_1.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:18:20.766" starttime="20180516 15:18:20.766"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${container}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:20.767" starttime="20180516 15:18:20.767"></status>
</kw>
<msg timestamp="20180516 15:18:20.767" level="INFO">${out} = USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
root         1  0.1  0.2  47284 17444 pts/0    Ss+  13:16   0:00 /usr/bin/python /usr/bin/supervisord -c /etc/supervisord.conf
...</msg>
<status status="PASS" endtime="20180516 15:18:20.767" starttime="20180516 15:18:20.450"></status>
</kw>
<status status="PASS" endtime="20180516 15:18:20.767" starttime="20180516 15:18:20.449"></status>
</kw>
<kw name="linux: Check Processes on Node" library="linux">
<arguments>
<arg>node_2</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${node}</arg>
</arguments>
<msg timestamp="20180516 15:18:20.768" level="INFO">node_2</msg>
<status status="PASS" endtime="20180516 15:18:20.768" starttime="20180516 15:18:20.768"></status>
</kw>
<kw name="Execute In Container" library="docker">
<arguments>
<arg>${node}</arg>
<arg>ps aux</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${container}</arg>
<arg>${command}</arg>
</arguments>
<msg timestamp="20180516 15:18:20.770" level="INFO">node_2</msg>
<msg timestamp="20180516 15:18:20.770" level="INFO">ps aux</msg>
<status status="PASS" endtime="20180516 15:18:20.770" starttime="20180516 15:18:20.769"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>docker</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:20.770" starttime="20180516 15:18:20.770"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:18:20.771" level="INFO">${currdate} = 2018-05-16 15:18:20.771</msg>
<status status="PASS" endtime="20180516 15:18:20.771" starttime="20180516 15:18:20.771"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DOCKER_COMMAND} exec ${container} ${command}</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20180516 15:18:20.772" level="INFO">Executing command 'sudo docker exec node_2 ps aux'.</msg>
<msg timestamp="20180516 15:18:21.125" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:18:21.125" level="INFO">${out} = USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
root         1  0.1  0.2  47284 17436 pts/0    Ss+  13:17   0:00 /usr/bin/python /usr/bin/supervisord -c /etc/supervisord.conf
...</msg>
<msg timestamp="20180516 15:18:21.125" level="INFO">${stderr} = </msg>
<msg timestamp="20180516 15:18:21.125" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20180516 15:18:21.125" starttime="20180516 15:18:20.771"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:18:21.126" level="INFO">USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
root         1  0.1  0.2  47284 17436 pts/0    Ss+  13:17   0:00 /usr/bin/python /usr/bin/supervisord -c /etc/supervisord.conf
root         7  0.3  0.2 271784 15796 pts/0    Sl   13:17   0:00 /root/go/bin/simple-agent --etcdv3-config=/opt/agent/dev/etcd.conf --kafka-config=/opt/agent/dev/kafka.conf
root        22  0.0  0.0  34424  2828 ?        Rs   13:18   0:00 ps aux</msg>
<status status="PASS" endtime="20180516 15:18:21.127" starttime="20180516 15:18:21.126"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:18:21.127" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:18:21.127" starttime="20180516 15:18:21.127"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${rc}</arg>
</arguments>
<msg timestamp="20180516 15:18:21.127" level="INFO">0</msg>
<status status="PASS" endtime="20180516 15:18:21.127" starttime="20180516 15:18:21.127"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:18:21.129" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:18:21.129" starttime="20180516 15:18:21.128"></status>
</kw>
<msg timestamp="20180516 15:18:21.129" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:18:21.129" starttime="20180516 15:18:21.128"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} in container ${container}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:21.131" starttime="20180516 15:18:21.130"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${container}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}***</arg>
</arguments>
<msg timestamp="20180516 15:18:21.132" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_node_2.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_node_2.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:18:21.132" starttime="20180516 15:18:21.131"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${container}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:21.133" starttime="20180516 15:18:21.133"></status>
</kw>
<msg timestamp="20180516 15:18:21.133" level="INFO">${out} = USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
root         1  0.1  0.2  47284 17436 pts/0    Ss+  13:17   0:00 /usr/bin/python /usr/bin/supervisord -c /etc/supervisord.conf
...</msg>
<status status="PASS" endtime="20180516 15:18:21.133" starttime="20180516 15:18:20.769"></status>
</kw>
<status status="PASS" endtime="20180516 15:18:21.133" starttime="20180516 15:18:20.768"></status>
</kw>
<kw name="Make Datastore Snapshots" library="setup-teardown">
<arguments>
<arg>before_resync</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tag}</arg>
</arguments>
<msg timestamp="20180516 15:18:21.134" level="INFO">before_resync</msg>
<status status="PASS" endtime="20180516 15:18:21.134" starttime="20180516 15:18:21.134"></status>
</kw>
<kw name="Create Next Snapshot Prefix" library="setup-teardown">
<assign>
<var>${prefix}</var>
</assign>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>str(${snapshot_num}).zfill(3)</arg>
</arguments>
<assign>
<var>${prefix}</var>
</assign>
<msg timestamp="20180516 15:18:21.135" level="INFO">${prefix} = 002</msg>
<status status="PASS" endtime="20180516 15:18:21.135" starttime="20180516 15:18:21.134"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${snapshot_num}+1</arg>
</arguments>
<assign>
<var>${snapshot_num}</var>
</assign>
<msg timestamp="20180516 15:18:21.135" level="INFO">${snapshot_num} = 3</msg>
<status status="PASS" endtime="20180516 15:18:21.135" starttime="20180516 15:18:21.135"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${snapshot_num}</arg>
</arguments>
<msg timestamp="20180516 15:18:21.136" level="INFO">${snapshot_num} = 3</msg>
<status status="PASS" endtime="20180516 15:18:21.136" starttime="20180516 15:18:21.135"></status>
</kw>
<msg timestamp="20180516 15:18:21.136" level="INFO">${prefix} = 002</msg>
<status status="PASS" endtime="20180516 15:18:21.136" starttime="20180516 15:18:21.134"></status>
</kw>
<kw name="Take ETCD Snapshots" library="setup-teardown">
<arguments>
<arg>${prefix}_${tag}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tag}</arg>
</arguments>
<msg timestamp="20180516 15:18:21.138" level="INFO">002_before_resync</msg>
<status status="PASS" endtime="20180516 15:18:21.138" starttime="20180516 15:18:21.137"></status>
</kw>
<kw name="Get ETCD Dump" library="setup-teardown">
<assign>
<var>${dump}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DOCKER_COMMAND} exec etcd etcdctl get --prefix="true" ""</arg>
</arguments>
<assign>
<var>${command}</var>
</assign>
<msg timestamp="20180516 15:18:21.138" level="INFO">${command} = sudo docker exec etcd etcdctl get --prefix="true" ""</msg>
<status status="PASS" endtime="20180516 15:18:21.139" starttime="20180516 15:18:21.138"></status>
</kw>
<kw name="Execute On Machine" library="ssh">
<doc>*Execute On Machine ${machine} sudo docker exec etcd etcdctl get --prefix="true" ""*</doc>
<arguments>
<arg>docker</arg>
<arg>${command}</arg>
<arg>log=false</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${log}</arg>
</arguments>
<msg timestamp="20180516 15:18:21.144" level="INFO">docker</msg>
<msg timestamp="20180516 15:18:21.144" level="INFO">sudo docker exec etcd etcdctl get --prefix="true" ""</msg>
<msg timestamp="20180516 15:18:21.144" level="INFO">false</msg>
<status status="PASS" endtime="20180516 15:18:21.144" starttime="20180516 15:18:21.143"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:21.145" starttime="20180516 15:18:21.144"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:18:21.145" level="INFO">${currdate} = 2018-05-16 15:18:21.145</msg>
<status status="PASS" endtime="20180516 15:18:21.145" starttime="20180516 15:18:21.145"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20180516 15:18:21.146" level="INFO">Executing command 'sudo docker exec etcd etcdctl get --prefix="true" ""'.</msg>
<msg timestamp="20180516 15:18:21.511" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:18:21.511" level="INFO">${out} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<msg timestamp="20180516 15:18:21.511" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20180516 15:18:21.511" starttime="20180516 15:18:21.146"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${out}</arg>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:18:21.511" level="INFO">/sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-containers","description":"Wire 2 VNF containers to the vpp switch","type":2,"elements":[{"container":"node_1","port_label":"node1_veth","etcd_vpp_switch_key":"agent_vpp_1","ipv4_addr":"10.0.0.10","type":3},{"container":"node_2","port_label":"node2_veth","etcd_vpp_switch_key":"agent_vpp_1","ipv4_addr":"10.0.0.11","type":3}]}
/sfc-controller/v1/SP
{"mtu":1500,"starting_vlan_id":5000,"default_static_route_weight":5,"dynamic_bridge_parms":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true},"static_bridge_parms":{"forward":true}}
/sfc-controller/v1/id/HE/agent_vpp_1
{"name":"agent_vpp_1"}
/sfc-controller/v1/id/SFC/two-sample-vnf-containers/node_1_node1_veth
{"sfc_name":"two-sample-vnf-containers","container":"node_1","port":"node1_veth","mac_addr_id":1,"veth_id":1}
/sfc-controller/v1/id/SFC/two-sample-vnf-containers/node_2_node2_veth
{"sfc_name":"two-sample-vnf-containers","container":"node_2","port":"node2_veth","mac_addr_id":2,"veth_id":2}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VNF_node_1_node1_veth
{"name":"IF_VETH_VNF_node_1_node1_veth","enabled":true,"phys_address":"02:00:00:00:00:01","mtu":1500,"host_if_name":"node1_veth","ip_addresses":["10.0.0.10/24"],"namespace":{"type":1,"microservice":"node_1"},"veth":{"peer_if_name":"IF_VETH_VSWITCH_node_1_node1_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VNF_node_2_node2_veth
{"name":"IF_VETH_VNF_node_2_node2_veth","enabled":true,"phys_address":"02:00:00:00:00:02","mtu":1500,"host_if_name":"node2_veth","ip_addresses":["10.0.0.11/24"],"namespace":{"type":1,"microservice":"node_2"},"veth":{"peer_if_name":"IF_VETH_VSWITCH_node_2_node2_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VSWITCH_node_1_node1_veth
{"name":"IF_VETH_VSWITCH_node_1_node1_veth","enabled":true,"mtu":1500,"host_if_name":"node_1_noeth_1","namespace":{"type":1,"microservice":"agent_vpp_1"},"veth":{"peer_if_name":"IF_VETH_VNF_node_1_node1_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VSWITCH_node_2_node2_veth
{"name":"IF_VETH_VSWITCH_node_2_node2_veth","enabled":true,"mtu":1500,"host_if_name":"node_2_noeth_2","namespace":{"type":1,"microservice":"agent_vpp_1"},"veth":{"peer_if_name":"IF_VETH_VNF_node_2_node2_veth"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/BD_INTERNAL_EW_L2FIB_agent_vpp_1
{"name":"BD_INTERNAL_EW_L2FIB_agent_vpp_1","forward":true}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/BD_INTERNAL_EW_agent_vpp_1
{"name":"BD_INTERNAL_EW_agent_vpp_1","flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true,"interfaces":[{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth"},{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth"}]}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth
{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","type":4,"enabled":true,"mtu":1500,"afpacket":{"host_if_name":"node_1_noeth_1"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth
{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","type":4,"enabled":true,"mtu":1500,"afpacket":{"host_if_name":"node_2_noeth_2"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_LOOPBACK_H_agent_vpp_1
{"name":"IF_LOOPBACK_H_agent_vpp_1","enabled":true,"phys_address":"02:00:00:AA:BB:00","mtu":1500,"ip_addresses":["6.0.0.100"]}
/vnf-agent/agent_vpp_1/vpp/status/v1/bd/BD_INTERNAL_EW_L2FIB_agent_vpp_1
{"index":2,"internal_name":"BD_INTERNAL_EW_L2FIB_agent_vpp_1","bvi_interface":"not_set","last_change":1526476631,"l2_params":{"forward":true}}
/vnf-agent/agent_vpp_1/vpp/status/v1/bd/BD_INTERNAL_EW_agent_vpp_1
{"index":1,"internal_name":"BD_INTERNAL_EW_agent_vpp_1","bvi_interface":"not_set","interface_count":2,"last_change":1526476631,"l2_params":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true},"interfaces":[{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","sw_if_index":2},{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","sw_if_index":3}]}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth
{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","internal_name":"host-node_1_noeth_1","if_index":2,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:3e:fd:61:28","mtu":1500,"statistics":{"in_packets":18,"in_bytes":1412}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth
{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","internal_name":"host-node_2_noeth_2","if_index":3,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:42:98:22:08","mtu":1500,"statistics":{"in_packets":20,"in_bytes":1592}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_LOOPBACK_H_agent_vpp_1
{"name":"IF_LOOPBACK_H_agent_vpp_1","internal_name":"loop0","if_index":1,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:00:00:aa:bb:00","mtu":1500,"statistics":{}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/local0
{"name":"local0","internal_name":"local0","admin_status":2,"oper_status":2,"statistics":{}}
/vnf-agent/node_1/check/status/v1/agent
{"build_version":"v1.1-5-g55e9977","build_date":"2018-03-06T11:05+00:00","state":1,"start_time":1526476614,"last_change":1526476619,"last_update":1526476694,"commit_hash":"55e99770087087fa8e41a980a8b6257c80c93f4c"}
/vnf-agent/node_1/check/status/v1/plugin/etcdv3
{"state":1,"last_change":1526476619,"last_update":1526476694}
/vnf-agent/node_1/check/status/v1/plugin/kafka
{"state":1,"last_change":1526476619,"last_update":1526476695}
/vnf-agent/node_2/check/status/v1/agent
{"build_version":"v1.1-5-g55e9977","build_date":"2018-03-06T11:05+00:00","state":1,"start_time":1526476623,"last_change":1526476628,"last_update":1526476693,"commit_hash":"55e99770087087fa8e41a980a8b6257c80c93f4c"}
/vnf-agent/node_2/check/status/v1/plugin/etcdv3
{"state":1,"last_change":1526476628,"last_update":1526476693}
/vnf-agent/node_2/check/status/v1/plugin/kafka
{"state":1,"last_change":1526476628,"last_update":1526476693}</msg>
<msg timestamp="20180516 15:18:21.512" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:18:21.512" starttime="20180516 15:18:21.511"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:18:21.513" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:18:21.513" starttime="20180516 15:18:21.513"></status>
</kw>
<msg timestamp="20180516 15:18:21.513" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:18:21.513" starttime="20180516 15:18:21.512"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} on ${machine}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:21.514" starttime="20180516 15:18:21.513"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${log}'=='true'</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:21.514" starttime="20180516 15:18:21.514"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:21.515" starttime="20180516 15:18:21.514"></status>
</kw>
<msg timestamp="20180516 15:18:21.515" level="INFO">${out} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<status status="PASS" endtime="20180516 15:18:21.515" starttime="20180516 15:18:21.143"></status>
</kw>
<msg timestamp="20180516 15:18:21.515" level="INFO">${dump} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<status status="PASS" endtime="20180516 15:18:21.515" starttime="20180516 15:18:21.138"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/etcd_dump-${tag}.txt</arg>
<arg>${dump}</arg>
</arguments>
<msg timestamp="20180516 15:18:21.516" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/etcd_dump-002_before_resync.txt"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/etcd_dump-002_before_resync.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:18:21.516" starttime="20180516 15:18:21.515"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${dump}</arg>
<arg>/error/</arg>
</arguments>
<assign>
<var>${errors}</var>
</assign>
<msg timestamp="20180516 15:18:21.516" level="INFO">0 out of 54 lines matched</msg>
<msg timestamp="20180516 15:18:21.516" level="INFO">${errors} = </msg>
<status status="PASS" endtime="20180516 15:18:21.516" starttime="20180516 15:18:21.516"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${errors}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${errors}</arg>
</arguments>
<msg timestamp="20180516 15:18:21.517" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:18:21.517" starttime="20180516 15:18:21.517"></status>
</kw>
<msg timestamp="20180516 15:18:21.517" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:18:21.517" starttime="20180516 15:18:21.517"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>Errors detected in keys: ${errors}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:21.518" starttime="20180516 15:18:21.518"></status>
</kw>
<status status="PASS" endtime="20180516 15:18:21.518" starttime="20180516 15:18:21.136"></status>
</kw>
<status status="PASS" endtime="20180516 15:18:21.518" starttime="20180516 15:18:21.133"></status>
</kw>
<status status="PASS" endtime="20180516 15:18:21.518" starttime="20180516 15:17:39.884"></status>
</kw>
<kw type="teardown" name="TestTeardown">
<kw name="Make Datastore Snapshots" library="setup-teardown">
<arguments>
<arg>${TEST_NAME}_test_teardown</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tag}</arg>
</arguments>
<msg timestamp="20180516 15:18:21.520" level="INFO">Configure Environment_test_teardown</msg>
<status status="PASS" endtime="20180516 15:18:21.520" starttime="20180516 15:18:21.519"></status>
</kw>
<kw name="Create Next Snapshot Prefix" library="setup-teardown">
<assign>
<var>${prefix}</var>
</assign>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>str(${snapshot_num}).zfill(3)</arg>
</arguments>
<assign>
<var>${prefix}</var>
</assign>
<msg timestamp="20180516 15:18:21.521" level="INFO">${prefix} = 003</msg>
<status status="PASS" endtime="20180516 15:18:21.521" starttime="20180516 15:18:21.521"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${snapshot_num}+1</arg>
</arguments>
<assign>
<var>${snapshot_num}</var>
</assign>
<msg timestamp="20180516 15:18:21.522" level="INFO">${snapshot_num} = 4</msg>
<status status="PASS" endtime="20180516 15:18:21.522" starttime="20180516 15:18:21.522"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${snapshot_num}</arg>
</arguments>
<msg timestamp="20180516 15:18:21.522" level="INFO">${snapshot_num} = 4</msg>
<status status="PASS" endtime="20180516 15:18:21.522" starttime="20180516 15:18:21.522"></status>
</kw>
<msg timestamp="20180516 15:18:21.523" level="INFO">${prefix} = 003</msg>
<status status="PASS" endtime="20180516 15:18:21.523" starttime="20180516 15:18:21.520"></status>
</kw>
<kw name="Take ETCD Snapshots" library="setup-teardown">
<arguments>
<arg>${prefix}_${tag}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tag}</arg>
</arguments>
<msg timestamp="20180516 15:18:21.523" level="INFO">003_Configure Environment_test_teardown</msg>
<status status="PASS" endtime="20180516 15:18:21.524" starttime="20180516 15:18:21.523"></status>
</kw>
<kw name="Get ETCD Dump" library="setup-teardown">
<assign>
<var>${dump}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DOCKER_COMMAND} exec etcd etcdctl get --prefix="true" ""</arg>
</arguments>
<assign>
<var>${command}</var>
</assign>
<msg timestamp="20180516 15:18:21.524" level="INFO">${command} = sudo docker exec etcd etcdctl get --prefix="true" ""</msg>
<status status="PASS" endtime="20180516 15:18:21.524" starttime="20180516 15:18:21.524"></status>
</kw>
<kw name="Execute On Machine" library="ssh">
<doc>*Execute On Machine ${machine} sudo docker exec etcd etcdctl get --prefix="true" ""*</doc>
<arguments>
<arg>docker</arg>
<arg>${command}</arg>
<arg>log=false</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${log}</arg>
</arguments>
<msg timestamp="20180516 15:18:21.530" level="INFO">docker</msg>
<msg timestamp="20180516 15:18:21.531" level="INFO">sudo docker exec etcd etcdctl get --prefix="true" ""</msg>
<msg timestamp="20180516 15:18:21.531" level="INFO">false</msg>
<status status="PASS" endtime="20180516 15:18:21.531" starttime="20180516 15:18:21.530"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:21.531" starttime="20180516 15:18:21.531"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:18:21.532" level="INFO">${currdate} = 2018-05-16 15:18:21.532</msg>
<status status="PASS" endtime="20180516 15:18:21.532" starttime="20180516 15:18:21.531"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20180516 15:18:21.532" level="INFO">Executing command 'sudo docker exec etcd etcdctl get --prefix="true" ""'.</msg>
<msg timestamp="20180516 15:18:21.842" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:18:21.842" level="INFO">${out} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<msg timestamp="20180516 15:18:21.843" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20180516 15:18:21.843" starttime="20180516 15:18:21.532"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${out}</arg>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:18:21.843" level="INFO">/sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-containers","description":"Wire 2 VNF containers to the vpp switch","type":2,"elements":[{"container":"node_1","port_label":"node1_veth","etcd_vpp_switch_key":"agent_vpp_1","ipv4_addr":"10.0.0.10","type":3},{"container":"node_2","port_label":"node2_veth","etcd_vpp_switch_key":"agent_vpp_1","ipv4_addr":"10.0.0.11","type":3}]}
/sfc-controller/v1/SP
{"mtu":1500,"starting_vlan_id":5000,"default_static_route_weight":5,"dynamic_bridge_parms":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true},"static_bridge_parms":{"forward":true}}
/sfc-controller/v1/id/HE/agent_vpp_1
{"name":"agent_vpp_1"}
/sfc-controller/v1/id/SFC/two-sample-vnf-containers/node_1_node1_veth
{"sfc_name":"two-sample-vnf-containers","container":"node_1","port":"node1_veth","mac_addr_id":1,"veth_id":1}
/sfc-controller/v1/id/SFC/two-sample-vnf-containers/node_2_node2_veth
{"sfc_name":"two-sample-vnf-containers","container":"node_2","port":"node2_veth","mac_addr_id":2,"veth_id":2}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VNF_node_1_node1_veth
{"name":"IF_VETH_VNF_node_1_node1_veth","enabled":true,"phys_address":"02:00:00:00:00:01","mtu":1500,"host_if_name":"node1_veth","ip_addresses":["10.0.0.10/24"],"namespace":{"type":1,"microservice":"node_1"},"veth":{"peer_if_name":"IF_VETH_VSWITCH_node_1_node1_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VNF_node_2_node2_veth
{"name":"IF_VETH_VNF_node_2_node2_veth","enabled":true,"phys_address":"02:00:00:00:00:02","mtu":1500,"host_if_name":"node2_veth","ip_addresses":["10.0.0.11/24"],"namespace":{"type":1,"microservice":"node_2"},"veth":{"peer_if_name":"IF_VETH_VSWITCH_node_2_node2_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VSWITCH_node_1_node1_veth
{"name":"IF_VETH_VSWITCH_node_1_node1_veth","enabled":true,"mtu":1500,"host_if_name":"node_1_noeth_1","namespace":{"type":1,"microservice":"agent_vpp_1"},"veth":{"peer_if_name":"IF_VETH_VNF_node_1_node1_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VSWITCH_node_2_node2_veth
{"name":"IF_VETH_VSWITCH_node_2_node2_veth","enabled":true,"mtu":1500,"host_if_name":"node_2_noeth_2","namespace":{"type":1,"microservice":"agent_vpp_1"},"veth":{"peer_if_name":"IF_VETH_VNF_node_2_node2_veth"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/BD_INTERNAL_EW_L2FIB_agent_vpp_1
{"name":"BD_INTERNAL_EW_L2FIB_agent_vpp_1","forward":true}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/BD_INTERNAL_EW_agent_vpp_1
{"name":"BD_INTERNAL_EW_agent_vpp_1","flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true,"interfaces":[{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth"},{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth"}]}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth
{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","type":4,"enabled":true,"mtu":1500,"afpacket":{"host_if_name":"node_1_noeth_1"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth
{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","type":4,"enabled":true,"mtu":1500,"afpacket":{"host_if_name":"node_2_noeth_2"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_LOOPBACK_H_agent_vpp_1
{"name":"IF_LOOPBACK_H_agent_vpp_1","enabled":true,"phys_address":"02:00:00:AA:BB:00","mtu":1500,"ip_addresses":["6.0.0.100"]}
/vnf-agent/agent_vpp_1/vpp/status/v1/bd/BD_INTERNAL_EW_L2FIB_agent_vpp_1
{"index":2,"internal_name":"BD_INTERNAL_EW_L2FIB_agent_vpp_1","bvi_interface":"not_set","last_change":1526476631,"l2_params":{"forward":true}}
/vnf-agent/agent_vpp_1/vpp/status/v1/bd/BD_INTERNAL_EW_agent_vpp_1
{"index":1,"internal_name":"BD_INTERNAL_EW_agent_vpp_1","bvi_interface":"not_set","interface_count":2,"last_change":1526476631,"l2_params":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true},"interfaces":[{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","sw_if_index":2},{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","sw_if_index":3}]}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth
{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","internal_name":"host-node_1_noeth_1","if_index":2,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:3e:fd:61:28","mtu":1500,"statistics":{"in_packets":18,"in_bytes":1412}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth
{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","internal_name":"host-node_2_noeth_2","if_index":3,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:42:98:22:08","mtu":1500,"statistics":{"in_packets":20,"in_bytes":1592}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_LOOPBACK_H_agent_vpp_1
{"name":"IF_LOOPBACK_H_agent_vpp_1","internal_name":"loop0","if_index":1,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:00:00:aa:bb:00","mtu":1500,"statistics":{}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/local0
{"name":"local0","internal_name":"local0","admin_status":2,"oper_status":2,"statistics":{}}
/vnf-agent/node_1/check/status/v1/agent
{"build_version":"v1.1-5-g55e9977","build_date":"2018-03-06T11:05+00:00","state":1,"start_time":1526476614,"last_change":1526476619,"last_update":1526476694,"commit_hash":"55e99770087087fa8e41a980a8b6257c80c93f4c"}
/vnf-agent/node_1/check/status/v1/plugin/etcdv3
{"state":1,"last_change":1526476619,"last_update":1526476694}
/vnf-agent/node_1/check/status/v1/plugin/kafka
{"state":1,"last_change":1526476619,"last_update":1526476695}
/vnf-agent/node_2/check/status/v1/agent
{"build_version":"v1.1-5-g55e9977","build_date":"2018-03-06T11:05+00:00","state":1,"start_time":1526476623,"last_change":1526476628,"last_update":1526476693,"commit_hash":"55e99770087087fa8e41a980a8b6257c80c93f4c"}
/vnf-agent/node_2/check/status/v1/plugin/etcdv3
{"state":1,"last_change":1526476628,"last_update":1526476693}
/vnf-agent/node_2/check/status/v1/plugin/kafka
{"state":1,"last_change":1526476628,"last_update":1526476693}</msg>
<msg timestamp="20180516 15:18:21.844" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:18:21.844" starttime="20180516 15:18:21.843"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:18:21.845" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:18:21.845" starttime="20180516 15:18:21.844"></status>
</kw>
<msg timestamp="20180516 15:18:21.845" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:18:21.845" starttime="20180516 15:18:21.844"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} on ${machine}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:21.845" starttime="20180516 15:18:21.845"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${log}'=='true'</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:21.846" starttime="20180516 15:18:21.846"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:21.846" starttime="20180516 15:18:21.846"></status>
</kw>
<msg timestamp="20180516 15:18:21.847" level="INFO">${out} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<status status="PASS" endtime="20180516 15:18:21.847" starttime="20180516 15:18:21.530"></status>
</kw>
<msg timestamp="20180516 15:18:21.847" level="INFO">${dump} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<status status="PASS" endtime="20180516 15:18:21.847" starttime="20180516 15:18:21.524"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/etcd_dump-${tag}.txt</arg>
<arg>${dump}</arg>
</arguments>
<msg timestamp="20180516 15:18:21.847" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/etcd_dump-003_Configure Environment_test_teardown.txt"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/etcd_dump-003_Configure Environment_test_teardown.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:18:21.848" starttime="20180516 15:18:21.847"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${dump}</arg>
<arg>/error/</arg>
</arguments>
<assign>
<var>${errors}</var>
</assign>
<msg timestamp="20180516 15:18:21.848" level="INFO">0 out of 54 lines matched</msg>
<msg timestamp="20180516 15:18:21.848" level="INFO">${errors} = </msg>
<status status="PASS" endtime="20180516 15:18:21.848" starttime="20180516 15:18:21.848"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${errors}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${errors}</arg>
</arguments>
<msg timestamp="20180516 15:18:21.849" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:18:21.849" starttime="20180516 15:18:21.849"></status>
</kw>
<msg timestamp="20180516 15:18:21.849" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:18:21.849" starttime="20180516 15:18:21.848"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>Errors detected in keys: ${errors}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:21.850" starttime="20180516 15:18:21.850"></status>
</kw>
<status status="PASS" endtime="20180516 15:18:21.850" starttime="20180516 15:18:21.523"></status>
</kw>
<status status="PASS" endtime="20180516 15:18:21.850" starttime="20180516 15:18:21.519"></status>
</kw>
<status status="PASS" endtime="20180516 15:18:21.850" starttime="20180516 15:18:21.518"></status>
</kw>
<tags>
<tag>setup</tag>
</tags>
<status status="PASS" endtime="20180516 15:18:21.850" critical="yes" starttime="20180516 15:16:25.359"></status>
</test>
<test id="s1-t2" name="Check AfPackets On Vswitch">
<kw type="setup" name="TestSetup">
<kw name="Make Datastore Snapshots" library="setup-teardown">
<arguments>
<arg>${TEST_NAME}_test_setup</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tag}</arg>
</arguments>
<msg timestamp="20180516 15:18:21.852" level="INFO">Check AfPackets On Vswitch_test_setup</msg>
<status status="PASS" endtime="20180516 15:18:21.852" starttime="20180516 15:18:21.852"></status>
</kw>
<kw name="Create Next Snapshot Prefix" library="setup-teardown">
<assign>
<var>${prefix}</var>
</assign>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>str(${snapshot_num}).zfill(3)</arg>
</arguments>
<assign>
<var>${prefix}</var>
</assign>
<msg timestamp="20180516 15:18:21.853" level="INFO">${prefix} = 004</msg>
<status status="PASS" endtime="20180516 15:18:21.853" starttime="20180516 15:18:21.853"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${snapshot_num}+1</arg>
</arguments>
<assign>
<var>${snapshot_num}</var>
</assign>
<msg timestamp="20180516 15:18:21.854" level="INFO">${snapshot_num} = 5</msg>
<status status="PASS" endtime="20180516 15:18:21.854" starttime="20180516 15:18:21.853"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${snapshot_num}</arg>
</arguments>
<msg timestamp="20180516 15:18:21.854" level="INFO">${snapshot_num} = 5</msg>
<status status="PASS" endtime="20180516 15:18:21.854" starttime="20180516 15:18:21.854"></status>
</kw>
<msg timestamp="20180516 15:18:21.855" level="INFO">${prefix} = 004</msg>
<status status="PASS" endtime="20180516 15:18:21.855" starttime="20180516 15:18:21.852"></status>
</kw>
<kw name="Take ETCD Snapshots" library="setup-teardown">
<arguments>
<arg>${prefix}_${tag}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tag}</arg>
</arguments>
<msg timestamp="20180516 15:18:21.855" level="INFO">004_Check AfPackets On Vswitch_test_setup</msg>
<status status="PASS" endtime="20180516 15:18:21.855" starttime="20180516 15:18:21.855"></status>
</kw>
<kw name="Get ETCD Dump" library="setup-teardown">
<assign>
<var>${dump}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DOCKER_COMMAND} exec etcd etcdctl get --prefix="true" ""</arg>
</arguments>
<assign>
<var>${command}</var>
</assign>
<msg timestamp="20180516 15:18:21.856" level="INFO">${command} = sudo docker exec etcd etcdctl get --prefix="true" ""</msg>
<status status="PASS" endtime="20180516 15:18:21.856" starttime="20180516 15:18:21.856"></status>
</kw>
<kw name="Execute On Machine" library="ssh">
<doc>*Execute On Machine ${machine} sudo docker exec etcd etcdctl get --prefix="true" ""*</doc>
<arguments>
<arg>docker</arg>
<arg>${command}</arg>
<arg>log=false</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${log}</arg>
</arguments>
<msg timestamp="20180516 15:18:21.863" level="INFO">docker</msg>
<msg timestamp="20180516 15:18:21.863" level="INFO">sudo docker exec etcd etcdctl get --prefix="true" ""</msg>
<msg timestamp="20180516 15:18:21.863" level="INFO">false</msg>
<status status="PASS" endtime="20180516 15:18:21.863" starttime="20180516 15:18:21.862"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:21.868" starttime="20180516 15:18:21.863"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:18:21.869" level="INFO">${currdate} = 2018-05-16 15:18:21.869</msg>
<status status="PASS" endtime="20180516 15:18:21.869" starttime="20180516 15:18:21.869"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20180516 15:18:21.869" level="INFO">Executing command 'sudo docker exec etcd etcdctl get --prefix="true" ""'.</msg>
<msg timestamp="20180516 15:18:22.262" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:18:22.262" level="INFO">${out} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<msg timestamp="20180516 15:18:22.262" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20180516 15:18:22.262" starttime="20180516 15:18:21.869"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${out}</arg>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:18:22.263" level="INFO">/sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-containers","description":"Wire 2 VNF containers to the vpp switch","type":2,"elements":[{"container":"node_1","port_label":"node1_veth","etcd_vpp_switch_key":"agent_vpp_1","ipv4_addr":"10.0.0.10","type":3},{"container":"node_2","port_label":"node2_veth","etcd_vpp_switch_key":"agent_vpp_1","ipv4_addr":"10.0.0.11","type":3}]}
/sfc-controller/v1/SP
{"mtu":1500,"starting_vlan_id":5000,"default_static_route_weight":5,"dynamic_bridge_parms":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true},"static_bridge_parms":{"forward":true}}
/sfc-controller/v1/id/HE/agent_vpp_1
{"name":"agent_vpp_1"}
/sfc-controller/v1/id/SFC/two-sample-vnf-containers/node_1_node1_veth
{"sfc_name":"two-sample-vnf-containers","container":"node_1","port":"node1_veth","mac_addr_id":1,"veth_id":1}
/sfc-controller/v1/id/SFC/two-sample-vnf-containers/node_2_node2_veth
{"sfc_name":"two-sample-vnf-containers","container":"node_2","port":"node2_veth","mac_addr_id":2,"veth_id":2}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VNF_node_1_node1_veth
{"name":"IF_VETH_VNF_node_1_node1_veth","enabled":true,"phys_address":"02:00:00:00:00:01","mtu":1500,"host_if_name":"node1_veth","ip_addresses":["10.0.0.10/24"],"namespace":{"type":1,"microservice":"node_1"},"veth":{"peer_if_name":"IF_VETH_VSWITCH_node_1_node1_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VNF_node_2_node2_veth
{"name":"IF_VETH_VNF_node_2_node2_veth","enabled":true,"phys_address":"02:00:00:00:00:02","mtu":1500,"host_if_name":"node2_veth","ip_addresses":["10.0.0.11/24"],"namespace":{"type":1,"microservice":"node_2"},"veth":{"peer_if_name":"IF_VETH_VSWITCH_node_2_node2_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VSWITCH_node_1_node1_veth
{"name":"IF_VETH_VSWITCH_node_1_node1_veth","enabled":true,"mtu":1500,"host_if_name":"node_1_noeth_1","namespace":{"type":1,"microservice":"agent_vpp_1"},"veth":{"peer_if_name":"IF_VETH_VNF_node_1_node1_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VSWITCH_node_2_node2_veth
{"name":"IF_VETH_VSWITCH_node_2_node2_veth","enabled":true,"mtu":1500,"host_if_name":"node_2_noeth_2","namespace":{"type":1,"microservice":"agent_vpp_1"},"veth":{"peer_if_name":"IF_VETH_VNF_node_2_node2_veth"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/BD_INTERNAL_EW_L2FIB_agent_vpp_1
{"name":"BD_INTERNAL_EW_L2FIB_agent_vpp_1","forward":true}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/BD_INTERNAL_EW_agent_vpp_1
{"name":"BD_INTERNAL_EW_agent_vpp_1","flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true,"interfaces":[{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth"},{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth"}]}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth
{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","type":4,"enabled":true,"mtu":1500,"afpacket":{"host_if_name":"node_1_noeth_1"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth
{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","type":4,"enabled":true,"mtu":1500,"afpacket":{"host_if_name":"node_2_noeth_2"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_LOOPBACK_H_agent_vpp_1
{"name":"IF_LOOPBACK_H_agent_vpp_1","enabled":true,"phys_address":"02:00:00:AA:BB:00","mtu":1500,"ip_addresses":["6.0.0.100"]}
/vnf-agent/agent_vpp_1/vpp/status/v1/bd/BD_INTERNAL_EW_L2FIB_agent_vpp_1
{"index":2,"internal_name":"BD_INTERNAL_EW_L2FIB_agent_vpp_1","bvi_interface":"not_set","last_change":1526476631,"l2_params":{"forward":true}}
/vnf-agent/agent_vpp_1/vpp/status/v1/bd/BD_INTERNAL_EW_agent_vpp_1
{"index":1,"internal_name":"BD_INTERNAL_EW_agent_vpp_1","bvi_interface":"not_set","interface_count":2,"last_change":1526476631,"l2_params":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true},"interfaces":[{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","sw_if_index":2},{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","sw_if_index":3}]}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth
{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","internal_name":"host-node_1_noeth_1","if_index":2,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:3e:fd:61:28","mtu":1500,"statistics":{"in_packets":18,"in_bytes":1412}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth
{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","internal_name":"host-node_2_noeth_2","if_index":3,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:42:98:22:08","mtu":1500,"statistics":{"in_packets":20,"in_bytes":1592}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_LOOPBACK_H_agent_vpp_1
{"name":"IF_LOOPBACK_H_agent_vpp_1","internal_name":"loop0","if_index":1,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:00:00:aa:bb:00","mtu":1500,"statistics":{}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/local0
{"name":"local0","internal_name":"local0","admin_status":2,"oper_status":2,"statistics":{}}
/vnf-agent/node_1/check/status/v1/agent
{"build_version":"v1.1-5-g55e9977","build_date":"2018-03-06T11:05+00:00","state":1,"start_time":1526476614,"last_change":1526476619,"last_update":1526476694,"commit_hash":"55e99770087087fa8e41a980a8b6257c80c93f4c"}
/vnf-agent/node_1/check/status/v1/plugin/etcdv3
{"state":1,"last_change":1526476619,"last_update":1526476694}
/vnf-agent/node_1/check/status/v1/plugin/kafka
{"state":1,"last_change":1526476619,"last_update":1526476695}
/vnf-agent/node_2/check/status/v1/agent
{"build_version":"v1.1-5-g55e9977","build_date":"2018-03-06T11:05+00:00","state":1,"start_time":1526476623,"last_change":1526476628,"last_update":1526476693,"commit_hash":"55e99770087087fa8e41a980a8b6257c80c93f4c"}
/vnf-agent/node_2/check/status/v1/plugin/etcdv3
{"state":1,"last_change":1526476628,"last_update":1526476693}
/vnf-agent/node_2/check/status/v1/plugin/kafka
{"state":1,"last_change":1526476628,"last_update":1526476693}</msg>
<msg timestamp="20180516 15:18:22.264" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:18:22.264" starttime="20180516 15:18:22.262"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:18:22.265" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:18:22.265" starttime="20180516 15:18:22.264"></status>
</kw>
<msg timestamp="20180516 15:18:22.265" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:18:22.265" starttime="20180516 15:18:22.264"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} on ${machine}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:22.265" starttime="20180516 15:18:22.265"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${log}'=='true'</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:22.266" starttime="20180516 15:18:22.266"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:22.266" starttime="20180516 15:18:22.266"></status>
</kw>
<msg timestamp="20180516 15:18:22.267" level="INFO">${out} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<status status="PASS" endtime="20180516 15:18:22.267" starttime="20180516 15:18:21.861"></status>
</kw>
<msg timestamp="20180516 15:18:22.267" level="INFO">${dump} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<status status="PASS" endtime="20180516 15:18:22.267" starttime="20180516 15:18:21.856"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/etcd_dump-${tag}.txt</arg>
<arg>${dump}</arg>
</arguments>
<msg timestamp="20180516 15:18:22.267" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/etcd_dump-004_Check AfPackets On Vswitch_test_setup.txt"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/etcd_dump-004_Check AfPackets On Vswitch_test_setup.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:18:22.268" starttime="20180516 15:18:22.267"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${dump}</arg>
<arg>/error/</arg>
</arguments>
<assign>
<var>${errors}</var>
</assign>
<msg timestamp="20180516 15:18:22.268" level="INFO">0 out of 54 lines matched</msg>
<msg timestamp="20180516 15:18:22.268" level="INFO">${errors} = </msg>
<status status="PASS" endtime="20180516 15:18:22.268" starttime="20180516 15:18:22.268"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${errors}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${errors}</arg>
</arguments>
<msg timestamp="20180516 15:18:22.269" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:18:22.269" starttime="20180516 15:18:22.269"></status>
</kw>
<msg timestamp="20180516 15:18:22.269" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:18:22.269" starttime="20180516 15:18:22.268"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>Errors detected in keys: ${errors}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:22.270" starttime="20180516 15:18:22.269"></status>
</kw>
<status status="PASS" endtime="20180516 15:18:22.270" starttime="20180516 15:18:21.855"></status>
</kw>
<status status="PASS" endtime="20180516 15:18:22.270" starttime="20180516 15:18:21.852"></status>
</kw>
<status status="PASS" endtime="20180516 15:18:22.270" starttime="20180516 15:18:21.851"></status>
</kw>
<kw name="vat_term: Check Afpacket Interface State" library="vat_term">
<arguments>
<arg>agent_vpp_1</arg>
<arg>IF_AFPIF_VSWITCH_node_1_node1_veth</arg>
<arg>enabled=1</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${name}</arg>
<arg>${desired_state}</arg>
</arguments>
<msg timestamp="20180516 15:18:22.271" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:18:22.271" level="INFO">IF_AFPIF_VSWITCH_node_1_node1_veth</msg>
<msg timestamp="20180516 15:18:22.271" level="INFO">[u'enabled=1']</msg>
<status status="PASS" endtime="20180516 15:18:22.271" starttime="20180516 15:18:22.271"></status>
</kw>
<kw name="vpp_ctl: Get Interface Internal Name" library="vpp_ctl">
<arguments>
<arg>${node}</arg>
<arg>${name}</arg>
</arguments>
<assign>
<var>${internal_name}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${interface}</arg>
</arguments>
<msg timestamp="20180516 15:18:22.272" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:18:22.272" level="INFO">IF_AFPIF_VSWITCH_node_1_node1_veth</msg>
<status status="PASS" endtime="20180516 15:18:22.272" starttime="20180516 15:18:22.272"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${name}</var>
</assign>
<msg timestamp="20180516 15:18:22.273" level="INFO">${name} = </msg>
<status status="PASS" endtime="20180516 15:18:22.273" starttime="20180516 15:18:22.272"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<assign>
<var>${empty_dict}</var>
</assign>
<msg timestamp="20180516 15:18:22.273" level="INFO">${empty_dict} = {}</msg>
<status status="PASS" endtime="20180516 15:18:22.273" starttime="20180516 15:18:22.273"></status>
</kw>
<kw name="vpp_ctl: Get VPP Interface State As Json" library="vpp_ctl">
<arguments>
<arg>${node}</arg>
<arg>${interface}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${interface}</arg>
</arguments>
<msg timestamp="20180516 15:18:22.274" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:18:22.274" level="INFO">IF_AFPIF_VSWITCH_node_1_node1_veth</msg>
<status status="PASS" endtime="20180516 15:18:22.274" starttime="20180516 15:18:22.274"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/vnf-agent/${node}/vpp/status/v1/interface/${interface}</arg>
</arguments>
<assign>
<var>${key}</var>
</assign>
<msg timestamp="20180516 15:18:22.275" level="INFO">${key} = /vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth</msg>
<status status="PASS" endtime="20180516 15:18:22.275" starttime="20180516 15:18:22.274"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${key}</arg>
</arguments>
<msg timestamp="20180516 15:18:22.275" level="INFO">/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth</msg>
<status status="PASS" endtime="20180516 15:18:22.275" starttime="20180516 15:18:22.275"></status>
</kw>
<kw name="vpp_ctl: Read Key" library="vpp_ctl">
<arguments>
<arg>${key}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${key}</arg>
<arg>${container}</arg>
</arguments>
<msg timestamp="20180516 15:18:22.276" level="INFO">/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth</msg>
<msg timestamp="20180516 15:18:22.276" level="INFO">vpp_agent_ctl</msg>
<status status="PASS" endtime="20180516 15:18:22.276" starttime="20180516 15:18:22.276"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>vpp-agent-ctl ${AGENT_VPP_ETCD_CONF_PATH} -get ${key}</arg>
</arguments>
<assign>
<var>${command}</var>
</assign>
<msg timestamp="20180516 15:18:22.277" level="INFO">${command} = vpp-agent-ctl /opt/vpp-agent/dev/etcd.conf -get /vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth</msg>
<status status="PASS" endtime="20180516 15:18:22.277" starttime="20180516 15:18:22.276"></status>
</kw>
<kw name="Execute In Container" library="docker">
<arguments>
<arg>${container}</arg>
<arg>${command}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${container}</arg>
<arg>${command}</arg>
</arguments>
<msg timestamp="20180516 15:18:22.278" level="INFO">vpp_agent_ctl</msg>
<msg timestamp="20180516 15:18:22.278" level="INFO">vpp-agent-ctl /opt/vpp-agent/dev/etcd.conf -get /vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth</msg>
<status status="PASS" endtime="20180516 15:18:22.278" starttime="20180516 15:18:22.278"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>docker</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:22.278" starttime="20180516 15:18:22.278"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:18:22.279" level="INFO">${currdate} = 2018-05-16 15:18:22.279</msg>
<status status="PASS" endtime="20180516 15:18:22.279" starttime="20180516 15:18:22.278"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DOCKER_COMMAND} exec ${container} ${command}</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20180516 15:18:22.279" level="INFO">Executing command 'sudo docker exec vpp_agent_ctl vpp-agent-ctl /opt/vpp-agent/dev/etcd.conf -get /vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth'.</msg>
<msg timestamp="20180516 15:18:22.664" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:18:22.665" level="INFO">${out} = {"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","internal_name":"host-node_1_noeth_1","if_index":2,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:3e:fd:61:28","mtu":1500,...</msg>
<msg timestamp="20180516 15:18:22.665" level="INFO">${stderr} = time="2018-05-16 13:18:22.57082" level=info msg="Connecting to etcd took 3.207804ms" durationInNs=3207804 loc="etcdv3/bytes_broker_impl.go(84)" logger=defaultLogger</msg>
<msg timestamp="20180516 15:18:22.665" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20180516 15:18:22.665" starttime="20180516 15:18:22.279"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:18:22.665" level="INFO">{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","internal_name":"host-node_1_noeth_1","if_index":2,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:3e:fd:61:28","mtu":1500,"statistics":{"in_packets":18,"in_bytes":1412}}</msg>
<status status="PASS" endtime="20180516 15:18:22.665" starttime="20180516 15:18:22.665"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:18:22.666" level="INFO">time="2018-05-16 13:18:22.57082" level=info msg="Connecting to etcd took 3.207804ms" durationInNs=3207804 loc="etcdv3/bytes_broker_impl.go(84)" logger=defaultLogger</msg>
<status status="PASS" endtime="20180516 15:18:22.666" starttime="20180516 15:18:22.666"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${rc}</arg>
</arguments>
<msg timestamp="20180516 15:18:22.666" level="INFO">0</msg>
<status status="PASS" endtime="20180516 15:18:22.666" starttime="20180516 15:18:22.666"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:18:22.667" level="INFO">Length is 164</msg>
<msg timestamp="20180516 15:18:22.667" level="FAIL">'time="2018-05-16 13:18:22.57082" level=info msg="Connecting to etcd took 3.207804ms" durationInNs=3207804 loc="etcdv3/bytes_broker_impl.go(84)" logger=defaultLogger' should be empty.</msg>
<status status="FAIL" endtime="20180516 15:18:22.667" starttime="20180516 15:18:22.667"></status>
</kw>
<msg timestamp="20180516 15:18:22.667" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20180516 15:18:22.667" starttime="20180516 15:18:22.667"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} in container ${container}</arg>
<arg>level=WARN</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>One or more error occured during execution of a command ${command} in container ${container}</arg>
<arg>level=WARN</arg>
</arguments>
<msg timestamp="20180516 15:18:22.668" level="WARN">One or more error occured during execution of a command vpp-agent-ctl /opt/vpp-agent/dev/etcd.conf -get /vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth in container vpp_agent_ctl</msg>
<status status="PASS" endtime="20180516 15:18:22.669" starttime="20180516 15:18:22.668"></status>
</kw>
<status status="PASS" endtime="20180516 15:18:22.669" starttime="20180516 15:18:22.668"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${container}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}***</arg>
</arguments>
<msg timestamp="20180516 15:18:22.670" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_vpp_agent_ctl.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_vpp_agent_ctl.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:18:22.670" starttime="20180516 15:18:22.669"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${container}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${container}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:18:22.671" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_vpp_agent_ctl.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_vpp_agent_ctl.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:18:22.671" starttime="20180516 15:18:22.670"></status>
</kw>
<status status="PASS" endtime="20180516 15:18:22.671" starttime="20180516 15:18:22.670"></status>
</kw>
<msg timestamp="20180516 15:18:22.671" level="INFO">${out} = {"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","internal_name":"host-node_1_noeth_1","if_index":2,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:3e:fd:61:28","mtu":1500,...</msg>
<status status="PASS" endtime="20180516 15:18:22.671" starttime="20180516 15:18:22.277"></status>
</kw>
<msg timestamp="20180516 15:18:22.671" level="INFO">${data} = {"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","internal_name":"host-node_1_noeth_1","if_index":2,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:3e:fd:61:28","mtu":1500,...</msg>
<status status="PASS" endtime="20180516 15:18:22.671" starttime="20180516 15:18:22.276"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${data}</arg>
</arguments>
<msg timestamp="20180516 15:18:22.672" level="INFO">{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","internal_name":"host-node_1_noeth_1","if_index":2,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:3e:fd:61:28","mtu":1500,"statistics":{"in_packets":18,"in_bytes":1412}}</msg>
<status status="PASS" endtime="20180516 15:18:22.672" starttime="20180516 15:18:22.672"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'''${data}'''==""</arg>
<arg>{}</arg>
<arg>${data}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20180516 15:18:22.673" level="INFO">${data} = {"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","internal_name":"host-node_1_noeth_1","if_index":2,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:3e:fd:61:28","mtu":1500,...</msg>
<status status="PASS" endtime="20180516 15:18:22.673" starttime="20180516 15:18:22.672"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${data}</arg>
</arguments>
<msg timestamp="20180516 15:18:22.673" level="INFO">{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","internal_name":"host-node_1_noeth_1","if_index":2,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:3e:fd:61:28","mtu":1500,"statistics":{"in_packets":18,"in_bytes":1412}}</msg>
<status status="PASS" endtime="20180516 15:18:22.673" starttime="20180516 15:18:22.673"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>json.loads('''${data}''')</arg>
<arg>json</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180516 15:18:22.673" level="INFO">${output} = {u'statistics': {u'in_packets': 18, u'in_bytes': 1412}, u'if_index': 2, u'name': u'IF_AFPIF_VSWITCH_node_1_node1_veth', u'admin_status': 1, u'mtu': 1500, u'oper_status': 1, u'internal_name': u'host-no...</msg>
<status status="PASS" endtime="20180516 15:18:22.674" starttime="20180516 15:18:22.673"></status>
</kw>
<msg timestamp="20180516 15:18:22.674" level="INFO">${state} = {u'statistics': {u'in_packets': 18, u'in_bytes': 1412}, u'if_index': 2, u'name': u'IF_AFPIF_VSWITCH_node_1_node1_veth', u'admin_status': 1, u'mtu': 1500, u'oper_status': 1, u'internal_name': u'host-no...</msg>
<status status="PASS" endtime="20180516 15:18:22.674" starttime="20180516 15:18:22.273"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${state}</arg>
</arguments>
<msg timestamp="20180516 15:18:22.674" level="INFO">{u'statistics': {u'in_packets': 18, u'in_bytes': 1412}, u'if_index': 2, u'name': u'IF_AFPIF_VSWITCH_node_1_node1_veth', u'admin_status': 1, u'mtu': 1500, u'oper_status': 1, u'internal_name': u'host-node_1_noeth_1', u'last_change': 1526476631, u'phys_address': u'02:fe:3e:fd:61:28'}</msg>
<status status="PASS" endtime="20180516 15:18:22.674" starttime="20180516 15:18:22.674"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${state}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20180516 15:18:22.675" level="INFO">Length is 9</msg>
<msg timestamp="20180516 15:18:22.675" level="INFO">${length} = 9</msg>
<status status="PASS" endtime="20180516 15:18:22.675" starttime="20180516 15:18:22.674"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20180516 15:18:22.675" level="INFO">9</msg>
<status status="PASS" endtime="20180516 15:18:22.675" starttime="20180516 15:18:22.675"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${length} != 0</arg>
<arg>Set Variable</arg>
<arg>${state["internal_name"]}</arg>
</arguments>
<assign>
<var>${name}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${state["internal_name"]}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:22.676" starttime="20180516 15:18:22.676"></status>
</kw>
<msg timestamp="20180516 15:18:22.676" level="INFO">${name} = host-node_1_noeth_1</msg>
<status status="PASS" endtime="20180516 15:18:22.676" starttime="20180516 15:18:22.675"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${name}</arg>
</arguments>
<msg timestamp="20180516 15:18:22.677" level="INFO">host-node_1_noeth_1</msg>
<status status="PASS" endtime="20180516 15:18:22.677" starttime="20180516 15:18:22.677"></status>
</kw>
<msg timestamp="20180516 15:18:22.677" level="INFO">${internal_name} = host-node_1_noeth_1</msg>
<status status="PASS" endtime="20180516 15:18:22.677" starttime="20180516 15:18:22.271"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${internal_name}</arg>
</arguments>
<msg timestamp="20180516 15:18:22.678" level="INFO">host-node_1_noeth_1</msg>
<status status="PASS" endtime="20180516 15:18:22.678" starttime="20180516 15:18:22.677"></status>
</kw>
<kw name="vat_term: Get Interface Index" library="vat_term">
<doc>Return interface index with specified name</doc>
<arguments>
<arg>${node}</arg>
<arg>${internal_name}</arg>
</arguments>
<assign>
<var>${internal_index}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${name}</arg>
</arguments>
<msg timestamp="20180516 15:18:22.679" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:18:22.679" level="INFO">host-node_1_noeth_1</msg>
<status status="PASS" endtime="20180516 15:18:22.679" starttime="20180516 15:18:22.679"></status>
</kw>
<kw name="vat_term: Interfaces Dump" library="vat_term">
<doc>Executing command sw_interface_dump</doc>
<arguments>
<arg>${node}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
</arguments>
<msg timestamp="20180516 15:18:22.682" level="INFO">agent_vpp_1</msg>
<status status="PASS" endtime="20180516 15:18:22.688" starttime="20180516 15:18:22.681"></status>
</kw>
<kw name="vat_term: Issue Command" library="vat_term">
<arguments>
<arg>${node}</arg>
<arg>sw_interface_dump</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${command}</arg>
<arg>${delay}</arg>
<arg>${node}_vat</arg>
<arg>${${node}_VPP_VAT_PROMPT}</arg>
</arguments>
<msg timestamp="20180516 15:18:22.689" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:18:22.689" level="INFO">sw_interface_dump</msg>
<msg timestamp="20180516 15:18:22.690" level="INFO">3s</msg>
<msg timestamp="20180516 15:18:22.690" level="INFO">agent_vpp_1_vat</msg>
<msg timestamp="20180516 15:18:22.690" level="INFO">vat#</msg>
<status status="PASS" endtime="20180516 15:18:22.690" starttime="20180516 15:18:22.689"></status>
</kw>
<kw name="Write To Machine Until String" library="ssh">
<doc>*Write Machine ${machine} sw_interface_dump*</doc>
<arguments>
<arg>${node}_vat</arg>
<arg>${command}</arg>
<arg>${${node}_VPP_VAT_PROMPT}</arg>
<arg>delay=${delay}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${string}</arg>
<arg>${delay}</arg>
</arguments>
<msg timestamp="20180516 15:18:22.700" level="INFO">agent_vpp_1_vat</msg>
<msg timestamp="20180516 15:18:22.700" level="INFO">sw_interface_dump</msg>
<msg timestamp="20180516 15:18:22.700" level="INFO">vat#</msg>
<msg timestamp="20180516 15:18:22.700" level="INFO">3s</msg>
<status status="PASS" endtime="20180516 15:18:22.703" starttime="20180516 15:18:22.700"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:22.704" starttime="20180516 15:18:22.704"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:18:22.704" level="INFO">${currdate} = 2018-05-16 15:18:22.704</msg>
<status status="PASS" endtime="20180516 15:18:22.704" starttime="20180516 15:18:22.704"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20180516 15:18:22.709" level="INFO">sw_interface_dump</msg>
<status status="PASS" endtime="20180516 15:18:22.710" starttime="20180516 15:18:22.705"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>${string}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20180516 15:18:22.747" level="INFO">[ 
  {
    "sw_if_index": 0,
    "sup_sw_if_index": 0,
    "l2_address_length": 0,
    "l2_address": [0, 0, 0, 0, 0, 0, 0, 0],
    "interface_name": "local0",
    "admin_up_down": 0,
    "link_up_down": 0,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 0,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 1,
    "sup_sw_if_index": 1,
    "l2_address_length": 6,
    "l2_address": [2, 0, 0, 170, 187, 0, 0, 0],
    "interface_name": "loop0",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 2,
    "sup_sw_if_index": 2,
    "l2_address_length": 6,
    "l2_address": [2, 254, 62, 253, 97, 40, 0, 0],
    "interface_name": "host-node_1_noeth_1",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 3,
    "sup_sw_if_index": 3,
    "l2_address_length": 6,
    "l2_address": [2, 254, 66, 152, 34, 8, 0, 0],
    "interface_name": "host-node_2_noeth_2",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  }
]
vat#</msg>
<msg timestamp="20180516 15:18:22.747" level="INFO">${out} = 
[ 
  {
    "sw_if_index": 0,
    "sup_sw_if_index": 0,
    "l2_address_length": 0,
    "l2_address": [0, 0, 0, 0, 0, 0, 0, 0],
    "interface_name": "local0",
    "admin_up_down": 0,
    "li...</msg>
<status status="PASS" endtime="20180516 15:18:22.752" starttime="20180516 15:18:22.710"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:18:22.753" level="INFO">
[ 
  {
    "sw_if_index": 0,
    "sup_sw_if_index": 0,
    "l2_address_length": 0,
    "l2_address": [0, 0, 0, 0, 0, 0, 0, 0],
    "interface_name": "local0",
    "admin_up_down": 0,
    "link_up_down": 0,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 0,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 1,
    "sup_sw_if_index": 1,
    "l2_address_length": 6,
    "l2_address": [2, 0, 0, 170, 187, 0, 0, 0],
    "interface_name": "loop0",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 2,
    "sup_sw_if_index": 2,
    "l2_address_length": 6,
    "l2_address": [2, 254, 62, 253, 97, 40, 0, 0],
    "interface_name": "host-node_1_noeth_1",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 3,
    "sup_sw_if_index": 3,
    "l2_address_length": 6,
    "l2_address": [2, 254, 66, 152, 34, 8, 0, 0],
    "interface_name": "host-node_2_noeth_2",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  }
]
vat#</msg>
<status status="PASS" endtime="20180516 15:18:22.753" starttime="20180516 15:18:22.752"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>delay=${delay}</arg>
</arguments>
<assign>
<var>${out2}</var>
</assign>
<msg timestamp="20180516 15:18:25.757" level="INFO">${out2} =  </msg>
<status status="PASS" endtime="20180516 15:18:25.757" starttime="20180516 15:18:22.753"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out2}</arg>
</arguments>
<msg timestamp="20180516 15:18:25.757" level="INFO"> </msg>
<status status="PASS" endtime="20180516 15:18:25.757" starttime="20180516 15:18:25.757"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${out2}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:18:25.758" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_vat.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_vat.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:18:25.758" starttime="20180516 15:18:25.758"></status>
</kw>
<msg timestamp="20180516 15:18:25.758" level="INFO">${out} = 
[ 
  {
    "sw_if_index": 0,
    "sup_sw_if_index": 0,
    "l2_address_length": 0,
    "l2_address": [0, 0, 0, 0, 0, 0, 0, 0],
    "interface_name": "local0",
    "admin_up_down": 0,
    "li...</msg>
<status status="PASS" endtime="20180516 15:18:25.758" starttime="20180516 15:18:22.699"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:18:25.759" level="INFO">
[ 
  {
    "sw_if_index": 0,
    "sup_sw_if_index": 0,
    "l2_address_length": 0,
    "l2_address": [0, 0, 0, 0, 0, 0, 0, 0],
    "interface_name": "local0",
    "admin_up_down": 0,
    "link_up_down": 0,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 0,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 1,
    "sup_sw_if_index": 1,
    "l2_address_length": 6,
    "l2_address": [2, 0, 0, 170, 187, 0, 0, 0],
    "interface_name": "loop0",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 2,
    "sup_sw_if_index": 2,
    "l2_address_length": 6,
    "l2_address": [2, 254, 62, 253, 97, 40, 0, 0],
    "interface_name": "host-node_1_noeth_1",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 3,
    "sup_sw_if_index": 3,
    "l2_address_length": 6,
    "l2_address": [2, 254, 66, 152, 34, 8, 0, 0],
    "interface_name": "host-node_2_noeth_2",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  }
]
vat# </msg>
<status status="PASS" endtime="20180516 15:18:25.759" starttime="20180516 15:18:25.759"></status>
</kw>
<msg timestamp="20180516 15:18:25.759" level="INFO">${out} = 
[ 
  {
    "sw_if_index": 0,
    "sup_sw_if_index": 0,
    "l2_address_length": 0,
    "l2_address": [0, 0, 0, 0, 0, 0, 0, 0],
    "interface_name": "local0",
    "admin_up_down": 0,
    "li...</msg>
<status status="PASS" endtime="20180516 15:18:25.759" starttime="20180516 15:18:22.689"></status>
</kw>
<msg timestamp="20180516 15:18:25.759" level="INFO">${out} = 
[ 
  {
    "sw_if_index": 0,
    "sup_sw_if_index": 0,
    "l2_address_length": 0,
    "l2_address": [0, 0, 0, 0, 0, 0, 0, 0],
    "interface_name": "local0",
    "admin_up_down": 0,
    "li...</msg>
<status status="PASS" endtime="20180516 15:18:25.759" starttime="20180516 15:18:22.681"></status>
</kw>
<kw name="Get Interface Index" library="vat_term">
<arguments>
<arg>${out}</arg>
<arg>${name}</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg timestamp="20180516 15:18:25.760" level="INFO">${index} = 2</msg>
<status status="PASS" endtime="20180516 15:18:25.760" starttime="20180516 15:18:25.759"></status>
</kw>
<msg timestamp="20180516 15:18:25.760" level="INFO">${internal_index} = 2</msg>
<status status="PASS" endtime="20180516 15:18:25.760" starttime="20180516 15:18:22.678"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${internal_index}</arg>
</arguments>
<msg timestamp="20180516 15:18:25.761" level="INFO">2</msg>
<status status="PASS" endtime="20180516 15:18:25.761" starttime="20180516 15:18:25.760"></status>
</kw>
<kw name="vat_term: Interfaces Dump" library="vat_term">
<doc>Executing command sw_interface_dump</doc>
<arguments>
<arg>${node}</arg>
</arguments>
<assign>
<var>${interfaces}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
</arguments>
<msg timestamp="20180516 15:18:25.762" level="INFO">agent_vpp_1</msg>
<status status="PASS" endtime="20180516 15:18:25.762" starttime="20180516 15:18:25.762"></status>
</kw>
<kw name="vat_term: Issue Command" library="vat_term">
<arguments>
<arg>${node}</arg>
<arg>sw_interface_dump</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${command}</arg>
<arg>${delay}</arg>
<arg>${node}_vat</arg>
<arg>${${node}_VPP_VAT_PROMPT}</arg>
</arguments>
<msg timestamp="20180516 15:18:25.763" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:18:25.763" level="INFO">sw_interface_dump</msg>
<msg timestamp="20180516 15:18:25.763" level="INFO">3s</msg>
<msg timestamp="20180516 15:18:25.763" level="INFO">agent_vpp_1_vat</msg>
<msg timestamp="20180516 15:18:25.763" level="INFO">vat#</msg>
<status status="PASS" endtime="20180516 15:18:25.763" starttime="20180516 15:18:25.763"></status>
</kw>
<kw name="Write To Machine Until String" library="ssh">
<doc>*Write Machine ${machine} sw_interface_dump*</doc>
<arguments>
<arg>${node}_vat</arg>
<arg>${command}</arg>
<arg>${${node}_VPP_VAT_PROMPT}</arg>
<arg>delay=${delay}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${string}</arg>
<arg>${delay}</arg>
</arguments>
<msg timestamp="20180516 15:18:25.769" level="INFO">agent_vpp_1_vat</msg>
<msg timestamp="20180516 15:18:25.769" level="INFO">sw_interface_dump</msg>
<msg timestamp="20180516 15:18:25.769" level="INFO">vat#</msg>
<msg timestamp="20180516 15:18:25.769" level="INFO">3s</msg>
<status status="PASS" endtime="20180516 15:18:25.769" starttime="20180516 15:18:25.769"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:25.770" starttime="20180516 15:18:25.770"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:18:25.770" level="INFO">${currdate} = 2018-05-16 15:18:25.770</msg>
<status status="PASS" endtime="20180516 15:18:25.770" starttime="20180516 15:18:25.770"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20180516 15:18:25.772" level="INFO">sw_interface_dump</msg>
<status status="PASS" endtime="20180516 15:18:25.773" starttime="20180516 15:18:25.771"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>${string}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20180516 15:18:25.794" level="INFO">[ 
  {
    "sw_if_index": 0,
    "sup_sw_if_index": 0,
    "l2_address_length": 0,
    "l2_address": [0, 0, 0, 0, 0, 0, 0, 0],
    "interface_name": "local0",
    "admin_up_down": 0,
    "link_up_down": 0,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 0,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 1,
    "sup_sw_if_index": 1,
    "l2_address_length": 6,
    "l2_address": [2, 0, 0, 170, 187, 0, 0, 0],
    "interface_name": "loop0",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 2,
    "sup_sw_if_index": 2,
    "l2_address_length": 6,
    "l2_address": [2, 254, 62, 253, 97, 40, 0, 0],
    "interface_name": "host-node_1_noeth_1",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 3,
    "sup_sw_if_index": 3,
    "l2_address_length": 6,
    "l2_address": [2, 254, 66, 152, 34, 8, 0, 0],
    "interface_name": "host-node_2_noeth_2",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  }
]
vat#</msg>
<msg timestamp="20180516 15:18:25.794" level="INFO">${out} = 
[ 
  {
    "sw_if_index": 0,
    "sup_sw_if_index": 0,
    "l2_address_length": 0,
    "l2_address": [0, 0, 0, 0, 0, 0, 0, 0],
    "interface_name": "local0",
    "admin_up_down": 0,
    "li...</msg>
<status status="PASS" endtime="20180516 15:18:25.794" starttime="20180516 15:18:25.773"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:18:25.795" level="INFO">
[ 
  {
    "sw_if_index": 0,
    "sup_sw_if_index": 0,
    "l2_address_length": 0,
    "l2_address": [0, 0, 0, 0, 0, 0, 0, 0],
    "interface_name": "local0",
    "admin_up_down": 0,
    "link_up_down": 0,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 0,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 1,
    "sup_sw_if_index": 1,
    "l2_address_length": 6,
    "l2_address": [2, 0, 0, 170, 187, 0, 0, 0],
    "interface_name": "loop0",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 2,
    "sup_sw_if_index": 2,
    "l2_address_length": 6,
    "l2_address": [2, 254, 62, 253, 97, 40, 0, 0],
    "interface_name": "host-node_1_noeth_1",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 3,
    "sup_sw_if_index": 3,
    "l2_address_length": 6,
    "l2_address": [2, 254, 66, 152, 34, 8, 0, 0],
    "interface_name": "host-node_2_noeth_2",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  }
]
vat#</msg>
<status status="PASS" endtime="20180516 15:18:25.795" starttime="20180516 15:18:25.795"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>delay=${delay}</arg>
</arguments>
<assign>
<var>${out2}</var>
</assign>
<msg timestamp="20180516 15:18:28.800" level="INFO">${out2} =  </msg>
<status status="PASS" endtime="20180516 15:18:28.800" starttime="20180516 15:18:25.796"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out2}</arg>
</arguments>
<msg timestamp="20180516 15:18:28.800" level="INFO"> </msg>
<status status="PASS" endtime="20180516 15:18:28.800" starttime="20180516 15:18:28.800"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${out2}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:18:28.801" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_vat.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_vat.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:18:28.801" starttime="20180516 15:18:28.801"></status>
</kw>
<msg timestamp="20180516 15:18:28.801" level="INFO">${out} = 
[ 
  {
    "sw_if_index": 0,
    "sup_sw_if_index": 0,
    "l2_address_length": 0,
    "l2_address": [0, 0, 0, 0, 0, 0, 0, 0],
    "interface_name": "local0",
    "admin_up_down": 0,
    "li...</msg>
<status status="PASS" endtime="20180516 15:18:28.802" starttime="20180516 15:18:25.768"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:18:28.802" level="INFO">
[ 
  {
    "sw_if_index": 0,
    "sup_sw_if_index": 0,
    "l2_address_length": 0,
    "l2_address": [0, 0, 0, 0, 0, 0, 0, 0],
    "interface_name": "local0",
    "admin_up_down": 0,
    "link_up_down": 0,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 0,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 1,
    "sup_sw_if_index": 1,
    "l2_address_length": 6,
    "l2_address": [2, 0, 0, 170, 187, 0, 0, 0],
    "interface_name": "loop0",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 2,
    "sup_sw_if_index": 2,
    "l2_address_length": 6,
    "l2_address": [2, 254, 62, 253, 97, 40, 0, 0],
    "interface_name": "host-node_1_noeth_1",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 3,
    "sup_sw_if_index": 3,
    "l2_address_length": 6,
    "l2_address": [2, 254, 66, 152, 34, 8, 0, 0],
    "interface_name": "host-node_2_noeth_2",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  }
]
vat# </msg>
<status status="PASS" endtime="20180516 15:18:28.802" starttime="20180516 15:18:28.802"></status>
</kw>
<msg timestamp="20180516 15:18:28.802" level="INFO">${out} = 
[ 
  {
    "sw_if_index": 0,
    "sup_sw_if_index": 0,
    "l2_address_length": 0,
    "l2_address": [0, 0, 0, 0, 0, 0, 0, 0],
    "interface_name": "local0",
    "admin_up_down": 0,
    "li...</msg>
<status status="PASS" endtime="20180516 15:18:28.802" starttime="20180516 15:18:25.762"></status>
</kw>
<msg timestamp="20180516 15:18:28.802" level="INFO">${interfaces} = 
[ 
  {
    "sw_if_index": 0,
    "sup_sw_if_index": 0,
    "l2_address_length": 0,
    "l2_address": [0, 0, 0, 0, 0, 0, 0, 0],
    "interface_name": "local0",
    "admin_up_down": 0,
    "li...</msg>
<status status="PASS" endtime="20180516 15:18:28.802" starttime="20180516 15:18:25.761"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${interfaces}</arg>
</arguments>
<msg timestamp="20180516 15:18:28.803" level="INFO">
[ 
  {
    "sw_if_index": 0,
    "sup_sw_if_index": 0,
    "l2_address_length": 0,
    "l2_address": [0, 0, 0, 0, 0, 0, 0, 0],
    "interface_name": "local0",
    "admin_up_down": 0,
    "link_up_down": 0,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 0,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 1,
    "sup_sw_if_index": 1,
    "l2_address_length": 6,
    "l2_address": [2, 0, 0, 170, 187, 0, 0, 0],
    "interface_name": "loop0",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 2,
    "sup_sw_if_index": 2,
    "l2_address_length": 6,
    "l2_address": [2, 254, 62, 253, 97, 40, 0, 0],
    "interface_name": "host-node_1_noeth_1",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 3,
    "sup_sw_if_index": 3,
    "l2_address_length": 6,
    "l2_address": [2, 254, 66, 152, 34, 8, 0, 0],
    "interface_name": "host-node_2_noeth_2",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  }
]
vat# </msg>
<status status="PASS" endtime="20180516 15:18:28.803" starttime="20180516 15:18:28.803"></status>
</kw>
<kw name="Get Interface State" library="vat_term">
<arguments>
<arg>${interfaces}</arg>
<arg>${internal_index}</arg>
</arguments>
<assign>
<var>${int_state}</var>
</assign>
<msg timestamp="20180516 15:18:28.803" level="INFO">${int_state} = {u'l2_address': [2, 254, 62, 253, 97, 40, 0, 0], u'sw_if_index': 2, u'vtr_push_dot1q': 0, u'link_up_down': 1, u'l2_address_length': 6, u'sub_outer_vlan_id': 0, u'sub_exact_match': 0, u'vtr_op': 0, u'v...</msg>
<status status="PASS" endtime="20180516 15:18:28.803" starttime="20180516 15:18:28.803"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${int_state}</arg>
</arguments>
<msg timestamp="20180516 15:18:28.804" level="INFO">{u'l2_address': [2, 254, 62, 253, 97, 40, 0, 0], u'sw_if_index': 2, u'vtr_push_dot1q': 0, u'link_up_down': 1, u'l2_address_length': 6, u'sub_outer_vlan_id': 0, u'sub_exact_match': 0, u'vtr_op': 0, u'vtr_tag2': 0, u'vtr_tag1': 0, u'sub_outer_vlan_id_any': 0, u'link_duplex': 0, u'sub_default': 0, u'sub_inner_vlan_id_any': 0, u'admin_up_down': 1, u'link_speed': 0, u'sub_inner_vlan_id': 0, u'sub_dot1ad': 0, u'sup_sw_if_index': 2, u'interface_name': u'host-node_1_noeth_1', u'sub_id': 0, u'mtu': 1500, u'sub_number_of_tags': 0}</msg>
<status status="PASS" endtime="20180516 15:18:28.804" starttime="20180516 15:18:28.804"></status>
</kw>
<kw name="vpp_term: Get Interface IPs" library="vpp_term">
<arguments>
<arg>${node}</arg>
<arg>${internal_name}</arg>
</arguments>
<assign>
<var>${ipv4_list}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${interface}</arg>
</arguments>
<msg timestamp="20180516 15:18:28.805" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:18:28.805" level="INFO">host-node_1_noeth_1</msg>
<status status="PASS" endtime="20180516 15:18:28.805" starttime="20180516 15:18:28.805"></status>
</kw>
<kw name="vpp_term: Show Interfaces Address" library="vpp_term">
<doc>Show interfaces address through vpp terminal</doc>
<arguments>
<arg>${node}</arg>
<arg>${interface}</arg>
</arguments>
<assign>
<var>${int_addr}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${interface}</arg>
</arguments>
<msg timestamp="20180516 15:18:28.806" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:18:28.806" level="INFO">host-node_1_noeth_1</msg>
<status status="PASS" endtime="20180516 15:18:28.806" starttime="20180516 15:18:28.806"></status>
</kw>
<kw name="vpp_term: Issue Command" library="vpp_term">
<arguments>
<arg>${node}</arg>
<arg>sh int addr ${interface}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${command}</arg>
<arg>${delay}</arg>
<arg>${node}_term</arg>
<arg>${${node}_VPP_TERM_PROMPT}</arg>
</arguments>
<msg timestamp="20180516 15:18:28.807" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:18:28.807" level="INFO">sh int addr host-node_1_noeth_1</msg>
<msg timestamp="20180516 15:18:28.808" level="INFO">3s</msg>
<msg timestamp="20180516 15:18:28.808" level="INFO">agent_vpp_1_term</msg>
<msg timestamp="20180516 15:18:28.808" level="INFO">vpp#</msg>
<status status="PASS" endtime="20180516 15:18:28.808" starttime="20180516 15:18:28.807"></status>
</kw>
<kw name="Write To Machine Until String" library="ssh">
<doc>*Write Machine ${machine} sh int addr host-node_1_noeth_1*</doc>
<arguments>
<arg>${node}_term</arg>
<arg>${command}</arg>
<arg>${${node}_VPP_TERM_PROMPT}</arg>
<arg>delay=${delay}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${string}</arg>
<arg>${delay}</arg>
</arguments>
<msg timestamp="20180516 15:18:28.814" level="INFO">agent_vpp_1_term</msg>
<msg timestamp="20180516 15:18:28.814" level="INFO">sh int addr host-node_1_noeth_1</msg>
<msg timestamp="20180516 15:18:28.814" level="INFO">vpp#</msg>
<msg timestamp="20180516 15:18:28.814" level="INFO">3s</msg>
<status status="PASS" endtime="20180516 15:18:28.814" starttime="20180516 15:18:28.814"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:28.814" starttime="20180516 15:18:28.814"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:18:28.815" level="INFO">${currdate} = 2018-05-16 15:18:28.815</msg>
<status status="PASS" endtime="20180516 15:18:28.815" starttime="20180516 15:18:28.815"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20180516 15:18:28.824" level="INFO">sh int addr host-node_1_noeth_1</msg>
<status status="PASS" endtime="20180516 15:18:28.825" starttime="20180516 15:18:28.815"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>${string}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20180516 15:18:28.827" level="INFO">host-node_1_noeth_1 (up):
  L2 bridge bd-id 1 idx 1 shg 0  
vpp#</msg>
<msg timestamp="20180516 15:18:28.827" level="INFO">${out} = host-node_1_noeth_1 (up):
  L2 bridge bd-id 1 idx 1 shg 0  
vpp#</msg>
<status status="PASS" endtime="20180516 15:18:28.827" starttime="20180516 15:18:28.826"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:18:28.828" level="INFO">host-node_1_noeth_1 (up):
  L2 bridge bd-id 1 idx 1 shg 0  
vpp#</msg>
<status status="PASS" endtime="20180516 15:18:28.828" starttime="20180516 15:18:28.827"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>delay=${delay}</arg>
</arguments>
<assign>
<var>${out2}</var>
</assign>
<msg timestamp="20180516 15:18:31.832" level="INFO">${out2} =  </msg>
<status status="PASS" endtime="20180516 15:18:31.832" starttime="20180516 15:18:28.828"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out2}</arg>
</arguments>
<msg timestamp="20180516 15:18:31.833" level="INFO"> </msg>
<status status="PASS" endtime="20180516 15:18:31.833" starttime="20180516 15:18:31.832"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${out2}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:18:31.834" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_term.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_term.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:18:31.834" starttime="20180516 15:18:31.833"></status>
</kw>
<msg timestamp="20180516 15:18:31.834" level="INFO">${out} = host-node_1_noeth_1 (up):
  L2 bridge bd-id 1 idx 1 shg 0  
vpp# </msg>
<status status="PASS" endtime="20180516 15:18:31.834" starttime="20180516 15:18:28.813"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:18:31.835" level="INFO">host-node_1_noeth_1 (up):
  L2 bridge bd-id 1 idx 1 shg 0  
vpp# </msg>
<status status="PASS" endtime="20180516 15:18:31.835" starttime="20180516 15:18:31.834"></status>
</kw>
<msg timestamp="20180516 15:18:31.835" level="INFO">${out} = host-node_1_noeth_1 (up):
  L2 bridge bd-id 1 idx 1 shg 0  
vpp# </msg>
<status status="PASS" endtime="20180516 15:18:31.835" starttime="20180516 15:18:28.807"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:18:31.836" level="INFO">host-node_1_noeth_1 (up):
  L2 bridge bd-id 1 idx 1 shg 0  
vpp# </msg>
<status status="PASS" endtime="20180516 15:18:31.836" starttime="20180516 15:18:31.835"></status>
</kw>
<msg timestamp="20180516 15:18:31.836" level="INFO">${int_addr} = host-node_1_noeth_1 (up):
  L2 bridge bd-id 1 idx 1 shg 0  
vpp# </msg>
<status status="PASS" endtime="20180516 15:18:31.836" starttime="20180516 15:18:28.806"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${int_addr}</arg>
</arguments>
<msg timestamp="20180516 15:18:31.837" level="INFO">host-node_1_noeth_1 (up):
  L2 bridge bd-id 1 idx 1 shg 0  
vpp# </msg>
<status status="PASS" endtime="20180516 15:18:31.837" starttime="20180516 15:18:31.837"></status>
</kw>
<kw name="Find IPV4 In Text" library="vpp_term">
<arguments>
<arg>${int_addr}</arg>
</arguments>
<assign>
<var>@{ipv4_list}</var>
</assign>
<msg timestamp="20180516 15:18:31.837" level="INFO">@{ipv4_list} = [ ]</msg>
<status status="PASS" endtime="20180516 15:18:31.837" starttime="20180516 15:18:31.837"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${ipv4_list}</arg>
</arguments>
<msg timestamp="20180516 15:18:31.838" level="INFO">[]</msg>
<status status="PASS" endtime="20180516 15:18:31.838" starttime="20180516 15:18:31.838"></status>
</kw>
<msg timestamp="20180516 15:18:31.838" level="INFO">${ipv4_list} = []</msg>
<status status="PASS" endtime="20180516 15:18:31.838" starttime="20180516 15:18:28.804"></status>
</kw>
<kw name="vpp_ctl: Get VPP Interface Config As Json" library="vpp_ctl">
<arguments>
<arg>${node}</arg>
<arg>${name}</arg>
</arguments>
<assign>
<var>${config}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${interface}</arg>
</arguments>
<msg timestamp="20180516 15:18:31.839" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:18:31.839" level="INFO">IF_AFPIF_VSWITCH_node_1_node1_veth</msg>
<status status="PASS" endtime="20180516 15:18:31.839" starttime="20180516 15:18:31.839"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/vnf-agent/${node}/vpp/config/v1/interface/${interface}</arg>
</arguments>
<assign>
<var>${key}</var>
</assign>
<msg timestamp="20180516 15:18:31.840" level="INFO">${key} = /vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth</msg>
<status status="PASS" endtime="20180516 15:18:31.840" starttime="20180516 15:18:31.839"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${key}</arg>
</arguments>
<msg timestamp="20180516 15:18:31.840" level="INFO">/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth</msg>
<status status="PASS" endtime="20180516 15:18:31.840" starttime="20180516 15:18:31.840"></status>
</kw>
<kw name="vpp_ctl: Read Key" library="vpp_ctl">
<arguments>
<arg>${key}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${key}</arg>
<arg>${container}</arg>
</arguments>
<msg timestamp="20180516 15:18:31.841" level="INFO">/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth</msg>
<msg timestamp="20180516 15:18:31.841" level="INFO">vpp_agent_ctl</msg>
<status status="PASS" endtime="20180516 15:18:31.841" starttime="20180516 15:18:31.841"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>vpp-agent-ctl ${AGENT_VPP_ETCD_CONF_PATH} -get ${key}</arg>
</arguments>
<assign>
<var>${command}</var>
</assign>
<msg timestamp="20180516 15:18:31.841" level="INFO">${command} = vpp-agent-ctl /opt/vpp-agent/dev/etcd.conf -get /vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth</msg>
<status status="PASS" endtime="20180516 15:18:31.841" starttime="20180516 15:18:31.841"></status>
</kw>
<kw name="Execute In Container" library="docker">
<arguments>
<arg>${container}</arg>
<arg>${command}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${container}</arg>
<arg>${command}</arg>
</arguments>
<msg timestamp="20180516 15:18:31.842" level="INFO">vpp_agent_ctl</msg>
<msg timestamp="20180516 15:18:31.843" level="INFO">vpp-agent-ctl /opt/vpp-agent/dev/etcd.conf -get /vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth</msg>
<status status="PASS" endtime="20180516 15:18:31.843" starttime="20180516 15:18:31.842"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>docker</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:31.844" starttime="20180516 15:18:31.843"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:18:31.844" level="INFO">${currdate} = 2018-05-16 15:18:31.844</msg>
<status status="PASS" endtime="20180516 15:18:31.844" starttime="20180516 15:18:31.844"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DOCKER_COMMAND} exec ${container} ${command}</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20180516 15:18:31.845" level="INFO">Executing command 'sudo docker exec vpp_agent_ctl vpp-agent-ctl /opt/vpp-agent/dev/etcd.conf -get /vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth'.</msg>
<msg timestamp="20180516 15:18:32.167" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:18:32.168" level="INFO">${out} = {"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","type":4,"enabled":true,"mtu":1500,"afpacket":{"host_if_name":"node_1_noeth_1"}}</msg>
<msg timestamp="20180516 15:18:32.168" level="INFO">${stderr} = time="2018-05-16 13:18:32.07862" level=info msg="Connecting to etcd took 4.086404ms" durationInNs=4086404 loc="etcdv3/bytes_broker_impl.go(84)" logger=defaultLogger</msg>
<msg timestamp="20180516 15:18:32.169" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20180516 15:18:32.169" starttime="20180516 15:18:31.844"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:18:32.169" level="INFO">{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","type":4,"enabled":true,"mtu":1500,"afpacket":{"host_if_name":"node_1_noeth_1"}}</msg>
<status status="PASS" endtime="20180516 15:18:32.170" starttime="20180516 15:18:32.169"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:18:32.170" level="INFO">time="2018-05-16 13:18:32.07862" level=info msg="Connecting to etcd took 4.086404ms" durationInNs=4086404 loc="etcdv3/bytes_broker_impl.go(84)" logger=defaultLogger</msg>
<status status="PASS" endtime="20180516 15:18:32.170" starttime="20180516 15:18:32.170"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${rc}</arg>
</arguments>
<msg timestamp="20180516 15:18:32.171" level="INFO">0</msg>
<status status="PASS" endtime="20180516 15:18:32.171" starttime="20180516 15:18:32.171"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:18:32.172" level="INFO">Length is 164</msg>
<msg timestamp="20180516 15:18:32.172" level="FAIL">'time="2018-05-16 13:18:32.07862" level=info msg="Connecting to etcd took 4.086404ms" durationInNs=4086404 loc="etcdv3/bytes_broker_impl.go(84)" logger=defaultLogger' should be empty.</msg>
<status status="FAIL" endtime="20180516 15:18:32.172" starttime="20180516 15:18:32.172"></status>
</kw>
<msg timestamp="20180516 15:18:32.172" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20180516 15:18:32.172" starttime="20180516 15:18:32.171"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} in container ${container}</arg>
<arg>level=WARN</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>One or more error occured during execution of a command ${command} in container ${container}</arg>
<arg>level=WARN</arg>
</arguments>
<msg timestamp="20180516 15:18:32.173" level="WARN">One or more error occured during execution of a command vpp-agent-ctl /opt/vpp-agent/dev/etcd.conf -get /vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth in container vpp_agent_ctl</msg>
<status status="PASS" endtime="20180516 15:18:32.174" starttime="20180516 15:18:32.173"></status>
</kw>
<status status="PASS" endtime="20180516 15:18:32.174" starttime="20180516 15:18:32.172"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${container}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}***</arg>
</arguments>
<msg timestamp="20180516 15:18:32.175" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_vpp_agent_ctl.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_vpp_agent_ctl.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:18:32.175" starttime="20180516 15:18:32.174"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${container}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${container}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:18:32.176" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_vpp_agent_ctl.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_vpp_agent_ctl.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:18:32.176" starttime="20180516 15:18:32.175"></status>
</kw>
<status status="PASS" endtime="20180516 15:18:32.176" starttime="20180516 15:18:32.175"></status>
</kw>
<msg timestamp="20180516 15:18:32.176" level="INFO">${out} = {"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","type":4,"enabled":true,"mtu":1500,"afpacket":{"host_if_name":"node_1_noeth_1"}}</msg>
<status status="PASS" endtime="20180516 15:18:32.176" starttime="20180516 15:18:31.842"></status>
</kw>
<msg timestamp="20180516 15:18:32.176" level="INFO">${data} = {"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","type":4,"enabled":true,"mtu":1500,"afpacket":{"host_if_name":"node_1_noeth_1"}}</msg>
<status status="PASS" endtime="20180516 15:18:32.176" starttime="20180516 15:18:31.840"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${data}</arg>
</arguments>
<msg timestamp="20180516 15:18:32.177" level="INFO">{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","type":4,"enabled":true,"mtu":1500,"afpacket":{"host_if_name":"node_1_noeth_1"}}</msg>
<status status="PASS" endtime="20180516 15:18:32.177" starttime="20180516 15:18:32.177"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'''${data}'''==""</arg>
<arg>{}</arg>
<arg>${data}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20180516 15:18:32.177" level="INFO">${data} = {"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","type":4,"enabled":true,"mtu":1500,"afpacket":{"host_if_name":"node_1_noeth_1"}}</msg>
<status status="PASS" endtime="20180516 15:18:32.177" starttime="20180516 15:18:32.177"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${data}</arg>
</arguments>
<msg timestamp="20180516 15:18:32.178" level="INFO">{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","type":4,"enabled":true,"mtu":1500,"afpacket":{"host_if_name":"node_1_noeth_1"}}</msg>
<status status="PASS" endtime="20180516 15:18:32.178" starttime="20180516 15:18:32.178"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>json.loads('''${data}''')</arg>
<arg>json</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180516 15:18:32.178" level="INFO">${output} = {u'enabled': True, u'afpacket': {u'host_if_name': u'node_1_noeth_1'}, u'type': 4, u'name': u'IF_AFPIF_VSWITCH_node_1_node1_veth', u'mtu': 1500}</msg>
<status status="PASS" endtime="20180516 15:18:32.178" starttime="20180516 15:18:32.178"></status>
</kw>
<msg timestamp="20180516 15:18:32.179" level="INFO">${config} = {u'enabled': True, u'afpacket': {u'host_if_name': u'node_1_noeth_1'}, u'type': 4, u'name': u'IF_AFPIF_VSWITCH_node_1_node1_veth', u'mtu': 1500}</msg>
<status status="PASS" endtime="20180516 15:18:32.179" starttime="20180516 15:18:31.838"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${config["afpacket"]["host_if_name"]}</arg>
</arguments>
<assign>
<var>${host_int}</var>
</assign>
<msg timestamp="20180516 15:18:32.179" level="INFO">${host_int} = node_1_noeth_1</msg>
<status status="PASS" endtime="20180516 15:18:32.179" starttime="20180516 15:18:32.179"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${int_state["admin_up_down"]}</arg>
</arguments>
<assign>
<var>${enabled}</var>
</assign>
<msg timestamp="20180516 15:18:32.180" level="INFO">${enabled} = 1</msg>
<status status="PASS" endtime="20180516 15:18:32.180" starttime="20180516 15:18:32.179"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${int_state["mtu"]}</arg>
</arguments>
<assign>
<var>${mtu}</var>
</assign>
<msg timestamp="20180516 15:18:32.180" level="INFO">${mtu} = 1500</msg>
<status status="PASS" endtime="20180516 15:18:32.180" starttime="20180516 15:18:32.180"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${int_state["l2_address"]}</arg>
</arguments>
<assign>
<var>${dec_mac}</var>
</assign>
<msg timestamp="20180516 15:18:32.181" level="INFO">${dec_mac} = [2, 254, 62, 253, 97, 40, 0, 0]</msg>
<status status="PASS" endtime="20180516 15:18:32.181" starttime="20180516 15:18:32.181"></status>
</kw>
<kw name="Convert Dec MAC To Hex" library="vat_term">
<arguments>
<arg>${dec_mac}</arg>
</arguments>
<assign>
<var>${mac}</var>
</assign>
<msg timestamp="20180516 15:18:32.181" level="INFO">${mac} = 02:fe:3e:fd:61:28</msg>
<status status="PASS" endtime="20180516 15:18:32.181" starttime="20180516 15:18:32.181"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>enabled=${enabled}</arg>
<arg>mtu=${mtu}</arg>
<arg>mac=${mac}</arg>
</arguments>
<assign>
<var>${actual_state}</var>
</assign>
<msg timestamp="20180516 15:18:32.182" level="INFO">${actual_state} = [u'enabled=1', u'mtu=1500', u'mac=02:fe:3e:fd:61:28']</msg>
<status status="PASS" endtime="20180516 15:18:32.182" starttime="20180516 15:18:32.182"></status>
</kw>
<kw type="for" name="${ip} IN [ @{ipv4_list} ]">
<status status="PASS" endtime="20180516 15:18:32.182" starttime="20180516 15:18:32.182"></status>
</kw>
<kw name="Log List" library="Collections">
<doc>Logs the length and contents of the ``list`` using given ``level``.</doc>
<arguments>
<arg>${actual_state}</arg>
</arguments>
<msg timestamp="20180516 15:18:32.183" level="INFO">List length is 3 and it contains following items:
0: enabled=1
1: mtu=1500
2: mac=02:fe:3e:fd:61:28</msg>
<status status="PASS" endtime="20180516 15:18:32.183" starttime="20180516 15:18:32.182"></status>
</kw>
<kw name="List Should Contain Sub List" library="Collections">
<doc>Fails if not all of the elements in ``list2`` are found in ``list1``.</doc>
<arguments>
<arg>${actual_state}</arg>
<arg>${desired_state}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:32.183" starttime="20180516 15:18:32.183"></status>
</kw>
<status status="PASS" endtime="20180516 15:18:32.183" starttime="20180516 15:18:22.270"></status>
</kw>
<kw name="vat_term: Check Afpacket Interface State" library="vat_term">
<arguments>
<arg>agent_vpp_1</arg>
<arg>IF_AFPIF_VSWITCH_node_2_node2_veth</arg>
<arg>enabled=1</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${name}</arg>
<arg>${desired_state}</arg>
</arguments>
<msg timestamp="20180516 15:18:32.186" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:18:32.191" level="INFO">IF_AFPIF_VSWITCH_node_2_node2_veth</msg>
<msg timestamp="20180516 15:18:32.191" level="INFO">[u'enabled=1']</msg>
<status status="PASS" endtime="20180516 15:18:32.191" starttime="20180516 15:18:32.186"></status>
</kw>
<kw name="vpp_ctl: Get Interface Internal Name" library="vpp_ctl">
<arguments>
<arg>${node}</arg>
<arg>${name}</arg>
</arguments>
<assign>
<var>${internal_name}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${interface}</arg>
</arguments>
<msg timestamp="20180516 15:18:32.192" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:18:32.192" level="INFO">IF_AFPIF_VSWITCH_node_2_node2_veth</msg>
<status status="PASS" endtime="20180516 15:18:32.192" starttime="20180516 15:18:32.192"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${name}</var>
</assign>
<msg timestamp="20180516 15:18:32.193" level="INFO">${name} = </msg>
<status status="PASS" endtime="20180516 15:18:32.193" starttime="20180516 15:18:32.193"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<assign>
<var>${empty_dict}</var>
</assign>
<msg timestamp="20180516 15:18:32.193" level="INFO">${empty_dict} = {}</msg>
<status status="PASS" endtime="20180516 15:18:32.193" starttime="20180516 15:18:32.193"></status>
</kw>
<kw name="vpp_ctl: Get VPP Interface State As Json" library="vpp_ctl">
<arguments>
<arg>${node}</arg>
<arg>${interface}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${interface}</arg>
</arguments>
<msg timestamp="20180516 15:18:32.195" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:18:32.195" level="INFO">IF_AFPIF_VSWITCH_node_2_node2_veth</msg>
<status status="PASS" endtime="20180516 15:18:32.195" starttime="20180516 15:18:32.194"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/vnf-agent/${node}/vpp/status/v1/interface/${interface}</arg>
</arguments>
<assign>
<var>${key}</var>
</assign>
<msg timestamp="20180516 15:18:32.195" level="INFO">${key} = /vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth</msg>
<status status="PASS" endtime="20180516 15:18:32.195" starttime="20180516 15:18:32.195"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${key}</arg>
</arguments>
<msg timestamp="20180516 15:18:32.196" level="INFO">/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth</msg>
<status status="PASS" endtime="20180516 15:18:32.196" starttime="20180516 15:18:32.196"></status>
</kw>
<kw name="vpp_ctl: Read Key" library="vpp_ctl">
<arguments>
<arg>${key}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${key}</arg>
<arg>${container}</arg>
</arguments>
<msg timestamp="20180516 15:18:32.205" level="INFO">/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth</msg>
<msg timestamp="20180516 15:18:32.205" level="INFO">vpp_agent_ctl</msg>
<status status="PASS" endtime="20180516 15:18:32.205" starttime="20180516 15:18:32.204"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>vpp-agent-ctl ${AGENT_VPP_ETCD_CONF_PATH} -get ${key}</arg>
</arguments>
<assign>
<var>${command}</var>
</assign>
<msg timestamp="20180516 15:18:32.206" level="INFO">${command} = vpp-agent-ctl /opt/vpp-agent/dev/etcd.conf -get /vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth</msg>
<status status="PASS" endtime="20180516 15:18:32.206" starttime="20180516 15:18:32.205"></status>
</kw>
<kw name="Execute In Container" library="docker">
<arguments>
<arg>${container}</arg>
<arg>${command}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${container}</arg>
<arg>${command}</arg>
</arguments>
<msg timestamp="20180516 15:18:32.207" level="INFO">vpp_agent_ctl</msg>
<msg timestamp="20180516 15:18:32.207" level="INFO">vpp-agent-ctl /opt/vpp-agent/dev/etcd.conf -get /vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth</msg>
<status status="PASS" endtime="20180516 15:18:32.207" starttime="20180516 15:18:32.206"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>docker</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:32.207" starttime="20180516 15:18:32.207"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:18:32.207" level="INFO">${currdate} = 2018-05-16 15:18:32.207</msg>
<status status="PASS" endtime="20180516 15:18:32.207" starttime="20180516 15:18:32.207"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DOCKER_COMMAND} exec ${container} ${command}</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20180516 15:18:32.213" level="INFO">Executing command 'sudo docker exec vpp_agent_ctl vpp-agent-ctl /opt/vpp-agent/dev/etcd.conf -get /vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth'.</msg>
<msg timestamp="20180516 15:18:32.439" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:18:32.439" level="INFO">${out} = {"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","internal_name":"host-node_2_noeth_2","if_index":3,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:42:98:22:08","mtu":1500,...</msg>
<msg timestamp="20180516 15:18:32.439" level="INFO">${stderr} = time="2018-05-16 13:18:32.34727" level=info msg="Connecting to etcd took 506.638µs" durationInNs=506638 loc="etcdv3/bytes_broker_impl.go(84)" logger=defaultLogger</msg>
<msg timestamp="20180516 15:18:32.439" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20180516 15:18:32.439" starttime="20180516 15:18:32.208"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:18:32.440" level="INFO">{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","internal_name":"host-node_2_noeth_2","if_index":3,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:42:98:22:08","mtu":1500,"statistics":{"in_packets":20,"in_bytes":1592}}</msg>
<status status="PASS" endtime="20180516 15:18:32.440" starttime="20180516 15:18:32.440"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:18:32.440" level="INFO">time="2018-05-16 13:18:32.34727" level=info msg="Connecting to etcd took 506.638µs" durationInNs=506638 loc="etcdv3/bytes_broker_impl.go(84)" logger=defaultLogger</msg>
<status status="PASS" endtime="20180516 15:18:32.441" starttime="20180516 15:18:32.440"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${rc}</arg>
</arguments>
<msg timestamp="20180516 15:18:32.441" level="INFO">0</msg>
<status status="PASS" endtime="20180516 15:18:32.441" starttime="20180516 15:18:32.441"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:18:32.442" level="INFO">Length is 162</msg>
<msg timestamp="20180516 15:18:32.442" level="FAIL">'time="2018-05-16 13:18:32.34727" level=info msg="Connecting to etcd took 506.638µs" durationInNs=506638 loc="etcdv3/bytes_broker_impl.go(84)" logger=defaultLogger' should be empty.</msg>
<status status="FAIL" endtime="20180516 15:18:32.442" starttime="20180516 15:18:32.442"></status>
</kw>
<msg timestamp="20180516 15:18:32.442" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20180516 15:18:32.442" starttime="20180516 15:18:32.441"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} in container ${container}</arg>
<arg>level=WARN</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>One or more error occured during execution of a command ${command} in container ${container}</arg>
<arg>level=WARN</arg>
</arguments>
<msg timestamp="20180516 15:18:32.443" level="WARN">One or more error occured during execution of a command vpp-agent-ctl /opt/vpp-agent/dev/etcd.conf -get /vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth in container vpp_agent_ctl</msg>
<status status="PASS" endtime="20180516 15:18:32.444" starttime="20180516 15:18:32.443"></status>
</kw>
<status status="PASS" endtime="20180516 15:18:32.444" starttime="20180516 15:18:32.442"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${container}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}***</arg>
</arguments>
<msg timestamp="20180516 15:18:32.445" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_vpp_agent_ctl.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_vpp_agent_ctl.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:18:32.445" starttime="20180516 15:18:32.444"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${container}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${container}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:18:32.446" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_vpp_agent_ctl.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_vpp_agent_ctl.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:18:32.446" starttime="20180516 15:18:32.445"></status>
</kw>
<status status="PASS" endtime="20180516 15:18:32.446" starttime="20180516 15:18:32.445"></status>
</kw>
<msg timestamp="20180516 15:18:32.446" level="INFO">${out} = {"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","internal_name":"host-node_2_noeth_2","if_index":3,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:42:98:22:08","mtu":1500,...</msg>
<status status="PASS" endtime="20180516 15:18:32.446" starttime="20180516 15:18:32.206"></status>
</kw>
<msg timestamp="20180516 15:18:32.446" level="INFO">${data} = {"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","internal_name":"host-node_2_noeth_2","if_index":3,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:42:98:22:08","mtu":1500,...</msg>
<status status="PASS" endtime="20180516 15:18:32.446" starttime="20180516 15:18:32.203"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${data}</arg>
</arguments>
<msg timestamp="20180516 15:18:32.447" level="INFO">{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","internal_name":"host-node_2_noeth_2","if_index":3,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:42:98:22:08","mtu":1500,"statistics":{"in_packets":20,"in_bytes":1592}}</msg>
<status status="PASS" endtime="20180516 15:18:32.447" starttime="20180516 15:18:32.447"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'''${data}'''==""</arg>
<arg>{}</arg>
<arg>${data}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20180516 15:18:32.447" level="INFO">${data} = {"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","internal_name":"host-node_2_noeth_2","if_index":3,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:42:98:22:08","mtu":1500,...</msg>
<status status="PASS" endtime="20180516 15:18:32.447" starttime="20180516 15:18:32.447"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${data}</arg>
</arguments>
<msg timestamp="20180516 15:18:32.448" level="INFO">{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","internal_name":"host-node_2_noeth_2","if_index":3,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:42:98:22:08","mtu":1500,"statistics":{"in_packets":20,"in_bytes":1592}}</msg>
<status status="PASS" endtime="20180516 15:18:32.448" starttime="20180516 15:18:32.448"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>json.loads('''${data}''')</arg>
<arg>json</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180516 15:18:32.448" level="INFO">${output} = {u'statistics': {u'in_packets': 20, u'in_bytes': 1592}, u'if_index': 3, u'name': u'IF_AFPIF_VSWITCH_node_2_node2_veth', u'admin_status': 1, u'mtu': 1500, u'oper_status': 1, u'internal_name': u'host-no...</msg>
<status status="PASS" endtime="20180516 15:18:32.448" starttime="20180516 15:18:32.448"></status>
</kw>
<msg timestamp="20180516 15:18:32.449" level="INFO">${state} = {u'statistics': {u'in_packets': 20, u'in_bytes': 1592}, u'if_index': 3, u'name': u'IF_AFPIF_VSWITCH_node_2_node2_veth', u'admin_status': 1, u'mtu': 1500, u'oper_status': 1, u'internal_name': u'host-no...</msg>
<status status="PASS" endtime="20180516 15:18:32.449" starttime="20180516 15:18:32.194"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${state}</arg>
</arguments>
<msg timestamp="20180516 15:18:32.449" level="INFO">{u'statistics': {u'in_packets': 20, u'in_bytes': 1592}, u'if_index': 3, u'name': u'IF_AFPIF_VSWITCH_node_2_node2_veth', u'admin_status': 1, u'mtu': 1500, u'oper_status': 1, u'internal_name': u'host-node_2_noeth_2', u'last_change': 1526476631, u'phys_address': u'02:fe:42:98:22:08'}</msg>
<status status="PASS" endtime="20180516 15:18:32.449" starttime="20180516 15:18:32.449"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${state}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20180516 15:18:32.450" level="INFO">Length is 9</msg>
<msg timestamp="20180516 15:18:32.450" level="INFO">${length} = 9</msg>
<status status="PASS" endtime="20180516 15:18:32.450" starttime="20180516 15:18:32.449"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20180516 15:18:32.450" level="INFO">9</msg>
<status status="PASS" endtime="20180516 15:18:32.451" starttime="20180516 15:18:32.450"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${length} != 0</arg>
<arg>Set Variable</arg>
<arg>${state["internal_name"]}</arg>
</arguments>
<assign>
<var>${name}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${state["internal_name"]}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:32.451" starttime="20180516 15:18:32.451"></status>
</kw>
<msg timestamp="20180516 15:18:32.452" level="INFO">${name} = host-node_2_noeth_2</msg>
<status status="PASS" endtime="20180516 15:18:32.452" starttime="20180516 15:18:32.451"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${name}</arg>
</arguments>
<msg timestamp="20180516 15:18:32.452" level="INFO">host-node_2_noeth_2</msg>
<status status="PASS" endtime="20180516 15:18:32.452" starttime="20180516 15:18:32.452"></status>
</kw>
<msg timestamp="20180516 15:18:32.452" level="INFO">${internal_name} = host-node_2_noeth_2</msg>
<status status="PASS" endtime="20180516 15:18:32.452" starttime="20180516 15:18:32.192"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${internal_name}</arg>
</arguments>
<msg timestamp="20180516 15:18:32.453" level="INFO">host-node_2_noeth_2</msg>
<status status="PASS" endtime="20180516 15:18:32.453" starttime="20180516 15:18:32.453"></status>
</kw>
<kw name="vat_term: Get Interface Index" library="vat_term">
<doc>Return interface index with specified name</doc>
<arguments>
<arg>${node}</arg>
<arg>${internal_name}</arg>
</arguments>
<assign>
<var>${internal_index}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${name}</arg>
</arguments>
<msg timestamp="20180516 15:18:32.455" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:18:32.455" level="INFO">host-node_2_noeth_2</msg>
<status status="PASS" endtime="20180516 15:18:32.455" starttime="20180516 15:18:32.454"></status>
</kw>
<kw name="vat_term: Interfaces Dump" library="vat_term">
<doc>Executing command sw_interface_dump</doc>
<arguments>
<arg>${node}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
</arguments>
<msg timestamp="20180516 15:18:32.461" level="INFO">agent_vpp_1</msg>
<status status="PASS" endtime="20180516 15:18:32.461" starttime="20180516 15:18:32.461"></status>
</kw>
<kw name="vat_term: Issue Command" library="vat_term">
<arguments>
<arg>${node}</arg>
<arg>sw_interface_dump</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${command}</arg>
<arg>${delay}</arg>
<arg>${node}_vat</arg>
<arg>${${node}_VPP_VAT_PROMPT}</arg>
</arguments>
<msg timestamp="20180516 15:18:32.462" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:18:32.462" level="INFO">sw_interface_dump</msg>
<msg timestamp="20180516 15:18:32.462" level="INFO">3s</msg>
<msg timestamp="20180516 15:18:32.462" level="INFO">agent_vpp_1_vat</msg>
<msg timestamp="20180516 15:18:32.462" level="INFO">vat#</msg>
<status status="PASS" endtime="20180516 15:18:32.462" starttime="20180516 15:18:32.462"></status>
</kw>
<kw name="Write To Machine Until String" library="ssh">
<doc>*Write Machine ${machine} sw_interface_dump*</doc>
<arguments>
<arg>${node}_vat</arg>
<arg>${command}</arg>
<arg>${${node}_VPP_VAT_PROMPT}</arg>
<arg>delay=${delay}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${string}</arg>
<arg>${delay}</arg>
</arguments>
<msg timestamp="20180516 15:18:32.478" level="INFO">agent_vpp_1_vat</msg>
<msg timestamp="20180516 15:18:32.478" level="INFO">sw_interface_dump</msg>
<msg timestamp="20180516 15:18:32.478" level="INFO">vat#</msg>
<msg timestamp="20180516 15:18:32.478" level="INFO">3s</msg>
<status status="PASS" endtime="20180516 15:18:32.478" starttime="20180516 15:18:32.477"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:32.479" starttime="20180516 15:18:32.478"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:18:32.479" level="INFO">${currdate} = 2018-05-16 15:18:32.479</msg>
<status status="PASS" endtime="20180516 15:18:32.479" starttime="20180516 15:18:32.479"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20180516 15:18:32.484" level="INFO">sw_interface_dump</msg>
<status status="PASS" endtime="20180516 15:18:32.485" starttime="20180516 15:18:32.479"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>${string}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20180516 15:18:32.530" level="INFO">[ 
  {
    "sw_if_index": 0,
    "sup_sw_if_index": 0,
    "l2_address_length": 0,
    "l2_address": [0, 0, 0, 0, 0, 0, 0, 0],
    "interface_name": "local0",
    "admin_up_down": 0,
    "link_up_down": 0,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 0,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 1,
    "sup_sw_if_index": 1,
    "l2_address_length": 6,
    "l2_address": [2, 0, 0, 170, 187, 0, 0, 0],
    "interface_name": "loop0",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 2,
    "sup_sw_if_index": 2,
    "l2_address_length": 6,
    "l2_address": [2, 254, 62, 253, 97, 40, 0, 0],
    "interface_name": "host-node_1_noeth_1",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 3,
    "sup_sw_if_index": 3,
    "l2_address_length": 6,
    "l2_address": [2, 254, 66, 152, 34, 8, 0, 0],
    "interface_name": "host-node_2_noeth_2",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  }
]
vat#</msg>
<msg timestamp="20180516 15:18:32.530" level="INFO">${out} = 
[ 
  {
    "sw_if_index": 0,
    "sup_sw_if_index": 0,
    "l2_address_length": 0,
    "l2_address": [0, 0, 0, 0, 0, 0, 0, 0],
    "interface_name": "local0",
    "admin_up_down": 0,
    "li...</msg>
<status status="PASS" endtime="20180516 15:18:32.530" starttime="20180516 15:18:32.485"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:18:32.531" level="INFO">
[ 
  {
    "sw_if_index": 0,
    "sup_sw_if_index": 0,
    "l2_address_length": 0,
    "l2_address": [0, 0, 0, 0, 0, 0, 0, 0],
    "interface_name": "local0",
    "admin_up_down": 0,
    "link_up_down": 0,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 0,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 1,
    "sup_sw_if_index": 1,
    "l2_address_length": 6,
    "l2_address": [2, 0, 0, 170, 187, 0, 0, 0],
    "interface_name": "loop0",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 2,
    "sup_sw_if_index": 2,
    "l2_address_length": 6,
    "l2_address": [2, 254, 62, 253, 97, 40, 0, 0],
    "interface_name": "host-node_1_noeth_1",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 3,
    "sup_sw_if_index": 3,
    "l2_address_length": 6,
    "l2_address": [2, 254, 66, 152, 34, 8, 0, 0],
    "interface_name": "host-node_2_noeth_2",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  }
]
vat#</msg>
<status status="PASS" endtime="20180516 15:18:32.531" starttime="20180516 15:18:32.530"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>delay=${delay}</arg>
</arguments>
<assign>
<var>${out2}</var>
</assign>
<msg timestamp="20180516 15:18:35.532" level="INFO">${out2} =  </msg>
<status status="PASS" endtime="20180516 15:18:35.532" starttime="20180516 15:18:32.531"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out2}</arg>
</arguments>
<msg timestamp="20180516 15:18:35.533" level="INFO"> </msg>
<status status="PASS" endtime="20180516 15:18:35.533" starttime="20180516 15:18:35.533"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${out2}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:18:35.534" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_vat.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_vat.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:18:35.534" starttime="20180516 15:18:35.533"></status>
</kw>
<msg timestamp="20180516 15:18:35.534" level="INFO">${out} = 
[ 
  {
    "sw_if_index": 0,
    "sup_sw_if_index": 0,
    "l2_address_length": 0,
    "l2_address": [0, 0, 0, 0, 0, 0, 0, 0],
    "interface_name": "local0",
    "admin_up_down": 0,
    "li...</msg>
<status status="PASS" endtime="20180516 15:18:35.534" starttime="20180516 15:18:32.475"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:18:35.535" level="INFO">
[ 
  {
    "sw_if_index": 0,
    "sup_sw_if_index": 0,
    "l2_address_length": 0,
    "l2_address": [0, 0, 0, 0, 0, 0, 0, 0],
    "interface_name": "local0",
    "admin_up_down": 0,
    "link_up_down": 0,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 0,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 1,
    "sup_sw_if_index": 1,
    "l2_address_length": 6,
    "l2_address": [2, 0, 0, 170, 187, 0, 0, 0],
    "interface_name": "loop0",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 2,
    "sup_sw_if_index": 2,
    "l2_address_length": 6,
    "l2_address": [2, 254, 62, 253, 97, 40, 0, 0],
    "interface_name": "host-node_1_noeth_1",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 3,
    "sup_sw_if_index": 3,
    "l2_address_length": 6,
    "l2_address": [2, 254, 66, 152, 34, 8, 0, 0],
    "interface_name": "host-node_2_noeth_2",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  }
]
vat# </msg>
<status status="PASS" endtime="20180516 15:18:35.535" starttime="20180516 15:18:35.534"></status>
</kw>
<msg timestamp="20180516 15:18:35.535" level="INFO">${out} = 
[ 
  {
    "sw_if_index": 0,
    "sup_sw_if_index": 0,
    "l2_address_length": 0,
    "l2_address": [0, 0, 0, 0, 0, 0, 0, 0],
    "interface_name": "local0",
    "admin_up_down": 0,
    "li...</msg>
<status status="PASS" endtime="20180516 15:18:35.535" starttime="20180516 15:18:32.461"></status>
</kw>
<msg timestamp="20180516 15:18:35.535" level="INFO">${out} = 
[ 
  {
    "sw_if_index": 0,
    "sup_sw_if_index": 0,
    "l2_address_length": 0,
    "l2_address": [0, 0, 0, 0, 0, 0, 0, 0],
    "interface_name": "local0",
    "admin_up_down": 0,
    "li...</msg>
<status status="PASS" endtime="20180516 15:18:35.535" starttime="20180516 15:18:32.455"></status>
</kw>
<kw name="Get Interface Index" library="vat_term">
<arguments>
<arg>${out}</arg>
<arg>${name}</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg timestamp="20180516 15:18:35.536" level="INFO">${index} = 3</msg>
<status status="PASS" endtime="20180516 15:18:35.536" starttime="20180516 15:18:35.536"></status>
</kw>
<msg timestamp="20180516 15:18:35.536" level="INFO">${internal_index} = 3</msg>
<status status="PASS" endtime="20180516 15:18:35.536" starttime="20180516 15:18:32.453"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${internal_index}</arg>
</arguments>
<msg timestamp="20180516 15:18:35.537" level="INFO">3</msg>
<status status="PASS" endtime="20180516 15:18:35.537" starttime="20180516 15:18:35.536"></status>
</kw>
<kw name="vat_term: Interfaces Dump" library="vat_term">
<doc>Executing command sw_interface_dump</doc>
<arguments>
<arg>${node}</arg>
</arguments>
<assign>
<var>${interfaces}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
</arguments>
<msg timestamp="20180516 15:18:35.537" level="INFO">agent_vpp_1</msg>
<status status="PASS" endtime="20180516 15:18:35.538" starttime="20180516 15:18:35.537"></status>
</kw>
<kw name="vat_term: Issue Command" library="vat_term">
<arguments>
<arg>${node}</arg>
<arg>sw_interface_dump</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${command}</arg>
<arg>${delay}</arg>
<arg>${node}_vat</arg>
<arg>${${node}_VPP_VAT_PROMPT}</arg>
</arguments>
<msg timestamp="20180516 15:18:35.538" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:18:35.538" level="INFO">sw_interface_dump</msg>
<msg timestamp="20180516 15:18:35.539" level="INFO">3s</msg>
<msg timestamp="20180516 15:18:35.539" level="INFO">agent_vpp_1_vat</msg>
<msg timestamp="20180516 15:18:35.539" level="INFO">vat#</msg>
<status status="PASS" endtime="20180516 15:18:35.539" starttime="20180516 15:18:35.538"></status>
</kw>
<kw name="Write To Machine Until String" library="ssh">
<doc>*Write Machine ${machine} sw_interface_dump*</doc>
<arguments>
<arg>${node}_vat</arg>
<arg>${command}</arg>
<arg>${${node}_VPP_VAT_PROMPT}</arg>
<arg>delay=${delay}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${string}</arg>
<arg>${delay}</arg>
</arguments>
<msg timestamp="20180516 15:18:35.544" level="INFO">agent_vpp_1_vat</msg>
<msg timestamp="20180516 15:18:35.544" level="INFO">sw_interface_dump</msg>
<msg timestamp="20180516 15:18:35.544" level="INFO">vat#</msg>
<msg timestamp="20180516 15:18:35.544" level="INFO">3s</msg>
<status status="PASS" endtime="20180516 15:18:35.544" starttime="20180516 15:18:35.544"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:35.545" starttime="20180516 15:18:35.545"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:18:35.545" level="INFO">${currdate} = 2018-05-16 15:18:35.545</msg>
<status status="PASS" endtime="20180516 15:18:35.545" starttime="20180516 15:18:35.545"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20180516 15:18:35.547" level="INFO">sw_interface_dump</msg>
<status status="PASS" endtime="20180516 15:18:35.547" starttime="20180516 15:18:35.546"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>${string}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20180516 15:18:35.569" level="INFO">[ 
  {
    "sw_if_index": 0,
    "sup_sw_if_index": 0,
    "l2_address_length": 0,
    "l2_address": [0, 0, 0, 0, 0, 0, 0, 0],
    "interface_name": "local0",
    "admin_up_down": 0,
    "link_up_down": 0,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 0,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 1,
    "sup_sw_if_index": 1,
    "l2_address_length": 6,
    "l2_address": [2, 0, 0, 170, 187, 0, 0, 0],
    "interface_name": "loop0",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 2,
    "sup_sw_if_index": 2,
    "l2_address_length": 6,
    "l2_address": [2, 254, 62, 253, 97, 40, 0, 0],
    "interface_name": "host-node_1_noeth_1",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 3,
    "sup_sw_if_index": 3,
    "l2_address_length": 6,
    "l2_address": [2, 254, 66, 152, 34, 8, 0, 0],
    "interface_name": "host-node_2_noeth_2",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  }
]
vat#</msg>
<msg timestamp="20180516 15:18:35.569" level="INFO">${out} = 
[ 
  {
    "sw_if_index": 0,
    "sup_sw_if_index": 0,
    "l2_address_length": 0,
    "l2_address": [0, 0, 0, 0, 0, 0, 0, 0],
    "interface_name": "local0",
    "admin_up_down": 0,
    "li...</msg>
<status status="PASS" endtime="20180516 15:18:35.569" starttime="20180516 15:18:35.548"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:18:35.570" level="INFO">
[ 
  {
    "sw_if_index": 0,
    "sup_sw_if_index": 0,
    "l2_address_length": 0,
    "l2_address": [0, 0, 0, 0, 0, 0, 0, 0],
    "interface_name": "local0",
    "admin_up_down": 0,
    "link_up_down": 0,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 0,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 1,
    "sup_sw_if_index": 1,
    "l2_address_length": 6,
    "l2_address": [2, 0, 0, 170, 187, 0, 0, 0],
    "interface_name": "loop0",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 2,
    "sup_sw_if_index": 2,
    "l2_address_length": 6,
    "l2_address": [2, 254, 62, 253, 97, 40, 0, 0],
    "interface_name": "host-node_1_noeth_1",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 3,
    "sup_sw_if_index": 3,
    "l2_address_length": 6,
    "l2_address": [2, 254, 66, 152, 34, 8, 0, 0],
    "interface_name": "host-node_2_noeth_2",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  }
]
vat#</msg>
<status status="PASS" endtime="20180516 15:18:35.570" starttime="20180516 15:18:35.570"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>delay=${delay}</arg>
</arguments>
<assign>
<var>${out2}</var>
</assign>
<msg timestamp="20180516 15:18:38.574" level="INFO">${out2} =  </msg>
<status status="PASS" endtime="20180516 15:18:38.575" starttime="20180516 15:18:35.570"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out2}</arg>
</arguments>
<msg timestamp="20180516 15:18:38.575" level="INFO"> </msg>
<status status="PASS" endtime="20180516 15:18:38.575" starttime="20180516 15:18:38.575"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${out2}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:18:38.576" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_vat.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_vat.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:18:38.576" starttime="20180516 15:18:38.575"></status>
</kw>
<msg timestamp="20180516 15:18:38.576" level="INFO">${out} = 
[ 
  {
    "sw_if_index": 0,
    "sup_sw_if_index": 0,
    "l2_address_length": 0,
    "l2_address": [0, 0, 0, 0, 0, 0, 0, 0],
    "interface_name": "local0",
    "admin_up_down": 0,
    "li...</msg>
<status status="PASS" endtime="20180516 15:18:38.576" starttime="20180516 15:18:35.543"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:18:38.577" level="INFO">
[ 
  {
    "sw_if_index": 0,
    "sup_sw_if_index": 0,
    "l2_address_length": 0,
    "l2_address": [0, 0, 0, 0, 0, 0, 0, 0],
    "interface_name": "local0",
    "admin_up_down": 0,
    "link_up_down": 0,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 0,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 1,
    "sup_sw_if_index": 1,
    "l2_address_length": 6,
    "l2_address": [2, 0, 0, 170, 187, 0, 0, 0],
    "interface_name": "loop0",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 2,
    "sup_sw_if_index": 2,
    "l2_address_length": 6,
    "l2_address": [2, 254, 62, 253, 97, 40, 0, 0],
    "interface_name": "host-node_1_noeth_1",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 3,
    "sup_sw_if_index": 3,
    "l2_address_length": 6,
    "l2_address": [2, 254, 66, 152, 34, 8, 0, 0],
    "interface_name": "host-node_2_noeth_2",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  }
]
vat# </msg>
<status status="PASS" endtime="20180516 15:18:38.577" starttime="20180516 15:18:38.577"></status>
</kw>
<msg timestamp="20180516 15:18:38.577" level="INFO">${out} = 
[ 
  {
    "sw_if_index": 0,
    "sup_sw_if_index": 0,
    "l2_address_length": 0,
    "l2_address": [0, 0, 0, 0, 0, 0, 0, 0],
    "interface_name": "local0",
    "admin_up_down": 0,
    "li...</msg>
<status status="PASS" endtime="20180516 15:18:38.577" starttime="20180516 15:18:35.538"></status>
</kw>
<msg timestamp="20180516 15:18:38.577" level="INFO">${interfaces} = 
[ 
  {
    "sw_if_index": 0,
    "sup_sw_if_index": 0,
    "l2_address_length": 0,
    "l2_address": [0, 0, 0, 0, 0, 0, 0, 0],
    "interface_name": "local0",
    "admin_up_down": 0,
    "li...</msg>
<status status="PASS" endtime="20180516 15:18:38.577" starttime="20180516 15:18:35.537"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${interfaces}</arg>
</arguments>
<msg timestamp="20180516 15:18:38.578" level="INFO">
[ 
  {
    "sw_if_index": 0,
    "sup_sw_if_index": 0,
    "l2_address_length": 0,
    "l2_address": [0, 0, 0, 0, 0, 0, 0, 0],
    "interface_name": "local0",
    "admin_up_down": 0,
    "link_up_down": 0,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 0,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 1,
    "sup_sw_if_index": 1,
    "l2_address_length": 6,
    "l2_address": [2, 0, 0, 170, 187, 0, 0, 0],
    "interface_name": "loop0",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 2,
    "sup_sw_if_index": 2,
    "l2_address_length": 6,
    "l2_address": [2, 254, 62, 253, 97, 40, 0, 0],
    "interface_name": "host-node_1_noeth_1",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 3,
    "sup_sw_if_index": 3,
    "l2_address_length": 6,
    "l2_address": [2, 254, 66, 152, 34, 8, 0, 0],
    "interface_name": "host-node_2_noeth_2",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  }
]
vat# </msg>
<status status="PASS" endtime="20180516 15:18:38.578" starttime="20180516 15:18:38.578"></status>
</kw>
<kw name="Get Interface State" library="vat_term">
<arguments>
<arg>${interfaces}</arg>
<arg>${internal_index}</arg>
</arguments>
<assign>
<var>${int_state}</var>
</assign>
<msg timestamp="20180516 15:18:38.578" level="INFO">${int_state} = {u'l2_address': [2, 254, 66, 152, 34, 8, 0, 0], u'sw_if_index': 3, u'vtr_push_dot1q': 0, u'link_up_down': 1, u'l2_address_length': 6, u'sub_outer_vlan_id': 0, u'sub_exact_match': 0, u'vtr_op': 0, u'vt...</msg>
<status status="PASS" endtime="20180516 15:18:38.578" starttime="20180516 15:18:38.578"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${int_state}</arg>
</arguments>
<msg timestamp="20180516 15:18:38.579" level="INFO">{u'l2_address': [2, 254, 66, 152, 34, 8, 0, 0], u'sw_if_index': 3, u'vtr_push_dot1q': 0, u'link_up_down': 1, u'l2_address_length': 6, u'sub_outer_vlan_id': 0, u'sub_exact_match': 0, u'vtr_op': 0, u'vtr_tag2': 0, u'vtr_tag1': 0, u'sub_outer_vlan_id_any': 0, u'link_duplex': 0, u'sub_default': 0, u'sub_inner_vlan_id_any': 0, u'admin_up_down': 1, u'link_speed': 0, u'sub_inner_vlan_id': 0, u'sub_dot1ad': 0, u'sup_sw_if_index': 3, u'interface_name': u'host-node_2_noeth_2', u'sub_id': 0, u'mtu': 1500, u'sub_number_of_tags': 0}</msg>
<status status="PASS" endtime="20180516 15:18:38.579" starttime="20180516 15:18:38.579"></status>
</kw>
<kw name="vpp_term: Get Interface IPs" library="vpp_term">
<arguments>
<arg>${node}</arg>
<arg>${internal_name}</arg>
</arguments>
<assign>
<var>${ipv4_list}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${interface}</arg>
</arguments>
<msg timestamp="20180516 15:18:38.580" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:18:38.580" level="INFO">host-node_2_noeth_2</msg>
<status status="PASS" endtime="20180516 15:18:38.580" starttime="20180516 15:18:38.580"></status>
</kw>
<kw name="vpp_term: Show Interfaces Address" library="vpp_term">
<doc>Show interfaces address through vpp terminal</doc>
<arguments>
<arg>${node}</arg>
<arg>${interface}</arg>
</arguments>
<assign>
<var>${int_addr}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${interface}</arg>
</arguments>
<msg timestamp="20180516 15:18:38.581" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:18:38.581" level="INFO">host-node_2_noeth_2</msg>
<status status="PASS" endtime="20180516 15:18:38.581" starttime="20180516 15:18:38.581"></status>
</kw>
<kw name="vpp_term: Issue Command" library="vpp_term">
<arguments>
<arg>${node}</arg>
<arg>sh int addr ${interface}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${command}</arg>
<arg>${delay}</arg>
<arg>${node}_term</arg>
<arg>${${node}_VPP_TERM_PROMPT}</arg>
</arguments>
<msg timestamp="20180516 15:18:38.585" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:18:38.585" level="INFO">sh int addr host-node_2_noeth_2</msg>
<msg timestamp="20180516 15:18:38.585" level="INFO">3s</msg>
<msg timestamp="20180516 15:18:38.585" level="INFO">agent_vpp_1_term</msg>
<msg timestamp="20180516 15:18:38.585" level="INFO">vpp#</msg>
<status status="PASS" endtime="20180516 15:18:38.585" starttime="20180516 15:18:38.582"></status>
</kw>
<kw name="Write To Machine Until String" library="ssh">
<doc>*Write Machine ${machine} sh int addr host-node_2_noeth_2*</doc>
<arguments>
<arg>${node}_term</arg>
<arg>${command}</arg>
<arg>${${node}_VPP_TERM_PROMPT}</arg>
<arg>delay=${delay}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${string}</arg>
<arg>${delay}</arg>
</arguments>
<msg timestamp="20180516 15:18:38.600" level="INFO">agent_vpp_1_term</msg>
<msg timestamp="20180516 15:18:38.600" level="INFO">sh int addr host-node_2_noeth_2</msg>
<msg timestamp="20180516 15:18:38.600" level="INFO">vpp#</msg>
<msg timestamp="20180516 15:18:38.600" level="INFO">3s</msg>
<status status="PASS" endtime="20180516 15:18:38.600" starttime="20180516 15:18:38.600"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:38.602" starttime="20180516 15:18:38.600"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:18:38.602" level="INFO">${currdate} = 2018-05-16 15:18:38.602</msg>
<status status="PASS" endtime="20180516 15:18:38.602" starttime="20180516 15:18:38.602"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20180516 15:18:38.613" level="INFO">sh int addr host-node_2_noeth_2</msg>
<status status="PASS" endtime="20180516 15:18:38.614" starttime="20180516 15:18:38.602"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>${string}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20180516 15:18:38.614" level="INFO">host-node_2_noeth_2 (up):
  L2 bridge bd-id 1 idx 1 shg 0  
vpp#</msg>
<msg timestamp="20180516 15:18:38.615" level="INFO">${out} = host-node_2_noeth_2 (up):
  L2 bridge bd-id 1 idx 1 shg 0  
vpp#</msg>
<status status="PASS" endtime="20180516 15:18:38.615" starttime="20180516 15:18:38.614"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:18:38.615" level="INFO">host-node_2_noeth_2 (up):
  L2 bridge bd-id 1 idx 1 shg 0  
vpp#</msg>
<status status="PASS" endtime="20180516 15:18:38.615" starttime="20180516 15:18:38.615"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>delay=${delay}</arg>
</arguments>
<assign>
<var>${out2}</var>
</assign>
<msg timestamp="20180516 15:18:41.617" level="INFO">${out2} =  </msg>
<status status="PASS" endtime="20180516 15:18:41.617" starttime="20180516 15:18:38.615"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out2}</arg>
</arguments>
<msg timestamp="20180516 15:18:41.618" level="INFO"> </msg>
<status status="PASS" endtime="20180516 15:18:41.618" starttime="20180516 15:18:41.617"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${out2}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:18:41.619" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_term.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_term.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:18:41.619" starttime="20180516 15:18:41.618"></status>
</kw>
<msg timestamp="20180516 15:18:41.619" level="INFO">${out} = host-node_2_noeth_2 (up):
  L2 bridge bd-id 1 idx 1 shg 0  
vpp# </msg>
<status status="PASS" endtime="20180516 15:18:41.619" starttime="20180516 15:18:38.599"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:18:41.619" level="INFO">host-node_2_noeth_2 (up):
  L2 bridge bd-id 1 idx 1 shg 0  
vpp# </msg>
<status status="PASS" endtime="20180516 15:18:41.619" starttime="20180516 15:18:41.619"></status>
</kw>
<msg timestamp="20180516 15:18:41.620" level="INFO">${out} = host-node_2_noeth_2 (up):
  L2 bridge bd-id 1 idx 1 shg 0  
vpp# </msg>
<status status="PASS" endtime="20180516 15:18:41.620" starttime="20180516 15:18:38.581"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:18:41.620" level="INFO">host-node_2_noeth_2 (up):
  L2 bridge bd-id 1 idx 1 shg 0  
vpp# </msg>
<status status="PASS" endtime="20180516 15:18:41.620" starttime="20180516 15:18:41.620"></status>
</kw>
<msg timestamp="20180516 15:18:41.620" level="INFO">${int_addr} = host-node_2_noeth_2 (up):
  L2 bridge bd-id 1 idx 1 shg 0  
vpp# </msg>
<status status="PASS" endtime="20180516 15:18:41.620" starttime="20180516 15:18:38.580"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${int_addr}</arg>
</arguments>
<msg timestamp="20180516 15:18:41.621" level="INFO">host-node_2_noeth_2 (up):
  L2 bridge bd-id 1 idx 1 shg 0  
vpp# </msg>
<status status="PASS" endtime="20180516 15:18:41.621" starttime="20180516 15:18:41.621"></status>
</kw>
<kw name="Find IPV4 In Text" library="vpp_term">
<arguments>
<arg>${int_addr}</arg>
</arguments>
<assign>
<var>@{ipv4_list}</var>
</assign>
<msg timestamp="20180516 15:18:41.622" level="INFO">@{ipv4_list} = [ ]</msg>
<status status="PASS" endtime="20180516 15:18:41.622" starttime="20180516 15:18:41.621"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${ipv4_list}</arg>
</arguments>
<msg timestamp="20180516 15:18:41.622" level="INFO">[]</msg>
<status status="PASS" endtime="20180516 15:18:41.622" starttime="20180516 15:18:41.622"></status>
</kw>
<msg timestamp="20180516 15:18:41.622" level="INFO">${ipv4_list} = []</msg>
<status status="PASS" endtime="20180516 15:18:41.622" starttime="20180516 15:18:38.579"></status>
</kw>
<kw name="vpp_ctl: Get VPP Interface Config As Json" library="vpp_ctl">
<arguments>
<arg>${node}</arg>
<arg>${name}</arg>
</arguments>
<assign>
<var>${config}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${interface}</arg>
</arguments>
<msg timestamp="20180516 15:18:41.623" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:18:41.624" level="INFO">IF_AFPIF_VSWITCH_node_2_node2_veth</msg>
<status status="PASS" endtime="20180516 15:18:41.624" starttime="20180516 15:18:41.623"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/vnf-agent/${node}/vpp/config/v1/interface/${interface}</arg>
</arguments>
<assign>
<var>${key}</var>
</assign>
<msg timestamp="20180516 15:18:41.625" level="INFO">${key} = /vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth</msg>
<status status="PASS" endtime="20180516 15:18:41.625" starttime="20180516 15:18:41.624"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${key}</arg>
</arguments>
<msg timestamp="20180516 15:18:41.625" level="INFO">/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth</msg>
<status status="PASS" endtime="20180516 15:18:41.625" starttime="20180516 15:18:41.625"></status>
</kw>
<kw name="vpp_ctl: Read Key" library="vpp_ctl">
<arguments>
<arg>${key}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${key}</arg>
<arg>${container}</arg>
</arguments>
<msg timestamp="20180516 15:18:41.626" level="INFO">/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth</msg>
<msg timestamp="20180516 15:18:41.626" level="INFO">vpp_agent_ctl</msg>
<status status="PASS" endtime="20180516 15:18:41.626" starttime="20180516 15:18:41.626"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>vpp-agent-ctl ${AGENT_VPP_ETCD_CONF_PATH} -get ${key}</arg>
</arguments>
<assign>
<var>${command}</var>
</assign>
<msg timestamp="20180516 15:18:41.627" level="INFO">${command} = vpp-agent-ctl /opt/vpp-agent/dev/etcd.conf -get /vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth</msg>
<status status="PASS" endtime="20180516 15:18:41.627" starttime="20180516 15:18:41.626"></status>
</kw>
<kw name="Execute In Container" library="docker">
<arguments>
<arg>${container}</arg>
<arg>${command}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${container}</arg>
<arg>${command}</arg>
</arguments>
<msg timestamp="20180516 15:18:41.628" level="INFO">vpp_agent_ctl</msg>
<msg timestamp="20180516 15:18:41.628" level="INFO">vpp-agent-ctl /opt/vpp-agent/dev/etcd.conf -get /vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth</msg>
<status status="PASS" endtime="20180516 15:18:41.628" starttime="20180516 15:18:41.627"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>docker</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:41.628" starttime="20180516 15:18:41.628"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:18:41.629" level="INFO">${currdate} = 2018-05-16 15:18:41.629</msg>
<status status="PASS" endtime="20180516 15:18:41.629" starttime="20180516 15:18:41.629"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DOCKER_COMMAND} exec ${container} ${command}</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20180516 15:18:41.629" level="INFO">Executing command 'sudo docker exec vpp_agent_ctl vpp-agent-ctl /opt/vpp-agent/dev/etcd.conf -get /vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth'.</msg>
<msg timestamp="20180516 15:18:41.944" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:18:41.944" level="INFO">${out} = {"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","type":4,"enabled":true,"mtu":1500,"afpacket":{"host_if_name":"node_2_noeth_2"}}</msg>
<msg timestamp="20180516 15:18:41.944" level="INFO">${stderr} = time="2018-05-16 13:18:41.84790" level=info msg="Connecting to etcd took 555.641µs" durationInNs=555641 loc="etcdv3/bytes_broker_impl.go(84)" logger=defaultLogger</msg>
<msg timestamp="20180516 15:18:41.945" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20180516 15:18:41.945" starttime="20180516 15:18:41.629"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:18:41.945" level="INFO">{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","type":4,"enabled":true,"mtu":1500,"afpacket":{"host_if_name":"node_2_noeth_2"}}</msg>
<status status="PASS" endtime="20180516 15:18:41.945" starttime="20180516 15:18:41.945"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:18:41.946" level="INFO">time="2018-05-16 13:18:41.84790" level=info msg="Connecting to etcd took 555.641µs" durationInNs=555641 loc="etcdv3/bytes_broker_impl.go(84)" logger=defaultLogger</msg>
<status status="PASS" endtime="20180516 15:18:41.946" starttime="20180516 15:18:41.945"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${rc}</arg>
</arguments>
<msg timestamp="20180516 15:18:41.946" level="INFO">0</msg>
<status status="PASS" endtime="20180516 15:18:41.946" starttime="20180516 15:18:41.946"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:18:41.947" level="INFO">Length is 162</msg>
<msg timestamp="20180516 15:18:41.948" level="FAIL">'time="2018-05-16 13:18:41.84790" level=info msg="Connecting to etcd took 555.641µs" durationInNs=555641 loc="etcdv3/bytes_broker_impl.go(84)" logger=defaultLogger' should be empty.</msg>
<status status="FAIL" endtime="20180516 15:18:41.948" starttime="20180516 15:18:41.947"></status>
</kw>
<msg timestamp="20180516 15:18:41.948" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20180516 15:18:41.948" starttime="20180516 15:18:41.947"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} in container ${container}</arg>
<arg>level=WARN</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>One or more error occured during execution of a command ${command} in container ${container}</arg>
<arg>level=WARN</arg>
</arguments>
<msg timestamp="20180516 15:18:41.949" level="WARN">One or more error occured during execution of a command vpp-agent-ctl /opt/vpp-agent/dev/etcd.conf -get /vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth in container vpp_agent_ctl</msg>
<status status="PASS" endtime="20180516 15:18:41.949" starttime="20180516 15:18:41.949"></status>
</kw>
<status status="PASS" endtime="20180516 15:18:41.950" starttime="20180516 15:18:41.948"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${container}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}***</arg>
</arguments>
<msg timestamp="20180516 15:18:41.951" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_vpp_agent_ctl.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_vpp_agent_ctl.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:18:41.951" starttime="20180516 15:18:41.950"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${container}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${container}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:18:41.952" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_vpp_agent_ctl.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_vpp_agent_ctl.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:18:41.952" starttime="20180516 15:18:41.951"></status>
</kw>
<status status="PASS" endtime="20180516 15:18:41.952" starttime="20180516 15:18:41.951"></status>
</kw>
<msg timestamp="20180516 15:18:41.952" level="INFO">${out} = {"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","type":4,"enabled":true,"mtu":1500,"afpacket":{"host_if_name":"node_2_noeth_2"}}</msg>
<status status="PASS" endtime="20180516 15:18:41.952" starttime="20180516 15:18:41.627"></status>
</kw>
<msg timestamp="20180516 15:18:41.952" level="INFO">${data} = {"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","type":4,"enabled":true,"mtu":1500,"afpacket":{"host_if_name":"node_2_noeth_2"}}</msg>
<status status="PASS" endtime="20180516 15:18:41.952" starttime="20180516 15:18:41.625"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${data}</arg>
</arguments>
<msg timestamp="20180516 15:18:41.953" level="INFO">{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","type":4,"enabled":true,"mtu":1500,"afpacket":{"host_if_name":"node_2_noeth_2"}}</msg>
<status status="PASS" endtime="20180516 15:18:41.953" starttime="20180516 15:18:41.953"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'''${data}'''==""</arg>
<arg>{}</arg>
<arg>${data}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20180516 15:18:41.954" level="INFO">${data} = {"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","type":4,"enabled":true,"mtu":1500,"afpacket":{"host_if_name":"node_2_noeth_2"}}</msg>
<status status="PASS" endtime="20180516 15:18:41.954" starttime="20180516 15:18:41.953"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${data}</arg>
</arguments>
<msg timestamp="20180516 15:18:41.955" level="INFO">{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","type":4,"enabled":true,"mtu":1500,"afpacket":{"host_if_name":"node_2_noeth_2"}}</msg>
<status status="PASS" endtime="20180516 15:18:41.955" starttime="20180516 15:18:41.954"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>json.loads('''${data}''')</arg>
<arg>json</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180516 15:18:41.955" level="INFO">${output} = {u'enabled': True, u'afpacket': {u'host_if_name': u'node_2_noeth_2'}, u'type': 4, u'name': u'IF_AFPIF_VSWITCH_node_2_node2_veth', u'mtu': 1500}</msg>
<status status="PASS" endtime="20180516 15:18:41.955" starttime="20180516 15:18:41.955"></status>
</kw>
<msg timestamp="20180516 15:18:41.956" level="INFO">${config} = {u'enabled': True, u'afpacket': {u'host_if_name': u'node_2_noeth_2'}, u'type': 4, u'name': u'IF_AFPIF_VSWITCH_node_2_node2_veth', u'mtu': 1500}</msg>
<status status="PASS" endtime="20180516 15:18:41.956" starttime="20180516 15:18:41.623"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${config["afpacket"]["host_if_name"]}</arg>
</arguments>
<assign>
<var>${host_int}</var>
</assign>
<msg timestamp="20180516 15:18:41.956" level="INFO">${host_int} = node_2_noeth_2</msg>
<status status="PASS" endtime="20180516 15:18:41.956" starttime="20180516 15:18:41.956"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${int_state["admin_up_down"]}</arg>
</arguments>
<assign>
<var>${enabled}</var>
</assign>
<msg timestamp="20180516 15:18:41.957" level="INFO">${enabled} = 1</msg>
<status status="PASS" endtime="20180516 15:18:41.957" starttime="20180516 15:18:41.956"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${int_state["mtu"]}</arg>
</arguments>
<assign>
<var>${mtu}</var>
</assign>
<msg timestamp="20180516 15:18:41.957" level="INFO">${mtu} = 1500</msg>
<status status="PASS" endtime="20180516 15:18:41.957" starttime="20180516 15:18:41.957"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${int_state["l2_address"]}</arg>
</arguments>
<assign>
<var>${dec_mac}</var>
</assign>
<msg timestamp="20180516 15:18:41.958" level="INFO">${dec_mac} = [2, 254, 66, 152, 34, 8, 0, 0]</msg>
<status status="PASS" endtime="20180516 15:18:41.958" starttime="20180516 15:18:41.958"></status>
</kw>
<kw name="Convert Dec MAC To Hex" library="vat_term">
<arguments>
<arg>${dec_mac}</arg>
</arguments>
<assign>
<var>${mac}</var>
</assign>
<msg timestamp="20180516 15:18:41.958" level="INFO">${mac} = 02:fe:42:98:22:08</msg>
<status status="PASS" endtime="20180516 15:18:41.958" starttime="20180516 15:18:41.958"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>enabled=${enabled}</arg>
<arg>mtu=${mtu}</arg>
<arg>mac=${mac}</arg>
</arguments>
<assign>
<var>${actual_state}</var>
</assign>
<msg timestamp="20180516 15:18:41.959" level="INFO">${actual_state} = [u'enabled=1', u'mtu=1500', u'mac=02:fe:42:98:22:08']</msg>
<status status="PASS" endtime="20180516 15:18:41.959" starttime="20180516 15:18:41.959"></status>
</kw>
<kw type="for" name="${ip} IN [ @{ipv4_list} ]">
<status status="PASS" endtime="20180516 15:18:41.959" starttime="20180516 15:18:41.959"></status>
</kw>
<kw name="Log List" library="Collections">
<doc>Logs the length and contents of the ``list`` using given ``level``.</doc>
<arguments>
<arg>${actual_state}</arg>
</arguments>
<msg timestamp="20180516 15:18:41.960" level="INFO">List length is 3 and it contains following items:
0: enabled=1
1: mtu=1500
2: mac=02:fe:42:98:22:08</msg>
<status status="PASS" endtime="20180516 15:18:41.960" starttime="20180516 15:18:41.959"></status>
</kw>
<kw name="List Should Contain Sub List" library="Collections">
<doc>Fails if not all of the elements in ``list2`` are found in ``list1``.</doc>
<arguments>
<arg>${actual_state}</arg>
<arg>${desired_state}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:41.961" starttime="20180516 15:18:41.961"></status>
</kw>
<status status="PASS" endtime="20180516 15:18:41.961" starttime="20180516 15:18:32.185"></status>
</kw>
<kw type="teardown" name="TestTeardown">
<kw name="Make Datastore Snapshots" library="setup-teardown">
<arguments>
<arg>${TEST_NAME}_test_teardown</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tag}</arg>
</arguments>
<msg timestamp="20180516 15:18:41.969" level="INFO">Check AfPackets On Vswitch_test_teardown</msg>
<status status="PASS" endtime="20180516 15:18:41.969" starttime="20180516 15:18:41.969"></status>
</kw>
<kw name="Create Next Snapshot Prefix" library="setup-teardown">
<assign>
<var>${prefix}</var>
</assign>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>str(${snapshot_num}).zfill(3)</arg>
</arguments>
<assign>
<var>${prefix}</var>
</assign>
<msg timestamp="20180516 15:18:41.970" level="INFO">${prefix} = 005</msg>
<status status="PASS" endtime="20180516 15:18:41.970" starttime="20180516 15:18:41.970"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${snapshot_num}+1</arg>
</arguments>
<assign>
<var>${snapshot_num}</var>
</assign>
<msg timestamp="20180516 15:18:41.970" level="INFO">${snapshot_num} = 6</msg>
<status status="PASS" endtime="20180516 15:18:41.971" starttime="20180516 15:18:41.970"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${snapshot_num}</arg>
</arguments>
<msg timestamp="20180516 15:18:41.971" level="INFO">${snapshot_num} = 6</msg>
<status status="PASS" endtime="20180516 15:18:41.971" starttime="20180516 15:18:41.971"></status>
</kw>
<msg timestamp="20180516 15:18:41.972" level="INFO">${prefix} = 005</msg>
<status status="PASS" endtime="20180516 15:18:41.972" starttime="20180516 15:18:41.969"></status>
</kw>
<kw name="Take ETCD Snapshots" library="setup-teardown">
<arguments>
<arg>${prefix}_${tag}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tag}</arg>
</arguments>
<msg timestamp="20180516 15:18:41.974" level="INFO">005_Check AfPackets On Vswitch_test_teardown</msg>
<status status="PASS" endtime="20180516 15:18:41.974" starttime="20180516 15:18:41.974"></status>
</kw>
<kw name="Get ETCD Dump" library="setup-teardown">
<assign>
<var>${dump}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DOCKER_COMMAND} exec etcd etcdctl get --prefix="true" ""</arg>
</arguments>
<assign>
<var>${command}</var>
</assign>
<msg timestamp="20180516 15:18:41.975" level="INFO">${command} = sudo docker exec etcd etcdctl get --prefix="true" ""</msg>
<status status="PASS" endtime="20180516 15:18:41.975" starttime="20180516 15:18:41.975"></status>
</kw>
<kw name="Execute On Machine" library="ssh">
<doc>*Execute On Machine ${machine} sudo docker exec etcd etcdctl get --prefix="true" ""*</doc>
<arguments>
<arg>docker</arg>
<arg>${command}</arg>
<arg>log=false</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${log}</arg>
</arguments>
<msg timestamp="20180516 15:18:41.991" level="INFO">docker</msg>
<msg timestamp="20180516 15:18:41.991" level="INFO">sudo docker exec etcd etcdctl get --prefix="true" ""</msg>
<msg timestamp="20180516 15:18:41.991" level="INFO">false</msg>
<status status="PASS" endtime="20180516 15:18:41.991" starttime="20180516 15:18:41.990"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:41.994" starttime="20180516 15:18:41.991"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:18:41.995" level="INFO">${currdate} = 2018-05-16 15:18:41.995</msg>
<status status="PASS" endtime="20180516 15:18:41.995" starttime="20180516 15:18:41.995"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20180516 15:18:41.996" level="INFO">Executing command 'sudo docker exec etcd etcdctl get --prefix="true" ""'.</msg>
<msg timestamp="20180516 15:18:42.290" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:18:42.291" level="INFO">${out} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<msg timestamp="20180516 15:18:42.291" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20180516 15:18:42.291" starttime="20180516 15:18:41.995"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${out}</arg>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:18:42.291" level="INFO">/sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-containers","description":"Wire 2 VNF containers to the vpp switch","type":2,"elements":[{"container":"node_1","port_label":"node1_veth","etcd_vpp_switch_key":"agent_vpp_1","ipv4_addr":"10.0.0.10","type":3},{"container":"node_2","port_label":"node2_veth","etcd_vpp_switch_key":"agent_vpp_1","ipv4_addr":"10.0.0.11","type":3}]}
/sfc-controller/v1/SP
{"mtu":1500,"starting_vlan_id":5000,"default_static_route_weight":5,"dynamic_bridge_parms":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true},"static_bridge_parms":{"forward":true}}
/sfc-controller/v1/id/HE/agent_vpp_1
{"name":"agent_vpp_1"}
/sfc-controller/v1/id/SFC/two-sample-vnf-containers/node_1_node1_veth
{"sfc_name":"two-sample-vnf-containers","container":"node_1","port":"node1_veth","mac_addr_id":1,"veth_id":1}
/sfc-controller/v1/id/SFC/two-sample-vnf-containers/node_2_node2_veth
{"sfc_name":"two-sample-vnf-containers","container":"node_2","port":"node2_veth","mac_addr_id":2,"veth_id":2}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VNF_node_1_node1_veth
{"name":"IF_VETH_VNF_node_1_node1_veth","enabled":true,"phys_address":"02:00:00:00:00:01","mtu":1500,"host_if_name":"node1_veth","ip_addresses":["10.0.0.10/24"],"namespace":{"type":1,"microservice":"node_1"},"veth":{"peer_if_name":"IF_VETH_VSWITCH_node_1_node1_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VNF_node_2_node2_veth
{"name":"IF_VETH_VNF_node_2_node2_veth","enabled":true,"phys_address":"02:00:00:00:00:02","mtu":1500,"host_if_name":"node2_veth","ip_addresses":["10.0.0.11/24"],"namespace":{"type":1,"microservice":"node_2"},"veth":{"peer_if_name":"IF_VETH_VSWITCH_node_2_node2_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VSWITCH_node_1_node1_veth
{"name":"IF_VETH_VSWITCH_node_1_node1_veth","enabled":true,"mtu":1500,"host_if_name":"node_1_noeth_1","namespace":{"type":1,"microservice":"agent_vpp_1"},"veth":{"peer_if_name":"IF_VETH_VNF_node_1_node1_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VSWITCH_node_2_node2_veth
{"name":"IF_VETH_VSWITCH_node_2_node2_veth","enabled":true,"mtu":1500,"host_if_name":"node_2_noeth_2","namespace":{"type":1,"microservice":"agent_vpp_1"},"veth":{"peer_if_name":"IF_VETH_VNF_node_2_node2_veth"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/BD_INTERNAL_EW_L2FIB_agent_vpp_1
{"name":"BD_INTERNAL_EW_L2FIB_agent_vpp_1","forward":true}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/BD_INTERNAL_EW_agent_vpp_1
{"name":"BD_INTERNAL_EW_agent_vpp_1","flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true,"interfaces":[{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth"},{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth"}]}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth
{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","type":4,"enabled":true,"mtu":1500,"afpacket":{"host_if_name":"node_1_noeth_1"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth
{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","type":4,"enabled":true,"mtu":1500,"afpacket":{"host_if_name":"node_2_noeth_2"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_LOOPBACK_H_agent_vpp_1
{"name":"IF_LOOPBACK_H_agent_vpp_1","enabled":true,"phys_address":"02:00:00:AA:BB:00","mtu":1500,"ip_addresses":["6.0.0.100"]}
/vnf-agent/agent_vpp_1/vpp/status/v1/bd/BD_INTERNAL_EW_L2FIB_agent_vpp_1
{"index":2,"internal_name":"BD_INTERNAL_EW_L2FIB_agent_vpp_1","bvi_interface":"not_set","last_change":1526476631,"l2_params":{"forward":true}}
/vnf-agent/agent_vpp_1/vpp/status/v1/bd/BD_INTERNAL_EW_agent_vpp_1
{"index":1,"internal_name":"BD_INTERNAL_EW_agent_vpp_1","bvi_interface":"not_set","interface_count":2,"last_change":1526476631,"l2_params":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true},"interfaces":[{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","sw_if_index":2},{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","sw_if_index":3}]}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth
{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","internal_name":"host-node_1_noeth_1","if_index":2,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:3e:fd:61:28","mtu":1500,"statistics":{"in_packets":18,"in_bytes":1412}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth
{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","internal_name":"host-node_2_noeth_2","if_index":3,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:42:98:22:08","mtu":1500,"statistics":{"in_packets":20,"in_bytes":1592}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_LOOPBACK_H_agent_vpp_1
{"name":"IF_LOOPBACK_H_agent_vpp_1","internal_name":"loop0","if_index":1,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:00:00:aa:bb:00","mtu":1500,"statistics":{}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/local0
{"name":"local0","internal_name":"local0","admin_status":2,"oper_status":2,"statistics":{}}
/vnf-agent/node_1/check/status/v1/agent
{"build_version":"v1.1-5-g55e9977","build_date":"2018-03-06T11:05+00:00","state":1,"start_time":1526476614,"last_change":1526476619,"last_update":1526476715,"commit_hash":"55e99770087087fa8e41a980a8b6257c80c93f4c"}
/vnf-agent/node_1/check/status/v1/plugin/etcdv3
{"state":1,"last_change":1526476619,"last_update":1526476715}
/vnf-agent/node_1/check/status/v1/plugin/kafka
{"state":1,"last_change":1526476619,"last_update":1526476715}
/vnf-agent/node_2/check/status/v1/agent
{"build_version":"v1.1-5-g55e9977","build_date":"2018-03-06T11:05+00:00","state":1,"start_time":1526476623,"last_change":1526476628,"last_update":1526476713,"commit_hash":"55e99770087087fa8e41a980a8b6257c80c93f4c"}
/vnf-agent/node_2/check/status/v1/plugin/etcdv3
{"state":1,"last_change":1526476628,"last_update":1526476713}
/vnf-agent/node_2/check/status/v1/plugin/kafka
{"state":1,"last_change":1526476628,"last_update":1526476713}</msg>
<msg timestamp="20180516 15:18:42.292" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:18:42.292" starttime="20180516 15:18:42.291"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:18:42.293" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:18:42.293" starttime="20180516 15:18:42.292"></status>
</kw>
<msg timestamp="20180516 15:18:42.293" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:18:42.293" starttime="20180516 15:18:42.292"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} on ${machine}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:42.293" starttime="20180516 15:18:42.293"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${log}'=='true'</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:42.294" starttime="20180516 15:18:42.294"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:42.294" starttime="20180516 15:18:42.294"></status>
</kw>
<msg timestamp="20180516 15:18:42.295" level="INFO">${out} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<status status="PASS" endtime="20180516 15:18:42.295" starttime="20180516 15:18:41.983"></status>
</kw>
<msg timestamp="20180516 15:18:42.295" level="INFO">${dump} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<status status="PASS" endtime="20180516 15:18:42.295" starttime="20180516 15:18:41.974"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/etcd_dump-${tag}.txt</arg>
<arg>${dump}</arg>
</arguments>
<msg timestamp="20180516 15:18:42.296" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/etcd_dump-005_Check AfPackets On Vswitch_test_teardown.txt"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/etcd_dump-005_Check AfPackets On Vswitch_test_teardown.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:18:42.296" starttime="20180516 15:18:42.295"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${dump}</arg>
<arg>/error/</arg>
</arguments>
<assign>
<var>${errors}</var>
</assign>
<msg timestamp="20180516 15:18:42.296" level="INFO">0 out of 54 lines matched</msg>
<msg timestamp="20180516 15:18:42.296" level="INFO">${errors} = </msg>
<status status="PASS" endtime="20180516 15:18:42.296" starttime="20180516 15:18:42.296"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${errors}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${errors}</arg>
</arguments>
<msg timestamp="20180516 15:18:42.297" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:18:42.297" starttime="20180516 15:18:42.297"></status>
</kw>
<msg timestamp="20180516 15:18:42.297" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:18:42.297" starttime="20180516 15:18:42.296"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>Errors detected in keys: ${errors}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:42.298" starttime="20180516 15:18:42.297"></status>
</kw>
<status status="PASS" endtime="20180516 15:18:42.298" starttime="20180516 15:18:41.972"></status>
</kw>
<status status="PASS" endtime="20180516 15:18:42.298" starttime="20180516 15:18:41.968"></status>
</kw>
<status status="PASS" endtime="20180516 15:18:42.298" starttime="20180516 15:18:41.961"></status>
</kw>
<status status="PASS" endtime="20180516 15:18:42.298" critical="yes" starttime="20180516 15:18:21.851"></status>
</test>
<test id="s1-t3" name="Create Loopbak Intfs">
<kw type="setup" name="TestSetup">
<kw name="Make Datastore Snapshots" library="setup-teardown">
<arguments>
<arg>${TEST_NAME}_test_setup</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tag}</arg>
</arguments>
<msg timestamp="20180516 15:18:42.301" level="INFO">Create Loopbak Intfs_test_setup</msg>
<status status="PASS" endtime="20180516 15:18:42.301" starttime="20180516 15:18:42.301"></status>
</kw>
<kw name="Create Next Snapshot Prefix" library="setup-teardown">
<assign>
<var>${prefix}</var>
</assign>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>str(${snapshot_num}).zfill(3)</arg>
</arguments>
<assign>
<var>${prefix}</var>
</assign>
<msg timestamp="20180516 15:18:42.302" level="INFO">${prefix} = 006</msg>
<status status="PASS" endtime="20180516 15:18:42.302" starttime="20180516 15:18:42.301"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${snapshot_num}+1</arg>
</arguments>
<assign>
<var>${snapshot_num}</var>
</assign>
<msg timestamp="20180516 15:18:42.302" level="INFO">${snapshot_num} = 7</msg>
<status status="PASS" endtime="20180516 15:18:42.302" starttime="20180516 15:18:42.302"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${snapshot_num}</arg>
</arguments>
<msg timestamp="20180516 15:18:42.303" level="INFO">${snapshot_num} = 7</msg>
<status status="PASS" endtime="20180516 15:18:42.303" starttime="20180516 15:18:42.302"></status>
</kw>
<msg timestamp="20180516 15:18:42.303" level="INFO">${prefix} = 006</msg>
<status status="PASS" endtime="20180516 15:18:42.303" starttime="20180516 15:18:42.301"></status>
</kw>
<kw name="Take ETCD Snapshots" library="setup-teardown">
<arguments>
<arg>${prefix}_${tag}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tag}</arg>
</arguments>
<msg timestamp="20180516 15:18:42.304" level="INFO">006_Create Loopbak Intfs_test_setup</msg>
<status status="PASS" endtime="20180516 15:18:42.304" starttime="20180516 15:18:42.304"></status>
</kw>
<kw name="Get ETCD Dump" library="setup-teardown">
<assign>
<var>${dump}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DOCKER_COMMAND} exec etcd etcdctl get --prefix="true" ""</arg>
</arguments>
<assign>
<var>${command}</var>
</assign>
<msg timestamp="20180516 15:18:42.306" level="INFO">${command} = sudo docker exec etcd etcdctl get --prefix="true" ""</msg>
<status status="PASS" endtime="20180516 15:18:42.306" starttime="20180516 15:18:42.305"></status>
</kw>
<kw name="Execute On Machine" library="ssh">
<doc>*Execute On Machine ${machine} sudo docker exec etcd etcdctl get --prefix="true" ""*</doc>
<arguments>
<arg>docker</arg>
<arg>${command}</arg>
<arg>log=false</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${log}</arg>
</arguments>
<msg timestamp="20180516 15:18:42.318" level="INFO">docker</msg>
<msg timestamp="20180516 15:18:42.318" level="INFO">sudo docker exec etcd etcdctl get --prefix="true" ""</msg>
<msg timestamp="20180516 15:18:42.318" level="INFO">false</msg>
<status status="PASS" endtime="20180516 15:18:42.318" starttime="20180516 15:18:42.317"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:42.318" starttime="20180516 15:18:42.318"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:18:42.319" level="INFO">${currdate} = 2018-05-16 15:18:42.319</msg>
<status status="PASS" endtime="20180516 15:18:42.319" starttime="20180516 15:18:42.318"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20180516 15:18:42.319" level="INFO">Executing command 'sudo docker exec etcd etcdctl get --prefix="true" ""'.</msg>
<msg timestamp="20180516 15:18:42.694" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:18:42.694" level="INFO">${out} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<msg timestamp="20180516 15:18:42.694" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20180516 15:18:42.694" starttime="20180516 15:18:42.319"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${out}</arg>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:18:42.694" level="INFO">/sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-containers","description":"Wire 2 VNF containers to the vpp switch","type":2,"elements":[{"container":"node_1","port_label":"node1_veth","etcd_vpp_switch_key":"agent_vpp_1","ipv4_addr":"10.0.0.10","type":3},{"container":"node_2","port_label":"node2_veth","etcd_vpp_switch_key":"agent_vpp_1","ipv4_addr":"10.0.0.11","type":3}]}
/sfc-controller/v1/SP
{"mtu":1500,"starting_vlan_id":5000,"default_static_route_weight":5,"dynamic_bridge_parms":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true},"static_bridge_parms":{"forward":true}}
/sfc-controller/v1/id/HE/agent_vpp_1
{"name":"agent_vpp_1"}
/sfc-controller/v1/id/SFC/two-sample-vnf-containers/node_1_node1_veth
{"sfc_name":"two-sample-vnf-containers","container":"node_1","port":"node1_veth","mac_addr_id":1,"veth_id":1}
/sfc-controller/v1/id/SFC/two-sample-vnf-containers/node_2_node2_veth
{"sfc_name":"two-sample-vnf-containers","container":"node_2","port":"node2_veth","mac_addr_id":2,"veth_id":2}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VNF_node_1_node1_veth
{"name":"IF_VETH_VNF_node_1_node1_veth","enabled":true,"phys_address":"02:00:00:00:00:01","mtu":1500,"host_if_name":"node1_veth","ip_addresses":["10.0.0.10/24"],"namespace":{"type":1,"microservice":"node_1"},"veth":{"peer_if_name":"IF_VETH_VSWITCH_node_1_node1_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VNF_node_2_node2_veth
{"name":"IF_VETH_VNF_node_2_node2_veth","enabled":true,"phys_address":"02:00:00:00:00:02","mtu":1500,"host_if_name":"node2_veth","ip_addresses":["10.0.0.11/24"],"namespace":{"type":1,"microservice":"node_2"},"veth":{"peer_if_name":"IF_VETH_VSWITCH_node_2_node2_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VSWITCH_node_1_node1_veth
{"name":"IF_VETH_VSWITCH_node_1_node1_veth","enabled":true,"mtu":1500,"host_if_name":"node_1_noeth_1","namespace":{"type":1,"microservice":"agent_vpp_1"},"veth":{"peer_if_name":"IF_VETH_VNF_node_1_node1_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VSWITCH_node_2_node2_veth
{"name":"IF_VETH_VSWITCH_node_2_node2_veth","enabled":true,"mtu":1500,"host_if_name":"node_2_noeth_2","namespace":{"type":1,"microservice":"agent_vpp_1"},"veth":{"peer_if_name":"IF_VETH_VNF_node_2_node2_veth"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/BD_INTERNAL_EW_L2FIB_agent_vpp_1
{"name":"BD_INTERNAL_EW_L2FIB_agent_vpp_1","forward":true}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/BD_INTERNAL_EW_agent_vpp_1
{"name":"BD_INTERNAL_EW_agent_vpp_1","flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true,"interfaces":[{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth"},{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth"}]}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth
{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","type":4,"enabled":true,"mtu":1500,"afpacket":{"host_if_name":"node_1_noeth_1"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth
{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","type":4,"enabled":true,"mtu":1500,"afpacket":{"host_if_name":"node_2_noeth_2"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_LOOPBACK_H_agent_vpp_1
{"name":"IF_LOOPBACK_H_agent_vpp_1","enabled":true,"phys_address":"02:00:00:AA:BB:00","mtu":1500,"ip_addresses":["6.0.0.100"]}
/vnf-agent/agent_vpp_1/vpp/status/v1/bd/BD_INTERNAL_EW_L2FIB_agent_vpp_1
{"index":2,"internal_name":"BD_INTERNAL_EW_L2FIB_agent_vpp_1","bvi_interface":"not_set","last_change":1526476631,"l2_params":{"forward":true}}
/vnf-agent/agent_vpp_1/vpp/status/v1/bd/BD_INTERNAL_EW_agent_vpp_1
{"index":1,"internal_name":"BD_INTERNAL_EW_agent_vpp_1","bvi_interface":"not_set","interface_count":2,"last_change":1526476631,"l2_params":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true},"interfaces":[{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","sw_if_index":2},{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","sw_if_index":3}]}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth
{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","internal_name":"host-node_1_noeth_1","if_index":2,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:3e:fd:61:28","mtu":1500,"statistics":{"in_packets":18,"in_bytes":1412}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth
{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","internal_name":"host-node_2_noeth_2","if_index":3,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:42:98:22:08","mtu":1500,"statistics":{"in_packets":20,"in_bytes":1592}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_LOOPBACK_H_agent_vpp_1
{"name":"IF_LOOPBACK_H_agent_vpp_1","internal_name":"loop0","if_index":1,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:00:00:aa:bb:00","mtu":1500,"statistics":{}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/local0
{"name":"local0","internal_name":"local0","admin_status":2,"oper_status":2,"statistics":{}}
/vnf-agent/node_1/check/status/v1/agent
{"build_version":"v1.1-5-g55e9977","build_date":"2018-03-06T11:05+00:00","state":1,"start_time":1526476614,"last_change":1526476619,"last_update":1526476715,"commit_hash":"55e99770087087fa8e41a980a8b6257c80c93f4c"}
/vnf-agent/node_1/check/status/v1/plugin/etcdv3
{"state":1,"last_change":1526476619,"last_update":1526476715}
/vnf-agent/node_1/check/status/v1/plugin/kafka
{"state":1,"last_change":1526476619,"last_update":1526476715}
/vnf-agent/node_2/check/status/v1/agent
{"build_version":"v1.1-5-g55e9977","build_date":"2018-03-06T11:05+00:00","state":1,"start_time":1526476623,"last_change":1526476628,"last_update":1526476713,"commit_hash":"55e99770087087fa8e41a980a8b6257c80c93f4c"}
/vnf-agent/node_2/check/status/v1/plugin/etcdv3
{"state":1,"last_change":1526476628,"last_update":1526476713}
/vnf-agent/node_2/check/status/v1/plugin/kafka
{"state":1,"last_change":1526476628,"last_update":1526476713}</msg>
<msg timestamp="20180516 15:18:42.695" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:18:42.695" starttime="20180516 15:18:42.694"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:18:42.696" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:18:42.696" starttime="20180516 15:18:42.695"></status>
</kw>
<msg timestamp="20180516 15:18:42.696" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:18:42.696" starttime="20180516 15:18:42.695"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} on ${machine}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:42.697" starttime="20180516 15:18:42.696"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${log}'=='true'</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:42.697" starttime="20180516 15:18:42.697"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:42.698" starttime="20180516 15:18:42.697"></status>
</kw>
<msg timestamp="20180516 15:18:42.698" level="INFO">${out} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<status status="PASS" endtime="20180516 15:18:42.698" starttime="20180516 15:18:42.317"></status>
</kw>
<msg timestamp="20180516 15:18:42.698" level="INFO">${dump} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<status status="PASS" endtime="20180516 15:18:42.698" starttime="20180516 15:18:42.304"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/etcd_dump-${tag}.txt</arg>
<arg>${dump}</arg>
</arguments>
<msg timestamp="20180516 15:18:42.699" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/etcd_dump-006_Create Loopbak Intfs_test_setup.txt"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/etcd_dump-006_Create Loopbak Intfs_test_setup.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:18:42.699" starttime="20180516 15:18:42.698"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${dump}</arg>
<arg>/error/</arg>
</arguments>
<assign>
<var>${errors}</var>
</assign>
<msg timestamp="20180516 15:18:42.699" level="INFO">0 out of 54 lines matched</msg>
<msg timestamp="20180516 15:18:42.699" level="INFO">${errors} = </msg>
<status status="PASS" endtime="20180516 15:18:42.699" starttime="20180516 15:18:42.699"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${errors}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${errors}</arg>
</arguments>
<msg timestamp="20180516 15:18:42.700" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:18:42.700" starttime="20180516 15:18:42.700"></status>
</kw>
<msg timestamp="20180516 15:18:42.700" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:18:42.700" starttime="20180516 15:18:42.700"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>Errors detected in keys: ${errors}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:42.701" starttime="20180516 15:18:42.701"></status>
</kw>
<status status="PASS" endtime="20180516 15:18:42.701" starttime="20180516 15:18:42.303"></status>
</kw>
<status status="PASS" endtime="20180516 15:18:42.701" starttime="20180516 15:18:42.300"></status>
</kw>
<status status="PASS" endtime="20180516 15:18:42.701" starttime="20180516 15:18:42.300"></status>
</kw>
<kw name="Create loopback interface loop0 on agent_vpp_1 with ip 20.1.1.1/24 and mac 8a:f1:be:90:00:00" library="pretty_keywords">
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${name}</arg>
<arg>${node}</arg>
<arg>${ip}</arg>
<arg>${prefix}</arg>
<arg>${mac}</arg>
</arguments>
<msg timestamp="20180516 15:18:42.703" level="INFO">loop0</msg>
<msg timestamp="20180516 15:18:42.703" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:18:42.703" level="INFO">20.1.1.1</msg>
<msg timestamp="20180516 15:18:42.703" level="INFO">24</msg>
<msg timestamp="20180516 15:18:42.703" level="INFO">8a:f1:be:90:00:00</msg>
<status status="PASS" endtime="20180516 15:18:42.703" starttime="20180516 15:18:42.703"></status>
</kw>
<kw name="vpp_ctl: Put Loopback Interface With IP" library="vpp_ctl">
<arguments>
<arg>${node}</arg>
<arg>${name}</arg>
<arg>${mac}</arg>
<arg>${ip}</arg>
<arg>${prefix}</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${name}</arg>
<arg>${mac}</arg>
<arg>${ip}</arg>
<arg>${prefix}</arg>
<arg>${mtu}</arg>
<arg>${vrf}</arg>
<arg>${enabled}</arg>
</arguments>
<msg timestamp="20180516 15:18:42.704" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:18:42.704" level="INFO">loop0</msg>
<msg timestamp="20180516 15:18:42.704" level="INFO">8a:f1:be:90:00:00</msg>
<msg timestamp="20180516 15:18:42.705" level="INFO">20.1.1.1</msg>
<msg timestamp="20180516 15:18:42.705" level="INFO">24</msg>
<msg timestamp="20180516 15:18:42.705" level="INFO">1500</msg>
<msg timestamp="20180516 15:18:42.705" level="INFO">0</msg>
<msg timestamp="20180516 15:18:42.705" level="INFO">true</msg>
<status status="PASS" endtime="20180516 15:18:42.705" starttime="20180516 15:18:42.704"></status>
</kw>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/home/marcello/workspace/release/vpp-agent/tests/robot/libraries/../resources/loopback_interface_with_ip.json</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20180516 15:18:42.706" html="yes" level="INFO">Getting file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/resources/loopback_interface_with_ip.json"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/resources/loopback_interface_with_ip.json&lt;/a&gt;'.</msg>
<msg timestamp="20180516 15:18:42.706" level="INFO">${data} = {
  "name": "${name}",
  "type": 0,
  "enabled": ${enabled},
  "phys_address": "${mac}",
  "mtu": ${mtu},
  "vrf": ${vrf},
  "ip_addresses": [
    "${ip}/${prefix}"
  ]
}
</msg>
<status status="PASS" endtime="20180516 15:18:42.706" starttime="20180516 15:18:42.706"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/vnf-agent/${node}/vpp/config/v1/interface/${name}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20180516 15:18:42.707" level="INFO">${uri} = /vnf-agent/agent_vpp_1/vpp/config/v1/interface/loop0</msg>
<status status="PASS" endtime="20180516 15:18:42.707" starttime="20180516 15:18:42.706"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${data}</arg>
<arg>${uri}</arg>
</arguments>
<msg timestamp="20180516 15:18:42.707" level="INFO">{
  "name": "${name}",
  "type": 0,
  "enabled": ${enabled},
  "phys_address": "${mac}",
  "mtu": ${mtu},
  "vrf": ${vrf},
  "ip_addresses": [
    "${ip}/${prefix}"
  ]
}
</msg>
<msg timestamp="20180516 15:18:42.707" level="INFO">/vnf-agent/agent_vpp_1/vpp/config/v1/interface/loop0</msg>
<status status="PASS" endtime="20180516 15:18:42.707" starttime="20180516 15:18:42.707"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${data}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20180516 15:18:42.708" level="INFO">${data} = {
  "name": "loop0",
  "type": 0,
  "enabled": true,
  "phys_address": "8a:f1:be:90:00:00",
  "mtu": 1500,
  "vrf": 0,
  "ip_addresses": [
    "20.1.1.1/24"
  ]
}
</msg>
<status status="PASS" endtime="20180516 15:18:42.708" starttime="20180516 15:18:42.707"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${data}</arg>
</arguments>
<msg timestamp="20180516 15:18:42.708" level="INFO">{
  "name": "loop0",
  "type": 0,
  "enabled": true,
  "phys_address": "8a:f1:be:90:00:00",
  "mtu": 1500,
  "vrf": 0,
  "ip_addresses": [
    "20.1.1.1/24"
  ]
}
</msg>
<status status="PASS" endtime="20180516 15:18:42.708" starttime="20180516 15:18:42.708"></status>
</kw>
<kw name="vpp_ctl: Put Json" library="vpp_ctl">
<arguments>
<arg>${uri}</arg>
<arg>${data}</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${key}</arg>
<arg>${json}</arg>
<arg>${container}</arg>
</arguments>
<msg timestamp="20180516 15:18:42.709" level="INFO">/vnf-agent/agent_vpp_1/vpp/config/v1/interface/loop0</msg>
<msg timestamp="20180516 15:18:42.709" level="INFO">{
  "name": "loop0",
  "type": 0,
  "enabled": true,
  "phys_address": "8a:f1:be:90:00:00",
  "mtu": 1500,
  "vrf": 0,
  "ip_addresses": [
    "20.1.1.1/24"
  ]
}
</msg>
<msg timestamp="20180516 15:18:42.709" level="INFO">vpp_agent_ctl</msg>
<status status="PASS" endtime="20180516 15:18:42.709" starttime="20180516 15:18:42.709"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>echo '${json}' | vpp-agent-ctl ${AGENT_VPP_ETCD_CONF_PATH} -put ${key} -</arg>
</arguments>
<assign>
<var>${command}</var>
</assign>
<msg timestamp="20180516 15:18:42.710" level="INFO">${command} = echo '{
  "name": "loop0",
  "type": 0,
  "enabled": true,
  "phys_address": "8a:f1:be:90:00:00",
  "mtu": 1500,
  "vrf": 0,
  "ip_addresses": [
    "20.1.1.1/24"
  ]
}
' | vpp-agent-ctl /opt/vpp-agen...</msg>
<status status="PASS" endtime="20180516 15:18:42.710" starttime="20180516 15:18:42.710"></status>
</kw>
<kw name="Write To Container Until Prompt" library="docker">
<doc>*Write Container vpp_agent_ctl echo '{</doc>
<arguments>
<arg>${container}</arg>
<arg>${command}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${container}</arg>
<arg>${command}</arg>
<arg>${prompt}</arg>
<arg>${delay}</arg>
</arguments>
<msg timestamp="20180516 15:18:42.711" level="INFO">vpp_agent_ctl</msg>
<msg timestamp="20180516 15:18:42.711" level="INFO">echo '{
  "name": "loop0",
  "type": 0,
  "enabled": true,
  "phys_address": "8a:f1:be:90:00:00",
  "mtu": 1500,
  "vrf": 0,
  "ip_addresses": [
    "20.1.1.1/24"
  ]
}
' | vpp-agent-ctl /opt/vpp-agent/dev/etcd.conf -put /vnf-agent/agent_vpp_1/vpp/config/v1/interface/loop0 -</msg>
<msg timestamp="20180516 15:18:42.712" level="INFO">root@</msg>
<msg timestamp="20180516 15:18:42.712" level="INFO">3</msg>
<status status="PASS" endtime="20180516 15:18:42.712" starttime="20180516 15:18:42.711"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${container}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:42.713" starttime="20180516 15:18:42.712"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:18:42.713" level="INFO">${currdate} = 2018-05-16 15:18:42.713</msg>
<status status="PASS" endtime="20180516 15:18:42.713" starttime="20180516 15:18:42.713"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20180516 15:18:42.719" level="INFO">echo '{</msg>
<status status="PASS" endtime="20180516 15:18:42.719" starttime="20180516 15:18:42.713"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>${prompt}${${container}_HOSTNAME}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20180516 15:18:42.744" level="INFO">&gt;   "name": "loop0",
&gt;   "type": 0,
&gt;   "enabled": true,
&gt;   "phys_address": "8a:f1:be:90:00:00",
&gt;   "mtu": 1500,
&gt;   "vrf": 0,
&gt;   "ip_addresses": [
&gt;     "20.1.1.1/24"
&gt;   ]
&gt; }
&gt; ' | vpp-agent-ctl /opt/vpp-agent/dev/etcd.conf -put /vnf-agent/agent_vpp_1/vpp /config/v1/interface/loop0 -
[36mINFO[0m[0000] Connecting to etcd took 2.258818ms            [36mdurationInNs[0m=2258818 [36mloc[0m="etcdv3/bytes_broker_impl.go(84)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] DB putting  /vnf-agent/agent_vpp_1/vpp/config/v1/interface/loop0   {
  "name": "loop0",
  "type": 0,
  "enabled": true,
  "phys_address": "8a:f1:be:90:00:00",
  "mtu": 1500,
  "vrf": 0,
  "ip_addresses": [
    "20.1.1.1/24"
  ]
}

  [36mloc[0m="vpp-agent-ctl/etcd.go(106)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] DB put successful  /vnf-agent/agent_vpp_1/vpp/config/v1/interface/loop0   -  [36mloc[0m="vpp-agent-ctl/etcd.go(112)" [36mlogger[0m=defaultLogger
]0;root@2f7d62033432</msg>
<msg timestamp="20180516 15:18:42.744" level="INFO">${out} = &gt;   "name": "loop0",
&gt;   "type": 0,
&gt;   "enabled": true,
&gt;   "phys_address": "8a:f1:be:90:00:00",
&gt;   "mtu": 1500,
&gt;   "vrf": 0,
&gt;   "ip_addresses": [
&gt;     "20.1.1.1/24"
&gt;   ]
&gt; }
&gt; ' | vpp...</msg>
<status status="PASS" endtime="20180516 15:18:42.744" starttime="20180516 15:18:42.720"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:18:42.745" level="INFO">&gt;   "name": "loop0",
&gt;   "type": 0,
&gt;   "enabled": true,
&gt;   "phys_address": "8a:f1:be:90:00:00",
&gt;   "mtu": 1500,
&gt;   "vrf": 0,
&gt;   "ip_addresses": [
&gt;     "20.1.1.1/24"
&gt;   ]
&gt; }
&gt; ' | vpp-agent-ctl /opt/vpp-agent/dev/etcd.conf -put /vnf-agent/agent_vpp_1/vpp /config/v1/interface/loop0 -
[36mINFO[0m[0000] Connecting to etcd took 2.258818ms            [36mdurationInNs[0m=2258818 [36mloc[0m="etcdv3/bytes_broker_impl.go(84)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] DB putting  /vnf-agent/agent_vpp_1/vpp/config/v1/interface/loop0   {
  "name": "loop0",
  "type": 0,
  "enabled": true,
  "phys_address": "8a:f1:be:90:00:00",
  "mtu": 1500,
  "vrf": 0,
  "ip_addresses": [
    "20.1.1.1/24"
  ]
}

  [36mloc[0m="vpp-agent-ctl/etcd.go(106)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] DB put successful  /vnf-agent/agent_vpp_1/vpp/config/v1/interface/loop0   -  [36mloc[0m="vpp-agent-ctl/etcd.go(112)" [36mlogger[0m=defaultLogger
]0;root@2f7d62033432</msg>
<status status="PASS" endtime="20180516 15:18:42.745" starttime="20180516 15:18:42.745"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>delay=${delay}</arg>
</arguments>
<assign>
<var>${out2}</var>
</assign>
<msg timestamp="20180516 15:18:45.750" level="INFO">: ~root@2f7d62033432:~# [K</msg>
<msg timestamp="20180516 15:18:45.750" level="INFO">${out2} = : ~root@2f7d62033432:~# [K</msg>
<status status="PASS" endtime="20180516 15:18:45.750" starttime="20180516 15:18:42.745"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out2}</arg>
</arguments>
<msg timestamp="20180516 15:18:45.750" level="INFO">: ~root@2f7d62033432:~# [K</msg>
<status status="PASS" endtime="20180516 15:18:45.751" starttime="20180516 15:18:45.750"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${container}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${out2}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:18:45.752" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_vpp_agent_ctl.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_vpp_agent_ctl.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:18:45.752" starttime="20180516 15:18:45.751"></status>
</kw>
<msg timestamp="20180516 15:18:45.752" level="INFO">${out} = &gt;   "name": "loop0",
&gt;   "type": 0,
&gt;   "enabled": true,
&gt;   "phys_address": "8a:f1:be:90:00:00",
&gt;   "mtu": 1500,
&gt;   "vrf": 0,
&gt;   "ip_addresses": [
&gt;     "20.1.1.1/24"
&gt;   ]
&gt; }
&gt; ' | vpp...</msg>
<status status="PASS" endtime="20180516 15:18:45.752" starttime="20180516 15:18:42.710"></status>
</kw>
<status status="PASS" endtime="20180516 15:18:45.752" starttime="20180516 15:18:42.709"></status>
</kw>
<status status="PASS" endtime="20180516 15:18:45.752" starttime="20180516 15:18:42.703"></status>
</kw>
<status status="PASS" endtime="20180516 15:18:45.752" starttime="20180516 15:18:42.702"></status>
</kw>
<kw name="Create loopback interface loop1 on agent_vpp_1 with ip 30.1.1.1/24 and mac 8a:f1:be:90:20:00" library="pretty_keywords">
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${name}</arg>
<arg>${node}</arg>
<arg>${ip}</arg>
<arg>${prefix}</arg>
<arg>${mac}</arg>
</arguments>
<msg timestamp="20180516 15:18:45.754" level="INFO">loop1</msg>
<msg timestamp="20180516 15:18:45.754" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:18:45.754" level="INFO">30.1.1.1</msg>
<msg timestamp="20180516 15:18:45.754" level="INFO">24</msg>
<msg timestamp="20180516 15:18:45.754" level="INFO">8a:f1:be:90:20:00</msg>
<status status="PASS" endtime="20180516 15:18:45.754" starttime="20180516 15:18:45.753"></status>
</kw>
<kw name="vpp_ctl: Put Loopback Interface With IP" library="vpp_ctl">
<arguments>
<arg>${node}</arg>
<arg>${name}</arg>
<arg>${mac}</arg>
<arg>${ip}</arg>
<arg>${prefix}</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${name}</arg>
<arg>${mac}</arg>
<arg>${ip}</arg>
<arg>${prefix}</arg>
<arg>${mtu}</arg>
<arg>${vrf}</arg>
<arg>${enabled}</arg>
</arguments>
<msg timestamp="20180516 15:18:45.755" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:18:45.755" level="INFO">loop1</msg>
<msg timestamp="20180516 15:18:45.755" level="INFO">8a:f1:be:90:20:00</msg>
<msg timestamp="20180516 15:18:45.755" level="INFO">30.1.1.1</msg>
<msg timestamp="20180516 15:18:45.755" level="INFO">24</msg>
<msg timestamp="20180516 15:18:45.755" level="INFO">1500</msg>
<msg timestamp="20180516 15:18:45.755" level="INFO">0</msg>
<msg timestamp="20180516 15:18:45.755" level="INFO">true</msg>
<status status="PASS" endtime="20180516 15:18:45.755" starttime="20180516 15:18:45.755"></status>
</kw>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/home/marcello/workspace/release/vpp-agent/tests/robot/libraries/../resources/loopback_interface_with_ip.json</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20180516 15:18:45.756" html="yes" level="INFO">Getting file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/resources/loopback_interface_with_ip.json"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/resources/loopback_interface_with_ip.json&lt;/a&gt;'.</msg>
<msg timestamp="20180516 15:18:45.756" level="INFO">${data} = {
  "name": "${name}",
  "type": 0,
  "enabled": ${enabled},
  "phys_address": "${mac}",
  "mtu": ${mtu},
  "vrf": ${vrf},
  "ip_addresses": [
    "${ip}/${prefix}"
  ]
}
</msg>
<status status="PASS" endtime="20180516 15:18:45.756" starttime="20180516 15:18:45.756"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/vnf-agent/${node}/vpp/config/v1/interface/${name}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20180516 15:18:45.757" level="INFO">${uri} = /vnf-agent/agent_vpp_1/vpp/config/v1/interface/loop1</msg>
<status status="PASS" endtime="20180516 15:18:45.757" starttime="20180516 15:18:45.757"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${data}</arg>
<arg>${uri}</arg>
</arguments>
<msg timestamp="20180516 15:18:45.758" level="INFO">{
  "name": "${name}",
  "type": 0,
  "enabled": ${enabled},
  "phys_address": "${mac}",
  "mtu": ${mtu},
  "vrf": ${vrf},
  "ip_addresses": [
    "${ip}/${prefix}"
  ]
}
</msg>
<msg timestamp="20180516 15:18:45.758" level="INFO">/vnf-agent/agent_vpp_1/vpp/config/v1/interface/loop1</msg>
<status status="PASS" endtime="20180516 15:18:45.758" starttime="20180516 15:18:45.757"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${data}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20180516 15:18:45.758" level="INFO">${data} = {
  "name": "loop1",
  "type": 0,
  "enabled": true,
  "phys_address": "8a:f1:be:90:20:00",
  "mtu": 1500,
  "vrf": 0,
  "ip_addresses": [
    "30.1.1.1/24"
  ]
}
</msg>
<status status="PASS" endtime="20180516 15:18:45.758" starttime="20180516 15:18:45.758"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${data}</arg>
</arguments>
<msg timestamp="20180516 15:18:45.759" level="INFO">{
  "name": "loop1",
  "type": 0,
  "enabled": true,
  "phys_address": "8a:f1:be:90:20:00",
  "mtu": 1500,
  "vrf": 0,
  "ip_addresses": [
    "30.1.1.1/24"
  ]
}
</msg>
<status status="PASS" endtime="20180516 15:18:45.759" starttime="20180516 15:18:45.759"></status>
</kw>
<kw name="vpp_ctl: Put Json" library="vpp_ctl">
<arguments>
<arg>${uri}</arg>
<arg>${data}</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${key}</arg>
<arg>${json}</arg>
<arg>${container}</arg>
</arguments>
<msg timestamp="20180516 15:18:45.760" level="INFO">/vnf-agent/agent_vpp_1/vpp/config/v1/interface/loop1</msg>
<msg timestamp="20180516 15:18:45.760" level="INFO">{
  "name": "loop1",
  "type": 0,
  "enabled": true,
  "phys_address": "8a:f1:be:90:20:00",
  "mtu": 1500,
  "vrf": 0,
  "ip_addresses": [
    "30.1.1.1/24"
  ]
}
</msg>
<msg timestamp="20180516 15:18:45.760" level="INFO">vpp_agent_ctl</msg>
<status status="PASS" endtime="20180516 15:18:45.760" starttime="20180516 15:18:45.759"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>echo '${json}' | vpp-agent-ctl ${AGENT_VPP_ETCD_CONF_PATH} -put ${key} -</arg>
</arguments>
<assign>
<var>${command}</var>
</assign>
<msg timestamp="20180516 15:18:45.760" level="INFO">${command} = echo '{
  "name": "loop1",
  "type": 0,
  "enabled": true,
  "phys_address": "8a:f1:be:90:20:00",
  "mtu": 1500,
  "vrf": 0,
  "ip_addresses": [
    "30.1.1.1/24"
  ]
}
' | vpp-agent-ctl /opt/vpp-agen...</msg>
<status status="PASS" endtime="20180516 15:18:45.760" starttime="20180516 15:18:45.760"></status>
</kw>
<kw name="Write To Container Until Prompt" library="docker">
<doc>*Write Container vpp_agent_ctl echo '{</doc>
<arguments>
<arg>${container}</arg>
<arg>${command}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${container}</arg>
<arg>${command}</arg>
<arg>${prompt}</arg>
<arg>${delay}</arg>
</arguments>
<msg timestamp="20180516 15:18:45.762" level="INFO">vpp_agent_ctl</msg>
<msg timestamp="20180516 15:18:45.762" level="INFO">echo '{
  "name": "loop1",
  "type": 0,
  "enabled": true,
  "phys_address": "8a:f1:be:90:20:00",
  "mtu": 1500,
  "vrf": 0,
  "ip_addresses": [
    "30.1.1.1/24"
  ]
}
' | vpp-agent-ctl /opt/vpp-agent/dev/etcd.conf -put /vnf-agent/agent_vpp_1/vpp/config/v1/interface/loop1 -</msg>
<msg timestamp="20180516 15:18:45.762" level="INFO">root@</msg>
<msg timestamp="20180516 15:18:45.762" level="INFO">3</msg>
<status status="PASS" endtime="20180516 15:18:45.762" starttime="20180516 15:18:45.762"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${container}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:45.763" starttime="20180516 15:18:45.762"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:18:45.764" level="INFO">${currdate} = 2018-05-16 15:18:45.764</msg>
<status status="PASS" endtime="20180516 15:18:45.764" starttime="20180516 15:18:45.764"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20180516 15:18:45.766" level="INFO">echo '{</msg>
<status status="PASS" endtime="20180516 15:18:45.766" starttime="20180516 15:18:45.764"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>${prompt}${${container}_HOSTNAME}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20180516 15:18:45.793" level="INFO">&gt;   "name": "loop1",
&gt;   "type": 0,
&gt;   "enabled": true,
&gt;   "phys_address": "8a:f1:be:90:20:00",
&gt;   "mtu": 1500,
&gt;   "vrf": 0,
&gt;   "ip_addresses": [
&gt;     "30.1.1.1/24"
&gt;   ]
&gt; }
&gt; ' | vpp-agent-ctl /opt/vpp-agent/dev/etcd.conf -put /vnf-agent/agent_vpp_1/vpp /config/v1/interface/loop1 -
[36mINFO[0m[0000] Connecting to etcd took 1.079844ms            [36mdurationInNs[0m=1079844 [36mloc[0m="etcdv3/bytes_broker_impl.go(84)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] DB putting  /vnf-agent/agent_vpp_1/vpp/config/v1/interface/loop1   {
  "name": "loop1",
  "type": 0,
  "enabled": true,
  "phys_address": "8a:f1:be:90:20:00",
  "mtu": 1500,
  "vrf": 0,
  "ip_addresses": [
    "30.1.1.1/24"
  ]
}

  [36mloc[0m="vpp-agent-ctl/etcd.go(106)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] DB put successful  /vnf-agent/agent_vpp_1/vpp/config/v1/interface/loop1   -  [36mloc[0m="vpp-agent-ctl/etcd.go(112)" [36mlogger[0m=defaultLogger
]0;root@2f7d62033432</msg>
<msg timestamp="20180516 15:18:45.793" level="INFO">${out} = &gt;   "name": "loop1",
&gt;   "type": 0,
&gt;   "enabled": true,
&gt;   "phys_address": "8a:f1:be:90:20:00",
&gt;   "mtu": 1500,
&gt;   "vrf": 0,
&gt;   "ip_addresses": [
&gt;     "30.1.1.1/24"
&gt;   ]
&gt; }
&gt; ' | vpp...</msg>
<status status="PASS" endtime="20180516 15:18:45.793" starttime="20180516 15:18:45.767"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:18:45.794" level="INFO">&gt;   "name": "loop1",
&gt;   "type": 0,
&gt;   "enabled": true,
&gt;   "phys_address": "8a:f1:be:90:20:00",
&gt;   "mtu": 1500,
&gt;   "vrf": 0,
&gt;   "ip_addresses": [
&gt;     "30.1.1.1/24"
&gt;   ]
&gt; }
&gt; ' | vpp-agent-ctl /opt/vpp-agent/dev/etcd.conf -put /vnf-agent/agent_vpp_1/vpp /config/v1/interface/loop1 -
[36mINFO[0m[0000] Connecting to etcd took 1.079844ms            [36mdurationInNs[0m=1079844 [36mloc[0m="etcdv3/bytes_broker_impl.go(84)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] DB putting  /vnf-agent/agent_vpp_1/vpp/config/v1/interface/loop1   {
  "name": "loop1",
  "type": 0,
  "enabled": true,
  "phys_address": "8a:f1:be:90:20:00",
  "mtu": 1500,
  "vrf": 0,
  "ip_addresses": [
    "30.1.1.1/24"
  ]
}

  [36mloc[0m="vpp-agent-ctl/etcd.go(106)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] DB put successful  /vnf-agent/agent_vpp_1/vpp/config/v1/interface/loop1   -  [36mloc[0m="vpp-agent-ctl/etcd.go(112)" [36mlogger[0m=defaultLogger
]0;root@2f7d62033432</msg>
<status status="PASS" endtime="20180516 15:18:45.794" starttime="20180516 15:18:45.794"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>delay=${delay}</arg>
</arguments>
<assign>
<var>${out2}</var>
</assign>
<msg timestamp="20180516 15:18:48.798" level="INFO">: ~root@2f7d62033432:~# [K</msg>
<msg timestamp="20180516 15:18:48.798" level="INFO">${out2} = : ~root@2f7d62033432:~# [K</msg>
<status status="PASS" endtime="20180516 15:18:48.798" starttime="20180516 15:18:45.794"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out2}</arg>
</arguments>
<msg timestamp="20180516 15:18:48.798" level="INFO">: ~root@2f7d62033432:~# [K</msg>
<status status="PASS" endtime="20180516 15:18:48.799" starttime="20180516 15:18:48.798"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${container}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${out2}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:18:48.799" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_vpp_agent_ctl.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_vpp_agent_ctl.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:18:48.799" starttime="20180516 15:18:48.799"></status>
</kw>
<msg timestamp="20180516 15:18:48.800" level="INFO">${out} = &gt;   "name": "loop1",
&gt;   "type": 0,
&gt;   "enabled": true,
&gt;   "phys_address": "8a:f1:be:90:20:00",
&gt;   "mtu": 1500,
&gt;   "vrf": 0,
&gt;   "ip_addresses": [
&gt;     "30.1.1.1/24"
&gt;   ]
&gt; }
&gt; ' | vpp...</msg>
<status status="PASS" endtime="20180516 15:18:48.800" starttime="20180516 15:18:45.761"></status>
</kw>
<status status="PASS" endtime="20180516 15:18:48.800" starttime="20180516 15:18:45.759"></status>
</kw>
<status status="PASS" endtime="20180516 15:18:48.800" starttime="20180516 15:18:45.754"></status>
</kw>
<status status="PASS" endtime="20180516 15:18:48.800" starttime="20180516 15:18:45.753"></status>
</kw>
<kw type="teardown" name="TestTeardown">
<kw name="Make Datastore Snapshots" library="setup-teardown">
<arguments>
<arg>${TEST_NAME}_test_teardown</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tag}</arg>
</arguments>
<msg timestamp="20180516 15:18:48.801" level="INFO">Create Loopbak Intfs_test_teardown</msg>
<status status="PASS" endtime="20180516 15:18:48.802" starttime="20180516 15:18:48.801"></status>
</kw>
<kw name="Create Next Snapshot Prefix" library="setup-teardown">
<assign>
<var>${prefix}</var>
</assign>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>str(${snapshot_num}).zfill(3)</arg>
</arguments>
<assign>
<var>${prefix}</var>
</assign>
<msg timestamp="20180516 15:18:48.802" level="INFO">${prefix} = 007</msg>
<status status="PASS" endtime="20180516 15:18:48.802" starttime="20180516 15:18:48.802"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${snapshot_num}+1</arg>
</arguments>
<assign>
<var>${snapshot_num}</var>
</assign>
<msg timestamp="20180516 15:18:48.803" level="INFO">${snapshot_num} = 8</msg>
<status status="PASS" endtime="20180516 15:18:48.803" starttime="20180516 15:18:48.803"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${snapshot_num}</arg>
</arguments>
<msg timestamp="20180516 15:18:48.803" level="INFO">${snapshot_num} = 8</msg>
<status status="PASS" endtime="20180516 15:18:48.803" starttime="20180516 15:18:48.803"></status>
</kw>
<msg timestamp="20180516 15:18:48.804" level="INFO">${prefix} = 007</msg>
<status status="PASS" endtime="20180516 15:18:48.804" starttime="20180516 15:18:48.802"></status>
</kw>
<kw name="Take ETCD Snapshots" library="setup-teardown">
<arguments>
<arg>${prefix}_${tag}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tag}</arg>
</arguments>
<msg timestamp="20180516 15:18:48.804" level="INFO">007_Create Loopbak Intfs_test_teardown</msg>
<status status="PASS" endtime="20180516 15:18:48.804" starttime="20180516 15:18:48.804"></status>
</kw>
<kw name="Get ETCD Dump" library="setup-teardown">
<assign>
<var>${dump}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DOCKER_COMMAND} exec etcd etcdctl get --prefix="true" ""</arg>
</arguments>
<assign>
<var>${command}</var>
</assign>
<msg timestamp="20180516 15:18:48.805" level="INFO">${command} = sudo docker exec etcd etcdctl get --prefix="true" ""</msg>
<status status="PASS" endtime="20180516 15:18:48.805" starttime="20180516 15:18:48.805"></status>
</kw>
<kw name="Execute On Machine" library="ssh">
<doc>*Execute On Machine ${machine} sudo docker exec etcd etcdctl get --prefix="true" ""*</doc>
<arguments>
<arg>docker</arg>
<arg>${command}</arg>
<arg>log=false</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${log}</arg>
</arguments>
<msg timestamp="20180516 15:18:48.811" level="INFO">docker</msg>
<msg timestamp="20180516 15:18:48.811" level="INFO">sudo docker exec etcd etcdctl get --prefix="true" ""</msg>
<msg timestamp="20180516 15:18:48.811" level="INFO">false</msg>
<status status="PASS" endtime="20180516 15:18:48.811" starttime="20180516 15:18:48.810"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:48.812" starttime="20180516 15:18:48.811"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:18:48.812" level="INFO">${currdate} = 2018-05-16 15:18:48.812</msg>
<status status="PASS" endtime="20180516 15:18:48.812" starttime="20180516 15:18:48.812"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20180516 15:18:48.813" level="INFO">Executing command 'sudo docker exec etcd etcdctl get --prefix="true" ""'.</msg>
<msg timestamp="20180516 15:18:49.171" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:18:49.172" level="INFO">${out} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<msg timestamp="20180516 15:18:49.172" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20180516 15:18:49.172" starttime="20180516 15:18:48.813"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${out}</arg>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:18:49.172" level="INFO">/sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-containers","description":"Wire 2 VNF containers to the vpp switch","type":2,"elements":[{"container":"node_1","port_label":"node1_veth","etcd_vpp_switch_key":"agent_vpp_1","ipv4_addr":"10.0.0.10","type":3},{"container":"node_2","port_label":"node2_veth","etcd_vpp_switch_key":"agent_vpp_1","ipv4_addr":"10.0.0.11","type":3}]}
/sfc-controller/v1/SP
{"mtu":1500,"starting_vlan_id":5000,"default_static_route_weight":5,"dynamic_bridge_parms":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true},"static_bridge_parms":{"forward":true}}
/sfc-controller/v1/id/HE/agent_vpp_1
{"name":"agent_vpp_1"}
/sfc-controller/v1/id/SFC/two-sample-vnf-containers/node_1_node1_veth
{"sfc_name":"two-sample-vnf-containers","container":"node_1","port":"node1_veth","mac_addr_id":1,"veth_id":1}
/sfc-controller/v1/id/SFC/two-sample-vnf-containers/node_2_node2_veth
{"sfc_name":"two-sample-vnf-containers","container":"node_2","port":"node2_veth","mac_addr_id":2,"veth_id":2}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VNF_node_1_node1_veth
{"name":"IF_VETH_VNF_node_1_node1_veth","enabled":true,"phys_address":"02:00:00:00:00:01","mtu":1500,"host_if_name":"node1_veth","ip_addresses":["10.0.0.10/24"],"namespace":{"type":1,"microservice":"node_1"},"veth":{"peer_if_name":"IF_VETH_VSWITCH_node_1_node1_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VNF_node_2_node2_veth
{"name":"IF_VETH_VNF_node_2_node2_veth","enabled":true,"phys_address":"02:00:00:00:00:02","mtu":1500,"host_if_name":"node2_veth","ip_addresses":["10.0.0.11/24"],"namespace":{"type":1,"microservice":"node_2"},"veth":{"peer_if_name":"IF_VETH_VSWITCH_node_2_node2_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VSWITCH_node_1_node1_veth
{"name":"IF_VETH_VSWITCH_node_1_node1_veth","enabled":true,"mtu":1500,"host_if_name":"node_1_noeth_1","namespace":{"type":1,"microservice":"agent_vpp_1"},"veth":{"peer_if_name":"IF_VETH_VNF_node_1_node1_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VSWITCH_node_2_node2_veth
{"name":"IF_VETH_VSWITCH_node_2_node2_veth","enabled":true,"mtu":1500,"host_if_name":"node_2_noeth_2","namespace":{"type":1,"microservice":"agent_vpp_1"},"veth":{"peer_if_name":"IF_VETH_VNF_node_2_node2_veth"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/BD_INTERNAL_EW_L2FIB_agent_vpp_1
{"name":"BD_INTERNAL_EW_L2FIB_agent_vpp_1","forward":true}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/BD_INTERNAL_EW_agent_vpp_1
{"name":"BD_INTERNAL_EW_agent_vpp_1","flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true,"interfaces":[{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth"},{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth"}]}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth
{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","type":4,"enabled":true,"mtu":1500,"afpacket":{"host_if_name":"node_1_noeth_1"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth
{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","type":4,"enabled":true,"mtu":1500,"afpacket":{"host_if_name":"node_2_noeth_2"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_LOOPBACK_H_agent_vpp_1
{"name":"IF_LOOPBACK_H_agent_vpp_1","enabled":true,"phys_address":"02:00:00:AA:BB:00","mtu":1500,"ip_addresses":["6.0.0.100"]}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/loop0
{
  "name": "loop0",
  "type": 0,
  "enabled": true,
  "phys_address": "8a:f1:be:90:00:00",
  "mtu": 1500,
  "vrf": 0,
  "ip_addresses": [
    "20.1.1.1/24"
  ]
}


/vnf-agent/agent_vpp_1/vpp/config/v1/interface/loop1
{
  "name": "loop1",
  "type": 0,
  "enabled": true,
  "phys_address": "8a:f1:be:90:20:00",
  "mtu": 1500,
  "vrf": 0,
  "ip_addresses": [
    "30.1.1.1/24"
  ]
}


/vnf-agent/agent_vpp_1/vpp/status/v1/bd/BD_INTERNAL_EW_L2FIB_agent_vpp_1
{"index":2,"internal_name":"BD_INTERNAL_EW_L2FIB_agent_vpp_1","bvi_interface":"not_set","last_change":1526476631,"l2_params":{"forward":true}}
/vnf-agent/agent_vpp_1/vpp/status/v1/bd/BD_INTERNAL_EW_agent_vpp_1
{"index":1,"internal_name":"BD_INTERNAL_EW_agent_vpp_1","bvi_interface":"not_set","interface_count":2,"last_change":1526476631,"l2_params":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true},"interfaces":[{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","sw_if_index":2},{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","sw_if_index":3}]}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth
{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","internal_name":"host-node_1_noeth_1","if_index":2,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:3e:fd:61:28","mtu":1500,"statistics":{"in_packets":18,"in_bytes":1412}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth
{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","internal_name":"host-node_2_noeth_2","if_index":3,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:42:98:22:08","mtu":1500,"statistics":{"in_packets":20,"in_bytes":1592}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_LOOPBACK_H_agent_vpp_1
{"name":"IF_LOOPBACK_H_agent_vpp_1","internal_name":"loop0","if_index":1,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:00:00:aa:bb:00","mtu":1500,"statistics":{}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/local0
{"name":"local0","internal_name":"local0","admin_status":2,"oper_status":2,"statistics":{}}
/vnf-agent/node_1/check/status/v1/agent
{"build_version":"v1.1-5-g55e9977","build_date":"2018-03-06T11:05+00:00","state":1,"start_time":1526476614,"last_change":1526476619,"last_update":1526476725,"commit_hash":"55e99770087087fa8e41a980a8b6257c80c93f4c"}
/vnf-agent/node_1/check/status/v1/plugin/etcdv3
{"state":1,"last_change":1526476619,"last_update":1526476725}
/vnf-agent/node_1/check/status/v1/plugin/kafka
{"state":1,"last_change":1526476619,"last_update":1526476725}
/vnf-agent/node_2/check/status/v1/agent
{"build_version":"v1.1-5-g55e9977","build_date":"2018-03-06T11:05+00:00","state":1,"start_time":1526476623,"last_change":1526476628,"last_update":1526476723,"commit_hash":"55e99770087087fa8e41a980a8b6257c80c93f4c"}
/vnf-agent/node_2/check/status/v1/plugin/etcdv3
{"state":1,"last_change":1526476628,"last_update":1526476723}
/vnf-agent/node_2/check/status/v1/plugin/kafka
{"state":1,"last_change":1526476628,"last_update":1526476723}</msg>
<msg timestamp="20180516 15:18:49.173" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:18:49.173" starttime="20180516 15:18:49.172"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:18:49.174" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:18:49.174" starttime="20180516 15:18:49.173"></status>
</kw>
<msg timestamp="20180516 15:18:49.174" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:18:49.174" starttime="20180516 15:18:49.173"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} on ${machine}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:49.175" starttime="20180516 15:18:49.174"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${log}'=='true'</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:49.176" starttime="20180516 15:18:49.176"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:49.177" starttime="20180516 15:18:49.177"></status>
</kw>
<msg timestamp="20180516 15:18:49.177" level="INFO">${out} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<status status="PASS" endtime="20180516 15:18:49.177" starttime="20180516 15:18:48.810"></status>
</kw>
<msg timestamp="20180516 15:18:49.177" level="INFO">${dump} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<status status="PASS" endtime="20180516 15:18:49.177" starttime="20180516 15:18:48.805"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/etcd_dump-${tag}.txt</arg>
<arg>${dump}</arg>
</arguments>
<msg timestamp="20180516 15:18:49.178" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/etcd_dump-007_Create Loopbak Intfs_test_teardown.txt"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/etcd_dump-007_Create Loopbak Intfs_test_teardown.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:18:49.178" starttime="20180516 15:18:49.178"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${dump}</arg>
<arg>/error/</arg>
</arguments>
<assign>
<var>${errors}</var>
</assign>
<msg timestamp="20180516 15:18:49.179" level="INFO">0 out of 82 lines matched</msg>
<msg timestamp="20180516 15:18:49.179" level="INFO">${errors} = </msg>
<status status="PASS" endtime="20180516 15:18:49.179" starttime="20180516 15:18:49.178"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${errors}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${errors}</arg>
</arguments>
<msg timestamp="20180516 15:18:49.179" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:18:49.179" starttime="20180516 15:18:49.179"></status>
</kw>
<msg timestamp="20180516 15:18:49.180" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:18:49.180" starttime="20180516 15:18:49.179"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>Errors detected in keys: ${errors}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:49.180" starttime="20180516 15:18:49.180"></status>
</kw>
<status status="PASS" endtime="20180516 15:18:49.180" starttime="20180516 15:18:48.804"></status>
</kw>
<status status="PASS" endtime="20180516 15:18:49.180" starttime="20180516 15:18:48.801"></status>
</kw>
<status status="PASS" endtime="20180516 15:18:49.180" starttime="20180516 15:18:48.801"></status>
</kw>
<status status="PASS" endtime="20180516 15:18:49.181" critical="yes" starttime="20180516 15:18:42.299"></status>
</test>
<test id="s1-t4" name="Check Veth Interface On Agent1">
<kw type="setup" name="TestSetup">
<kw name="Make Datastore Snapshots" library="setup-teardown">
<arguments>
<arg>${TEST_NAME}_test_setup</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tag}</arg>
</arguments>
<msg timestamp="20180516 15:18:49.182" level="INFO">Check Veth Interface On Agent1_test_setup</msg>
<status status="PASS" endtime="20180516 15:18:49.182" starttime="20180516 15:18:49.182"></status>
</kw>
<kw name="Create Next Snapshot Prefix" library="setup-teardown">
<assign>
<var>${prefix}</var>
</assign>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>str(${snapshot_num}).zfill(3)</arg>
</arguments>
<assign>
<var>${prefix}</var>
</assign>
<msg timestamp="20180516 15:18:49.183" level="INFO">${prefix} = 008</msg>
<status status="PASS" endtime="20180516 15:18:49.183" starttime="20180516 15:18:49.183"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${snapshot_num}+1</arg>
</arguments>
<assign>
<var>${snapshot_num}</var>
</assign>
<msg timestamp="20180516 15:18:49.184" level="INFO">${snapshot_num} = 9</msg>
<status status="PASS" endtime="20180516 15:18:49.184" starttime="20180516 15:18:49.183"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${snapshot_num}</arg>
</arguments>
<msg timestamp="20180516 15:18:49.184" level="INFO">${snapshot_num} = 9</msg>
<status status="PASS" endtime="20180516 15:18:49.184" starttime="20180516 15:18:49.184"></status>
</kw>
<msg timestamp="20180516 15:18:49.184" level="INFO">${prefix} = 008</msg>
<status status="PASS" endtime="20180516 15:18:49.184" starttime="20180516 15:18:49.182"></status>
</kw>
<kw name="Take ETCD Snapshots" library="setup-teardown">
<arguments>
<arg>${prefix}_${tag}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tag}</arg>
</arguments>
<msg timestamp="20180516 15:18:49.185" level="INFO">008_Check Veth Interface On Agent1_test_setup</msg>
<status status="PASS" endtime="20180516 15:18:49.185" starttime="20180516 15:18:49.185"></status>
</kw>
<kw name="Get ETCD Dump" library="setup-teardown">
<assign>
<var>${dump}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DOCKER_COMMAND} exec etcd etcdctl get --prefix="true" ""</arg>
</arguments>
<assign>
<var>${command}</var>
</assign>
<msg timestamp="20180516 15:18:49.186" level="INFO">${command} = sudo docker exec etcd etcdctl get --prefix="true" ""</msg>
<status status="PASS" endtime="20180516 15:18:49.186" starttime="20180516 15:18:49.186"></status>
</kw>
<kw name="Execute On Machine" library="ssh">
<doc>*Execute On Machine ${machine} sudo docker exec etcd etcdctl get --prefix="true" ""*</doc>
<arguments>
<arg>docker</arg>
<arg>${command}</arg>
<arg>log=false</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${log}</arg>
</arguments>
<msg timestamp="20180516 15:18:49.193" level="INFO">docker</msg>
<msg timestamp="20180516 15:18:49.193" level="INFO">sudo docker exec etcd etcdctl get --prefix="true" ""</msg>
<msg timestamp="20180516 15:18:49.193" level="INFO">false</msg>
<status status="PASS" endtime="20180516 15:18:49.193" starttime="20180516 15:18:49.193"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:49.201" starttime="20180516 15:18:49.200"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:18:49.201" level="INFO">${currdate} = 2018-05-16 15:18:49.201</msg>
<status status="PASS" endtime="20180516 15:18:49.201" starttime="20180516 15:18:49.201"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20180516 15:18:49.202" level="INFO">Executing command 'sudo docker exec etcd etcdctl get --prefix="true" ""'.</msg>
<msg timestamp="20180516 15:18:49.500" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:18:49.500" level="INFO">${out} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<msg timestamp="20180516 15:18:49.500" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20180516 15:18:49.500" starttime="20180516 15:18:49.202"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${out}</arg>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:18:49.501" level="INFO">/sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-containers","description":"Wire 2 VNF containers to the vpp switch","type":2,"elements":[{"container":"node_1","port_label":"node1_veth","etcd_vpp_switch_key":"agent_vpp_1","ipv4_addr":"10.0.0.10","type":3},{"container":"node_2","port_label":"node2_veth","etcd_vpp_switch_key":"agent_vpp_1","ipv4_addr":"10.0.0.11","type":3}]}
/sfc-controller/v1/SP
{"mtu":1500,"starting_vlan_id":5000,"default_static_route_weight":5,"dynamic_bridge_parms":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true},"static_bridge_parms":{"forward":true}}
/sfc-controller/v1/id/HE/agent_vpp_1
{"name":"agent_vpp_1"}
/sfc-controller/v1/id/SFC/two-sample-vnf-containers/node_1_node1_veth
{"sfc_name":"two-sample-vnf-containers","container":"node_1","port":"node1_veth","mac_addr_id":1,"veth_id":1}
/sfc-controller/v1/id/SFC/two-sample-vnf-containers/node_2_node2_veth
{"sfc_name":"two-sample-vnf-containers","container":"node_2","port":"node2_veth","mac_addr_id":2,"veth_id":2}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VNF_node_1_node1_veth
{"name":"IF_VETH_VNF_node_1_node1_veth","enabled":true,"phys_address":"02:00:00:00:00:01","mtu":1500,"host_if_name":"node1_veth","ip_addresses":["10.0.0.10/24"],"namespace":{"type":1,"microservice":"node_1"},"veth":{"peer_if_name":"IF_VETH_VSWITCH_node_1_node1_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VNF_node_2_node2_veth
{"name":"IF_VETH_VNF_node_2_node2_veth","enabled":true,"phys_address":"02:00:00:00:00:02","mtu":1500,"host_if_name":"node2_veth","ip_addresses":["10.0.0.11/24"],"namespace":{"type":1,"microservice":"node_2"},"veth":{"peer_if_name":"IF_VETH_VSWITCH_node_2_node2_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VSWITCH_node_1_node1_veth
{"name":"IF_VETH_VSWITCH_node_1_node1_veth","enabled":true,"mtu":1500,"host_if_name":"node_1_noeth_1","namespace":{"type":1,"microservice":"agent_vpp_1"},"veth":{"peer_if_name":"IF_VETH_VNF_node_1_node1_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VSWITCH_node_2_node2_veth
{"name":"IF_VETH_VSWITCH_node_2_node2_veth","enabled":true,"mtu":1500,"host_if_name":"node_2_noeth_2","namespace":{"type":1,"microservice":"agent_vpp_1"},"veth":{"peer_if_name":"IF_VETH_VNF_node_2_node2_veth"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/BD_INTERNAL_EW_L2FIB_agent_vpp_1
{"name":"BD_INTERNAL_EW_L2FIB_agent_vpp_1","forward":true}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/BD_INTERNAL_EW_agent_vpp_1
{"name":"BD_INTERNAL_EW_agent_vpp_1","flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true,"interfaces":[{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth"},{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth"}]}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth
{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","type":4,"enabled":true,"mtu":1500,"afpacket":{"host_if_name":"node_1_noeth_1"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth
{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","type":4,"enabled":true,"mtu":1500,"afpacket":{"host_if_name":"node_2_noeth_2"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_LOOPBACK_H_agent_vpp_1
{"name":"IF_LOOPBACK_H_agent_vpp_1","enabled":true,"phys_address":"02:00:00:AA:BB:00","mtu":1500,"ip_addresses":["6.0.0.100"]}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/loop0
{
  "name": "loop0",
  "type": 0,
  "enabled": true,
  "phys_address": "8a:f1:be:90:00:00",
  "mtu": 1500,
  "vrf": 0,
  "ip_addresses": [
    "20.1.1.1/24"
  ]
}


/vnf-agent/agent_vpp_1/vpp/config/v1/interface/loop1
{
  "name": "loop1",
  "type": 0,
  "enabled": true,
  "phys_address": "8a:f1:be:90:20:00",
  "mtu": 1500,
  "vrf": 0,
  "ip_addresses": [
    "30.1.1.1/24"
  ]
}


/vnf-agent/agent_vpp_1/vpp/status/v1/bd/BD_INTERNAL_EW_L2FIB_agent_vpp_1
{"index":2,"internal_name":"BD_INTERNAL_EW_L2FIB_agent_vpp_1","bvi_interface":"not_set","last_change":1526476631,"l2_params":{"forward":true}}
/vnf-agent/agent_vpp_1/vpp/status/v1/bd/BD_INTERNAL_EW_agent_vpp_1
{"index":1,"internal_name":"BD_INTERNAL_EW_agent_vpp_1","bvi_interface":"not_set","interface_count":2,"last_change":1526476631,"l2_params":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true},"interfaces":[{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","sw_if_index":2},{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","sw_if_index":3}]}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth
{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","internal_name":"host-node_1_noeth_1","if_index":2,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:3e:fd:61:28","mtu":1500,"statistics":{"in_packets":18,"in_bytes":1412}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth
{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","internal_name":"host-node_2_noeth_2","if_index":3,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:42:98:22:08","mtu":1500,"statistics":{"in_packets":20,"in_bytes":1592}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_LOOPBACK_H_agent_vpp_1
{"name":"IF_LOOPBACK_H_agent_vpp_1","internal_name":"loop0","if_index":1,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:00:00:aa:bb:00","mtu":1500,"statistics":{}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/local0
{"name":"local0","internal_name":"local0","admin_status":2,"oper_status":2,"statistics":{}}
/vnf-agent/node_1/check/status/v1/agent
{"build_version":"v1.1-5-g55e9977","build_date":"2018-03-06T11:05+00:00","state":1,"start_time":1526476614,"last_change":1526476619,"last_update":1526476725,"commit_hash":"55e99770087087fa8e41a980a8b6257c80c93f4c"}
/vnf-agent/node_1/check/status/v1/plugin/etcdv3
{"state":1,"last_change":1526476619,"last_update":1526476725}
/vnf-agent/node_1/check/status/v1/plugin/kafka
{"state":1,"last_change":1526476619,"last_update":1526476725}
/vnf-agent/node_2/check/status/v1/agent
{"build_version":"v1.1-5-g55e9977","build_date":"2018-03-06T11:05+00:00","state":1,"start_time":1526476623,"last_change":1526476628,"last_update":1526476723,"commit_hash":"55e99770087087fa8e41a980a8b6257c80c93f4c"}
/vnf-agent/node_2/check/status/v1/plugin/etcdv3
{"state":1,"last_change":1526476628,"last_update":1526476723}
/vnf-agent/node_2/check/status/v1/plugin/kafka
{"state":1,"last_change":1526476628,"last_update":1526476723}</msg>
<msg timestamp="20180516 15:18:49.501" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:18:49.501" starttime="20180516 15:18:49.501"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:18:49.502" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:18:49.502" starttime="20180516 15:18:49.502"></status>
</kw>
<msg timestamp="20180516 15:18:49.502" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:18:49.502" starttime="20180516 15:18:49.502"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} on ${machine}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:49.503" starttime="20180516 15:18:49.503"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${log}'=='true'</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:49.503" starttime="20180516 15:18:49.503"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:49.504" starttime="20180516 15:18:49.504"></status>
</kw>
<msg timestamp="20180516 15:18:49.504" level="INFO">${out} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<status status="PASS" endtime="20180516 15:18:49.504" starttime="20180516 15:18:49.191"></status>
</kw>
<msg timestamp="20180516 15:18:49.504" level="INFO">${dump} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<status status="PASS" endtime="20180516 15:18:49.504" starttime="20180516 15:18:49.185"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/etcd_dump-${tag}.txt</arg>
<arg>${dump}</arg>
</arguments>
<msg timestamp="20180516 15:18:49.505" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/etcd_dump-008_Check Veth Interface On Agent1_test_setup.txt"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/etcd_dump-008_Check Veth Interface On Agent1_test_setup.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:18:49.505" starttime="20180516 15:18:49.504"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${dump}</arg>
<arg>/error/</arg>
</arguments>
<assign>
<var>${errors}</var>
</assign>
<msg timestamp="20180516 15:18:49.505" level="INFO">0 out of 82 lines matched</msg>
<msg timestamp="20180516 15:18:49.506" level="INFO">${errors} = </msg>
<status status="PASS" endtime="20180516 15:18:49.506" starttime="20180516 15:18:49.505"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${errors}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${errors}</arg>
</arguments>
<msg timestamp="20180516 15:18:49.507" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:18:49.507" starttime="20180516 15:18:49.506"></status>
</kw>
<msg timestamp="20180516 15:18:49.507" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:18:49.507" starttime="20180516 15:18:49.506"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>Errors detected in keys: ${errors}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:49.507" starttime="20180516 15:18:49.507"></status>
</kw>
<status status="PASS" endtime="20180516 15:18:49.507" starttime="20180516 15:18:49.184"></status>
</kw>
<status status="PASS" endtime="20180516 15:18:49.508" starttime="20180516 15:18:49.182"></status>
</kw>
<status status="PASS" endtime="20180516 15:18:49.508" starttime="20180516 15:18:49.181"></status>
</kw>
<kw name="linux: Interface With IP Is Created" library="linux">
<arguments>
<arg>node_1</arg>
<arg>mac=${AGENT1_VETH_MAC}</arg>
<arg>ipv4=10.0.0.10/24</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${mac}</arg>
<arg>${ipv4}</arg>
</arguments>
<msg timestamp="20180516 15:18:49.509" level="INFO">node_1</msg>
<msg timestamp="20180516 15:18:49.509" level="INFO">02:00:00:00:00:01</msg>
<msg timestamp="20180516 15:18:49.509" level="INFO">10.0.0.10/24</msg>
<status status="PASS" endtime="20180516 15:18:49.509" starttime="20180516 15:18:49.509"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${interface_timeout}</arg>
<arg>3s</arg>
<arg>linux: Check Interface With IP Presence</arg>
<arg>${node}</arg>
<arg>${mac}</arg>
<arg>${ipv4}</arg>
</arguments>
<kw name="linux: Check Interface With IP Presence" library="linux">
<doc>Checking if specified interface with mac and ip exists in linux</doc>
<arguments>
<arg>${node}</arg>
<arg>${mac}</arg>
<arg>${ipv4}</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${mac}</arg>
<arg>${ip}</arg>
<arg>${status}</arg>
</arguments>
<msg timestamp="20180516 15:18:49.511" level="INFO">node_1</msg>
<msg timestamp="20180516 15:18:49.511" level="INFO">02:00:00:00:00:01</msg>
<msg timestamp="20180516 15:18:49.511" level="INFO">10.0.0.10/24</msg>
<msg timestamp="20180516 15:18:49.511" level="INFO">True</msg>
<status status="PASS" endtime="20180516 15:18:49.511" starttime="20180516 15:18:49.511"></status>
</kw>
<kw name="linux: Get Linux Interfaces" library="linux">
<arguments>
<arg>${node}</arg>
</arguments>
<assign>
<var>${ints}</var>
</assign>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${node}</arg>
</arguments>
<msg timestamp="20180516 15:18:49.512" level="INFO">node_1</msg>
<status status="PASS" endtime="20180516 15:18:49.512" starttime="20180516 15:18:49.512"></status>
</kw>
<kw name="Execute In Container" library="docker">
<arguments>
<arg>${node}</arg>
<arg>ip a</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${container}</arg>
<arg>${command}</arg>
</arguments>
<msg timestamp="20180516 15:18:49.513" level="INFO">node_1</msg>
<msg timestamp="20180516 15:18:49.513" level="INFO">ip a</msg>
<status status="PASS" endtime="20180516 15:18:49.513" starttime="20180516 15:18:49.513"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>docker</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:49.513" starttime="20180516 15:18:49.513"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:18:49.514" level="INFO">${currdate} = 2018-05-16 15:18:49.514</msg>
<status status="PASS" endtime="20180516 15:18:49.514" starttime="20180516 15:18:49.514"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DOCKER_COMMAND} exec ${container} ${command}</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20180516 15:18:49.514" level="INFO">Executing command 'sudo docker exec node_1 ip a'.</msg>
<msg timestamp="20180516 15:18:49.911" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:18:49.911" level="INFO">${out} = 1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lf...</msg>
<msg timestamp="20180516 15:18:49.911" level="INFO">${stderr} = </msg>
<msg timestamp="20180516 15:18:49.911" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20180516 15:18:49.912" starttime="20180516 15:18:49.514"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:18:49.912" level="INFO">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host 
       valid_lft forever preferred_lft forever
2: node1_veth@if3: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default 
    link/ether 02:00:00:00:00:01 brd ff:ff:ff:ff:ff:ff link-netnsid 1
    inet 10.0.0.10/24 brd 10.0.0.255 scope global node1_veth
       valid_lft forever preferred_lft forever
    inet6 fe80::7c81:42ff:fe85:225e/64 scope link 
       valid_lft forever preferred_lft forever
291: eth0@if292: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default 
    link/ether 02:42:ac:11:00:06 brd ff:ff:ff:ff:ff:ff link-netnsid 0
    inet 172.17.0.6/16 brd 172.17.255.255 scope global eth0
       valid_lft forever preferred_lft forever
    inet6 fe80::42:acff:fe11:6/64 scope link 
       valid_lft forever preferred_lft forever</msg>
<status status="PASS" endtime="20180516 15:18:49.913" starttime="20180516 15:18:49.912"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:18:49.913" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:18:49.913" starttime="20180516 15:18:49.913"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${rc}</arg>
</arguments>
<msg timestamp="20180516 15:18:49.914" level="INFO">0</msg>
<status status="PASS" endtime="20180516 15:18:49.914" starttime="20180516 15:18:49.913"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:18:49.914" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:18:49.914" starttime="20180516 15:18:49.914"></status>
</kw>
<msg timestamp="20180516 15:18:49.915" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:18:49.915" starttime="20180516 15:18:49.914"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} in container ${container}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:49.915" starttime="20180516 15:18:49.915"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${container}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}***</arg>
</arguments>
<msg timestamp="20180516 15:18:49.916" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_node_1.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_node_1.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:18:49.916" starttime="20180516 15:18:49.915"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${container}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:49.917" starttime="20180516 15:18:49.916"></status>
</kw>
<msg timestamp="20180516 15:18:49.917" level="INFO">${out} = 1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lf...</msg>
<status status="PASS" endtime="20180516 15:18:49.917" starttime="20180516 15:18:49.512"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:18:49.917" level="INFO">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host 
       valid_lft forever preferred_lft forever
2: node1_veth@if3: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default 
    link/ether 02:00:00:00:00:01 brd ff:ff:ff:ff:ff:ff link-netnsid 1
    inet 10.0.0.10/24 brd 10.0.0.255 scope global node1_veth
       valid_lft forever preferred_lft forever
    inet6 fe80::7c81:42ff:fe85:225e/64 scope link 
       valid_lft forever preferred_lft forever
291: eth0@if292: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default 
    link/ether 02:42:ac:11:00:06 brd ff:ff:ff:ff:ff:ff link-netnsid 0
    inet 172.17.0.6/16 brd 172.17.255.255 scope global eth0
       valid_lft forever preferred_lft forever
    inet6 fe80::42:acff:fe11:6/64 scope link 
       valid_lft forever preferred_lft forever</msg>
<status status="PASS" endtime="20180516 15:18:49.917" starttime="20180516 15:18:49.917"></status>
</kw>
<kw name="Parse Linux Interfaces" library="linux">
<arguments>
<arg>${out}</arg>
</arguments>
<assign>
<var>${ints}</var>
</assign>
<msg timestamp="20180516 15:18:49.918" level="INFO">${ints} = {u'lo': {'ipv6': u'::1/128', 'state': u'unknown', 'ipv4': u'127.0.0.1/8', 'mac': u'00:00:00:00:00:00', 'mtu': u'65536'}, u'node1_veth@if3': {'state': u'up', 'ipv4': u'10.0.0.10/24', 'mac': u'02:00:00:...</msg>
<status status="PASS" endtime="20180516 15:18:49.918" starttime="20180516 15:18:49.917"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${ints}</arg>
</arguments>
<msg timestamp="20180516 15:18:49.918" level="INFO">{u'lo': {'ipv6': u'::1/128', 'state': u'unknown', 'ipv4': u'127.0.0.1/8', 'mac': u'00:00:00:00:00:00', 'mtu': u'65536'}, u'node1_veth@if3': {'state': u'up', 'ipv4': u'10.0.0.10/24', 'mac': u'02:00:00:00:00:01', 'mtu': u'1500'}, u'eth0@if292': {'state': u'up', 'ipv4': u'172.17.0.6/16', 'mac': u'02:42:ac:11:00:06', 'mtu': u'1500'}}</msg>
<status status="PASS" endtime="20180516 15:18:49.918" starttime="20180516 15:18:49.918"></status>
</kw>
<msg timestamp="20180516 15:18:49.918" level="INFO">${ints} = {u'lo': {'ipv6': u'::1/128', 'state': u'unknown', 'ipv4': u'127.0.0.1/8', 'mac': u'00:00:00:00:00:00', 'mtu': u'65536'}, u'node1_veth@if3': {'state': u'up', 'ipv4': u'10.0.0.10/24', 'mac': u'02:00:00:...</msg>
<status status="PASS" endtime="20180516 15:18:49.918" starttime="20180516 15:18:49.511"></status>
</kw>
<kw name="Check Linux Interface IP Presence" library="linux">
<arguments>
<arg>${ints}</arg>
<arg>${mac}</arg>
<arg>${ip}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20180516 15:18:49.919" level="INFO">${result} = True</msg>
<status status="PASS" endtime="20180516 15:18:49.919" starttime="20180516 15:18:49.919"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${result}</arg>
<arg>${status}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:49.919" starttime="20180516 15:18:49.919"></status>
</kw>
<status status="PASS" endtime="20180516 15:18:49.920" starttime="20180516 15:18:49.510"></status>
</kw>
<status status="PASS" endtime="20180516 15:18:49.920" starttime="20180516 15:18:49.509"></status>
</kw>
<status status="PASS" endtime="20180516 15:18:49.920" starttime="20180516 15:18:49.508"></status>
</kw>
<kw type="teardown" name="TestTeardown">
<kw name="Make Datastore Snapshots" library="setup-teardown">
<arguments>
<arg>${TEST_NAME}_test_teardown</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tag}</arg>
</arguments>
<msg timestamp="20180516 15:18:49.921" level="INFO">Check Veth Interface On Agent1_test_teardown</msg>
<status status="PASS" endtime="20180516 15:18:49.921" starttime="20180516 15:18:49.921"></status>
</kw>
<kw name="Create Next Snapshot Prefix" library="setup-teardown">
<assign>
<var>${prefix}</var>
</assign>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>str(${snapshot_num}).zfill(3)</arg>
</arguments>
<assign>
<var>${prefix}</var>
</assign>
<msg timestamp="20180516 15:18:49.922" level="INFO">${prefix} = 009</msg>
<status status="PASS" endtime="20180516 15:18:49.922" starttime="20180516 15:18:49.922"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${snapshot_num}+1</arg>
</arguments>
<assign>
<var>${snapshot_num}</var>
</assign>
<msg timestamp="20180516 15:18:49.923" level="INFO">${snapshot_num} = 10</msg>
<status status="PASS" endtime="20180516 15:18:49.923" starttime="20180516 15:18:49.922"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${snapshot_num}</arg>
</arguments>
<msg timestamp="20180516 15:18:49.923" level="INFO">${snapshot_num} = 10</msg>
<status status="PASS" endtime="20180516 15:18:49.923" starttime="20180516 15:18:49.923"></status>
</kw>
<msg timestamp="20180516 15:18:49.923" level="INFO">${prefix} = 009</msg>
<status status="PASS" endtime="20180516 15:18:49.924" starttime="20180516 15:18:49.922"></status>
</kw>
<kw name="Take ETCD Snapshots" library="setup-teardown">
<arguments>
<arg>${prefix}_${tag}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tag}</arg>
</arguments>
<msg timestamp="20180516 15:18:49.925" level="INFO">009_Check Veth Interface On Agent1_test_teardown</msg>
<status status="PASS" endtime="20180516 15:18:49.925" starttime="20180516 15:18:49.924"></status>
</kw>
<kw name="Get ETCD Dump" library="setup-teardown">
<assign>
<var>${dump}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DOCKER_COMMAND} exec etcd etcdctl get --prefix="true" ""</arg>
</arguments>
<assign>
<var>${command}</var>
</assign>
<msg timestamp="20180516 15:18:49.926" level="INFO">${command} = sudo docker exec etcd etcdctl get --prefix="true" ""</msg>
<status status="PASS" endtime="20180516 15:18:49.926" starttime="20180516 15:18:49.925"></status>
</kw>
<kw name="Execute On Machine" library="ssh">
<doc>*Execute On Machine ${machine} sudo docker exec etcd etcdctl get --prefix="true" ""*</doc>
<arguments>
<arg>docker</arg>
<arg>${command}</arg>
<arg>log=false</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${log}</arg>
</arguments>
<msg timestamp="20180516 15:18:49.932" level="INFO">docker</msg>
<msg timestamp="20180516 15:18:49.932" level="INFO">sudo docker exec etcd etcdctl get --prefix="true" ""</msg>
<msg timestamp="20180516 15:18:49.933" level="INFO">false</msg>
<status status="PASS" endtime="20180516 15:18:49.933" starttime="20180516 15:18:49.932"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:49.933" starttime="20180516 15:18:49.933"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:18:49.934" level="INFO">${currdate} = 2018-05-16 15:18:49.933</msg>
<status status="PASS" endtime="20180516 15:18:49.934" starttime="20180516 15:18:49.933"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20180516 15:18:49.934" level="INFO">Executing command 'sudo docker exec etcd etcdctl get --prefix="true" ""'.</msg>
<msg timestamp="20180516 15:18:50.378" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:18:50.378" level="INFO">${out} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<msg timestamp="20180516 15:18:50.378" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20180516 15:18:50.378" starttime="20180516 15:18:49.934"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${out}</arg>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:18:50.379" level="INFO">/sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-containers","description":"Wire 2 VNF containers to the vpp switch","type":2,"elements":[{"container":"node_1","port_label":"node1_veth","etcd_vpp_switch_key":"agent_vpp_1","ipv4_addr":"10.0.0.10","type":3},{"container":"node_2","port_label":"node2_veth","etcd_vpp_switch_key":"agent_vpp_1","ipv4_addr":"10.0.0.11","type":3}]}
/sfc-controller/v1/SP
{"mtu":1500,"starting_vlan_id":5000,"default_static_route_weight":5,"dynamic_bridge_parms":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true},"static_bridge_parms":{"forward":true}}
/sfc-controller/v1/id/HE/agent_vpp_1
{"name":"agent_vpp_1"}
/sfc-controller/v1/id/SFC/two-sample-vnf-containers/node_1_node1_veth
{"sfc_name":"two-sample-vnf-containers","container":"node_1","port":"node1_veth","mac_addr_id":1,"veth_id":1}
/sfc-controller/v1/id/SFC/two-sample-vnf-containers/node_2_node2_veth
{"sfc_name":"two-sample-vnf-containers","container":"node_2","port":"node2_veth","mac_addr_id":2,"veth_id":2}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VNF_node_1_node1_veth
{"name":"IF_VETH_VNF_node_1_node1_veth","enabled":true,"phys_address":"02:00:00:00:00:01","mtu":1500,"host_if_name":"node1_veth","ip_addresses":["10.0.0.10/24"],"namespace":{"type":1,"microservice":"node_1"},"veth":{"peer_if_name":"IF_VETH_VSWITCH_node_1_node1_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VNF_node_2_node2_veth
{"name":"IF_VETH_VNF_node_2_node2_veth","enabled":true,"phys_address":"02:00:00:00:00:02","mtu":1500,"host_if_name":"node2_veth","ip_addresses":["10.0.0.11/24"],"namespace":{"type":1,"microservice":"node_2"},"veth":{"peer_if_name":"IF_VETH_VSWITCH_node_2_node2_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VSWITCH_node_1_node1_veth
{"name":"IF_VETH_VSWITCH_node_1_node1_veth","enabled":true,"mtu":1500,"host_if_name":"node_1_noeth_1","namespace":{"type":1,"microservice":"agent_vpp_1"},"veth":{"peer_if_name":"IF_VETH_VNF_node_1_node1_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VSWITCH_node_2_node2_veth
{"name":"IF_VETH_VSWITCH_node_2_node2_veth","enabled":true,"mtu":1500,"host_if_name":"node_2_noeth_2","namespace":{"type":1,"microservice":"agent_vpp_1"},"veth":{"peer_if_name":"IF_VETH_VNF_node_2_node2_veth"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/BD_INTERNAL_EW_L2FIB_agent_vpp_1
{"name":"BD_INTERNAL_EW_L2FIB_agent_vpp_1","forward":true}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/BD_INTERNAL_EW_agent_vpp_1
{"name":"BD_INTERNAL_EW_agent_vpp_1","flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true,"interfaces":[{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth"},{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth"}]}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth
{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","type":4,"enabled":true,"mtu":1500,"afpacket":{"host_if_name":"node_1_noeth_1"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth
{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","type":4,"enabled":true,"mtu":1500,"afpacket":{"host_if_name":"node_2_noeth_2"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_LOOPBACK_H_agent_vpp_1
{"name":"IF_LOOPBACK_H_agent_vpp_1","enabled":true,"phys_address":"02:00:00:AA:BB:00","mtu":1500,"ip_addresses":["6.0.0.100"]}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/loop0
{
  "name": "loop0",
  "type": 0,
  "enabled": true,
  "phys_address": "8a:f1:be:90:00:00",
  "mtu": 1500,
  "vrf": 0,
  "ip_addresses": [
    "20.1.1.1/24"
  ]
}


/vnf-agent/agent_vpp_1/vpp/config/v1/interface/loop1
{
  "name": "loop1",
  "type": 0,
  "enabled": true,
  "phys_address": "8a:f1:be:90:20:00",
  "mtu": 1500,
  "vrf": 0,
  "ip_addresses": [
    "30.1.1.1/24"
  ]
}


/vnf-agent/agent_vpp_1/vpp/status/v1/bd/BD_INTERNAL_EW_L2FIB_agent_vpp_1
{"index":2,"internal_name":"BD_INTERNAL_EW_L2FIB_agent_vpp_1","bvi_interface":"not_set","last_change":1526476631,"l2_params":{"forward":true}}
/vnf-agent/agent_vpp_1/vpp/status/v1/bd/BD_INTERNAL_EW_agent_vpp_1
{"index":1,"internal_name":"BD_INTERNAL_EW_agent_vpp_1","bvi_interface":"not_set","interface_count":2,"last_change":1526476631,"l2_params":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true},"interfaces":[{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","sw_if_index":2},{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","sw_if_index":3}]}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth
{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","internal_name":"host-node_1_noeth_1","if_index":2,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:3e:fd:61:28","mtu":1500,"statistics":{"in_packets":18,"in_bytes":1412}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth
{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","internal_name":"host-node_2_noeth_2","if_index":3,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:42:98:22:08","mtu":1500,"statistics":{"in_packets":20,"in_bytes":1592}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_LOOPBACK_H_agent_vpp_1
{"name":"IF_LOOPBACK_H_agent_vpp_1","internal_name":"loop0","if_index":1,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:00:00:aa:bb:00","mtu":1500,"statistics":{}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/local0
{"name":"local0","internal_name":"local0","admin_status":2,"oper_status":2,"statistics":{}}
/vnf-agent/node_1/check/status/v1/agent
{"build_version":"v1.1-5-g55e9977","build_date":"2018-03-06T11:05+00:00","state":1,"start_time":1526476614,"last_change":1526476619,"last_update":1526476725,"commit_hash":"55e99770087087fa8e41a980a8b6257c80c93f4c"}
/vnf-agent/node_1/check/status/v1/plugin/etcdv3
{"state":1,"last_change":1526476619,"last_update":1526476725}
/vnf-agent/node_1/check/status/v1/plugin/kafka
{"state":1,"last_change":1526476619,"last_update":1526476725}
/vnf-agent/node_2/check/status/v1/agent
{"build_version":"v1.1-5-g55e9977","build_date":"2018-03-06T11:05+00:00","state":1,"start_time":1526476623,"last_change":1526476628,"last_update":1526476723,"commit_hash":"55e99770087087fa8e41a980a8b6257c80c93f4c"}
/vnf-agent/node_2/check/status/v1/plugin/etcdv3
{"state":1,"last_change":1526476628,"last_update":1526476723}
/vnf-agent/node_2/check/status/v1/plugin/kafka
{"state":1,"last_change":1526476628,"last_update":1526476723}</msg>
<msg timestamp="20180516 15:18:50.379" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:18:50.379" starttime="20180516 15:18:50.379"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:18:50.380" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:18:50.380" starttime="20180516 15:18:50.380"></status>
</kw>
<msg timestamp="20180516 15:18:50.380" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:18:50.380" starttime="20180516 15:18:50.380"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} on ${machine}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:50.381" starttime="20180516 15:18:50.381"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${log}'=='true'</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:50.381" starttime="20180516 15:18:50.381"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:50.382" starttime="20180516 15:18:50.381"></status>
</kw>
<msg timestamp="20180516 15:18:50.382" level="INFO">${out} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<status status="PASS" endtime="20180516 15:18:50.382" starttime="20180516 15:18:49.931"></status>
</kw>
<msg timestamp="20180516 15:18:50.382" level="INFO">${dump} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<status status="PASS" endtime="20180516 15:18:50.382" starttime="20180516 15:18:49.925"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/etcd_dump-${tag}.txt</arg>
<arg>${dump}</arg>
</arguments>
<msg timestamp="20180516 15:18:50.383" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/etcd_dump-009_Check Veth Interface On Agent1_test_teardown.txt"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/etcd_dump-009_Check Veth Interface On Agent1_test_teardown.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:18:50.383" starttime="20180516 15:18:50.382"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${dump}</arg>
<arg>/error/</arg>
</arguments>
<assign>
<var>${errors}</var>
</assign>
<msg timestamp="20180516 15:18:50.383" level="INFO">0 out of 82 lines matched</msg>
<msg timestamp="20180516 15:18:50.384" level="INFO">${errors} = </msg>
<status status="PASS" endtime="20180516 15:18:50.384" starttime="20180516 15:18:50.383"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${errors}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${errors}</arg>
</arguments>
<msg timestamp="20180516 15:18:50.384" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:18:50.384" starttime="20180516 15:18:50.384"></status>
</kw>
<msg timestamp="20180516 15:18:50.384" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:18:50.384" starttime="20180516 15:18:50.384"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>Errors detected in keys: ${errors}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:50.385" starttime="20180516 15:18:50.385"></status>
</kw>
<status status="PASS" endtime="20180516 15:18:50.385" starttime="20180516 15:18:49.924"></status>
</kw>
<status status="PASS" endtime="20180516 15:18:50.385" starttime="20180516 15:18:49.920"></status>
</kw>
<status status="PASS" endtime="20180516 15:18:50.385" starttime="20180516 15:18:49.920"></status>
</kw>
<status status="PASS" endtime="20180516 15:18:50.385" critical="yes" starttime="20180516 15:18:49.181"></status>
</test>
<test id="s1-t5" name="Check Veth Interface On Agent2">
<kw type="setup" name="TestSetup">
<kw name="Make Datastore Snapshots" library="setup-teardown">
<arguments>
<arg>${TEST_NAME}_test_setup</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tag}</arg>
</arguments>
<msg timestamp="20180516 15:18:50.387" level="INFO">Check Veth Interface On Agent2_test_setup</msg>
<status status="PASS" endtime="20180516 15:18:50.387" starttime="20180516 15:18:50.387"></status>
</kw>
<kw name="Create Next Snapshot Prefix" library="setup-teardown">
<assign>
<var>${prefix}</var>
</assign>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>str(${snapshot_num}).zfill(3)</arg>
</arguments>
<assign>
<var>${prefix}</var>
</assign>
<msg timestamp="20180516 15:18:50.388" level="INFO">${prefix} = 010</msg>
<status status="PASS" endtime="20180516 15:18:50.388" starttime="20180516 15:18:50.388"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${snapshot_num}+1</arg>
</arguments>
<assign>
<var>${snapshot_num}</var>
</assign>
<msg timestamp="20180516 15:18:50.389" level="INFO">${snapshot_num} = 11</msg>
<status status="PASS" endtime="20180516 15:18:50.389" starttime="20180516 15:18:50.388"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${snapshot_num}</arg>
</arguments>
<msg timestamp="20180516 15:18:50.389" level="INFO">${snapshot_num} = 11</msg>
<status status="PASS" endtime="20180516 15:18:50.390" starttime="20180516 15:18:50.389"></status>
</kw>
<msg timestamp="20180516 15:18:50.390" level="INFO">${prefix} = 010</msg>
<status status="PASS" endtime="20180516 15:18:50.390" starttime="20180516 15:18:50.387"></status>
</kw>
<kw name="Take ETCD Snapshots" library="setup-teardown">
<arguments>
<arg>${prefix}_${tag}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tag}</arg>
</arguments>
<msg timestamp="20180516 15:18:50.391" level="INFO">010_Check Veth Interface On Agent2_test_setup</msg>
<status status="PASS" endtime="20180516 15:18:50.391" starttime="20180516 15:18:50.390"></status>
</kw>
<kw name="Get ETCD Dump" library="setup-teardown">
<assign>
<var>${dump}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DOCKER_COMMAND} exec etcd etcdctl get --prefix="true" ""</arg>
</arguments>
<assign>
<var>${command}</var>
</assign>
<msg timestamp="20180516 15:18:50.392" level="INFO">${command} = sudo docker exec etcd etcdctl get --prefix="true" ""</msg>
<status status="PASS" endtime="20180516 15:18:50.392" starttime="20180516 15:18:50.391"></status>
</kw>
<kw name="Execute On Machine" library="ssh">
<doc>*Execute On Machine ${machine} sudo docker exec etcd etcdctl get --prefix="true" ""*</doc>
<arguments>
<arg>docker</arg>
<arg>${command}</arg>
<arg>log=false</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${log}</arg>
</arguments>
<msg timestamp="20180516 15:18:50.398" level="INFO">docker</msg>
<msg timestamp="20180516 15:18:50.398" level="INFO">sudo docker exec etcd etcdctl get --prefix="true" ""</msg>
<msg timestamp="20180516 15:18:50.398" level="INFO">false</msg>
<status status="PASS" endtime="20180516 15:18:50.398" starttime="20180516 15:18:50.397"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:50.404" starttime="20180516 15:18:50.398"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:18:50.404" level="INFO">${currdate} = 2018-05-16 15:18:50.404</msg>
<status status="PASS" endtime="20180516 15:18:50.404" starttime="20180516 15:18:50.404"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20180516 15:18:50.405" level="INFO">Executing command 'sudo docker exec etcd etcdctl get --prefix="true" ""'.</msg>
<msg timestamp="20180516 15:18:50.694" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:18:50.695" level="INFO">${out} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<msg timestamp="20180516 15:18:50.695" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20180516 15:18:50.695" starttime="20180516 15:18:50.405"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${out}</arg>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:18:50.695" level="INFO">/sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-containers","description":"Wire 2 VNF containers to the vpp switch","type":2,"elements":[{"container":"node_1","port_label":"node1_veth","etcd_vpp_switch_key":"agent_vpp_1","ipv4_addr":"10.0.0.10","type":3},{"container":"node_2","port_label":"node2_veth","etcd_vpp_switch_key":"agent_vpp_1","ipv4_addr":"10.0.0.11","type":3}]}
/sfc-controller/v1/SP
{"mtu":1500,"starting_vlan_id":5000,"default_static_route_weight":5,"dynamic_bridge_parms":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true},"static_bridge_parms":{"forward":true}}
/sfc-controller/v1/id/HE/agent_vpp_1
{"name":"agent_vpp_1"}
/sfc-controller/v1/id/SFC/two-sample-vnf-containers/node_1_node1_veth
{"sfc_name":"two-sample-vnf-containers","container":"node_1","port":"node1_veth","mac_addr_id":1,"veth_id":1}
/sfc-controller/v1/id/SFC/two-sample-vnf-containers/node_2_node2_veth
{"sfc_name":"two-sample-vnf-containers","container":"node_2","port":"node2_veth","mac_addr_id":2,"veth_id":2}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VNF_node_1_node1_veth
{"name":"IF_VETH_VNF_node_1_node1_veth","enabled":true,"phys_address":"02:00:00:00:00:01","mtu":1500,"host_if_name":"node1_veth","ip_addresses":["10.0.0.10/24"],"namespace":{"type":1,"microservice":"node_1"},"veth":{"peer_if_name":"IF_VETH_VSWITCH_node_1_node1_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VNF_node_2_node2_veth
{"name":"IF_VETH_VNF_node_2_node2_veth","enabled":true,"phys_address":"02:00:00:00:00:02","mtu":1500,"host_if_name":"node2_veth","ip_addresses":["10.0.0.11/24"],"namespace":{"type":1,"microservice":"node_2"},"veth":{"peer_if_name":"IF_VETH_VSWITCH_node_2_node2_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VSWITCH_node_1_node1_veth
{"name":"IF_VETH_VSWITCH_node_1_node1_veth","enabled":true,"mtu":1500,"host_if_name":"node_1_noeth_1","namespace":{"type":1,"microservice":"agent_vpp_1"},"veth":{"peer_if_name":"IF_VETH_VNF_node_1_node1_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VSWITCH_node_2_node2_veth
{"name":"IF_VETH_VSWITCH_node_2_node2_veth","enabled":true,"mtu":1500,"host_if_name":"node_2_noeth_2","namespace":{"type":1,"microservice":"agent_vpp_1"},"veth":{"peer_if_name":"IF_VETH_VNF_node_2_node2_veth"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/BD_INTERNAL_EW_L2FIB_agent_vpp_1
{"name":"BD_INTERNAL_EW_L2FIB_agent_vpp_1","forward":true}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/BD_INTERNAL_EW_agent_vpp_1
{"name":"BD_INTERNAL_EW_agent_vpp_1","flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true,"interfaces":[{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth"},{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth"}]}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth
{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","type":4,"enabled":true,"mtu":1500,"afpacket":{"host_if_name":"node_1_noeth_1"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth
{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","type":4,"enabled":true,"mtu":1500,"afpacket":{"host_if_name":"node_2_noeth_2"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_LOOPBACK_H_agent_vpp_1
{"name":"IF_LOOPBACK_H_agent_vpp_1","enabled":true,"phys_address":"02:00:00:AA:BB:00","mtu":1500,"ip_addresses":["6.0.0.100"]}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/loop0
{
  "name": "loop0",
  "type": 0,
  "enabled": true,
  "phys_address": "8a:f1:be:90:00:00",
  "mtu": 1500,
  "vrf": 0,
  "ip_addresses": [
    "20.1.1.1/24"
  ]
}


/vnf-agent/agent_vpp_1/vpp/config/v1/interface/loop1
{
  "name": "loop1",
  "type": 0,
  "enabled": true,
  "phys_address": "8a:f1:be:90:20:00",
  "mtu": 1500,
  "vrf": 0,
  "ip_addresses": [
    "30.1.1.1/24"
  ]
}


/vnf-agent/agent_vpp_1/vpp/status/v1/bd/BD_INTERNAL_EW_L2FIB_agent_vpp_1
{"index":2,"internal_name":"BD_INTERNAL_EW_L2FIB_agent_vpp_1","bvi_interface":"not_set","last_change":1526476631,"l2_params":{"forward":true}}
/vnf-agent/agent_vpp_1/vpp/status/v1/bd/BD_INTERNAL_EW_agent_vpp_1
{"index":1,"internal_name":"BD_INTERNAL_EW_agent_vpp_1","bvi_interface":"not_set","interface_count":2,"last_change":1526476631,"l2_params":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true},"interfaces":[{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","sw_if_index":2},{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","sw_if_index":3}]}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth
{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","internal_name":"host-node_1_noeth_1","if_index":2,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:3e:fd:61:28","mtu":1500,"statistics":{"in_packets":18,"in_bytes":1412}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth
{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","internal_name":"host-node_2_noeth_2","if_index":3,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:42:98:22:08","mtu":1500,"statistics":{"in_packets":20,"in_bytes":1592}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_LOOPBACK_H_agent_vpp_1
{"name":"IF_LOOPBACK_H_agent_vpp_1","internal_name":"loop0","if_index":1,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:00:00:aa:bb:00","mtu":1500,"statistics":{}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/local0
{"name":"local0","internal_name":"local0","admin_status":2,"oper_status":2,"statistics":{}}
/vnf-agent/node_1/check/status/v1/agent
{"build_version":"v1.1-5-g55e9977","build_date":"2018-03-06T11:05+00:00","state":1,"start_time":1526476614,"last_change":1526476619,"last_update":1526476725,"commit_hash":"55e99770087087fa8e41a980a8b6257c80c93f4c"}
/vnf-agent/node_1/check/status/v1/plugin/etcdv3
{"state":1,"last_change":1526476619,"last_update":1526476725}
/vnf-agent/node_1/check/status/v1/plugin/kafka
{"state":1,"last_change":1526476619,"last_update":1526476725}
/vnf-agent/node_2/check/status/v1/agent
{"build_version":"v1.1-5-g55e9977","build_date":"2018-03-06T11:05+00:00","state":1,"start_time":1526476623,"last_change":1526476628,"last_update":1526476723,"commit_hash":"55e99770087087fa8e41a980a8b6257c80c93f4c"}
/vnf-agent/node_2/check/status/v1/plugin/etcdv3
{"state":1,"last_change":1526476628,"last_update":1526476723}
/vnf-agent/node_2/check/status/v1/plugin/kafka
{"state":1,"last_change":1526476628,"last_update":1526476723}</msg>
<msg timestamp="20180516 15:18:50.695" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:18:50.696" starttime="20180516 15:18:50.695"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:18:50.696" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:18:50.696" starttime="20180516 15:18:50.696"></status>
</kw>
<msg timestamp="20180516 15:18:50.696" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:18:50.696" starttime="20180516 15:18:50.696"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} on ${machine}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:50.697" starttime="20180516 15:18:50.697"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${log}'=='true'</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:50.697" starttime="20180516 15:18:50.697"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:50.698" starttime="20180516 15:18:50.698"></status>
</kw>
<msg timestamp="20180516 15:18:50.698" level="INFO">${out} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<status status="PASS" endtime="20180516 15:18:50.698" starttime="20180516 15:18:50.396"></status>
</kw>
<msg timestamp="20180516 15:18:50.698" level="INFO">${dump} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<status status="PASS" endtime="20180516 15:18:50.698" starttime="20180516 15:18:50.391"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/etcd_dump-${tag}.txt</arg>
<arg>${dump}</arg>
</arguments>
<msg timestamp="20180516 15:18:50.699" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/etcd_dump-010_Check Veth Interface On Agent2_test_setup.txt"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/etcd_dump-010_Check Veth Interface On Agent2_test_setup.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:18:50.699" starttime="20180516 15:18:50.698"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${dump}</arg>
<arg>/error/</arg>
</arguments>
<assign>
<var>${errors}</var>
</assign>
<msg timestamp="20180516 15:18:50.699" level="INFO">0 out of 82 lines matched</msg>
<msg timestamp="20180516 15:18:50.700" level="INFO">${errors} = </msg>
<status status="PASS" endtime="20180516 15:18:50.700" starttime="20180516 15:18:50.699"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${errors}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${errors}</arg>
</arguments>
<msg timestamp="20180516 15:18:50.701" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:18:50.701" starttime="20180516 15:18:50.700"></status>
</kw>
<msg timestamp="20180516 15:18:50.701" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:18:50.701" starttime="20180516 15:18:50.700"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>Errors detected in keys: ${errors}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:50.701" starttime="20180516 15:18:50.701"></status>
</kw>
<status status="PASS" endtime="20180516 15:18:50.701" starttime="20180516 15:18:50.390"></status>
</kw>
<status status="PASS" endtime="20180516 15:18:50.702" starttime="20180516 15:18:50.386"></status>
</kw>
<status status="PASS" endtime="20180516 15:18:50.702" starttime="20180516 15:18:50.386"></status>
</kw>
<kw name="linux: Interface With IP Is Created" library="linux">
<arguments>
<arg>node_2</arg>
<arg>mac=${AGENT2_VETH_MAC}</arg>
<arg>ipv4=10.0.0.11/24</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${mac}</arg>
<arg>${ipv4}</arg>
</arguments>
<msg timestamp="20180516 15:18:50.703" level="INFO">node_2</msg>
<msg timestamp="20180516 15:18:50.703" level="INFO">02:00:00:00:00:02</msg>
<msg timestamp="20180516 15:18:50.703" level="INFO">10.0.0.11/24</msg>
<status status="PASS" endtime="20180516 15:18:50.703" starttime="20180516 15:18:50.702"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${interface_timeout}</arg>
<arg>3s</arg>
<arg>linux: Check Interface With IP Presence</arg>
<arg>${node}</arg>
<arg>${mac}</arg>
<arg>${ipv4}</arg>
</arguments>
<kw name="linux: Check Interface With IP Presence" library="linux">
<doc>Checking if specified interface with mac and ip exists in linux</doc>
<arguments>
<arg>${node}</arg>
<arg>${mac}</arg>
<arg>${ipv4}</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${mac}</arg>
<arg>${ip}</arg>
<arg>${status}</arg>
</arguments>
<msg timestamp="20180516 15:18:50.704" level="INFO">node_2</msg>
<msg timestamp="20180516 15:18:50.704" level="INFO">02:00:00:00:00:02</msg>
<msg timestamp="20180516 15:18:50.704" level="INFO">10.0.0.11/24</msg>
<msg timestamp="20180516 15:18:50.704" level="INFO">True</msg>
<status status="PASS" endtime="20180516 15:18:50.704" starttime="20180516 15:18:50.704"></status>
</kw>
<kw name="linux: Get Linux Interfaces" library="linux">
<arguments>
<arg>${node}</arg>
</arguments>
<assign>
<var>${ints}</var>
</assign>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${node}</arg>
</arguments>
<msg timestamp="20180516 15:18:50.705" level="INFO">node_2</msg>
<status status="PASS" endtime="20180516 15:18:50.705" starttime="20180516 15:18:50.705"></status>
</kw>
<kw name="Execute In Container" library="docker">
<arguments>
<arg>${node}</arg>
<arg>ip a</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${container}</arg>
<arg>${command}</arg>
</arguments>
<msg timestamp="20180516 15:18:50.706" level="INFO">node_2</msg>
<msg timestamp="20180516 15:18:50.706" level="INFO">ip a</msg>
<status status="PASS" endtime="20180516 15:18:50.706" starttime="20180516 15:18:50.706"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>docker</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:50.707" starttime="20180516 15:18:50.707"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:18:50.707" level="INFO">${currdate} = 2018-05-16 15:18:50.707</msg>
<status status="PASS" endtime="20180516 15:18:50.707" starttime="20180516 15:18:50.707"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DOCKER_COMMAND} exec ${container} ${command}</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20180516 15:18:50.708" level="INFO">Executing command 'sudo docker exec node_2 ip a'.</msg>
<msg timestamp="20180516 15:18:51.067" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:18:51.067" level="INFO">${out} = 1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lf...</msg>
<msg timestamp="20180516 15:18:51.067" level="INFO">${stderr} = </msg>
<msg timestamp="20180516 15:18:51.067" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20180516 15:18:51.067" starttime="20180516 15:18:50.708"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:18:51.068" level="INFO">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host 
       valid_lft forever preferred_lft forever
4: node2_veth@if5: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default 
    link/ether 02:00:00:00:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 1
    inet 10.0.0.11/24 brd 10.0.0.255 scope global node2_veth
       valid_lft forever preferred_lft forever
    inet6 fe80::b47c:7ff:fe9a:c1b2/64 scope link 
       valid_lft forever preferred_lft forever
293: eth0@if294: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default 
    link/ether 02:42:ac:11:00:07 brd ff:ff:ff:ff:ff:ff link-netnsid 0
    inet 172.17.0.7/16 brd 172.17.255.255 scope global eth0
       valid_lft forever preferred_lft forever
    inet6 fe80::42:acff:fe11:7/64 scope link 
       valid_lft forever preferred_lft forever</msg>
<status status="PASS" endtime="20180516 15:18:51.068" starttime="20180516 15:18:51.068"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:18:51.068" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:18:51.068" starttime="20180516 15:18:51.068"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${rc}</arg>
</arguments>
<msg timestamp="20180516 15:18:51.069" level="INFO">0</msg>
<status status="PASS" endtime="20180516 15:18:51.069" starttime="20180516 15:18:51.069"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:18:51.070" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:18:51.070" starttime="20180516 15:18:51.069"></status>
</kw>
<msg timestamp="20180516 15:18:51.070" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:18:51.070" starttime="20180516 15:18:51.069"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} in container ${container}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:51.070" starttime="20180516 15:18:51.070"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${container}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}***</arg>
</arguments>
<msg timestamp="20180516 15:18:51.071" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_node_2.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_node_2.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:18:51.071" starttime="20180516 15:18:51.071"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${container}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:51.072" starttime="20180516 15:18:51.071"></status>
</kw>
<msg timestamp="20180516 15:18:51.072" level="INFO">${out} = 1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lf...</msg>
<status status="PASS" endtime="20180516 15:18:51.072" starttime="20180516 15:18:50.705"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:18:51.072" level="INFO">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host 
       valid_lft forever preferred_lft forever
4: node2_veth@if5: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default 
    link/ether 02:00:00:00:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 1
    inet 10.0.0.11/24 brd 10.0.0.255 scope global node2_veth
       valid_lft forever preferred_lft forever
    inet6 fe80::b47c:7ff:fe9a:c1b2/64 scope link 
       valid_lft forever preferred_lft forever
293: eth0@if294: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default 
    link/ether 02:42:ac:11:00:07 brd ff:ff:ff:ff:ff:ff link-netnsid 0
    inet 172.17.0.7/16 brd 172.17.255.255 scope global eth0
       valid_lft forever preferred_lft forever
    inet6 fe80::42:acff:fe11:7/64 scope link 
       valid_lft forever preferred_lft forever</msg>
<status status="PASS" endtime="20180516 15:18:51.072" starttime="20180516 15:18:51.072"></status>
</kw>
<kw name="Parse Linux Interfaces" library="linux">
<arguments>
<arg>${out}</arg>
</arguments>
<assign>
<var>${ints}</var>
</assign>
<msg timestamp="20180516 15:18:51.073" level="INFO">${ints} = {u'lo': {'ipv6': u'::1/128', 'state': u'unknown', 'ipv4': u'127.0.0.1/8', 'mac': u'00:00:00:00:00:00', 'mtu': u'65536'}, u'eth0@if294': {'state': u'up', 'ipv4': u'172.17.0.7/16', 'mac': u'02:42:ac:11:...</msg>
<status status="PASS" endtime="20180516 15:18:51.073" starttime="20180516 15:18:51.072"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${ints}</arg>
</arguments>
<msg timestamp="20180516 15:18:51.073" level="INFO">{u'lo': {'ipv6': u'::1/128', 'state': u'unknown', 'ipv4': u'127.0.0.1/8', 'mac': u'00:00:00:00:00:00', 'mtu': u'65536'}, u'eth0@if294': {'state': u'up', 'ipv4': u'172.17.0.7/16', 'mac': u'02:42:ac:11:00:07', 'mtu': u'1500'}, u'node2_veth@if5': {'state': u'up', 'ipv4': u'10.0.0.11/24', 'mac': u'02:00:00:00:00:02', 'mtu': u'1500'}}</msg>
<status status="PASS" endtime="20180516 15:18:51.073" starttime="20180516 15:18:51.073"></status>
</kw>
<msg timestamp="20180516 15:18:51.073" level="INFO">${ints} = {u'lo': {'ipv6': u'::1/128', 'state': u'unknown', 'ipv4': u'127.0.0.1/8', 'mac': u'00:00:00:00:00:00', 'mtu': u'65536'}, u'eth0@if294': {'state': u'up', 'ipv4': u'172.17.0.7/16', 'mac': u'02:42:ac:11:...</msg>
<status status="PASS" endtime="20180516 15:18:51.073" starttime="20180516 15:18:50.705"></status>
</kw>
<kw name="Check Linux Interface IP Presence" library="linux">
<arguments>
<arg>${ints}</arg>
<arg>${mac}</arg>
<arg>${ip}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20180516 15:18:51.074" level="INFO">${result} = True</msg>
<status status="PASS" endtime="20180516 15:18:51.074" starttime="20180516 15:18:51.074"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${result}</arg>
<arg>${status}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:51.075" starttime="20180516 15:18:51.074"></status>
</kw>
<status status="PASS" endtime="20180516 15:18:51.075" starttime="20180516 15:18:50.703"></status>
</kw>
<status status="PASS" endtime="20180516 15:18:51.075" starttime="20180516 15:18:50.703"></status>
</kw>
<status status="PASS" endtime="20180516 15:18:51.075" starttime="20180516 15:18:50.702"></status>
</kw>
<kw type="teardown" name="TestTeardown">
<kw name="Make Datastore Snapshots" library="setup-teardown">
<arguments>
<arg>${TEST_NAME}_test_teardown</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tag}</arg>
</arguments>
<msg timestamp="20180516 15:18:51.076" level="INFO">Check Veth Interface On Agent2_test_teardown</msg>
<status status="PASS" endtime="20180516 15:18:51.076" starttime="20180516 15:18:51.076"></status>
</kw>
<kw name="Create Next Snapshot Prefix" library="setup-teardown">
<assign>
<var>${prefix}</var>
</assign>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>str(${snapshot_num}).zfill(3)</arg>
</arguments>
<assign>
<var>${prefix}</var>
</assign>
<msg timestamp="20180516 15:18:51.077" level="INFO">${prefix} = 011</msg>
<status status="PASS" endtime="20180516 15:18:51.077" starttime="20180516 15:18:51.077"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${snapshot_num}+1</arg>
</arguments>
<assign>
<var>${snapshot_num}</var>
</assign>
<msg timestamp="20180516 15:18:51.078" level="INFO">${snapshot_num} = 12</msg>
<status status="PASS" endtime="20180516 15:18:51.078" starttime="20180516 15:18:51.077"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${snapshot_num}</arg>
</arguments>
<msg timestamp="20180516 15:18:51.078" level="INFO">${snapshot_num} = 12</msg>
<status status="PASS" endtime="20180516 15:18:51.078" starttime="20180516 15:18:51.078"></status>
</kw>
<msg timestamp="20180516 15:18:51.078" level="INFO">${prefix} = 011</msg>
<status status="PASS" endtime="20180516 15:18:51.078" starttime="20180516 15:18:51.076"></status>
</kw>
<kw name="Take ETCD Snapshots" library="setup-teardown">
<arguments>
<arg>${prefix}_${tag}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tag}</arg>
</arguments>
<msg timestamp="20180516 15:18:51.079" level="INFO">011_Check Veth Interface On Agent2_test_teardown</msg>
<status status="PASS" endtime="20180516 15:18:51.079" starttime="20180516 15:18:51.079"></status>
</kw>
<kw name="Get ETCD Dump" library="setup-teardown">
<assign>
<var>${dump}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DOCKER_COMMAND} exec etcd etcdctl get --prefix="true" ""</arg>
</arguments>
<assign>
<var>${command}</var>
</assign>
<msg timestamp="20180516 15:18:51.080" level="INFO">${command} = sudo docker exec etcd etcdctl get --prefix="true" ""</msg>
<status status="PASS" endtime="20180516 15:18:51.080" starttime="20180516 15:18:51.080"></status>
</kw>
<kw name="Execute On Machine" library="ssh">
<doc>*Execute On Machine ${machine} sudo docker exec etcd etcdctl get --prefix="true" ""*</doc>
<arguments>
<arg>docker</arg>
<arg>${command}</arg>
<arg>log=false</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${log}</arg>
</arguments>
<msg timestamp="20180516 15:18:51.087" level="INFO">docker</msg>
<msg timestamp="20180516 15:18:51.087" level="INFO">sudo docker exec etcd etcdctl get --prefix="true" ""</msg>
<msg timestamp="20180516 15:18:51.087" level="INFO">false</msg>
<status status="PASS" endtime="20180516 15:18:51.087" starttime="20180516 15:18:51.086"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:51.087" starttime="20180516 15:18:51.087"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:18:51.088" level="INFO">${currdate} = 2018-05-16 15:18:51.088</msg>
<status status="PASS" endtime="20180516 15:18:51.088" starttime="20180516 15:18:51.087"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20180516 15:18:51.088" level="INFO">Executing command 'sudo docker exec etcd etcdctl get --prefix="true" ""'.</msg>
<msg timestamp="20180516 15:18:51.483" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:18:51.483" level="INFO">${out} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<msg timestamp="20180516 15:18:51.483" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20180516 15:18:51.483" starttime="20180516 15:18:51.088"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${out}</arg>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:18:51.484" level="INFO">/sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-containers","description":"Wire 2 VNF containers to the vpp switch","type":2,"elements":[{"container":"node_1","port_label":"node1_veth","etcd_vpp_switch_key":"agent_vpp_1","ipv4_addr":"10.0.0.10","type":3},{"container":"node_2","port_label":"node2_veth","etcd_vpp_switch_key":"agent_vpp_1","ipv4_addr":"10.0.0.11","type":3}]}
/sfc-controller/v1/SP
{"mtu":1500,"starting_vlan_id":5000,"default_static_route_weight":5,"dynamic_bridge_parms":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true},"static_bridge_parms":{"forward":true}}
/sfc-controller/v1/id/HE/agent_vpp_1
{"name":"agent_vpp_1"}
/sfc-controller/v1/id/SFC/two-sample-vnf-containers/node_1_node1_veth
{"sfc_name":"two-sample-vnf-containers","container":"node_1","port":"node1_veth","mac_addr_id":1,"veth_id":1}
/sfc-controller/v1/id/SFC/two-sample-vnf-containers/node_2_node2_veth
{"sfc_name":"two-sample-vnf-containers","container":"node_2","port":"node2_veth","mac_addr_id":2,"veth_id":2}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VNF_node_1_node1_veth
{"name":"IF_VETH_VNF_node_1_node1_veth","enabled":true,"phys_address":"02:00:00:00:00:01","mtu":1500,"host_if_name":"node1_veth","ip_addresses":["10.0.0.10/24"],"namespace":{"type":1,"microservice":"node_1"},"veth":{"peer_if_name":"IF_VETH_VSWITCH_node_1_node1_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VNF_node_2_node2_veth
{"name":"IF_VETH_VNF_node_2_node2_veth","enabled":true,"phys_address":"02:00:00:00:00:02","mtu":1500,"host_if_name":"node2_veth","ip_addresses":["10.0.0.11/24"],"namespace":{"type":1,"microservice":"node_2"},"veth":{"peer_if_name":"IF_VETH_VSWITCH_node_2_node2_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VSWITCH_node_1_node1_veth
{"name":"IF_VETH_VSWITCH_node_1_node1_veth","enabled":true,"mtu":1500,"host_if_name":"node_1_noeth_1","namespace":{"type":1,"microservice":"agent_vpp_1"},"veth":{"peer_if_name":"IF_VETH_VNF_node_1_node1_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VSWITCH_node_2_node2_veth
{"name":"IF_VETH_VSWITCH_node_2_node2_veth","enabled":true,"mtu":1500,"host_if_name":"node_2_noeth_2","namespace":{"type":1,"microservice":"agent_vpp_1"},"veth":{"peer_if_name":"IF_VETH_VNF_node_2_node2_veth"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/BD_INTERNAL_EW_L2FIB_agent_vpp_1
{"name":"BD_INTERNAL_EW_L2FIB_agent_vpp_1","forward":true}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/BD_INTERNAL_EW_agent_vpp_1
{"name":"BD_INTERNAL_EW_agent_vpp_1","flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true,"interfaces":[{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth"},{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth"}]}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth
{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","type":4,"enabled":true,"mtu":1500,"afpacket":{"host_if_name":"node_1_noeth_1"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth
{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","type":4,"enabled":true,"mtu":1500,"afpacket":{"host_if_name":"node_2_noeth_2"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_LOOPBACK_H_agent_vpp_1
{"name":"IF_LOOPBACK_H_agent_vpp_1","enabled":true,"phys_address":"02:00:00:AA:BB:00","mtu":1500,"ip_addresses":["6.0.0.100"]}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/loop0
{
  "name": "loop0",
  "type": 0,
  "enabled": true,
  "phys_address": "8a:f1:be:90:00:00",
  "mtu": 1500,
  "vrf": 0,
  "ip_addresses": [
    "20.1.1.1/24"
  ]
}


/vnf-agent/agent_vpp_1/vpp/config/v1/interface/loop1
{
  "name": "loop1",
  "type": 0,
  "enabled": true,
  "phys_address": "8a:f1:be:90:20:00",
  "mtu": 1500,
  "vrf": 0,
  "ip_addresses": [
    "30.1.1.1/24"
  ]
}


/vnf-agent/agent_vpp_1/vpp/status/v1/bd/BD_INTERNAL_EW_L2FIB_agent_vpp_1
{"index":2,"internal_name":"BD_INTERNAL_EW_L2FIB_agent_vpp_1","bvi_interface":"not_set","last_change":1526476631,"l2_params":{"forward":true}}
/vnf-agent/agent_vpp_1/vpp/status/v1/bd/BD_INTERNAL_EW_agent_vpp_1
{"index":1,"internal_name":"BD_INTERNAL_EW_agent_vpp_1","bvi_interface":"not_set","interface_count":2,"last_change":1526476631,"l2_params":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true},"interfaces":[{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","sw_if_index":2},{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","sw_if_index":3}]}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth
{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","internal_name":"host-node_1_noeth_1","if_index":2,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:3e:fd:61:28","mtu":1500,"statistics":{"in_packets":18,"in_bytes":1412}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth
{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","internal_name":"host-node_2_noeth_2","if_index":3,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:42:98:22:08","mtu":1500,"statistics":{"in_packets":20,"in_bytes":1592}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_LOOPBACK_H_agent_vpp_1
{"name":"IF_LOOPBACK_H_agent_vpp_1","internal_name":"loop0","if_index":1,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:00:00:aa:bb:00","mtu":1500,"statistics":{}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/local0
{"name":"local0","internal_name":"local0","admin_status":2,"oper_status":2,"statistics":{}}
/vnf-agent/node_1/check/status/v1/agent
{"build_version":"v1.1-5-g55e9977","build_date":"2018-03-06T11:05+00:00","state":1,"start_time":1526476614,"last_change":1526476619,"last_update":1526476725,"commit_hash":"55e99770087087fa8e41a980a8b6257c80c93f4c"}
/vnf-agent/node_1/check/status/v1/plugin/etcdv3
{"state":1,"last_change":1526476619,"last_update":1526476725}
/vnf-agent/node_1/check/status/v1/plugin/kafka
{"state":1,"last_change":1526476619,"last_update":1526476725}
/vnf-agent/node_2/check/status/v1/agent
{"build_version":"v1.1-5-g55e9977","build_date":"2018-03-06T11:05+00:00","state":1,"start_time":1526476623,"last_change":1526476628,"last_update":1526476723,"commit_hash":"55e99770087087fa8e41a980a8b6257c80c93f4c"}
/vnf-agent/node_2/check/status/v1/plugin/etcdv3
{"state":1,"last_change":1526476628,"last_update":1526476723}
/vnf-agent/node_2/check/status/v1/plugin/kafka
{"state":1,"last_change":1526476628,"last_update":1526476723}</msg>
<msg timestamp="20180516 15:18:51.484" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:18:51.484" starttime="20180516 15:18:51.484"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:18:51.485" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:18:51.485" starttime="20180516 15:18:51.485"></status>
</kw>
<msg timestamp="20180516 15:18:51.485" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:18:51.485" starttime="20180516 15:18:51.485"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} on ${machine}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:51.486" starttime="20180516 15:18:51.486"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${log}'=='true'</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:51.486" starttime="20180516 15:18:51.486"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:51.487" starttime="20180516 15:18:51.486"></status>
</kw>
<msg timestamp="20180516 15:18:51.487" level="INFO">${out} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<status status="PASS" endtime="20180516 15:18:51.487" starttime="20180516 15:18:51.086"></status>
</kw>
<msg timestamp="20180516 15:18:51.487" level="INFO">${dump} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<status status="PASS" endtime="20180516 15:18:51.487" starttime="20180516 15:18:51.080"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/etcd_dump-${tag}.txt</arg>
<arg>${dump}</arg>
</arguments>
<msg timestamp="20180516 15:18:51.488" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/etcd_dump-011_Check Veth Interface On Agent2_test_teardown.txt"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/etcd_dump-011_Check Veth Interface On Agent2_test_teardown.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:18:51.488" starttime="20180516 15:18:51.487"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${dump}</arg>
<arg>/error/</arg>
</arguments>
<assign>
<var>${errors}</var>
</assign>
<msg timestamp="20180516 15:18:51.489" level="INFO">0 out of 82 lines matched</msg>
<msg timestamp="20180516 15:18:51.489" level="INFO">${errors} = </msg>
<status status="PASS" endtime="20180516 15:18:51.489" starttime="20180516 15:18:51.488"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${errors}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${errors}</arg>
</arguments>
<msg timestamp="20180516 15:18:51.490" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:18:51.490" starttime="20180516 15:18:51.490"></status>
</kw>
<msg timestamp="20180516 15:18:51.490" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:18:51.490" starttime="20180516 15:18:51.490"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>Errors detected in keys: ${errors}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:51.491" starttime="20180516 15:18:51.490"></status>
</kw>
<status status="PASS" endtime="20180516 15:18:51.491" starttime="20180516 15:18:51.079"></status>
</kw>
<status status="PASS" endtime="20180516 15:18:51.491" starttime="20180516 15:18:51.076"></status>
</kw>
<status status="PASS" endtime="20180516 15:18:51.491" starttime="20180516 15:18:51.075"></status>
</kw>
<status status="PASS" endtime="20180516 15:18:51.491" critical="yes" starttime="20180516 15:18:50.386"></status>
</test>
<test id="s1-t6" name="Check Bridge Domain Is Created">
<kw type="setup" name="TestSetup">
<kw name="Make Datastore Snapshots" library="setup-teardown">
<arguments>
<arg>${TEST_NAME}_test_setup</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tag}</arg>
</arguments>
<msg timestamp="20180516 15:18:51.493" level="INFO">Check Bridge Domain Is Created_test_setup</msg>
<status status="PASS" endtime="20180516 15:18:51.493" starttime="20180516 15:18:51.493"></status>
</kw>
<kw name="Create Next Snapshot Prefix" library="setup-teardown">
<assign>
<var>${prefix}</var>
</assign>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>str(${snapshot_num}).zfill(3)</arg>
</arguments>
<assign>
<var>${prefix}</var>
</assign>
<msg timestamp="20180516 15:18:51.494" level="INFO">${prefix} = 012</msg>
<status status="PASS" endtime="20180516 15:18:51.494" starttime="20180516 15:18:51.494"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${snapshot_num}+1</arg>
</arguments>
<assign>
<var>${snapshot_num}</var>
</assign>
<msg timestamp="20180516 15:18:51.495" level="INFO">${snapshot_num} = 13</msg>
<status status="PASS" endtime="20180516 15:18:51.495" starttime="20180516 15:18:51.494"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${snapshot_num}</arg>
</arguments>
<msg timestamp="20180516 15:18:51.495" level="INFO">${snapshot_num} = 13</msg>
<status status="PASS" endtime="20180516 15:18:51.495" starttime="20180516 15:18:51.495"></status>
</kw>
<msg timestamp="20180516 15:18:51.495" level="INFO">${prefix} = 012</msg>
<status status="PASS" endtime="20180516 15:18:51.495" starttime="20180516 15:18:51.494"></status>
</kw>
<kw name="Take ETCD Snapshots" library="setup-teardown">
<arguments>
<arg>${prefix}_${tag}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tag}</arg>
</arguments>
<msg timestamp="20180516 15:18:51.496" level="INFO">012_Check Bridge Domain Is Created_test_setup</msg>
<status status="PASS" endtime="20180516 15:18:51.496" starttime="20180516 15:18:51.496"></status>
</kw>
<kw name="Get ETCD Dump" library="setup-teardown">
<assign>
<var>${dump}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DOCKER_COMMAND} exec etcd etcdctl get --prefix="true" ""</arg>
</arguments>
<assign>
<var>${command}</var>
</assign>
<msg timestamp="20180516 15:18:51.497" level="INFO">${command} = sudo docker exec etcd etcdctl get --prefix="true" ""</msg>
<status status="PASS" endtime="20180516 15:18:51.497" starttime="20180516 15:18:51.497"></status>
</kw>
<kw name="Execute On Machine" library="ssh">
<doc>*Execute On Machine ${machine} sudo docker exec etcd etcdctl get --prefix="true" ""*</doc>
<arguments>
<arg>docker</arg>
<arg>${command}</arg>
<arg>log=false</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${log}</arg>
</arguments>
<msg timestamp="20180516 15:18:51.510" level="INFO">docker</msg>
<msg timestamp="20180516 15:18:51.510" level="INFO">sudo docker exec etcd etcdctl get --prefix="true" ""</msg>
<msg timestamp="20180516 15:18:51.511" level="INFO">false</msg>
<status status="PASS" endtime="20180516 15:18:51.511" starttime="20180516 15:18:51.510"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:51.511" starttime="20180516 15:18:51.511"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:18:51.511" level="INFO">${currdate} = 2018-05-16 15:18:51.511</msg>
<status status="PASS" endtime="20180516 15:18:51.512" starttime="20180516 15:18:51.511"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20180516 15:18:51.512" level="INFO">Executing command 'sudo docker exec etcd etcdctl get --prefix="true" ""'.</msg>
<msg timestamp="20180516 15:18:51.827" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:18:51.827" level="INFO">${out} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<msg timestamp="20180516 15:18:51.827" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20180516 15:18:51.827" starttime="20180516 15:18:51.512"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${out}</arg>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:18:51.827" level="INFO">/sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-containers","description":"Wire 2 VNF containers to the vpp switch","type":2,"elements":[{"container":"node_1","port_label":"node1_veth","etcd_vpp_switch_key":"agent_vpp_1","ipv4_addr":"10.0.0.10","type":3},{"container":"node_2","port_label":"node2_veth","etcd_vpp_switch_key":"agent_vpp_1","ipv4_addr":"10.0.0.11","type":3}]}
/sfc-controller/v1/SP
{"mtu":1500,"starting_vlan_id":5000,"default_static_route_weight":5,"dynamic_bridge_parms":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true},"static_bridge_parms":{"forward":true}}
/sfc-controller/v1/id/HE/agent_vpp_1
{"name":"agent_vpp_1"}
/sfc-controller/v1/id/SFC/two-sample-vnf-containers/node_1_node1_veth
{"sfc_name":"two-sample-vnf-containers","container":"node_1","port":"node1_veth","mac_addr_id":1,"veth_id":1}
/sfc-controller/v1/id/SFC/two-sample-vnf-containers/node_2_node2_veth
{"sfc_name":"two-sample-vnf-containers","container":"node_2","port":"node2_veth","mac_addr_id":2,"veth_id":2}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VNF_node_1_node1_veth
{"name":"IF_VETH_VNF_node_1_node1_veth","enabled":true,"phys_address":"02:00:00:00:00:01","mtu":1500,"host_if_name":"node1_veth","ip_addresses":["10.0.0.10/24"],"namespace":{"type":1,"microservice":"node_1"},"veth":{"peer_if_name":"IF_VETH_VSWITCH_node_1_node1_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VNF_node_2_node2_veth
{"name":"IF_VETH_VNF_node_2_node2_veth","enabled":true,"phys_address":"02:00:00:00:00:02","mtu":1500,"host_if_name":"node2_veth","ip_addresses":["10.0.0.11/24"],"namespace":{"type":1,"microservice":"node_2"},"veth":{"peer_if_name":"IF_VETH_VSWITCH_node_2_node2_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VSWITCH_node_1_node1_veth
{"name":"IF_VETH_VSWITCH_node_1_node1_veth","enabled":true,"mtu":1500,"host_if_name":"node_1_noeth_1","namespace":{"type":1,"microservice":"agent_vpp_1"},"veth":{"peer_if_name":"IF_VETH_VNF_node_1_node1_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VSWITCH_node_2_node2_veth
{"name":"IF_VETH_VSWITCH_node_2_node2_veth","enabled":true,"mtu":1500,"host_if_name":"node_2_noeth_2","namespace":{"type":1,"microservice":"agent_vpp_1"},"veth":{"peer_if_name":"IF_VETH_VNF_node_2_node2_veth"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/BD_INTERNAL_EW_L2FIB_agent_vpp_1
{"name":"BD_INTERNAL_EW_L2FIB_agent_vpp_1","forward":true}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/BD_INTERNAL_EW_agent_vpp_1
{"name":"BD_INTERNAL_EW_agent_vpp_1","flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true,"interfaces":[{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth"},{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth"}]}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth
{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","type":4,"enabled":true,"mtu":1500,"afpacket":{"host_if_name":"node_1_noeth_1"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth
{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","type":4,"enabled":true,"mtu":1500,"afpacket":{"host_if_name":"node_2_noeth_2"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_LOOPBACK_H_agent_vpp_1
{"name":"IF_LOOPBACK_H_agent_vpp_1","enabled":true,"phys_address":"02:00:00:AA:BB:00","mtu":1500,"ip_addresses":["6.0.0.100"]}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/loop0
{
  "name": "loop0",
  "type": 0,
  "enabled": true,
  "phys_address": "8a:f1:be:90:00:00",
  "mtu": 1500,
  "vrf": 0,
  "ip_addresses": [
    "20.1.1.1/24"
  ]
}


/vnf-agent/agent_vpp_1/vpp/config/v1/interface/loop1
{
  "name": "loop1",
  "type": 0,
  "enabled": true,
  "phys_address": "8a:f1:be:90:20:00",
  "mtu": 1500,
  "vrf": 0,
  "ip_addresses": [
    "30.1.1.1/24"
  ]
}


/vnf-agent/agent_vpp_1/vpp/status/v1/bd/BD_INTERNAL_EW_L2FIB_agent_vpp_1
{"index":2,"internal_name":"BD_INTERNAL_EW_L2FIB_agent_vpp_1","bvi_interface":"not_set","last_change":1526476631,"l2_params":{"forward":true}}
/vnf-agent/agent_vpp_1/vpp/status/v1/bd/BD_INTERNAL_EW_agent_vpp_1
{"index":1,"internal_name":"BD_INTERNAL_EW_agent_vpp_1","bvi_interface":"not_set","interface_count":2,"last_change":1526476631,"l2_params":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true},"interfaces":[{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","sw_if_index":2},{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","sw_if_index":3}]}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth
{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","internal_name":"host-node_1_noeth_1","if_index":2,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:3e:fd:61:28","mtu":1500,"statistics":{"in_packets":18,"in_bytes":1412}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth
{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","internal_name":"host-node_2_noeth_2","if_index":3,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:42:98:22:08","mtu":1500,"statistics":{"in_packets":20,"in_bytes":1592}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_LOOPBACK_H_agent_vpp_1
{"name":"IF_LOOPBACK_H_agent_vpp_1","internal_name":"loop0","if_index":1,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:00:00:aa:bb:00","mtu":1500,"statistics":{}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/local0
{"name":"local0","internal_name":"local0","admin_status":2,"oper_status":2,"statistics":{}}
/vnf-agent/node_1/check/status/v1/agent
{"build_version":"v1.1-5-g55e9977","build_date":"2018-03-06T11:05+00:00","state":1,"start_time":1526476614,"last_change":1526476619,"last_update":1526476725,"commit_hash":"55e99770087087fa8e41a980a8b6257c80c93f4c"}
/vnf-agent/node_1/check/status/v1/plugin/etcdv3
{"state":1,"last_change":1526476619,"last_update":1526476725}
/vnf-agent/node_1/check/status/v1/plugin/kafka
{"state":1,"last_change":1526476619,"last_update":1526476725}
/vnf-agent/node_2/check/status/v1/agent
{"build_version":"v1.1-5-g55e9977","build_date":"2018-03-06T11:05+00:00","state":1,"start_time":1526476623,"last_change":1526476628,"last_update":1526476723,"commit_hash":"55e99770087087fa8e41a980a8b6257c80c93f4c"}
/vnf-agent/node_2/check/status/v1/plugin/etcdv3
{"state":1,"last_change":1526476628,"last_update":1526476723}
/vnf-agent/node_2/check/status/v1/plugin/kafka
{"state":1,"last_change":1526476628,"last_update":1526476723}</msg>
<msg timestamp="20180516 15:18:51.828" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:18:51.828" starttime="20180516 15:18:51.827"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:18:51.829" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:18:51.829" starttime="20180516 15:18:51.828"></status>
</kw>
<msg timestamp="20180516 15:18:51.829" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:18:51.829" starttime="20180516 15:18:51.828"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} on ${machine}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:51.829" starttime="20180516 15:18:51.829"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${log}'=='true'</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:51.830" starttime="20180516 15:18:51.830"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:51.830" starttime="20180516 15:18:51.830"></status>
</kw>
<msg timestamp="20180516 15:18:51.831" level="INFO">${out} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<status status="PASS" endtime="20180516 15:18:51.831" starttime="20180516 15:18:51.509"></status>
</kw>
<msg timestamp="20180516 15:18:51.831" level="INFO">${dump} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<status status="PASS" endtime="20180516 15:18:51.831" starttime="20180516 15:18:51.496"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/etcd_dump-${tag}.txt</arg>
<arg>${dump}</arg>
</arguments>
<msg timestamp="20180516 15:18:51.831" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/etcd_dump-012_Check Bridge Domain Is Created_test_setup.txt"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/etcd_dump-012_Check Bridge Domain Is Created_test_setup.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:18:51.832" starttime="20180516 15:18:51.831"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${dump}</arg>
<arg>/error/</arg>
</arguments>
<assign>
<var>${errors}</var>
</assign>
<msg timestamp="20180516 15:18:51.832" level="INFO">0 out of 82 lines matched</msg>
<msg timestamp="20180516 15:18:51.832" level="INFO">${errors} = </msg>
<status status="PASS" endtime="20180516 15:18:51.832" starttime="20180516 15:18:51.832"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${errors}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${errors}</arg>
</arguments>
<msg timestamp="20180516 15:18:51.833" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:18:51.833" starttime="20180516 15:18:51.833"></status>
</kw>
<msg timestamp="20180516 15:18:51.833" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:18:51.833" starttime="20180516 15:18:51.833"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>Errors detected in keys: ${errors}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:51.834" starttime="20180516 15:18:51.834"></status>
</kw>
<status status="PASS" endtime="20180516 15:18:51.834" starttime="20180516 15:18:51.496"></status>
</kw>
<status status="PASS" endtime="20180516 15:18:51.834" starttime="20180516 15:18:51.493"></status>
</kw>
<status status="PASS" endtime="20180516 15:18:51.834" starttime="20180516 15:18:51.492"></status>
</kw>
<kw name="vat_term: BD Is Created" library="vat_term">
<arguments>
<arg>agent_vpp_1</arg>
<arg>IF_AFPIF_VSWITCH_node_1_node1_veth</arg>
<arg>IF_AFPIF_VSWITCH_node_2_node2_veth</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${interfaces}</arg>
</arguments>
<msg timestamp="20180516 15:18:51.835" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:18:51.835" level="INFO">[u'IF_AFPIF_VSWITCH_node_1_node1_veth', u'IF_AFPIF_VSWITCH_node_2_node2_veth']</msg>
<status status="PASS" endtime="20180516 15:18:51.835" starttime="20180516 15:18:51.835"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${bd_timeout}</arg>
<arg>3s</arg>
<arg>vat_term: Check BD Presence</arg>
<arg>${node}</arg>
<arg>${interfaces}</arg>
</arguments>
<kw name="vat_term: Check BD Presence" library="vat_term">
<arguments>
<arg>${node}</arg>
<arg>${interfaces}</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${interfaces}</arg>
<arg>${status}</arg>
</arguments>
<msg timestamp="20180516 15:18:51.837" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:18:51.837" level="INFO">[u'IF_AFPIF_VSWITCH_node_1_node1_veth', u'IF_AFPIF_VSWITCH_node_2_node2_veth']</msg>
<msg timestamp="20180516 15:18:51.838" level="INFO">True</msg>
<status status="PASS" endtime="20180516 15:18:51.838" starttime="20180516 15:18:51.837"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>${indexes}</var>
</assign>
<msg timestamp="20180516 15:18:51.838" level="INFO">${indexes} = []</msg>
<status status="PASS" endtime="20180516 15:18:51.838" starttime="20180516 15:18:51.838"></status>
</kw>
<kw type="for" name="${int} IN [ @{interfaces} ]">
<kw type="foritem" name="${int} = IF_AFPIF_VSWITCH_node_1_node1_veth">
<kw name="vpp_ctl: Get Interface Sw If Index" library="vpp_ctl">
<arguments>
<arg>${node}</arg>
<arg>${int}</arg>
</arguments>
<assign>
<var>${sw_if_index}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${interface}</arg>
</arguments>
<msg timestamp="20180516 15:18:51.839" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:18:51.839" level="INFO">IF_AFPIF_VSWITCH_node_1_node1_veth</msg>
<status status="PASS" endtime="20180516 15:18:51.839" starttime="20180516 15:18:51.839"></status>
</kw>
<kw name="vpp_ctl: Get VPP Interface State As Json" library="vpp_ctl">
<arguments>
<arg>${node}</arg>
<arg>${interface}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${interface}</arg>
</arguments>
<msg timestamp="20180516 15:18:51.840" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:18:51.841" level="INFO">IF_AFPIF_VSWITCH_node_1_node1_veth</msg>
<status status="PASS" endtime="20180516 15:18:51.841" starttime="20180516 15:18:51.840"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/vnf-agent/${node}/vpp/status/v1/interface/${interface}</arg>
</arguments>
<assign>
<var>${key}</var>
</assign>
<msg timestamp="20180516 15:18:51.841" level="INFO">${key} = /vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth</msg>
<status status="PASS" endtime="20180516 15:18:51.841" starttime="20180516 15:18:51.841"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${key}</arg>
</arguments>
<msg timestamp="20180516 15:18:51.841" level="INFO">/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth</msg>
<status status="PASS" endtime="20180516 15:18:51.842" starttime="20180516 15:18:51.841"></status>
</kw>
<kw name="vpp_ctl: Read Key" library="vpp_ctl">
<arguments>
<arg>${key}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${key}</arg>
<arg>${container}</arg>
</arguments>
<msg timestamp="20180516 15:18:51.843" level="INFO">/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth</msg>
<msg timestamp="20180516 15:18:51.843" level="INFO">vpp_agent_ctl</msg>
<status status="PASS" endtime="20180516 15:18:51.843" starttime="20180516 15:18:51.842"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>vpp-agent-ctl ${AGENT_VPP_ETCD_CONF_PATH} -get ${key}</arg>
</arguments>
<assign>
<var>${command}</var>
</assign>
<msg timestamp="20180516 15:18:51.844" level="INFO">${command} = vpp-agent-ctl /opt/vpp-agent/dev/etcd.conf -get /vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth</msg>
<status status="PASS" endtime="20180516 15:18:51.844" starttime="20180516 15:18:51.843"></status>
</kw>
<kw name="Execute In Container" library="docker">
<arguments>
<arg>${container}</arg>
<arg>${command}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${container}</arg>
<arg>${command}</arg>
</arguments>
<msg timestamp="20180516 15:18:51.845" level="INFO">vpp_agent_ctl</msg>
<msg timestamp="20180516 15:18:51.846" level="INFO">vpp-agent-ctl /opt/vpp-agent/dev/etcd.conf -get /vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth</msg>
<status status="PASS" endtime="20180516 15:18:51.846" starttime="20180516 15:18:51.845"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>docker</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:51.846" starttime="20180516 15:18:51.846"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:18:51.847" level="INFO">${currdate} = 2018-05-16 15:18:51.846</msg>
<status status="PASS" endtime="20180516 15:18:51.847" starttime="20180516 15:18:51.846"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DOCKER_COMMAND} exec ${container} ${command}</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20180516 15:18:51.847" level="INFO">Executing command 'sudo docker exec vpp_agent_ctl vpp-agent-ctl /opt/vpp-agent/dev/etcd.conf -get /vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth'.</msg>
<msg timestamp="20180516 15:18:52.215" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:18:52.215" level="INFO">${out} = {"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","internal_name":"host-node_1_noeth_1","if_index":2,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:3e:fd:61:28","mtu":1500,...</msg>
<msg timestamp="20180516 15:18:52.215" level="INFO">${stderr} = time="2018-05-16 13:18:52.13616" level=info msg="Connecting to etcd took 1.05084ms" durationInNs=1050840 loc="etcdv3/bytes_broker_impl.go(84)" logger=defaultLogger</msg>
<msg timestamp="20180516 15:18:52.215" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20180516 15:18:52.216" starttime="20180516 15:18:51.847"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:18:52.216" level="INFO">{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","internal_name":"host-node_1_noeth_1","if_index":2,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:3e:fd:61:28","mtu":1500,"statistics":{"in_packets":18,"in_bytes":1412}}</msg>
<status status="PASS" endtime="20180516 15:18:52.216" starttime="20180516 15:18:52.216"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:18:52.217" level="INFO">time="2018-05-16 13:18:52.13616" level=info msg="Connecting to etcd took 1.05084ms" durationInNs=1050840 loc="etcdv3/bytes_broker_impl.go(84)" logger=defaultLogger</msg>
<status status="PASS" endtime="20180516 15:18:52.217" starttime="20180516 15:18:52.216"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${rc}</arg>
</arguments>
<msg timestamp="20180516 15:18:52.217" level="INFO">0</msg>
<status status="PASS" endtime="20180516 15:18:52.217" starttime="20180516 15:18:52.217"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:18:52.218" level="INFO">Length is 163</msg>
<msg timestamp="20180516 15:18:52.218" level="FAIL">'time="2018-05-16 13:18:52.13616" level=info msg="Connecting to etcd took 1.05084ms" durationInNs=1050840 loc="etcdv3/bytes_broker_impl.go(84)" logger=defaultLogger' should be empty.</msg>
<status status="FAIL" endtime="20180516 15:18:52.218" starttime="20180516 15:18:52.218"></status>
</kw>
<msg timestamp="20180516 15:18:52.218" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20180516 15:18:52.218" starttime="20180516 15:18:52.217"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} in container ${container}</arg>
<arg>level=WARN</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>One or more error occured during execution of a command ${command} in container ${container}</arg>
<arg>level=WARN</arg>
</arguments>
<msg timestamp="20180516 15:18:52.219" level="WARN">One or more error occured during execution of a command vpp-agent-ctl /opt/vpp-agent/dev/etcd.conf -get /vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth in container vpp_agent_ctl</msg>
<status status="PASS" endtime="20180516 15:18:52.220" starttime="20180516 15:18:52.219"></status>
</kw>
<status status="PASS" endtime="20180516 15:18:52.220" starttime="20180516 15:18:52.218"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${container}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}***</arg>
</arguments>
<msg timestamp="20180516 15:18:52.221" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_vpp_agent_ctl.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_vpp_agent_ctl.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:18:52.221" starttime="20180516 15:18:52.220"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${container}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${container}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:18:52.223" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_vpp_agent_ctl.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_vpp_agent_ctl.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:18:52.223" starttime="20180516 15:18:52.222"></status>
</kw>
<status status="PASS" endtime="20180516 15:18:52.223" starttime="20180516 15:18:52.222"></status>
</kw>
<msg timestamp="20180516 15:18:52.223" level="INFO">${out} = {"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","internal_name":"host-node_1_noeth_1","if_index":2,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:3e:fd:61:28","mtu":1500,...</msg>
<status status="PASS" endtime="20180516 15:18:52.223" starttime="20180516 15:18:51.844"></status>
</kw>
<msg timestamp="20180516 15:18:52.223" level="INFO">${data} = {"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","internal_name":"host-node_1_noeth_1","if_index":2,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:3e:fd:61:28","mtu":1500,...</msg>
<status status="PASS" endtime="20180516 15:18:52.223" starttime="20180516 15:18:51.842"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${data}</arg>
</arguments>
<msg timestamp="20180516 15:18:52.224" level="INFO">{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","internal_name":"host-node_1_noeth_1","if_index":2,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:3e:fd:61:28","mtu":1500,"statistics":{"in_packets":18,"in_bytes":1412}}</msg>
<status status="PASS" endtime="20180516 15:18:52.224" starttime="20180516 15:18:52.223"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'''${data}'''==""</arg>
<arg>{}</arg>
<arg>${data}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20180516 15:18:52.224" level="INFO">${data} = {"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","internal_name":"host-node_1_noeth_1","if_index":2,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:3e:fd:61:28","mtu":1500,...</msg>
<status status="PASS" endtime="20180516 15:18:52.224" starttime="20180516 15:18:52.224"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${data}</arg>
</arguments>
<msg timestamp="20180516 15:18:52.225" level="INFO">{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","internal_name":"host-node_1_noeth_1","if_index":2,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:3e:fd:61:28","mtu":1500,"statistics":{"in_packets":18,"in_bytes":1412}}</msg>
<status status="PASS" endtime="20180516 15:18:52.225" starttime="20180516 15:18:52.225"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>json.loads('''${data}''')</arg>
<arg>json</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180516 15:18:52.226" level="INFO">${output} = {u'statistics': {u'in_packets': 18, u'in_bytes': 1412}, u'if_index': 2, u'name': u'IF_AFPIF_VSWITCH_node_1_node1_veth', u'admin_status': 1, u'mtu': 1500, u'oper_status': 1, u'internal_name': u'host-no...</msg>
<status status="PASS" endtime="20180516 15:18:52.226" starttime="20180516 15:18:52.225"></status>
</kw>
<msg timestamp="20180516 15:18:52.226" level="INFO">${state} = {u'statistics': {u'in_packets': 18, u'in_bytes': 1412}, u'if_index': 2, u'name': u'IF_AFPIF_VSWITCH_node_1_node1_veth', u'admin_status': 1, u'mtu': 1500, u'oper_status': 1, u'internal_name': u'host-no...</msg>
<status status="PASS" endtime="20180516 15:18:52.226" starttime="20180516 15:18:51.840"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${state["if_index"]}</arg>
</arguments>
<assign>
<var>${sw_if_index}</var>
</assign>
<msg timestamp="20180516 15:18:52.227" level="INFO">${sw_if_index} = 2</msg>
<status status="PASS" endtime="20180516 15:18:52.227" starttime="20180516 15:18:52.226"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sw_if_index}</arg>
</arguments>
<msg timestamp="20180516 15:18:52.228" level="INFO">2</msg>
<status status="PASS" endtime="20180516 15:18:52.228" starttime="20180516 15:18:52.228"></status>
</kw>
<msg timestamp="20180516 15:18:52.228" level="INFO">${sw_if_index} = 2</msg>
<status status="PASS" endtime="20180516 15:18:52.228" starttime="20180516 15:18:51.839"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${indexes}</arg>
<arg>${sw_if_index}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:52.229" starttime="20180516 15:18:52.228"></status>
</kw>
<status status="PASS" endtime="20180516 15:18:52.229" starttime="20180516 15:18:51.838"></status>
</kw>
<kw type="foritem" name="${int} = IF_AFPIF_VSWITCH_node_2_node2_veth">
<kw name="vpp_ctl: Get Interface Sw If Index" library="vpp_ctl">
<arguments>
<arg>${node}</arg>
<arg>${int}</arg>
</arguments>
<assign>
<var>${sw_if_index}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${interface}</arg>
</arguments>
<msg timestamp="20180516 15:18:52.230" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:18:52.230" level="INFO">IF_AFPIF_VSWITCH_node_2_node2_veth</msg>
<status status="PASS" endtime="20180516 15:18:52.230" starttime="20180516 15:18:52.230"></status>
</kw>
<kw name="vpp_ctl: Get VPP Interface State As Json" library="vpp_ctl">
<arguments>
<arg>${node}</arg>
<arg>${interface}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${interface}</arg>
</arguments>
<msg timestamp="20180516 15:18:52.237" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:18:52.237" level="INFO">IF_AFPIF_VSWITCH_node_2_node2_veth</msg>
<status status="PASS" endtime="20180516 15:18:52.237" starttime="20180516 15:18:52.237"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/vnf-agent/${node}/vpp/status/v1/interface/${interface}</arg>
</arguments>
<assign>
<var>${key}</var>
</assign>
<msg timestamp="20180516 15:18:52.238" level="INFO">${key} = /vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth</msg>
<status status="PASS" endtime="20180516 15:18:52.238" starttime="20180516 15:18:52.238"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${key}</arg>
</arguments>
<msg timestamp="20180516 15:18:52.238" level="INFO">/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth</msg>
<status status="PASS" endtime="20180516 15:18:52.238" starttime="20180516 15:18:52.238"></status>
</kw>
<kw name="vpp_ctl: Read Key" library="vpp_ctl">
<arguments>
<arg>${key}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${key}</arg>
<arg>${container}</arg>
</arguments>
<msg timestamp="20180516 15:18:52.242" level="INFO">/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth</msg>
<msg timestamp="20180516 15:18:52.243" level="INFO">vpp_agent_ctl</msg>
<status status="PASS" endtime="20180516 15:18:52.243" starttime="20180516 15:18:52.239"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>vpp-agent-ctl ${AGENT_VPP_ETCD_CONF_PATH} -get ${key}</arg>
</arguments>
<assign>
<var>${command}</var>
</assign>
<msg timestamp="20180516 15:18:52.243" level="INFO">${command} = vpp-agent-ctl /opt/vpp-agent/dev/etcd.conf -get /vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth</msg>
<status status="PASS" endtime="20180516 15:18:52.243" starttime="20180516 15:18:52.243"></status>
</kw>
<kw name="Execute In Container" library="docker">
<arguments>
<arg>${container}</arg>
<arg>${command}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${container}</arg>
<arg>${command}</arg>
</arguments>
<msg timestamp="20180516 15:18:52.244" level="INFO">vpp_agent_ctl</msg>
<msg timestamp="20180516 15:18:52.244" level="INFO">vpp-agent-ctl /opt/vpp-agent/dev/etcd.conf -get /vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth</msg>
<status status="PASS" endtime="20180516 15:18:52.244" starttime="20180516 15:18:52.244"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>docker</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:52.245" starttime="20180516 15:18:52.245"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:18:52.245" level="INFO">${currdate} = 2018-05-16 15:18:52.245</msg>
<status status="PASS" endtime="20180516 15:18:52.245" starttime="20180516 15:18:52.245"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DOCKER_COMMAND} exec ${container} ${command}</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20180516 15:18:52.246" level="INFO">Executing command 'sudo docker exec vpp_agent_ctl vpp-agent-ctl /opt/vpp-agent/dev/etcd.conf -get /vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth'.</msg>
<msg timestamp="20180516 15:18:52.581" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:18:52.581" level="INFO">${out} = {"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","internal_name":"host-node_2_noeth_2","if_index":3,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:42:98:22:08","mtu":1500,...</msg>
<msg timestamp="20180516 15:18:52.581" level="INFO">${stderr} = time="2018-05-16 13:18:52.48358" level=info msg="Connecting to etcd took 7.482773ms" durationInNs=7482773 loc="etcdv3/bytes_broker_impl.go(84)" logger=defaultLogger</msg>
<msg timestamp="20180516 15:18:52.581" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20180516 15:18:52.581" starttime="20180516 15:18:52.246"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:18:52.582" level="INFO">{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","internal_name":"host-node_2_noeth_2","if_index":3,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:42:98:22:08","mtu":1500,"statistics":{"in_packets":20,"in_bytes":1592}}</msg>
<status status="PASS" endtime="20180516 15:18:52.582" starttime="20180516 15:18:52.582"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:18:52.583" level="INFO">time="2018-05-16 13:18:52.48358" level=info msg="Connecting to etcd took 7.482773ms" durationInNs=7482773 loc="etcdv3/bytes_broker_impl.go(84)" logger=defaultLogger</msg>
<status status="PASS" endtime="20180516 15:18:52.583" starttime="20180516 15:18:52.582"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${rc}</arg>
</arguments>
<msg timestamp="20180516 15:18:52.586" level="INFO">0</msg>
<status status="PASS" endtime="20180516 15:18:52.586" starttime="20180516 15:18:52.583"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:18:52.588" level="INFO">Length is 164</msg>
<msg timestamp="20180516 15:18:52.588" level="FAIL">'time="2018-05-16 13:18:52.48358" level=info msg="Connecting to etcd took 7.482773ms" durationInNs=7482773 loc="etcdv3/bytes_broker_impl.go(84)" logger=defaultLogger' should be empty.</msg>
<status status="FAIL" endtime="20180516 15:18:52.588" starttime="20180516 15:18:52.588"></status>
</kw>
<msg timestamp="20180516 15:18:52.588" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20180516 15:18:52.588" starttime="20180516 15:18:52.587"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} in container ${container}</arg>
<arg>level=WARN</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>One or more error occured during execution of a command ${command} in container ${container}</arg>
<arg>level=WARN</arg>
</arguments>
<msg timestamp="20180516 15:18:52.590" level="WARN">One or more error occured during execution of a command vpp-agent-ctl /opt/vpp-agent/dev/etcd.conf -get /vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth in container vpp_agent_ctl</msg>
<status status="PASS" endtime="20180516 15:18:52.591" starttime="20180516 15:18:52.590"></status>
</kw>
<status status="PASS" endtime="20180516 15:18:52.591" starttime="20180516 15:18:52.589"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${container}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}***</arg>
</arguments>
<msg timestamp="20180516 15:18:52.596" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_vpp_agent_ctl.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_vpp_agent_ctl.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:18:52.596" starttime="20180516 15:18:52.592"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${container}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${container}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:18:52.603" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_vpp_agent_ctl.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_vpp_agent_ctl.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:18:52.603" starttime="20180516 15:18:52.602"></status>
</kw>
<status status="PASS" endtime="20180516 15:18:52.603" starttime="20180516 15:18:52.601"></status>
</kw>
<msg timestamp="20180516 15:18:52.604" level="INFO">${out} = {"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","internal_name":"host-node_2_noeth_2","if_index":3,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:42:98:22:08","mtu":1500,...</msg>
<status status="PASS" endtime="20180516 15:18:52.604" starttime="20180516 15:18:52.244"></status>
</kw>
<msg timestamp="20180516 15:18:52.604" level="INFO">${data} = {"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","internal_name":"host-node_2_noeth_2","if_index":3,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:42:98:22:08","mtu":1500,...</msg>
<status status="PASS" endtime="20180516 15:18:52.604" starttime="20180516 15:18:52.239"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${data}</arg>
</arguments>
<msg timestamp="20180516 15:18:52.609" level="INFO">{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","internal_name":"host-node_2_noeth_2","if_index":3,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:42:98:22:08","mtu":1500,"statistics":{"in_packets":20,"in_bytes":1592}}</msg>
<status status="PASS" endtime="20180516 15:18:52.609" starttime="20180516 15:18:52.608"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'''${data}'''==""</arg>
<arg>{}</arg>
<arg>${data}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20180516 15:18:52.610" level="INFO">${data} = {"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","internal_name":"host-node_2_noeth_2","if_index":3,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:42:98:22:08","mtu":1500,...</msg>
<status status="PASS" endtime="20180516 15:18:52.611" starttime="20180516 15:18:52.609"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${data}</arg>
</arguments>
<msg timestamp="20180516 15:18:52.616" level="INFO">{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","internal_name":"host-node_2_noeth_2","if_index":3,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:42:98:22:08","mtu":1500,"statistics":{"in_packets":20,"in_bytes":1592}}</msg>
<status status="PASS" endtime="20180516 15:18:52.616" starttime="20180516 15:18:52.611"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>json.loads('''${data}''')</arg>
<arg>json</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180516 15:18:52.620" level="INFO">${output} = {u'statistics': {u'in_packets': 20, u'in_bytes': 1592}, u'if_index': 3, u'name': u'IF_AFPIF_VSWITCH_node_2_node2_veth', u'admin_status': 1, u'mtu': 1500, u'oper_status': 1, u'internal_name': u'host-no...</msg>
<status status="PASS" endtime="20180516 15:18:52.620" starttime="20180516 15:18:52.617"></status>
</kw>
<msg timestamp="20180516 15:18:52.620" level="INFO">${state} = {u'statistics': {u'in_packets': 20, u'in_bytes': 1592}, u'if_index': 3, u'name': u'IF_AFPIF_VSWITCH_node_2_node2_veth', u'admin_status': 1, u'mtu': 1500, u'oper_status': 1, u'internal_name': u'host-no...</msg>
<status status="PASS" endtime="20180516 15:18:52.620" starttime="20180516 15:18:52.231"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${state["if_index"]}</arg>
</arguments>
<assign>
<var>${sw_if_index}</var>
</assign>
<msg timestamp="20180516 15:18:52.621" level="INFO">${sw_if_index} = 3</msg>
<status status="PASS" endtime="20180516 15:18:52.621" starttime="20180516 15:18:52.620"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sw_if_index}</arg>
</arguments>
<msg timestamp="20180516 15:18:52.621" level="INFO">3</msg>
<status status="PASS" endtime="20180516 15:18:52.621" starttime="20180516 15:18:52.621"></status>
</kw>
<msg timestamp="20180516 15:18:52.621" level="INFO">${sw_if_index} = 3</msg>
<status status="PASS" endtime="20180516 15:18:52.621" starttime="20180516 15:18:52.229"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${indexes}</arg>
<arg>${sw_if_index}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:52.622" starttime="20180516 15:18:52.622"></status>
</kw>
<status status="PASS" endtime="20180516 15:18:52.622" starttime="20180516 15:18:52.229"></status>
</kw>
<status status="PASS" endtime="20180516 15:18:52.622" starttime="20180516 15:18:51.838"></status>
</kw>
<kw name="Log List" library="Collections">
<doc>Logs the length and contents of the ``list`` using given ``level``.</doc>
<arguments>
<arg>${indexes}</arg>
</arguments>
<msg timestamp="20180516 15:18:52.622" level="INFO">List length is 2 and it contains following items:
0: 2
1: 3</msg>
<status status="PASS" endtime="20180516 15:18:52.622" starttime="20180516 15:18:52.622"></status>
</kw>
<kw name="vat_term: Bridge Domain Dump" library="vat_term">
<doc>Executing command bridge_domain_dump</doc>
<arguments>
<arg>${node}</arg>
</arguments>
<assign>
<var>${bd_dump}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${bd_id}</arg>
</arguments>
<msg timestamp="20180516 15:18:52.629" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:18:52.629" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:18:52.629" starttime="20180516 15:18:52.629"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'''${bd_id}'''==""</arg>
<arg>${EMPTY}</arg>
<arg>bd_id ${bd_id}</arg>
</arguments>
<assign>
<var>${add_params}</var>
</assign>
<msg timestamp="20180516 15:18:52.630" level="INFO">${add_params} = </msg>
<status status="PASS" endtime="20180516 15:18:52.630" starttime="20180516 15:18:52.630"></status>
</kw>
<kw name="vat_term: Issue Command" library="vat_term">
<arguments>
<arg>${node}</arg>
<arg>bridge_domain_dump ${add_params}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${command}</arg>
<arg>${delay}</arg>
<arg>${node}_vat</arg>
<arg>${${node}_VPP_VAT_PROMPT}</arg>
</arguments>
<msg timestamp="20180516 15:18:52.631" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:18:52.631" level="INFO">bridge_domain_dump </msg>
<msg timestamp="20180516 15:18:52.631" level="INFO">3s</msg>
<msg timestamp="20180516 15:18:52.631" level="INFO">agent_vpp_1_vat</msg>
<msg timestamp="20180516 15:18:52.632" level="INFO">vat#</msg>
<status status="PASS" endtime="20180516 15:18:52.632" starttime="20180516 15:18:52.631"></status>
</kw>
<kw name="Write To Machine Until String" library="ssh">
<doc>*Write Machine ${machine} bridge_domain_dump *</doc>
<arguments>
<arg>${node}_vat</arg>
<arg>${command}</arg>
<arg>${${node}_VPP_VAT_PROMPT}</arg>
<arg>delay=${delay}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${string}</arg>
<arg>${delay}</arg>
</arguments>
<msg timestamp="20180516 15:18:52.648" level="INFO">agent_vpp_1_vat</msg>
<msg timestamp="20180516 15:18:52.648" level="INFO">bridge_domain_dump </msg>
<msg timestamp="20180516 15:18:52.649" level="INFO">vat#</msg>
<msg timestamp="20180516 15:18:52.649" level="INFO">3s</msg>
<status status="PASS" endtime="20180516 15:18:52.649" starttime="20180516 15:18:52.647"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:52.649" starttime="20180516 15:18:52.649"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:18:52.652" level="INFO">${currdate} = 2018-05-16 15:18:52.651</msg>
<status status="PASS" endtime="20180516 15:18:52.652" starttime="20180516 15:18:52.651"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20180516 15:18:52.657" level="INFO">bridge_domain_dump</msg>
<status status="PASS" endtime="20180516 15:18:52.657" starttime="20180516 15:18:52.652"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>${string}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20180516 15:18:52.666" level="INFO">[ 
  {
    "bd_id": 1,
    "flood": 1,
    "forward": 1,
    "learn": 1,
    "bvi_sw_if_index": 4294967295,
    "n_sw_ifs": 2,
    "sw_if": [ 
      {
        "sw_if_index": 2,
        "shg": 0
      },
      {
        "sw_if_index": 3,
        "shg": 0
      }
    ]
  },
  {
    "bd_id": 2,
    "flood": 0,
    "forward": 1,
    "learn": 0,
    "bvi_sw_if_index": 4294967295,
    "n_sw_ifs": 0,
    "sw_if": []
  }
]
vat#</msg>
<msg timestamp="20180516 15:18:52.666" level="INFO">${out} = 
[ 
  {
    "bd_id": 1,
    "flood": 1,
    "forward": 1,
    "learn": 1,
    "bvi_sw_if_index": 4294967295,
    "n_sw_ifs": 2,
    "sw_if": [ 
      {
        "sw_if_index": 2,
        "s...</msg>
<status status="PASS" endtime="20180516 15:18:52.666" starttime="20180516 15:18:52.657"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:18:52.667" level="INFO">
[ 
  {
    "bd_id": 1,
    "flood": 1,
    "forward": 1,
    "learn": 1,
    "bvi_sw_if_index": 4294967295,
    "n_sw_ifs": 2,
    "sw_if": [ 
      {
        "sw_if_index": 2,
        "shg": 0
      },
      {
        "sw_if_index": 3,
        "shg": 0
      }
    ]
  },
  {
    "bd_id": 2,
    "flood": 0,
    "forward": 1,
    "learn": 0,
    "bvi_sw_if_index": 4294967295,
    "n_sw_ifs": 0,
    "sw_if": []
  }
]
vat#</msg>
<status status="PASS" endtime="20180516 15:18:52.667" starttime="20180516 15:18:52.667"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>delay=${delay}</arg>
</arguments>
<assign>
<var>${out2}</var>
</assign>
<msg timestamp="20180516 15:18:55.670" level="INFO">${out2} =  </msg>
<status status="PASS" endtime="20180516 15:18:55.670" starttime="20180516 15:18:52.667"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out2}</arg>
</arguments>
<msg timestamp="20180516 15:18:55.671" level="INFO"> </msg>
<status status="PASS" endtime="20180516 15:18:55.671" starttime="20180516 15:18:55.671"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${out2}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:18:55.672" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_vat.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_vat.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:18:55.672" starttime="20180516 15:18:55.671"></status>
</kw>
<msg timestamp="20180516 15:18:55.672" level="INFO">${out} = 
[ 
  {
    "bd_id": 1,
    "flood": 1,
    "forward": 1,
    "learn": 1,
    "bvi_sw_if_index": 4294967295,
    "n_sw_ifs": 2,
    "sw_if": [ 
      {
        "sw_if_index": 2,
        "s...</msg>
<status status="PASS" endtime="20180516 15:18:55.672" starttime="20180516 15:18:52.643"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:18:55.673" level="INFO">
[ 
  {
    "bd_id": 1,
    "flood": 1,
    "forward": 1,
    "learn": 1,
    "bvi_sw_if_index": 4294967295,
    "n_sw_ifs": 2,
    "sw_if": [ 
      {
        "sw_if_index": 2,
        "shg": 0
      },
      {
        "sw_if_index": 3,
        "shg": 0
      }
    ]
  },
  {
    "bd_id": 2,
    "flood": 0,
    "forward": 1,
    "learn": 0,
    "bvi_sw_if_index": 4294967295,
    "n_sw_ifs": 0,
    "sw_if": []
  }
]
vat# </msg>
<status status="PASS" endtime="20180516 15:18:55.673" starttime="20180516 15:18:55.672"></status>
</kw>
<msg timestamp="20180516 15:18:55.673" level="INFO">${out} = 
[ 
  {
    "bd_id": 1,
    "flood": 1,
    "forward": 1,
    "learn": 1,
    "bvi_sw_if_index": 4294967295,
    "n_sw_ifs": 2,
    "sw_if": [ 
      {
        "sw_if_index": 2,
        "s...</msg>
<status status="PASS" endtime="20180516 15:18:55.673" starttime="20180516 15:18:52.630"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"""${out}"""["""${out}""".find('['):"""${out}""".rfind(']')+1]</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20180516 15:18:55.673" level="INFO">${out} = [ 
  {
    "bd_id": 1,
    "flood": 1,
    "forward": 1,
    "learn": 1,
    "bvi_sw_if_index": 4294967295,
    "n_sw_ifs": 2,
    "sw_if": [ 
      {
        "sw_if_index": 2,
        "shg": 0
      ...</msg>
<status status="PASS" endtime="20180516 15:18:55.673" starttime="20180516 15:18:55.673"></status>
</kw>
<msg timestamp="20180516 15:18:55.674" level="INFO">${bd_dump} = [ 
  {
    "bd_id": 1,
    "flood": 1,
    "forward": 1,
    "learn": 1,
    "bvi_sw_if_index": 4294967295,
    "n_sw_ifs": 2,
    "sw_if": [ 
      {
        "sw_if_index": 2,
        "shg": 0
      ...</msg>
<status status="PASS" endtime="20180516 15:18:55.674" starttime="20180516 15:18:52.623"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${bd_dump}</arg>
</arguments>
<msg timestamp="20180516 15:18:55.674" level="INFO">[ 
  {
    "bd_id": 1,
    "flood": 1,
    "forward": 1,
    "learn": 1,
    "bvi_sw_if_index": 4294967295,
    "n_sw_ifs": 2,
    "sw_if": [ 
      {
        "sw_if_index": 2,
        "shg": 0
      },
      {
        "sw_if_index": 3,
        "shg": 0
      }
    ]
  },
  {
    "bd_id": 2,
    "flood": 0,
    "forward": 1,
    "learn": 0,
    "bvi_sw_if_index": 4294967295,
    "n_sw_ifs": 0,
    "sw_if": []
  }
]</msg>
<status status="PASS" endtime="20180516 15:18:55.674" starttime="20180516 15:18:55.674"></status>
</kw>
<kw name="Check BD Presence" library="vat_term">
<arguments>
<arg>${bd_dump}</arg>
<arg>${indexes}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20180516 15:18:55.675" level="INFO">${result} = True</msg>
<status status="PASS" endtime="20180516 15:18:55.675" starttime="20180516 15:18:55.674"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${result}</arg>
<arg>${status}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:55.675" starttime="20180516 15:18:55.675"></status>
</kw>
<status status="PASS" endtime="20180516 15:18:55.675" starttime="20180516 15:18:51.836"></status>
</kw>
<status status="PASS" endtime="20180516 15:18:55.675" starttime="20180516 15:18:51.836"></status>
</kw>
<status status="PASS" endtime="20180516 15:18:55.675" starttime="20180516 15:18:51.835"></status>
</kw>
<kw type="teardown" name="TestTeardown">
<kw name="Make Datastore Snapshots" library="setup-teardown">
<arguments>
<arg>${TEST_NAME}_test_teardown</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tag}</arg>
</arguments>
<msg timestamp="20180516 15:18:55.677" level="INFO">Check Bridge Domain Is Created_test_teardown</msg>
<status status="PASS" endtime="20180516 15:18:55.677" starttime="20180516 15:18:55.677"></status>
</kw>
<kw name="Create Next Snapshot Prefix" library="setup-teardown">
<assign>
<var>${prefix}</var>
</assign>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>str(${snapshot_num}).zfill(3)</arg>
</arguments>
<assign>
<var>${prefix}</var>
</assign>
<msg timestamp="20180516 15:18:55.678" level="INFO">${prefix} = 013</msg>
<status status="PASS" endtime="20180516 15:18:55.678" starttime="20180516 15:18:55.678"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${snapshot_num}+1</arg>
</arguments>
<assign>
<var>${snapshot_num}</var>
</assign>
<msg timestamp="20180516 15:18:55.679" level="INFO">${snapshot_num} = 14</msg>
<status status="PASS" endtime="20180516 15:18:55.679" starttime="20180516 15:18:55.679"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${snapshot_num}</arg>
</arguments>
<msg timestamp="20180516 15:18:55.679" level="INFO">${snapshot_num} = 14</msg>
<status status="PASS" endtime="20180516 15:18:55.679" starttime="20180516 15:18:55.679"></status>
</kw>
<msg timestamp="20180516 15:18:55.680" level="INFO">${prefix} = 013</msg>
<status status="PASS" endtime="20180516 15:18:55.680" starttime="20180516 15:18:55.677"></status>
</kw>
<kw name="Take ETCD Snapshots" library="setup-teardown">
<arguments>
<arg>${prefix}_${tag}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tag}</arg>
</arguments>
<msg timestamp="20180516 15:18:55.680" level="INFO">013_Check Bridge Domain Is Created_test_teardown</msg>
<status status="PASS" endtime="20180516 15:18:55.681" starttime="20180516 15:18:55.680"></status>
</kw>
<kw name="Get ETCD Dump" library="setup-teardown">
<assign>
<var>${dump}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DOCKER_COMMAND} exec etcd etcdctl get --prefix="true" ""</arg>
</arguments>
<assign>
<var>${command}</var>
</assign>
<msg timestamp="20180516 15:18:55.681" level="INFO">${command} = sudo docker exec etcd etcdctl get --prefix="true" ""</msg>
<status status="PASS" endtime="20180516 15:18:55.681" starttime="20180516 15:18:55.681"></status>
</kw>
<kw name="Execute On Machine" library="ssh">
<doc>*Execute On Machine ${machine} sudo docker exec etcd etcdctl get --prefix="true" ""*</doc>
<arguments>
<arg>docker</arg>
<arg>${command}</arg>
<arg>log=false</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${log}</arg>
</arguments>
<msg timestamp="20180516 15:18:55.688" level="INFO">docker</msg>
<msg timestamp="20180516 15:18:55.688" level="INFO">sudo docker exec etcd etcdctl get --prefix="true" ""</msg>
<msg timestamp="20180516 15:18:55.688" level="INFO">false</msg>
<status status="PASS" endtime="20180516 15:18:55.688" starttime="20180516 15:18:55.688"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:55.689" starttime="20180516 15:18:55.688"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:18:55.689" level="INFO">${currdate} = 2018-05-16 15:18:55.689</msg>
<status status="PASS" endtime="20180516 15:18:55.689" starttime="20180516 15:18:55.689"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20180516 15:18:55.689" level="INFO">Executing command 'sudo docker exec etcd etcdctl get --prefix="true" ""'.</msg>
<msg timestamp="20180516 15:18:55.993" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:18:55.993" level="INFO">${out} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<msg timestamp="20180516 15:18:55.993" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20180516 15:18:55.993" starttime="20180516 15:18:55.689"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${out}</arg>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:18:55.994" level="INFO">/sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-containers","description":"Wire 2 VNF containers to the vpp switch","type":2,"elements":[{"container":"node_1","port_label":"node1_veth","etcd_vpp_switch_key":"agent_vpp_1","ipv4_addr":"10.0.0.10","type":3},{"container":"node_2","port_label":"node2_veth","etcd_vpp_switch_key":"agent_vpp_1","ipv4_addr":"10.0.0.11","type":3}]}
/sfc-controller/v1/SP
{"mtu":1500,"starting_vlan_id":5000,"default_static_route_weight":5,"dynamic_bridge_parms":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true},"static_bridge_parms":{"forward":true}}
/sfc-controller/v1/id/HE/agent_vpp_1
{"name":"agent_vpp_1"}
/sfc-controller/v1/id/SFC/two-sample-vnf-containers/node_1_node1_veth
{"sfc_name":"two-sample-vnf-containers","container":"node_1","port":"node1_veth","mac_addr_id":1,"veth_id":1}
/sfc-controller/v1/id/SFC/two-sample-vnf-containers/node_2_node2_veth
{"sfc_name":"two-sample-vnf-containers","container":"node_2","port":"node2_veth","mac_addr_id":2,"veth_id":2}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VNF_node_1_node1_veth
{"name":"IF_VETH_VNF_node_1_node1_veth","enabled":true,"phys_address":"02:00:00:00:00:01","mtu":1500,"host_if_name":"node1_veth","ip_addresses":["10.0.0.10/24"],"namespace":{"type":1,"microservice":"node_1"},"veth":{"peer_if_name":"IF_VETH_VSWITCH_node_1_node1_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VNF_node_2_node2_veth
{"name":"IF_VETH_VNF_node_2_node2_veth","enabled":true,"phys_address":"02:00:00:00:00:02","mtu":1500,"host_if_name":"node2_veth","ip_addresses":["10.0.0.11/24"],"namespace":{"type":1,"microservice":"node_2"},"veth":{"peer_if_name":"IF_VETH_VSWITCH_node_2_node2_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VSWITCH_node_1_node1_veth
{"name":"IF_VETH_VSWITCH_node_1_node1_veth","enabled":true,"mtu":1500,"host_if_name":"node_1_noeth_1","namespace":{"type":1,"microservice":"agent_vpp_1"},"veth":{"peer_if_name":"IF_VETH_VNF_node_1_node1_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VSWITCH_node_2_node2_veth
{"name":"IF_VETH_VSWITCH_node_2_node2_veth","enabled":true,"mtu":1500,"host_if_name":"node_2_noeth_2","namespace":{"type":1,"microservice":"agent_vpp_1"},"veth":{"peer_if_name":"IF_VETH_VNF_node_2_node2_veth"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/BD_INTERNAL_EW_L2FIB_agent_vpp_1
{"name":"BD_INTERNAL_EW_L2FIB_agent_vpp_1","forward":true}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/BD_INTERNAL_EW_agent_vpp_1
{"name":"BD_INTERNAL_EW_agent_vpp_1","flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true,"interfaces":[{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth"},{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth"}]}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth
{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","type":4,"enabled":true,"mtu":1500,"afpacket":{"host_if_name":"node_1_noeth_1"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth
{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","type":4,"enabled":true,"mtu":1500,"afpacket":{"host_if_name":"node_2_noeth_2"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_LOOPBACK_H_agent_vpp_1
{"name":"IF_LOOPBACK_H_agent_vpp_1","enabled":true,"phys_address":"02:00:00:AA:BB:00","mtu":1500,"ip_addresses":["6.0.0.100"]}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/loop0
{
  "name": "loop0",
  "type": 0,
  "enabled": true,
  "phys_address": "8a:f1:be:90:00:00",
  "mtu": 1500,
  "vrf": 0,
  "ip_addresses": [
    "20.1.1.1/24"
  ]
}


/vnf-agent/agent_vpp_1/vpp/config/v1/interface/loop1
{
  "name": "loop1",
  "type": 0,
  "enabled": true,
  "phys_address": "8a:f1:be:90:20:00",
  "mtu": 1500,
  "vrf": 0,
  "ip_addresses": [
    "30.1.1.1/24"
  ]
}


/vnf-agent/agent_vpp_1/vpp/status/v1/bd/BD_INTERNAL_EW_L2FIB_agent_vpp_1
{"index":2,"internal_name":"BD_INTERNAL_EW_L2FIB_agent_vpp_1","bvi_interface":"not_set","last_change":1526476631,"l2_params":{"forward":true}}
/vnf-agent/agent_vpp_1/vpp/status/v1/bd/BD_INTERNAL_EW_agent_vpp_1
{"index":1,"internal_name":"BD_INTERNAL_EW_agent_vpp_1","bvi_interface":"not_set","interface_count":2,"last_change":1526476631,"l2_params":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true},"interfaces":[{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","sw_if_index":2},{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","sw_if_index":3}]}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth
{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","internal_name":"host-node_1_noeth_1","if_index":2,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:3e:fd:61:28","mtu":1500,"statistics":{"in_packets":18,"in_bytes":1412}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth
{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","internal_name":"host-node_2_noeth_2","if_index":3,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:42:98:22:08","mtu":1500,"statistics":{"in_packets":20,"in_bytes":1592}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_LOOPBACK_H_agent_vpp_1
{"name":"IF_LOOPBACK_H_agent_vpp_1","internal_name":"loop0","if_index":1,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:00:00:aa:bb:00","mtu":1500,"statistics":{}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/local0
{"name":"local0","internal_name":"local0","admin_status":2,"oper_status":2,"statistics":{}}
/vnf-agent/node_1/check/status/v1/agent
{"build_version":"v1.1-5-g55e9977","build_date":"2018-03-06T11:05+00:00","state":1,"start_time":1526476614,"last_change":1526476619,"last_update":1526476735,"commit_hash":"55e99770087087fa8e41a980a8b6257c80c93f4c"}
/vnf-agent/node_1/check/status/v1/plugin/etcdv3
{"state":1,"last_change":1526476619,"last_update":1526476735}
/vnf-agent/node_1/check/status/v1/plugin/kafka
{"state":1,"last_change":1526476619,"last_update":1526476735}
/vnf-agent/node_2/check/status/v1/agent
{"build_version":"v1.1-5-g55e9977","build_date":"2018-03-06T11:05+00:00","state":1,"start_time":1526476623,"last_change":1526476628,"last_update":1526476733,"commit_hash":"55e99770087087fa8e41a980a8b6257c80c93f4c"}
/vnf-agent/node_2/check/status/v1/plugin/etcdv3
{"state":1,"last_change":1526476628,"last_update":1526476733}
/vnf-agent/node_2/check/status/v1/plugin/kafka
{"state":1,"last_change":1526476628,"last_update":1526476733}</msg>
<msg timestamp="20180516 15:18:55.995" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:18:55.995" starttime="20180516 15:18:55.994"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:18:55.996" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:18:55.996" starttime="20180516 15:18:55.996"></status>
</kw>
<msg timestamp="20180516 15:18:55.996" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:18:55.996" starttime="20180516 15:18:55.995"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} on ${machine}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:55.997" starttime="20180516 15:18:55.996"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${log}'=='true'</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:55.997" starttime="20180516 15:18:55.997"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:55.998" starttime="20180516 15:18:55.997"></status>
</kw>
<msg timestamp="20180516 15:18:55.998" level="INFO">${out} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<status status="PASS" endtime="20180516 15:18:55.998" starttime="20180516 15:18:55.687"></status>
</kw>
<msg timestamp="20180516 15:18:55.998" level="INFO">${dump} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<status status="PASS" endtime="20180516 15:18:55.998" starttime="20180516 15:18:55.681"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/etcd_dump-${tag}.txt</arg>
<arg>${dump}</arg>
</arguments>
<msg timestamp="20180516 15:18:55.999" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/etcd_dump-013_Check Bridge Domain Is Created_test_teardown.txt"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/etcd_dump-013_Check Bridge Domain Is Created_test_teardown.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:18:55.999" starttime="20180516 15:18:55.998"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${dump}</arg>
<arg>/error/</arg>
</arguments>
<assign>
<var>${errors}</var>
</assign>
<msg timestamp="20180516 15:18:55.999" level="INFO">0 out of 82 lines matched</msg>
<msg timestamp="20180516 15:18:55.999" level="INFO">${errors} = </msg>
<status status="PASS" endtime="20180516 15:18:55.999" starttime="20180516 15:18:55.999"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${errors}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${errors}</arg>
</arguments>
<msg timestamp="20180516 15:18:56.000" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:18:56.000" starttime="20180516 15:18:56.000"></status>
</kw>
<msg timestamp="20180516 15:18:56.000" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:18:56.001" starttime="20180516 15:18:56.000"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>Errors detected in keys: ${errors}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:56.006" starttime="20180516 15:18:56.001"></status>
</kw>
<status status="PASS" endtime="20180516 15:18:56.006" starttime="20180516 15:18:55.680"></status>
</kw>
<status status="PASS" endtime="20180516 15:18:56.006" starttime="20180516 15:18:55.676"></status>
</kw>
<status status="PASS" endtime="20180516 15:18:56.006" starttime="20180516 15:18:55.676"></status>
</kw>
<status status="PASS" endtime="20180516 15:18:56.008" critical="yes" starttime="20180516 15:18:51.492"></status>
</test>
<test id="s1-t7" name="Check loop0 Is Created">
<kw type="setup" name="TestSetup">
<kw name="Make Datastore Snapshots" library="setup-teardown">
<arguments>
<arg>${TEST_NAME}_test_setup</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tag}</arg>
</arguments>
<msg timestamp="20180516 15:18:56.010" level="INFO">Check loop0 Is Created_test_setup</msg>
<status status="PASS" endtime="20180516 15:18:56.010" starttime="20180516 15:18:56.010"></status>
</kw>
<kw name="Create Next Snapshot Prefix" library="setup-teardown">
<assign>
<var>${prefix}</var>
</assign>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>str(${snapshot_num}).zfill(3)</arg>
</arguments>
<assign>
<var>${prefix}</var>
</assign>
<msg timestamp="20180516 15:18:56.011" level="INFO">${prefix} = 014</msg>
<status status="PASS" endtime="20180516 15:18:56.011" starttime="20180516 15:18:56.011"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${snapshot_num}+1</arg>
</arguments>
<assign>
<var>${snapshot_num}</var>
</assign>
<msg timestamp="20180516 15:18:56.012" level="INFO">${snapshot_num} = 15</msg>
<status status="PASS" endtime="20180516 15:18:56.012" starttime="20180516 15:18:56.011"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${snapshot_num}</arg>
</arguments>
<msg timestamp="20180516 15:18:56.017" level="INFO">${snapshot_num} = 15</msg>
<status status="PASS" endtime="20180516 15:18:56.017" starttime="20180516 15:18:56.016"></status>
</kw>
<msg timestamp="20180516 15:18:56.017" level="INFO">${prefix} = 014</msg>
<status status="PASS" endtime="20180516 15:18:56.017" starttime="20180516 15:18:56.010"></status>
</kw>
<kw name="Take ETCD Snapshots" library="setup-teardown">
<arguments>
<arg>${prefix}_${tag}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tag}</arg>
</arguments>
<msg timestamp="20180516 15:18:56.024" level="INFO">014_Check loop0 Is Created_test_setup</msg>
<status status="PASS" endtime="20180516 15:18:56.024" starttime="20180516 15:18:56.019"></status>
</kw>
<kw name="Get ETCD Dump" library="setup-teardown">
<assign>
<var>${dump}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DOCKER_COMMAND} exec etcd etcdctl get --prefix="true" ""</arg>
</arguments>
<assign>
<var>${command}</var>
</assign>
<msg timestamp="20180516 15:18:56.025" level="INFO">${command} = sudo docker exec etcd etcdctl get --prefix="true" ""</msg>
<status status="PASS" endtime="20180516 15:18:56.025" starttime="20180516 15:18:56.025"></status>
</kw>
<kw name="Execute On Machine" library="ssh">
<doc>*Execute On Machine ${machine} sudo docker exec etcd etcdctl get --prefix="true" ""*</doc>
<arguments>
<arg>docker</arg>
<arg>${command}</arg>
<arg>log=false</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${log}</arg>
</arguments>
<msg timestamp="20180516 15:18:56.042" level="INFO">docker</msg>
<msg timestamp="20180516 15:18:56.042" level="INFO">sudo docker exec etcd etcdctl get --prefix="true" ""</msg>
<msg timestamp="20180516 15:18:56.042" level="INFO">false</msg>
<status status="PASS" endtime="20180516 15:18:56.042" starttime="20180516 15:18:56.041"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:56.046" starttime="20180516 15:18:56.045"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:18:56.047" level="INFO">${currdate} = 2018-05-16 15:18:56.046</msg>
<status status="PASS" endtime="20180516 15:18:56.047" starttime="20180516 15:18:56.046"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20180516 15:18:56.047" level="INFO">Executing command 'sudo docker exec etcd etcdctl get --prefix="true" ""'.</msg>
<msg timestamp="20180516 15:18:56.412" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:18:56.412" level="INFO">${out} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<msg timestamp="20180516 15:18:56.412" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20180516 15:18:56.412" starttime="20180516 15:18:56.047"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${out}</arg>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:18:56.413" level="INFO">/sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-containers","description":"Wire 2 VNF containers to the vpp switch","type":2,"elements":[{"container":"node_1","port_label":"node1_veth","etcd_vpp_switch_key":"agent_vpp_1","ipv4_addr":"10.0.0.10","type":3},{"container":"node_2","port_label":"node2_veth","etcd_vpp_switch_key":"agent_vpp_1","ipv4_addr":"10.0.0.11","type":3}]}
/sfc-controller/v1/SP
{"mtu":1500,"starting_vlan_id":5000,"default_static_route_weight":5,"dynamic_bridge_parms":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true},"static_bridge_parms":{"forward":true}}
/sfc-controller/v1/id/HE/agent_vpp_1
{"name":"agent_vpp_1"}
/sfc-controller/v1/id/SFC/two-sample-vnf-containers/node_1_node1_veth
{"sfc_name":"two-sample-vnf-containers","container":"node_1","port":"node1_veth","mac_addr_id":1,"veth_id":1}
/sfc-controller/v1/id/SFC/two-sample-vnf-containers/node_2_node2_veth
{"sfc_name":"two-sample-vnf-containers","container":"node_2","port":"node2_veth","mac_addr_id":2,"veth_id":2}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VNF_node_1_node1_veth
{"name":"IF_VETH_VNF_node_1_node1_veth","enabled":true,"phys_address":"02:00:00:00:00:01","mtu":1500,"host_if_name":"node1_veth","ip_addresses":["10.0.0.10/24"],"namespace":{"type":1,"microservice":"node_1"},"veth":{"peer_if_name":"IF_VETH_VSWITCH_node_1_node1_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VNF_node_2_node2_veth
{"name":"IF_VETH_VNF_node_2_node2_veth","enabled":true,"phys_address":"02:00:00:00:00:02","mtu":1500,"host_if_name":"node2_veth","ip_addresses":["10.0.0.11/24"],"namespace":{"type":1,"microservice":"node_2"},"veth":{"peer_if_name":"IF_VETH_VSWITCH_node_2_node2_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VSWITCH_node_1_node1_veth
{"name":"IF_VETH_VSWITCH_node_1_node1_veth","enabled":true,"mtu":1500,"host_if_name":"node_1_noeth_1","namespace":{"type":1,"microservice":"agent_vpp_1"},"veth":{"peer_if_name":"IF_VETH_VNF_node_1_node1_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VSWITCH_node_2_node2_veth
{"name":"IF_VETH_VSWITCH_node_2_node2_veth","enabled":true,"mtu":1500,"host_if_name":"node_2_noeth_2","namespace":{"type":1,"microservice":"agent_vpp_1"},"veth":{"peer_if_name":"IF_VETH_VNF_node_2_node2_veth"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/BD_INTERNAL_EW_L2FIB_agent_vpp_1
{"name":"BD_INTERNAL_EW_L2FIB_agent_vpp_1","forward":true}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/BD_INTERNAL_EW_agent_vpp_1
{"name":"BD_INTERNAL_EW_agent_vpp_1","flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true,"interfaces":[{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth"},{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth"}]}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth
{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","type":4,"enabled":true,"mtu":1500,"afpacket":{"host_if_name":"node_1_noeth_1"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth
{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","type":4,"enabled":true,"mtu":1500,"afpacket":{"host_if_name":"node_2_noeth_2"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_LOOPBACK_H_agent_vpp_1
{"name":"IF_LOOPBACK_H_agent_vpp_1","enabled":true,"phys_address":"02:00:00:AA:BB:00","mtu":1500,"ip_addresses":["6.0.0.100"]}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/loop0
{
  "name": "loop0",
  "type": 0,
  "enabled": true,
  "phys_address": "8a:f1:be:90:00:00",
  "mtu": 1500,
  "vrf": 0,
  "ip_addresses": [
    "20.1.1.1/24"
  ]
}


/vnf-agent/agent_vpp_1/vpp/config/v1/interface/loop1
{
  "name": "loop1",
  "type": 0,
  "enabled": true,
  "phys_address": "8a:f1:be:90:20:00",
  "mtu": 1500,
  "vrf": 0,
  "ip_addresses": [
    "30.1.1.1/24"
  ]
}


/vnf-agent/agent_vpp_1/vpp/status/v1/bd/BD_INTERNAL_EW_L2FIB_agent_vpp_1
{"index":2,"internal_name":"BD_INTERNAL_EW_L2FIB_agent_vpp_1","bvi_interface":"not_set","last_change":1526476631,"l2_params":{"forward":true}}
/vnf-agent/agent_vpp_1/vpp/status/v1/bd/BD_INTERNAL_EW_agent_vpp_1
{"index":1,"internal_name":"BD_INTERNAL_EW_agent_vpp_1","bvi_interface":"not_set","interface_count":2,"last_change":1526476631,"l2_params":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true},"interfaces":[{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","sw_if_index":2},{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","sw_if_index":3}]}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth
{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","internal_name":"host-node_1_noeth_1","if_index":2,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:3e:fd:61:28","mtu":1500,"statistics":{"in_packets":18,"in_bytes":1412}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth
{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","internal_name":"host-node_2_noeth_2","if_index":3,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:42:98:22:08","mtu":1500,"statistics":{"in_packets":20,"in_bytes":1592}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_LOOPBACK_H_agent_vpp_1
{"name":"IF_LOOPBACK_H_agent_vpp_1","internal_name":"loop0","if_index":1,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:00:00:aa:bb:00","mtu":1500,"statistics":{}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/local0
{"name":"local0","internal_name":"local0","admin_status":2,"oper_status":2,"statistics":{}}
/vnf-agent/node_1/check/status/v1/agent
{"build_version":"v1.1-5-g55e9977","build_date":"2018-03-06T11:05+00:00","state":1,"start_time":1526476614,"last_change":1526476619,"last_update":1526476735,"commit_hash":"55e99770087087fa8e41a980a8b6257c80c93f4c"}
/vnf-agent/node_1/check/status/v1/plugin/etcdv3
{"state":1,"last_change":1526476619,"last_update":1526476735}
/vnf-agent/node_1/check/status/v1/plugin/kafka
{"state":1,"last_change":1526476619,"last_update":1526476735}
/vnf-agent/node_2/check/status/v1/agent
{"build_version":"v1.1-5-g55e9977","build_date":"2018-03-06T11:05+00:00","state":1,"start_time":1526476623,"last_change":1526476628,"last_update":1526476733,"commit_hash":"55e99770087087fa8e41a980a8b6257c80c93f4c"}
/vnf-agent/node_2/check/status/v1/plugin/etcdv3
{"state":1,"last_change":1526476628,"last_update":1526476733}
/vnf-agent/node_2/check/status/v1/plugin/kafka
{"state":1,"last_change":1526476628,"last_update":1526476733}</msg>
<msg timestamp="20180516 15:18:56.413" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:18:56.413" starttime="20180516 15:18:56.412"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:18:56.414" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:18:56.414" starttime="20180516 15:18:56.414"></status>
</kw>
<msg timestamp="20180516 15:18:56.414" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:18:56.414" starttime="20180516 15:18:56.413"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} on ${machine}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:56.415" starttime="20180516 15:18:56.414"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${log}'=='true'</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:56.415" starttime="20180516 15:18:56.415"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:56.416" starttime="20180516 15:18:56.415"></status>
</kw>
<msg timestamp="20180516 15:18:56.416" level="INFO">${out} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<status status="PASS" endtime="20180516 15:18:56.416" starttime="20180516 15:18:56.041"></status>
</kw>
<msg timestamp="20180516 15:18:56.416" level="INFO">${dump} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<status status="PASS" endtime="20180516 15:18:56.416" starttime="20180516 15:18:56.024"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/etcd_dump-${tag}.txt</arg>
<arg>${dump}</arg>
</arguments>
<msg timestamp="20180516 15:18:56.417" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/etcd_dump-014_Check loop0 Is Created_test_setup.txt"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/etcd_dump-014_Check loop0 Is Created_test_setup.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:18:56.417" starttime="20180516 15:18:56.416"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${dump}</arg>
<arg>/error/</arg>
</arguments>
<assign>
<var>${errors}</var>
</assign>
<msg timestamp="20180516 15:18:56.417" level="INFO">0 out of 82 lines matched</msg>
<msg timestamp="20180516 15:18:56.418" level="INFO">${errors} = </msg>
<status status="PASS" endtime="20180516 15:18:56.418" starttime="20180516 15:18:56.417"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${errors}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${errors}</arg>
</arguments>
<msg timestamp="20180516 15:18:56.418" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:18:56.418" starttime="20180516 15:18:56.418"></status>
</kw>
<msg timestamp="20180516 15:18:56.419" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:18:56.419" starttime="20180516 15:18:56.418"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>Errors detected in keys: ${errors}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:56.419" starttime="20180516 15:18:56.419"></status>
</kw>
<status status="PASS" endtime="20180516 15:18:56.419" starttime="20180516 15:18:56.018"></status>
</kw>
<status status="PASS" endtime="20180516 15:18:56.419" starttime="20180516 15:18:56.009"></status>
</kw>
<status status="PASS" endtime="20180516 15:18:56.419" starttime="20180516 15:18:56.009"></status>
</kw>
<kw name="vpp_term: Interface Is Created" library="vpp_term">
<arguments>
<arg>node=agent_vpp_1</arg>
<arg>mac=8a:f1:be:90:00:00</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${mac}</arg>
</arguments>
<msg timestamp="20180516 15:18:56.420" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:18:56.420" level="INFO">8a:f1:be:90:00:00</msg>
<status status="PASS" endtime="20180516 15:18:56.420" starttime="20180516 15:18:56.420"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${interface_timeout}</arg>
<arg>3s</arg>
<arg>vpp_term: Check Interface Presence</arg>
<arg>${node}</arg>
<arg>${mac}</arg>
</arguments>
<kw name="vpp_term: Check Interface Presence" library="vpp_term">
<doc>Checking if specified interface with mac exists in VPP</doc>
<arguments>
<arg>${node}</arg>
<arg>${mac}</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${mac}</arg>
<arg>${status}</arg>
</arguments>
<msg timestamp="20180516 15:18:56.422" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:18:56.422" level="INFO">8a:f1:be:90:00:00</msg>
<msg timestamp="20180516 15:18:56.422" level="INFO">True</msg>
<status status="PASS" endtime="20180516 15:18:56.422" starttime="20180516 15:18:56.422"></status>
</kw>
<kw name="vpp_term: Show Hardware" library="vpp_term">
<doc>Show interfaces hardware through vpp terminal</doc>
<arguments>
<arg>${node}</arg>
</arguments>
<assign>
<var>${ints}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${interface}</arg>
</arguments>
<msg timestamp="20180516 15:18:56.423" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:18:56.423" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:18:56.423" starttime="20180516 15:18:56.423"></status>
</kw>
<kw name="vpp_term: Issue Command" library="vpp_term">
<arguments>
<arg>${node}</arg>
<arg>sh h ${interface}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${command}</arg>
<arg>${delay}</arg>
<arg>${node}_term</arg>
<arg>${${node}_VPP_TERM_PROMPT}</arg>
</arguments>
<msg timestamp="20180516 15:18:56.424" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:18:56.425" level="INFO">sh h </msg>
<msg timestamp="20180516 15:18:56.425" level="INFO">3s</msg>
<msg timestamp="20180516 15:18:56.425" level="INFO">agent_vpp_1_term</msg>
<msg timestamp="20180516 15:18:56.425" level="INFO">vpp#</msg>
<status status="PASS" endtime="20180516 15:18:56.425" starttime="20180516 15:18:56.424"></status>
</kw>
<kw name="Write To Machine Until String" library="ssh">
<doc>*Write Machine ${machine} sh h *</doc>
<arguments>
<arg>${node}_term</arg>
<arg>${command}</arg>
<arg>${${node}_VPP_TERM_PROMPT}</arg>
<arg>delay=${delay}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${string}</arg>
<arg>${delay}</arg>
</arguments>
<msg timestamp="20180516 15:18:56.432" level="INFO">agent_vpp_1_term</msg>
<msg timestamp="20180516 15:18:56.432" level="INFO">sh h </msg>
<msg timestamp="20180516 15:18:56.432" level="INFO">vpp#</msg>
<msg timestamp="20180516 15:18:56.432" level="INFO">3s</msg>
<status status="PASS" endtime="20180516 15:18:56.432" starttime="20180516 15:18:56.432"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:56.433" starttime="20180516 15:18:56.433"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:18:56.433" level="INFO">${currdate} = 2018-05-16 15:18:56.433</msg>
<status status="PASS" endtime="20180516 15:18:56.433" starttime="20180516 15:18:56.433"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20180516 15:18:56.436" level="INFO">sh h</msg>
<status status="PASS" endtime="20180516 15:18:56.437" starttime="20180516 15:18:56.434"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>${string}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20180516 15:18:56.447" level="INFO">Name                Idx   Link  Hardware
host-node_1_noeth_1                2     up   host-node_1_noeth_1
  Ethernet address 02:fe:3e:fd:61:28
  Linux PACKET socket interface
host-node_2_noeth_2                3     up   host-node_2_noeth_2
  Ethernet address 02:fe:42:98:22:08
  Linux PACKET socket interface
local0                             0    down  local0
  local
loop0                              1     up   loop0
  Ethernet address 02:00:00:aa:bb:00
loop1                              4     up   loop1
  Ethernet address 8a:f1:be:90:00:00
loop2                              5     up   loop2
  Ethernet address 8a:f1:be:90:20:00
vpp#</msg>
<msg timestamp="20180516 15:18:56.452" level="INFO">${out} =               Name                Idx   Link  Hardware
host-node_1_noeth_1                2     up   host-node_1_noeth_1
  Ethernet address 02:fe:3e:fd:61:28
  Linux PACKET socket interface
host-n...</msg>
<status status="PASS" endtime="20180516 15:18:56.452" starttime="20180516 15:18:56.439"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:18:56.453" level="INFO">              Name                Idx   Link  Hardware
host-node_1_noeth_1                2     up   host-node_1_noeth_1
  Ethernet address 02:fe:3e:fd:61:28
  Linux PACKET socket interface
host-node_2_noeth_2                3     up   host-node_2_noeth_2
  Ethernet address 02:fe:42:98:22:08
  Linux PACKET socket interface
local0                             0    down  local0
  local
loop0                              1     up   loop0
  Ethernet address 02:00:00:aa:bb:00
loop1                              4     up   loop1
  Ethernet address 8a:f1:be:90:00:00
loop2                              5     up   loop2
  Ethernet address 8a:f1:be:90:20:00
vpp#</msg>
<status status="PASS" endtime="20180516 15:18:56.453" starttime="20180516 15:18:56.453"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>delay=${delay}</arg>
</arguments>
<assign>
<var>${out2}</var>
</assign>
<msg timestamp="20180516 15:18:59.456" level="INFO">${out2} =  </msg>
<status status="PASS" endtime="20180516 15:18:59.456" starttime="20180516 15:18:56.453"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out2}</arg>
</arguments>
<msg timestamp="20180516 15:18:59.457" level="INFO"> </msg>
<status status="PASS" endtime="20180516 15:18:59.457" starttime="20180516 15:18:59.456"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${out2}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:18:59.458" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_term.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_term.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:18:59.458" starttime="20180516 15:18:59.457"></status>
</kw>
<msg timestamp="20180516 15:18:59.458" level="INFO">${out} =               Name                Idx   Link  Hardware
host-node_1_noeth_1                2     up   host-node_1_noeth_1
  Ethernet address 02:fe:3e:fd:61:28
  Linux PACKET socket interface
host-n...</msg>
<status status="PASS" endtime="20180516 15:18:59.458" starttime="20180516 15:18:56.431"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:18:59.459" level="INFO">              Name                Idx   Link  Hardware
host-node_1_noeth_1                2     up   host-node_1_noeth_1
  Ethernet address 02:fe:3e:fd:61:28
  Linux PACKET socket interface
host-node_2_noeth_2                3     up   host-node_2_noeth_2
  Ethernet address 02:fe:42:98:22:08
  Linux PACKET socket interface
local0                             0    down  local0
  local
loop0                              1     up   loop0
  Ethernet address 02:00:00:aa:bb:00
loop1                              4     up   loop1
  Ethernet address 8a:f1:be:90:00:00
loop2                              5     up   loop2
  Ethernet address 8a:f1:be:90:20:00
vpp# </msg>
<status status="PASS" endtime="20180516 15:18:59.459" starttime="20180516 15:18:59.458"></status>
</kw>
<msg timestamp="20180516 15:18:59.459" level="INFO">${out} =               Name                Idx   Link  Hardware
host-node_1_noeth_1                2     up   host-node_1_noeth_1
  Ethernet address 02:fe:3e:fd:61:28
  Linux PACKET socket interface
host-n...</msg>
<status status="PASS" endtime="20180516 15:18:59.459" starttime="20180516 15:18:56.423"></status>
</kw>
<msg timestamp="20180516 15:18:59.459" level="INFO">${ints} =               Name                Idx   Link  Hardware
host-node_1_noeth_1                2     up   host-node_1_noeth_1
  Ethernet address 02:fe:3e:fd:61:28
  Linux PACKET socket interface
host-n...</msg>
<status status="PASS" endtime="20180516 15:18:59.459" starttime="20180516 15:18:56.422"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${ints}</arg>
<arg>${mac}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${ints}</arg>
<arg>${mac}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:59.460" starttime="20180516 15:18:59.460"></status>
</kw>
<msg timestamp="20180516 15:18:59.460" level="INFO">${result} = True</msg>
<status status="PASS" endtime="20180516 15:18:59.460" starttime="20180516 15:18:59.459"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${result}</arg>
<arg>${status}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:59.461" starttime="20180516 15:18:59.460"></status>
</kw>
<status status="PASS" endtime="20180516 15:18:59.461" starttime="20180516 15:18:56.421"></status>
</kw>
<status status="PASS" endtime="20180516 15:18:59.461" starttime="20180516 15:18:56.421"></status>
</kw>
<status status="PASS" endtime="20180516 15:18:59.461" starttime="20180516 15:18:56.420"></status>
</kw>
<kw name="vat_term: Check Loopback Interface State" library="vat_term">
<arguments>
<arg>agent_vpp_1</arg>
<arg>loop0</arg>
<arg>enabled=1</arg>
<arg>mac=8a:f1:be:90:00:00</arg>
<arg>mtu=1500</arg>
<arg>ipv4=20.1.1.1/24</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${name}</arg>
<arg>${desired_state}</arg>
</arguments>
<msg timestamp="20180516 15:18:59.462" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:18:59.462" level="INFO">loop0</msg>
<msg timestamp="20180516 15:18:59.462" level="INFO">[u'enabled=1', u'mac=8a:f1:be:90:00:00', u'mtu=1500', u'ipv4=20.1.1.1/24']</msg>
<status status="PASS" endtime="20180516 15:18:59.462" starttime="20180516 15:18:59.462"></status>
</kw>
<kw name="vpp_ctl: Get Interface Internal Name" library="vpp_ctl">
<arguments>
<arg>${node}</arg>
<arg>${name}</arg>
</arguments>
<assign>
<var>${internal_name}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${interface}</arg>
</arguments>
<msg timestamp="20180516 15:18:59.464" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:18:59.465" level="INFO">loop0</msg>
<status status="PASS" endtime="20180516 15:18:59.465" starttime="20180516 15:18:59.464"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${name}</var>
</assign>
<msg timestamp="20180516 15:18:59.465" level="INFO">${name} = </msg>
<status status="PASS" endtime="20180516 15:18:59.465" starttime="20180516 15:18:59.465"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<assign>
<var>${empty_dict}</var>
</assign>
<msg timestamp="20180516 15:18:59.466" level="INFO">${empty_dict} = {}</msg>
<status status="PASS" endtime="20180516 15:18:59.466" starttime="20180516 15:18:59.465"></status>
</kw>
<kw name="vpp_ctl: Get VPP Interface State As Json" library="vpp_ctl">
<arguments>
<arg>${node}</arg>
<arg>${interface}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${interface}</arg>
</arguments>
<msg timestamp="20180516 15:18:59.467" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:18:59.467" level="INFO">loop0</msg>
<status status="PASS" endtime="20180516 15:18:59.467" starttime="20180516 15:18:59.466"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/vnf-agent/${node}/vpp/status/v1/interface/${interface}</arg>
</arguments>
<assign>
<var>${key}</var>
</assign>
<msg timestamp="20180516 15:18:59.467" level="INFO">${key} = /vnf-agent/agent_vpp_1/vpp/status/v1/interface/loop0</msg>
<status status="PASS" endtime="20180516 15:18:59.467" starttime="20180516 15:18:59.467"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${key}</arg>
</arguments>
<msg timestamp="20180516 15:18:59.468" level="INFO">/vnf-agent/agent_vpp_1/vpp/status/v1/interface/loop0</msg>
<status status="PASS" endtime="20180516 15:18:59.468" starttime="20180516 15:18:59.468"></status>
</kw>
<kw name="vpp_ctl: Read Key" library="vpp_ctl">
<arguments>
<arg>${key}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${key}</arg>
<arg>${container}</arg>
</arguments>
<msg timestamp="20180516 15:18:59.469" level="INFO">/vnf-agent/agent_vpp_1/vpp/status/v1/interface/loop0</msg>
<msg timestamp="20180516 15:18:59.469" level="INFO">vpp_agent_ctl</msg>
<status status="PASS" endtime="20180516 15:18:59.469" starttime="20180516 15:18:59.469"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>vpp-agent-ctl ${AGENT_VPP_ETCD_CONF_PATH} -get ${key}</arg>
</arguments>
<assign>
<var>${command}</var>
</assign>
<msg timestamp="20180516 15:18:59.470" level="INFO">${command} = vpp-agent-ctl /opt/vpp-agent/dev/etcd.conf -get /vnf-agent/agent_vpp_1/vpp/status/v1/interface/loop0</msg>
<status status="PASS" endtime="20180516 15:18:59.470" starttime="20180516 15:18:59.469"></status>
</kw>
<kw name="Execute In Container" library="docker">
<arguments>
<arg>${container}</arg>
<arg>${command}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${container}</arg>
<arg>${command}</arg>
</arguments>
<msg timestamp="20180516 15:18:59.470" level="INFO">vpp_agent_ctl</msg>
<msg timestamp="20180516 15:18:59.471" level="INFO">vpp-agent-ctl /opt/vpp-agent/dev/etcd.conf -get /vnf-agent/agent_vpp_1/vpp/status/v1/interface/loop0</msg>
<status status="PASS" endtime="20180516 15:18:59.471" starttime="20180516 15:18:59.470"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>docker</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:59.472" starttime="20180516 15:18:59.471"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:18:59.472" level="INFO">${currdate} = 2018-05-16 15:18:59.472</msg>
<status status="PASS" endtime="20180516 15:18:59.472" starttime="20180516 15:18:59.472"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DOCKER_COMMAND} exec ${container} ${command}</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20180516 15:18:59.473" level="INFO">Executing command 'sudo docker exec vpp_agent_ctl vpp-agent-ctl /opt/vpp-agent/dev/etcd.conf -get /vnf-agent/agent_vpp_1/vpp/status/v1/interface/loop0'.</msg>
<msg timestamp="20180516 15:18:59.816" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:18:59.816" level="INFO">${out} = </msg>
<msg timestamp="20180516 15:18:59.816" level="INFO">${stderr} = time="2018-05-16 13:18:59.71101" level=info msg="Connecting to etcd took 6.8471ms" durationInNs=6847100 loc="etcdv3/bytes_broker_impl.go(84)" logger=defaultLogger</msg>
<msg timestamp="20180516 15:18:59.816" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20180516 15:18:59.816" starttime="20180516 15:18:59.473"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:18:59.817" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:18:59.817" starttime="20180516 15:18:59.816"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:18:59.817" level="INFO">time="2018-05-16 13:18:59.71101" level=info msg="Connecting to etcd took 6.8471ms" durationInNs=6847100 loc="etcdv3/bytes_broker_impl.go(84)" logger=defaultLogger</msg>
<status status="PASS" endtime="20180516 15:18:59.817" starttime="20180516 15:18:59.817"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${rc}</arg>
</arguments>
<msg timestamp="20180516 15:18:59.818" level="INFO">0</msg>
<status status="PASS" endtime="20180516 15:18:59.818" starttime="20180516 15:18:59.817"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:18:59.818" level="INFO">Length is 162</msg>
<msg timestamp="20180516 15:18:59.819" level="FAIL">'time="2018-05-16 13:18:59.71101" level=info msg="Connecting to etcd took 6.8471ms" durationInNs=6847100 loc="etcdv3/bytes_broker_impl.go(84)" logger=defaultLogger' should be empty.</msg>
<status status="FAIL" endtime="20180516 15:18:59.819" starttime="20180516 15:18:59.818"></status>
</kw>
<msg timestamp="20180516 15:18:59.819" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20180516 15:18:59.819" starttime="20180516 15:18:59.818"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} in container ${container}</arg>
<arg>level=WARN</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>One or more error occured during execution of a command ${command} in container ${container}</arg>
<arg>level=WARN</arg>
</arguments>
<msg timestamp="20180516 15:18:59.820" level="WARN">One or more error occured during execution of a command vpp-agent-ctl /opt/vpp-agent/dev/etcd.conf -get /vnf-agent/agent_vpp_1/vpp/status/v1/interface/loop0 in container vpp_agent_ctl</msg>
<status status="PASS" endtime="20180516 15:18:59.820" starttime="20180516 15:18:59.819"></status>
</kw>
<status status="PASS" endtime="20180516 15:18:59.820" starttime="20180516 15:18:59.819"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${container}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}***</arg>
</arguments>
<msg timestamp="20180516 15:18:59.821" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_vpp_agent_ctl.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_vpp_agent_ctl.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:18:59.821" starttime="20180516 15:18:59.821"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${container}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${container}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:18:59.823" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_vpp_agent_ctl.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_vpp_agent_ctl.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:18:59.823" starttime="20180516 15:18:59.822"></status>
</kw>
<status status="PASS" endtime="20180516 15:18:59.823" starttime="20180516 15:18:59.822"></status>
</kw>
<msg timestamp="20180516 15:18:59.823" level="INFO">${out} = </msg>
<status status="PASS" endtime="20180516 15:18:59.823" starttime="20180516 15:18:59.470"></status>
</kw>
<msg timestamp="20180516 15:18:59.823" level="INFO">${data} = </msg>
<status status="PASS" endtime="20180516 15:18:59.823" starttime="20180516 15:18:59.468"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${data}</arg>
</arguments>
<msg timestamp="20180516 15:18:59.824" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:18:59.824" starttime="20180516 15:18:59.823"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'''${data}'''==""</arg>
<arg>{}</arg>
<arg>${data}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20180516 15:18:59.824" level="INFO">${data} = {}</msg>
<status status="PASS" endtime="20180516 15:18:59.824" starttime="20180516 15:18:59.824"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${data}</arg>
</arguments>
<msg timestamp="20180516 15:18:59.825" level="INFO">{}</msg>
<status status="PASS" endtime="20180516 15:18:59.825" starttime="20180516 15:18:59.824"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>json.loads('''${data}''')</arg>
<arg>json</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180516 15:18:59.825" level="INFO">${output} = {}</msg>
<status status="PASS" endtime="20180516 15:18:59.825" starttime="20180516 15:18:59.825"></status>
</kw>
<msg timestamp="20180516 15:18:59.826" level="INFO">${state} = {}</msg>
<status status="PASS" endtime="20180516 15:18:59.826" starttime="20180516 15:18:59.466"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${state}</arg>
</arguments>
<msg timestamp="20180516 15:18:59.826" level="INFO">{}</msg>
<status status="PASS" endtime="20180516 15:18:59.826" starttime="20180516 15:18:59.826"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${state}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20180516 15:18:59.826" level="INFO">Length is 0</msg>
<msg timestamp="20180516 15:18:59.827" level="INFO">${length} = 0</msg>
<status status="PASS" endtime="20180516 15:18:59.827" starttime="20180516 15:18:59.826"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20180516 15:18:59.827" level="INFO">0</msg>
<status status="PASS" endtime="20180516 15:18:59.827" starttime="20180516 15:18:59.827"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${length} != 0</arg>
<arg>Set Variable</arg>
<arg>${state["internal_name"]}</arg>
</arguments>
<assign>
<var>${name}</var>
</assign>
<msg timestamp="20180516 15:18:59.828" level="INFO">${name} = None</msg>
<status status="PASS" endtime="20180516 15:18:59.828" starttime="20180516 15:18:59.827"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${name}</arg>
</arguments>
<msg timestamp="20180516 15:18:59.828" level="INFO">None</msg>
<status status="PASS" endtime="20180516 15:18:59.828" starttime="20180516 15:18:59.828"></status>
</kw>
<msg timestamp="20180516 15:18:59.828" level="INFO">${internal_name} = None</msg>
<status status="PASS" endtime="20180516 15:18:59.828" starttime="20180516 15:18:59.463"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${internal_name}</arg>
</arguments>
<msg timestamp="20180516 15:18:59.829" level="INFO">None</msg>
<status status="PASS" endtime="20180516 15:18:59.829" starttime="20180516 15:18:59.829"></status>
</kw>
<kw name="vat_term: Get Interface Index" library="vat_term">
<doc>Return interface index with specified name</doc>
<arguments>
<arg>${node}</arg>
<arg>${internal_name}</arg>
</arguments>
<assign>
<var>${internal_index}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${name}</arg>
</arguments>
<msg timestamp="20180516 15:18:59.830" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:18:59.830" level="INFO">None</msg>
<status status="PASS" endtime="20180516 15:18:59.830" starttime="20180516 15:18:59.830"></status>
</kw>
<kw name="vat_term: Interfaces Dump" library="vat_term">
<doc>Executing command sw_interface_dump</doc>
<arguments>
<arg>${node}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
</arguments>
<msg timestamp="20180516 15:18:59.832" level="INFO">agent_vpp_1</msg>
<status status="PASS" endtime="20180516 15:18:59.832" starttime="20180516 15:18:59.832"></status>
</kw>
<kw name="vat_term: Issue Command" library="vat_term">
<arguments>
<arg>${node}</arg>
<arg>sw_interface_dump</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${command}</arg>
<arg>${delay}</arg>
<arg>${node}_vat</arg>
<arg>${${node}_VPP_VAT_PROMPT}</arg>
</arguments>
<msg timestamp="20180516 15:18:59.837" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:18:59.837" level="INFO">sw_interface_dump</msg>
<msg timestamp="20180516 15:18:59.837" level="INFO">3s</msg>
<msg timestamp="20180516 15:18:59.837" level="INFO">agent_vpp_1_vat</msg>
<msg timestamp="20180516 15:18:59.837" level="INFO">vat#</msg>
<status status="PASS" endtime="20180516 15:18:59.837" starttime="20180516 15:18:59.837"></status>
</kw>
<kw name="Write To Machine Until String" library="ssh">
<doc>*Write Machine ${machine} sw_interface_dump*</doc>
<arguments>
<arg>${node}_vat</arg>
<arg>${command}</arg>
<arg>${${node}_VPP_VAT_PROMPT}</arg>
<arg>delay=${delay}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${string}</arg>
<arg>${delay}</arg>
</arguments>
<msg timestamp="20180516 15:18:59.853" level="INFO">agent_vpp_1_vat</msg>
<msg timestamp="20180516 15:18:59.853" level="INFO">sw_interface_dump</msg>
<msg timestamp="20180516 15:18:59.853" level="INFO">vat#</msg>
<msg timestamp="20180516 15:18:59.853" level="INFO">3s</msg>
<status status="PASS" endtime="20180516 15:18:59.853" starttime="20180516 15:18:59.853"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:18:59.854" starttime="20180516 15:18:59.854"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:18:59.854" level="INFO">${currdate} = 2018-05-16 15:18:59.854</msg>
<status status="PASS" endtime="20180516 15:18:59.855" starttime="20180516 15:18:59.854"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20180516 15:18:59.862" level="INFO">sw_interface_dump</msg>
<status status="PASS" endtime="20180516 15:18:59.863" starttime="20180516 15:18:59.855"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>${string}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20180516 15:18:59.921" level="INFO">[ 
  {
    "sw_if_index": 0,
    "sup_sw_if_index": 0,
    "l2_address_length": 0,
    "l2_address": [0, 0, 0, 0, 0, 0, 0, 0],
    "interface_name": "local0",
    "admin_up_down": 0,
    "link_up_down": 0,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 0,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 1,
    "sup_sw_if_index": 1,
    "l2_address_length": 6,
    "l2_address": [2, 0, 0, 170, 187, 0, 0, 0],
    "interface_name": "loop0",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 2,
    "sup_sw_if_index": 2,
    "l2_address_length": 6,
    "l2_address": [2, 254, 62, 253, 97, 40, 0, 0],
    "interface_name": "host-node_1_noeth_1",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 3,
    "sup_sw_if_index": 3,
    "l2_address_length": 6,
    "l2_address": [2, 254, 66, 152, 34, 8, 0, 0],
    "interface_name": "host-node_2_noeth_2",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 4,
    "sup_sw_if_index": 4,
    "l2_address_length": 6,
    "l2_address": [138, 241, 190, 144, 0, 0, 0, 0],
    "interface_name": "loop1",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 5,
    "sup_sw_if_index": 5,
    "l2_address_length": 6,
    "l2_address": [138, 241, 190, 144, 32, 0, 0, 0],
    "interface_name": "loop2",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  }
]
vat#</msg>
<msg timestamp="20180516 15:18:59.928" level="INFO">${out} = 
[ 
  {
    "sw_if_index": 0,
    "sup_sw_if_index": 0,
    "l2_address_length": 0,
    "l2_address": [0, 0, 0, 0, 0, 0, 0, 0],
    "interface_name": "local0",
    "admin_up_down": 0,
    "li...</msg>
<status status="PASS" endtime="20180516 15:18:59.928" starttime="20180516 15:18:59.869"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:18:59.929" level="INFO">
[ 
  {
    "sw_if_index": 0,
    "sup_sw_if_index": 0,
    "l2_address_length": 0,
    "l2_address": [0, 0, 0, 0, 0, 0, 0, 0],
    "interface_name": "local0",
    "admin_up_down": 0,
    "link_up_down": 0,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 0,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 1,
    "sup_sw_if_index": 1,
    "l2_address_length": 6,
    "l2_address": [2, 0, 0, 170, 187, 0, 0, 0],
    "interface_name": "loop0",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 2,
    "sup_sw_if_index": 2,
    "l2_address_length": 6,
    "l2_address": [2, 254, 62, 253, 97, 40, 0, 0],
    "interface_name": "host-node_1_noeth_1",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 3,
    "sup_sw_if_index": 3,
    "l2_address_length": 6,
    "l2_address": [2, 254, 66, 152, 34, 8, 0, 0],
    "interface_name": "host-node_2_noeth_2",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 4,
    "sup_sw_if_index": 4,
    "l2_address_length": 6,
    "l2_address": [138, 241, 190, 144, 0, 0, 0, 0],
    "interface_name": "loop1",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 5,
    "sup_sw_if_index": 5,
    "l2_address_length": 6,
    "l2_address": [138, 241, 190, 144, 32, 0, 0, 0],
    "interface_name": "loop2",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  }
]
vat#</msg>
<status status="PASS" endtime="20180516 15:18:59.929" starttime="20180516 15:18:59.929"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>delay=${delay}</arg>
</arguments>
<assign>
<var>${out2}</var>
</assign>
<msg timestamp="20180516 15:19:02.931" level="INFO">${out2} =  </msg>
<status status="PASS" endtime="20180516 15:19:02.931" starttime="20180516 15:18:59.929"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out2}</arg>
</arguments>
<msg timestamp="20180516 15:19:02.932" level="INFO"> </msg>
<status status="PASS" endtime="20180516 15:19:02.932" starttime="20180516 15:19:02.932"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${out2}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:19:02.933" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_vat.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_vat.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:19:02.933" starttime="20180516 15:19:02.932"></status>
</kw>
<msg timestamp="20180516 15:19:02.933" level="INFO">${out} = 
[ 
  {
    "sw_if_index": 0,
    "sup_sw_if_index": 0,
    "l2_address_length": 0,
    "l2_address": [0, 0, 0, 0, 0, 0, 0, 0],
    "interface_name": "local0",
    "admin_up_down": 0,
    "li...</msg>
<status status="PASS" endtime="20180516 15:19:02.934" starttime="20180516 15:18:59.852"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:19:02.934" level="INFO">
[ 
  {
    "sw_if_index": 0,
    "sup_sw_if_index": 0,
    "l2_address_length": 0,
    "l2_address": [0, 0, 0, 0, 0, 0, 0, 0],
    "interface_name": "local0",
    "admin_up_down": 0,
    "link_up_down": 0,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 0,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 1,
    "sup_sw_if_index": 1,
    "l2_address_length": 6,
    "l2_address": [2, 0, 0, 170, 187, 0, 0, 0],
    "interface_name": "loop0",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 2,
    "sup_sw_if_index": 2,
    "l2_address_length": 6,
    "l2_address": [2, 254, 62, 253, 97, 40, 0, 0],
    "interface_name": "host-node_1_noeth_1",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 3,
    "sup_sw_if_index": 3,
    "l2_address_length": 6,
    "l2_address": [2, 254, 66, 152, 34, 8, 0, 0],
    "interface_name": "host-node_2_noeth_2",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 4,
    "sup_sw_if_index": 4,
    "l2_address_length": 6,
    "l2_address": [138, 241, 190, 144, 0, 0, 0, 0],
    "interface_name": "loop1",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 5,
    "sup_sw_if_index": 5,
    "l2_address_length": 6,
    "l2_address": [138, 241, 190, 144, 32, 0, 0, 0],
    "interface_name": "loop2",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  }
]
vat# </msg>
<status status="PASS" endtime="20180516 15:19:02.934" starttime="20180516 15:19:02.934"></status>
</kw>
<msg timestamp="20180516 15:19:02.934" level="INFO">${out} = 
[ 
  {
    "sw_if_index": 0,
    "sup_sw_if_index": 0,
    "l2_address_length": 0,
    "l2_address": [0, 0, 0, 0, 0, 0, 0, 0],
    "interface_name": "local0",
    "admin_up_down": 0,
    "li...</msg>
<status status="PASS" endtime="20180516 15:19:02.934" starttime="20180516 15:18:59.832"></status>
</kw>
<msg timestamp="20180516 15:19:02.934" level="INFO">${out} = 
[ 
  {
    "sw_if_index": 0,
    "sup_sw_if_index": 0,
    "l2_address_length": 0,
    "l2_address": [0, 0, 0, 0, 0, 0, 0, 0],
    "interface_name": "local0",
    "admin_up_down": 0,
    "li...</msg>
<status status="PASS" endtime="20180516 15:19:02.934" starttime="20180516 15:18:59.830"></status>
</kw>
<kw name="Get Interface Index" library="vat_term">
<arguments>
<arg>${out}</arg>
<arg>${name}</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg timestamp="20180516 15:19:02.935" level="INFO">${index} = -1</msg>
<status status="PASS" endtime="20180516 15:19:02.935" starttime="20180516 15:19:02.935"></status>
</kw>
<msg timestamp="20180516 15:19:02.935" level="INFO">${internal_index} = -1</msg>
<status status="PASS" endtime="20180516 15:19:02.935" starttime="20180516 15:18:59.829"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${internal_index}</arg>
</arguments>
<msg timestamp="20180516 15:19:02.936" level="INFO">-1</msg>
<status status="PASS" endtime="20180516 15:19:02.936" starttime="20180516 15:19:02.935"></status>
</kw>
<kw name="vat_term: Interfaces Dump" library="vat_term">
<doc>Executing command sw_interface_dump</doc>
<arguments>
<arg>${node}</arg>
</arguments>
<assign>
<var>${interfaces}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
</arguments>
<msg timestamp="20180516 15:19:02.937" level="INFO">agent_vpp_1</msg>
<status status="PASS" endtime="20180516 15:19:02.937" starttime="20180516 15:19:02.936"></status>
</kw>
<kw name="vat_term: Issue Command" library="vat_term">
<arguments>
<arg>${node}</arg>
<arg>sw_interface_dump</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${command}</arg>
<arg>${delay}</arg>
<arg>${node}_vat</arg>
<arg>${${node}_VPP_VAT_PROMPT}</arg>
</arguments>
<msg timestamp="20180516 15:19:02.938" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:19:02.938" level="INFO">sw_interface_dump</msg>
<msg timestamp="20180516 15:19:02.938" level="INFO">3s</msg>
<msg timestamp="20180516 15:19:02.938" level="INFO">agent_vpp_1_vat</msg>
<msg timestamp="20180516 15:19:02.938" level="INFO">vat#</msg>
<status status="PASS" endtime="20180516 15:19:02.938" starttime="20180516 15:19:02.938"></status>
</kw>
<kw name="Write To Machine Until String" library="ssh">
<doc>*Write Machine ${machine} sw_interface_dump*</doc>
<arguments>
<arg>${node}_vat</arg>
<arg>${command}</arg>
<arg>${${node}_VPP_VAT_PROMPT}</arg>
<arg>delay=${delay}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${string}</arg>
<arg>${delay}</arg>
</arguments>
<msg timestamp="20180516 15:19:02.943" level="INFO">agent_vpp_1_vat</msg>
<msg timestamp="20180516 15:19:02.944" level="INFO">sw_interface_dump</msg>
<msg timestamp="20180516 15:19:02.944" level="INFO">vat#</msg>
<msg timestamp="20180516 15:19:02.944" level="INFO">3s</msg>
<status status="PASS" endtime="20180516 15:19:02.944" starttime="20180516 15:19:02.943"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:19:02.944" starttime="20180516 15:19:02.944"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:19:02.945" level="INFO">${currdate} = 2018-05-16 15:19:02.945</msg>
<status status="PASS" endtime="20180516 15:19:02.945" starttime="20180516 15:19:02.945"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20180516 15:19:02.948" level="INFO">sw_interface_dump</msg>
<status status="PASS" endtime="20180516 15:19:02.948" starttime="20180516 15:19:02.945"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>${string}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20180516 15:19:02.984" level="INFO">[ 
  {
    "sw_if_index": 0,
    "sup_sw_if_index": 0,
    "l2_address_length": 0,
    "l2_address": [0, 0, 0, 0, 0, 0, 0, 0],
    "interface_name": "local0",
    "admin_up_down": 0,
    "link_up_down": 0,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 0,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 1,
    "sup_sw_if_index": 1,
    "l2_address_length": 6,
    "l2_address": [2, 0, 0, 170, 187, 0, 0, 0],
    "interface_name": "loop0",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 2,
    "sup_sw_if_index": 2,
    "l2_address_length": 6,
    "l2_address": [2, 254, 62, 253, 97, 40, 0, 0],
    "interface_name": "host-node_1_noeth_1",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 3,
    "sup_sw_if_index": 3,
    "l2_address_length": 6,
    "l2_address": [2, 254, 66, 152, 34, 8, 0, 0],
    "interface_name": "host-node_2_noeth_2",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 4,
    "sup_sw_if_index": 4,
    "l2_address_length": 6,
    "l2_address": [138, 241, 190, 144, 0, 0, 0, 0],
    "interface_name": "loop1",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 5,
    "sup_sw_if_index": 5,
    "l2_address_length": 6,
    "l2_address": [138, 241, 190, 144, 32, 0, 0, 0],
    "interface_name": "loop2",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  }
]
vat#</msg>
<msg timestamp="20180516 15:19:02.985" level="INFO">${out} = 
[ 
  {
    "sw_if_index": 0,
    "sup_sw_if_index": 0,
    "l2_address_length": 0,
    "l2_address": [0, 0, 0, 0, 0, 0, 0, 0],
    "interface_name": "local0",
    "admin_up_down": 0,
    "li...</msg>
<status status="PASS" endtime="20180516 15:19:02.985" starttime="20180516 15:19:02.949"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:19:02.985" level="INFO">
[ 
  {
    "sw_if_index": 0,
    "sup_sw_if_index": 0,
    "l2_address_length": 0,
    "l2_address": [0, 0, 0, 0, 0, 0, 0, 0],
    "interface_name": "local0",
    "admin_up_down": 0,
    "link_up_down": 0,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 0,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 1,
    "sup_sw_if_index": 1,
    "l2_address_length": 6,
    "l2_address": [2, 0, 0, 170, 187, 0, 0, 0],
    "interface_name": "loop0",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 2,
    "sup_sw_if_index": 2,
    "l2_address_length": 6,
    "l2_address": [2, 254, 62, 253, 97, 40, 0, 0],
    "interface_name": "host-node_1_noeth_1",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 3,
    "sup_sw_if_index": 3,
    "l2_address_length": 6,
    "l2_address": [2, 254, 66, 152, 34, 8, 0, 0],
    "interface_name": "host-node_2_noeth_2",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 4,
    "sup_sw_if_index": 4,
    "l2_address_length": 6,
    "l2_address": [138, 241, 190, 144, 0, 0, 0, 0],
    "interface_name": "loop1",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 5,
    "sup_sw_if_index": 5,
    "l2_address_length": 6,
    "l2_address": [138, 241, 190, 144, 32, 0, 0, 0],
    "interface_name": "loop2",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  }
]
vat#</msg>
<status status="PASS" endtime="20180516 15:19:02.985" starttime="20180516 15:19:02.985"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>delay=${delay}</arg>
</arguments>
<assign>
<var>${out2}</var>
</assign>
<msg timestamp="20180516 15:19:05.990" level="INFO">${out2} =  </msg>
<status status="PASS" endtime="20180516 15:19:05.990" starttime="20180516 15:19:02.985"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out2}</arg>
</arguments>
<msg timestamp="20180516 15:19:05.990" level="INFO"> </msg>
<status status="PASS" endtime="20180516 15:19:05.990" starttime="20180516 15:19:05.990"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${out2}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:19:05.991" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_vat.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_vat.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:19:05.991" starttime="20180516 15:19:05.991"></status>
</kw>
<msg timestamp="20180516 15:19:05.992" level="INFO">${out} = 
[ 
  {
    "sw_if_index": 0,
    "sup_sw_if_index": 0,
    "l2_address_length": 0,
    "l2_address": [0, 0, 0, 0, 0, 0, 0, 0],
    "interface_name": "local0",
    "admin_up_down": 0,
    "li...</msg>
<status status="PASS" endtime="20180516 15:19:05.992" starttime="20180516 15:19:02.943"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:19:05.992" level="INFO">
[ 
  {
    "sw_if_index": 0,
    "sup_sw_if_index": 0,
    "l2_address_length": 0,
    "l2_address": [0, 0, 0, 0, 0, 0, 0, 0],
    "interface_name": "local0",
    "admin_up_down": 0,
    "link_up_down": 0,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 0,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 1,
    "sup_sw_if_index": 1,
    "l2_address_length": 6,
    "l2_address": [2, 0, 0, 170, 187, 0, 0, 0],
    "interface_name": "loop0",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 2,
    "sup_sw_if_index": 2,
    "l2_address_length": 6,
    "l2_address": [2, 254, 62, 253, 97, 40, 0, 0],
    "interface_name": "host-node_1_noeth_1",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 3,
    "sup_sw_if_index": 3,
    "l2_address_length": 6,
    "l2_address": [2, 254, 66, 152, 34, 8, 0, 0],
    "interface_name": "host-node_2_noeth_2",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 4,
    "sup_sw_if_index": 4,
    "l2_address_length": 6,
    "l2_address": [138, 241, 190, 144, 0, 0, 0, 0],
    "interface_name": "loop1",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 5,
    "sup_sw_if_index": 5,
    "l2_address_length": 6,
    "l2_address": [138, 241, 190, 144, 32, 0, 0, 0],
    "interface_name": "loop2",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  }
]
vat# </msg>
<status status="PASS" endtime="20180516 15:19:05.992" starttime="20180516 15:19:05.992"></status>
</kw>
<msg timestamp="20180516 15:19:05.992" level="INFO">${out} = 
[ 
  {
    "sw_if_index": 0,
    "sup_sw_if_index": 0,
    "l2_address_length": 0,
    "l2_address": [0, 0, 0, 0, 0, 0, 0, 0],
    "interface_name": "local0",
    "admin_up_down": 0,
    "li...</msg>
<status status="PASS" endtime="20180516 15:19:05.992" starttime="20180516 15:19:02.937"></status>
</kw>
<msg timestamp="20180516 15:19:05.993" level="INFO">${interfaces} = 
[ 
  {
    "sw_if_index": 0,
    "sup_sw_if_index": 0,
    "l2_address_length": 0,
    "l2_address": [0, 0, 0, 0, 0, 0, 0, 0],
    "interface_name": "local0",
    "admin_up_down": 0,
    "li...</msg>
<status status="PASS" endtime="20180516 15:19:05.993" starttime="20180516 15:19:02.936"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${interfaces}</arg>
</arguments>
<msg timestamp="20180516 15:19:05.993" level="INFO">
[ 
  {
    "sw_if_index": 0,
    "sup_sw_if_index": 0,
    "l2_address_length": 0,
    "l2_address": [0, 0, 0, 0, 0, 0, 0, 0],
    "interface_name": "local0",
    "admin_up_down": 0,
    "link_up_down": 0,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 0,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 1,
    "sup_sw_if_index": 1,
    "l2_address_length": 6,
    "l2_address": [2, 0, 0, 170, 187, 0, 0, 0],
    "interface_name": "loop0",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 2,
    "sup_sw_if_index": 2,
    "l2_address_length": 6,
    "l2_address": [2, 254, 62, 253, 97, 40, 0, 0],
    "interface_name": "host-node_1_noeth_1",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 3,
    "sup_sw_if_index": 3,
    "l2_address_length": 6,
    "l2_address": [2, 254, 66, 152, 34, 8, 0, 0],
    "interface_name": "host-node_2_noeth_2",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 4,
    "sup_sw_if_index": 4,
    "l2_address_length": 6,
    "l2_address": [138, 241, 190, 144, 0, 0, 0, 0],
    "interface_name": "loop1",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 5,
    "sup_sw_if_index": 5,
    "l2_address_length": 6,
    "l2_address": [138, 241, 190, 144, 32, 0, 0, 0],
    "interface_name": "loop2",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  }
]
vat# </msg>
<status status="PASS" endtime="20180516 15:19:05.993" starttime="20180516 15:19:05.993"></status>
</kw>
<kw name="Get Interface State" library="vat_term">
<arguments>
<arg>${interfaces}</arg>
<arg>${internal_index}</arg>
</arguments>
<assign>
<var>${int_state}</var>
</assign>
<msg timestamp="20180516 15:19:05.994" level="INFO">${int_state} = -1</msg>
<status status="PASS" endtime="20180516 15:19:05.994" starttime="20180516 15:19:05.993"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${int_state}</arg>
</arguments>
<msg timestamp="20180516 15:19:05.994" level="INFO">-1</msg>
<status status="PASS" endtime="20180516 15:19:05.994" starttime="20180516 15:19:05.994"></status>
</kw>
<kw name="vpp_term: Get Interface IPs" library="vpp_term">
<arguments>
<arg>${node}</arg>
<arg>${internal_name}</arg>
</arguments>
<assign>
<var>${ipv4_list}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${interface}</arg>
</arguments>
<msg timestamp="20180516 15:19:05.995" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:19:05.995" level="INFO">None</msg>
<status status="PASS" endtime="20180516 15:19:05.995" starttime="20180516 15:19:05.995"></status>
</kw>
<kw name="vpp_term: Show Interfaces Address" library="vpp_term">
<doc>Show interfaces address through vpp terminal</doc>
<arguments>
<arg>${node}</arg>
<arg>${interface}</arg>
</arguments>
<assign>
<var>${int_addr}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${interface}</arg>
</arguments>
<msg timestamp="20180516 15:19:05.996" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:19:05.997" level="INFO">None</msg>
<status status="PASS" endtime="20180516 15:19:05.997" starttime="20180516 15:19:05.996"></status>
</kw>
<kw name="vpp_term: Issue Command" library="vpp_term">
<arguments>
<arg>${node}</arg>
<arg>sh int addr ${interface}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${command}</arg>
<arg>${delay}</arg>
<arg>${node}_term</arg>
<arg>${${node}_VPP_TERM_PROMPT}</arg>
</arguments>
<msg timestamp="20180516 15:19:05.997" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:19:05.998" level="INFO">sh int addr None</msg>
<msg timestamp="20180516 15:19:05.998" level="INFO">3s</msg>
<msg timestamp="20180516 15:19:05.998" level="INFO">agent_vpp_1_term</msg>
<msg timestamp="20180516 15:19:05.998" level="INFO">vpp#</msg>
<status status="PASS" endtime="20180516 15:19:05.998" starttime="20180516 15:19:05.997"></status>
</kw>
<kw name="Write To Machine Until String" library="ssh">
<doc>*Write Machine ${machine} sh int addr None*</doc>
<arguments>
<arg>${node}_term</arg>
<arg>${command}</arg>
<arg>${${node}_VPP_TERM_PROMPT}</arg>
<arg>delay=${delay}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${string}</arg>
<arg>${delay}</arg>
</arguments>
<msg timestamp="20180516 15:19:06.004" level="INFO">agent_vpp_1_term</msg>
<msg timestamp="20180516 15:19:06.004" level="INFO">sh int addr None</msg>
<msg timestamp="20180516 15:19:06.004" level="INFO">vpp#</msg>
<msg timestamp="20180516 15:19:06.004" level="INFO">3s</msg>
<status status="PASS" endtime="20180516 15:19:06.004" starttime="20180516 15:19:06.003"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:19:06.005" starttime="20180516 15:19:06.004"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:19:06.005" level="INFO">${currdate} = 2018-05-16 15:19:06.005</msg>
<status status="PASS" endtime="20180516 15:19:06.005" starttime="20180516 15:19:06.005"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20180516 15:19:06.010" level="INFO">sh int addr None</msg>
<status status="PASS" endtime="20180516 15:19:06.010" starttime="20180516 15:19:06.005"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>${string}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20180516 15:19:06.012" level="INFO">show interface: unknown input `None'
vpp#</msg>
<msg timestamp="20180516 15:19:06.012" level="INFO">${out} = show interface: unknown input `None'
vpp#</msg>
<status status="PASS" endtime="20180516 15:19:06.012" starttime="20180516 15:19:06.011"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:19:06.012" level="INFO">show interface: unknown input `None'
vpp#</msg>
<status status="PASS" endtime="20180516 15:19:06.012" starttime="20180516 15:19:06.012"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>delay=${delay}</arg>
</arguments>
<assign>
<var>${out2}</var>
</assign>
<msg timestamp="20180516 15:19:09.016" level="INFO">${out2} =  </msg>
<status status="PASS" endtime="20180516 15:19:09.016" starttime="20180516 15:19:06.012"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out2}</arg>
</arguments>
<msg timestamp="20180516 15:19:09.017" level="INFO"> </msg>
<status status="PASS" endtime="20180516 15:19:09.017" starttime="20180516 15:19:09.017"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${out2}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:19:09.018" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_term.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_term.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:19:09.018" starttime="20180516 15:19:09.017"></status>
</kw>
<msg timestamp="20180516 15:19:09.018" level="INFO">${out} = show interface: unknown input `None'
vpp# </msg>
<status status="PASS" endtime="20180516 15:19:09.019" starttime="20180516 15:19:06.003"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:19:09.019" level="INFO">show interface: unknown input `None'
vpp# </msg>
<status status="PASS" endtime="20180516 15:19:09.019" starttime="20180516 15:19:09.019"></status>
</kw>
<msg timestamp="20180516 15:19:09.019" level="INFO">${out} = show interface: unknown input `None'
vpp# </msg>
<status status="PASS" endtime="20180516 15:19:09.019" starttime="20180516 15:19:05.997"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:19:09.020" level="INFO">show interface: unknown input `None'
vpp# </msg>
<status status="PASS" endtime="20180516 15:19:09.020" starttime="20180516 15:19:09.020"></status>
</kw>
<msg timestamp="20180516 15:19:09.020" level="INFO">${int_addr} = show interface: unknown input `None'
vpp# </msg>
<status status="PASS" endtime="20180516 15:19:09.020" starttime="20180516 15:19:05.996"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${int_addr}</arg>
</arguments>
<msg timestamp="20180516 15:19:09.020" level="INFO">show interface: unknown input `None'
vpp# </msg>
<status status="PASS" endtime="20180516 15:19:09.020" starttime="20180516 15:19:09.020"></status>
</kw>
<kw name="Find IPV4 In Text" library="vpp_term">
<arguments>
<arg>${int_addr}</arg>
</arguments>
<assign>
<var>@{ipv4_list}</var>
</assign>
<msg timestamp="20180516 15:19:09.021" level="INFO">@{ipv4_list} = [ ]</msg>
<status status="PASS" endtime="20180516 15:19:09.021" starttime="20180516 15:19:09.021"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${ipv4_list}</arg>
</arguments>
<msg timestamp="20180516 15:19:09.022" level="INFO">[]</msg>
<status status="PASS" endtime="20180516 15:19:09.022" starttime="20180516 15:19:09.021"></status>
</kw>
<msg timestamp="20180516 15:19:09.022" level="INFO">${ipv4_list} = []</msg>
<status status="PASS" endtime="20180516 15:19:09.022" starttime="20180516 15:19:05.995"></status>
</kw>
<kw name="vpp_term: Get Interface IP6 IPs" library="vpp_term">
<doc>Get all IPv6 addresses for the specified interface.</doc>
<arguments>
<arg>${node}</arg>
<arg>${internal_name}</arg>
</arguments>
<assign>
<var>${ipv6_list}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${interface}</arg>
</arguments>
<msg timestamp="20180516 15:19:09.023" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:19:09.023" level="INFO">None</msg>
<status status="PASS" endtime="20180516 15:19:09.023" starttime="20180516 15:19:09.023"></status>
</kw>
<kw name="vpp_term: Show Interfaces Address" library="vpp_term">
<doc>Show interfaces address through vpp terminal</doc>
<arguments>
<arg>${node}</arg>
<arg>${interface}</arg>
</arguments>
<assign>
<var>${int_addr}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${interface}</arg>
</arguments>
<msg timestamp="20180516 15:19:09.024" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:19:09.024" level="INFO">None</msg>
<status status="PASS" endtime="20180516 15:19:09.024" starttime="20180516 15:19:09.024"></status>
</kw>
<kw name="vpp_term: Issue Command" library="vpp_term">
<arguments>
<arg>${node}</arg>
<arg>sh int addr ${interface}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${command}</arg>
<arg>${delay}</arg>
<arg>${node}_term</arg>
<arg>${${node}_VPP_TERM_PROMPT}</arg>
</arguments>
<msg timestamp="20180516 15:19:09.025" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:19:09.025" level="INFO">sh int addr None</msg>
<msg timestamp="20180516 15:19:09.025" level="INFO">3s</msg>
<msg timestamp="20180516 15:19:09.025" level="INFO">agent_vpp_1_term</msg>
<msg timestamp="20180516 15:19:09.026" level="INFO">vpp#</msg>
<status status="PASS" endtime="20180516 15:19:09.026" starttime="20180516 15:19:09.025"></status>
</kw>
<kw name="Write To Machine Until String" library="ssh">
<doc>*Write Machine ${machine} sh int addr None*</doc>
<arguments>
<arg>${node}_term</arg>
<arg>${command}</arg>
<arg>${${node}_VPP_TERM_PROMPT}</arg>
<arg>delay=${delay}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${string}</arg>
<arg>${delay}</arg>
</arguments>
<msg timestamp="20180516 15:19:09.032" level="INFO">agent_vpp_1_term</msg>
<msg timestamp="20180516 15:19:09.032" level="INFO">sh int addr None</msg>
<msg timestamp="20180516 15:19:09.032" level="INFO">vpp#</msg>
<msg timestamp="20180516 15:19:09.032" level="INFO">3s</msg>
<status status="PASS" endtime="20180516 15:19:09.032" starttime="20180516 15:19:09.031"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:19:09.032" starttime="20180516 15:19:09.032"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:19:09.033" level="INFO">${currdate} = 2018-05-16 15:19:09.033</msg>
<status status="PASS" endtime="20180516 15:19:09.033" starttime="20180516 15:19:09.033"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20180516 15:19:09.038" level="INFO">sh int addr None</msg>
<status status="PASS" endtime="20180516 15:19:09.039" starttime="20180516 15:19:09.033"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>${string}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20180516 15:19:09.040" level="INFO">show interface: unknown input `None'
vpp#</msg>
<msg timestamp="20180516 15:19:09.040" level="INFO">${out} = show interface: unknown input `None'
vpp#</msg>
<status status="PASS" endtime="20180516 15:19:09.040" starttime="20180516 15:19:09.039"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:19:09.040" level="INFO">show interface: unknown input `None'
vpp#</msg>
<status status="PASS" endtime="20180516 15:19:09.040" starttime="20180516 15:19:09.040"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>delay=${delay}</arg>
</arguments>
<assign>
<var>${out2}</var>
</assign>
<msg timestamp="20180516 15:19:12.043" level="INFO">${out2} =  </msg>
<status status="PASS" endtime="20180516 15:19:12.043" starttime="20180516 15:19:09.041"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out2}</arg>
</arguments>
<msg timestamp="20180516 15:19:12.045" level="INFO"> </msg>
<status status="PASS" endtime="20180516 15:19:12.045" starttime="20180516 15:19:12.044"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${out2}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:19:12.046" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_term.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_term.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:19:12.047" starttime="20180516 15:19:12.045"></status>
</kw>
<msg timestamp="20180516 15:19:12.047" level="INFO">${out} = show interface: unknown input `None'
vpp# </msg>
<status status="PASS" endtime="20180516 15:19:12.047" starttime="20180516 15:19:09.031"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:19:12.048" level="INFO">show interface: unknown input `None'
vpp# </msg>
<status status="PASS" endtime="20180516 15:19:12.048" starttime="20180516 15:19:12.048"></status>
</kw>
<msg timestamp="20180516 15:19:12.049" level="INFO">${out} = show interface: unknown input `None'
vpp# </msg>
<status status="PASS" endtime="20180516 15:19:12.049" starttime="20180516 15:19:09.024"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:19:12.049" level="INFO">show interface: unknown input `None'
vpp# </msg>
<status status="PASS" endtime="20180516 15:19:12.049" starttime="20180516 15:19:12.049"></status>
</kw>
<msg timestamp="20180516 15:19:12.050" level="INFO">${int_addr} = show interface: unknown input `None'
vpp# </msg>
<status status="PASS" endtime="20180516 15:19:12.050" starttime="20180516 15:19:09.023"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${int_addr}</arg>
</arguments>
<msg timestamp="20180516 15:19:12.050" level="INFO">show interface: unknown input `None'
vpp# </msg>
<status status="PASS" endtime="20180516 15:19:12.050" starttime="20180516 15:19:12.050"></status>
</kw>
<kw name="Find IPV6 In Text" library="vpp_term">
<doc>Find and return all IPv6 addresses in the given string.</doc>
<arguments>
<arg>${int_addr}</arg>
</arguments>
<assign>
<var>@{ipv6_list}</var>
</assign>
<msg timestamp="20180516 15:19:12.051" level="INFO">@{ipv6_list} = [ ]</msg>
<status status="PASS" endtime="20180516 15:19:12.051" starttime="20180516 15:19:12.051"></status>
</kw>
<kw type="for" name="${address} IN [ @{ipv6_list} ]">
<status status="PASS" endtime="20180516 15:19:12.052" starttime="20180516 15:19:12.051"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${ipv6_list}</arg>
</arguments>
<msg timestamp="20180516 15:19:12.052" level="INFO">[]</msg>
<status status="PASS" endtime="20180516 15:19:12.052" starttime="20180516 15:19:12.052"></status>
</kw>
<msg timestamp="20180516 15:19:12.053" level="INFO">${ipv6_list} = []</msg>
<status status="PASS" endtime="20180516 15:19:12.053" starttime="20180516 15:19:09.022"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${int_state["admin_up_down"]}</arg>
</arguments>
<assign>
<var>${enabled}</var>
</assign>
<msg timestamp="20180516 15:19:12.053" level="FAIL">Resolving variable '${int_state["admin_up_down"]}' failed: TypeError: 'int' object has no attribute '__getitem__'</msg>
<status status="FAIL" endtime="20180516 15:19:12.054" starttime="20180516 15:19:12.053"></status>
</kw>
<status status="FAIL" endtime="20180516 15:19:12.054" starttime="20180516 15:18:59.461"></status>
</kw>
<kw type="teardown" name="TestTeardown">
<kw name="Make Datastore Snapshots" library="setup-teardown">
<arguments>
<arg>${TEST_NAME}_test_teardown</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tag}</arg>
</arguments>
<msg timestamp="20180516 15:19:12.056" level="INFO">Check loop0 Is Created_test_teardown</msg>
<status status="PASS" endtime="20180516 15:19:12.056" starttime="20180516 15:19:12.055"></status>
</kw>
<kw name="Create Next Snapshot Prefix" library="setup-teardown">
<assign>
<var>${prefix}</var>
</assign>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>str(${snapshot_num}).zfill(3)</arg>
</arguments>
<assign>
<var>${prefix}</var>
</assign>
<msg timestamp="20180516 15:19:12.057" level="INFO">${prefix} = 015</msg>
<status status="PASS" endtime="20180516 15:19:12.057" starttime="20180516 15:19:12.057"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${snapshot_num}+1</arg>
</arguments>
<assign>
<var>${snapshot_num}</var>
</assign>
<msg timestamp="20180516 15:19:12.058" level="INFO">${snapshot_num} = 16</msg>
<status status="PASS" endtime="20180516 15:19:12.058" starttime="20180516 15:19:12.057"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${snapshot_num}</arg>
</arguments>
<msg timestamp="20180516 15:19:12.059" level="INFO">${snapshot_num} = 16</msg>
<status status="PASS" endtime="20180516 15:19:12.059" starttime="20180516 15:19:12.058"></status>
</kw>
<msg timestamp="20180516 15:19:12.059" level="INFO">${prefix} = 015</msg>
<status status="PASS" endtime="20180516 15:19:12.059" starttime="20180516 15:19:12.056"></status>
</kw>
<kw name="Take ETCD Snapshots" library="setup-teardown">
<arguments>
<arg>${prefix}_${tag}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tag}</arg>
</arguments>
<msg timestamp="20180516 15:19:12.060" level="INFO">015_Check loop0 Is Created_test_teardown</msg>
<status status="PASS" endtime="20180516 15:19:12.060" starttime="20180516 15:19:12.060"></status>
</kw>
<kw name="Get ETCD Dump" library="setup-teardown">
<assign>
<var>${dump}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DOCKER_COMMAND} exec etcd etcdctl get --prefix="true" ""</arg>
</arguments>
<assign>
<var>${command}</var>
</assign>
<msg timestamp="20180516 15:19:12.061" level="INFO">${command} = sudo docker exec etcd etcdctl get --prefix="true" ""</msg>
<status status="PASS" endtime="20180516 15:19:12.061" starttime="20180516 15:19:12.060"></status>
</kw>
<kw name="Execute On Machine" library="ssh">
<doc>*Execute On Machine ${machine} sudo docker exec etcd etcdctl get --prefix="true" ""*</doc>
<arguments>
<arg>docker</arg>
<arg>${command}</arg>
<arg>log=false</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${log}</arg>
</arguments>
<msg timestamp="20180516 15:19:12.067" level="INFO">docker</msg>
<msg timestamp="20180516 15:19:12.067" level="INFO">sudo docker exec etcd etcdctl get --prefix="true" ""</msg>
<msg timestamp="20180516 15:19:12.067" level="INFO">false</msg>
<status status="PASS" endtime="20180516 15:19:12.067" starttime="20180516 15:19:12.067"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:19:12.067" starttime="20180516 15:19:12.067"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:19:12.068" level="INFO">${currdate} = 2018-05-16 15:19:12.068</msg>
<status status="PASS" endtime="20180516 15:19:12.068" starttime="20180516 15:19:12.068"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20180516 15:19:12.068" level="INFO">Executing command 'sudo docker exec etcd etcdctl get --prefix="true" ""'.</msg>
<msg timestamp="20180516 15:19:12.326" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:19:12.326" level="INFO">${out} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<msg timestamp="20180516 15:19:12.326" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20180516 15:19:12.326" starttime="20180516 15:19:12.068"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${out}</arg>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:19:12.327" level="INFO">/sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-containers","description":"Wire 2 VNF containers to the vpp switch","type":2,"elements":[{"container":"node_1","port_label":"node1_veth","etcd_vpp_switch_key":"agent_vpp_1","ipv4_addr":"10.0.0.10","type":3},{"container":"node_2","port_label":"node2_veth","etcd_vpp_switch_key":"agent_vpp_1","ipv4_addr":"10.0.0.11","type":3}]}
/sfc-controller/v1/SP
{"mtu":1500,"starting_vlan_id":5000,"default_static_route_weight":5,"dynamic_bridge_parms":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true},"static_bridge_parms":{"forward":true}}
/sfc-controller/v1/id/HE/agent_vpp_1
{"name":"agent_vpp_1"}
/sfc-controller/v1/id/SFC/two-sample-vnf-containers/node_1_node1_veth
{"sfc_name":"two-sample-vnf-containers","container":"node_1","port":"node1_veth","mac_addr_id":1,"veth_id":1}
/sfc-controller/v1/id/SFC/two-sample-vnf-containers/node_2_node2_veth
{"sfc_name":"two-sample-vnf-containers","container":"node_2","port":"node2_veth","mac_addr_id":2,"veth_id":2}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VNF_node_1_node1_veth
{"name":"IF_VETH_VNF_node_1_node1_veth","enabled":true,"phys_address":"02:00:00:00:00:01","mtu":1500,"host_if_name":"node1_veth","ip_addresses":["10.0.0.10/24"],"namespace":{"type":1,"microservice":"node_1"},"veth":{"peer_if_name":"IF_VETH_VSWITCH_node_1_node1_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VNF_node_2_node2_veth
{"name":"IF_VETH_VNF_node_2_node2_veth","enabled":true,"phys_address":"02:00:00:00:00:02","mtu":1500,"host_if_name":"node2_veth","ip_addresses":["10.0.0.11/24"],"namespace":{"type":1,"microservice":"node_2"},"veth":{"peer_if_name":"IF_VETH_VSWITCH_node_2_node2_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VSWITCH_node_1_node1_veth
{"name":"IF_VETH_VSWITCH_node_1_node1_veth","enabled":true,"mtu":1500,"host_if_name":"node_1_noeth_1","namespace":{"type":1,"microservice":"agent_vpp_1"},"veth":{"peer_if_name":"IF_VETH_VNF_node_1_node1_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VSWITCH_node_2_node2_veth
{"name":"IF_VETH_VSWITCH_node_2_node2_veth","enabled":true,"mtu":1500,"host_if_name":"node_2_noeth_2","namespace":{"type":1,"microservice":"agent_vpp_1"},"veth":{"peer_if_name":"IF_VETH_VNF_node_2_node2_veth"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/BD_INTERNAL_EW_L2FIB_agent_vpp_1
{"name":"BD_INTERNAL_EW_L2FIB_agent_vpp_1","forward":true}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/BD_INTERNAL_EW_agent_vpp_1
{"name":"BD_INTERNAL_EW_agent_vpp_1","flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true,"interfaces":[{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth"},{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth"}]}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth
{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","type":4,"enabled":true,"mtu":1500,"afpacket":{"host_if_name":"node_1_noeth_1"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth
{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","type":4,"enabled":true,"mtu":1500,"afpacket":{"host_if_name":"node_2_noeth_2"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_LOOPBACK_H_agent_vpp_1
{"name":"IF_LOOPBACK_H_agent_vpp_1","enabled":true,"phys_address":"02:00:00:AA:BB:00","mtu":1500,"ip_addresses":["6.0.0.100"]}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/loop0
{
  "name": "loop0",
  "type": 0,
  "enabled": true,
  "phys_address": "8a:f1:be:90:00:00",
  "mtu": 1500,
  "vrf": 0,
  "ip_addresses": [
    "20.1.1.1/24"
  ]
}


/vnf-agent/agent_vpp_1/vpp/config/v1/interface/loop1
{
  "name": "loop1",
  "type": 0,
  "enabled": true,
  "phys_address": "8a:f1:be:90:20:00",
  "mtu": 1500,
  "vrf": 0,
  "ip_addresses": [
    "30.1.1.1/24"
  ]
}


/vnf-agent/agent_vpp_1/vpp/status/v1/bd/BD_INTERNAL_EW_L2FIB_agent_vpp_1
{"index":2,"internal_name":"BD_INTERNAL_EW_L2FIB_agent_vpp_1","bvi_interface":"not_set","last_change":1526476631,"l2_params":{"forward":true}}
/vnf-agent/agent_vpp_1/vpp/status/v1/bd/BD_INTERNAL_EW_agent_vpp_1
{"index":1,"internal_name":"BD_INTERNAL_EW_agent_vpp_1","bvi_interface":"not_set","interface_count":2,"last_change":1526476631,"l2_params":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true},"interfaces":[{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","sw_if_index":2},{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","sw_if_index":3}]}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth
{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","internal_name":"host-node_1_noeth_1","if_index":2,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:3e:fd:61:28","mtu":1500,"statistics":{"in_packets":18,"in_bytes":1412}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth
{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","internal_name":"host-node_2_noeth_2","if_index":3,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:42:98:22:08","mtu":1500,"statistics":{"in_packets":20,"in_bytes":1592}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_LOOPBACK_H_agent_vpp_1
{"name":"IF_LOOPBACK_H_agent_vpp_1","internal_name":"loop0","if_index":1,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:00:00:aa:bb:00","mtu":1500,"statistics":{}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/local0
{"name":"local0","internal_name":"local0","admin_status":2,"oper_status":2,"statistics":{}}
/vnf-agent/node_1/check/status/v1/agent
{"build_version":"v1.1-5-g55e9977","build_date":"2018-03-06T11:05+00:00","state":1,"start_time":1526476614,"last_change":1526476619,"last_update":1526476745,"commit_hash":"55e99770087087fa8e41a980a8b6257c80c93f4c"}
/vnf-agent/node_1/check/status/v1/plugin/etcdv3
{"state":1,"last_change":1526476619,"last_update":1526476745}
/vnf-agent/node_1/check/status/v1/plugin/kafka
{"state":1,"last_change":1526476619,"last_update":1526476745}
/vnf-agent/node_2/check/status/v1/agent
{"build_version":"v1.1-5-g55e9977","build_date":"2018-03-06T11:05+00:00","state":1,"start_time":1526476623,"last_change":1526476628,"last_update":1526476743,"commit_hash":"55e99770087087fa8e41a980a8b6257c80c93f4c"}
/vnf-agent/node_2/check/status/v1/plugin/etcdv3
{"state":1,"last_change":1526476628,"last_update":1526476743}
/vnf-agent/node_2/check/status/v1/plugin/kafka
{"state":1,"last_change":1526476628,"last_update":1526476743}</msg>
<msg timestamp="20180516 15:19:12.327" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:19:12.327" starttime="20180516 15:19:12.326"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:19:12.328" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:19:12.329" starttime="20180516 15:19:12.328"></status>
</kw>
<msg timestamp="20180516 15:19:12.329" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:19:12.329" starttime="20180516 15:19:12.328"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} on ${machine}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:19:12.329" starttime="20180516 15:19:12.329"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${log}'=='true'</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:19:12.330" starttime="20180516 15:19:12.329"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:19:12.330" starttime="20180516 15:19:12.330"></status>
</kw>
<msg timestamp="20180516 15:19:12.330" level="INFO">${out} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<status status="PASS" endtime="20180516 15:19:12.330" starttime="20180516 15:19:12.066"></status>
</kw>
<msg timestamp="20180516 15:19:12.330" level="INFO">${dump} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<status status="PASS" endtime="20180516 15:19:12.330" starttime="20180516 15:19:12.060"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/etcd_dump-${tag}.txt</arg>
<arg>${dump}</arg>
</arguments>
<msg timestamp="20180516 15:19:12.331" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/etcd_dump-015_Check loop0 Is Created_test_teardown.txt"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/etcd_dump-015_Check loop0 Is Created_test_teardown.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:19:12.331" starttime="20180516 15:19:12.331"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${dump}</arg>
<arg>/error/</arg>
</arguments>
<assign>
<var>${errors}</var>
</assign>
<msg timestamp="20180516 15:19:12.332" level="INFO">0 out of 82 lines matched</msg>
<msg timestamp="20180516 15:19:12.332" level="INFO">${errors} = </msg>
<status status="PASS" endtime="20180516 15:19:12.332" starttime="20180516 15:19:12.331"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${errors}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${errors}</arg>
</arguments>
<msg timestamp="20180516 15:19:12.332" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:19:12.333" starttime="20180516 15:19:12.332"></status>
</kw>
<msg timestamp="20180516 15:19:12.333" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:19:12.333" starttime="20180516 15:19:12.332"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>Errors detected in keys: ${errors}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:19:12.333" starttime="20180516 15:19:12.333"></status>
</kw>
<status status="PASS" endtime="20180516 15:19:12.333" starttime="20180516 15:19:12.059"></status>
</kw>
<status status="PASS" endtime="20180516 15:19:12.333" starttime="20180516 15:19:12.055"></status>
</kw>
<status status="PASS" endtime="20180516 15:19:12.333" starttime="20180516 15:19:12.054"></status>
</kw>
<status status="FAIL" endtime="20180516 15:19:12.333" critical="yes" starttime="20180516 15:18:56.008">Resolving variable '${int_state["admin_up_down"]}' failed: TypeError: 'int' object has no attribute '__getitem__'</status>
</test>
<test id="s1-t8" name="Check loop1 Is Created">
<kw type="setup" name="TestSetup">
<kw name="Make Datastore Snapshots" library="setup-teardown">
<arguments>
<arg>${TEST_NAME}_test_setup</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tag}</arg>
</arguments>
<msg timestamp="20180516 15:19:12.335" level="INFO">Check loop1 Is Created_test_setup</msg>
<status status="PASS" endtime="20180516 15:19:12.335" starttime="20180516 15:19:12.335"></status>
</kw>
<kw name="Create Next Snapshot Prefix" library="setup-teardown">
<assign>
<var>${prefix}</var>
</assign>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>str(${snapshot_num}).zfill(3)</arg>
</arguments>
<assign>
<var>${prefix}</var>
</assign>
<msg timestamp="20180516 15:19:12.337" level="INFO">${prefix} = 016</msg>
<status status="PASS" endtime="20180516 15:19:12.337" starttime="20180516 15:19:12.336"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${snapshot_num}+1</arg>
</arguments>
<assign>
<var>${snapshot_num}</var>
</assign>
<msg timestamp="20180516 15:19:12.338" level="INFO">${snapshot_num} = 17</msg>
<status status="PASS" endtime="20180516 15:19:12.338" starttime="20180516 15:19:12.337"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${snapshot_num}</arg>
</arguments>
<msg timestamp="20180516 15:19:12.338" level="INFO">${snapshot_num} = 17</msg>
<status status="PASS" endtime="20180516 15:19:12.338" starttime="20180516 15:19:12.338"></status>
</kw>
<msg timestamp="20180516 15:19:12.338" level="INFO">${prefix} = 016</msg>
<status status="PASS" endtime="20180516 15:19:12.338" starttime="20180516 15:19:12.336"></status>
</kw>
<kw name="Take ETCD Snapshots" library="setup-teardown">
<arguments>
<arg>${prefix}_${tag}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tag}</arg>
</arguments>
<msg timestamp="20180516 15:19:12.339" level="INFO">016_Check loop1 Is Created_test_setup</msg>
<status status="PASS" endtime="20180516 15:19:12.339" starttime="20180516 15:19:12.339"></status>
</kw>
<kw name="Get ETCD Dump" library="setup-teardown">
<assign>
<var>${dump}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DOCKER_COMMAND} exec etcd etcdctl get --prefix="true" ""</arg>
</arguments>
<assign>
<var>${command}</var>
</assign>
<msg timestamp="20180516 15:19:12.340" level="INFO">${command} = sudo docker exec etcd etcdctl get --prefix="true" ""</msg>
<status status="PASS" endtime="20180516 15:19:12.340" starttime="20180516 15:19:12.340"></status>
</kw>
<kw name="Execute On Machine" library="ssh">
<doc>*Execute On Machine ${machine} sudo docker exec etcd etcdctl get --prefix="true" ""*</doc>
<arguments>
<arg>docker</arg>
<arg>${command}</arg>
<arg>log=false</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${log}</arg>
</arguments>
<msg timestamp="20180516 15:19:12.357" level="INFO">docker</msg>
<msg timestamp="20180516 15:19:12.357" level="INFO">sudo docker exec etcd etcdctl get --prefix="true" ""</msg>
<msg timestamp="20180516 15:19:12.357" level="INFO">false</msg>
<status status="PASS" endtime="20180516 15:19:12.357" starttime="20180516 15:19:12.356"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:19:12.358" starttime="20180516 15:19:12.357"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:19:12.358" level="INFO">${currdate} = 2018-05-16 15:19:12.358</msg>
<status status="PASS" endtime="20180516 15:19:12.358" starttime="20180516 15:19:12.358"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20180516 15:19:12.359" level="INFO">Executing command 'sudo docker exec etcd etcdctl get --prefix="true" ""'.</msg>
<msg timestamp="20180516 15:19:12.739" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:19:12.739" level="INFO">${out} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<msg timestamp="20180516 15:19:12.739" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20180516 15:19:12.739" starttime="20180516 15:19:12.358"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${out}</arg>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:19:12.739" level="INFO">/sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-containers","description":"Wire 2 VNF containers to the vpp switch","type":2,"elements":[{"container":"node_1","port_label":"node1_veth","etcd_vpp_switch_key":"agent_vpp_1","ipv4_addr":"10.0.0.10","type":3},{"container":"node_2","port_label":"node2_veth","etcd_vpp_switch_key":"agent_vpp_1","ipv4_addr":"10.0.0.11","type":3}]}
/sfc-controller/v1/SP
{"mtu":1500,"starting_vlan_id":5000,"default_static_route_weight":5,"dynamic_bridge_parms":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true},"static_bridge_parms":{"forward":true}}
/sfc-controller/v1/id/HE/agent_vpp_1
{"name":"agent_vpp_1"}
/sfc-controller/v1/id/SFC/two-sample-vnf-containers/node_1_node1_veth
{"sfc_name":"two-sample-vnf-containers","container":"node_1","port":"node1_veth","mac_addr_id":1,"veth_id":1}
/sfc-controller/v1/id/SFC/two-sample-vnf-containers/node_2_node2_veth
{"sfc_name":"two-sample-vnf-containers","container":"node_2","port":"node2_veth","mac_addr_id":2,"veth_id":2}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VNF_node_1_node1_veth
{"name":"IF_VETH_VNF_node_1_node1_veth","enabled":true,"phys_address":"02:00:00:00:00:01","mtu":1500,"host_if_name":"node1_veth","ip_addresses":["10.0.0.10/24"],"namespace":{"type":1,"microservice":"node_1"},"veth":{"peer_if_name":"IF_VETH_VSWITCH_node_1_node1_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VNF_node_2_node2_veth
{"name":"IF_VETH_VNF_node_2_node2_veth","enabled":true,"phys_address":"02:00:00:00:00:02","mtu":1500,"host_if_name":"node2_veth","ip_addresses":["10.0.0.11/24"],"namespace":{"type":1,"microservice":"node_2"},"veth":{"peer_if_name":"IF_VETH_VSWITCH_node_2_node2_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VSWITCH_node_1_node1_veth
{"name":"IF_VETH_VSWITCH_node_1_node1_veth","enabled":true,"mtu":1500,"host_if_name":"node_1_noeth_1","namespace":{"type":1,"microservice":"agent_vpp_1"},"veth":{"peer_if_name":"IF_VETH_VNF_node_1_node1_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VSWITCH_node_2_node2_veth
{"name":"IF_VETH_VSWITCH_node_2_node2_veth","enabled":true,"mtu":1500,"host_if_name":"node_2_noeth_2","namespace":{"type":1,"microservice":"agent_vpp_1"},"veth":{"peer_if_name":"IF_VETH_VNF_node_2_node2_veth"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/BD_INTERNAL_EW_L2FIB_agent_vpp_1
{"name":"BD_INTERNAL_EW_L2FIB_agent_vpp_1","forward":true}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/BD_INTERNAL_EW_agent_vpp_1
{"name":"BD_INTERNAL_EW_agent_vpp_1","flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true,"interfaces":[{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth"},{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth"}]}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth
{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","type":4,"enabled":true,"mtu":1500,"afpacket":{"host_if_name":"node_1_noeth_1"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth
{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","type":4,"enabled":true,"mtu":1500,"afpacket":{"host_if_name":"node_2_noeth_2"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_LOOPBACK_H_agent_vpp_1
{"name":"IF_LOOPBACK_H_agent_vpp_1","enabled":true,"phys_address":"02:00:00:AA:BB:00","mtu":1500,"ip_addresses":["6.0.0.100"]}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/loop0
{
  "name": "loop0",
  "type": 0,
  "enabled": true,
  "phys_address": "8a:f1:be:90:00:00",
  "mtu": 1500,
  "vrf": 0,
  "ip_addresses": [
    "20.1.1.1/24"
  ]
}


/vnf-agent/agent_vpp_1/vpp/config/v1/interface/loop1
{
  "name": "loop1",
  "type": 0,
  "enabled": true,
  "phys_address": "8a:f1:be:90:20:00",
  "mtu": 1500,
  "vrf": 0,
  "ip_addresses": [
    "30.1.1.1/24"
  ]
}


/vnf-agent/agent_vpp_1/vpp/status/v1/bd/BD_INTERNAL_EW_L2FIB_agent_vpp_1
{"index":2,"internal_name":"BD_INTERNAL_EW_L2FIB_agent_vpp_1","bvi_interface":"not_set","last_change":1526476631,"l2_params":{"forward":true}}
/vnf-agent/agent_vpp_1/vpp/status/v1/bd/BD_INTERNAL_EW_agent_vpp_1
{"index":1,"internal_name":"BD_INTERNAL_EW_agent_vpp_1","bvi_interface":"not_set","interface_count":2,"last_change":1526476631,"l2_params":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true},"interfaces":[{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","sw_if_index":2},{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","sw_if_index":3}]}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth
{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","internal_name":"host-node_1_noeth_1","if_index":2,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:3e:fd:61:28","mtu":1500,"statistics":{"in_packets":18,"in_bytes":1412}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth
{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","internal_name":"host-node_2_noeth_2","if_index":3,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:42:98:22:08","mtu":1500,"statistics":{"in_packets":20,"in_bytes":1592}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_LOOPBACK_H_agent_vpp_1
{"name":"IF_LOOPBACK_H_agent_vpp_1","internal_name":"loop0","if_index":1,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:00:00:aa:bb:00","mtu":1500,"statistics":{}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/local0
{"name":"local0","internal_name":"local0","admin_status":2,"oper_status":2,"statistics":{}}
/vnf-agent/node_1/check/status/v1/agent
{"build_version":"v1.1-5-g55e9977","build_date":"2018-03-06T11:05+00:00","state":1,"start_time":1526476614,"last_change":1526476619,"last_update":1526476745,"commit_hash":"55e99770087087fa8e41a980a8b6257c80c93f4c"}
/vnf-agent/node_1/check/status/v1/plugin/etcdv3
{"state":1,"last_change":1526476619,"last_update":1526476745}
/vnf-agent/node_1/check/status/v1/plugin/kafka
{"state":1,"last_change":1526476619,"last_update":1526476745}
/vnf-agent/node_2/check/status/v1/agent
{"build_version":"v1.1-5-g55e9977","build_date":"2018-03-06T11:05+00:00","state":1,"start_time":1526476623,"last_change":1526476628,"last_update":1526476743,"commit_hash":"55e99770087087fa8e41a980a8b6257c80c93f4c"}
/vnf-agent/node_2/check/status/v1/plugin/etcdv3
{"state":1,"last_change":1526476628,"last_update":1526476743}
/vnf-agent/node_2/check/status/v1/plugin/kafka
{"state":1,"last_change":1526476628,"last_update":1526476743}</msg>
<msg timestamp="20180516 15:19:12.740" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:19:12.740" starttime="20180516 15:19:12.739"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:19:12.741" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:19:12.742" starttime="20180516 15:19:12.741"></status>
</kw>
<msg timestamp="20180516 15:19:12.742" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:19:12.742" starttime="20180516 15:19:12.740"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} on ${machine}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:19:12.742" starttime="20180516 15:19:12.742"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${log}'=='true'</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:19:12.743" starttime="20180516 15:19:12.742"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:19:12.743" starttime="20180516 15:19:12.743"></status>
</kw>
<msg timestamp="20180516 15:19:12.743" level="INFO">${out} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<status status="PASS" endtime="20180516 15:19:12.743" starttime="20180516 15:19:12.347"></status>
</kw>
<msg timestamp="20180516 15:19:12.744" level="INFO">${dump} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<status status="PASS" endtime="20180516 15:19:12.744" starttime="20180516 15:19:12.340"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/etcd_dump-${tag}.txt</arg>
<arg>${dump}</arg>
</arguments>
<msg timestamp="20180516 15:19:12.744" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/etcd_dump-016_Check loop1 Is Created_test_setup.txt"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/etcd_dump-016_Check loop1 Is Created_test_setup.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:19:12.744" starttime="20180516 15:19:12.744"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${dump}</arg>
<arg>/error/</arg>
</arguments>
<assign>
<var>${errors}</var>
</assign>
<msg timestamp="20180516 15:19:12.745" level="INFO">0 out of 82 lines matched</msg>
<msg timestamp="20180516 15:19:12.745" level="INFO">${errors} = </msg>
<status status="PASS" endtime="20180516 15:19:12.745" starttime="20180516 15:19:12.745"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${errors}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${errors}</arg>
</arguments>
<msg timestamp="20180516 15:19:12.746" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:19:12.746" starttime="20180516 15:19:12.745"></status>
</kw>
<msg timestamp="20180516 15:19:12.746" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:19:12.746" starttime="20180516 15:19:12.745"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>Errors detected in keys: ${errors}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:19:12.746" starttime="20180516 15:19:12.746"></status>
</kw>
<status status="PASS" endtime="20180516 15:19:12.746" starttime="20180516 15:19:12.339"></status>
</kw>
<status status="PASS" endtime="20180516 15:19:12.746" starttime="20180516 15:19:12.335"></status>
</kw>
<status status="PASS" endtime="20180516 15:19:12.747" starttime="20180516 15:19:12.334"></status>
</kw>
<kw name="vpp_term: Interface Is Created" library="vpp_term">
<arguments>
<arg>node=agent_vpp_1</arg>
<arg>mac=8a:f1:be:90:20:00</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${mac}</arg>
</arguments>
<msg timestamp="20180516 15:19:12.748" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:19:12.748" level="INFO">8a:f1:be:90:20:00</msg>
<status status="PASS" endtime="20180516 15:19:12.748" starttime="20180516 15:19:12.748"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${interface_timeout}</arg>
<arg>3s</arg>
<arg>vpp_term: Check Interface Presence</arg>
<arg>${node}</arg>
<arg>${mac}</arg>
</arguments>
<kw name="vpp_term: Check Interface Presence" library="vpp_term">
<doc>Checking if specified interface with mac exists in VPP</doc>
<arguments>
<arg>${node}</arg>
<arg>${mac}</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${mac}</arg>
<arg>${status}</arg>
</arguments>
<msg timestamp="20180516 15:19:12.750" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:19:12.750" level="INFO">8a:f1:be:90:20:00</msg>
<msg timestamp="20180516 15:19:12.750" level="INFO">True</msg>
<status status="PASS" endtime="20180516 15:19:12.750" starttime="20180516 15:19:12.749"></status>
</kw>
<kw name="vpp_term: Show Hardware" library="vpp_term">
<doc>Show interfaces hardware through vpp terminal</doc>
<arguments>
<arg>${node}</arg>
</arguments>
<assign>
<var>${ints}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${interface}</arg>
</arguments>
<msg timestamp="20180516 15:19:12.751" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:19:12.751" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:19:12.751" starttime="20180516 15:19:12.751"></status>
</kw>
<kw name="vpp_term: Issue Command" library="vpp_term">
<arguments>
<arg>${node}</arg>
<arg>sh h ${interface}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${command}</arg>
<arg>${delay}</arg>
<arg>${node}_term</arg>
<arg>${${node}_VPP_TERM_PROMPT}</arg>
</arguments>
<msg timestamp="20180516 15:19:12.753" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:19:12.753" level="INFO">sh h </msg>
<msg timestamp="20180516 15:19:12.753" level="INFO">3s</msg>
<msg timestamp="20180516 15:19:12.753" level="INFO">agent_vpp_1_term</msg>
<msg timestamp="20180516 15:19:12.753" level="INFO">vpp#</msg>
<status status="PASS" endtime="20180516 15:19:12.753" starttime="20180516 15:19:12.752"></status>
</kw>
<kw name="Write To Machine Until String" library="ssh">
<doc>*Write Machine ${machine} sh h *</doc>
<arguments>
<arg>${node}_term</arg>
<arg>${command}</arg>
<arg>${${node}_VPP_TERM_PROMPT}</arg>
<arg>delay=${delay}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${string}</arg>
<arg>${delay}</arg>
</arguments>
<msg timestamp="20180516 15:19:12.759" level="INFO">agent_vpp_1_term</msg>
<msg timestamp="20180516 15:19:12.759" level="INFO">sh h </msg>
<msg timestamp="20180516 15:19:12.759" level="INFO">vpp#</msg>
<msg timestamp="20180516 15:19:12.759" level="INFO">3s</msg>
<status status="PASS" endtime="20180516 15:19:12.759" starttime="20180516 15:19:12.758"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:19:12.759" starttime="20180516 15:19:12.759"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:19:12.760" level="INFO">${currdate} = 2018-05-16 15:19:12.760</msg>
<status status="PASS" endtime="20180516 15:19:12.760" starttime="20180516 15:19:12.760"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20180516 15:19:12.762" level="INFO">sh h</msg>
<status status="PASS" endtime="20180516 15:19:12.763" starttime="20180516 15:19:12.760"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>${string}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20180516 15:19:12.772" level="INFO">Name                Idx   Link  Hardware
host-node_1_noeth_1                2     up   host-node_1_noeth_1
  Ethernet address 02:fe:3e:fd:61:28
  Linux PACKET socket interface
host-node_2_noeth_2                3     up   host-node_2_noeth_2
  Ethernet address 02:fe:42:98:22:08
  Linux PACKET socket interface
local0                             0    down  local0
  local
loop0                              1     up   loop0
  Ethernet address 02:00:00:aa:bb:00
loop1                              4     up   loop1
  Ethernet address 8a:f1:be:90:00:00
loop2                              5     up   loop2
  Ethernet address 8a:f1:be:90:20:00
vpp#</msg>
<msg timestamp="20180516 15:19:12.772" level="INFO">${out} =               Name                Idx   Link  Hardware
host-node_1_noeth_1                2     up   host-node_1_noeth_1
  Ethernet address 02:fe:3e:fd:61:28
  Linux PACKET socket interface
host-n...</msg>
<status status="PASS" endtime="20180516 15:19:12.772" starttime="20180516 15:19:12.765"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:19:12.773" level="INFO">              Name                Idx   Link  Hardware
host-node_1_noeth_1                2     up   host-node_1_noeth_1
  Ethernet address 02:fe:3e:fd:61:28
  Linux PACKET socket interface
host-node_2_noeth_2                3     up   host-node_2_noeth_2
  Ethernet address 02:fe:42:98:22:08
  Linux PACKET socket interface
local0                             0    down  local0
  local
loop0                              1     up   loop0
  Ethernet address 02:00:00:aa:bb:00
loop1                              4     up   loop1
  Ethernet address 8a:f1:be:90:00:00
loop2                              5     up   loop2
  Ethernet address 8a:f1:be:90:20:00
vpp#</msg>
<status status="PASS" endtime="20180516 15:19:12.773" starttime="20180516 15:19:12.772"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>delay=${delay}</arg>
</arguments>
<assign>
<var>${out2}</var>
</assign>
<msg timestamp="20180516 15:19:15.777" level="INFO">${out2} =  </msg>
<status status="PASS" endtime="20180516 15:19:15.777" starttime="20180516 15:19:12.774"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out2}</arg>
</arguments>
<msg timestamp="20180516 15:19:15.779" level="INFO"> </msg>
<status status="PASS" endtime="20180516 15:19:15.779" starttime="20180516 15:19:15.778"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${out2}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:19:15.783" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_term.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_term.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:19:15.783" starttime="20180516 15:19:15.780"></status>
</kw>
<msg timestamp="20180516 15:19:15.784" level="INFO">${out} =               Name                Idx   Link  Hardware
host-node_1_noeth_1                2     up   host-node_1_noeth_1
  Ethernet address 02:fe:3e:fd:61:28
  Linux PACKET socket interface
host-n...</msg>
<status status="PASS" endtime="20180516 15:19:15.784" starttime="20180516 15:19:12.758"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:19:15.786" level="INFO">              Name                Idx   Link  Hardware
host-node_1_noeth_1                2     up   host-node_1_noeth_1
  Ethernet address 02:fe:3e:fd:61:28
  Linux PACKET socket interface
host-node_2_noeth_2                3     up   host-node_2_noeth_2
  Ethernet address 02:fe:42:98:22:08
  Linux PACKET socket interface
local0                             0    down  local0
  local
loop0                              1     up   loop0
  Ethernet address 02:00:00:aa:bb:00
loop1                              4     up   loop1
  Ethernet address 8a:f1:be:90:00:00
loop2                              5     up   loop2
  Ethernet address 8a:f1:be:90:20:00
vpp# </msg>
<status status="PASS" endtime="20180516 15:19:15.786" starttime="20180516 15:19:15.785"></status>
</kw>
<msg timestamp="20180516 15:19:15.787" level="INFO">${out} =               Name                Idx   Link  Hardware
host-node_1_noeth_1                2     up   host-node_1_noeth_1
  Ethernet address 02:fe:3e:fd:61:28
  Linux PACKET socket interface
host-n...</msg>
<status status="PASS" endtime="20180516 15:19:15.787" starttime="20180516 15:19:12.752"></status>
</kw>
<msg timestamp="20180516 15:19:15.788" level="INFO">${ints} =               Name                Idx   Link  Hardware
host-node_1_noeth_1                2     up   host-node_1_noeth_1
  Ethernet address 02:fe:3e:fd:61:28
  Linux PACKET socket interface
host-n...</msg>
<status status="PASS" endtime="20180516 15:19:15.788" starttime="20180516 15:19:12.750"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${ints}</arg>
<arg>${mac}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${ints}</arg>
<arg>${mac}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:19:15.791" starttime="20180516 15:19:15.790"></status>
</kw>
<msg timestamp="20180516 15:19:15.791" level="INFO">${result} = True</msg>
<status status="PASS" endtime="20180516 15:19:15.791" starttime="20180516 15:19:15.789"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${result}</arg>
<arg>${status}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:19:15.792" starttime="20180516 15:19:15.792"></status>
</kw>
<status status="PASS" endtime="20180516 15:19:15.793" starttime="20180516 15:19:12.749"></status>
</kw>
<status status="PASS" endtime="20180516 15:19:15.793" starttime="20180516 15:19:12.748"></status>
</kw>
<status status="PASS" endtime="20180516 15:19:15.793" starttime="20180516 15:19:12.747"></status>
</kw>
<kw name="vat_term: Check Loopback Interface State" library="vat_term">
<arguments>
<arg>agent_vpp_1</arg>
<arg>loop0</arg>
<arg>enabled=1</arg>
<arg>mac=8a:f1:be:90:20:00</arg>
<arg>mtu=1500</arg>
<arg>ipv4=30.1.1.1/24</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${name}</arg>
<arg>${desired_state}</arg>
</arguments>
<msg timestamp="20180516 15:19:15.795" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:19:15.795" level="INFO">loop0</msg>
<msg timestamp="20180516 15:19:15.796" level="INFO">[u'enabled=1', u'mac=8a:f1:be:90:20:00', u'mtu=1500', u'ipv4=30.1.1.1/24']</msg>
<status status="PASS" endtime="20180516 15:19:15.796" starttime="20180516 15:19:15.795"></status>
</kw>
<kw name="vpp_ctl: Get Interface Internal Name" library="vpp_ctl">
<arguments>
<arg>${node}</arg>
<arg>${name}</arg>
</arguments>
<assign>
<var>${internal_name}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${interface}</arg>
</arguments>
<msg timestamp="20180516 15:19:15.797" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:19:15.798" level="INFO">loop0</msg>
<status status="PASS" endtime="20180516 15:19:15.798" starttime="20180516 15:19:15.797"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${name}</var>
</assign>
<msg timestamp="20180516 15:19:15.799" level="INFO">${name} = </msg>
<status status="PASS" endtime="20180516 15:19:15.799" starttime="20180516 15:19:15.798"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<assign>
<var>${empty_dict}</var>
</assign>
<msg timestamp="20180516 15:19:15.799" level="INFO">${empty_dict} = {}</msg>
<status status="PASS" endtime="20180516 15:19:15.800" starttime="20180516 15:19:15.799"></status>
</kw>
<kw name="vpp_ctl: Get VPP Interface State As Json" library="vpp_ctl">
<arguments>
<arg>${node}</arg>
<arg>${interface}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${interface}</arg>
</arguments>
<msg timestamp="20180516 15:19:15.801" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:19:15.801" level="INFO">loop0</msg>
<status status="PASS" endtime="20180516 15:19:15.801" starttime="20180516 15:19:15.801"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/vnf-agent/${node}/vpp/status/v1/interface/${interface}</arg>
</arguments>
<assign>
<var>${key}</var>
</assign>
<msg timestamp="20180516 15:19:15.802" level="INFO">${key} = /vnf-agent/agent_vpp_1/vpp/status/v1/interface/loop0</msg>
<status status="PASS" endtime="20180516 15:19:15.802" starttime="20180516 15:19:15.801"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${key}</arg>
</arguments>
<msg timestamp="20180516 15:19:15.803" level="INFO">/vnf-agent/agent_vpp_1/vpp/status/v1/interface/loop0</msg>
<status status="PASS" endtime="20180516 15:19:15.803" starttime="20180516 15:19:15.802"></status>
</kw>
<kw name="vpp_ctl: Read Key" library="vpp_ctl">
<arguments>
<arg>${key}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${key}</arg>
<arg>${container}</arg>
</arguments>
<msg timestamp="20180516 15:19:15.805" level="INFO">/vnf-agent/agent_vpp_1/vpp/status/v1/interface/loop0</msg>
<msg timestamp="20180516 15:19:15.805" level="INFO">vpp_agent_ctl</msg>
<status status="PASS" endtime="20180516 15:19:15.805" starttime="20180516 15:19:15.804"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>vpp-agent-ctl ${AGENT_VPP_ETCD_CONF_PATH} -get ${key}</arg>
</arguments>
<assign>
<var>${command}</var>
</assign>
<msg timestamp="20180516 15:19:15.805" level="INFO">${command} = vpp-agent-ctl /opt/vpp-agent/dev/etcd.conf -get /vnf-agent/agent_vpp_1/vpp/status/v1/interface/loop0</msg>
<status status="PASS" endtime="20180516 15:19:15.806" starttime="20180516 15:19:15.805"></status>
</kw>
<kw name="Execute In Container" library="docker">
<arguments>
<arg>${container}</arg>
<arg>${command}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${container}</arg>
<arg>${command}</arg>
</arguments>
<msg timestamp="20180516 15:19:15.807" level="INFO">vpp_agent_ctl</msg>
<msg timestamp="20180516 15:19:15.807" level="INFO">vpp-agent-ctl /opt/vpp-agent/dev/etcd.conf -get /vnf-agent/agent_vpp_1/vpp/status/v1/interface/loop0</msg>
<status status="PASS" endtime="20180516 15:19:15.807" starttime="20180516 15:19:15.807"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>docker</arg>
</arguments>
<status status="PASS" endtime="20180516 15:19:15.808" starttime="20180516 15:19:15.807"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:19:15.808" level="INFO">${currdate} = 2018-05-16 15:19:15.808</msg>
<status status="PASS" endtime="20180516 15:19:15.808" starttime="20180516 15:19:15.808"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DOCKER_COMMAND} exec ${container} ${command}</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20180516 15:19:15.809" level="INFO">Executing command 'sudo docker exec vpp_agent_ctl vpp-agent-ctl /opt/vpp-agent/dev/etcd.conf -get /vnf-agent/agent_vpp_1/vpp/status/v1/interface/loop0'.</msg>
<msg timestamp="20180516 15:19:16.048" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:19:16.048" level="INFO">${out} = </msg>
<msg timestamp="20180516 15:19:16.048" level="INFO">${stderr} = time="2018-05-16 13:19:15.96221" level=info msg="Connecting to etcd took 3.279966ms" durationInNs=3279966 loc="etcdv3/bytes_broker_impl.go(84)" logger=defaultLogger</msg>
<msg timestamp="20180516 15:19:16.048" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20180516 15:19:16.048" starttime="20180516 15:19:15.809"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:19:16.049" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:19:16.049" starttime="20180516 15:19:16.048"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:19:16.049" level="INFO">time="2018-05-16 13:19:15.96221" level=info msg="Connecting to etcd took 3.279966ms" durationInNs=3279966 loc="etcdv3/bytes_broker_impl.go(84)" logger=defaultLogger</msg>
<status status="PASS" endtime="20180516 15:19:16.049" starttime="20180516 15:19:16.049"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${rc}</arg>
</arguments>
<msg timestamp="20180516 15:19:16.049" level="INFO">0</msg>
<status status="PASS" endtime="20180516 15:19:16.050" starttime="20180516 15:19:16.049"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:19:16.050" level="INFO">Length is 164</msg>
<msg timestamp="20180516 15:19:16.051" level="FAIL">'time="2018-05-16 13:19:15.96221" level=info msg="Connecting to etcd took 3.279966ms" durationInNs=3279966 loc="etcdv3/bytes_broker_impl.go(84)" logger=defaultLogger' should be empty.</msg>
<status status="FAIL" endtime="20180516 15:19:16.051" starttime="20180516 15:19:16.050"></status>
</kw>
<msg timestamp="20180516 15:19:16.051" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20180516 15:19:16.051" starttime="20180516 15:19:16.050"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} in container ${container}</arg>
<arg>level=WARN</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>One or more error occured during execution of a command ${command} in container ${container}</arg>
<arg>level=WARN</arg>
</arguments>
<msg timestamp="20180516 15:19:16.052" level="WARN">One or more error occured during execution of a command vpp-agent-ctl /opt/vpp-agent/dev/etcd.conf -get /vnf-agent/agent_vpp_1/vpp/status/v1/interface/loop0 in container vpp_agent_ctl</msg>
<status status="PASS" endtime="20180516 15:19:16.053" starttime="20180516 15:19:16.052"></status>
</kw>
<status status="PASS" endtime="20180516 15:19:16.053" starttime="20180516 15:19:16.051"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${container}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}***</arg>
</arguments>
<msg timestamp="20180516 15:19:16.054" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_vpp_agent_ctl.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_vpp_agent_ctl.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:19:16.054" starttime="20180516 15:19:16.053"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${container}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${container}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:19:16.055" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_vpp_agent_ctl.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_vpp_agent_ctl.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:19:16.055" starttime="20180516 15:19:16.054"></status>
</kw>
<status status="PASS" endtime="20180516 15:19:16.055" starttime="20180516 15:19:16.054"></status>
</kw>
<msg timestamp="20180516 15:19:16.055" level="INFO">${out} = </msg>
<status status="PASS" endtime="20180516 15:19:16.055" starttime="20180516 15:19:15.806"></status>
</kw>
<msg timestamp="20180516 15:19:16.055" level="INFO">${data} = </msg>
<status status="PASS" endtime="20180516 15:19:16.055" starttime="20180516 15:19:15.803"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${data}</arg>
</arguments>
<msg timestamp="20180516 15:19:16.056" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:19:16.056" starttime="20180516 15:19:16.056"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'''${data}'''==""</arg>
<arg>{}</arg>
<arg>${data}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20180516 15:19:16.056" level="INFO">${data} = {}</msg>
<status status="PASS" endtime="20180516 15:19:16.056" starttime="20180516 15:19:16.056"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${data}</arg>
</arguments>
<msg timestamp="20180516 15:19:16.057" level="INFO">{}</msg>
<status status="PASS" endtime="20180516 15:19:16.057" starttime="20180516 15:19:16.056"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>json.loads('''${data}''')</arg>
<arg>json</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180516 15:19:16.057" level="INFO">${output} = {}</msg>
<status status="PASS" endtime="20180516 15:19:16.057" starttime="20180516 15:19:16.057"></status>
</kw>
<msg timestamp="20180516 15:19:16.057" level="INFO">${state} = {}</msg>
<status status="PASS" endtime="20180516 15:19:16.057" starttime="20180516 15:19:15.800"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${state}</arg>
</arguments>
<msg timestamp="20180516 15:19:16.058" level="INFO">{}</msg>
<status status="PASS" endtime="20180516 15:19:16.058" starttime="20180516 15:19:16.058"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${state}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20180516 15:19:16.058" level="INFO">Length is 0</msg>
<msg timestamp="20180516 15:19:16.058" level="INFO">${length} = 0</msg>
<status status="PASS" endtime="20180516 15:19:16.058" starttime="20180516 15:19:16.058"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20180516 15:19:16.059" level="INFO">0</msg>
<status status="PASS" endtime="20180516 15:19:16.059" starttime="20180516 15:19:16.059"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${length} != 0</arg>
<arg>Set Variable</arg>
<arg>${state["internal_name"]}</arg>
</arguments>
<assign>
<var>${name}</var>
</assign>
<msg timestamp="20180516 15:19:16.059" level="INFO">${name} = None</msg>
<status status="PASS" endtime="20180516 15:19:16.060" starttime="20180516 15:19:16.059"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${name}</arg>
</arguments>
<msg timestamp="20180516 15:19:16.060" level="INFO">None</msg>
<status status="PASS" endtime="20180516 15:19:16.060" starttime="20180516 15:19:16.060"></status>
</kw>
<msg timestamp="20180516 15:19:16.060" level="INFO">${internal_name} = None</msg>
<status status="PASS" endtime="20180516 15:19:16.060" starttime="20180516 15:19:15.796"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${internal_name}</arg>
</arguments>
<msg timestamp="20180516 15:19:16.061" level="INFO">None</msg>
<status status="PASS" endtime="20180516 15:19:16.061" starttime="20180516 15:19:16.060"></status>
</kw>
<kw name="vat_term: Get Interface Index" library="vat_term">
<doc>Return interface index with specified name</doc>
<arguments>
<arg>${node}</arg>
<arg>${internal_name}</arg>
</arguments>
<assign>
<var>${internal_index}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${name}</arg>
</arguments>
<msg timestamp="20180516 15:19:16.061" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:19:16.062" level="INFO">None</msg>
<status status="PASS" endtime="20180516 15:19:16.062" starttime="20180516 15:19:16.061"></status>
</kw>
<kw name="vat_term: Interfaces Dump" library="vat_term">
<doc>Executing command sw_interface_dump</doc>
<arguments>
<arg>${node}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
</arguments>
<msg timestamp="20180516 15:19:16.062" level="INFO">agent_vpp_1</msg>
<status status="PASS" endtime="20180516 15:19:16.062" starttime="20180516 15:19:16.062"></status>
</kw>
<kw name="vat_term: Issue Command" library="vat_term">
<arguments>
<arg>${node}</arg>
<arg>sw_interface_dump</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${command}</arg>
<arg>${delay}</arg>
<arg>${node}_vat</arg>
<arg>${${node}_VPP_VAT_PROMPT}</arg>
</arguments>
<msg timestamp="20180516 15:19:16.064" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:19:16.064" level="INFO">sw_interface_dump</msg>
<msg timestamp="20180516 15:19:16.064" level="INFO">3s</msg>
<msg timestamp="20180516 15:19:16.065" level="INFO">agent_vpp_1_vat</msg>
<msg timestamp="20180516 15:19:16.065" level="INFO">vat#</msg>
<status status="PASS" endtime="20180516 15:19:16.065" starttime="20180516 15:19:16.064"></status>
</kw>
<kw name="Write To Machine Until String" library="ssh">
<doc>*Write Machine ${machine} sw_interface_dump*</doc>
<arguments>
<arg>${node}_vat</arg>
<arg>${command}</arg>
<arg>${${node}_VPP_VAT_PROMPT}</arg>
<arg>delay=${delay}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${string}</arg>
<arg>${delay}</arg>
</arguments>
<msg timestamp="20180516 15:19:16.082" level="INFO">agent_vpp_1_vat</msg>
<msg timestamp="20180516 15:19:16.082" level="INFO">sw_interface_dump</msg>
<msg timestamp="20180516 15:19:16.082" level="INFO">vat#</msg>
<msg timestamp="20180516 15:19:16.082" level="INFO">3s</msg>
<status status="PASS" endtime="20180516 15:19:16.082" starttime="20180516 15:19:16.082"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:19:16.083" starttime="20180516 15:19:16.083"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:19:16.083" level="INFO">${currdate} = 2018-05-16 15:19:16.083</msg>
<status status="PASS" endtime="20180516 15:19:16.083" starttime="20180516 15:19:16.083"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20180516 15:19:16.086" level="INFO">sw_interface_dump</msg>
<status status="PASS" endtime="20180516 15:19:16.087" starttime="20180516 15:19:16.084"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>${string}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20180516 15:19:16.163" level="INFO">[ 
  {
    "sw_if_index": 0,
    "sup_sw_if_index": 0,
    "l2_address_length": 0,
    "l2_address": [0, 0, 0, 0, 0, 0, 0, 0],
    "interface_name": "local0",
    "admin_up_down": 0,
    "link_up_down": 0,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 0,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 1,
    "sup_sw_if_index": 1,
    "l2_address_length": 6,
    "l2_address": [2, 0, 0, 170, 187, 0, 0, 0],
    "interface_name": "loop0",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 2,
    "sup_sw_if_index": 2,
    "l2_address_length": 6,
    "l2_address": [2, 254, 62, 253, 97, 40, 0, 0],
    "interface_name": "host-node_1_noeth_1",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 3,
    "sup_sw_if_index": 3,
    "l2_address_length": 6,
    "l2_address": [2, 254, 66, 152, 34, 8, 0, 0],
    "interface_name": "host-node_2_noeth_2",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 4,
    "sup_sw_if_index": 4,
    "l2_address_length": 6,
    "l2_address": [138, 241, 190, 144, 0, 0, 0, 0],
    "interface_name": "loop1",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 5,
    "sup_sw_if_index": 5,
    "l2_address_length": 6,
    "l2_address": [138, 241, 190, 144, 32, 0, 0, 0],
    "interface_name": "loop2",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  }
]
vat#</msg>
<msg timestamp="20180516 15:19:16.168" level="INFO">${out} = 
[ 
  {
    "sw_if_index": 0,
    "sup_sw_if_index": 0,
    "l2_address_length": 0,
    "l2_address": [0, 0, 0, 0, 0, 0, 0, 0],
    "interface_name": "local0",
    "admin_up_down": 0,
    "li...</msg>
<status status="PASS" endtime="20180516 15:19:16.168" starttime="20180516 15:19:16.087"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:19:16.169" level="INFO">
[ 
  {
    "sw_if_index": 0,
    "sup_sw_if_index": 0,
    "l2_address_length": 0,
    "l2_address": [0, 0, 0, 0, 0, 0, 0, 0],
    "interface_name": "local0",
    "admin_up_down": 0,
    "link_up_down": 0,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 0,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 1,
    "sup_sw_if_index": 1,
    "l2_address_length": 6,
    "l2_address": [2, 0, 0, 170, 187, 0, 0, 0],
    "interface_name": "loop0",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 2,
    "sup_sw_if_index": 2,
    "l2_address_length": 6,
    "l2_address": [2, 254, 62, 253, 97, 40, 0, 0],
    "interface_name": "host-node_1_noeth_1",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 3,
    "sup_sw_if_index": 3,
    "l2_address_length": 6,
    "l2_address": [2, 254, 66, 152, 34, 8, 0, 0],
    "interface_name": "host-node_2_noeth_2",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 4,
    "sup_sw_if_index": 4,
    "l2_address_length": 6,
    "l2_address": [138, 241, 190, 144, 0, 0, 0, 0],
    "interface_name": "loop1",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 5,
    "sup_sw_if_index": 5,
    "l2_address_length": 6,
    "l2_address": [138, 241, 190, 144, 32, 0, 0, 0],
    "interface_name": "loop2",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  }
]
vat#</msg>
<status status="PASS" endtime="20180516 15:19:16.169" starttime="20180516 15:19:16.169"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>delay=${delay}</arg>
</arguments>
<assign>
<var>${out2}</var>
</assign>
<msg timestamp="20180516 15:19:19.173" level="INFO">${out2} =  </msg>
<status status="PASS" endtime="20180516 15:19:19.173" starttime="20180516 15:19:16.169"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out2}</arg>
</arguments>
<msg timestamp="20180516 15:19:19.173" level="INFO"> </msg>
<status status="PASS" endtime="20180516 15:19:19.173" starttime="20180516 15:19:19.173"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${out2}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:19:19.174" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_vat.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_vat.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:19:19.174" starttime="20180516 15:19:19.174"></status>
</kw>
<msg timestamp="20180516 15:19:19.175" level="INFO">${out} = 
[ 
  {
    "sw_if_index": 0,
    "sup_sw_if_index": 0,
    "l2_address_length": 0,
    "l2_address": [0, 0, 0, 0, 0, 0, 0, 0],
    "interface_name": "local0",
    "admin_up_down": 0,
    "li...</msg>
<status status="PASS" endtime="20180516 15:19:19.175" starttime="20180516 15:19:16.081"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:19:19.175" level="INFO">
[ 
  {
    "sw_if_index": 0,
    "sup_sw_if_index": 0,
    "l2_address_length": 0,
    "l2_address": [0, 0, 0, 0, 0, 0, 0, 0],
    "interface_name": "local0",
    "admin_up_down": 0,
    "link_up_down": 0,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 0,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 1,
    "sup_sw_if_index": 1,
    "l2_address_length": 6,
    "l2_address": [2, 0, 0, 170, 187, 0, 0, 0],
    "interface_name": "loop0",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 2,
    "sup_sw_if_index": 2,
    "l2_address_length": 6,
    "l2_address": [2, 254, 62, 253, 97, 40, 0, 0],
    "interface_name": "host-node_1_noeth_1",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 3,
    "sup_sw_if_index": 3,
    "l2_address_length": 6,
    "l2_address": [2, 254, 66, 152, 34, 8, 0, 0],
    "interface_name": "host-node_2_noeth_2",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 4,
    "sup_sw_if_index": 4,
    "l2_address_length": 6,
    "l2_address": [138, 241, 190, 144, 0, 0, 0, 0],
    "interface_name": "loop1",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 5,
    "sup_sw_if_index": 5,
    "l2_address_length": 6,
    "l2_address": [138, 241, 190, 144, 32, 0, 0, 0],
    "interface_name": "loop2",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  }
]
vat# </msg>
<status status="PASS" endtime="20180516 15:19:19.175" starttime="20180516 15:19:19.175"></status>
</kw>
<msg timestamp="20180516 15:19:19.175" level="INFO">${out} = 
[ 
  {
    "sw_if_index": 0,
    "sup_sw_if_index": 0,
    "l2_address_length": 0,
    "l2_address": [0, 0, 0, 0, 0, 0, 0, 0],
    "interface_name": "local0",
    "admin_up_down": 0,
    "li...</msg>
<status status="PASS" endtime="20180516 15:19:19.176" starttime="20180516 15:19:16.063"></status>
</kw>
<msg timestamp="20180516 15:19:19.176" level="INFO">${out} = 
[ 
  {
    "sw_if_index": 0,
    "sup_sw_if_index": 0,
    "l2_address_length": 0,
    "l2_address": [0, 0, 0, 0, 0, 0, 0, 0],
    "interface_name": "local0",
    "admin_up_down": 0,
    "li...</msg>
<status status="PASS" endtime="20180516 15:19:19.176" starttime="20180516 15:19:16.062"></status>
</kw>
<kw name="Get Interface Index" library="vat_term">
<arguments>
<arg>${out}</arg>
<arg>${name}</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg timestamp="20180516 15:19:19.176" level="INFO">${index} = -1</msg>
<status status="PASS" endtime="20180516 15:19:19.176" starttime="20180516 15:19:19.176"></status>
</kw>
<msg timestamp="20180516 15:19:19.177" level="INFO">${internal_index} = -1</msg>
<status status="PASS" endtime="20180516 15:19:19.177" starttime="20180516 15:19:16.061"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${internal_index}</arg>
</arguments>
<msg timestamp="20180516 15:19:19.177" level="INFO">-1</msg>
<status status="PASS" endtime="20180516 15:19:19.177" starttime="20180516 15:19:19.177"></status>
</kw>
<kw name="vat_term: Interfaces Dump" library="vat_term">
<doc>Executing command sw_interface_dump</doc>
<arguments>
<arg>${node}</arg>
</arguments>
<assign>
<var>${interfaces}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
</arguments>
<msg timestamp="20180516 15:19:19.178" level="INFO">agent_vpp_1</msg>
<status status="PASS" endtime="20180516 15:19:19.178" starttime="20180516 15:19:19.178"></status>
</kw>
<kw name="vat_term: Issue Command" library="vat_term">
<arguments>
<arg>${node}</arg>
<arg>sw_interface_dump</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${command}</arg>
<arg>${delay}</arg>
<arg>${node}_vat</arg>
<arg>${${node}_VPP_VAT_PROMPT}</arg>
</arguments>
<msg timestamp="20180516 15:19:19.179" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:19:19.179" level="INFO">sw_interface_dump</msg>
<msg timestamp="20180516 15:19:19.179" level="INFO">3s</msg>
<msg timestamp="20180516 15:19:19.179" level="INFO">agent_vpp_1_vat</msg>
<msg timestamp="20180516 15:19:19.179" level="INFO">vat#</msg>
<status status="PASS" endtime="20180516 15:19:19.179" starttime="20180516 15:19:19.179"></status>
</kw>
<kw name="Write To Machine Until String" library="ssh">
<doc>*Write Machine ${machine} sw_interface_dump*</doc>
<arguments>
<arg>${node}_vat</arg>
<arg>${command}</arg>
<arg>${${node}_VPP_VAT_PROMPT}</arg>
<arg>delay=${delay}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${string}</arg>
<arg>${delay}</arg>
</arguments>
<msg timestamp="20180516 15:19:19.184" level="INFO">agent_vpp_1_vat</msg>
<msg timestamp="20180516 15:19:19.185" level="INFO">sw_interface_dump</msg>
<msg timestamp="20180516 15:19:19.185" level="INFO">vat#</msg>
<msg timestamp="20180516 15:19:19.185" level="INFO">3s</msg>
<status status="PASS" endtime="20180516 15:19:19.185" starttime="20180516 15:19:19.184"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:19:19.185" starttime="20180516 15:19:19.185"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:19:19.186" level="INFO">${currdate} = 2018-05-16 15:19:19.186</msg>
<status status="PASS" endtime="20180516 15:19:19.186" starttime="20180516 15:19:19.185"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20180516 15:19:19.188" level="INFO">sw_interface_dump</msg>
<status status="PASS" endtime="20180516 15:19:19.188" starttime="20180516 15:19:19.186"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>${string}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20180516 15:19:19.221" level="INFO">[ 
  {
    "sw_if_index": 0,
    "sup_sw_if_index": 0,
    "l2_address_length": 0,
    "l2_address": [0, 0, 0, 0, 0, 0, 0, 0],
    "interface_name": "local0",
    "admin_up_down": 0,
    "link_up_down": 0,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 0,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 1,
    "sup_sw_if_index": 1,
    "l2_address_length": 6,
    "l2_address": [2, 0, 0, 170, 187, 0, 0, 0],
    "interface_name": "loop0",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 2,
    "sup_sw_if_index": 2,
    "l2_address_length": 6,
    "l2_address": [2, 254, 62, 253, 97, 40, 0, 0],
    "interface_name": "host-node_1_noeth_1",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 3,
    "sup_sw_if_index": 3,
    "l2_address_length": 6,
    "l2_address": [2, 254, 66, 152, 34, 8, 0, 0],
    "interface_name": "host-node_2_noeth_2",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 4,
    "sup_sw_if_index": 4,
    "l2_address_length": 6,
    "l2_address": [138, 241, 190, 144, 0, 0, 0, 0],
    "interface_name": "loop1",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 5,
    "sup_sw_if_index": 5,
    "l2_address_length": 6,
    "l2_address": [138, 241, 190, 144, 32, 0, 0, 0],
    "interface_name": "loop2",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  }
]
vat#</msg>
<msg timestamp="20180516 15:19:19.222" level="INFO">${out} = 
[ 
  {
    "sw_if_index": 0,
    "sup_sw_if_index": 0,
    "l2_address_length": 0,
    "l2_address": [0, 0, 0, 0, 0, 0, 0, 0],
    "interface_name": "local0",
    "admin_up_down": 0,
    "li...</msg>
<status status="PASS" endtime="20180516 15:19:19.222" starttime="20180516 15:19:19.188"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:19:19.222" level="INFO">
[ 
  {
    "sw_if_index": 0,
    "sup_sw_if_index": 0,
    "l2_address_length": 0,
    "l2_address": [0, 0, 0, 0, 0, 0, 0, 0],
    "interface_name": "local0",
    "admin_up_down": 0,
    "link_up_down": 0,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 0,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 1,
    "sup_sw_if_index": 1,
    "l2_address_length": 6,
    "l2_address": [2, 0, 0, 170, 187, 0, 0, 0],
    "interface_name": "loop0",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 2,
    "sup_sw_if_index": 2,
    "l2_address_length": 6,
    "l2_address": [2, 254, 62, 253, 97, 40, 0, 0],
    "interface_name": "host-node_1_noeth_1",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 3,
    "sup_sw_if_index": 3,
    "l2_address_length": 6,
    "l2_address": [2, 254, 66, 152, 34, 8, 0, 0],
    "interface_name": "host-node_2_noeth_2",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 4,
    "sup_sw_if_index": 4,
    "l2_address_length": 6,
    "l2_address": [138, 241, 190, 144, 0, 0, 0, 0],
    "interface_name": "loop1",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 5,
    "sup_sw_if_index": 5,
    "l2_address_length": 6,
    "l2_address": [138, 241, 190, 144, 32, 0, 0, 0],
    "interface_name": "loop2",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  }
]
vat#</msg>
<status status="PASS" endtime="20180516 15:19:19.222" starttime="20180516 15:19:19.222"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>delay=${delay}</arg>
</arguments>
<assign>
<var>${out2}</var>
</assign>
<msg timestamp="20180516 15:19:22.224" level="INFO">${out2} =  </msg>
<status status="PASS" endtime="20180516 15:19:22.224" starttime="20180516 15:19:19.222"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out2}</arg>
</arguments>
<msg timestamp="20180516 15:19:22.225" level="INFO"> </msg>
<status status="PASS" endtime="20180516 15:19:22.225" starttime="20180516 15:19:22.224"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${out2}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:19:22.226" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_vat.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_vat.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:19:22.227" starttime="20180516 15:19:22.225"></status>
</kw>
<msg timestamp="20180516 15:19:22.227" level="INFO">${out} = 
[ 
  {
    "sw_if_index": 0,
    "sup_sw_if_index": 0,
    "l2_address_length": 0,
    "l2_address": [0, 0, 0, 0, 0, 0, 0, 0],
    "interface_name": "local0",
    "admin_up_down": 0,
    "li...</msg>
<status status="PASS" endtime="20180516 15:19:22.227" starttime="20180516 15:19:19.184"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:19:22.228" level="INFO">
[ 
  {
    "sw_if_index": 0,
    "sup_sw_if_index": 0,
    "l2_address_length": 0,
    "l2_address": [0, 0, 0, 0, 0, 0, 0, 0],
    "interface_name": "local0",
    "admin_up_down": 0,
    "link_up_down": 0,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 0,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 1,
    "sup_sw_if_index": 1,
    "l2_address_length": 6,
    "l2_address": [2, 0, 0, 170, 187, 0, 0, 0],
    "interface_name": "loop0",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 2,
    "sup_sw_if_index": 2,
    "l2_address_length": 6,
    "l2_address": [2, 254, 62, 253, 97, 40, 0, 0],
    "interface_name": "host-node_1_noeth_1",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 3,
    "sup_sw_if_index": 3,
    "l2_address_length": 6,
    "l2_address": [2, 254, 66, 152, 34, 8, 0, 0],
    "interface_name": "host-node_2_noeth_2",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 4,
    "sup_sw_if_index": 4,
    "l2_address_length": 6,
    "l2_address": [138, 241, 190, 144, 0, 0, 0, 0],
    "interface_name": "loop1",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 5,
    "sup_sw_if_index": 5,
    "l2_address_length": 6,
    "l2_address": [138, 241, 190, 144, 32, 0, 0, 0],
    "interface_name": "loop2",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  }
]
vat# </msg>
<status status="PASS" endtime="20180516 15:19:22.228" starttime="20180516 15:19:22.227"></status>
</kw>
<msg timestamp="20180516 15:19:22.228" level="INFO">${out} = 
[ 
  {
    "sw_if_index": 0,
    "sup_sw_if_index": 0,
    "l2_address_length": 0,
    "l2_address": [0, 0, 0, 0, 0, 0, 0, 0],
    "interface_name": "local0",
    "admin_up_down": 0,
    "li...</msg>
<status status="PASS" endtime="20180516 15:19:22.228" starttime="20180516 15:19:19.178"></status>
</kw>
<msg timestamp="20180516 15:19:22.229" level="INFO">${interfaces} = 
[ 
  {
    "sw_if_index": 0,
    "sup_sw_if_index": 0,
    "l2_address_length": 0,
    "l2_address": [0, 0, 0, 0, 0, 0, 0, 0],
    "interface_name": "local0",
    "admin_up_down": 0,
    "li...</msg>
<status status="PASS" endtime="20180516 15:19:22.229" starttime="20180516 15:19:19.177"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${interfaces}</arg>
</arguments>
<msg timestamp="20180516 15:19:22.229" level="INFO">
[ 
  {
    "sw_if_index": 0,
    "sup_sw_if_index": 0,
    "l2_address_length": 0,
    "l2_address": [0, 0, 0, 0, 0, 0, 0, 0],
    "interface_name": "local0",
    "admin_up_down": 0,
    "link_up_down": 0,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 0,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 1,
    "sup_sw_if_index": 1,
    "l2_address_length": 6,
    "l2_address": [2, 0, 0, 170, 187, 0, 0, 0],
    "interface_name": "loop0",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 2,
    "sup_sw_if_index": 2,
    "l2_address_length": 6,
    "l2_address": [2, 254, 62, 253, 97, 40, 0, 0],
    "interface_name": "host-node_1_noeth_1",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 3,
    "sup_sw_if_index": 3,
    "l2_address_length": 6,
    "l2_address": [2, 254, 66, 152, 34, 8, 0, 0],
    "interface_name": "host-node_2_noeth_2",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 4,
    "sup_sw_if_index": 4,
    "l2_address_length": 6,
    "l2_address": [138, 241, 190, 144, 0, 0, 0, 0],
    "interface_name": "loop1",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 5,
    "sup_sw_if_index": 5,
    "l2_address_length": 6,
    "l2_address": [138, 241, 190, 144, 32, 0, 0, 0],
    "interface_name": "loop2",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  }
]
vat# </msg>
<status status="PASS" endtime="20180516 15:19:22.229" starttime="20180516 15:19:22.229"></status>
</kw>
<kw name="Get Interface State" library="vat_term">
<arguments>
<arg>${interfaces}</arg>
<arg>${internal_index}</arg>
</arguments>
<assign>
<var>${int_state}</var>
</assign>
<msg timestamp="20180516 15:19:22.230" level="INFO">${int_state} = -1</msg>
<status status="PASS" endtime="20180516 15:19:22.230" starttime="20180516 15:19:22.230"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${int_state}</arg>
</arguments>
<msg timestamp="20180516 15:19:22.231" level="INFO">-1</msg>
<status status="PASS" endtime="20180516 15:19:22.231" starttime="20180516 15:19:22.231"></status>
</kw>
<kw name="vpp_term: Get Interface IPs" library="vpp_term">
<arguments>
<arg>${node}</arg>
<arg>${internal_name}</arg>
</arguments>
<assign>
<var>${ipv4_list}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${interface}</arg>
</arguments>
<msg timestamp="20180516 15:19:22.232" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:19:22.232" level="INFO">None</msg>
<status status="PASS" endtime="20180516 15:19:22.232" starttime="20180516 15:19:22.232"></status>
</kw>
<kw name="vpp_term: Show Interfaces Address" library="vpp_term">
<doc>Show interfaces address through vpp terminal</doc>
<arguments>
<arg>${node}</arg>
<arg>${interface}</arg>
</arguments>
<assign>
<var>${int_addr}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${interface}</arg>
</arguments>
<msg timestamp="20180516 15:19:22.234" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:19:22.234" level="INFO">None</msg>
<status status="PASS" endtime="20180516 15:19:22.234" starttime="20180516 15:19:22.233"></status>
</kw>
<kw name="vpp_term: Issue Command" library="vpp_term">
<arguments>
<arg>${node}</arg>
<arg>sh int addr ${interface}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${command}</arg>
<arg>${delay}</arg>
<arg>${node}_term</arg>
<arg>${${node}_VPP_TERM_PROMPT}</arg>
</arguments>
<msg timestamp="20180516 15:19:22.235" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:19:22.235" level="INFO">sh int addr None</msg>
<msg timestamp="20180516 15:19:22.235" level="INFO">3s</msg>
<msg timestamp="20180516 15:19:22.235" level="INFO">agent_vpp_1_term</msg>
<msg timestamp="20180516 15:19:22.235" level="INFO">vpp#</msg>
<status status="PASS" endtime="20180516 15:19:22.236" starttime="20180516 15:19:22.235"></status>
</kw>
<kw name="Write To Machine Until String" library="ssh">
<doc>*Write Machine ${machine} sh int addr None*</doc>
<arguments>
<arg>${node}_term</arg>
<arg>${command}</arg>
<arg>${${node}_VPP_TERM_PROMPT}</arg>
<arg>delay=${delay}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${string}</arg>
<arg>${delay}</arg>
</arguments>
<msg timestamp="20180516 15:19:22.242" level="INFO">agent_vpp_1_term</msg>
<msg timestamp="20180516 15:19:22.242" level="INFO">sh int addr None</msg>
<msg timestamp="20180516 15:19:22.242" level="INFO">vpp#</msg>
<msg timestamp="20180516 15:19:22.242" level="INFO">3s</msg>
<status status="PASS" endtime="20180516 15:19:22.242" starttime="20180516 15:19:22.242"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:19:22.243" starttime="20180516 15:19:22.242"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:19:22.243" level="INFO">${currdate} = 2018-05-16 15:19:22.243</msg>
<status status="PASS" endtime="20180516 15:19:22.243" starttime="20180516 15:19:22.243"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20180516 15:19:22.247" level="INFO">sh int addr None</msg>
<status status="PASS" endtime="20180516 15:19:22.248" starttime="20180516 15:19:22.243"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>${string}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20180516 15:19:22.249" level="INFO">show interface: unknown input `None'
vpp#</msg>
<msg timestamp="20180516 15:19:22.249" level="INFO">${out} = show interface: unknown input `None'
vpp#</msg>
<status status="PASS" endtime="20180516 15:19:22.249" starttime="20180516 15:19:22.248"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:19:22.249" level="INFO">show interface: unknown input `None'
vpp#</msg>
<status status="PASS" endtime="20180516 15:19:22.249" starttime="20180516 15:19:22.249"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>delay=${delay}</arg>
</arguments>
<assign>
<var>${out2}</var>
</assign>
<msg timestamp="20180516 15:19:25.253" level="INFO">${out2} =  </msg>
<status status="PASS" endtime="20180516 15:19:25.254" starttime="20180516 15:19:22.249"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out2}</arg>
</arguments>
<msg timestamp="20180516 15:19:25.254" level="INFO"> </msg>
<status status="PASS" endtime="20180516 15:19:25.254" starttime="20180516 15:19:25.254"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${out2}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:19:25.255" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_term.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_term.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:19:25.255" starttime="20180516 15:19:25.255"></status>
</kw>
<msg timestamp="20180516 15:19:25.256" level="INFO">${out} = show interface: unknown input `None'
vpp# </msg>
<status status="PASS" endtime="20180516 15:19:25.256" starttime="20180516 15:19:22.241"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:19:25.256" level="INFO">show interface: unknown input `None'
vpp# </msg>
<status status="PASS" endtime="20180516 15:19:25.256" starttime="20180516 15:19:25.256"></status>
</kw>
<msg timestamp="20180516 15:19:25.257" level="INFO">${out} = show interface: unknown input `None'
vpp# </msg>
<status status="PASS" endtime="20180516 15:19:25.257" starttime="20180516 15:19:22.234"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:19:25.257" level="INFO">show interface: unknown input `None'
vpp# </msg>
<status status="PASS" endtime="20180516 15:19:25.257" starttime="20180516 15:19:25.257"></status>
</kw>
<msg timestamp="20180516 15:19:25.257" level="INFO">${int_addr} = show interface: unknown input `None'
vpp# </msg>
<status status="PASS" endtime="20180516 15:19:25.257" starttime="20180516 15:19:22.233"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${int_addr}</arg>
</arguments>
<msg timestamp="20180516 15:19:25.258" level="INFO">show interface: unknown input `None'
vpp# </msg>
<status status="PASS" endtime="20180516 15:19:25.258" starttime="20180516 15:19:25.258"></status>
</kw>
<kw name="Find IPV4 In Text" library="vpp_term">
<arguments>
<arg>${int_addr}</arg>
</arguments>
<assign>
<var>@{ipv4_list}</var>
</assign>
<msg timestamp="20180516 15:19:25.258" level="INFO">@{ipv4_list} = [ ]</msg>
<status status="PASS" endtime="20180516 15:19:25.258" starttime="20180516 15:19:25.258"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${ipv4_list}</arg>
</arguments>
<msg timestamp="20180516 15:19:25.259" level="INFO">[]</msg>
<status status="PASS" endtime="20180516 15:19:25.259" starttime="20180516 15:19:25.259"></status>
</kw>
<msg timestamp="20180516 15:19:25.259" level="INFO">${ipv4_list} = []</msg>
<status status="PASS" endtime="20180516 15:19:25.260" starttime="20180516 15:19:22.231"></status>
</kw>
<kw name="vpp_term: Get Interface IP6 IPs" library="vpp_term">
<doc>Get all IPv6 addresses for the specified interface.</doc>
<arguments>
<arg>${node}</arg>
<arg>${internal_name}</arg>
</arguments>
<assign>
<var>${ipv6_list}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${interface}</arg>
</arguments>
<msg timestamp="20180516 15:19:25.261" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:19:25.261" level="INFO">None</msg>
<status status="PASS" endtime="20180516 15:19:25.261" starttime="20180516 15:19:25.260"></status>
</kw>
<kw name="vpp_term: Show Interfaces Address" library="vpp_term">
<doc>Show interfaces address through vpp terminal</doc>
<arguments>
<arg>${node}</arg>
<arg>${interface}</arg>
</arguments>
<assign>
<var>${int_addr}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${interface}</arg>
</arguments>
<msg timestamp="20180516 15:19:25.262" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:19:25.262" level="INFO">None</msg>
<status status="PASS" endtime="20180516 15:19:25.262" starttime="20180516 15:19:25.262"></status>
</kw>
<kw name="vpp_term: Issue Command" library="vpp_term">
<arguments>
<arg>${node}</arg>
<arg>sh int addr ${interface}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${command}</arg>
<arg>${delay}</arg>
<arg>${node}_term</arg>
<arg>${${node}_VPP_TERM_PROMPT}</arg>
</arguments>
<msg timestamp="20180516 15:19:25.263" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:19:25.263" level="INFO">sh int addr None</msg>
<msg timestamp="20180516 15:19:25.263" level="INFO">3s</msg>
<msg timestamp="20180516 15:19:25.263" level="INFO">agent_vpp_1_term</msg>
<msg timestamp="20180516 15:19:25.263" level="INFO">vpp#</msg>
<status status="PASS" endtime="20180516 15:19:25.263" starttime="20180516 15:19:25.263"></status>
</kw>
<kw name="Write To Machine Until String" library="ssh">
<doc>*Write Machine ${machine} sh int addr None*</doc>
<arguments>
<arg>${node}_term</arg>
<arg>${command}</arg>
<arg>${${node}_VPP_TERM_PROMPT}</arg>
<arg>delay=${delay}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${string}</arg>
<arg>${delay}</arg>
</arguments>
<msg timestamp="20180516 15:19:25.271" level="INFO">agent_vpp_1_term</msg>
<msg timestamp="20180516 15:19:25.271" level="INFO">sh int addr None</msg>
<msg timestamp="20180516 15:19:25.271" level="INFO">vpp#</msg>
<msg timestamp="20180516 15:19:25.271" level="INFO">3s</msg>
<status status="PASS" endtime="20180516 15:19:25.271" starttime="20180516 15:19:25.271"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:19:25.272" starttime="20180516 15:19:25.271"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:19:25.272" level="INFO">${currdate} = 2018-05-16 15:19:25.272</msg>
<status status="PASS" endtime="20180516 15:19:25.272" starttime="20180516 15:19:25.272"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20180516 15:19:25.278" level="INFO">sh int addr None</msg>
<status status="PASS" endtime="20180516 15:19:25.278" starttime="20180516 15:19:25.272"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>${string}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20180516 15:19:25.279" level="INFO">show interface: unknown input `None'
vpp#</msg>
<msg timestamp="20180516 15:19:25.279" level="INFO">${out} = show interface: unknown input `None'
vpp#</msg>
<status status="PASS" endtime="20180516 15:19:25.279" starttime="20180516 15:19:25.278"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:19:25.280" level="INFO">show interface: unknown input `None'
vpp#</msg>
<status status="PASS" endtime="20180516 15:19:25.280" starttime="20180516 15:19:25.279"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>delay=${delay}</arg>
</arguments>
<assign>
<var>${out2}</var>
</assign>
<msg timestamp="20180516 15:19:28.281" level="INFO">${out2} =  </msg>
<status status="PASS" endtime="20180516 15:19:28.281" starttime="20180516 15:19:25.280"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out2}</arg>
</arguments>
<msg timestamp="20180516 15:19:28.282" level="INFO"> </msg>
<status status="PASS" endtime="20180516 15:19:28.282" starttime="20180516 15:19:28.281"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${out2}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:19:28.283" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_term.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_term.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:19:28.283" starttime="20180516 15:19:28.282"></status>
</kw>
<msg timestamp="20180516 15:19:28.283" level="INFO">${out} = show interface: unknown input `None'
vpp# </msg>
<status status="PASS" endtime="20180516 15:19:28.283" starttime="20180516 15:19:25.268"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:19:28.284" level="INFO">show interface: unknown input `None'
vpp# </msg>
<status status="PASS" endtime="20180516 15:19:28.284" starttime="20180516 15:19:28.283"></status>
</kw>
<msg timestamp="20180516 15:19:28.284" level="INFO">${out} = show interface: unknown input `None'
vpp# </msg>
<status status="PASS" endtime="20180516 15:19:28.284" starttime="20180516 15:19:25.262"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:19:28.284" level="INFO">show interface: unknown input `None'
vpp# </msg>
<status status="PASS" endtime="20180516 15:19:28.284" starttime="20180516 15:19:28.284"></status>
</kw>
<msg timestamp="20180516 15:19:28.284" level="INFO">${int_addr} = show interface: unknown input `None'
vpp# </msg>
<status status="PASS" endtime="20180516 15:19:28.284" starttime="20180516 15:19:25.261"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${int_addr}</arg>
</arguments>
<msg timestamp="20180516 15:19:28.285" level="INFO">show interface: unknown input `None'
vpp# </msg>
<status status="PASS" endtime="20180516 15:19:28.285" starttime="20180516 15:19:28.285"></status>
</kw>
<kw name="Find IPV6 In Text" library="vpp_term">
<doc>Find and return all IPv6 addresses in the given string.</doc>
<arguments>
<arg>${int_addr}</arg>
</arguments>
<assign>
<var>@{ipv6_list}</var>
</assign>
<msg timestamp="20180516 15:19:28.285" level="INFO">@{ipv6_list} = [ ]</msg>
<status status="PASS" endtime="20180516 15:19:28.285" starttime="20180516 15:19:28.285"></status>
</kw>
<kw type="for" name="${address} IN [ @{ipv6_list} ]">
<status status="PASS" endtime="20180516 15:19:28.286" starttime="20180516 15:19:28.285"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${ipv6_list}</arg>
</arguments>
<msg timestamp="20180516 15:19:28.286" level="INFO">[]</msg>
<status status="PASS" endtime="20180516 15:19:28.286" starttime="20180516 15:19:28.286"></status>
</kw>
<msg timestamp="20180516 15:19:28.286" level="INFO">${ipv6_list} = []</msg>
<status status="PASS" endtime="20180516 15:19:28.286" starttime="20180516 15:19:25.260"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${int_state["admin_up_down"]}</arg>
</arguments>
<assign>
<var>${enabled}</var>
</assign>
<msg timestamp="20180516 15:19:28.287" level="FAIL">Resolving variable '${int_state["admin_up_down"]}' failed: TypeError: 'int' object has no attribute '__getitem__'</msg>
<status status="FAIL" endtime="20180516 15:19:28.287" starttime="20180516 15:19:28.286"></status>
</kw>
<status status="FAIL" endtime="20180516 15:19:28.287" starttime="20180516 15:19:15.794"></status>
</kw>
<kw type="teardown" name="TestTeardown">
<kw name="Make Datastore Snapshots" library="setup-teardown">
<arguments>
<arg>${TEST_NAME}_test_teardown</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tag}</arg>
</arguments>
<msg timestamp="20180516 15:19:28.288" level="INFO">Check loop1 Is Created_test_teardown</msg>
<status status="PASS" endtime="20180516 15:19:28.288" starttime="20180516 15:19:28.288"></status>
</kw>
<kw name="Create Next Snapshot Prefix" library="setup-teardown">
<assign>
<var>${prefix}</var>
</assign>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>str(${snapshot_num}).zfill(3)</arg>
</arguments>
<assign>
<var>${prefix}</var>
</assign>
<msg timestamp="20180516 15:19:28.289" level="INFO">${prefix} = 017</msg>
<status status="PASS" endtime="20180516 15:19:28.289" starttime="20180516 15:19:28.289"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${snapshot_num}+1</arg>
</arguments>
<assign>
<var>${snapshot_num}</var>
</assign>
<msg timestamp="20180516 15:19:28.290" level="INFO">${snapshot_num} = 18</msg>
<status status="PASS" endtime="20180516 15:19:28.290" starttime="20180516 15:19:28.290"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${snapshot_num}</arg>
</arguments>
<msg timestamp="20180516 15:19:28.290" level="INFO">${snapshot_num} = 18</msg>
<status status="PASS" endtime="20180516 15:19:28.290" starttime="20180516 15:19:28.290"></status>
</kw>
<msg timestamp="20180516 15:19:28.290" level="INFO">${prefix} = 017</msg>
<status status="PASS" endtime="20180516 15:19:28.290" starttime="20180516 15:19:28.289"></status>
</kw>
<kw name="Take ETCD Snapshots" library="setup-teardown">
<arguments>
<arg>${prefix}_${tag}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tag}</arg>
</arguments>
<msg timestamp="20180516 15:19:28.291" level="INFO">017_Check loop1 Is Created_test_teardown</msg>
<status status="PASS" endtime="20180516 15:19:28.291" starttime="20180516 15:19:28.291"></status>
</kw>
<kw name="Get ETCD Dump" library="setup-teardown">
<assign>
<var>${dump}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DOCKER_COMMAND} exec etcd etcdctl get --prefix="true" ""</arg>
</arguments>
<assign>
<var>${command}</var>
</assign>
<msg timestamp="20180516 15:19:28.292" level="INFO">${command} = sudo docker exec etcd etcdctl get --prefix="true" ""</msg>
<status status="PASS" endtime="20180516 15:19:28.292" starttime="20180516 15:19:28.292"></status>
</kw>
<kw name="Execute On Machine" library="ssh">
<doc>*Execute On Machine ${machine} sudo docker exec etcd etcdctl get --prefix="true" ""*</doc>
<arguments>
<arg>docker</arg>
<arg>${command}</arg>
<arg>log=false</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${log}</arg>
</arguments>
<msg timestamp="20180516 15:19:28.298" level="INFO">docker</msg>
<msg timestamp="20180516 15:19:28.298" level="INFO">sudo docker exec etcd etcdctl get --prefix="true" ""</msg>
<msg timestamp="20180516 15:19:28.298" level="INFO">false</msg>
<status status="PASS" endtime="20180516 15:19:28.298" starttime="20180516 15:19:28.298"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:19:28.299" starttime="20180516 15:19:28.298"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:19:28.299" level="INFO">${currdate} = 2018-05-16 15:19:28.299</msg>
<status status="PASS" endtime="20180516 15:19:28.299" starttime="20180516 15:19:28.299"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20180516 15:19:28.299" level="INFO">Executing command 'sudo docker exec etcd etcdctl get --prefix="true" ""'.</msg>
<msg timestamp="20180516 15:19:28.644" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:19:28.644" level="INFO">${out} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<msg timestamp="20180516 15:19:28.644" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20180516 15:19:28.644" starttime="20180516 15:19:28.299"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${out}</arg>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:19:28.645" level="INFO">/sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-containers","description":"Wire 2 VNF containers to the vpp switch","type":2,"elements":[{"container":"node_1","port_label":"node1_veth","etcd_vpp_switch_key":"agent_vpp_1","ipv4_addr":"10.0.0.10","type":3},{"container":"node_2","port_label":"node2_veth","etcd_vpp_switch_key":"agent_vpp_1","ipv4_addr":"10.0.0.11","type":3}]}
/sfc-controller/v1/SP
{"mtu":1500,"starting_vlan_id":5000,"default_static_route_weight":5,"dynamic_bridge_parms":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true},"static_bridge_parms":{"forward":true}}
/sfc-controller/v1/id/HE/agent_vpp_1
{"name":"agent_vpp_1"}
/sfc-controller/v1/id/SFC/two-sample-vnf-containers/node_1_node1_veth
{"sfc_name":"two-sample-vnf-containers","container":"node_1","port":"node1_veth","mac_addr_id":1,"veth_id":1}
/sfc-controller/v1/id/SFC/two-sample-vnf-containers/node_2_node2_veth
{"sfc_name":"two-sample-vnf-containers","container":"node_2","port":"node2_veth","mac_addr_id":2,"veth_id":2}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VNF_node_1_node1_veth
{"name":"IF_VETH_VNF_node_1_node1_veth","enabled":true,"phys_address":"02:00:00:00:00:01","mtu":1500,"host_if_name":"node1_veth","ip_addresses":["10.0.0.10/24"],"namespace":{"type":1,"microservice":"node_1"},"veth":{"peer_if_name":"IF_VETH_VSWITCH_node_1_node1_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VNF_node_2_node2_veth
{"name":"IF_VETH_VNF_node_2_node2_veth","enabled":true,"phys_address":"02:00:00:00:00:02","mtu":1500,"host_if_name":"node2_veth","ip_addresses":["10.0.0.11/24"],"namespace":{"type":1,"microservice":"node_2"},"veth":{"peer_if_name":"IF_VETH_VSWITCH_node_2_node2_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VSWITCH_node_1_node1_veth
{"name":"IF_VETH_VSWITCH_node_1_node1_veth","enabled":true,"mtu":1500,"host_if_name":"node_1_noeth_1","namespace":{"type":1,"microservice":"agent_vpp_1"},"veth":{"peer_if_name":"IF_VETH_VNF_node_1_node1_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VSWITCH_node_2_node2_veth
{"name":"IF_VETH_VSWITCH_node_2_node2_veth","enabled":true,"mtu":1500,"host_if_name":"node_2_noeth_2","namespace":{"type":1,"microservice":"agent_vpp_1"},"veth":{"peer_if_name":"IF_VETH_VNF_node_2_node2_veth"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/BD_INTERNAL_EW_L2FIB_agent_vpp_1
{"name":"BD_INTERNAL_EW_L2FIB_agent_vpp_1","forward":true}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/BD_INTERNAL_EW_agent_vpp_1
{"name":"BD_INTERNAL_EW_agent_vpp_1","flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true,"interfaces":[{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth"},{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth"}]}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth
{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","type":4,"enabled":true,"mtu":1500,"afpacket":{"host_if_name":"node_1_noeth_1"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth
{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","type":4,"enabled":true,"mtu":1500,"afpacket":{"host_if_name":"node_2_noeth_2"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_LOOPBACK_H_agent_vpp_1
{"name":"IF_LOOPBACK_H_agent_vpp_1","enabled":true,"phys_address":"02:00:00:AA:BB:00","mtu":1500,"ip_addresses":["6.0.0.100"]}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/loop0
{
  "name": "loop0",
  "type": 0,
  "enabled": true,
  "phys_address": "8a:f1:be:90:00:00",
  "mtu": 1500,
  "vrf": 0,
  "ip_addresses": [
    "20.1.1.1/24"
  ]
}


/vnf-agent/agent_vpp_1/vpp/config/v1/interface/loop1
{
  "name": "loop1",
  "type": 0,
  "enabled": true,
  "phys_address": "8a:f1:be:90:20:00",
  "mtu": 1500,
  "vrf": 0,
  "ip_addresses": [
    "30.1.1.1/24"
  ]
}


/vnf-agent/agent_vpp_1/vpp/status/v1/bd/BD_INTERNAL_EW_L2FIB_agent_vpp_1
{"index":2,"internal_name":"BD_INTERNAL_EW_L2FIB_agent_vpp_1","bvi_interface":"not_set","last_change":1526476631,"l2_params":{"forward":true}}
/vnf-agent/agent_vpp_1/vpp/status/v1/bd/BD_INTERNAL_EW_agent_vpp_1
{"index":1,"internal_name":"BD_INTERNAL_EW_agent_vpp_1","bvi_interface":"not_set","interface_count":2,"last_change":1526476631,"l2_params":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true},"interfaces":[{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","sw_if_index":2},{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","sw_if_index":3}]}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth
{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","internal_name":"host-node_1_noeth_1","if_index":2,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:3e:fd:61:28","mtu":1500,"statistics":{"in_packets":20,"in_bytes":1552}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth
{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","internal_name":"host-node_2_noeth_2","if_index":3,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:42:98:22:08","mtu":1500,"statistics":{"in_packets":22,"in_bytes":1732}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_LOOPBACK_H_agent_vpp_1
{"name":"IF_LOOPBACK_H_agent_vpp_1","internal_name":"loop0","if_index":1,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:00:00:aa:bb:00","mtu":1500,"statistics":{}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/local0
{"name":"local0","internal_name":"local0","admin_status":2,"oper_status":2,"statistics":{}}
/vnf-agent/node_1/check/status/v1/agent
{"build_version":"v1.1-5-g55e9977","build_date":"2018-03-06T11:05+00:00","state":1,"start_time":1526476614,"last_change":1526476619,"last_update":1526476765,"commit_hash":"55e99770087087fa8e41a980a8b6257c80c93f4c"}
/vnf-agent/node_1/check/status/v1/plugin/etcdv3
{"state":1,"last_change":1526476619,"last_update":1526476765}
/vnf-agent/node_1/check/status/v1/plugin/kafka
{"state":1,"last_change":1526476619,"last_update":1526476765}
/vnf-agent/node_2/check/status/v1/agent
{"build_version":"v1.1-5-g55e9977","build_date":"2018-03-06T11:05+00:00","state":1,"start_time":1526476623,"last_change":1526476628,"last_update":1526476763,"commit_hash":"55e99770087087fa8e41a980a8b6257c80c93f4c"}
/vnf-agent/node_2/check/status/v1/plugin/etcdv3
{"state":1,"last_change":1526476628,"last_update":1526476763}
/vnf-agent/node_2/check/status/v1/plugin/kafka
{"state":1,"last_change":1526476628,"last_update":1526476763}</msg>
<msg timestamp="20180516 15:19:28.645" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:19:28.645" starttime="20180516 15:19:28.645"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:19:28.646" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:19:28.646" starttime="20180516 15:19:28.646"></status>
</kw>
<msg timestamp="20180516 15:19:28.646" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:19:28.646" starttime="20180516 15:19:28.646"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} on ${machine}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:19:28.647" starttime="20180516 15:19:28.647"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${log}'=='true'</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:19:28.647" starttime="20180516 15:19:28.647"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:19:28.648" starttime="20180516 15:19:28.648"></status>
</kw>
<msg timestamp="20180516 15:19:28.648" level="INFO">${out} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<status status="PASS" endtime="20180516 15:19:28.649" starttime="20180516 15:19:28.297"></status>
</kw>
<msg timestamp="20180516 15:19:28.649" level="INFO">${dump} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<status status="PASS" endtime="20180516 15:19:28.649" starttime="20180516 15:19:28.292"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/etcd_dump-${tag}.txt</arg>
<arg>${dump}</arg>
</arguments>
<msg timestamp="20180516 15:19:28.649" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/etcd_dump-017_Check loop1 Is Created_test_teardown.txt"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/etcd_dump-017_Check loop1 Is Created_test_teardown.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:19:28.650" starttime="20180516 15:19:28.649"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${dump}</arg>
<arg>/error/</arg>
</arguments>
<assign>
<var>${errors}</var>
</assign>
<msg timestamp="20180516 15:19:28.650" level="INFO">0 out of 82 lines matched</msg>
<msg timestamp="20180516 15:19:28.650" level="INFO">${errors} = </msg>
<status status="PASS" endtime="20180516 15:19:28.650" starttime="20180516 15:19:28.650"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${errors}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${errors}</arg>
</arguments>
<msg timestamp="20180516 15:19:28.651" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:19:28.651" starttime="20180516 15:19:28.651"></status>
</kw>
<msg timestamp="20180516 15:19:28.651" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:19:28.651" starttime="20180516 15:19:28.651"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>Errors detected in keys: ${errors}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:19:28.652" starttime="20180516 15:19:28.652"></status>
</kw>
<status status="PASS" endtime="20180516 15:19:28.652" starttime="20180516 15:19:28.291"></status>
</kw>
<status status="PASS" endtime="20180516 15:19:28.652" starttime="20180516 15:19:28.287"></status>
</kw>
<status status="PASS" endtime="20180516 15:19:28.652" starttime="20180516 15:19:28.287"></status>
</kw>
<status status="FAIL" endtime="20180516 15:19:28.652" critical="yes" starttime="20180516 15:19:12.334">Resolving variable '${int_state["admin_up_down"]}' failed: TypeError: 'int' object has no attribute '__getitem__'</status>
</test>
<test id="s1-t9" name="Create BD fo Loopbacks">
<kw type="setup" name="TestSetup">
<kw name="Make Datastore Snapshots" library="setup-teardown">
<arguments>
<arg>${TEST_NAME}_test_setup</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tag}</arg>
</arguments>
<msg timestamp="20180516 15:19:28.655" level="INFO">Create BD fo Loopbacks_test_setup</msg>
<status status="PASS" endtime="20180516 15:19:28.655" starttime="20180516 15:19:28.654"></status>
</kw>
<kw name="Create Next Snapshot Prefix" library="setup-teardown">
<assign>
<var>${prefix}</var>
</assign>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>str(${snapshot_num}).zfill(3)</arg>
</arguments>
<assign>
<var>${prefix}</var>
</assign>
<msg timestamp="20180516 15:19:28.657" level="INFO">${prefix} = 018</msg>
<status status="PASS" endtime="20180516 15:19:28.657" starttime="20180516 15:19:28.656"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${snapshot_num}+1</arg>
</arguments>
<assign>
<var>${snapshot_num}</var>
</assign>
<msg timestamp="20180516 15:19:28.658" level="INFO">${snapshot_num} = 19</msg>
<status status="PASS" endtime="20180516 15:19:28.658" starttime="20180516 15:19:28.657"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${snapshot_num}</arg>
</arguments>
<msg timestamp="20180516 15:19:28.658" level="INFO">${snapshot_num} = 19</msg>
<status status="PASS" endtime="20180516 15:19:28.658" starttime="20180516 15:19:28.658"></status>
</kw>
<msg timestamp="20180516 15:19:28.659" level="INFO">${prefix} = 018</msg>
<status status="PASS" endtime="20180516 15:19:28.659" starttime="20180516 15:19:28.655"></status>
</kw>
<kw name="Take ETCD Snapshots" library="setup-teardown">
<arguments>
<arg>${prefix}_${tag}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tag}</arg>
</arguments>
<msg timestamp="20180516 15:19:28.661" level="INFO">018_Create BD fo Loopbacks_test_setup</msg>
<status status="PASS" endtime="20180516 15:19:28.661" starttime="20180516 15:19:28.661"></status>
</kw>
<kw name="Get ETCD Dump" library="setup-teardown">
<assign>
<var>${dump}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DOCKER_COMMAND} exec etcd etcdctl get --prefix="true" ""</arg>
</arguments>
<assign>
<var>${command}</var>
</assign>
<msg timestamp="20180516 15:19:28.662" level="INFO">${command} = sudo docker exec etcd etcdctl get --prefix="true" ""</msg>
<status status="PASS" endtime="20180516 15:19:28.662" starttime="20180516 15:19:28.661"></status>
</kw>
<kw name="Execute On Machine" library="ssh">
<doc>*Execute On Machine ${machine} sudo docker exec etcd etcdctl get --prefix="true" ""*</doc>
<arguments>
<arg>docker</arg>
<arg>${command}</arg>
<arg>log=false</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${log}</arg>
</arguments>
<msg timestamp="20180516 15:19:28.675" level="INFO">docker</msg>
<msg timestamp="20180516 15:19:28.675" level="INFO">sudo docker exec etcd etcdctl get --prefix="true" ""</msg>
<msg timestamp="20180516 15:19:28.675" level="INFO">false</msg>
<status status="PASS" endtime="20180516 15:19:28.675" starttime="20180516 15:19:28.675"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:19:28.676" starttime="20180516 15:19:28.675"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:19:28.681" level="INFO">${currdate} = 2018-05-16 15:19:28.681</msg>
<status status="PASS" endtime="20180516 15:19:28.681" starttime="20180516 15:19:28.676"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20180516 15:19:28.682" level="INFO">Executing command 'sudo docker exec etcd etcdctl get --prefix="true" ""'.</msg>
<msg timestamp="20180516 15:19:28.942" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:19:28.942" level="INFO">${out} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<msg timestamp="20180516 15:19:28.942" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20180516 15:19:28.942" starttime="20180516 15:19:28.681"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${out}</arg>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:19:28.942" level="INFO">/sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-containers","description":"Wire 2 VNF containers to the vpp switch","type":2,"elements":[{"container":"node_1","port_label":"node1_veth","etcd_vpp_switch_key":"agent_vpp_1","ipv4_addr":"10.0.0.10","type":3},{"container":"node_2","port_label":"node2_veth","etcd_vpp_switch_key":"agent_vpp_1","ipv4_addr":"10.0.0.11","type":3}]}
/sfc-controller/v1/SP
{"mtu":1500,"starting_vlan_id":5000,"default_static_route_weight":5,"dynamic_bridge_parms":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true},"static_bridge_parms":{"forward":true}}
/sfc-controller/v1/id/HE/agent_vpp_1
{"name":"agent_vpp_1"}
/sfc-controller/v1/id/SFC/two-sample-vnf-containers/node_1_node1_veth
{"sfc_name":"two-sample-vnf-containers","container":"node_1","port":"node1_veth","mac_addr_id":1,"veth_id":1}
/sfc-controller/v1/id/SFC/two-sample-vnf-containers/node_2_node2_veth
{"sfc_name":"two-sample-vnf-containers","container":"node_2","port":"node2_veth","mac_addr_id":2,"veth_id":2}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VNF_node_1_node1_veth
{"name":"IF_VETH_VNF_node_1_node1_veth","enabled":true,"phys_address":"02:00:00:00:00:01","mtu":1500,"host_if_name":"node1_veth","ip_addresses":["10.0.0.10/24"],"namespace":{"type":1,"microservice":"node_1"},"veth":{"peer_if_name":"IF_VETH_VSWITCH_node_1_node1_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VNF_node_2_node2_veth
{"name":"IF_VETH_VNF_node_2_node2_veth","enabled":true,"phys_address":"02:00:00:00:00:02","mtu":1500,"host_if_name":"node2_veth","ip_addresses":["10.0.0.11/24"],"namespace":{"type":1,"microservice":"node_2"},"veth":{"peer_if_name":"IF_VETH_VSWITCH_node_2_node2_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VSWITCH_node_1_node1_veth
{"name":"IF_VETH_VSWITCH_node_1_node1_veth","enabled":true,"mtu":1500,"host_if_name":"node_1_noeth_1","namespace":{"type":1,"microservice":"agent_vpp_1"},"veth":{"peer_if_name":"IF_VETH_VNF_node_1_node1_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VSWITCH_node_2_node2_veth
{"name":"IF_VETH_VSWITCH_node_2_node2_veth","enabled":true,"mtu":1500,"host_if_name":"node_2_noeth_2","namespace":{"type":1,"microservice":"agent_vpp_1"},"veth":{"peer_if_name":"IF_VETH_VNF_node_2_node2_veth"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/BD_INTERNAL_EW_L2FIB_agent_vpp_1
{"name":"BD_INTERNAL_EW_L2FIB_agent_vpp_1","forward":true}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/BD_INTERNAL_EW_agent_vpp_1
{"name":"BD_INTERNAL_EW_agent_vpp_1","flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true,"interfaces":[{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth"},{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth"}]}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth
{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","type":4,"enabled":true,"mtu":1500,"afpacket":{"host_if_name":"node_1_noeth_1"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth
{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","type":4,"enabled":true,"mtu":1500,"afpacket":{"host_if_name":"node_2_noeth_2"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_LOOPBACK_H_agent_vpp_1
{"name":"IF_LOOPBACK_H_agent_vpp_1","enabled":true,"phys_address":"02:00:00:AA:BB:00","mtu":1500,"ip_addresses":["6.0.0.100"]}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/loop0
{
  "name": "loop0",
  "type": 0,
  "enabled": true,
  "phys_address": "8a:f1:be:90:00:00",
  "mtu": 1500,
  "vrf": 0,
  "ip_addresses": [
    "20.1.1.1/24"
  ]
}


/vnf-agent/agent_vpp_1/vpp/config/v1/interface/loop1
{
  "name": "loop1",
  "type": 0,
  "enabled": true,
  "phys_address": "8a:f1:be:90:20:00",
  "mtu": 1500,
  "vrf": 0,
  "ip_addresses": [
    "30.1.1.1/24"
  ]
}


/vnf-agent/agent_vpp_1/vpp/status/v1/bd/BD_INTERNAL_EW_L2FIB_agent_vpp_1
{"index":2,"internal_name":"BD_INTERNAL_EW_L2FIB_agent_vpp_1","bvi_interface":"not_set","last_change":1526476631,"l2_params":{"forward":true}}
/vnf-agent/agent_vpp_1/vpp/status/v1/bd/BD_INTERNAL_EW_agent_vpp_1
{"index":1,"internal_name":"BD_INTERNAL_EW_agent_vpp_1","bvi_interface":"not_set","interface_count":2,"last_change":1526476631,"l2_params":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true},"interfaces":[{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","sw_if_index":2},{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","sw_if_index":3}]}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth
{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","internal_name":"host-node_1_noeth_1","if_index":2,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:3e:fd:61:28","mtu":1500,"statistics":{"in_packets":20,"in_bytes":1552}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth
{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","internal_name":"host-node_2_noeth_2","if_index":3,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:42:98:22:08","mtu":1500,"statistics":{"in_packets":22,"in_bytes":1732}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_LOOPBACK_H_agent_vpp_1
{"name":"IF_LOOPBACK_H_agent_vpp_1","internal_name":"loop0","if_index":1,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:00:00:aa:bb:00","mtu":1500,"statistics":{}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/local0
{"name":"local0","internal_name":"local0","admin_status":2,"oper_status":2,"statistics":{}}
/vnf-agent/node_1/check/status/v1/agent
{"build_version":"v1.1-5-g55e9977","build_date":"2018-03-06T11:05+00:00","state":1,"start_time":1526476614,"last_change":1526476619,"last_update":1526476765,"commit_hash":"55e99770087087fa8e41a980a8b6257c80c93f4c"}
/vnf-agent/node_1/check/status/v1/plugin/etcdv3
{"state":1,"last_change":1526476619,"last_update":1526476765}
/vnf-agent/node_1/check/status/v1/plugin/kafka
{"state":1,"last_change":1526476619,"last_update":1526476765}
/vnf-agent/node_2/check/status/v1/agent
{"build_version":"v1.1-5-g55e9977","build_date":"2018-03-06T11:05+00:00","state":1,"start_time":1526476623,"last_change":1526476628,"last_update":1526476763,"commit_hash":"55e99770087087fa8e41a980a8b6257c80c93f4c"}
/vnf-agent/node_2/check/status/v1/plugin/etcdv3
{"state":1,"last_change":1526476628,"last_update":1526476763}
/vnf-agent/node_2/check/status/v1/plugin/kafka
{"state":1,"last_change":1526476628,"last_update":1526476763}</msg>
<msg timestamp="20180516 15:19:28.943" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:19:28.943" starttime="20180516 15:19:28.942"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:19:28.944" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:19:28.944" starttime="20180516 15:19:28.943"></status>
</kw>
<msg timestamp="20180516 15:19:28.944" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:19:28.944" starttime="20180516 15:19:28.943"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} on ${machine}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:19:28.944" starttime="20180516 15:19:28.944"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${log}'=='true'</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:19:28.945" starttime="20180516 15:19:28.944"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:19:28.945" starttime="20180516 15:19:28.945"></status>
</kw>
<msg timestamp="20180516 15:19:28.945" level="INFO">${out} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<status status="PASS" endtime="20180516 15:19:28.945" starttime="20180516 15:19:28.674"></status>
</kw>
<msg timestamp="20180516 15:19:28.945" level="INFO">${dump} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<status status="PASS" endtime="20180516 15:19:28.945" starttime="20180516 15:19:28.661"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/etcd_dump-${tag}.txt</arg>
<arg>${dump}</arg>
</arguments>
<msg timestamp="20180516 15:19:28.946" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/etcd_dump-018_Create BD fo Loopbacks_test_setup.txt"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/etcd_dump-018_Create BD fo Loopbacks_test_setup.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:19:28.946" starttime="20180516 15:19:28.946"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${dump}</arg>
<arg>/error/</arg>
</arguments>
<assign>
<var>${errors}</var>
</assign>
<msg timestamp="20180516 15:19:28.947" level="INFO">0 out of 82 lines matched</msg>
<msg timestamp="20180516 15:19:28.947" level="INFO">${errors} = </msg>
<status status="PASS" endtime="20180516 15:19:28.947" starttime="20180516 15:19:28.946"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${errors}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${errors}</arg>
</arguments>
<msg timestamp="20180516 15:19:28.947" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:19:28.948" starttime="20180516 15:19:28.947"></status>
</kw>
<msg timestamp="20180516 15:19:28.948" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:19:28.948" starttime="20180516 15:19:28.947"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>Errors detected in keys: ${errors}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:19:28.948" starttime="20180516 15:19:28.948"></status>
</kw>
<status status="PASS" endtime="20180516 15:19:28.948" starttime="20180516 15:19:28.660"></status>
</kw>
<status status="PASS" endtime="20180516 15:19:28.948" starttime="20180516 15:19:28.654"></status>
</kw>
<status status="PASS" endtime="20180516 15:19:28.948" starttime="20180516 15:19:28.653"></status>
</kw>
<kw name="Create Bridge Domain bd2 With Autolearn On agent_vpp_1 with interfaces loop0, loop1" library="pretty_keywords">
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${name}</arg>
<arg>${node}</arg>
<arg>${interfaces}</arg>
</arguments>
<msg timestamp="20180516 15:19:28.949" level="INFO">bd2</msg>
<msg timestamp="20180516 15:19:28.949" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:19:28.950" level="INFO">loop0, loop1</msg>
<status status="PASS" endtime="20180516 15:19:28.950" starttime="20180516 15:19:28.949"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${interfaces}</arg>
<arg>separator=,${space}</arg>
</arguments>
<assign>
<var>@{ints}</var>
</assign>
<msg timestamp="20180516 15:19:28.950" level="INFO">@{ints} = [ loop0 | loop1 ]</msg>
<status status="PASS" endtime="20180516 15:19:28.950" starttime="20180516 15:19:28.950"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>@{ints}</arg>
</arguments>
<msg timestamp="20180516 15:19:28.951" level="INFO">loop0</msg>
<msg timestamp="20180516 15:19:28.951" level="INFO">loop1</msg>
<status status="PASS" endtime="20180516 15:19:28.951" starttime="20180516 15:19:28.950"></status>
</kw>
<kw name="vpp_ctl: Put Bridge Domain" library="vpp_ctl">
<arguments>
<arg>${node}</arg>
<arg>${name}</arg>
<arg>${ints}</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${name}</arg>
<arg>${ints}</arg>
<arg>${flood}</arg>
<arg>${unicast}</arg>
<arg>${forward}</arg>
<arg>${learn}</arg>
<arg>${arp_term}</arg>
</arguments>
<msg timestamp="20180516 15:19:28.951" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:19:28.952" level="INFO">bd2</msg>
<msg timestamp="20180516 15:19:28.952" level="INFO">[u'loop0', u'loop1']</msg>
<msg timestamp="20180516 15:19:28.952" level="INFO">true</msg>
<msg timestamp="20180516 15:19:28.952" level="INFO">true</msg>
<msg timestamp="20180516 15:19:28.952" level="INFO">true</msg>
<msg timestamp="20180516 15:19:28.952" level="INFO">true</msg>
<msg timestamp="20180516 15:19:28.952" level="INFO">true</msg>
<status status="PASS" endtime="20180516 15:19:28.952" starttime="20180516 15:19:28.951"></status>
</kw>
<kw name="Create Interfaces Json From List" library="vpp_ctl">
<arguments>
<arg>${ints}</arg>
</arguments>
<assign>
<var>${interfaces}</var>
</assign>
<msg timestamp="20180516 15:19:28.953" level="INFO">${interfaces} = { "name": "loop0" },{ "name": "loop1" }</msg>
<status status="PASS" endtime="20180516 15:19:28.953" starttime="20180516 15:19:28.952"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${interfaces}</arg>
</arguments>
<msg timestamp="20180516 15:19:28.954" level="INFO">{ "name": "loop0" },{ "name": "loop1" }</msg>
<status status="PASS" endtime="20180516 15:19:28.954" starttime="20180516 15:19:28.953"></status>
</kw>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/home/marcello/workspace/release/vpp-agent/tests/robot/libraries/../resources/bridge_domain.json</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20180516 15:19:28.954" html="yes" level="INFO">Getting file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/resources/bridge_domain.json"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/resources/bridge_domain.json&lt;/a&gt;'.</msg>
<msg timestamp="20180516 15:19:28.954" level="INFO">${data} = {
  "name": "${name}",
  "flood": ${flood},
  "unknown_unicast_flood": ${unicast},
  "forward": ${forward},
  "learn": ${learn},
  "arp_termination": ${arp_term},
  "interfaces": [
    ${interfaces}
 ...</msg>
<status status="PASS" endtime="20180516 15:19:28.954" starttime="20180516 15:19:28.954"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/vnf-agent/${node}/vpp/config/v1/bd/${name}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20180516 15:19:28.955" level="INFO">${uri} = /vnf-agent/agent_vpp_1/vpp/config/v1/bd/bd2</msg>
<status status="PASS" endtime="20180516 15:19:28.955" starttime="20180516 15:19:28.954"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${data}</arg>
<arg>${uri}</arg>
</arguments>
<msg timestamp="20180516 15:19:28.955" level="INFO">{
  "name": "${name}",
  "flood": ${flood},
  "unknown_unicast_flood": ${unicast},
  "forward": ${forward},
  "learn": ${learn},
  "arp_termination": ${arp_term},
  "interfaces": [
    ${interfaces}
  ]
}
</msg>
<msg timestamp="20180516 15:19:28.955" level="INFO">/vnf-agent/agent_vpp_1/vpp/config/v1/bd/bd2</msg>
<status status="PASS" endtime="20180516 15:19:28.955" starttime="20180516 15:19:28.955"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${data}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20180516 15:19:28.956" level="INFO">${data} = {
  "name": "bd2",
  "flood": true,
  "unknown_unicast_flood": true,
  "forward": true,
  "learn": true,
  "arp_termination": true,
  "interfaces": [
    { "name": "loop0" },{ "name": "loop1" }
  ]
}
</msg>
<status status="PASS" endtime="20180516 15:19:28.956" starttime="20180516 15:19:28.955"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${data}</arg>
</arguments>
<msg timestamp="20180516 15:19:28.956" level="INFO">{
  "name": "bd2",
  "flood": true,
  "unknown_unicast_flood": true,
  "forward": true,
  "learn": true,
  "arp_termination": true,
  "interfaces": [
    { "name": "loop0" },{ "name": "loop1" }
  ]
}
</msg>
<status status="PASS" endtime="20180516 15:19:28.957" starttime="20180516 15:19:28.956"></status>
</kw>
<kw name="vpp_ctl: Put Json" library="vpp_ctl">
<arguments>
<arg>${uri}</arg>
<arg>${data}</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${key}</arg>
<arg>${json}</arg>
<arg>${container}</arg>
</arguments>
<msg timestamp="20180516 15:19:28.957" level="INFO">/vnf-agent/agent_vpp_1/vpp/config/v1/bd/bd2</msg>
<msg timestamp="20180516 15:19:28.957" level="INFO">{
  "name": "bd2",
  "flood": true,
  "unknown_unicast_flood": true,
  "forward": true,
  "learn": true,
  "arp_termination": true,
  "interfaces": [
    { "name": "loop0" },{ "name": "loop1" }
  ]
}
</msg>
<msg timestamp="20180516 15:19:28.958" level="INFO">vpp_agent_ctl</msg>
<status status="PASS" endtime="20180516 15:19:28.958" starttime="20180516 15:19:28.957"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>echo '${json}' | vpp-agent-ctl ${AGENT_VPP_ETCD_CONF_PATH} -put ${key} -</arg>
</arguments>
<assign>
<var>${command}</var>
</assign>
<msg timestamp="20180516 15:19:28.958" level="INFO">${command} = echo '{
  "name": "bd2",
  "flood": true,
  "unknown_unicast_flood": true,
  "forward": true,
  "learn": true,
  "arp_termination": true,
  "interfaces": [
    { "name": "loop0" },{ "name": "loop1" }
...</msg>
<status status="PASS" endtime="20180516 15:19:28.958" starttime="20180516 15:19:28.958"></status>
</kw>
<kw name="Write To Container Until Prompt" library="docker">
<doc>*Write Container vpp_agent_ctl echo '{</doc>
<arguments>
<arg>${container}</arg>
<arg>${command}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${container}</arg>
<arg>${command}</arg>
<arg>${prompt}</arg>
<arg>${delay}</arg>
</arguments>
<msg timestamp="20180516 15:19:28.960" level="INFO">vpp_agent_ctl</msg>
<msg timestamp="20180516 15:19:28.960" level="INFO">echo '{
  "name": "bd2",
  "flood": true,
  "unknown_unicast_flood": true,
  "forward": true,
  "learn": true,
  "arp_termination": true,
  "interfaces": [
    { "name": "loop0" },{ "name": "loop1" }
  ]
}
' | vpp-agent-ctl /opt/vpp-agent/dev/etcd.conf -put /vnf-agent/agent_vpp_1/vpp/config/v1/bd/bd2 -</msg>
<msg timestamp="20180516 15:19:28.960" level="INFO">root@</msg>
<msg timestamp="20180516 15:19:28.961" level="INFO">3</msg>
<status status="PASS" endtime="20180516 15:19:28.961" starttime="20180516 15:19:28.960"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${container}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:19:28.961" starttime="20180516 15:19:28.961"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:19:28.961" level="INFO">${currdate} = 2018-05-16 15:19:28.961</msg>
<status status="PASS" endtime="20180516 15:19:28.961" starttime="20180516 15:19:28.961"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20180516 15:19:28.963" level="INFO">echo '{</msg>
<status status="PASS" endtime="20180516 15:19:28.964" starttime="20180516 15:19:28.962"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>${prompt}${${container}_HOSTNAME}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20180516 15:19:28.997" level="INFO">&gt;   "name": "bd2",
&gt;   "flood": true,
&gt;   "unknown_unicast_flood": true,
&gt;   "forward": true,
&gt;   "learn": true,
&gt;   "arp_termination": true,
&gt;   "interfaces": [
&gt;     { "name": "loop0" },{ "name": "loop1" }
&gt;   ]
&gt; }
&gt; ' | vpp-agent-ctl /opt/vpp-agent/dev/etcd.conf -put /vnf-agent/agent_vpp_1/vpp /config/v1/bd/bd2 -
[36mINFO[0m[0000] Connecting to etcd took 1.2798ms              [36mdurationInNs[0m=1279800 [36mloc[0m="etcdv3/bytes_broker_impl.go(84)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] DB putting  /vnf-agent/agent_vpp_1/vpp/config/v1/bd/bd2   {
  "name": "bd2",
  "flood": true,
  "unknown_unicast_flood": true,
  "forward": true,
  "learn": true,
  "arp_termination": true,
  "interfaces": [
    { "name": "loop0" },{ "name": "loop1" }
  ]
}

  [36mloc[0m="vpp-agent-ctl/etcd.go(106)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] DB put successful  /vnf-agent/agent_vpp_1/vpp/config/v1/bd/bd2   -  [36mloc[0m="vpp-agent-ctl/etcd.go(112)" [36mlogger[0m=defaultLogger
]0;root@2f7d62033432</msg>
<msg timestamp="20180516 15:19:28.997" level="INFO">${out} = &gt;   "name": "bd2",
&gt;   "flood": true,
&gt;   "unknown_unicast_flood": true,
&gt;   "forward": true,
&gt;   "learn": true,
&gt;   "arp_termination": true,
&gt;   "interfaces": [
&gt;     { "name": "loop0" },{ "na...</msg>
<status status="PASS" endtime="20180516 15:19:28.998" starttime="20180516 15:19:28.964"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:19:28.998" level="INFO">&gt;   "name": "bd2",
&gt;   "flood": true,
&gt;   "unknown_unicast_flood": true,
&gt;   "forward": true,
&gt;   "learn": true,
&gt;   "arp_termination": true,
&gt;   "interfaces": [
&gt;     { "name": "loop0" },{ "name": "loop1" }
&gt;   ]
&gt; }
&gt; ' | vpp-agent-ctl /opt/vpp-agent/dev/etcd.conf -put /vnf-agent/agent_vpp_1/vpp /config/v1/bd/bd2 -
[36mINFO[0m[0000] Connecting to etcd took 1.2798ms              [36mdurationInNs[0m=1279800 [36mloc[0m="etcdv3/bytes_broker_impl.go(84)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] DB putting  /vnf-agent/agent_vpp_1/vpp/config/v1/bd/bd2   {
  "name": "bd2",
  "flood": true,
  "unknown_unicast_flood": true,
  "forward": true,
  "learn": true,
  "arp_termination": true,
  "interfaces": [
    { "name": "loop0" },{ "name": "loop1" }
  ]
}

  [36mloc[0m="vpp-agent-ctl/etcd.go(106)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000] DB put successful  /vnf-agent/agent_vpp_1/vpp/config/v1/bd/bd2   -  [36mloc[0m="vpp-agent-ctl/etcd.go(112)" [36mlogger[0m=defaultLogger
]0;root@2f7d62033432</msg>
<status status="PASS" endtime="20180516 15:19:28.999" starttime="20180516 15:19:28.998"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>delay=${delay}</arg>
</arguments>
<assign>
<var>${out2}</var>
</assign>
<msg timestamp="20180516 15:19:32.002" level="INFO">: ~root@2f7d62033432:~# [K</msg>
<msg timestamp="20180516 15:19:32.002" level="INFO">${out2} = : ~root@2f7d62033432:~# [K</msg>
<status status="PASS" endtime="20180516 15:19:32.002" starttime="20180516 15:19:28.999"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out2}</arg>
</arguments>
<msg timestamp="20180516 15:19:32.002" level="INFO">: ~root@2f7d62033432:~# [K</msg>
<status status="PASS" endtime="20180516 15:19:32.003" starttime="20180516 15:19:32.002"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${container}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${out2}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:19:32.003" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_vpp_agent_ctl.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_vpp_agent_ctl.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:19:32.003" starttime="20180516 15:19:32.003"></status>
</kw>
<msg timestamp="20180516 15:19:32.004" level="INFO">${out} = &gt;   "name": "bd2",
&gt;   "flood": true,
&gt;   "unknown_unicast_flood": true,
&gt;   "forward": true,
&gt;   "learn": true,
&gt;   "arp_termination": true,
&gt;   "interfaces": [
&gt;     { "name": "loop0" },{ "na...</msg>
<status status="PASS" endtime="20180516 15:19:32.004" starttime="20180516 15:19:28.959"></status>
</kw>
<status status="PASS" endtime="20180516 15:19:32.004" starttime="20180516 15:19:28.957"></status>
</kw>
<status status="PASS" endtime="20180516 15:19:32.004" starttime="20180516 15:19:28.951"></status>
</kw>
<status status="PASS" endtime="20180516 15:19:32.004" starttime="20180516 15:19:28.949"></status>
</kw>
<kw type="teardown" name="TestTeardown">
<kw name="Make Datastore Snapshots" library="setup-teardown">
<arguments>
<arg>${TEST_NAME}_test_teardown</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tag}</arg>
</arguments>
<msg timestamp="20180516 15:19:32.005" level="INFO">Create BD fo Loopbacks_test_teardown</msg>
<status status="PASS" endtime="20180516 15:19:32.005" starttime="20180516 15:19:32.005"></status>
</kw>
<kw name="Create Next Snapshot Prefix" library="setup-teardown">
<assign>
<var>${prefix}</var>
</assign>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>str(${snapshot_num}).zfill(3)</arg>
</arguments>
<assign>
<var>${prefix}</var>
</assign>
<msg timestamp="20180516 15:19:32.006" level="INFO">${prefix} = 019</msg>
<status status="PASS" endtime="20180516 15:19:32.006" starttime="20180516 15:19:32.006"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${snapshot_num}+1</arg>
</arguments>
<assign>
<var>${snapshot_num}</var>
</assign>
<msg timestamp="20180516 15:19:32.006" level="INFO">${snapshot_num} = 20</msg>
<status status="PASS" endtime="20180516 15:19:32.006" starttime="20180516 15:19:32.006"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${snapshot_num}</arg>
</arguments>
<msg timestamp="20180516 15:19:32.007" level="INFO">${snapshot_num} = 20</msg>
<status status="PASS" endtime="20180516 15:19:32.007" starttime="20180516 15:19:32.007"></status>
</kw>
<msg timestamp="20180516 15:19:32.007" level="INFO">${prefix} = 019</msg>
<status status="PASS" endtime="20180516 15:19:32.007" starttime="20180516 15:19:32.005"></status>
</kw>
<kw name="Take ETCD Snapshots" library="setup-teardown">
<arguments>
<arg>${prefix}_${tag}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tag}</arg>
</arguments>
<msg timestamp="20180516 15:19:32.008" level="INFO">019_Create BD fo Loopbacks_test_teardown</msg>
<status status="PASS" endtime="20180516 15:19:32.008" starttime="20180516 15:19:32.008"></status>
</kw>
<kw name="Get ETCD Dump" library="setup-teardown">
<assign>
<var>${dump}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DOCKER_COMMAND} exec etcd etcdctl get --prefix="true" ""</arg>
</arguments>
<assign>
<var>${command}</var>
</assign>
<msg timestamp="20180516 15:19:32.009" level="INFO">${command} = sudo docker exec etcd etcdctl get --prefix="true" ""</msg>
<status status="PASS" endtime="20180516 15:19:32.009" starttime="20180516 15:19:32.009"></status>
</kw>
<kw name="Execute On Machine" library="ssh">
<doc>*Execute On Machine ${machine} sudo docker exec etcd etcdctl get --prefix="true" ""*</doc>
<arguments>
<arg>docker</arg>
<arg>${command}</arg>
<arg>log=false</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${log}</arg>
</arguments>
<msg timestamp="20180516 15:19:32.015" level="INFO">docker</msg>
<msg timestamp="20180516 15:19:32.015" level="INFO">sudo docker exec etcd etcdctl get --prefix="true" ""</msg>
<msg timestamp="20180516 15:19:32.015" level="INFO">false</msg>
<status status="PASS" endtime="20180516 15:19:32.016" starttime="20180516 15:19:32.015"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:19:32.016" starttime="20180516 15:19:32.016"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:19:32.016" level="INFO">${currdate} = 2018-05-16 15:19:32.016</msg>
<status status="PASS" endtime="20180516 15:19:32.016" starttime="20180516 15:19:32.016"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20180516 15:19:32.017" level="INFO">Executing command 'sudo docker exec etcd etcdctl get --prefix="true" ""'.</msg>
<msg timestamp="20180516 15:19:32.382" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:19:32.382" level="INFO">${out} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<msg timestamp="20180516 15:19:32.383" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20180516 15:19:32.383" starttime="20180516 15:19:32.017"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${out}</arg>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:19:32.383" level="INFO">/sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-containers","description":"Wire 2 VNF containers to the vpp switch","type":2,"elements":[{"container":"node_1","port_label":"node1_veth","etcd_vpp_switch_key":"agent_vpp_1","ipv4_addr":"10.0.0.10","type":3},{"container":"node_2","port_label":"node2_veth","etcd_vpp_switch_key":"agent_vpp_1","ipv4_addr":"10.0.0.11","type":3}]}
/sfc-controller/v1/SP
{"mtu":1500,"starting_vlan_id":5000,"default_static_route_weight":5,"dynamic_bridge_parms":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true},"static_bridge_parms":{"forward":true}}
/sfc-controller/v1/id/HE/agent_vpp_1
{"name":"agent_vpp_1"}
/sfc-controller/v1/id/SFC/two-sample-vnf-containers/node_1_node1_veth
{"sfc_name":"two-sample-vnf-containers","container":"node_1","port":"node1_veth","mac_addr_id":1,"veth_id":1}
/sfc-controller/v1/id/SFC/two-sample-vnf-containers/node_2_node2_veth
{"sfc_name":"two-sample-vnf-containers","container":"node_2","port":"node2_veth","mac_addr_id":2,"veth_id":2}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VNF_node_1_node1_veth
{"name":"IF_VETH_VNF_node_1_node1_veth","enabled":true,"phys_address":"02:00:00:00:00:01","mtu":1500,"host_if_name":"node1_veth","ip_addresses":["10.0.0.10/24"],"namespace":{"type":1,"microservice":"node_1"},"veth":{"peer_if_name":"IF_VETH_VSWITCH_node_1_node1_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VNF_node_2_node2_veth
{"name":"IF_VETH_VNF_node_2_node2_veth","enabled":true,"phys_address":"02:00:00:00:00:02","mtu":1500,"host_if_name":"node2_veth","ip_addresses":["10.0.0.11/24"],"namespace":{"type":1,"microservice":"node_2"},"veth":{"peer_if_name":"IF_VETH_VSWITCH_node_2_node2_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VSWITCH_node_1_node1_veth
{"name":"IF_VETH_VSWITCH_node_1_node1_veth","enabled":true,"mtu":1500,"host_if_name":"node_1_noeth_1","namespace":{"type":1,"microservice":"agent_vpp_1"},"veth":{"peer_if_name":"IF_VETH_VNF_node_1_node1_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VSWITCH_node_2_node2_veth
{"name":"IF_VETH_VSWITCH_node_2_node2_veth","enabled":true,"mtu":1500,"host_if_name":"node_2_noeth_2","namespace":{"type":1,"microservice":"agent_vpp_1"},"veth":{"peer_if_name":"IF_VETH_VNF_node_2_node2_veth"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/BD_INTERNAL_EW_L2FIB_agent_vpp_1
{"name":"BD_INTERNAL_EW_L2FIB_agent_vpp_1","forward":true}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/BD_INTERNAL_EW_agent_vpp_1
{"name":"BD_INTERNAL_EW_agent_vpp_1","flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true,"interfaces":[{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth"},{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth"}]}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/bd2
{
  "name": "bd2",
  "flood": true,
  "unknown_unicast_flood": true,
  "forward": true,
  "learn": true,
  "arp_termination": true,
  "interfaces": [
    { "name": "loop0" },{ "name": "loop1" }
  ]
}


/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth
{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","type":4,"enabled":true,"mtu":1500,"afpacket":{"host_if_name":"node_1_noeth_1"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth
{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","type":4,"enabled":true,"mtu":1500,"afpacket":{"host_if_name":"node_2_noeth_2"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_LOOPBACK_H_agent_vpp_1
{"name":"IF_LOOPBACK_H_agent_vpp_1","enabled":true,"phys_address":"02:00:00:AA:BB:00","mtu":1500,"ip_addresses":["6.0.0.100"]}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/loop0
{
  "name": "loop0",
  "type": 0,
  "enabled": true,
  "phys_address": "8a:f1:be:90:00:00",
  "mtu": 1500,
  "vrf": 0,
  "ip_addresses": [
    "20.1.1.1/24"
  ]
}


/vnf-agent/agent_vpp_1/vpp/config/v1/interface/loop1
{
  "name": "loop1",
  "type": 0,
  "enabled": true,
  "phys_address": "8a:f1:be:90:20:00",
  "mtu": 1500,
  "vrf": 0,
  "ip_addresses": [
    "30.1.1.1/24"
  ]
}


/vnf-agent/agent_vpp_1/vpp/status/v1/bd/BD_INTERNAL_EW_L2FIB_agent_vpp_1
{"index":2,"internal_name":"BD_INTERNAL_EW_L2FIB_agent_vpp_1","bvi_interface":"not_set","last_change":1526476631,"l2_params":{"forward":true}}
/vnf-agent/agent_vpp_1/vpp/status/v1/bd/BD_INTERNAL_EW_agent_vpp_1
{"index":1,"internal_name":"BD_INTERNAL_EW_agent_vpp_1","bvi_interface":"not_set","interface_count":2,"last_change":1526476631,"l2_params":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true},"interfaces":[{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","sw_if_index":2},{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","sw_if_index":3}]}
/vnf-agent/agent_vpp_1/vpp/status/v1/bd/bd2
{"index":3,"internal_name":"bd2","bvi_interface":"not_set","interface_count":2,"last_change":1526476768,"l2_params":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true,"arp_termination":true},"interfaces":[{"name":"loop0","sw_if_index":4},{"name":"loop1","sw_if_index":5}]}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth
{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","internal_name":"host-node_1_noeth_1","if_index":2,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:3e:fd:61:28","mtu":1500,"statistics":{"in_packets":20,"in_bytes":1552}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth
{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","internal_name":"host-node_2_noeth_2","if_index":3,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:42:98:22:08","mtu":1500,"statistics":{"in_packets":22,"in_bytes":1732}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_LOOPBACK_H_agent_vpp_1
{"name":"IF_LOOPBACK_H_agent_vpp_1","internal_name":"loop0","if_index":1,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:00:00:aa:bb:00","mtu":1500,"statistics":{}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/local0
{"name":"local0","internal_name":"local0","admin_status":2,"oper_status":2,"statistics":{}}
/vnf-agent/node_1/check/status/v1/agent
{"build_version":"v1.1-5-g55e9977","build_date":"2018-03-06T11:05+00:00","state":1,"start_time":1526476614,"last_change":1526476619,"last_update":1526476765,"commit_hash":"55e99770087087fa8e41a980a8b6257c80c93f4c"}
/vnf-agent/node_1/check/status/v1/plugin/etcdv3
{"state":1,"last_change":1526476619,"last_update":1526476765}
/vnf-agent/node_1/check/status/v1/plugin/kafka
{"state":1,"last_change":1526476619,"last_update":1526476765}
/vnf-agent/node_2/check/status/v1/agent
{"build_version":"v1.1-5-g55e9977","build_date":"2018-03-06T11:05+00:00","state":1,"start_time":1526476623,"last_change":1526476628,"last_update":1526476763,"commit_hash":"55e99770087087fa8e41a980a8b6257c80c93f4c"}
/vnf-agent/node_2/check/status/v1/plugin/etcdv3
{"state":1,"last_change":1526476628,"last_update":1526476763}
/vnf-agent/node_2/check/status/v1/plugin/kafka
{"state":1,"last_change":1526476628,"last_update":1526476763}</msg>
<msg timestamp="20180516 15:19:32.383" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:19:32.384" starttime="20180516 15:19:32.383"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:19:32.384" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:19:32.384" starttime="20180516 15:19:32.384"></status>
</kw>
<msg timestamp="20180516 15:19:32.384" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:19:32.385" starttime="20180516 15:19:32.384"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} on ${machine}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:19:32.385" starttime="20180516 15:19:32.385"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${log}'=='true'</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:19:32.385" starttime="20180516 15:19:32.385"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:19:32.386" starttime="20180516 15:19:32.386"></status>
</kw>
<msg timestamp="20180516 15:19:32.386" level="INFO">${out} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<status status="PASS" endtime="20180516 15:19:32.386" starttime="20180516 15:19:32.013"></status>
</kw>
<msg timestamp="20180516 15:19:32.386" level="INFO">${dump} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<status status="PASS" endtime="20180516 15:19:32.386" starttime="20180516 15:19:32.008"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/etcd_dump-${tag}.txt</arg>
<arg>${dump}</arg>
</arguments>
<msg timestamp="20180516 15:19:32.387" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/etcd_dump-019_Create BD fo Loopbacks_test_teardown.txt"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/etcd_dump-019_Create BD fo Loopbacks_test_teardown.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:19:32.387" starttime="20180516 15:19:32.387"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${dump}</arg>
<arg>/error/</arg>
</arguments>
<assign>
<var>${errors}</var>
</assign>
<msg timestamp="20180516 15:19:32.388" level="INFO">0 out of 98 lines matched</msg>
<msg timestamp="20180516 15:19:32.388" level="INFO">${errors} = </msg>
<status status="PASS" endtime="20180516 15:19:32.388" starttime="20180516 15:19:32.387"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${errors}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${errors}</arg>
</arguments>
<msg timestamp="20180516 15:19:32.388" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:19:32.389" starttime="20180516 15:19:32.388"></status>
</kw>
<msg timestamp="20180516 15:19:32.389" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:19:32.389" starttime="20180516 15:19:32.388"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>Errors detected in keys: ${errors}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:19:32.389" starttime="20180516 15:19:32.389"></status>
</kw>
<status status="PASS" endtime="20180516 15:19:32.389" starttime="20180516 15:19:32.007"></status>
</kw>
<status status="PASS" endtime="20180516 15:19:32.389" starttime="20180516 15:19:32.005"></status>
</kw>
<status status="PASS" endtime="20180516 15:19:32.389" starttime="20180516 15:19:32.004"></status>
</kw>
<status status="PASS" endtime="20180516 15:19:32.389" critical="yes" starttime="20180516 15:19:28.653"></status>
</test>
<test id="s1-t10" name="Add Tracing on Vpp for AFpackets">
<kw type="setup" name="TestSetup">
<kw name="Make Datastore Snapshots" library="setup-teardown">
<arguments>
<arg>${TEST_NAME}_test_setup</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tag}</arg>
</arguments>
<msg timestamp="20180516 15:19:32.391" level="INFO">Add Tracing on Vpp for AFpackets_test_setup</msg>
<status status="PASS" endtime="20180516 15:19:32.391" starttime="20180516 15:19:32.391"></status>
</kw>
<kw name="Create Next Snapshot Prefix" library="setup-teardown">
<assign>
<var>${prefix}</var>
</assign>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>str(${snapshot_num}).zfill(3)</arg>
</arguments>
<assign>
<var>${prefix}</var>
</assign>
<msg timestamp="20180516 15:19:32.392" level="INFO">${prefix} = 020</msg>
<status status="PASS" endtime="20180516 15:19:32.392" starttime="20180516 15:19:32.392"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${snapshot_num}+1</arg>
</arguments>
<assign>
<var>${snapshot_num}</var>
</assign>
<msg timestamp="20180516 15:19:32.393" level="INFO">${snapshot_num} = 21</msg>
<status status="PASS" endtime="20180516 15:19:32.393" starttime="20180516 15:19:32.392"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${snapshot_num}</arg>
</arguments>
<msg timestamp="20180516 15:19:32.393" level="INFO">${snapshot_num} = 21</msg>
<status status="PASS" endtime="20180516 15:19:32.393" starttime="20180516 15:19:32.393"></status>
</kw>
<msg timestamp="20180516 15:19:32.393" level="INFO">${prefix} = 020</msg>
<status status="PASS" endtime="20180516 15:19:32.394" starttime="20180516 15:19:32.392"></status>
</kw>
<kw name="Take ETCD Snapshots" library="setup-teardown">
<arguments>
<arg>${prefix}_${tag}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tag}</arg>
</arguments>
<msg timestamp="20180516 15:19:32.394" level="INFO">020_Add Tracing on Vpp for AFpackets_test_setup</msg>
<status status="PASS" endtime="20180516 15:19:32.394" starttime="20180516 15:19:32.394"></status>
</kw>
<kw name="Get ETCD Dump" library="setup-teardown">
<assign>
<var>${dump}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DOCKER_COMMAND} exec etcd etcdctl get --prefix="true" ""</arg>
</arguments>
<assign>
<var>${command}</var>
</assign>
<msg timestamp="20180516 15:19:32.395" level="INFO">${command} = sudo docker exec etcd etcdctl get --prefix="true" ""</msg>
<status status="PASS" endtime="20180516 15:19:32.395" starttime="20180516 15:19:32.395"></status>
</kw>
<kw name="Execute On Machine" library="ssh">
<doc>*Execute On Machine ${machine} sudo docker exec etcd etcdctl get --prefix="true" ""*</doc>
<arguments>
<arg>docker</arg>
<arg>${command}</arg>
<arg>log=false</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${log}</arg>
</arguments>
<msg timestamp="20180516 15:19:32.402" level="INFO">docker</msg>
<msg timestamp="20180516 15:19:32.402" level="INFO">sudo docker exec etcd etcdctl get --prefix="true" ""</msg>
<msg timestamp="20180516 15:19:32.402" level="INFO">false</msg>
<status status="PASS" endtime="20180516 15:19:32.402" starttime="20180516 15:19:32.402"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:19:32.408" starttime="20180516 15:19:32.402"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:19:32.409" level="INFO">${currdate} = 2018-05-16 15:19:32.409</msg>
<status status="PASS" endtime="20180516 15:19:32.409" starttime="20180516 15:19:32.408"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20180516 15:19:32.409" level="INFO">Executing command 'sudo docker exec etcd etcdctl get --prefix="true" ""'.</msg>
<msg timestamp="20180516 15:19:32.658" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:19:32.658" level="INFO">${out} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<msg timestamp="20180516 15:19:32.658" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20180516 15:19:32.659" starttime="20180516 15:19:32.409"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${out}</arg>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:19:32.659" level="INFO">/sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-containers","description":"Wire 2 VNF containers to the vpp switch","type":2,"elements":[{"container":"node_1","port_label":"node1_veth","etcd_vpp_switch_key":"agent_vpp_1","ipv4_addr":"10.0.0.10","type":3},{"container":"node_2","port_label":"node2_veth","etcd_vpp_switch_key":"agent_vpp_1","ipv4_addr":"10.0.0.11","type":3}]}
/sfc-controller/v1/SP
{"mtu":1500,"starting_vlan_id":5000,"default_static_route_weight":5,"dynamic_bridge_parms":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true},"static_bridge_parms":{"forward":true}}
/sfc-controller/v1/id/HE/agent_vpp_1
{"name":"agent_vpp_1"}
/sfc-controller/v1/id/SFC/two-sample-vnf-containers/node_1_node1_veth
{"sfc_name":"two-sample-vnf-containers","container":"node_1","port":"node1_veth","mac_addr_id":1,"veth_id":1}
/sfc-controller/v1/id/SFC/two-sample-vnf-containers/node_2_node2_veth
{"sfc_name":"two-sample-vnf-containers","container":"node_2","port":"node2_veth","mac_addr_id":2,"veth_id":2}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VNF_node_1_node1_veth
{"name":"IF_VETH_VNF_node_1_node1_veth","enabled":true,"phys_address":"02:00:00:00:00:01","mtu":1500,"host_if_name":"node1_veth","ip_addresses":["10.0.0.10/24"],"namespace":{"type":1,"microservice":"node_1"},"veth":{"peer_if_name":"IF_VETH_VSWITCH_node_1_node1_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VNF_node_2_node2_veth
{"name":"IF_VETH_VNF_node_2_node2_veth","enabled":true,"phys_address":"02:00:00:00:00:02","mtu":1500,"host_if_name":"node2_veth","ip_addresses":["10.0.0.11/24"],"namespace":{"type":1,"microservice":"node_2"},"veth":{"peer_if_name":"IF_VETH_VSWITCH_node_2_node2_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VSWITCH_node_1_node1_veth
{"name":"IF_VETH_VSWITCH_node_1_node1_veth","enabled":true,"mtu":1500,"host_if_name":"node_1_noeth_1","namespace":{"type":1,"microservice":"agent_vpp_1"},"veth":{"peer_if_name":"IF_VETH_VNF_node_1_node1_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VSWITCH_node_2_node2_veth
{"name":"IF_VETH_VSWITCH_node_2_node2_veth","enabled":true,"mtu":1500,"host_if_name":"node_2_noeth_2","namespace":{"type":1,"microservice":"agent_vpp_1"},"veth":{"peer_if_name":"IF_VETH_VNF_node_2_node2_veth"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/BD_INTERNAL_EW_L2FIB_agent_vpp_1
{"name":"BD_INTERNAL_EW_L2FIB_agent_vpp_1","forward":true}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/BD_INTERNAL_EW_agent_vpp_1
{"name":"BD_INTERNAL_EW_agent_vpp_1","flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true,"interfaces":[{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth"},{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth"}]}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/bd2
{
  "name": "bd2",
  "flood": true,
  "unknown_unicast_flood": true,
  "forward": true,
  "learn": true,
  "arp_termination": true,
  "interfaces": [
    { "name": "loop0" },{ "name": "loop1" }
  ]
}


/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth
{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","type":4,"enabled":true,"mtu":1500,"afpacket":{"host_if_name":"node_1_noeth_1"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth
{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","type":4,"enabled":true,"mtu":1500,"afpacket":{"host_if_name":"node_2_noeth_2"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_LOOPBACK_H_agent_vpp_1
{"name":"IF_LOOPBACK_H_agent_vpp_1","enabled":true,"phys_address":"02:00:00:AA:BB:00","mtu":1500,"ip_addresses":["6.0.0.100"]}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/loop0
{
  "name": "loop0",
  "type": 0,
  "enabled": true,
  "phys_address": "8a:f1:be:90:00:00",
  "mtu": 1500,
  "vrf": 0,
  "ip_addresses": [
    "20.1.1.1/24"
  ]
}


/vnf-agent/agent_vpp_1/vpp/config/v1/interface/loop1
{
  "name": "loop1",
  "type": 0,
  "enabled": true,
  "phys_address": "8a:f1:be:90:20:00",
  "mtu": 1500,
  "vrf": 0,
  "ip_addresses": [
    "30.1.1.1/24"
  ]
}


/vnf-agent/agent_vpp_1/vpp/status/v1/bd/BD_INTERNAL_EW_L2FIB_agent_vpp_1
{"index":2,"internal_name":"BD_INTERNAL_EW_L2FIB_agent_vpp_1","bvi_interface":"not_set","last_change":1526476631,"l2_params":{"forward":true}}
/vnf-agent/agent_vpp_1/vpp/status/v1/bd/BD_INTERNAL_EW_agent_vpp_1
{"index":1,"internal_name":"BD_INTERNAL_EW_agent_vpp_1","bvi_interface":"not_set","interface_count":2,"last_change":1526476631,"l2_params":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true},"interfaces":[{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","sw_if_index":2},{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","sw_if_index":3}]}
/vnf-agent/agent_vpp_1/vpp/status/v1/bd/bd2
{"index":3,"internal_name":"bd2","bvi_interface":"not_set","interface_count":2,"last_change":1526476768,"l2_params":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true,"arp_termination":true},"interfaces":[{"name":"loop0","sw_if_index":4},{"name":"loop1","sw_if_index":5}]}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth
{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","internal_name":"host-node_1_noeth_1","if_index":2,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:3e:fd:61:28","mtu":1500,"statistics":{"in_packets":20,"in_bytes":1552}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth
{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","internal_name":"host-node_2_noeth_2","if_index":3,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:42:98:22:08","mtu":1500,"statistics":{"in_packets":22,"in_bytes":1732}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_LOOPBACK_H_agent_vpp_1
{"name":"IF_LOOPBACK_H_agent_vpp_1","internal_name":"loop0","if_index":1,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:00:00:aa:bb:00","mtu":1500,"statistics":{}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/local0
{"name":"local0","internal_name":"local0","admin_status":2,"oper_status":2,"statistics":{}}
/vnf-agent/node_1/check/status/v1/agent
{"build_version":"v1.1-5-g55e9977","build_date":"2018-03-06T11:05+00:00","state":1,"start_time":1526476614,"last_change":1526476619,"last_update":1526476765,"commit_hash":"55e99770087087fa8e41a980a8b6257c80c93f4c"}
/vnf-agent/node_1/check/status/v1/plugin/etcdv3
{"state":1,"last_change":1526476619,"last_update":1526476765}
/vnf-agent/node_1/check/status/v1/plugin/kafka
{"state":1,"last_change":1526476619,"last_update":1526476765}
/vnf-agent/node_2/check/status/v1/agent
{"build_version":"v1.1-5-g55e9977","build_date":"2018-03-06T11:05+00:00","state":1,"start_time":1526476623,"last_change":1526476628,"last_update":1526476763,"commit_hash":"55e99770087087fa8e41a980a8b6257c80c93f4c"}
/vnf-agent/node_2/check/status/v1/plugin/etcdv3
{"state":1,"last_change":1526476628,"last_update":1526476763}
/vnf-agent/node_2/check/status/v1/plugin/kafka
{"state":1,"last_change":1526476628,"last_update":1526476763}</msg>
<msg timestamp="20180516 15:19:32.659" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:19:32.659" starttime="20180516 15:19:32.659"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:19:32.660" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:19:32.661" starttime="20180516 15:19:32.660"></status>
</kw>
<msg timestamp="20180516 15:19:32.661" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:19:32.661" starttime="20180516 15:19:32.660"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} on ${machine}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:19:32.661" starttime="20180516 15:19:32.661"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${log}'=='true'</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:19:32.662" starttime="20180516 15:19:32.661"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:19:32.662" starttime="20180516 15:19:32.662"></status>
</kw>
<msg timestamp="20180516 15:19:32.662" level="INFO">${out} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<status status="PASS" endtime="20180516 15:19:32.663" starttime="20180516 15:19:32.400"></status>
</kw>
<msg timestamp="20180516 15:19:32.663" level="INFO">${dump} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<status status="PASS" endtime="20180516 15:19:32.663" starttime="20180516 15:19:32.395"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/etcd_dump-${tag}.txt</arg>
<arg>${dump}</arg>
</arguments>
<msg timestamp="20180516 15:19:32.663" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/etcd_dump-020_Add Tracing on Vpp for AFpackets_test_setup.txt"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/etcd_dump-020_Add Tracing on Vpp for AFpackets_test_setup.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:19:32.664" starttime="20180516 15:19:32.663"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${dump}</arg>
<arg>/error/</arg>
</arguments>
<assign>
<var>${errors}</var>
</assign>
<msg timestamp="20180516 15:19:32.664" level="INFO">0 out of 98 lines matched</msg>
<msg timestamp="20180516 15:19:32.664" level="INFO">${errors} = </msg>
<status status="PASS" endtime="20180516 15:19:32.664" starttime="20180516 15:19:32.664"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${errors}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${errors}</arg>
</arguments>
<msg timestamp="20180516 15:19:32.665" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:19:32.665" starttime="20180516 15:19:32.665"></status>
</kw>
<msg timestamp="20180516 15:19:32.665" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:19:32.665" starttime="20180516 15:19:32.665"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>Errors detected in keys: ${errors}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:19:32.666" starttime="20180516 15:19:32.665"></status>
</kw>
<status status="PASS" endtime="20180516 15:19:32.666" starttime="20180516 15:19:32.394"></status>
</kw>
<status status="PASS" endtime="20180516 15:19:32.666" starttime="20180516 15:19:32.391"></status>
</kw>
<status status="PASS" endtime="20180516 15:19:32.666" starttime="20180516 15:19:32.390"></status>
</kw>
<kw name="vpp_term: Add Trace Afpacket" library="vpp_term">
<doc>vpp_term: Add Trace for afpacket interfaces</doc>
<arguments>
<arg>agent_vpp_1</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
</arguments>
<msg timestamp="20180516 15:19:32.667" level="INFO">agent_vpp_1</msg>
<status status="PASS" endtime="20180516 15:19:32.667" starttime="20180516 15:19:32.667"></status>
</kw>
<kw name="vpp_term: Issue Command" library="vpp_term">
<arguments>
<arg>${node}</arg>
<arg>trace add af-packet-input 10</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${command}</arg>
<arg>${delay}</arg>
<arg>${node}_term</arg>
<arg>${${node}_VPP_TERM_PROMPT}</arg>
</arguments>
<msg timestamp="20180516 15:19:32.668" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:19:32.668" level="INFO">trace add af-packet-input 10</msg>
<msg timestamp="20180516 15:19:32.668" level="INFO">3s</msg>
<msg timestamp="20180516 15:19:32.668" level="INFO">agent_vpp_1_term</msg>
<msg timestamp="20180516 15:19:32.668" level="INFO">vpp#</msg>
<status status="PASS" endtime="20180516 15:19:32.668" starttime="20180516 15:19:32.667"></status>
</kw>
<kw name="Write To Machine Until String" library="ssh">
<doc>*Write Machine ${machine} trace add af-packet-input 10*</doc>
<arguments>
<arg>${node}_term</arg>
<arg>${command}</arg>
<arg>${${node}_VPP_TERM_PROMPT}</arg>
<arg>delay=${delay}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${string}</arg>
<arg>${delay}</arg>
</arguments>
<msg timestamp="20180516 15:19:32.674" level="INFO">agent_vpp_1_term</msg>
<msg timestamp="20180516 15:19:32.674" level="INFO">trace add af-packet-input 10</msg>
<msg timestamp="20180516 15:19:32.674" level="INFO">vpp#</msg>
<msg timestamp="20180516 15:19:32.674" level="INFO">3s</msg>
<status status="PASS" endtime="20180516 15:19:32.674" starttime="20180516 15:19:32.674"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:19:32.675" starttime="20180516 15:19:32.674"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:19:32.675" level="INFO">${currdate} = 2018-05-16 15:19:32.675</msg>
<status status="PASS" endtime="20180516 15:19:32.675" starttime="20180516 15:19:32.675"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20180516 15:19:32.682" level="INFO">trace add af-packet-input 10</msg>
<status status="PASS" endtime="20180516 15:19:32.683" starttime="20180516 15:19:32.675"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>${string}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20180516 15:19:32.683" level="INFO">vpp#</msg>
<msg timestamp="20180516 15:19:32.683" level="INFO">${out} = vpp#</msg>
<status status="PASS" endtime="20180516 15:19:32.683" starttime="20180516 15:19:32.683"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:19:32.684" level="INFO">vpp#</msg>
<status status="PASS" endtime="20180516 15:19:32.684" starttime="20180516 15:19:32.683"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>delay=${delay}</arg>
</arguments>
<assign>
<var>${out2}</var>
</assign>
<msg timestamp="20180516 15:19:35.688" level="INFO">${out2} =  </msg>
<status status="PASS" endtime="20180516 15:19:35.688" starttime="20180516 15:19:32.684"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out2}</arg>
</arguments>
<msg timestamp="20180516 15:19:35.688" level="INFO"> </msg>
<status status="PASS" endtime="20180516 15:19:35.689" starttime="20180516 15:19:35.688"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${out2}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:19:35.689" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_term.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_term.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:19:35.689" starttime="20180516 15:19:35.689"></status>
</kw>
<msg timestamp="20180516 15:19:35.690" level="INFO">${out} = vpp# </msg>
<status status="PASS" endtime="20180516 15:19:35.690" starttime="20180516 15:19:32.673"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:19:35.690" level="INFO">vpp# </msg>
<status status="PASS" endtime="20180516 15:19:35.690" starttime="20180516 15:19:35.690"></status>
</kw>
<msg timestamp="20180516 15:19:35.690" level="INFO">${out} = vpp# </msg>
<status status="PASS" endtime="20180516 15:19:35.690" starttime="20180516 15:19:32.667"></status>
</kw>
<status status="PASS" endtime="20180516 15:19:35.691" starttime="20180516 15:19:32.666"></status>
</kw>
<kw type="teardown" name="TestTeardown">
<kw name="Make Datastore Snapshots" library="setup-teardown">
<arguments>
<arg>${TEST_NAME}_test_teardown</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tag}</arg>
</arguments>
<msg timestamp="20180516 15:19:35.692" level="INFO">Add Tracing on Vpp for AFpackets_test_teardown</msg>
<status status="PASS" endtime="20180516 15:19:35.692" starttime="20180516 15:19:35.692"></status>
</kw>
<kw name="Create Next Snapshot Prefix" library="setup-teardown">
<assign>
<var>${prefix}</var>
</assign>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>str(${snapshot_num}).zfill(3)</arg>
</arguments>
<assign>
<var>${prefix}</var>
</assign>
<msg timestamp="20180516 15:19:35.693" level="INFO">${prefix} = 021</msg>
<status status="PASS" endtime="20180516 15:19:35.693" starttime="20180516 15:19:35.693"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${snapshot_num}+1</arg>
</arguments>
<assign>
<var>${snapshot_num}</var>
</assign>
<msg timestamp="20180516 15:19:35.694" level="INFO">${snapshot_num} = 22</msg>
<status status="PASS" endtime="20180516 15:19:35.694" starttime="20180516 15:19:35.693"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${snapshot_num}</arg>
</arguments>
<msg timestamp="20180516 15:19:35.694" level="INFO">${snapshot_num} = 22</msg>
<status status="PASS" endtime="20180516 15:19:35.694" starttime="20180516 15:19:35.694"></status>
</kw>
<msg timestamp="20180516 15:19:35.694" level="INFO">${prefix} = 021</msg>
<status status="PASS" endtime="20180516 15:19:35.694" starttime="20180516 15:19:35.692"></status>
</kw>
<kw name="Take ETCD Snapshots" library="setup-teardown">
<arguments>
<arg>${prefix}_${tag}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tag}</arg>
</arguments>
<msg timestamp="20180516 15:19:35.695" level="INFO">021_Add Tracing on Vpp for AFpackets_test_teardown</msg>
<status status="PASS" endtime="20180516 15:19:35.695" starttime="20180516 15:19:35.695"></status>
</kw>
<kw name="Get ETCD Dump" library="setup-teardown">
<assign>
<var>${dump}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DOCKER_COMMAND} exec etcd etcdctl get --prefix="true" ""</arg>
</arguments>
<assign>
<var>${command}</var>
</assign>
<msg timestamp="20180516 15:19:35.696" level="INFO">${command} = sudo docker exec etcd etcdctl get --prefix="true" ""</msg>
<status status="PASS" endtime="20180516 15:19:35.696" starttime="20180516 15:19:35.696"></status>
</kw>
<kw name="Execute On Machine" library="ssh">
<doc>*Execute On Machine ${machine} sudo docker exec etcd etcdctl get --prefix="true" ""*</doc>
<arguments>
<arg>docker</arg>
<arg>${command}</arg>
<arg>log=false</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${log}</arg>
</arguments>
<msg timestamp="20180516 15:19:35.702" level="INFO">docker</msg>
<msg timestamp="20180516 15:19:35.702" level="INFO">sudo docker exec etcd etcdctl get --prefix="true" ""</msg>
<msg timestamp="20180516 15:19:35.702" level="INFO">false</msg>
<status status="PASS" endtime="20180516 15:19:35.702" starttime="20180516 15:19:35.702"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:19:35.703" starttime="20180516 15:19:35.702"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:19:35.703" level="INFO">${currdate} = 2018-05-16 15:19:35.703</msg>
<status status="PASS" endtime="20180516 15:19:35.703" starttime="20180516 15:19:35.703"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20180516 15:19:35.704" level="INFO">Executing command 'sudo docker exec etcd etcdctl get --prefix="true" ""'.</msg>
<msg timestamp="20180516 15:19:36.064" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:19:36.064" level="INFO">${out} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<msg timestamp="20180516 15:19:36.064" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20180516 15:19:36.064" starttime="20180516 15:19:35.703"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${out}</arg>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:19:36.064" level="INFO">/sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-containers","description":"Wire 2 VNF containers to the vpp switch","type":2,"elements":[{"container":"node_1","port_label":"node1_veth","etcd_vpp_switch_key":"agent_vpp_1","ipv4_addr":"10.0.0.10","type":3},{"container":"node_2","port_label":"node2_veth","etcd_vpp_switch_key":"agent_vpp_1","ipv4_addr":"10.0.0.11","type":3}]}
/sfc-controller/v1/SP
{"mtu":1500,"starting_vlan_id":5000,"default_static_route_weight":5,"dynamic_bridge_parms":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true},"static_bridge_parms":{"forward":true}}
/sfc-controller/v1/id/HE/agent_vpp_1
{"name":"agent_vpp_1"}
/sfc-controller/v1/id/SFC/two-sample-vnf-containers/node_1_node1_veth
{"sfc_name":"two-sample-vnf-containers","container":"node_1","port":"node1_veth","mac_addr_id":1,"veth_id":1}
/sfc-controller/v1/id/SFC/two-sample-vnf-containers/node_2_node2_veth
{"sfc_name":"two-sample-vnf-containers","container":"node_2","port":"node2_veth","mac_addr_id":2,"veth_id":2}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VNF_node_1_node1_veth
{"name":"IF_VETH_VNF_node_1_node1_veth","enabled":true,"phys_address":"02:00:00:00:00:01","mtu":1500,"host_if_name":"node1_veth","ip_addresses":["10.0.0.10/24"],"namespace":{"type":1,"microservice":"node_1"},"veth":{"peer_if_name":"IF_VETH_VSWITCH_node_1_node1_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VNF_node_2_node2_veth
{"name":"IF_VETH_VNF_node_2_node2_veth","enabled":true,"phys_address":"02:00:00:00:00:02","mtu":1500,"host_if_name":"node2_veth","ip_addresses":["10.0.0.11/24"],"namespace":{"type":1,"microservice":"node_2"},"veth":{"peer_if_name":"IF_VETH_VSWITCH_node_2_node2_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VSWITCH_node_1_node1_veth
{"name":"IF_VETH_VSWITCH_node_1_node1_veth","enabled":true,"mtu":1500,"host_if_name":"node_1_noeth_1","namespace":{"type":1,"microservice":"agent_vpp_1"},"veth":{"peer_if_name":"IF_VETH_VNF_node_1_node1_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VSWITCH_node_2_node2_veth
{"name":"IF_VETH_VSWITCH_node_2_node2_veth","enabled":true,"mtu":1500,"host_if_name":"node_2_noeth_2","namespace":{"type":1,"microservice":"agent_vpp_1"},"veth":{"peer_if_name":"IF_VETH_VNF_node_2_node2_veth"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/BD_INTERNAL_EW_L2FIB_agent_vpp_1
{"name":"BD_INTERNAL_EW_L2FIB_agent_vpp_1","forward":true}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/BD_INTERNAL_EW_agent_vpp_1
{"name":"BD_INTERNAL_EW_agent_vpp_1","flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true,"interfaces":[{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth"},{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth"}]}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/bd2
{
  "name": "bd2",
  "flood": true,
  "unknown_unicast_flood": true,
  "forward": true,
  "learn": true,
  "arp_termination": true,
  "interfaces": [
    { "name": "loop0" },{ "name": "loop1" }
  ]
}


/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth
{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","type":4,"enabled":true,"mtu":1500,"afpacket":{"host_if_name":"node_1_noeth_1"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth
{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","type":4,"enabled":true,"mtu":1500,"afpacket":{"host_if_name":"node_2_noeth_2"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_LOOPBACK_H_agent_vpp_1
{"name":"IF_LOOPBACK_H_agent_vpp_1","enabled":true,"phys_address":"02:00:00:AA:BB:00","mtu":1500,"ip_addresses":["6.0.0.100"]}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/loop0
{
  "name": "loop0",
  "type": 0,
  "enabled": true,
  "phys_address": "8a:f1:be:90:00:00",
  "mtu": 1500,
  "vrf": 0,
  "ip_addresses": [
    "20.1.1.1/24"
  ]
}


/vnf-agent/agent_vpp_1/vpp/config/v1/interface/loop1
{
  "name": "loop1",
  "type": 0,
  "enabled": true,
  "phys_address": "8a:f1:be:90:20:00",
  "mtu": 1500,
  "vrf": 0,
  "ip_addresses": [
    "30.1.1.1/24"
  ]
}


/vnf-agent/agent_vpp_1/vpp/status/v1/bd/BD_INTERNAL_EW_L2FIB_agent_vpp_1
{"index":2,"internal_name":"BD_INTERNAL_EW_L2FIB_agent_vpp_1","bvi_interface":"not_set","last_change":1526476631,"l2_params":{"forward":true}}
/vnf-agent/agent_vpp_1/vpp/status/v1/bd/BD_INTERNAL_EW_agent_vpp_1
{"index":1,"internal_name":"BD_INTERNAL_EW_agent_vpp_1","bvi_interface":"not_set","interface_count":2,"last_change":1526476631,"l2_params":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true},"interfaces":[{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","sw_if_index":2},{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","sw_if_index":3}]}
/vnf-agent/agent_vpp_1/vpp/status/v1/bd/bd2
{"index":3,"internal_name":"bd2","bvi_interface":"not_set","interface_count":2,"last_change":1526476768,"l2_params":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true,"arp_termination":true},"interfaces":[{"name":"loop0","sw_if_index":4},{"name":"loop1","sw_if_index":5}]}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth
{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","internal_name":"host-node_1_noeth_1","if_index":2,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:3e:fd:61:28","mtu":1500,"statistics":{"in_packets":20,"in_bytes":1552}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth
{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","internal_name":"host-node_2_noeth_2","if_index":3,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:42:98:22:08","mtu":1500,"statistics":{"in_packets":22,"in_bytes":1732}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_LOOPBACK_H_agent_vpp_1
{"name":"IF_LOOPBACK_H_agent_vpp_1","internal_name":"loop0","if_index":1,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:00:00:aa:bb:00","mtu":1500,"statistics":{}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/local0
{"name":"local0","internal_name":"local0","admin_status":2,"oper_status":2,"statistics":{}}
/vnf-agent/node_1/check/status/v1/agent
{"build_version":"v1.1-5-g55e9977","build_date":"2018-03-06T11:05+00:00","state":1,"start_time":1526476614,"last_change":1526476619,"last_update":1526476775,"commit_hash":"55e99770087087fa8e41a980a8b6257c80c93f4c"}
/vnf-agent/node_1/check/status/v1/plugin/etcdv3
{"state":1,"last_change":1526476619,"last_update":1526476775}
/vnf-agent/node_1/check/status/v1/plugin/kafka
{"state":1,"last_change":1526476619,"last_update":1526476775}
/vnf-agent/node_2/check/status/v1/agent
{"build_version":"v1.1-5-g55e9977","build_date":"2018-03-06T11:05+00:00","state":1,"start_time":1526476623,"last_change":1526476628,"last_update":1526476773,"commit_hash":"55e99770087087fa8e41a980a8b6257c80c93f4c"}
/vnf-agent/node_2/check/status/v1/plugin/etcdv3
{"state":1,"last_change":1526476628,"last_update":1526476773}
/vnf-agent/node_2/check/status/v1/plugin/kafka
{"state":1,"last_change":1526476628,"last_update":1526476773}</msg>
<msg timestamp="20180516 15:19:36.065" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:19:36.065" starttime="20180516 15:19:36.064"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:19:36.066" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:19:36.066" starttime="20180516 15:19:36.065"></status>
</kw>
<msg timestamp="20180516 15:19:36.066" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:19:36.066" starttime="20180516 15:19:36.065"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} on ${machine}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:19:36.066" starttime="20180516 15:19:36.066"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${log}'=='true'</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:19:36.067" starttime="20180516 15:19:36.066"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:19:36.067" starttime="20180516 15:19:36.067"></status>
</kw>
<msg timestamp="20180516 15:19:36.067" level="INFO">${out} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<status status="PASS" endtime="20180516 15:19:36.067" starttime="20180516 15:19:35.700"></status>
</kw>
<msg timestamp="20180516 15:19:36.068" level="INFO">${dump} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<status status="PASS" endtime="20180516 15:19:36.068" starttime="20180516 15:19:35.695"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/etcd_dump-${tag}.txt</arg>
<arg>${dump}</arg>
</arguments>
<msg timestamp="20180516 15:19:36.068" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/etcd_dump-021_Add Tracing on Vpp for AFpackets_test_teardown.txt"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/etcd_dump-021_Add Tracing on Vpp for AFpackets_test_teardown.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:19:36.068" starttime="20180516 15:19:36.068"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${dump}</arg>
<arg>/error/</arg>
</arguments>
<assign>
<var>${errors}</var>
</assign>
<msg timestamp="20180516 15:19:36.069" level="INFO">0 out of 98 lines matched</msg>
<msg timestamp="20180516 15:19:36.069" level="INFO">${errors} = </msg>
<status status="PASS" endtime="20180516 15:19:36.069" starttime="20180516 15:19:36.069"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${errors}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${errors}</arg>
</arguments>
<msg timestamp="20180516 15:19:36.070" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:19:36.070" starttime="20180516 15:19:36.070"></status>
</kw>
<msg timestamp="20180516 15:19:36.070" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:19:36.070" starttime="20180516 15:19:36.069"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>Errors detected in keys: ${errors}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:19:36.070" starttime="20180516 15:19:36.070"></status>
</kw>
<status status="PASS" endtime="20180516 15:19:36.070" starttime="20180516 15:19:35.695"></status>
</kw>
<status status="PASS" endtime="20180516 15:19:36.071" starttime="20180516 15:19:35.691"></status>
</kw>
<status status="PASS" endtime="20180516 15:19:36.071" starttime="20180516 15:19:35.691"></status>
</kw>
<status status="PASS" endtime="20180516 15:19:36.071" critical="yes" starttime="20180516 15:19:32.390"></status>
</test>
<test id="s1-t11" name="Show All Objects">
<kw type="setup" name="TestSetup">
<kw name="Make Datastore Snapshots" library="setup-teardown">
<arguments>
<arg>${TEST_NAME}_test_setup</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tag}</arg>
</arguments>
<msg timestamp="20180516 15:19:36.072" level="INFO">Show All Objects_test_setup</msg>
<status status="PASS" endtime="20180516 15:19:36.072" starttime="20180516 15:19:36.072"></status>
</kw>
<kw name="Create Next Snapshot Prefix" library="setup-teardown">
<assign>
<var>${prefix}</var>
</assign>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>str(${snapshot_num}).zfill(3)</arg>
</arguments>
<assign>
<var>${prefix}</var>
</assign>
<msg timestamp="20180516 15:19:36.074" level="INFO">${prefix} = 022</msg>
<status status="PASS" endtime="20180516 15:19:36.074" starttime="20180516 15:19:36.074"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${snapshot_num}+1</arg>
</arguments>
<assign>
<var>${snapshot_num}</var>
</assign>
<msg timestamp="20180516 15:19:36.075" level="INFO">${snapshot_num} = 23</msg>
<status status="PASS" endtime="20180516 15:19:36.075" starttime="20180516 15:19:36.074"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${snapshot_num}</arg>
</arguments>
<msg timestamp="20180516 15:19:36.075" level="INFO">${snapshot_num} = 23</msg>
<status status="PASS" endtime="20180516 15:19:36.075" starttime="20180516 15:19:36.075"></status>
</kw>
<msg timestamp="20180516 15:19:36.075" level="INFO">${prefix} = 022</msg>
<status status="PASS" endtime="20180516 15:19:36.075" starttime="20180516 15:19:36.073"></status>
</kw>
<kw name="Take ETCD Snapshots" library="setup-teardown">
<arguments>
<arg>${prefix}_${tag}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tag}</arg>
</arguments>
<msg timestamp="20180516 15:19:36.076" level="INFO">022_Show All Objects_test_setup</msg>
<status status="PASS" endtime="20180516 15:19:36.076" starttime="20180516 15:19:36.076"></status>
</kw>
<kw name="Get ETCD Dump" library="setup-teardown">
<assign>
<var>${dump}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DOCKER_COMMAND} exec etcd etcdctl get --prefix="true" ""</arg>
</arguments>
<assign>
<var>${command}</var>
</assign>
<msg timestamp="20180516 15:19:36.077" level="INFO">${command} = sudo docker exec etcd etcdctl get --prefix="true" ""</msg>
<status status="PASS" endtime="20180516 15:19:36.077" starttime="20180516 15:19:36.077"></status>
</kw>
<kw name="Execute On Machine" library="ssh">
<doc>*Execute On Machine ${machine} sudo docker exec etcd etcdctl get --prefix="true" ""*</doc>
<arguments>
<arg>docker</arg>
<arg>${command}</arg>
<arg>log=false</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${log}</arg>
</arguments>
<msg timestamp="20180516 15:19:36.088" level="INFO">docker</msg>
<msg timestamp="20180516 15:19:36.088" level="INFO">sudo docker exec etcd etcdctl get --prefix="true" ""</msg>
<msg timestamp="20180516 15:19:36.088" level="INFO">false</msg>
<status status="PASS" endtime="20180516 15:19:36.088" starttime="20180516 15:19:36.084"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:19:36.089" starttime="20180516 15:19:36.088"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:19:36.089" level="INFO">${currdate} = 2018-05-16 15:19:36.089</msg>
<status status="PASS" endtime="20180516 15:19:36.089" starttime="20180516 15:19:36.089"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20180516 15:19:36.090" level="INFO">Executing command 'sudo docker exec etcd etcdctl get --prefix="true" ""'.</msg>
<msg timestamp="20180516 15:19:36.364" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:19:36.364" level="INFO">${out} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<msg timestamp="20180516 15:19:36.364" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20180516 15:19:36.364" starttime="20180516 15:19:36.090"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${out}</arg>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:19:36.364" level="INFO">/sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-containers","description":"Wire 2 VNF containers to the vpp switch","type":2,"elements":[{"container":"node_1","port_label":"node1_veth","etcd_vpp_switch_key":"agent_vpp_1","ipv4_addr":"10.0.0.10","type":3},{"container":"node_2","port_label":"node2_veth","etcd_vpp_switch_key":"agent_vpp_1","ipv4_addr":"10.0.0.11","type":3}]}
/sfc-controller/v1/SP
{"mtu":1500,"starting_vlan_id":5000,"default_static_route_weight":5,"dynamic_bridge_parms":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true},"static_bridge_parms":{"forward":true}}
/sfc-controller/v1/id/HE/agent_vpp_1
{"name":"agent_vpp_1"}
/sfc-controller/v1/id/SFC/two-sample-vnf-containers/node_1_node1_veth
{"sfc_name":"two-sample-vnf-containers","container":"node_1","port":"node1_veth","mac_addr_id":1,"veth_id":1}
/sfc-controller/v1/id/SFC/two-sample-vnf-containers/node_2_node2_veth
{"sfc_name":"two-sample-vnf-containers","container":"node_2","port":"node2_veth","mac_addr_id":2,"veth_id":2}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VNF_node_1_node1_veth
{"name":"IF_VETH_VNF_node_1_node1_veth","enabled":true,"phys_address":"02:00:00:00:00:01","mtu":1500,"host_if_name":"node1_veth","ip_addresses":["10.0.0.10/24"],"namespace":{"type":1,"microservice":"node_1"},"veth":{"peer_if_name":"IF_VETH_VSWITCH_node_1_node1_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VNF_node_2_node2_veth
{"name":"IF_VETH_VNF_node_2_node2_veth","enabled":true,"phys_address":"02:00:00:00:00:02","mtu":1500,"host_if_name":"node2_veth","ip_addresses":["10.0.0.11/24"],"namespace":{"type":1,"microservice":"node_2"},"veth":{"peer_if_name":"IF_VETH_VSWITCH_node_2_node2_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VSWITCH_node_1_node1_veth
{"name":"IF_VETH_VSWITCH_node_1_node1_veth","enabled":true,"mtu":1500,"host_if_name":"node_1_noeth_1","namespace":{"type":1,"microservice":"agent_vpp_1"},"veth":{"peer_if_name":"IF_VETH_VNF_node_1_node1_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VSWITCH_node_2_node2_veth
{"name":"IF_VETH_VSWITCH_node_2_node2_veth","enabled":true,"mtu":1500,"host_if_name":"node_2_noeth_2","namespace":{"type":1,"microservice":"agent_vpp_1"},"veth":{"peer_if_name":"IF_VETH_VNF_node_2_node2_veth"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/BD_INTERNAL_EW_L2FIB_agent_vpp_1
{"name":"BD_INTERNAL_EW_L2FIB_agent_vpp_1","forward":true}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/BD_INTERNAL_EW_agent_vpp_1
{"name":"BD_INTERNAL_EW_agent_vpp_1","flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true,"interfaces":[{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth"},{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth"}]}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/bd2
{
  "name": "bd2",
  "flood": true,
  "unknown_unicast_flood": true,
  "forward": true,
  "learn": true,
  "arp_termination": true,
  "interfaces": [
    { "name": "loop0" },{ "name": "loop1" }
  ]
}


/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth
{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","type":4,"enabled":true,"mtu":1500,"afpacket":{"host_if_name":"node_1_noeth_1"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth
{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","type":4,"enabled":true,"mtu":1500,"afpacket":{"host_if_name":"node_2_noeth_2"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_LOOPBACK_H_agent_vpp_1
{"name":"IF_LOOPBACK_H_agent_vpp_1","enabled":true,"phys_address":"02:00:00:AA:BB:00","mtu":1500,"ip_addresses":["6.0.0.100"]}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/loop0
{
  "name": "loop0",
  "type": 0,
  "enabled": true,
  "phys_address": "8a:f1:be:90:00:00",
  "mtu": 1500,
  "vrf": 0,
  "ip_addresses": [
    "20.1.1.1/24"
  ]
}


/vnf-agent/agent_vpp_1/vpp/config/v1/interface/loop1
{
  "name": "loop1",
  "type": 0,
  "enabled": true,
  "phys_address": "8a:f1:be:90:20:00",
  "mtu": 1500,
  "vrf": 0,
  "ip_addresses": [
    "30.1.1.1/24"
  ]
}


/vnf-agent/agent_vpp_1/vpp/status/v1/bd/BD_INTERNAL_EW_L2FIB_agent_vpp_1
{"index":2,"internal_name":"BD_INTERNAL_EW_L2FIB_agent_vpp_1","bvi_interface":"not_set","last_change":1526476631,"l2_params":{"forward":true}}
/vnf-agent/agent_vpp_1/vpp/status/v1/bd/BD_INTERNAL_EW_agent_vpp_1
{"index":1,"internal_name":"BD_INTERNAL_EW_agent_vpp_1","bvi_interface":"not_set","interface_count":2,"last_change":1526476631,"l2_params":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true},"interfaces":[{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","sw_if_index":2},{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","sw_if_index":3}]}
/vnf-agent/agent_vpp_1/vpp/status/v1/bd/bd2
{"index":3,"internal_name":"bd2","bvi_interface":"not_set","interface_count":2,"last_change":1526476768,"l2_params":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true,"arp_termination":true},"interfaces":[{"name":"loop0","sw_if_index":4},{"name":"loop1","sw_if_index":5}]}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth
{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","internal_name":"host-node_1_noeth_1","if_index":2,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:3e:fd:61:28","mtu":1500,"statistics":{"in_packets":20,"in_bytes":1552}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth
{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","internal_name":"host-node_2_noeth_2","if_index":3,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:42:98:22:08","mtu":1500,"statistics":{"in_packets":22,"in_bytes":1732}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_LOOPBACK_H_agent_vpp_1
{"name":"IF_LOOPBACK_H_agent_vpp_1","internal_name":"loop0","if_index":1,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:00:00:aa:bb:00","mtu":1500,"statistics":{}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/local0
{"name":"local0","internal_name":"local0","admin_status":2,"oper_status":2,"statistics":{}}
/vnf-agent/node_1/check/status/v1/agent
{"build_version":"v1.1-5-g55e9977","build_date":"2018-03-06T11:05+00:00","state":1,"start_time":1526476614,"last_change":1526476619,"last_update":1526476775,"commit_hash":"55e99770087087fa8e41a980a8b6257c80c93f4c"}
/vnf-agent/node_1/check/status/v1/plugin/etcdv3
{"state":1,"last_change":1526476619,"last_update":1526476775}
/vnf-agent/node_1/check/status/v1/plugin/kafka
{"state":1,"last_change":1526476619,"last_update":1526476775}
/vnf-agent/node_2/check/status/v1/agent
{"build_version":"v1.1-5-g55e9977","build_date":"2018-03-06T11:05+00:00","state":1,"start_time":1526476623,"last_change":1526476628,"last_update":1526476773,"commit_hash":"55e99770087087fa8e41a980a8b6257c80c93f4c"}
/vnf-agent/node_2/check/status/v1/plugin/etcdv3
{"state":1,"last_change":1526476628,"last_update":1526476773}
/vnf-agent/node_2/check/status/v1/plugin/kafka
{"state":1,"last_change":1526476628,"last_update":1526476773}</msg>
<msg timestamp="20180516 15:19:36.365" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:19:36.365" starttime="20180516 15:19:36.364"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:19:36.366" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:19:36.366" starttime="20180516 15:19:36.366"></status>
</kw>
<msg timestamp="20180516 15:19:36.366" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:19:36.366" starttime="20180516 15:19:36.365"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} on ${machine}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:19:36.367" starttime="20180516 15:19:36.367"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${log}'=='true'</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:19:36.367" starttime="20180516 15:19:36.367"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:19:36.368" starttime="20180516 15:19:36.368"></status>
</kw>
<msg timestamp="20180516 15:19:36.368" level="INFO">${out} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<status status="PASS" endtime="20180516 15:19:36.368" starttime="20180516 15:19:36.083"></status>
</kw>
<msg timestamp="20180516 15:19:36.368" level="INFO">${dump} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<status status="PASS" endtime="20180516 15:19:36.368" starttime="20180516 15:19:36.076"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/etcd_dump-${tag}.txt</arg>
<arg>${dump}</arg>
</arguments>
<msg timestamp="20180516 15:19:36.369" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/etcd_dump-022_Show All Objects_test_setup.txt"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/etcd_dump-022_Show All Objects_test_setup.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:19:36.369" starttime="20180516 15:19:36.369"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${dump}</arg>
<arg>/error/</arg>
</arguments>
<assign>
<var>${errors}</var>
</assign>
<msg timestamp="20180516 15:19:36.370" level="INFO">0 out of 98 lines matched</msg>
<msg timestamp="20180516 15:19:36.370" level="INFO">${errors} = </msg>
<status status="PASS" endtime="20180516 15:19:36.370" starttime="20180516 15:19:36.370"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${errors}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${errors}</arg>
</arguments>
<msg timestamp="20180516 15:19:36.371" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:19:36.371" starttime="20180516 15:19:36.371"></status>
</kw>
<msg timestamp="20180516 15:19:36.371" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:19:36.371" starttime="20180516 15:19:36.371"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>Errors detected in keys: ${errors}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:19:36.372" starttime="20180516 15:19:36.372"></status>
</kw>
<status status="PASS" endtime="20180516 15:19:36.372" starttime="20180516 15:19:36.075"></status>
</kw>
<status status="PASS" endtime="20180516 15:19:36.372" starttime="20180516 15:19:36.072"></status>
</kw>
<status status="PASS" endtime="20180516 15:19:36.372" starttime="20180516 15:19:36.072"></status>
</kw>
<kw name="Show Interfaces And Other Objects">
<kw name="vpp_term: Show Interfaces" library="vpp_term">
<doc>Show interfaces through vpp terminal</doc>
<arguments>
<arg>agent_vpp_1</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${interface}</arg>
</arguments>
<msg timestamp="20180516 15:19:36.373" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:19:36.373" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:19:36.373" starttime="20180516 15:19:36.373"></status>
</kw>
<kw name="vpp_term: Issue Command" library="vpp_term">
<arguments>
<arg>${node}</arg>
<arg>sh int ${interface}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${command}</arg>
<arg>${delay}</arg>
<arg>${node}_term</arg>
<arg>${${node}_VPP_TERM_PROMPT}</arg>
</arguments>
<msg timestamp="20180516 15:19:36.374" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:19:36.374" level="INFO">sh int </msg>
<msg timestamp="20180516 15:19:36.374" level="INFO">3s</msg>
<msg timestamp="20180516 15:19:36.375" level="INFO">agent_vpp_1_term</msg>
<msg timestamp="20180516 15:19:36.375" level="INFO">vpp#</msg>
<status status="PASS" endtime="20180516 15:19:36.375" starttime="20180516 15:19:36.374"></status>
</kw>
<kw name="Write To Machine Until String" library="ssh">
<doc>*Write Machine ${machine} sh int *</doc>
<arguments>
<arg>${node}_term</arg>
<arg>${command}</arg>
<arg>${${node}_VPP_TERM_PROMPT}</arg>
<arg>delay=${delay}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${string}</arg>
<arg>${delay}</arg>
</arguments>
<msg timestamp="20180516 15:19:36.399" level="INFO">agent_vpp_1_term</msg>
<msg timestamp="20180516 15:19:36.399" level="INFO">sh int </msg>
<msg timestamp="20180516 15:19:36.399" level="INFO">vpp#</msg>
<msg timestamp="20180516 15:19:36.399" level="INFO">3s</msg>
<status status="PASS" endtime="20180516 15:19:36.399" starttime="20180516 15:19:36.398"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:19:36.399" starttime="20180516 15:19:36.399"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:19:36.409" level="INFO">${currdate} = 2018-05-16 15:19:36.409</msg>
<status status="PASS" endtime="20180516 15:19:36.409" starttime="20180516 15:19:36.408"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20180516 15:19:36.412" level="INFO">sh int</msg>
<status status="PASS" endtime="20180516 15:19:36.413" starttime="20180516 15:19:36.409"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>${string}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20180516 15:19:36.426" level="INFO">Name               Idx       State          Counter          Count     
host-node_1_noeth_1               2         up       rx packets                    20
                                                     rx bytes                    1552
                                                     tx packets                    22
                                                     tx bytes                    1732
host-node_2_noeth_2               3         up       rx packets                    22
                                                     rx bytes                    1732
                                                     tx packets                    20
                                                     tx bytes                    1552
local0                            0        down      
loop0                             1         up       
loop1                             4         up       
loop2                             5         up       
vpp#</msg>
<msg timestamp="20180516 15:19:36.426" level="INFO">${out} =               Name               Idx       State          Counter          Count     
host-node_1_noeth_1               2         up       rx packets                    20
                          ...</msg>
<status status="PASS" endtime="20180516 15:19:36.431" starttime="20180516 15:19:36.413"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:19:36.432" level="INFO">              Name               Idx       State          Counter          Count     
host-node_1_noeth_1               2         up       rx packets                    20
                                                     rx bytes                    1552
                                                     tx packets                    22
                                                     tx bytes                    1732
host-node_2_noeth_2               3         up       rx packets                    22
                                                     rx bytes                    1732
                                                     tx packets                    20
                                                     tx bytes                    1552
local0                            0        down      
loop0                             1         up       
loop1                             4         up       
loop2                             5         up       
vpp#</msg>
<status status="PASS" endtime="20180516 15:19:36.432" starttime="20180516 15:19:36.431"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>delay=${delay}</arg>
</arguments>
<assign>
<var>${out2}</var>
</assign>
<msg timestamp="20180516 15:19:39.435" level="INFO">${out2} =  </msg>
<status status="PASS" endtime="20180516 15:19:39.435" starttime="20180516 15:19:36.432"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out2}</arg>
</arguments>
<msg timestamp="20180516 15:19:39.436" level="INFO"> </msg>
<status status="PASS" endtime="20180516 15:19:39.436" starttime="20180516 15:19:39.436"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${out2}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:19:39.437" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_term.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_term.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:19:39.437" starttime="20180516 15:19:39.437"></status>
</kw>
<msg timestamp="20180516 15:19:39.438" level="INFO">${out} =               Name               Idx       State          Counter          Count     
host-node_1_noeth_1               2         up       rx packets                    20
                          ...</msg>
<status status="PASS" endtime="20180516 15:19:39.438" starttime="20180516 15:19:36.397"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:19:39.438" level="INFO">              Name               Idx       State          Counter          Count     
host-node_1_noeth_1               2         up       rx packets                    20
                                                     rx bytes                    1552
                                                     tx packets                    22
                                                     tx bytes                    1732
host-node_2_noeth_2               3         up       rx packets                    22
                                                     rx bytes                    1732
                                                     tx packets                    20
                                                     tx bytes                    1552
local0                            0        down      
loop0                             1         up       
loop1                             4         up       
loop2                             5         up       
vpp# </msg>
<status status="PASS" endtime="20180516 15:19:39.438" starttime="20180516 15:19:39.438"></status>
</kw>
<msg timestamp="20180516 15:19:39.439" level="INFO">${out} =               Name               Idx       State          Counter          Count     
host-node_1_noeth_1               2         up       rx packets                    20
                          ...</msg>
<status status="PASS" endtime="20180516 15:19:39.439" starttime="20180516 15:19:36.374"></status>
</kw>
<status status="PASS" endtime="20180516 15:19:39.439" starttime="20180516 15:19:36.373"></status>
</kw>
<kw name="Write To Machine" library="ssh">
<doc>*Write Machine ${machine} ${command}*</doc>
<arguments>
<arg>agent_vpp_1_term</arg>
<arg>show int addr</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${delay}</arg>
</arguments>
<msg timestamp="20180516 15:19:39.449" level="INFO">agent_vpp_1_term</msg>
<msg timestamp="20180516 15:19:39.449" level="INFO">show int addr</msg>
<msg timestamp="20180516 15:19:39.449" level="INFO">3s</msg>
<status status="PASS" endtime="20180516 15:19:39.449" starttime="20180516 15:19:39.448"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:19:39.449" starttime="20180516 15:19:39.449"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:19:39.450" level="INFO">${currdate} = 2018-05-16 15:19:39.450</msg>
<status status="PASS" endtime="20180516 15:19:39.450" starttime="20180516 15:19:39.450"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20180516 15:19:39.453" level="INFO">show int addr</msg>
<status status="PASS" endtime="20180516 15:19:39.454" starttime="20180516 15:19:39.450"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>delay=${delay}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20180516 15:19:45.462" level="INFO">host-node_1_noeth_1 (up):
  L2 bridge bd-id 1 idx 1 shg 0  
host-node_2_noeth_2 (up):
  L2 bridge bd-id 1 idx 1 shg 0  
local0 (dn):
loop0 (up):
  L3 6.0.0.100/32
loop1 (up):
  L2 bridge bd-id 3 idx 3 shg 0  
  L3 20.1.1.1/24
loop2 (up):
  L2 bridge bd-id 3 idx 3 shg 0  
  L3 30.1.1.1/24
vpp#</msg>
<msg timestamp="20180516 15:19:45.463" level="INFO">${out} = host-node_1_noeth_1 (up):
  L2 bridge bd-id 1 idx 1 shg 0  
host-node_2_noeth_2 (up):
  L2 bridge bd-id 1 idx 1 shg 0  
local0 (dn):
loop0 (up):
  L3 6.0.0.100/32
loop1 (up):
  L2 bridge bd-id...</msg>
<status status="PASS" endtime="20180516 15:19:45.463" starttime="20180516 15:19:39.456"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:19:45.464" level="INFO">host-node_1_noeth_1 (up):
  L2 bridge bd-id 1 idx 1 shg 0  
host-node_2_noeth_2 (up):
  L2 bridge bd-id 1 idx 1 shg 0  
local0 (dn):
loop0 (up):
  L3 6.0.0.100/32
loop1 (up):
  L2 bridge bd-id 3 idx 3 shg 0  
  L3 20.1.1.1/24
loop2 (up):
  L2 bridge bd-id 3 idx 3 shg 0  
  L3 30.1.1.1/24
vpp# </msg>
<status status="PASS" endtime="20180516 15:19:45.464" starttime="20180516 15:19:45.463"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:19:45.466" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_term.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_term.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:19:45.466" starttime="20180516 15:19:45.464"></status>
</kw>
<status status="PASS" endtime="20180516 15:19:45.466" starttime="20180516 15:19:39.447"></status>
</kw>
<kw name="Write To Machine" library="ssh">
<doc>*Write Machine ${machine} ${command}*</doc>
<arguments>
<arg>agent_vpp_1_term</arg>
<arg>show h</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${delay}</arg>
</arguments>
<msg timestamp="20180516 15:19:45.477" level="INFO">agent_vpp_1_term</msg>
<msg timestamp="20180516 15:19:45.477" level="INFO">show h</msg>
<msg timestamp="20180516 15:19:45.477" level="INFO">3s</msg>
<status status="PASS" endtime="20180516 15:19:45.477" starttime="20180516 15:19:45.477"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:19:45.477" starttime="20180516 15:19:45.477"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:19:45.478" level="INFO">${currdate} = 2018-05-16 15:19:45.478</msg>
<status status="PASS" endtime="20180516 15:19:45.478" starttime="20180516 15:19:45.478"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20180516 15:19:45.481" level="INFO">show h</msg>
<status status="PASS" endtime="20180516 15:19:45.481" starttime="20180516 15:19:45.478"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>delay=${delay}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20180516 15:19:51.494" level="INFO">Name                Idx   Link  Hardware
host-node_1_noeth_1                2     up   host-node_1_noeth_1
  Ethernet address 02:fe:3e:fd:61:28
  Linux PACKET socket interface
host-node_2_noeth_2                3     up   host-node_2_noeth_2
  Ethernet address 02:fe:42:98:22:08
  Linux PACKET socket interface
local0                             0    down  local0
  local
loop0                              1     up   loop0
  Ethernet address 02:00:00:aa:bb:00
loop1                              4     up   loop1
  Ethernet address 8a:f1:be:90:00:00
loop2                              5     up   loop2
  Ethernet address 8a:f1:be:90:20:00
vpp#</msg>
<msg timestamp="20180516 15:19:51.494" level="INFO">${out} =               Name                Idx   Link  Hardware
host-node_1_noeth_1                2     up   host-node_1_noeth_1
  Ethernet address 02:fe:3e:fd:61:28
  Linux PACKET socket interface
host-n...</msg>
<status status="PASS" endtime="20180516 15:19:51.494" starttime="20180516 15:19:45.483"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:19:51.495" level="INFO">              Name                Idx   Link  Hardware
host-node_1_noeth_1                2     up   host-node_1_noeth_1
  Ethernet address 02:fe:3e:fd:61:28
  Linux PACKET socket interface
host-node_2_noeth_2                3     up   host-node_2_noeth_2
  Ethernet address 02:fe:42:98:22:08
  Linux PACKET socket interface
local0                             0    down  local0
  local
loop0                              1     up   loop0
  Ethernet address 02:00:00:aa:bb:00
loop1                              4     up   loop1
  Ethernet address 8a:f1:be:90:00:00
loop2                              5     up   loop2
  Ethernet address 8a:f1:be:90:20:00
vpp# </msg>
<status status="PASS" endtime="20180516 15:19:51.495" starttime="20180516 15:19:51.495"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:19:51.496" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_term.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_term.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:19:51.496" starttime="20180516 15:19:51.495"></status>
</kw>
<status status="PASS" endtime="20180516 15:19:51.496" starttime="20180516 15:19:45.476"></status>
</kw>
<kw name="Write To Machine" library="ssh">
<doc>*Write Machine ${machine} ${command}*</doc>
<arguments>
<arg>agent_vpp_1_term</arg>
<arg>show br</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${delay}</arg>
</arguments>
<msg timestamp="20180516 15:19:51.505" level="INFO">agent_vpp_1_term</msg>
<msg timestamp="20180516 15:19:51.506" level="INFO">show br</msg>
<msg timestamp="20180516 15:19:51.506" level="INFO">3s</msg>
<status status="PASS" endtime="20180516 15:19:51.506" starttime="20180516 15:19:51.505"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:19:51.506" starttime="20180516 15:19:51.506"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:19:51.507" level="INFO">${currdate} = 2018-05-16 15:19:51.507</msg>
<status status="PASS" endtime="20180516 15:19:51.507" starttime="20180516 15:19:51.506"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20180516 15:19:51.510" level="INFO">show br</msg>
<status status="PASS" endtime="20180516 15:19:51.510" starttime="20180516 15:19:51.507"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>delay=${delay}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20180516 15:19:54.516" level="INFO">BD-ID   Index   BSN  Age(min)  Learning  U-Forwrd  UU-Flood  Flooding  ARP-Term  BVI-Intf
    1       1      0     off        on        on        on        on       off       N/A   
    2       2      0     off       off        on       off       off       off       N/A   
    3       3      0     off        on        on        on        on        on       N/A   
vpp#</msg>
<msg timestamp="20180516 15:19:54.516" level="INFO">${out} =   BD-ID   Index   BSN  Age(min)  Learning  U-Forwrd  UU-Flood  Flooding  ARP-Term  BVI-Intf
    1       1      0     off        on        on        on        on       off       N/A   
    2       2 ...</msg>
<status status="PASS" endtime="20180516 15:19:54.516" starttime="20180516 15:19:51.512"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:19:54.517" level="INFO">  BD-ID   Index   BSN  Age(min)  Learning  U-Forwrd  UU-Flood  Flooding  ARP-Term  BVI-Intf
    1       1      0     off        on        on        on        on       off       N/A   
    2       2      0     off       off        on       off       off       off       N/A   
    3       3      0     off        on        on        on        on        on       N/A   
vpp# </msg>
<status status="PASS" endtime="20180516 15:19:54.517" starttime="20180516 15:19:54.517"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:19:54.518" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_term.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_term.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:19:54.519" starttime="20180516 15:19:54.518"></status>
</kw>
<status status="PASS" endtime="20180516 15:19:54.519" starttime="20180516 15:19:51.505"></status>
</kw>
<kw name="Write To Machine" library="ssh">
<doc>*Write Machine ${machine} ${command}*</doc>
<arguments>
<arg>agent_vpp_1_term</arg>
<arg>show br 1 detail</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${delay}</arg>
</arguments>
<msg timestamp="20180516 15:19:54.530" level="INFO">agent_vpp_1_term</msg>
<msg timestamp="20180516 15:19:54.530" level="INFO">show br 1 detail</msg>
<msg timestamp="20180516 15:19:54.530" level="INFO">3s</msg>
<status status="PASS" endtime="20180516 15:19:54.530" starttime="20180516 15:19:54.529"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:19:54.530" starttime="20180516 15:19:54.530"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:19:54.531" level="INFO">${currdate} = 2018-05-16 15:19:54.531</msg>
<status status="PASS" endtime="20180516 15:19:54.531" starttime="20180516 15:19:54.530"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20180516 15:19:54.535" level="INFO">show br 1 detail</msg>
<status status="PASS" endtime="20180516 15:19:54.536" starttime="20180516 15:19:54.531"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>delay=${delay}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20180516 15:20:00.543" level="INFO">BD-ID   Index   BSN  Age(min)  Learning  U-Forwrd  UU-Flood  Flooding  ARP-Term  BVI-Intf
    1       1      0     off        on        on        on        on       off       N/A   

           Interface           If-idx ISN  SHG  BVI  TxFlood        VLAN-Tag-Rewrite       
      host-node_1_noeth_1        2     1    0    -      *                 none             
      host-node_2_noeth_2        3     1    0    -      *                 none             

  BD-Tag: BD_INTERNAL_EW_agent_vpp_1
vpp#</msg>
<msg timestamp="20180516 15:20:00.544" level="INFO">${out} =   BD-ID   Index   BSN  Age(min)  Learning  U-Forwrd  UU-Flood  Flooding  ARP-Term  BVI-Intf
    1       1      0     off        on        on        on        on       off       N/A   

           I...</msg>
<status status="PASS" endtime="20180516 15:20:00.544" starttime="20180516 15:19:54.537"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:20:00.545" level="INFO">  BD-ID   Index   BSN  Age(min)  Learning  U-Forwrd  UU-Flood  Flooding  ARP-Term  BVI-Intf
    1       1      0     off        on        on        on        on       off       N/A   

           Interface           If-idx ISN  SHG  BVI  TxFlood        VLAN-Tag-Rewrite       
      host-node_1_noeth_1        2     1    0    -      *                 none             
      host-node_2_noeth_2        3     1    0    -      *                 none             

  BD-Tag: BD_INTERNAL_EW_agent_vpp_1
vpp# </msg>
<status status="PASS" endtime="20180516 15:20:00.545" starttime="20180516 15:20:00.544"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:20:00.546" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_term.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_term.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:20:00.547" starttime="20180516 15:20:00.545"></status>
</kw>
<status status="PASS" endtime="20180516 15:20:00.547" starttime="20180516 15:19:54.529"></status>
</kw>
<kw name="Write To Machine" library="ssh">
<doc>*Write Machine ${machine} ${command}*</doc>
<arguments>
<arg>agent_vpp_1_term</arg>
<arg>show vxlan tunnel</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${delay}</arg>
</arguments>
<msg timestamp="20180516 15:20:00.558" level="INFO">agent_vpp_1_term</msg>
<msg timestamp="20180516 15:20:00.558" level="INFO">show vxlan tunnel</msg>
<msg timestamp="20180516 15:20:00.558" level="INFO">3s</msg>
<status status="PASS" endtime="20180516 15:20:00.558" starttime="20180516 15:20:00.557"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:20:00.558" starttime="20180516 15:20:00.558"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:20:00.559" level="INFO">${currdate} = 2018-05-16 15:20:00.559</msg>
<status status="PASS" endtime="20180516 15:20:00.559" starttime="20180516 15:20:00.558"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20180516 15:20:00.564" level="INFO">show vxlan tunnel</msg>
<status status="PASS" endtime="20180516 15:20:00.564" starttime="20180516 15:20:00.559"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>delay=${delay}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20180516 15:20:03.568" level="INFO">No vxlan tunnels configured...
vpp#</msg>
<msg timestamp="20180516 15:20:03.568" level="INFO">${out} = No vxlan tunnels configured...
vpp# </msg>
<status status="PASS" endtime="20180516 15:20:03.568" starttime="20180516 15:20:00.564"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:20:03.569" level="INFO">No vxlan tunnels configured...
vpp# </msg>
<status status="PASS" endtime="20180516 15:20:03.569" starttime="20180516 15:20:03.569"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:20:03.570" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_term.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_term.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:20:03.570" starttime="20180516 15:20:03.569"></status>
</kw>
<status status="PASS" endtime="20180516 15:20:03.570" starttime="20180516 15:20:00.557"></status>
</kw>
<kw name="Write To Machine" library="ssh">
<doc>*Write Machine ${machine} ${command}*</doc>
<arguments>
<arg>agent_vpp_1_term</arg>
<arg>show err</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${delay}</arg>
</arguments>
<msg timestamp="20180516 15:20:03.581" level="INFO">agent_vpp_1_term</msg>
<msg timestamp="20180516 15:20:03.581" level="INFO">show err</msg>
<msg timestamp="20180516 15:20:03.581" level="INFO">3s</msg>
<status status="PASS" endtime="20180516 15:20:03.581" starttime="20180516 15:20:03.581"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:20:03.581" starttime="20180516 15:20:03.581"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:20:03.582" level="INFO">${currdate} = 2018-05-16 15:20:03.582</msg>
<status status="PASS" endtime="20180516 15:20:03.582" starttime="20180516 15:20:03.582"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20180516 15:20:03.602" level="INFO">show err</msg>
<status status="PASS" endtime="20180516 15:20:03.602" starttime="20180516 15:20:03.582"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>delay=${delay}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20180516 15:20:06.604" level="INFO">Count                    Node                  Reason
        42                l2-output               L2 output packets
        42                l2-learn                L2 learn packets
         4                l2-learn                L2 learn misses
        42                l2-input                L2 input packets
        42                l2-flood                L2 flood packets
vpp#</msg>
<msg timestamp="20180516 15:20:06.604" level="INFO">${out} =    Count                    Node                  Reason
        42                l2-output               L2 output packets
        42                l2-learn                L2 learn packets
     ...</msg>
<status status="PASS" endtime="20180516 15:20:06.604" starttime="20180516 15:20:03.602"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:20:06.605" level="INFO">   Count                    Node                  Reason
        42                l2-output               L2 output packets
        42                l2-learn                L2 learn packets
         4                l2-learn                L2 learn misses
        42                l2-input                L2 input packets
        42                l2-flood                L2 flood packets
vpp# </msg>
<status status="PASS" endtime="20180516 15:20:06.605" starttime="20180516 15:20:06.605"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:20:06.606" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_term.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_term.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:20:06.606" starttime="20180516 15:20:06.605"></status>
</kw>
<status status="PASS" endtime="20180516 15:20:06.606" starttime="20180516 15:20:03.580"></status>
</kw>
<kw name="vpp_term: Show L2fib" library="vpp_term">
<doc>Show verbose l2fib output</doc>
<arguments>
<arg>agent_vpp_1</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
</arguments>
<msg timestamp="20180516 15:20:06.607" level="INFO">agent_vpp_1</msg>
<status status="PASS" endtime="20180516 15:20:06.607" starttime="20180516 15:20:06.607"></status>
</kw>
<kw name="vpp_term: Issue Command" library="vpp_term">
<arguments>
<arg>${node}</arg>
<arg>show l2fib verbose</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${command}</arg>
<arg>${delay}</arg>
<arg>${node}_term</arg>
<arg>${${node}_VPP_TERM_PROMPT}</arg>
</arguments>
<msg timestamp="20180516 15:20:06.608" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:20:06.608" level="INFO">show l2fib verbose</msg>
<msg timestamp="20180516 15:20:06.608" level="INFO">3s</msg>
<msg timestamp="20180516 15:20:06.608" level="INFO">agent_vpp_1_term</msg>
<msg timestamp="20180516 15:20:06.608" level="INFO">vpp#</msg>
<status status="PASS" endtime="20180516 15:20:06.608" starttime="20180516 15:20:06.608"></status>
</kw>
<kw name="Write To Machine Until String" library="ssh">
<doc>*Write Machine ${machine} show l2fib verbose*</doc>
<arguments>
<arg>${node}_term</arg>
<arg>${command}</arg>
<arg>${${node}_VPP_TERM_PROMPT}</arg>
<arg>delay=${delay}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${string}</arg>
<arg>${delay}</arg>
</arguments>
<msg timestamp="20180516 15:20:06.614" level="INFO">agent_vpp_1_term</msg>
<msg timestamp="20180516 15:20:06.614" level="INFO">show l2fib verbose</msg>
<msg timestamp="20180516 15:20:06.614" level="INFO">vpp#</msg>
<msg timestamp="20180516 15:20:06.614" level="INFO">3s</msg>
<status status="PASS" endtime="20180516 15:20:06.614" starttime="20180516 15:20:06.614"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:20:06.614" starttime="20180516 15:20:06.614"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:20:06.615" level="INFO">${currdate} = 2018-05-16 15:20:06.615</msg>
<status status="PASS" endtime="20180516 15:20:06.615" starttime="20180516 15:20:06.615"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20180516 15:20:06.621" level="INFO">show l2fib verbose</msg>
<status status="PASS" endtime="20180516 15:20:06.621" starttime="20180516 15:20:06.615"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>${string}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20180516 15:20:06.630" level="INFO">Mac-Address     BD-Idx If-Idx BSN-ISN Age(min) static filter bvi         Interface-Name        
 b2:f1:cb:3e:97:0b    1      2      0/1      -       -      -     -        host-node_1_noeth_1     
 22:c4:57:2e:db:6b    1      3      0/1      -       -      -     -        host-node_2_noeth_2     
 02:00:00:00:00:01    1      2      0/1      -       -      -     -        host-node_1_noeth_1     
 02:00:00:00:00:02    1      3      0/1      -       -      -     -        host-node_2_noeth_2     
L2FIB total/learned entries: 4/4  Last scan time: 0.0000e0sec  Learn limit: 4194304 
vpp#</msg>
<msg timestamp="20180516 15:20:06.631" level="INFO">${out} =     Mac-Address     BD-Idx If-Idx BSN-ISN Age(min) static filter bvi         Interface-Name        
 b2:f1:cb:3e:97:0b    1      2      0/1      -       -      -     -        host-node_1_noeth_1     ...</msg>
<status status="PASS" endtime="20180516 15:20:06.631" starttime="20180516 15:20:06.623"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:20:06.631" level="INFO">    Mac-Address     BD-Idx If-Idx BSN-ISN Age(min) static filter bvi         Interface-Name        
 b2:f1:cb:3e:97:0b    1      2      0/1      -       -      -     -        host-node_1_noeth_1     
 22:c4:57:2e:db:6b    1      3      0/1      -       -      -     -        host-node_2_noeth_2     
 02:00:00:00:00:01    1      2      0/1      -       -      -     -        host-node_1_noeth_1     
 02:00:00:00:00:02    1      3      0/1      -       -      -     -        host-node_2_noeth_2     
L2FIB total/learned entries: 4/4  Last scan time: 0.0000e0sec  Learn limit: 4194304 
vpp#</msg>
<status status="PASS" endtime="20180516 15:20:06.631" starttime="20180516 15:20:06.631"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>delay=${delay}</arg>
</arguments>
<assign>
<var>${out2}</var>
</assign>
<msg timestamp="20180516 15:20:09.636" level="INFO">${out2} =  </msg>
<status status="PASS" endtime="20180516 15:20:09.636" starttime="20180516 15:20:06.631"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out2}</arg>
</arguments>
<msg timestamp="20180516 15:20:09.636" level="INFO"> </msg>
<status status="PASS" endtime="20180516 15:20:09.636" starttime="20180516 15:20:09.636"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${out2}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:20:09.637" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_term.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_term.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:20:09.638" starttime="20180516 15:20:09.637"></status>
</kw>
<msg timestamp="20180516 15:20:09.638" level="INFO">${out} =     Mac-Address     BD-Idx If-Idx BSN-ISN Age(min) static filter bvi         Interface-Name        
 b2:f1:cb:3e:97:0b    1      2      0/1      -       -      -     -        host-node_1_noeth_1     ...</msg>
<status status="PASS" endtime="20180516 15:20:09.638" starttime="20180516 15:20:06.613"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:20:09.639" level="INFO">    Mac-Address     BD-Idx If-Idx BSN-ISN Age(min) static filter bvi         Interface-Name        
 b2:f1:cb:3e:97:0b    1      2      0/1      -       -      -     -        host-node_1_noeth_1     
 22:c4:57:2e:db:6b    1      3      0/1      -       -      -     -        host-node_2_noeth_2     
 02:00:00:00:00:01    1      2      0/1      -       -      -     -        host-node_1_noeth_1     
 02:00:00:00:00:02    1      3      0/1      -       -      -     -        host-node_2_noeth_2     
L2FIB total/learned entries: 4/4  Last scan time: 0.0000e0sec  Learn limit: 4194304 
vpp# </msg>
<status status="PASS" endtime="20180516 15:20:09.639" starttime="20180516 15:20:09.638"></status>
</kw>
<msg timestamp="20180516 15:20:09.639" level="INFO">${out} =     Mac-Address     BD-Idx If-Idx BSN-ISN Age(min) static filter bvi         Interface-Name        
 b2:f1:cb:3e:97:0b    1      2      0/1      -       -      -     -        host-node_1_noeth_1     ...</msg>
<status status="PASS" endtime="20180516 15:20:09.639" starttime="20180516 15:20:06.607"></status>
</kw>
<status status="PASS" endtime="20180516 15:20:09.639" starttime="20180516 15:20:06.606"></status>
</kw>
<kw name="vpp_term: Show IP Fib Table" library="vpp_term">
<doc>Show IP fib output for VRF table defined in input</doc>
<arguments>
<arg>agent_vpp_1</arg>
<arg>0</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${id}</arg>
</arguments>
<msg timestamp="20180516 15:20:09.642" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:20:09.642" level="INFO">0</msg>
<status status="PASS" endtime="20180516 15:20:09.642" starttime="20180516 15:20:09.640"></status>
</kw>
<kw name="vpp_term: Issue Command" library="vpp_term">
<arguments>
<arg>${node}</arg>
<arg>show ip fib table ${id}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${command}</arg>
<arg>${delay}</arg>
<arg>${node}_term</arg>
<arg>${${node}_VPP_TERM_PROMPT}</arg>
</arguments>
<msg timestamp="20180516 15:20:09.643" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:20:09.643" level="INFO">show ip fib table 0</msg>
<msg timestamp="20180516 15:20:09.643" level="INFO">3s</msg>
<msg timestamp="20180516 15:20:09.644" level="INFO">agent_vpp_1_term</msg>
<msg timestamp="20180516 15:20:09.644" level="INFO">vpp#</msg>
<status status="PASS" endtime="20180516 15:20:09.644" starttime="20180516 15:20:09.643"></status>
</kw>
<kw name="Write To Machine Until String" library="ssh">
<doc>*Write Machine ${machine} show ip fib table 0*</doc>
<arguments>
<arg>${node}_term</arg>
<arg>${command}</arg>
<arg>${${node}_VPP_TERM_PROMPT}</arg>
<arg>delay=${delay}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${string}</arg>
<arg>${delay}</arg>
</arguments>
<msg timestamp="20180516 15:20:09.656" level="INFO">agent_vpp_1_term</msg>
<msg timestamp="20180516 15:20:09.656" level="INFO">show ip fib table 0</msg>
<msg timestamp="20180516 15:20:09.656" level="INFO">vpp#</msg>
<msg timestamp="20180516 15:20:09.656" level="INFO">3s</msg>
<status status="PASS" endtime="20180516 15:20:09.656" starttime="20180516 15:20:09.655"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:20:09.661" starttime="20180516 15:20:09.660"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:20:09.662" level="INFO">${currdate} = 2018-05-16 15:20:09.662</msg>
<status status="PASS" endtime="20180516 15:20:09.662" starttime="20180516 15:20:09.662"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20180516 15:20:09.673" level="INFO">show ip fib table 0</msg>
<status status="PASS" endtime="20180516 15:20:09.673" starttime="20180516 15:20:09.662"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>${string}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20180516 15:20:09.717" level="INFO">ipv4-VRF:0, fib_index:0, flow hash:[src dst sport dport proto ] locks:[src:plugin-hi:2, src:default-route:1, ]
0.0.0.0/0
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:1 buckets:1 uRPF:0 to:[0:0]]
    [0] [@0]: dpo-drop ip4
0.0.0.0/32
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:2 buckets:1 uRPF:1 to:[0:0]]
    [0] [@0]: dpo-drop ip4
6.0.0.100/32
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:9 buckets:1 uRPF:8 to:[0:0]]
    [0] [@2]: dpo-receive: 6.0.0.100 on loop0
20.1.1.0/32
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:11 buckets:1 uRPF:10 to:[0:0]]
    [0] [@0]: dpo-drop ip4
20.1.1.0/24
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:10 buckets:1 uRPF:9 to:[0:0]]
    [0] [@4]: ipv4-glean: loop1: mtu:9000 ffffffffffff8af1be9000000806
20.1.1.1/32
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:13 buckets:1 uRPF:14 to:[0:0]]
    [0] [@2]: dpo-receive: 20.1.1.1 on loop1
20.1.1.255/32
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:12 buckets:1 uRPF:12 to:[0:0]]
    [0] [@0]: dpo-drop ip4
30.1.1.0/32
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:15 buckets:1 uRPF:16 to:[0:0]]
    [0] [@0]: dpo-drop ip4
30.1.1.0/24
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:14 buckets:1 uRPF:15 to:[0:0]]
    [0] [@4]: ipv4-glean: loop2: mtu:9000 ffffffffffff8af1be9020000806
30.1.1.1/32
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:17 buckets:1 uRPF:20 to:[0:0]]
    [0] [@2]: dpo-receive: 30.1.1.1 on loop2
30.1.1.255/32
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:16 buckets:1 uRPF:18 to:[0:0]]
    [0] [@0]: dpo-drop ip4
224.0.0.0/4
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:4 buckets:1 uRPF:3 to:[0:0]]
    [0] [@0]: dpo-drop ip4
240.0.0.0/4
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:3 buckets:1 uRPF:2 to:[0:0]]
    [0] [@0]: dpo-drop ip4
255.255.255.255/32
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:5 buckets:1 uRPF:4 to:[0:0]]
    [0] [@0]: dpo-drop ip4
vpp#</msg>
<msg timestamp="20180516 15:20:09.717" level="INFO">${out} = ipv4-VRF:0, fib_index:0, flow hash:[src dst sport dport proto ] locks:[src:plugin-hi:2, src:default-route:1, ]
0.0.0.0/0
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:1 buckets:1 u...</msg>
<status status="PASS" endtime="20180516 15:20:09.717" starttime="20180516 15:20:09.674"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:20:09.718" level="INFO">ipv4-VRF:0, fib_index:0, flow hash:[src dst sport dport proto ] locks:[src:plugin-hi:2, src:default-route:1, ]
0.0.0.0/0
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:1 buckets:1 uRPF:0 to:[0:0]]
    [0] [@0]: dpo-drop ip4
0.0.0.0/32
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:2 buckets:1 uRPF:1 to:[0:0]]
    [0] [@0]: dpo-drop ip4
6.0.0.100/32
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:9 buckets:1 uRPF:8 to:[0:0]]
    [0] [@2]: dpo-receive: 6.0.0.100 on loop0
20.1.1.0/32
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:11 buckets:1 uRPF:10 to:[0:0]]
    [0] [@0]: dpo-drop ip4
20.1.1.0/24
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:10 buckets:1 uRPF:9 to:[0:0]]
    [0] [@4]: ipv4-glean: loop1: mtu:9000 ffffffffffff8af1be9000000806
20.1.1.1/32
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:13 buckets:1 uRPF:14 to:[0:0]]
    [0] [@2]: dpo-receive: 20.1.1.1 on loop1
20.1.1.255/32
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:12 buckets:1 uRPF:12 to:[0:0]]
    [0] [@0]: dpo-drop ip4
30.1.1.0/32
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:15 buckets:1 uRPF:16 to:[0:0]]
    [0] [@0]: dpo-drop ip4
30.1.1.0/24
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:14 buckets:1 uRPF:15 to:[0:0]]
    [0] [@4]: ipv4-glean: loop2: mtu:9000 ffffffffffff8af1be9020000806
30.1.1.1/32
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:17 buckets:1 uRPF:20 to:[0:0]]
    [0] [@2]: dpo-receive: 30.1.1.1 on loop2
30.1.1.255/32
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:16 buckets:1 uRPF:18 to:[0:0]]
    [0] [@0]: dpo-drop ip4
224.0.0.0/4
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:4 buckets:1 uRPF:3 to:[0:0]]
    [0] [@0]: dpo-drop ip4
240.0.0.0/4
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:3 buckets:1 uRPF:2 to:[0:0]]
    [0] [@0]: dpo-drop ip4
255.255.255.255/32
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:5 buckets:1 uRPF:4 to:[0:0]]
    [0] [@0]: dpo-drop ip4
vpp#</msg>
<status status="PASS" endtime="20180516 15:20:09.718" starttime="20180516 15:20:09.718"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>delay=${delay}</arg>
</arguments>
<assign>
<var>${out2}</var>
</assign>
<msg timestamp="20180516 15:20:12.722" level="INFO">${out2} =  </msg>
<status status="PASS" endtime="20180516 15:20:12.722" starttime="20180516 15:20:09.718"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out2}</arg>
</arguments>
<msg timestamp="20180516 15:20:12.723" level="INFO"> </msg>
<status status="PASS" endtime="20180516 15:20:12.723" starttime="20180516 15:20:12.722"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${out2}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:20:12.724" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_term.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_term.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:20:12.724" starttime="20180516 15:20:12.723"></status>
</kw>
<msg timestamp="20180516 15:20:12.724" level="INFO">${out} = ipv4-VRF:0, fib_index:0, flow hash:[src dst sport dport proto ] locks:[src:plugin-hi:2, src:default-route:1, ]
0.0.0.0/0
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:1 buckets:1 u...</msg>
<status status="PASS" endtime="20180516 15:20:12.725" starttime="20180516 15:20:09.655"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:20:12.725" level="INFO">ipv4-VRF:0, fib_index:0, flow hash:[src dst sport dport proto ] locks:[src:plugin-hi:2, src:default-route:1, ]
0.0.0.0/0
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:1 buckets:1 uRPF:0 to:[0:0]]
    [0] [@0]: dpo-drop ip4
0.0.0.0/32
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:2 buckets:1 uRPF:1 to:[0:0]]
    [0] [@0]: dpo-drop ip4
6.0.0.100/32
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:9 buckets:1 uRPF:8 to:[0:0]]
    [0] [@2]: dpo-receive: 6.0.0.100 on loop0
20.1.1.0/32
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:11 buckets:1 uRPF:10 to:[0:0]]
    [0] [@0]: dpo-drop ip4
20.1.1.0/24
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:10 buckets:1 uRPF:9 to:[0:0]]
    [0] [@4]: ipv4-glean: loop1: mtu:9000 ffffffffffff8af1be9000000806
20.1.1.1/32
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:13 buckets:1 uRPF:14 to:[0:0]]
    [0] [@2]: dpo-receive: 20.1.1.1 on loop1
20.1.1.255/32
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:12 buckets:1 uRPF:12 to:[0:0]]
    [0] [@0]: dpo-drop ip4
30.1.1.0/32
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:15 buckets:1 uRPF:16 to:[0:0]]
    [0] [@0]: dpo-drop ip4
30.1.1.0/24
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:14 buckets:1 uRPF:15 to:[0:0]]
    [0] [@4]: ipv4-glean: loop2: mtu:9000 ffffffffffff8af1be9020000806
30.1.1.1/32
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:17 buckets:1 uRPF:20 to:[0:0]]
    [0] [@2]: dpo-receive: 30.1.1.1 on loop2
30.1.1.255/32
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:16 buckets:1 uRPF:18 to:[0:0]]
    [0] [@0]: dpo-drop ip4
224.0.0.0/4
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:4 buckets:1 uRPF:3 to:[0:0]]
    [0] [@0]: dpo-drop ip4
240.0.0.0/4
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:3 buckets:1 uRPF:2 to:[0:0]]
    [0] [@0]: dpo-drop ip4
255.255.255.255/32
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:5 buckets:1 uRPF:4 to:[0:0]]
    [0] [@0]: dpo-drop ip4
vpp# </msg>
<status status="PASS" endtime="20180516 15:20:12.725" starttime="20180516 15:20:12.725"></status>
</kw>
<msg timestamp="20180516 15:20:12.725" level="INFO">${out} = ipv4-VRF:0, fib_index:0, flow hash:[src dst sport dport proto ] locks:[src:plugin-hi:2, src:default-route:1, ]
0.0.0.0/0
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:1 buckets:1 u...</msg>
<status status="PASS" endtime="20180516 15:20:12.725" starttime="20180516 15:20:09.642"></status>
</kw>
<status status="PASS" endtime="20180516 15:20:12.726" starttime="20180516 15:20:09.639"></status>
</kw>
<kw name="vpp_term: Show IP Fib" library="vpp_term">
<doc>Show IP fib output</doc>
<arguments>
<arg>agent_vpp_1</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${ip}</arg>
</arguments>
<msg timestamp="20180516 15:20:12.727" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:20:12.727" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:20:12.727" starttime="20180516 15:20:12.726"></status>
</kw>
<kw name="vpp_term: Issue Command" library="vpp_term">
<arguments>
<arg>${node}</arg>
<arg>show ip fib ${ip}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${command}</arg>
<arg>${delay}</arg>
<arg>${node}_term</arg>
<arg>${${node}_VPP_TERM_PROMPT}</arg>
</arguments>
<msg timestamp="20180516 15:20:12.728" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:20:12.728" level="INFO">show ip fib </msg>
<msg timestamp="20180516 15:20:12.728" level="INFO">3s</msg>
<msg timestamp="20180516 15:20:12.728" level="INFO">agent_vpp_1_term</msg>
<msg timestamp="20180516 15:20:12.728" level="INFO">vpp#</msg>
<status status="PASS" endtime="20180516 15:20:12.728" starttime="20180516 15:20:12.728"></status>
</kw>
<kw name="Write To Machine Until String" library="ssh">
<doc>*Write Machine ${machine} show ip fib *</doc>
<arguments>
<arg>${node}_term</arg>
<arg>${command}</arg>
<arg>${${node}_VPP_TERM_PROMPT}</arg>
<arg>delay=${delay}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${string}</arg>
<arg>${delay}</arg>
</arguments>
<msg timestamp="20180516 15:20:12.734" level="INFO">agent_vpp_1_term</msg>
<msg timestamp="20180516 15:20:12.734" level="INFO">show ip fib </msg>
<msg timestamp="20180516 15:20:12.734" level="INFO">vpp#</msg>
<msg timestamp="20180516 15:20:12.734" level="INFO">3s</msg>
<status status="PASS" endtime="20180516 15:20:12.734" starttime="20180516 15:20:12.734"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:20:12.735" starttime="20180516 15:20:12.734"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:20:12.735" level="INFO">${currdate} = 2018-05-16 15:20:12.735</msg>
<status status="PASS" endtime="20180516 15:20:12.735" starttime="20180516 15:20:12.735"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20180516 15:20:12.740" level="INFO">show ip fib</msg>
<status status="PASS" endtime="20180516 15:20:12.740" starttime="20180516 15:20:12.735"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>${string}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20180516 15:20:12.754" level="INFO">ipv4-VRF:0, fib_index:0, flow hash:[src dst sport dport proto ] locks:[src:plugin-hi:2, src:default-route:1, ]
0.0.0.0/0
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:1 buckets:1 uRPF:0 to:[0:0]]
    [0] [@0]: dpo-drop ip4
0.0.0.0/32
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:2 buckets:1 uRPF:1 to:[0:0]]
    [0] [@0]: dpo-drop ip4
6.0.0.100/32
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:9 buckets:1 uRPF:8 to:[0:0]]
    [0] [@2]: dpo-receive: 6.0.0.100 on loop0
20.1.1.0/32
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:11 buckets:1 uRPF:10 to:[0:0]]
    [0] [@0]: dpo-drop ip4
20.1.1.0/24
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:10 buckets:1 uRPF:9 to:[0:0]]
    [0] [@4]: ipv4-glean: loop1: mtu:9000 ffffffffffff8af1be9000000806
20.1.1.1/32
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:13 buckets:1 uRPF:14 to:[0:0]]
    [0] [@2]: dpo-receive: 20.1.1.1 on loop1
20.1.1.255/32
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:12 buckets:1 uRPF:12 to:[0:0]]
    [0] [@0]: dpo-drop ip4
30.1.1.0/32
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:15 buckets:1 uRPF:16 to:[0:0]]
    [0] [@0]: dpo-drop ip4
30.1.1.0/24
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:14 buckets:1 uRPF:15 to:[0:0]]
    [0] [@4]: ipv4-glean: loop2: mtu:9000 ffffffffffff8af1be9020000806
30.1.1.1/32
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:17 buckets:1 uRPF:20 to:[0:0]]
    [0] [@2]: dpo-receive: 30.1.1.1 on loop2
30.1.1.255/32
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:16 buckets:1 uRPF:18 to:[0:0]]
    [0] [@0]: dpo-drop ip4
224.0.0.0/4
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:4 buckets:1 uRPF:3 to:[0:0]]
    [0] [@0]: dpo-drop ip4
240.0.0.0/4
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:3 buckets:1 uRPF:2 to:[0:0]]
    [0] [@0]: dpo-drop ip4
255.255.255.255/32
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:5 buckets:1 uRPF:4 to:[0:0]]
    [0] [@0]: dpo-drop ip4
vpp#</msg>
<msg timestamp="20180516 15:20:12.754" level="INFO">${out} = ipv4-VRF:0, fib_index:0, flow hash:[src dst sport dport proto ] locks:[src:plugin-hi:2, src:default-route:1, ]
0.0.0.0/0
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:1 buckets:1 u...</msg>
<status status="PASS" endtime="20180516 15:20:12.754" starttime="20180516 15:20:12.740"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:20:12.754" level="INFO">ipv4-VRF:0, fib_index:0, flow hash:[src dst sport dport proto ] locks:[src:plugin-hi:2, src:default-route:1, ]
0.0.0.0/0
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:1 buckets:1 uRPF:0 to:[0:0]]
    [0] [@0]: dpo-drop ip4
0.0.0.0/32
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:2 buckets:1 uRPF:1 to:[0:0]]
    [0] [@0]: dpo-drop ip4
6.0.0.100/32
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:9 buckets:1 uRPF:8 to:[0:0]]
    [0] [@2]: dpo-receive: 6.0.0.100 on loop0
20.1.1.0/32
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:11 buckets:1 uRPF:10 to:[0:0]]
    [0] [@0]: dpo-drop ip4
20.1.1.0/24
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:10 buckets:1 uRPF:9 to:[0:0]]
    [0] [@4]: ipv4-glean: loop1: mtu:9000 ffffffffffff8af1be9000000806
20.1.1.1/32
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:13 buckets:1 uRPF:14 to:[0:0]]
    [0] [@2]: dpo-receive: 20.1.1.1 on loop1
20.1.1.255/32
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:12 buckets:1 uRPF:12 to:[0:0]]
    [0] [@0]: dpo-drop ip4
30.1.1.0/32
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:15 buckets:1 uRPF:16 to:[0:0]]
    [0] [@0]: dpo-drop ip4
30.1.1.0/24
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:14 buckets:1 uRPF:15 to:[0:0]]
    [0] [@4]: ipv4-glean: loop2: mtu:9000 ffffffffffff8af1be9020000806
30.1.1.1/32
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:17 buckets:1 uRPF:20 to:[0:0]]
    [0] [@2]: dpo-receive: 30.1.1.1 on loop2
30.1.1.255/32
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:16 buckets:1 uRPF:18 to:[0:0]]
    [0] [@0]: dpo-drop ip4
224.0.0.0/4
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:4 buckets:1 uRPF:3 to:[0:0]]
    [0] [@0]: dpo-drop ip4
240.0.0.0/4
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:3 buckets:1 uRPF:2 to:[0:0]]
    [0] [@0]: dpo-drop ip4
255.255.255.255/32
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:5 buckets:1 uRPF:4 to:[0:0]]
    [0] [@0]: dpo-drop ip4
vpp#</msg>
<status status="PASS" endtime="20180516 15:20:12.755" starttime="20180516 15:20:12.754"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>delay=${delay}</arg>
</arguments>
<assign>
<var>${out2}</var>
</assign>
<msg timestamp="20180516 15:20:15.757" level="INFO">${out2} =  </msg>
<status status="PASS" endtime="20180516 15:20:15.758" starttime="20180516 15:20:12.755"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out2}</arg>
</arguments>
<msg timestamp="20180516 15:20:15.758" level="INFO"> </msg>
<status status="PASS" endtime="20180516 15:20:15.758" starttime="20180516 15:20:15.758"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${out2}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:20:15.759" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_term.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_term.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:20:15.759" starttime="20180516 15:20:15.758"></status>
</kw>
<msg timestamp="20180516 15:20:15.759" level="INFO">${out} = ipv4-VRF:0, fib_index:0, flow hash:[src dst sport dport proto ] locks:[src:plugin-hi:2, src:default-route:1, ]
0.0.0.0/0
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:1 buckets:1 u...</msg>
<status status="PASS" endtime="20180516 15:20:15.759" starttime="20180516 15:20:12.733"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:20:15.760" level="INFO">ipv4-VRF:0, fib_index:0, flow hash:[src dst sport dport proto ] locks:[src:plugin-hi:2, src:default-route:1, ]
0.0.0.0/0
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:1 buckets:1 uRPF:0 to:[0:0]]
    [0] [@0]: dpo-drop ip4
0.0.0.0/32
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:2 buckets:1 uRPF:1 to:[0:0]]
    [0] [@0]: dpo-drop ip4
6.0.0.100/32
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:9 buckets:1 uRPF:8 to:[0:0]]
    [0] [@2]: dpo-receive: 6.0.0.100 on loop0
20.1.1.0/32
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:11 buckets:1 uRPF:10 to:[0:0]]
    [0] [@0]: dpo-drop ip4
20.1.1.0/24
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:10 buckets:1 uRPF:9 to:[0:0]]
    [0] [@4]: ipv4-glean: loop1: mtu:9000 ffffffffffff8af1be9000000806
20.1.1.1/32
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:13 buckets:1 uRPF:14 to:[0:0]]
    [0] [@2]: dpo-receive: 20.1.1.1 on loop1
20.1.1.255/32
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:12 buckets:1 uRPF:12 to:[0:0]]
    [0] [@0]: dpo-drop ip4
30.1.1.0/32
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:15 buckets:1 uRPF:16 to:[0:0]]
    [0] [@0]: dpo-drop ip4
30.1.1.0/24
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:14 buckets:1 uRPF:15 to:[0:0]]
    [0] [@4]: ipv4-glean: loop2: mtu:9000 ffffffffffff8af1be9020000806
30.1.1.1/32
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:17 buckets:1 uRPF:20 to:[0:0]]
    [0] [@2]: dpo-receive: 30.1.1.1 on loop2
30.1.1.255/32
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:16 buckets:1 uRPF:18 to:[0:0]]
    [0] [@0]: dpo-drop ip4
224.0.0.0/4
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:4 buckets:1 uRPF:3 to:[0:0]]
    [0] [@0]: dpo-drop ip4
240.0.0.0/4
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:3 buckets:1 uRPF:2 to:[0:0]]
    [0] [@0]: dpo-drop ip4
255.255.255.255/32
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:5 buckets:1 uRPF:4 to:[0:0]]
    [0] [@0]: dpo-drop ip4
vpp# </msg>
<status status="PASS" endtime="20180516 15:20:15.760" starttime="20180516 15:20:15.759"></status>
</kw>
<msg timestamp="20180516 15:20:15.760" level="INFO">${out} = ipv4-VRF:0, fib_index:0, flow hash:[src dst sport dport proto ] locks:[src:plugin-hi:2, src:default-route:1, ]
0.0.0.0/0
  unicast-ip4-chain
  [@0]: dpo-load-balance: [proto:ip4 index:1 buckets:1 u...</msg>
<status status="PASS" endtime="20180516 15:20:15.760" starttime="20180516 15:20:12.727"></status>
</kw>
<status status="PASS" endtime="20180516 15:20:15.760" starttime="20180516 15:20:12.726"></status>
</kw>
<kw name="vat_term: Interfaces Dump" library="vat_term">
<doc>Executing command sw_interface_dump</doc>
<arguments>
<arg>agent_vpp_1</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
</arguments>
<msg timestamp="20180516 15:20:15.761" level="INFO">agent_vpp_1</msg>
<status status="PASS" endtime="20180516 15:20:15.761" starttime="20180516 15:20:15.761"></status>
</kw>
<kw name="vat_term: Issue Command" library="vat_term">
<arguments>
<arg>${node}</arg>
<arg>sw_interface_dump</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${command}</arg>
<arg>${delay}</arg>
<arg>${node}_vat</arg>
<arg>${${node}_VPP_VAT_PROMPT}</arg>
</arguments>
<msg timestamp="20180516 15:20:15.762" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:20:15.762" level="INFO">sw_interface_dump</msg>
<msg timestamp="20180516 15:20:15.762" level="INFO">3s</msg>
<msg timestamp="20180516 15:20:15.762" level="INFO">agent_vpp_1_vat</msg>
<msg timestamp="20180516 15:20:15.763" level="INFO">vat#</msg>
<status status="PASS" endtime="20180516 15:20:15.763" starttime="20180516 15:20:15.762"></status>
</kw>
<kw name="Write To Machine Until String" library="ssh">
<doc>*Write Machine ${machine} sw_interface_dump*</doc>
<arguments>
<arg>${node}_vat</arg>
<arg>${command}</arg>
<arg>${${node}_VPP_VAT_PROMPT}</arg>
<arg>delay=${delay}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${string}</arg>
<arg>${delay}</arg>
</arguments>
<msg timestamp="20180516 15:20:15.768" level="INFO">agent_vpp_1_vat</msg>
<msg timestamp="20180516 15:20:15.768" level="INFO">sw_interface_dump</msg>
<msg timestamp="20180516 15:20:15.769" level="INFO">vat#</msg>
<msg timestamp="20180516 15:20:15.769" level="INFO">3s</msg>
<status status="PASS" endtime="20180516 15:20:15.769" starttime="20180516 15:20:15.768"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:20:15.769" starttime="20180516 15:20:15.769"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:20:15.769" level="INFO">${currdate} = 2018-05-16 15:20:15.769</msg>
<status status="PASS" endtime="20180516 15:20:15.769" starttime="20180516 15:20:15.769"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20180516 15:20:15.771" level="INFO">sw_interface_dump</msg>
<status status="PASS" endtime="20180516 15:20:15.771" starttime="20180516 15:20:15.770"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>${string}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20180516 15:20:15.801" level="INFO">[ 
  {
    "sw_if_index": 0,
    "sup_sw_if_index": 0,
    "l2_address_length": 0,
    "l2_address": [0, 0, 0, 0, 0, 0, 0, 0],
    "interface_name": "local0",
    "admin_up_down": 0,
    "link_up_down": 0,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 0,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 1,
    "sup_sw_if_index": 1,
    "l2_address_length": 6,
    "l2_address": [2, 0, 0, 170, 187, 0, 0, 0],
    "interface_name": "loop0",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 2,
    "sup_sw_if_index": 2,
    "l2_address_length": 6,
    "l2_address": [2, 254, 62, 253, 97, 40, 0, 0],
    "interface_name": "host-node_1_noeth_1",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 3,
    "sup_sw_if_index": 3,
    "l2_address_length": 6,
    "l2_address": [2, 254, 66, 152, 34, 8, 0, 0],
    "interface_name": "host-node_2_noeth_2",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 4,
    "sup_sw_if_index": 4,
    "l2_address_length": 6,
    "l2_address": [138, 241, 190, 144, 0, 0, 0, 0],
    "interface_name": "loop1",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 5,
    "sup_sw_if_index": 5,
    "l2_address_length": 6,
    "l2_address": [138, 241, 190, 144, 32, 0, 0, 0],
    "interface_name": "loop2",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  }
]
vat#</msg>
<msg timestamp="20180516 15:20:15.802" level="INFO">${out} = 
[ 
  {
    "sw_if_index": 0,
    "sup_sw_if_index": 0,
    "l2_address_length": 0,
    "l2_address": [0, 0, 0, 0, 0, 0, 0, 0],
    "interface_name": "local0",
    "admin_up_down": 0,
    "li...</msg>
<status status="PASS" endtime="20180516 15:20:15.802" starttime="20180516 15:20:15.772"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:20:15.802" level="INFO">
[ 
  {
    "sw_if_index": 0,
    "sup_sw_if_index": 0,
    "l2_address_length": 0,
    "l2_address": [0, 0, 0, 0, 0, 0, 0, 0],
    "interface_name": "local0",
    "admin_up_down": 0,
    "link_up_down": 0,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 0,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 1,
    "sup_sw_if_index": 1,
    "l2_address_length": 6,
    "l2_address": [2, 0, 0, 170, 187, 0, 0, 0],
    "interface_name": "loop0",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 2,
    "sup_sw_if_index": 2,
    "l2_address_length": 6,
    "l2_address": [2, 254, 62, 253, 97, 40, 0, 0],
    "interface_name": "host-node_1_noeth_1",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 3,
    "sup_sw_if_index": 3,
    "l2_address_length": 6,
    "l2_address": [2, 254, 66, 152, 34, 8, 0, 0],
    "interface_name": "host-node_2_noeth_2",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 4,
    "sup_sw_if_index": 4,
    "l2_address_length": 6,
    "l2_address": [138, 241, 190, 144, 0, 0, 0, 0],
    "interface_name": "loop1",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 5,
    "sup_sw_if_index": 5,
    "l2_address_length": 6,
    "l2_address": [138, 241, 190, 144, 32, 0, 0, 0],
    "interface_name": "loop2",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  }
]
vat#</msg>
<status status="PASS" endtime="20180516 15:20:15.802" starttime="20180516 15:20:15.802"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>delay=${delay}</arg>
</arguments>
<assign>
<var>${out2}</var>
</assign>
<msg timestamp="20180516 15:20:18.806" level="INFO">${out2} =  </msg>
<status status="PASS" endtime="20180516 15:20:18.806" starttime="20180516 15:20:15.802"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out2}</arg>
</arguments>
<msg timestamp="20180516 15:20:18.807" level="INFO"> </msg>
<status status="PASS" endtime="20180516 15:20:18.807" starttime="20180516 15:20:18.807"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${out2}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:20:18.808" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_vat.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_vat.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:20:18.808" starttime="20180516 15:20:18.807"></status>
</kw>
<msg timestamp="20180516 15:20:18.808" level="INFO">${out} = 
[ 
  {
    "sw_if_index": 0,
    "sup_sw_if_index": 0,
    "l2_address_length": 0,
    "l2_address": [0, 0, 0, 0, 0, 0, 0, 0],
    "interface_name": "local0",
    "admin_up_down": 0,
    "li...</msg>
<status status="PASS" endtime="20180516 15:20:18.808" starttime="20180516 15:20:15.767"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:20:18.809" level="INFO">
[ 
  {
    "sw_if_index": 0,
    "sup_sw_if_index": 0,
    "l2_address_length": 0,
    "l2_address": [0, 0, 0, 0, 0, 0, 0, 0],
    "interface_name": "local0",
    "admin_up_down": 0,
    "link_up_down": 0,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 0,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 1,
    "sup_sw_if_index": 1,
    "l2_address_length": 6,
    "l2_address": [2, 0, 0, 170, 187, 0, 0, 0],
    "interface_name": "loop0",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 2,
    "sup_sw_if_index": 2,
    "l2_address_length": 6,
    "l2_address": [2, 254, 62, 253, 97, 40, 0, 0],
    "interface_name": "host-node_1_noeth_1",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 3,
    "sup_sw_if_index": 3,
    "l2_address_length": 6,
    "l2_address": [2, 254, 66, 152, 34, 8, 0, 0],
    "interface_name": "host-node_2_noeth_2",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 4,
    "sup_sw_if_index": 4,
    "l2_address_length": 6,
    "l2_address": [138, 241, 190, 144, 0, 0, 0, 0],
    "interface_name": "loop1",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  },
  {
    "sw_if_index": 5,
    "sup_sw_if_index": 5,
    "l2_address_length": 6,
    "l2_address": [138, 241, 190, 144, 32, 0, 0, 0],
    "interface_name": "loop2",
    "admin_up_down": 1,
    "link_up_down": 1,
    "link_duplex": 0,
    "link_speed": 0,
    "mtu": 1500,
    "sub_id": 0,
    "sub_dot1ad": 0,
    "sub_number_of_tags": 0,
    "sub_outer_vlan_id": 0,
    "sub_inner_vlan_id": 0,
    "sub_exact_match": 0,
    "sub_default": 0,
    "sub_outer_vlan_id_any": 0,
    "sub_inner_vlan_id_any": 0,
    "vtr_op": 0,
    "vtr_push_dot1q": 0,
    "vtr_tag1": 0,
    "vtr_tag2": 0
  }
]
vat# </msg>
<status status="PASS" endtime="20180516 15:20:18.809" starttime="20180516 15:20:18.808"></status>
</kw>
<msg timestamp="20180516 15:20:18.809" level="INFO">${out} = 
[ 
  {
    "sw_if_index": 0,
    "sup_sw_if_index": 0,
    "l2_address_length": 0,
    "l2_address": [0, 0, 0, 0, 0, 0, 0, 0],
    "interface_name": "local0",
    "admin_up_down": 0,
    "li...</msg>
<status status="PASS" endtime="20180516 15:20:18.809" starttime="20180516 15:20:15.761"></status>
</kw>
<status status="PASS" endtime="20180516 15:20:18.809" starttime="20180516 15:20:15.760"></status>
</kw>
<kw name="Write To Machine" library="ssh">
<doc>*Write Machine ${machine} ${command}*</doc>
<arguments>
<arg>vpp_agent_ctl</arg>
<arg>vpp-agent-ctl ${AGENT_VPP_ETCD_CONF_PATH} -ps</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${delay}</arg>
</arguments>
<msg timestamp="20180516 15:20:18.818" level="INFO">vpp_agent_ctl</msg>
<msg timestamp="20180516 15:20:18.818" level="INFO">vpp-agent-ctl /opt/vpp-agent/dev/etcd.conf -ps</msg>
<msg timestamp="20180516 15:20:18.818" level="INFO">3s</msg>
<status status="PASS" endtime="20180516 15:20:18.818" starttime="20180516 15:20:18.818"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:20:18.819" starttime="20180516 15:20:18.818"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:20:18.819" level="INFO">${currdate} = 2018-05-16 15:20:18.819</msg>
<status status="PASS" endtime="20180516 15:20:18.819" starttime="20180516 15:20:18.819"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20180516 15:20:18.825" level="INFO">vpp-agent-ctl /opt/vpp-agent/dev/etcd.conf -ps</msg>
<status status="PASS" endtime="20180516 15:20:18.825" starttime="20180516 15:20:18.819"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>delay=${delay}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20180516 15:20:24.832" level="INFO">[36mINFO[0m[0000] Connecting to etcd took 4.048698ms            [36mdurationInNs[0m=4048698 [36mloc[0m="etcdv3/bytes_broker_impl.go(84)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000]  

	Crud operations with .json:
		-put	&lt;etc_key&gt;    &lt;json-file&gt;
		-get	&lt;etc_key&gt;
		-del	&lt;etc_key&gt;
		-dump
		-list

	Prearranged flags (create, delete):
		-acl,	-acld	- Access List
		-bfds,	-bfdsd	- BFD session
		-bfdk,	-bfdkd	- BFD authentication key
		-bfde,	-bfded	- BFD echo function
		-eth,	-ethd	- Physical interface
		-tap,	-tapd	- TAP type interface
		-loop,	-loopd	- Loop type interface
		-memif,	-memifd	- Memif type interface
		-vxlan,	-vxland	- VxLAN type interface
		-afpkt,	-afpktd	- af_packet type interface
		-veth,	-vethd	- Linux VETH interface pair
		-ltap,	-ltapd	- Linux TAP interface
		-stn,	-stnd	- STN rule
		-gnat,	-gnatd	- Global NAT configuration
		-snat,	-snatd	- SNAT configuration
		-dnat,	-dnatd	- DNAT configuration
		-bd,	-bdd	- Bridge doamin
		-fib,	-fibd	- L2 FIB
		-xconn,	-xconnd	- L2 X-Connect
		-route,	-routed	- L3 route
		-arp,	-arpd	- ARP entry
		-prxi,	-prxid	- Proxy ARP interfaces
		-prxr,	-prxrd	- Proxy ARP ranges
		-lrte,	-lrted	- Linux route
		-larp,	-larpd	- Linux ARP entry
		-el4,	-dl4	- L4 features
		-appns,	-appnsd	- Application namespace

	Other:
		-txn,	-txnd	- Transaction
		-errIf		- Interface error state report
		-errBd		- Bridge domain error state report
	 
]0;root@2f7d62033432: ~root@2f7d62033432:~# [K</msg>
<msg timestamp="20180516 15:20:24.832" level="INFO">${out} = [36mINFO[0m[0000] Connecting to etcd took 4.048698ms            [36mdurationInNs[0m=4048698 [36mloc[0m="etcdv3/bytes_broker_impl.go(84)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000]  

	...</msg>
<status status="PASS" endtime="20180516 15:20:24.832" starttime="20180516 15:20:18.825"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:20:24.833" level="INFO">[36mINFO[0m[0000] Connecting to etcd took 4.048698ms            [36mdurationInNs[0m=4048698 [36mloc[0m="etcdv3/bytes_broker_impl.go(84)" [36mlogger[0m=defaultLogger
[36mINFO[0m[0000]  

	Crud operations with .json:
		-put	&lt;etc_key&gt;    &lt;json-file&gt;
		-get	&lt;etc_key&gt;
		-del	&lt;etc_key&gt;
		-dump
		-list

	Prearranged flags (create, delete):
		-acl,	-acld	- Access List
		-bfds,	-bfdsd	- BFD session
		-bfdk,	-bfdkd	- BFD authentication key
		-bfde,	-bfded	- BFD echo function
		-eth,	-ethd	- Physical interface
		-tap,	-tapd	- TAP type interface
		-loop,	-loopd	- Loop type interface
		-memif,	-memifd	- Memif type interface
		-vxlan,	-vxland	- VxLAN type interface
		-afpkt,	-afpktd	- af_packet type interface
		-veth,	-vethd	- Linux VETH interface pair
		-ltap,	-ltapd	- Linux TAP interface
		-stn,	-stnd	- STN rule
		-gnat,	-gnatd	- Global NAT configuration
		-snat,	-snatd	- SNAT configuration
		-dnat,	-dnatd	- DNAT configuration
		-bd,	-bdd	- Bridge doamin
		-fib,	-fibd	- L2 FIB
		-xconn,	-xconnd	- L2 X-Connect
		-route,	-routed	- L3 route
		-arp,	-arpd	- ARP entry
		-prxi,	-prxid	- Proxy ARP interfaces
		-prxr,	-prxrd	- Proxy ARP ranges
		-lrte,	-lrted	- Linux route
		-larp,	-larpd	- Linux ARP entry
		-el4,	-dl4	- L4 features
		-appns,	-appnsd	- Application namespace

	Other:
		-txn,	-txnd	- Transaction
		-errIf		- Interface error state report
		-errBd		- Bridge domain error state report
	 
]0;root@2f7d62033432: ~root@2f7d62033432:~# [K</msg>
<status status="PASS" endtime="20180516 15:20:24.833" starttime="20180516 15:20:24.833"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:20:24.834" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_vpp_agent_ctl.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_vpp_agent_ctl.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:20:24.834" starttime="20180516 15:20:24.833"></status>
</kw>
<status status="PASS" endtime="20180516 15:20:24.835" starttime="20180516 15:20:18.817"></status>
</kw>
<kw name="Execute In Container" library="docker">
<arguments>
<arg>agent_vpp_1</arg>
<arg>ip a</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${container}</arg>
<arg>${command}</arg>
</arguments>
<msg timestamp="20180516 15:20:24.835" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:20:24.836" level="INFO">ip a</msg>
<status status="PASS" endtime="20180516 15:20:24.836" starttime="20180516 15:20:24.835"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>docker</arg>
</arguments>
<status status="PASS" endtime="20180516 15:20:24.836" starttime="20180516 15:20:24.836"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:20:24.837" level="INFO">${currdate} = 2018-05-16 15:20:24.837</msg>
<status status="PASS" endtime="20180516 15:20:24.837" starttime="20180516 15:20:24.837"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DOCKER_COMMAND} exec ${container} ${command}</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20180516 15:20:24.838" level="INFO">Executing command 'sudo docker exec agent_vpp_1 ip a'.</msg>
<msg timestamp="20180516 15:20:25.258" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:20:25.258" level="INFO">${out} = 1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lf...</msg>
<msg timestamp="20180516 15:20:25.258" level="INFO">${stderr} = </msg>
<msg timestamp="20180516 15:20:25.258" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20180516 15:20:25.258" starttime="20180516 15:20:24.837"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:20:25.259" level="INFO">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host 
       valid_lft forever preferred_lft forever
3: node_1_noeth_1@if2: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default 
    link/ether b2:f1:cb:3e:97:0b brd ff:ff:ff:ff:ff:ff link-netnsid 2
    inet6 fe80::b0f1:cbff:fe3e:970b/64 scope link 
       valid_lft forever preferred_lft forever
5: node_2_noeth_2@if4: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default 
    link/ether 22:c4:57:2e:db:6b brd ff:ff:ff:ff:ff:ff link-netnsid 3
    inet6 fe80::20c4:57ff:fe2e:db6b/64 scope link 
       valid_lft forever preferred_lft forever
289: eth0@if290: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default 
    link/ether 02:42:ac:11:00:05 brd ff:ff:ff:ff:ff:ff link-netnsid 0
    inet 172.17.0.5/16 brd 172.17.255.255 scope global eth0
       valid_lft forever preferred_lft forever
    inet6 fe80::42:acff:fe11:5/64 scope link 
       valid_lft forever preferred_lft forever</msg>
<status status="PASS" endtime="20180516 15:20:25.259" starttime="20180516 15:20:25.258"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:20:25.259" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:20:25.259" starttime="20180516 15:20:25.259"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${rc}</arg>
</arguments>
<msg timestamp="20180516 15:20:25.260" level="INFO">0</msg>
<status status="PASS" endtime="20180516 15:20:25.260" starttime="20180516 15:20:25.259"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:20:25.261" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:20:25.261" starttime="20180516 15:20:25.261"></status>
</kw>
<msg timestamp="20180516 15:20:25.262" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:20:25.262" starttime="20180516 15:20:25.260"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} in container ${container}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:20:25.262" starttime="20180516 15:20:25.262"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${container}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}***</arg>
</arguments>
<msg timestamp="20180516 15:20:25.263" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:20:25.263" starttime="20180516 15:20:25.262"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${container}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:20:25.263" starttime="20180516 15:20:25.263"></status>
</kw>
<status status="PASS" endtime="20180516 15:20:25.264" starttime="20180516 15:20:24.835"></status>
</kw>
<kw name="Execute In Container" library="docker">
<arguments>
<arg>node_1</arg>
<arg>ip a</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${container}</arg>
<arg>${command}</arg>
</arguments>
<msg timestamp="20180516 15:20:25.264" level="INFO">node_1</msg>
<msg timestamp="20180516 15:20:25.264" level="INFO">ip a</msg>
<status status="PASS" endtime="20180516 15:20:25.265" starttime="20180516 15:20:25.264"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>docker</arg>
</arguments>
<status status="PASS" endtime="20180516 15:20:25.265" starttime="20180516 15:20:25.265"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:20:25.265" level="INFO">${currdate} = 2018-05-16 15:20:25.265</msg>
<status status="PASS" endtime="20180516 15:20:25.265" starttime="20180516 15:20:25.265"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DOCKER_COMMAND} exec ${container} ${command}</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20180516 15:20:25.266" level="INFO">Executing command 'sudo docker exec node_1 ip a'.</msg>
<msg timestamp="20180516 15:20:25.697" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:20:25.697" level="INFO">${out} = 1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lf...</msg>
<msg timestamp="20180516 15:20:25.697" level="INFO">${stderr} = </msg>
<msg timestamp="20180516 15:20:25.697" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20180516 15:20:25.697" starttime="20180516 15:20:25.266"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:20:25.698" level="INFO">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host 
       valid_lft forever preferred_lft forever
2: node1_veth@if3: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default 
    link/ether 02:00:00:00:00:01 brd ff:ff:ff:ff:ff:ff link-netnsid 1
    inet 10.0.0.10/24 brd 10.0.0.255 scope global node1_veth
       valid_lft forever preferred_lft forever
    inet6 fe80::7c81:42ff:fe85:225e/64 scope link 
       valid_lft forever preferred_lft forever
291: eth0@if292: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default 
    link/ether 02:42:ac:11:00:06 brd ff:ff:ff:ff:ff:ff link-netnsid 0
    inet 172.17.0.6/16 brd 172.17.255.255 scope global eth0
       valid_lft forever preferred_lft forever
    inet6 fe80::42:acff:fe11:6/64 scope link 
       valid_lft forever preferred_lft forever</msg>
<status status="PASS" endtime="20180516 15:20:25.698" starttime="20180516 15:20:25.697"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:20:25.698" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:20:25.698" starttime="20180516 15:20:25.698"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${rc}</arg>
</arguments>
<msg timestamp="20180516 15:20:25.699" level="INFO">0</msg>
<status status="PASS" endtime="20180516 15:20:25.699" starttime="20180516 15:20:25.699"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:20:25.700" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:20:25.700" starttime="20180516 15:20:25.699"></status>
</kw>
<msg timestamp="20180516 15:20:25.700" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:20:25.700" starttime="20180516 15:20:25.699"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} in container ${container}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:20:25.701" starttime="20180516 15:20:25.700"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${container}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}***</arg>
</arguments>
<msg timestamp="20180516 15:20:25.702" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_node_1.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_node_1.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:20:25.702" starttime="20180516 15:20:25.701"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${container}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:20:25.702" starttime="20180516 15:20:25.702"></status>
</kw>
<status status="PASS" endtime="20180516 15:20:25.703" starttime="20180516 15:20:25.264"></status>
</kw>
<kw name="Execute In Container" library="docker">
<arguments>
<arg>node_2</arg>
<arg>ip a</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${container}</arg>
<arg>${command}</arg>
</arguments>
<msg timestamp="20180516 15:20:25.703" level="INFO">node_2</msg>
<msg timestamp="20180516 15:20:25.703" level="INFO">ip a</msg>
<status status="PASS" endtime="20180516 15:20:25.704" starttime="20180516 15:20:25.703"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>docker</arg>
</arguments>
<status status="PASS" endtime="20180516 15:20:25.704" starttime="20180516 15:20:25.704"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:20:25.704" level="INFO">${currdate} = 2018-05-16 15:20:25.704</msg>
<status status="PASS" endtime="20180516 15:20:25.704" starttime="20180516 15:20:25.704"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DOCKER_COMMAND} exec ${container} ${command}</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20180516 15:20:25.705" level="INFO">Executing command 'sudo docker exec node_2 ip a'.</msg>
<msg timestamp="20180516 15:20:26.197" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:20:26.198" level="INFO">${out} = 1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lf...</msg>
<msg timestamp="20180516 15:20:26.198" level="INFO">${stderr} = </msg>
<msg timestamp="20180516 15:20:26.198" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20180516 15:20:26.198" starttime="20180516 15:20:25.705"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:20:26.198" level="INFO">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host 
       valid_lft forever preferred_lft forever
4: node2_veth@if5: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default 
    link/ether 02:00:00:00:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 1
    inet 10.0.0.11/24 brd 10.0.0.255 scope global node2_veth
       valid_lft forever preferred_lft forever
    inet6 fe80::b47c:7ff:fe9a:c1b2/64 scope link 
       valid_lft forever preferred_lft forever
293: eth0@if294: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default 
    link/ether 02:42:ac:11:00:07 brd ff:ff:ff:ff:ff:ff link-netnsid 0
    inet 172.17.0.7/16 brd 172.17.255.255 scope global eth0
       valid_lft forever preferred_lft forever
    inet6 fe80::42:acff:fe11:7/64 scope link 
       valid_lft forever preferred_lft forever</msg>
<status status="PASS" endtime="20180516 15:20:26.198" starttime="20180516 15:20:26.198"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:20:26.199" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:20:26.199" starttime="20180516 15:20:26.199"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${rc}</arg>
</arguments>
<msg timestamp="20180516 15:20:26.199" level="INFO">0</msg>
<status status="PASS" endtime="20180516 15:20:26.200" starttime="20180516 15:20:26.199"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:20:26.201" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:20:26.201" starttime="20180516 15:20:26.200"></status>
</kw>
<msg timestamp="20180516 15:20:26.201" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:20:26.201" starttime="20180516 15:20:26.200"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} in container ${container}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:20:26.203" starttime="20180516 15:20:26.202"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${container}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}***</arg>
</arguments>
<msg timestamp="20180516 15:20:26.204" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_node_2.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_node_2.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:20:26.204" starttime="20180516 15:20:26.203"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${container}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:20:26.204" starttime="20180516 15:20:26.204"></status>
</kw>
<status status="PASS" endtime="20180516 15:20:26.204" starttime="20180516 15:20:25.703"></status>
</kw>
<kw name="linux: Check Processes on Node" library="linux">
<arguments>
<arg>node_1</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${node}</arg>
</arguments>
<msg timestamp="20180516 15:20:26.205" level="INFO">node_1</msg>
<status status="PASS" endtime="20180516 15:20:26.205" starttime="20180516 15:20:26.205"></status>
</kw>
<kw name="Execute In Container" library="docker">
<arguments>
<arg>${node}</arg>
<arg>ps aux</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${container}</arg>
<arg>${command}</arg>
</arguments>
<msg timestamp="20180516 15:20:26.206" level="INFO">node_1</msg>
<msg timestamp="20180516 15:20:26.207" level="INFO">ps aux</msg>
<status status="PASS" endtime="20180516 15:20:26.207" starttime="20180516 15:20:26.206"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>docker</arg>
</arguments>
<status status="PASS" endtime="20180516 15:20:26.207" starttime="20180516 15:20:26.207"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:20:26.207" level="INFO">${currdate} = 2018-05-16 15:20:26.207</msg>
<status status="PASS" endtime="20180516 15:20:26.207" starttime="20180516 15:20:26.207"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DOCKER_COMMAND} exec ${container} ${command}</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20180516 15:20:26.208" level="INFO">Executing command 'sudo docker exec node_1 ps aux'.</msg>
<msg timestamp="20180516 15:20:26.708" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:20:26.708" level="INFO">${out} = USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
root         1  0.0  0.2  47284 17444 pts/0    Ss+  13:16   0:00 /usr/bin/python /usr/bin/supervisord -c /etc/supervisord.conf
...</msg>
<msg timestamp="20180516 15:20:26.708" level="INFO">${stderr} = </msg>
<msg timestamp="20180516 15:20:26.708" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20180516 15:20:26.708" starttime="20180516 15:20:26.208"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:20:26.709" level="INFO">USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
root         1  0.0  0.2  47284 17444 pts/0    Ss+  13:16   0:00 /usr/bin/python /usr/bin/supervisord -c /etc/supervisord.conf
root         7  0.2  0.2 207720 15944 pts/0    Sl   13:16   0:00 /root/go/bin/simple-agent --etcdv3-config=/opt/agent/dev/etcd.conf --kafka-config=/opt/agent/dev/kafka.conf
root        35  0.0  0.0  34424  2828 ?        Rs   13:20   0:00 ps aux</msg>
<status status="PASS" endtime="20180516 15:20:26.709" starttime="20180516 15:20:26.709"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:20:26.709" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:20:26.710" starttime="20180516 15:20:26.709"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${rc}</arg>
</arguments>
<msg timestamp="20180516 15:20:26.710" level="INFO">0</msg>
<status status="PASS" endtime="20180516 15:20:26.710" starttime="20180516 15:20:26.710"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:20:26.711" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:20:26.711" starttime="20180516 15:20:26.711"></status>
</kw>
<msg timestamp="20180516 15:20:26.711" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:20:26.711" starttime="20180516 15:20:26.710"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} in container ${container}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:20:26.711" starttime="20180516 15:20:26.711"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${container}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}***</arg>
</arguments>
<msg timestamp="20180516 15:20:26.712" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_node_1.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_node_1.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:20:26.712" starttime="20180516 15:20:26.712"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${container}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:20:26.713" starttime="20180516 15:20:26.713"></status>
</kw>
<msg timestamp="20180516 15:20:26.713" level="INFO">${out} = USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
root         1  0.0  0.2  47284 17444 pts/0    Ss+  13:16   0:00 /usr/bin/python /usr/bin/supervisord -c /etc/supervisord.conf
...</msg>
<status status="PASS" endtime="20180516 15:20:26.713" starttime="20180516 15:20:26.205"></status>
</kw>
<status status="PASS" endtime="20180516 15:20:26.713" starttime="20180516 15:20:26.205"></status>
</kw>
<kw name="linux: Check Processes on Node" library="linux">
<arguments>
<arg>node_2</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${node}</arg>
</arguments>
<msg timestamp="20180516 15:20:26.714" level="INFO">node_2</msg>
<status status="PASS" endtime="20180516 15:20:26.714" starttime="20180516 15:20:26.714"></status>
</kw>
<kw name="Execute In Container" library="docker">
<arguments>
<arg>${node}</arg>
<arg>ps aux</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${container}</arg>
<arg>${command}</arg>
</arguments>
<msg timestamp="20180516 15:20:26.715" level="INFO">node_2</msg>
<msg timestamp="20180516 15:20:26.715" level="INFO">ps aux</msg>
<status status="PASS" endtime="20180516 15:20:26.715" starttime="20180516 15:20:26.715"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>docker</arg>
</arguments>
<status status="PASS" endtime="20180516 15:20:26.716" starttime="20180516 15:20:26.716"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:20:26.716" level="INFO">${currdate} = 2018-05-16 15:20:26.716</msg>
<status status="PASS" endtime="20180516 15:20:26.716" starttime="20180516 15:20:26.716"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DOCKER_COMMAND} exec ${container} ${command}</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20180516 15:20:26.717" level="INFO">Executing command 'sudo docker exec node_2 ps aux'.</msg>
<msg timestamp="20180516 15:20:27.206" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:20:27.206" level="INFO">${out} = USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
root         1  0.0  0.2  47284 17436 pts/0    Ss+  13:17   0:00 /usr/bin/python /usr/bin/supervisord -c /etc/supervisord.conf
...</msg>
<msg timestamp="20180516 15:20:27.206" level="INFO">${stderr} = </msg>
<msg timestamp="20180516 15:20:27.206" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20180516 15:20:27.206" starttime="20180516 15:20:26.717"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:20:27.207" level="INFO">USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
root         1  0.0  0.2  47284 17436 pts/0    Ss+  13:17   0:00 /usr/bin/python /usr/bin/supervisord -c /etc/supervisord.conf
root         7  0.2  0.2 273256 16544 pts/0    Sl   13:17   0:00 /root/go/bin/simple-agent --etcdv3-config=/opt/agent/dev/etcd.conf --kafka-config=/opt/agent/dev/kafka.conf
root        34  0.0  0.0  34424  2872 ?        Rs   13:20   0:00 ps aux</msg>
<status status="PASS" endtime="20180516 15:20:27.207" starttime="20180516 15:20:27.207"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:20:27.207" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:20:27.208" starttime="20180516 15:20:27.207"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${rc}</arg>
</arguments>
<msg timestamp="20180516 15:20:27.208" level="INFO">0</msg>
<status status="PASS" endtime="20180516 15:20:27.208" starttime="20180516 15:20:27.208"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:20:27.209" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:20:27.209" starttime="20180516 15:20:27.209"></status>
</kw>
<msg timestamp="20180516 15:20:27.209" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:20:27.209" starttime="20180516 15:20:27.208"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} in container ${container}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:20:27.210" starttime="20180516 15:20:27.209"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${container}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}***</arg>
</arguments>
<msg timestamp="20180516 15:20:27.210" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_node_2.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_node_2.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:20:27.211" starttime="20180516 15:20:27.210"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${container}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:20:27.211" starttime="20180516 15:20:27.211"></status>
</kw>
<msg timestamp="20180516 15:20:27.211" level="INFO">${out} = USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
root         1  0.0  0.2  47284 17436 pts/0    Ss+  13:17   0:00 /usr/bin/python /usr/bin/supervisord -c /etc/supervisord.conf
...</msg>
<status status="PASS" endtime="20180516 15:20:27.211" starttime="20180516 15:20:26.714"></status>
</kw>
<status status="PASS" endtime="20180516 15:20:27.212" starttime="20180516 15:20:26.714"></status>
</kw>
<kw name="Make Datastore Snapshots" library="setup-teardown">
<arguments>
<arg>before_resync</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tag}</arg>
</arguments>
<msg timestamp="20180516 15:20:27.213" level="INFO">before_resync</msg>
<status status="PASS" endtime="20180516 15:20:27.213" starttime="20180516 15:20:27.212"></status>
</kw>
<kw name="Create Next Snapshot Prefix" library="setup-teardown">
<assign>
<var>${prefix}</var>
</assign>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>str(${snapshot_num}).zfill(3)</arg>
</arguments>
<assign>
<var>${prefix}</var>
</assign>
<msg timestamp="20180516 15:20:27.214" level="INFO">${prefix} = 023</msg>
<status status="PASS" endtime="20180516 15:20:27.214" starttime="20180516 15:20:27.213"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${snapshot_num}+1</arg>
</arguments>
<assign>
<var>${snapshot_num}</var>
</assign>
<msg timestamp="20180516 15:20:27.215" level="INFO">${snapshot_num} = 24</msg>
<status status="PASS" endtime="20180516 15:20:27.215" starttime="20180516 15:20:27.214"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${snapshot_num}</arg>
</arguments>
<msg timestamp="20180516 15:20:27.215" level="INFO">${snapshot_num} = 24</msg>
<status status="PASS" endtime="20180516 15:20:27.215" starttime="20180516 15:20:27.215"></status>
</kw>
<msg timestamp="20180516 15:20:27.216" level="INFO">${prefix} = 023</msg>
<status status="PASS" endtime="20180516 15:20:27.216" starttime="20180516 15:20:27.213"></status>
</kw>
<kw name="Take ETCD Snapshots" library="setup-teardown">
<arguments>
<arg>${prefix}_${tag}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tag}</arg>
</arguments>
<msg timestamp="20180516 15:20:27.217" level="INFO">023_before_resync</msg>
<status status="PASS" endtime="20180516 15:20:27.217" starttime="20180516 15:20:27.216"></status>
</kw>
<kw name="Get ETCD Dump" library="setup-teardown">
<assign>
<var>${dump}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DOCKER_COMMAND} exec etcd etcdctl get --prefix="true" ""</arg>
</arguments>
<assign>
<var>${command}</var>
</assign>
<msg timestamp="20180516 15:20:27.218" level="INFO">${command} = sudo docker exec etcd etcdctl get --prefix="true" ""</msg>
<status status="PASS" endtime="20180516 15:20:27.218" starttime="20180516 15:20:27.217"></status>
</kw>
<kw name="Execute On Machine" library="ssh">
<doc>*Execute On Machine ${machine} sudo docker exec etcd etcdctl get --prefix="true" ""*</doc>
<arguments>
<arg>docker</arg>
<arg>${command}</arg>
<arg>log=false</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${log}</arg>
</arguments>
<msg timestamp="20180516 15:20:27.224" level="INFO">docker</msg>
<msg timestamp="20180516 15:20:27.224" level="INFO">sudo docker exec etcd etcdctl get --prefix="true" ""</msg>
<msg timestamp="20180516 15:20:27.224" level="INFO">false</msg>
<status status="PASS" endtime="20180516 15:20:27.224" starttime="20180516 15:20:27.224"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:20:27.225" starttime="20180516 15:20:27.225"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:20:27.225" level="INFO">${currdate} = 2018-05-16 15:20:27.225</msg>
<status status="PASS" endtime="20180516 15:20:27.226" starttime="20180516 15:20:27.225"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20180516 15:20:27.226" level="INFO">Executing command 'sudo docker exec etcd etcdctl get --prefix="true" ""'.</msg>
<msg timestamp="20180516 15:20:27.717" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:20:27.717" level="INFO">${out} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<msg timestamp="20180516 15:20:27.717" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20180516 15:20:27.717" starttime="20180516 15:20:27.226"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${out}</arg>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:20:27.718" level="INFO">/sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-containers","description":"Wire 2 VNF containers to the vpp switch","type":2,"elements":[{"container":"node_1","port_label":"node1_veth","etcd_vpp_switch_key":"agent_vpp_1","ipv4_addr":"10.0.0.10","type":3},{"container":"node_2","port_label":"node2_veth","etcd_vpp_switch_key":"agent_vpp_1","ipv4_addr":"10.0.0.11","type":3}]}
/sfc-controller/v1/SP
{"mtu":1500,"starting_vlan_id":5000,"default_static_route_weight":5,"dynamic_bridge_parms":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true},"static_bridge_parms":{"forward":true}}
/sfc-controller/v1/id/HE/agent_vpp_1
{"name":"agent_vpp_1"}
/sfc-controller/v1/id/SFC/two-sample-vnf-containers/node_1_node1_veth
{"sfc_name":"two-sample-vnf-containers","container":"node_1","port":"node1_veth","mac_addr_id":1,"veth_id":1}
/sfc-controller/v1/id/SFC/two-sample-vnf-containers/node_2_node2_veth
{"sfc_name":"two-sample-vnf-containers","container":"node_2","port":"node2_veth","mac_addr_id":2,"veth_id":2}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VNF_node_1_node1_veth
{"name":"IF_VETH_VNF_node_1_node1_veth","enabled":true,"phys_address":"02:00:00:00:00:01","mtu":1500,"host_if_name":"node1_veth","ip_addresses":["10.0.0.10/24"],"namespace":{"type":1,"microservice":"node_1"},"veth":{"peer_if_name":"IF_VETH_VSWITCH_node_1_node1_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VNF_node_2_node2_veth
{"name":"IF_VETH_VNF_node_2_node2_veth","enabled":true,"phys_address":"02:00:00:00:00:02","mtu":1500,"host_if_name":"node2_veth","ip_addresses":["10.0.0.11/24"],"namespace":{"type":1,"microservice":"node_2"},"veth":{"peer_if_name":"IF_VETH_VSWITCH_node_2_node2_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VSWITCH_node_1_node1_veth
{"name":"IF_VETH_VSWITCH_node_1_node1_veth","enabled":true,"mtu":1500,"host_if_name":"node_1_noeth_1","namespace":{"type":1,"microservice":"agent_vpp_1"},"veth":{"peer_if_name":"IF_VETH_VNF_node_1_node1_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VSWITCH_node_2_node2_veth
{"name":"IF_VETH_VSWITCH_node_2_node2_veth","enabled":true,"mtu":1500,"host_if_name":"node_2_noeth_2","namespace":{"type":1,"microservice":"agent_vpp_1"},"veth":{"peer_if_name":"IF_VETH_VNF_node_2_node2_veth"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/BD_INTERNAL_EW_L2FIB_agent_vpp_1
{"name":"BD_INTERNAL_EW_L2FIB_agent_vpp_1","forward":true}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/BD_INTERNAL_EW_agent_vpp_1
{"name":"BD_INTERNAL_EW_agent_vpp_1","flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true,"interfaces":[{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth"},{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth"}]}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/bd2
{
  "name": "bd2",
  "flood": true,
  "unknown_unicast_flood": true,
  "forward": true,
  "learn": true,
  "arp_termination": true,
  "interfaces": [
    { "name": "loop0" },{ "name": "loop1" }
  ]
}


/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth
{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","type":4,"enabled":true,"mtu":1500,"afpacket":{"host_if_name":"node_1_noeth_1"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth
{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","type":4,"enabled":true,"mtu":1500,"afpacket":{"host_if_name":"node_2_noeth_2"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_LOOPBACK_H_agent_vpp_1
{"name":"IF_LOOPBACK_H_agent_vpp_1","enabled":true,"phys_address":"02:00:00:AA:BB:00","mtu":1500,"ip_addresses":["6.0.0.100"]}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/loop0
{
  "name": "loop0",
  "type": 0,
  "enabled": true,
  "phys_address": "8a:f1:be:90:00:00",
  "mtu": 1500,
  "vrf": 0,
  "ip_addresses": [
    "20.1.1.1/24"
  ]
}


/vnf-agent/agent_vpp_1/vpp/config/v1/interface/loop1
{
  "name": "loop1",
  "type": 0,
  "enabled": true,
  "phys_address": "8a:f1:be:90:20:00",
  "mtu": 1500,
  "vrf": 0,
  "ip_addresses": [
    "30.1.1.1/24"
  ]
}


/vnf-agent/agent_vpp_1/vpp/status/v1/bd/BD_INTERNAL_EW_L2FIB_agent_vpp_1
{"index":2,"internal_name":"BD_INTERNAL_EW_L2FIB_agent_vpp_1","bvi_interface":"not_set","last_change":1526476631,"l2_params":{"forward":true}}
/vnf-agent/agent_vpp_1/vpp/status/v1/bd/BD_INTERNAL_EW_agent_vpp_1
{"index":1,"internal_name":"BD_INTERNAL_EW_agent_vpp_1","bvi_interface":"not_set","interface_count":2,"last_change":1526476631,"l2_params":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true},"interfaces":[{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","sw_if_index":2},{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","sw_if_index":3}]}
/vnf-agent/agent_vpp_1/vpp/status/v1/bd/bd2
{"index":3,"internal_name":"bd2","bvi_interface":"not_set","interface_count":2,"last_change":1526476768,"l2_params":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true,"arp_termination":true},"interfaces":[{"name":"loop0","sw_if_index":4},{"name":"loop1","sw_if_index":5}]}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth
{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","internal_name":"host-node_1_noeth_1","if_index":2,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:3e:fd:61:28","mtu":1500,"statistics":{"in_packets":20,"in_bytes":1552}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth
{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","internal_name":"host-node_2_noeth_2","if_index":3,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:42:98:22:08","mtu":1500,"statistics":{"in_packets":22,"in_bytes":1732}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_LOOPBACK_H_agent_vpp_1
{"name":"IF_LOOPBACK_H_agent_vpp_1","internal_name":"loop0","if_index":1,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:00:00:aa:bb:00","mtu":1500,"statistics":{}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/local0
{"name":"local0","internal_name":"local0","admin_status":2,"oper_status":2,"statistics":{}}
/vnf-agent/node_1/check/status/v1/agent
{"build_version":"v1.1-5-g55e9977","build_date":"2018-03-06T11:05+00:00","state":1,"start_time":1526476614,"last_change":1526476619,"last_update":1526476825,"commit_hash":"55e99770087087fa8e41a980a8b6257c80c93f4c"}
/vnf-agent/node_1/check/status/v1/plugin/etcdv3
{"state":1,"last_change":1526476619,"last_update":1526476825}
/vnf-agent/node_1/check/status/v1/plugin/kafka
{"state":1,"last_change":1526476619,"last_update":1526476825}
/vnf-agent/node_2/check/status/v1/agent
{"build_version":"v1.1-5-g55e9977","build_date":"2018-03-06T11:05+00:00","state":1,"start_time":1526476623,"last_change":1526476628,"last_update":1526476823,"commit_hash":"55e99770087087fa8e41a980a8b6257c80c93f4c"}
/vnf-agent/node_2/check/status/v1/plugin/etcdv3
{"state":1,"last_change":1526476628,"last_update":1526476823}
/vnf-agent/node_2/check/status/v1/plugin/kafka
{"state":1,"last_change":1526476628,"last_update":1526476823}</msg>
<msg timestamp="20180516 15:20:27.718" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:20:27.718" starttime="20180516 15:20:27.717"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:20:27.720" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:20:27.720" starttime="20180516 15:20:27.720"></status>
</kw>
<msg timestamp="20180516 15:20:27.720" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:20:27.720" starttime="20180516 15:20:27.719"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} on ${machine}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:20:27.721" starttime="20180516 15:20:27.721"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${log}'=='true'</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:20:27.721" starttime="20180516 15:20:27.721"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:20:27.722" starttime="20180516 15:20:27.722"></status>
</kw>
<msg timestamp="20180516 15:20:27.722" level="INFO">${out} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<status status="PASS" endtime="20180516 15:20:27.722" starttime="20180516 15:20:27.223"></status>
</kw>
<msg timestamp="20180516 15:20:27.722" level="INFO">${dump} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<status status="PASS" endtime="20180516 15:20:27.722" starttime="20180516 15:20:27.217"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/etcd_dump-${tag}.txt</arg>
<arg>${dump}</arg>
</arguments>
<msg timestamp="20180516 15:20:27.723" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/etcd_dump-023_before_resync.txt"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/etcd_dump-023_before_resync.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:20:27.723" starttime="20180516 15:20:27.723"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${dump}</arg>
<arg>/error/</arg>
</arguments>
<assign>
<var>${errors}</var>
</assign>
<msg timestamp="20180516 15:20:27.724" level="INFO">0 out of 98 lines matched</msg>
<msg timestamp="20180516 15:20:27.724" level="INFO">${errors} = </msg>
<status status="PASS" endtime="20180516 15:20:27.724" starttime="20180516 15:20:27.724"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${errors}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${errors}</arg>
</arguments>
<msg timestamp="20180516 15:20:27.725" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:20:27.725" starttime="20180516 15:20:27.725"></status>
</kw>
<msg timestamp="20180516 15:20:27.725" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:20:27.725" starttime="20180516 15:20:27.724"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>Errors detected in keys: ${errors}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:20:27.726" starttime="20180516 15:20:27.726"></status>
</kw>
<status status="PASS" endtime="20180516 15:20:27.726" starttime="20180516 15:20:27.216"></status>
</kw>
<status status="PASS" endtime="20180516 15:20:27.726" starttime="20180516 15:20:27.212"></status>
</kw>
<status status="PASS" endtime="20180516 15:20:27.726" starttime="20180516 15:19:36.372"></status>
</kw>
<kw type="teardown" name="TestTeardown">
<kw name="Make Datastore Snapshots" library="setup-teardown">
<arguments>
<arg>${TEST_NAME}_test_teardown</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tag}</arg>
</arguments>
<msg timestamp="20180516 15:20:27.728" level="INFO">Show All Objects_test_teardown</msg>
<status status="PASS" endtime="20180516 15:20:27.728" starttime="20180516 15:20:27.727"></status>
</kw>
<kw name="Create Next Snapshot Prefix" library="setup-teardown">
<assign>
<var>${prefix}</var>
</assign>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>str(${snapshot_num}).zfill(3)</arg>
</arguments>
<assign>
<var>${prefix}</var>
</assign>
<msg timestamp="20180516 15:20:27.729" level="INFO">${prefix} = 024</msg>
<status status="PASS" endtime="20180516 15:20:27.729" starttime="20180516 15:20:27.728"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${snapshot_num}+1</arg>
</arguments>
<assign>
<var>${snapshot_num}</var>
</assign>
<msg timestamp="20180516 15:20:27.729" level="INFO">${snapshot_num} = 25</msg>
<status status="PASS" endtime="20180516 15:20:27.729" starttime="20180516 15:20:27.729"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${snapshot_num}</arg>
</arguments>
<msg timestamp="20180516 15:20:27.730" level="INFO">${snapshot_num} = 25</msg>
<status status="PASS" endtime="20180516 15:20:27.730" starttime="20180516 15:20:27.729"></status>
</kw>
<msg timestamp="20180516 15:20:27.730" level="INFO">${prefix} = 024</msg>
<status status="PASS" endtime="20180516 15:20:27.730" starttime="20180516 15:20:27.728"></status>
</kw>
<kw name="Take ETCD Snapshots" library="setup-teardown">
<arguments>
<arg>${prefix}_${tag}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tag}</arg>
</arguments>
<msg timestamp="20180516 15:20:27.731" level="INFO">024_Show All Objects_test_teardown</msg>
<status status="PASS" endtime="20180516 15:20:27.731" starttime="20180516 15:20:27.731"></status>
</kw>
<kw name="Get ETCD Dump" library="setup-teardown">
<assign>
<var>${dump}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DOCKER_COMMAND} exec etcd etcdctl get --prefix="true" ""</arg>
</arguments>
<assign>
<var>${command}</var>
</assign>
<msg timestamp="20180516 15:20:27.732" level="INFO">${command} = sudo docker exec etcd etcdctl get --prefix="true" ""</msg>
<status status="PASS" endtime="20180516 15:20:27.732" starttime="20180516 15:20:27.732"></status>
</kw>
<kw name="Execute On Machine" library="ssh">
<doc>*Execute On Machine ${machine} sudo docker exec etcd etcdctl get --prefix="true" ""*</doc>
<arguments>
<arg>docker</arg>
<arg>${command}</arg>
<arg>log=false</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${log}</arg>
</arguments>
<msg timestamp="20180516 15:20:27.739" level="INFO">docker</msg>
<msg timestamp="20180516 15:20:27.739" level="INFO">sudo docker exec etcd etcdctl get --prefix="true" ""</msg>
<msg timestamp="20180516 15:20:27.739" level="INFO">false</msg>
<status status="PASS" endtime="20180516 15:20:27.739" starttime="20180516 15:20:27.738"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:20:27.740" starttime="20180516 15:20:27.739"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:20:27.741" level="INFO">${currdate} = 2018-05-16 15:20:27.741</msg>
<status status="PASS" endtime="20180516 15:20:27.741" starttime="20180516 15:20:27.740"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20180516 15:20:27.741" level="INFO">Executing command 'sudo docker exec etcd etcdctl get --prefix="true" ""'.</msg>
<msg timestamp="20180516 15:20:28.258" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:20:28.258" level="INFO">${out} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<msg timestamp="20180516 15:20:28.258" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20180516 15:20:28.258" starttime="20180516 15:20:27.741"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${out}</arg>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:20:28.259" level="INFO">/sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-containers","description":"Wire 2 VNF containers to the vpp switch","type":2,"elements":[{"container":"node_1","port_label":"node1_veth","etcd_vpp_switch_key":"agent_vpp_1","ipv4_addr":"10.0.0.10","type":3},{"container":"node_2","port_label":"node2_veth","etcd_vpp_switch_key":"agent_vpp_1","ipv4_addr":"10.0.0.11","type":3}]}
/sfc-controller/v1/SP
{"mtu":1500,"starting_vlan_id":5000,"default_static_route_weight":5,"dynamic_bridge_parms":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true},"static_bridge_parms":{"forward":true}}
/sfc-controller/v1/id/HE/agent_vpp_1
{"name":"agent_vpp_1"}
/sfc-controller/v1/id/SFC/two-sample-vnf-containers/node_1_node1_veth
{"sfc_name":"two-sample-vnf-containers","container":"node_1","port":"node1_veth","mac_addr_id":1,"veth_id":1}
/sfc-controller/v1/id/SFC/two-sample-vnf-containers/node_2_node2_veth
{"sfc_name":"two-sample-vnf-containers","container":"node_2","port":"node2_veth","mac_addr_id":2,"veth_id":2}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VNF_node_1_node1_veth
{"name":"IF_VETH_VNF_node_1_node1_veth","enabled":true,"phys_address":"02:00:00:00:00:01","mtu":1500,"host_if_name":"node1_veth","ip_addresses":["10.0.0.10/24"],"namespace":{"type":1,"microservice":"node_1"},"veth":{"peer_if_name":"IF_VETH_VSWITCH_node_1_node1_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VNF_node_2_node2_veth
{"name":"IF_VETH_VNF_node_2_node2_veth","enabled":true,"phys_address":"02:00:00:00:00:02","mtu":1500,"host_if_name":"node2_veth","ip_addresses":["10.0.0.11/24"],"namespace":{"type":1,"microservice":"node_2"},"veth":{"peer_if_name":"IF_VETH_VSWITCH_node_2_node2_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VSWITCH_node_1_node1_veth
{"name":"IF_VETH_VSWITCH_node_1_node1_veth","enabled":true,"mtu":1500,"host_if_name":"node_1_noeth_1","namespace":{"type":1,"microservice":"agent_vpp_1"},"veth":{"peer_if_name":"IF_VETH_VNF_node_1_node1_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VSWITCH_node_2_node2_veth
{"name":"IF_VETH_VSWITCH_node_2_node2_veth","enabled":true,"mtu":1500,"host_if_name":"node_2_noeth_2","namespace":{"type":1,"microservice":"agent_vpp_1"},"veth":{"peer_if_name":"IF_VETH_VNF_node_2_node2_veth"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/BD_INTERNAL_EW_L2FIB_agent_vpp_1
{"name":"BD_INTERNAL_EW_L2FIB_agent_vpp_1","forward":true}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/BD_INTERNAL_EW_agent_vpp_1
{"name":"BD_INTERNAL_EW_agent_vpp_1","flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true,"interfaces":[{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth"},{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth"}]}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/bd2
{
  "name": "bd2",
  "flood": true,
  "unknown_unicast_flood": true,
  "forward": true,
  "learn": true,
  "arp_termination": true,
  "interfaces": [
    { "name": "loop0" },{ "name": "loop1" }
  ]
}


/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth
{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","type":4,"enabled":true,"mtu":1500,"afpacket":{"host_if_name":"node_1_noeth_1"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth
{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","type":4,"enabled":true,"mtu":1500,"afpacket":{"host_if_name":"node_2_noeth_2"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_LOOPBACK_H_agent_vpp_1
{"name":"IF_LOOPBACK_H_agent_vpp_1","enabled":true,"phys_address":"02:00:00:AA:BB:00","mtu":1500,"ip_addresses":["6.0.0.100"]}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/loop0
{
  "name": "loop0",
  "type": 0,
  "enabled": true,
  "phys_address": "8a:f1:be:90:00:00",
  "mtu": 1500,
  "vrf": 0,
  "ip_addresses": [
    "20.1.1.1/24"
  ]
}


/vnf-agent/agent_vpp_1/vpp/config/v1/interface/loop1
{
  "name": "loop1",
  "type": 0,
  "enabled": true,
  "phys_address": "8a:f1:be:90:20:00",
  "mtu": 1500,
  "vrf": 0,
  "ip_addresses": [
    "30.1.1.1/24"
  ]
}


/vnf-agent/agent_vpp_1/vpp/status/v1/bd/BD_INTERNAL_EW_L2FIB_agent_vpp_1
{"index":2,"internal_name":"BD_INTERNAL_EW_L2FIB_agent_vpp_1","bvi_interface":"not_set","last_change":1526476631,"l2_params":{"forward":true}}
/vnf-agent/agent_vpp_1/vpp/status/v1/bd/BD_INTERNAL_EW_agent_vpp_1
{"index":1,"internal_name":"BD_INTERNAL_EW_agent_vpp_1","bvi_interface":"not_set","interface_count":2,"last_change":1526476631,"l2_params":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true},"interfaces":[{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","sw_if_index":2},{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","sw_if_index":3}]}
/vnf-agent/agent_vpp_1/vpp/status/v1/bd/bd2
{"index":3,"internal_name":"bd2","bvi_interface":"not_set","interface_count":2,"last_change":1526476768,"l2_params":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true,"arp_termination":true},"interfaces":[{"name":"loop0","sw_if_index":4},{"name":"loop1","sw_if_index":5}]}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth
{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","internal_name":"host-node_1_noeth_1","if_index":2,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:3e:fd:61:28","mtu":1500,"statistics":{"in_packets":20,"in_bytes":1552}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth
{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","internal_name":"host-node_2_noeth_2","if_index":3,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:42:98:22:08","mtu":1500,"statistics":{"in_packets":22,"in_bytes":1732}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_LOOPBACK_H_agent_vpp_1
{"name":"IF_LOOPBACK_H_agent_vpp_1","internal_name":"loop0","if_index":1,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:00:00:aa:bb:00","mtu":1500,"statistics":{}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/local0
{"name":"local0","internal_name":"local0","admin_status":2,"oper_status":2,"statistics":{}}
/vnf-agent/node_1/check/status/v1/agent
{"build_version":"v1.1-5-g55e9977","build_date":"2018-03-06T11:05+00:00","state":1,"start_time":1526476614,"last_change":1526476619,"last_update":1526476825,"commit_hash":"55e99770087087fa8e41a980a8b6257c80c93f4c"}
/vnf-agent/node_1/check/status/v1/plugin/etcdv3
{"state":1,"last_change":1526476619,"last_update":1526476825}
/vnf-agent/node_1/check/status/v1/plugin/kafka
{"state":1,"last_change":1526476619,"last_update":1526476825}
/vnf-agent/node_2/check/status/v1/agent
{"build_version":"v1.1-5-g55e9977","build_date":"2018-03-06T11:05+00:00","state":1,"start_time":1526476623,"last_change":1526476628,"last_update":1526476823,"commit_hash":"55e99770087087fa8e41a980a8b6257c80c93f4c"}
/vnf-agent/node_2/check/status/v1/plugin/etcdv3
{"state":1,"last_change":1526476628,"last_update":1526476823}
/vnf-agent/node_2/check/status/v1/plugin/kafka
{"state":1,"last_change":1526476628,"last_update":1526476823}</msg>
<msg timestamp="20180516 15:20:28.260" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:20:28.260" starttime="20180516 15:20:28.259"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:20:28.261" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:20:28.261" starttime="20180516 15:20:28.261"></status>
</kw>
<msg timestamp="20180516 15:20:28.261" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:20:28.261" starttime="20180516 15:20:28.260"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} on ${machine}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:20:28.262" starttime="20180516 15:20:28.262"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${log}'=='true'</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:20:28.263" starttime="20180516 15:20:28.262"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:20:28.263" starttime="20180516 15:20:28.263"></status>
</kw>
<msg timestamp="20180516 15:20:28.263" level="INFO">${out} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<status status="PASS" endtime="20180516 15:20:28.263" starttime="20180516 15:20:27.738"></status>
</kw>
<msg timestamp="20180516 15:20:28.264" level="INFO">${dump} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<status status="PASS" endtime="20180516 15:20:28.264" starttime="20180516 15:20:27.731"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/etcd_dump-${tag}.txt</arg>
<arg>${dump}</arg>
</arguments>
<msg timestamp="20180516 15:20:28.264" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/etcd_dump-024_Show All Objects_test_teardown.txt"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/etcd_dump-024_Show All Objects_test_teardown.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:20:28.264" starttime="20180516 15:20:28.264"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${dump}</arg>
<arg>/error/</arg>
</arguments>
<assign>
<var>${errors}</var>
</assign>
<msg timestamp="20180516 15:20:28.265" level="INFO">0 out of 98 lines matched</msg>
<msg timestamp="20180516 15:20:28.265" level="INFO">${errors} = </msg>
<status status="PASS" endtime="20180516 15:20:28.265" starttime="20180516 15:20:28.265"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${errors}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${errors}</arg>
</arguments>
<msg timestamp="20180516 15:20:28.266" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:20:28.266" starttime="20180516 15:20:28.266"></status>
</kw>
<msg timestamp="20180516 15:20:28.266" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:20:28.267" starttime="20180516 15:20:28.266"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>Errors detected in keys: ${errors}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:20:28.267" starttime="20180516 15:20:28.267"></status>
</kw>
<status status="PASS" endtime="20180516 15:20:28.267" starttime="20180516 15:20:27.730"></status>
</kw>
<status status="PASS" endtime="20180516 15:20:28.267" starttime="20180516 15:20:27.727"></status>
</kw>
<status status="PASS" endtime="20180516 15:20:28.267" starttime="20180516 15:20:27.726"></status>
</kw>
<status status="PASS" endtime="20180516 15:20:28.268" critical="yes" starttime="20180516 15:19:36.071"></status>
</test>
<test id="s1-t12" name="Start TCP And UDP Listeners">
<kw type="setup" name="TestSetup">
<kw name="Make Datastore Snapshots" library="setup-teardown">
<arguments>
<arg>${TEST_NAME}_test_setup</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tag}</arg>
</arguments>
<msg timestamp="20180516 15:20:28.270" level="INFO">Start TCP And UDP Listeners_test_setup</msg>
<status status="PASS" endtime="20180516 15:20:28.270" starttime="20180516 15:20:28.269"></status>
</kw>
<kw name="Create Next Snapshot Prefix" library="setup-teardown">
<assign>
<var>${prefix}</var>
</assign>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>str(${snapshot_num}).zfill(3)</arg>
</arguments>
<assign>
<var>${prefix}</var>
</assign>
<msg timestamp="20180516 15:20:28.271" level="INFO">${prefix} = 025</msg>
<status status="PASS" endtime="20180516 15:20:28.271" starttime="20180516 15:20:28.270"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${snapshot_num}+1</arg>
</arguments>
<assign>
<var>${snapshot_num}</var>
</assign>
<msg timestamp="20180516 15:20:28.271" level="INFO">${snapshot_num} = 26</msg>
<status status="PASS" endtime="20180516 15:20:28.271" starttime="20180516 15:20:28.271"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${snapshot_num}</arg>
</arguments>
<msg timestamp="20180516 15:20:28.272" level="INFO">${snapshot_num} = 26</msg>
<status status="PASS" endtime="20180516 15:20:28.272" starttime="20180516 15:20:28.271"></status>
</kw>
<msg timestamp="20180516 15:20:28.272" level="INFO">${prefix} = 025</msg>
<status status="PASS" endtime="20180516 15:20:28.272" starttime="20180516 15:20:28.270"></status>
</kw>
<kw name="Take ETCD Snapshots" library="setup-teardown">
<arguments>
<arg>${prefix}_${tag}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tag}</arg>
</arguments>
<msg timestamp="20180516 15:20:28.273" level="INFO">025_Start TCP And UDP Listeners_test_setup</msg>
<status status="PASS" endtime="20180516 15:20:28.273" starttime="20180516 15:20:28.273"></status>
</kw>
<kw name="Get ETCD Dump" library="setup-teardown">
<assign>
<var>${dump}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DOCKER_COMMAND} exec etcd etcdctl get --prefix="true" ""</arg>
</arguments>
<assign>
<var>${command}</var>
</assign>
<msg timestamp="20180516 15:20:28.274" level="INFO">${command} = sudo docker exec etcd etcdctl get --prefix="true" ""</msg>
<status status="PASS" endtime="20180516 15:20:28.274" starttime="20180516 15:20:28.274"></status>
</kw>
<kw name="Execute On Machine" library="ssh">
<doc>*Execute On Machine ${machine} sudo docker exec etcd etcdctl get --prefix="true" ""*</doc>
<arguments>
<arg>docker</arg>
<arg>${command}</arg>
<arg>log=false</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${log}</arg>
</arguments>
<msg timestamp="20180516 15:20:28.286" level="INFO">docker</msg>
<msg timestamp="20180516 15:20:28.286" level="INFO">sudo docker exec etcd etcdctl get --prefix="true" ""</msg>
<msg timestamp="20180516 15:20:28.286" level="INFO">false</msg>
<status status="PASS" endtime="20180516 15:20:28.286" starttime="20180516 15:20:28.286"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:20:28.286" starttime="20180516 15:20:28.286"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:20:28.287" level="INFO">${currdate} = 2018-05-16 15:20:28.287</msg>
<status status="PASS" endtime="20180516 15:20:28.287" starttime="20180516 15:20:28.287"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20180516 15:20:28.287" level="INFO">Executing command 'sudo docker exec etcd etcdctl get --prefix="true" ""'.</msg>
<msg timestamp="20180516 15:20:28.847" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:20:28.848" level="INFO">${out} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<msg timestamp="20180516 15:20:28.848" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20180516 15:20:28.848" starttime="20180516 15:20:28.287"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${out}</arg>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:20:28.848" level="INFO">/sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-containers","description":"Wire 2 VNF containers to the vpp switch","type":2,"elements":[{"container":"node_1","port_label":"node1_veth","etcd_vpp_switch_key":"agent_vpp_1","ipv4_addr":"10.0.0.10","type":3},{"container":"node_2","port_label":"node2_veth","etcd_vpp_switch_key":"agent_vpp_1","ipv4_addr":"10.0.0.11","type":3}]}
/sfc-controller/v1/SP
{"mtu":1500,"starting_vlan_id":5000,"default_static_route_weight":5,"dynamic_bridge_parms":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true},"static_bridge_parms":{"forward":true}}
/sfc-controller/v1/id/HE/agent_vpp_1
{"name":"agent_vpp_1"}
/sfc-controller/v1/id/SFC/two-sample-vnf-containers/node_1_node1_veth
{"sfc_name":"two-sample-vnf-containers","container":"node_1","port":"node1_veth","mac_addr_id":1,"veth_id":1}
/sfc-controller/v1/id/SFC/two-sample-vnf-containers/node_2_node2_veth
{"sfc_name":"two-sample-vnf-containers","container":"node_2","port":"node2_veth","mac_addr_id":2,"veth_id":2}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VNF_node_1_node1_veth
{"name":"IF_VETH_VNF_node_1_node1_veth","enabled":true,"phys_address":"02:00:00:00:00:01","mtu":1500,"host_if_name":"node1_veth","ip_addresses":["10.0.0.10/24"],"namespace":{"type":1,"microservice":"node_1"},"veth":{"peer_if_name":"IF_VETH_VSWITCH_node_1_node1_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VNF_node_2_node2_veth
{"name":"IF_VETH_VNF_node_2_node2_veth","enabled":true,"phys_address":"02:00:00:00:00:02","mtu":1500,"host_if_name":"node2_veth","ip_addresses":["10.0.0.11/24"],"namespace":{"type":1,"microservice":"node_2"},"veth":{"peer_if_name":"IF_VETH_VSWITCH_node_2_node2_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VSWITCH_node_1_node1_veth
{"name":"IF_VETH_VSWITCH_node_1_node1_veth","enabled":true,"mtu":1500,"host_if_name":"node_1_noeth_1","namespace":{"type":1,"microservice":"agent_vpp_1"},"veth":{"peer_if_name":"IF_VETH_VNF_node_1_node1_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VSWITCH_node_2_node2_veth
{"name":"IF_VETH_VSWITCH_node_2_node2_veth","enabled":true,"mtu":1500,"host_if_name":"node_2_noeth_2","namespace":{"type":1,"microservice":"agent_vpp_1"},"veth":{"peer_if_name":"IF_VETH_VNF_node_2_node2_veth"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/BD_INTERNAL_EW_L2FIB_agent_vpp_1
{"name":"BD_INTERNAL_EW_L2FIB_agent_vpp_1","forward":true}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/BD_INTERNAL_EW_agent_vpp_1
{"name":"BD_INTERNAL_EW_agent_vpp_1","flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true,"interfaces":[{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth"},{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth"}]}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/bd2
{
  "name": "bd2",
  "flood": true,
  "unknown_unicast_flood": true,
  "forward": true,
  "learn": true,
  "arp_termination": true,
  "interfaces": [
    { "name": "loop0" },{ "name": "loop1" }
  ]
}


/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth
{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","type":4,"enabled":true,"mtu":1500,"afpacket":{"host_if_name":"node_1_noeth_1"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth
{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","type":4,"enabled":true,"mtu":1500,"afpacket":{"host_if_name":"node_2_noeth_2"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_LOOPBACK_H_agent_vpp_1
{"name":"IF_LOOPBACK_H_agent_vpp_1","enabled":true,"phys_address":"02:00:00:AA:BB:00","mtu":1500,"ip_addresses":["6.0.0.100"]}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/loop0
{
  "name": "loop0",
  "type": 0,
  "enabled": true,
  "phys_address": "8a:f1:be:90:00:00",
  "mtu": 1500,
  "vrf": 0,
  "ip_addresses": [
    "20.1.1.1/24"
  ]
}


/vnf-agent/agent_vpp_1/vpp/config/v1/interface/loop1
{
  "name": "loop1",
  "type": 0,
  "enabled": true,
  "phys_address": "8a:f1:be:90:20:00",
  "mtu": 1500,
  "vrf": 0,
  "ip_addresses": [
    "30.1.1.1/24"
  ]
}


/vnf-agent/agent_vpp_1/vpp/status/v1/bd/BD_INTERNAL_EW_L2FIB_agent_vpp_1
{"index":2,"internal_name":"BD_INTERNAL_EW_L2FIB_agent_vpp_1","bvi_interface":"not_set","last_change":1526476631,"l2_params":{"forward":true}}
/vnf-agent/agent_vpp_1/vpp/status/v1/bd/BD_INTERNAL_EW_agent_vpp_1
{"index":1,"internal_name":"BD_INTERNAL_EW_agent_vpp_1","bvi_interface":"not_set","interface_count":2,"last_change":1526476631,"l2_params":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true},"interfaces":[{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","sw_if_index":2},{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","sw_if_index":3}]}
/vnf-agent/agent_vpp_1/vpp/status/v1/bd/bd2
{"index":3,"internal_name":"bd2","bvi_interface":"not_set","interface_count":2,"last_change":1526476768,"l2_params":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true,"arp_termination":true},"interfaces":[{"name":"loop0","sw_if_index":4},{"name":"loop1","sw_if_index":5}]}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth
{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","internal_name":"host-node_1_noeth_1","if_index":2,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:3e:fd:61:28","mtu":1500,"statistics":{"in_packets":20,"in_bytes":1552}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth
{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","internal_name":"host-node_2_noeth_2","if_index":3,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:42:98:22:08","mtu":1500,"statistics":{"in_packets":22,"in_bytes":1732}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_LOOPBACK_H_agent_vpp_1
{"name":"IF_LOOPBACK_H_agent_vpp_1","internal_name":"loop0","if_index":1,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:00:00:aa:bb:00","mtu":1500,"statistics":{}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/local0
{"name":"local0","internal_name":"local0","admin_status":2,"oper_status":2,"statistics":{}}
/vnf-agent/node_1/check/status/v1/agent
{"build_version":"v1.1-5-g55e9977","build_date":"2018-03-06T11:05+00:00","state":1,"start_time":1526476614,"last_change":1526476619,"last_update":1526476825,"commit_hash":"55e99770087087fa8e41a980a8b6257c80c93f4c"}
/vnf-agent/node_1/check/status/v1/plugin/etcdv3
{"state":1,"last_change":1526476619,"last_update":1526476825}
/vnf-agent/node_1/check/status/v1/plugin/kafka
{"state":1,"last_change":1526476619,"last_update":1526476825}
/vnf-agent/node_2/check/status/v1/agent
{"build_version":"v1.1-5-g55e9977","build_date":"2018-03-06T11:05+00:00","state":1,"start_time":1526476623,"last_change":1526476628,"last_update":1526476823,"commit_hash":"55e99770087087fa8e41a980a8b6257c80c93f4c"}
/vnf-agent/node_2/check/status/v1/plugin/etcdv3
{"state":1,"last_change":1526476628,"last_update":1526476823}
/vnf-agent/node_2/check/status/v1/plugin/kafka
{"state":1,"last_change":1526476628,"last_update":1526476823}</msg>
<msg timestamp="20180516 15:20:28.848" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:20:28.849" starttime="20180516 15:20:28.848"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:20:28.849" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:20:28.849" starttime="20180516 15:20:28.849"></status>
</kw>
<msg timestamp="20180516 15:20:28.849" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:20:28.850" starttime="20180516 15:20:28.849"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} on ${machine}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:20:28.850" starttime="20180516 15:20:28.850"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${log}'=='true'</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:20:28.850" starttime="20180516 15:20:28.850"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:20:28.851" starttime="20180516 15:20:28.851"></status>
</kw>
<msg timestamp="20180516 15:20:28.851" level="INFO">${out} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<status status="PASS" endtime="20180516 15:20:28.851" starttime="20180516 15:20:28.285"></status>
</kw>
<msg timestamp="20180516 15:20:28.851" level="INFO">${dump} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<status status="PASS" endtime="20180516 15:20:28.851" starttime="20180516 15:20:28.274"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/etcd_dump-${tag}.txt</arg>
<arg>${dump}</arg>
</arguments>
<msg timestamp="20180516 15:20:28.854" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/etcd_dump-025_Start TCP And UDP Listeners_test_setup.txt"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/etcd_dump-025_Start TCP And UDP Listeners_test_setup.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:20:28.854" starttime="20180516 15:20:28.852"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${dump}</arg>
<arg>/error/</arg>
</arguments>
<assign>
<var>${errors}</var>
</assign>
<msg timestamp="20180516 15:20:28.855" level="INFO">0 out of 98 lines matched</msg>
<msg timestamp="20180516 15:20:28.855" level="INFO">${errors} = </msg>
<status status="PASS" endtime="20180516 15:20:28.855" starttime="20180516 15:20:28.855"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${errors}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${errors}</arg>
</arguments>
<msg timestamp="20180516 15:20:28.856" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:20:28.856" starttime="20180516 15:20:28.856"></status>
</kw>
<msg timestamp="20180516 15:20:28.856" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:20:28.856" starttime="20180516 15:20:28.855"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>Errors detected in keys: ${errors}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:20:28.857" starttime="20180516 15:20:28.856"></status>
</kw>
<status status="PASS" endtime="20180516 15:20:28.857" starttime="20180516 15:20:28.273"></status>
</kw>
<status status="PASS" endtime="20180516 15:20:28.857" starttime="20180516 15:20:28.269"></status>
</kw>
<status status="PASS" endtime="20180516 15:20:28.857" starttime="20180516 15:20:28.268"></status>
</kw>
<kw name="Start UDP and TCP Ping Servers">
<kw name="linux: Run TCP Ping Server On Node" library="linux">
<doc>Run TCP PingServer as listener on node ${node}</doc>
<arguments>
<arg>node_1</arg>
<arg>${TCP_PORT}</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${port}</arg>
</arguments>
<msg timestamp="20180516 15:20:28.861" level="INFO">node_1</msg>
<msg timestamp="20180516 15:20:28.861" level="INFO">3000</msg>
<status status="PASS" endtime="20180516 15:20:28.861" starttime="20180516 15:20:28.861"></status>
</kw>
<kw name="Execute In Container Background" library="docker">
<arguments>
<arg>${node}</arg>
<arg>${PINGSERVER_TCP} ${port}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${container}</arg>
<arg>${command}</arg>
</arguments>
<msg timestamp="20180516 15:20:28.862" level="INFO">node_1</msg>
<msg timestamp="20180516 15:20:28.863" level="INFO">nc -klp 3000</msg>
<status status="PASS" endtime="20180516 15:20:28.863" starttime="20180516 15:20:28.862"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>docker</arg>
</arguments>
<status status="PASS" endtime="20180516 15:20:28.864" starttime="20180516 15:20:28.863"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:20:28.864" level="INFO">${currdate} = 2018-05-16 15:20:28.864</msg>
<status status="PASS" endtime="20180516 15:20:28.864" starttime="20180516 15:20:28.864"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DOCKER_COMMAND} exec -d ${container} ${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20180516 15:20:28.865" level="INFO">Executing command 'sudo docker exec -d node_1 nc -klp 3000'.</msg>
<msg timestamp="20180516 15:20:29.324" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:20:29.325" level="INFO">${out} = </msg>
<msg timestamp="20180516 15:20:29.325" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20180516 15:20:29.325" starttime="20180516 15:20:28.864"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:20:29.325" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:20:29.325" starttime="20180516 15:20:29.325"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:20:29.326" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:20:29.326" starttime="20180516 15:20:29.326"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:20:29.327" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:20:29.327" starttime="20180516 15:20:29.326"></status>
</kw>
<msg timestamp="20180516 15:20:29.327" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:20:29.327" starttime="20180516 15:20:29.326"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} in container ${container}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:20:29.327" starttime="20180516 15:20:29.327"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${container}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:20:29.341" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_node_1.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_node_1.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:20:29.341" starttime="20180516 15:20:29.328"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${container}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:20:29.341" starttime="20180516 15:20:29.341"></status>
</kw>
<msg timestamp="20180516 15:20:29.342" level="INFO">${out} = </msg>
<status status="PASS" endtime="20180516 15:20:29.342" starttime="20180516 15:20:28.861"></status>
</kw>
<status status="PASS" endtime="20180516 15:20:29.342" starttime="20180516 15:20:28.860"></status>
</kw>
<kw name="linux: Run UDP Ping Server On Node" library="linux">
<doc>Run UDP PingServer as listener on node ${node}</doc>
<arguments>
<arg>node_1</arg>
<arg>${UDP_PORT}</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${port}</arg>
</arguments>
<msg timestamp="20180516 15:20:29.351" level="INFO">node_1</msg>
<msg timestamp="20180516 15:20:29.351" level="INFO">3001</msg>
<status status="PASS" endtime="20180516 15:20:29.352" starttime="20180516 15:20:29.351"></status>
</kw>
<kw name="Execute In Container Background" library="docker">
<arguments>
<arg>${node}</arg>
<arg>${PINGSERVER_UDP} ${port}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${container}</arg>
<arg>${command}</arg>
</arguments>
<msg timestamp="20180516 15:20:29.360" level="INFO">node_1</msg>
<msg timestamp="20180516 15:20:29.360" level="INFO">nc -uklp 3001</msg>
<status status="PASS" endtime="20180516 15:20:29.360" starttime="20180516 15:20:29.360"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>docker</arg>
</arguments>
<status status="PASS" endtime="20180516 15:20:29.361" starttime="20180516 15:20:29.360"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:20:29.361" level="INFO">${currdate} = 2018-05-16 15:20:29.361</msg>
<status status="PASS" endtime="20180516 15:20:29.361" starttime="20180516 15:20:29.361"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DOCKER_COMMAND} exec -d ${container} ${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20180516 15:20:29.369" level="INFO">Executing command 'sudo docker exec -d node_1 nc -uklp 3001'.</msg>
<msg timestamp="20180516 15:20:29.819" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:20:29.820" level="INFO">${out} = </msg>
<msg timestamp="20180516 15:20:29.820" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20180516 15:20:29.820" starttime="20180516 15:20:29.368"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:20:29.820" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:20:29.820" starttime="20180516 15:20:29.820"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:20:29.821" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:20:29.821" starttime="20180516 15:20:29.821"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:20:29.822" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:20:29.822" starttime="20180516 15:20:29.822"></status>
</kw>
<msg timestamp="20180516 15:20:29.822" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:20:29.822" starttime="20180516 15:20:29.821"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} in container ${container}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:20:29.822" starttime="20180516 15:20:29.822"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${container}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:20:29.839" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_node_1.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_node_1.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:20:29.839" starttime="20180516 15:20:29.832"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${container}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:20:29.840" starttime="20180516 15:20:29.839"></status>
</kw>
<msg timestamp="20180516 15:20:29.845" level="INFO">${out} = </msg>
<status status="PASS" endtime="20180516 15:20:29.845" starttime="20180516 15:20:29.359"></status>
</kw>
<status status="PASS" endtime="20180516 15:20:29.845" starttime="20180516 15:20:29.350"></status>
</kw>
<kw name="linux: Run TCP Ping Server On Node" library="linux">
<doc>Run TCP PingServer as listener on node ${node}</doc>
<arguments>
<arg>node_2</arg>
<arg>${TCP_PORT}</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${port}</arg>
</arguments>
<msg timestamp="20180516 15:20:29.858" level="INFO">node_2</msg>
<msg timestamp="20180516 15:20:29.859" level="INFO">3000</msg>
<status status="PASS" endtime="20180516 15:20:29.859" starttime="20180516 15:20:29.858"></status>
</kw>
<kw name="Execute In Container Background" library="docker">
<arguments>
<arg>${node}</arg>
<arg>${PINGSERVER_TCP} ${port}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${container}</arg>
<arg>${command}</arg>
</arguments>
<msg timestamp="20180516 15:20:29.860" level="INFO">node_2</msg>
<msg timestamp="20180516 15:20:29.860" level="INFO">nc -klp 3000</msg>
<status status="PASS" endtime="20180516 15:20:29.860" starttime="20180516 15:20:29.859"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>docker</arg>
</arguments>
<status status="PASS" endtime="20180516 15:20:29.868" starttime="20180516 15:20:29.860"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:20:29.869" level="INFO">${currdate} = 2018-05-16 15:20:29.869</msg>
<status status="PASS" endtime="20180516 15:20:29.869" starttime="20180516 15:20:29.869"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DOCKER_COMMAND} exec -d ${container} ${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20180516 15:20:29.870" level="INFO">Executing command 'sudo docker exec -d node_2 nc -klp 3000'.</msg>
<msg timestamp="20180516 15:20:30.323" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:20:30.323" level="INFO">${out} = </msg>
<msg timestamp="20180516 15:20:30.324" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20180516 15:20:30.324" starttime="20180516 15:20:29.869"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:20:30.324" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:20:30.324" starttime="20180516 15:20:30.324"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:20:30.325" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:20:30.325" starttime="20180516 15:20:30.324"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:20:30.325" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:20:30.325" starttime="20180516 15:20:30.325"></status>
</kw>
<msg timestamp="20180516 15:20:30.326" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:20:30.326" starttime="20180516 15:20:30.325"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} in container ${container}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:20:30.326" starttime="20180516 15:20:30.326"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${container}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:20:30.327" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_node_2.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_node_2.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:20:30.327" starttime="20180516 15:20:30.326"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${container}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:20:30.327" starttime="20180516 15:20:30.327"></status>
</kw>
<msg timestamp="20180516 15:20:30.328" level="INFO">${out} = </msg>
<status status="PASS" endtime="20180516 15:20:30.328" starttime="20180516 15:20:29.859"></status>
</kw>
<status status="PASS" endtime="20180516 15:20:30.328" starttime="20180516 15:20:29.848"></status>
</kw>
<kw name="linux: Run UDP Ping Server On Node" library="linux">
<doc>Run UDP PingServer as listener on node ${node}</doc>
<arguments>
<arg>node_2</arg>
<arg>${UDP_PORT}</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${port}</arg>
</arguments>
<msg timestamp="20180516 15:20:30.331" level="INFO">node_2</msg>
<msg timestamp="20180516 15:20:30.331" level="INFO">3001</msg>
<status status="PASS" endtime="20180516 15:20:30.331" starttime="20180516 15:20:30.331"></status>
</kw>
<kw name="Execute In Container Background" library="docker">
<arguments>
<arg>${node}</arg>
<arg>${PINGSERVER_UDP} ${port}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${container}</arg>
<arg>${command}</arg>
</arguments>
<msg timestamp="20180516 15:20:30.333" level="INFO">node_2</msg>
<msg timestamp="20180516 15:20:30.333" level="INFO">nc -uklp 3001</msg>
<status status="PASS" endtime="20180516 15:20:30.333" starttime="20180516 15:20:30.332"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>docker</arg>
</arguments>
<status status="PASS" endtime="20180516 15:20:30.333" starttime="20180516 15:20:30.333"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:20:30.334" level="INFO">${currdate} = 2018-05-16 15:20:30.333</msg>
<status status="PASS" endtime="20180516 15:20:30.334" starttime="20180516 15:20:30.333"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DOCKER_COMMAND} exec -d ${container} ${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20180516 15:20:30.334" level="INFO">Executing command 'sudo docker exec -d node_2 nc -uklp 3001'.</msg>
<msg timestamp="20180516 15:20:30.761" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:20:30.762" level="INFO">${out} = </msg>
<msg timestamp="20180516 15:20:30.762" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20180516 15:20:30.762" starttime="20180516 15:20:30.334"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:20:30.762" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:20:30.762" starttime="20180516 15:20:30.762"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:20:30.763" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:20:30.763" starttime="20180516 15:20:30.763"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:20:30.764" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:20:30.764" starttime="20180516 15:20:30.763"></status>
</kw>
<msg timestamp="20180516 15:20:30.764" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:20:30.764" starttime="20180516 15:20:30.763"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} in container ${container}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:20:30.764" starttime="20180516 15:20:30.764"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${container}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:20:30.765" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_node_2.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_node_2.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:20:30.765" starttime="20180516 15:20:30.765"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${container}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:20:30.766" starttime="20180516 15:20:30.765"></status>
</kw>
<msg timestamp="20180516 15:20:30.766" level="INFO">${out} = </msg>
<status status="PASS" endtime="20180516 15:20:30.766" starttime="20180516 15:20:30.332"></status>
</kw>
<status status="PASS" endtime="20180516 15:20:30.766" starttime="20180516 15:20:30.331"></status>
</kw>
<kw name="linux: Check Processes on Node" library="linux">
<arguments>
<arg>node_1</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${node}</arg>
</arguments>
<msg timestamp="20180516 15:20:30.767" level="INFO">node_1</msg>
<status status="PASS" endtime="20180516 15:20:30.767" starttime="20180516 15:20:30.766"></status>
</kw>
<kw name="Execute In Container" library="docker">
<arguments>
<arg>${node}</arg>
<arg>ps aux</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${container}</arg>
<arg>${command}</arg>
</arguments>
<msg timestamp="20180516 15:20:30.767" level="INFO">node_1</msg>
<msg timestamp="20180516 15:20:30.768" level="INFO">ps aux</msg>
<status status="PASS" endtime="20180516 15:20:30.768" starttime="20180516 15:20:30.767"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>docker</arg>
</arguments>
<status status="PASS" endtime="20180516 15:20:30.768" starttime="20180516 15:20:30.768"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:20:30.768" level="INFO">${currdate} = 2018-05-16 15:20:30.768</msg>
<status status="PASS" endtime="20180516 15:20:30.768" starttime="20180516 15:20:30.768"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DOCKER_COMMAND} exec ${container} ${command}</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20180516 15:20:30.769" level="INFO">Executing command 'sudo docker exec node_1 ps aux'.</msg>
<msg timestamp="20180516 15:20:31.273" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:20:31.273" level="INFO">${out} = USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
root         1  0.0  0.2  47284 17444 pts/0    Ss+  13:16   0:00 /usr/bin/python /usr/bin/supervisord -c /etc/supervisord.conf
...</msg>
<msg timestamp="20180516 15:20:31.273" level="INFO">${stderr} = </msg>
<msg timestamp="20180516 15:20:31.273" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20180516 15:20:31.273" starttime="20180516 15:20:30.769"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:20:31.274" level="INFO">USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
root         1  0.0  0.2  47284 17444 pts/0    Ss+  13:16   0:00 /usr/bin/python /usr/bin/supervisord -c /etc/supervisord.conf
root         7  0.2  0.2 207720 15944 pts/0    Sl   13:16   0:00 /root/go/bin/simple-agent --etcdv3-config=/opt/agent/dev/etcd.conf --kafka-config=/opt/agent/dev/kafka.conf
root        39  0.6  0.0   6492  1708 ?        Ss   13:20   0:00 nc -klp 3000
root        43  0.5  0.0   6492  1712 ?        Ss   13:20   0:00 nc -uklp 3001
root        47  2.0  0.0  34424  2828 ?        Rs   13:20   0:00 ps aux</msg>
<status status="PASS" endtime="20180516 15:20:31.274" starttime="20180516 15:20:31.273"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:20:31.274" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:20:31.274" starttime="20180516 15:20:31.274"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${rc}</arg>
</arguments>
<msg timestamp="20180516 15:20:31.275" level="INFO">0</msg>
<status status="PASS" endtime="20180516 15:20:31.275" starttime="20180516 15:20:31.275"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:20:31.276" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:20:31.276" starttime="20180516 15:20:31.276"></status>
</kw>
<msg timestamp="20180516 15:20:31.276" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:20:31.276" starttime="20180516 15:20:31.275"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} in container ${container}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:20:31.277" starttime="20180516 15:20:31.276"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${container}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}***</arg>
</arguments>
<msg timestamp="20180516 15:20:31.277" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_node_1.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_node_1.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:20:31.277" starttime="20180516 15:20:31.277"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${container}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:20:31.278" starttime="20180516 15:20:31.278"></status>
</kw>
<msg timestamp="20180516 15:20:31.278" level="INFO">${out} = USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
root         1  0.0  0.2  47284 17444 pts/0    Ss+  13:16   0:00 /usr/bin/python /usr/bin/supervisord -c /etc/supervisord.conf
...</msg>
<status status="PASS" endtime="20180516 15:20:31.278" starttime="20180516 15:20:30.767"></status>
</kw>
<status status="PASS" endtime="20180516 15:20:31.278" starttime="20180516 15:20:30.766"></status>
</kw>
<kw name="linux: Check Processes on Node" library="linux">
<arguments>
<arg>node_2</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${node}</arg>
</arguments>
<msg timestamp="20180516 15:20:31.279" level="INFO">node_2</msg>
<status status="PASS" endtime="20180516 15:20:31.279" starttime="20180516 15:20:31.279"></status>
</kw>
<kw name="Execute In Container" library="docker">
<arguments>
<arg>${node}</arg>
<arg>ps aux</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${container}</arg>
<arg>${command}</arg>
</arguments>
<msg timestamp="20180516 15:20:31.280" level="INFO">node_2</msg>
<msg timestamp="20180516 15:20:31.281" level="INFO">ps aux</msg>
<status status="PASS" endtime="20180516 15:20:31.281" starttime="20180516 15:20:31.280"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>docker</arg>
</arguments>
<status status="PASS" endtime="20180516 15:20:31.281" starttime="20180516 15:20:31.281"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:20:31.282" level="INFO">${currdate} = 2018-05-16 15:20:31.281</msg>
<status status="PASS" endtime="20180516 15:20:31.282" starttime="20180516 15:20:31.281"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DOCKER_COMMAND} exec ${container} ${command}</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20180516 15:20:31.282" level="INFO">Executing command 'sudo docker exec node_2 ps aux'.</msg>
<msg timestamp="20180516 15:20:31.741" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:20:31.741" level="INFO">${out} = USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
root         1  0.0  0.2  47284 17436 pts/0    Ss+  13:17   0:00 /usr/bin/python /usr/bin/supervisord -c /etc/supervisord.conf
...</msg>
<msg timestamp="20180516 15:20:31.741" level="INFO">${stderr} = </msg>
<msg timestamp="20180516 15:20:31.741" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20180516 15:20:31.741" starttime="20180516 15:20:31.282"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:20:31.741" level="INFO">USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
root         1  0.0  0.2  47284 17436 pts/0    Ss+  13:17   0:00 /usr/bin/python /usr/bin/supervisord -c /etc/supervisord.conf
root         7  0.2  0.2 273256 16544 pts/0    Sl   13:17   0:00 /root/go/bin/simple-agent --etcdv3-config=/opt/agent/dev/etcd.conf --kafka-config=/opt/agent/dev/kafka.conf
root        38  0.5  0.0   6492  1632 ?        Ss   13:20   0:00 nc -klp 3000
root        42  1.0  0.0   6492  1796 ?        Ss   13:20   0:00 nc -uklp 3001
root        46  0.0  0.0  34424  2828 ?        Rs   13:20   0:00 ps aux</msg>
<status status="PASS" endtime="20180516 15:20:31.741" starttime="20180516 15:20:31.741"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:20:31.742" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:20:31.742" starttime="20180516 15:20:31.742"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${rc}</arg>
</arguments>
<msg timestamp="20180516 15:20:31.742" level="INFO">0</msg>
<status status="PASS" endtime="20180516 15:20:31.742" starttime="20180516 15:20:31.742"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:20:31.743" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:20:31.743" starttime="20180516 15:20:31.743"></status>
</kw>
<msg timestamp="20180516 15:20:31.744" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:20:31.744" starttime="20180516 15:20:31.743"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} in container ${container}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:20:31.744" starttime="20180516 15:20:31.744"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${container}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}***</arg>
</arguments>
<msg timestamp="20180516 15:20:31.745" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_node_2.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_node_2.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:20:31.745" starttime="20180516 15:20:31.744"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${container}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:20:31.746" starttime="20180516 15:20:31.745"></status>
</kw>
<msg timestamp="20180516 15:20:31.746" level="INFO">${out} = USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
root         1  0.0  0.2  47284 17436 pts/0    Ss+  13:17   0:00 /usr/bin/python /usr/bin/supervisord -c /etc/supervisord.conf
...</msg>
<status status="PASS" endtime="20180516 15:20:31.746" starttime="20180516 15:20:31.279"></status>
</kw>
<status status="PASS" endtime="20180516 15:20:31.746" starttime="20180516 15:20:31.279"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${SYNC_SLEEP}</arg>
</arguments>
<msg timestamp="20180516 15:20:41.747" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20180516 15:20:41.747" starttime="20180516 15:20:31.746"></status>
</kw>
<status status="PASS" endtime="20180516 15:20:41.748" starttime="20180516 15:20:28.857"></status>
</kw>
<kw type="teardown" name="TestTeardown">
<kw name="Make Datastore Snapshots" library="setup-teardown">
<arguments>
<arg>${TEST_NAME}_test_teardown</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tag}</arg>
</arguments>
<msg timestamp="20180516 15:20:41.749" level="INFO">Start TCP And UDP Listeners_test_teardown</msg>
<status status="PASS" endtime="20180516 15:20:41.749" starttime="20180516 15:20:41.749"></status>
</kw>
<kw name="Create Next Snapshot Prefix" library="setup-teardown">
<assign>
<var>${prefix}</var>
</assign>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>str(${snapshot_num}).zfill(3)</arg>
</arguments>
<assign>
<var>${prefix}</var>
</assign>
<msg timestamp="20180516 15:20:41.750" level="INFO">${prefix} = 026</msg>
<status status="PASS" endtime="20180516 15:20:41.750" starttime="20180516 15:20:41.750"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${snapshot_num}+1</arg>
</arguments>
<assign>
<var>${snapshot_num}</var>
</assign>
<msg timestamp="20180516 15:20:41.750" level="INFO">${snapshot_num} = 27</msg>
<status status="PASS" endtime="20180516 15:20:41.751" starttime="20180516 15:20:41.750"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${snapshot_num}</arg>
</arguments>
<msg timestamp="20180516 15:20:41.751" level="INFO">${snapshot_num} = 27</msg>
<status status="PASS" endtime="20180516 15:20:41.751" starttime="20180516 15:20:41.751"></status>
</kw>
<msg timestamp="20180516 15:20:41.751" level="INFO">${prefix} = 026</msg>
<status status="PASS" endtime="20180516 15:20:41.751" starttime="20180516 15:20:41.749"></status>
</kw>
<kw name="Take ETCD Snapshots" library="setup-teardown">
<arguments>
<arg>${prefix}_${tag}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tag}</arg>
</arguments>
<msg timestamp="20180516 15:20:41.752" level="INFO">026_Start TCP And UDP Listeners_test_teardown</msg>
<status status="PASS" endtime="20180516 15:20:41.752" starttime="20180516 15:20:41.752"></status>
</kw>
<kw name="Get ETCD Dump" library="setup-teardown">
<assign>
<var>${dump}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DOCKER_COMMAND} exec etcd etcdctl get --prefix="true" ""</arg>
</arguments>
<assign>
<var>${command}</var>
</assign>
<msg timestamp="20180516 15:20:41.753" level="INFO">${command} = sudo docker exec etcd etcdctl get --prefix="true" ""</msg>
<status status="PASS" endtime="20180516 15:20:41.753" starttime="20180516 15:20:41.753"></status>
</kw>
<kw name="Execute On Machine" library="ssh">
<doc>*Execute On Machine ${machine} sudo docker exec etcd etcdctl get --prefix="true" ""*</doc>
<arguments>
<arg>docker</arg>
<arg>${command}</arg>
<arg>log=false</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${log}</arg>
</arguments>
<msg timestamp="20180516 15:20:41.768" level="INFO">docker</msg>
<msg timestamp="20180516 15:20:41.768" level="INFO">sudo docker exec etcd etcdctl get --prefix="true" ""</msg>
<msg timestamp="20180516 15:20:41.768" level="INFO">false</msg>
<status status="PASS" endtime="20180516 15:20:41.768" starttime="20180516 15:20:41.768"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:20:41.769" starttime="20180516 15:20:41.768"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:20:41.769" level="INFO">${currdate} = 2018-05-16 15:20:41.769</msg>
<status status="PASS" endtime="20180516 15:20:41.769" starttime="20180516 15:20:41.769"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20180516 15:20:41.770" level="INFO">Executing command 'sudo docker exec etcd etcdctl get --prefix="true" ""'.</msg>
<msg timestamp="20180516 15:20:42.293" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:20:42.293" level="INFO">${out} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<msg timestamp="20180516 15:20:42.294" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20180516 15:20:42.294" starttime="20180516 15:20:41.769"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${out}</arg>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:20:42.294" level="INFO">/sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-containers","description":"Wire 2 VNF containers to the vpp switch","type":2,"elements":[{"container":"node_1","port_label":"node1_veth","etcd_vpp_switch_key":"agent_vpp_1","ipv4_addr":"10.0.0.10","type":3},{"container":"node_2","port_label":"node2_veth","etcd_vpp_switch_key":"agent_vpp_1","ipv4_addr":"10.0.0.11","type":3}]}
/sfc-controller/v1/SP
{"mtu":1500,"starting_vlan_id":5000,"default_static_route_weight":5,"dynamic_bridge_parms":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true},"static_bridge_parms":{"forward":true}}
/sfc-controller/v1/id/HE/agent_vpp_1
{"name":"agent_vpp_1"}
/sfc-controller/v1/id/SFC/two-sample-vnf-containers/node_1_node1_veth
{"sfc_name":"two-sample-vnf-containers","container":"node_1","port":"node1_veth","mac_addr_id":1,"veth_id":1}
/sfc-controller/v1/id/SFC/two-sample-vnf-containers/node_2_node2_veth
{"sfc_name":"two-sample-vnf-containers","container":"node_2","port":"node2_veth","mac_addr_id":2,"veth_id":2}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VNF_node_1_node1_veth
{"name":"IF_VETH_VNF_node_1_node1_veth","enabled":true,"phys_address":"02:00:00:00:00:01","mtu":1500,"host_if_name":"node1_veth","ip_addresses":["10.0.0.10/24"],"namespace":{"type":1,"microservice":"node_1"},"veth":{"peer_if_name":"IF_VETH_VSWITCH_node_1_node1_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VNF_node_2_node2_veth
{"name":"IF_VETH_VNF_node_2_node2_veth","enabled":true,"phys_address":"02:00:00:00:00:02","mtu":1500,"host_if_name":"node2_veth","ip_addresses":["10.0.0.11/24"],"namespace":{"type":1,"microservice":"node_2"},"veth":{"peer_if_name":"IF_VETH_VSWITCH_node_2_node2_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VSWITCH_node_1_node1_veth
{"name":"IF_VETH_VSWITCH_node_1_node1_veth","enabled":true,"mtu":1500,"host_if_name":"node_1_noeth_1","namespace":{"type":1,"microservice":"agent_vpp_1"},"veth":{"peer_if_name":"IF_VETH_VNF_node_1_node1_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VSWITCH_node_2_node2_veth
{"name":"IF_VETH_VSWITCH_node_2_node2_veth","enabled":true,"mtu":1500,"host_if_name":"node_2_noeth_2","namespace":{"type":1,"microservice":"agent_vpp_1"},"veth":{"peer_if_name":"IF_VETH_VNF_node_2_node2_veth"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/BD_INTERNAL_EW_L2FIB_agent_vpp_1
{"name":"BD_INTERNAL_EW_L2FIB_agent_vpp_1","forward":true}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/BD_INTERNAL_EW_agent_vpp_1
{"name":"BD_INTERNAL_EW_agent_vpp_1","flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true,"interfaces":[{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth"},{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth"}]}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/bd2
{
  "name": "bd2",
  "flood": true,
  "unknown_unicast_flood": true,
  "forward": true,
  "learn": true,
  "arp_termination": true,
  "interfaces": [
    { "name": "loop0" },{ "name": "loop1" }
  ]
}


/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth
{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","type":4,"enabled":true,"mtu":1500,"afpacket":{"host_if_name":"node_1_noeth_1"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth
{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","type":4,"enabled":true,"mtu":1500,"afpacket":{"host_if_name":"node_2_noeth_2"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_LOOPBACK_H_agent_vpp_1
{"name":"IF_LOOPBACK_H_agent_vpp_1","enabled":true,"phys_address":"02:00:00:AA:BB:00","mtu":1500,"ip_addresses":["6.0.0.100"]}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/loop0
{
  "name": "loop0",
  "type": 0,
  "enabled": true,
  "phys_address": "8a:f1:be:90:00:00",
  "mtu": 1500,
  "vrf": 0,
  "ip_addresses": [
    "20.1.1.1/24"
  ]
}


/vnf-agent/agent_vpp_1/vpp/config/v1/interface/loop1
{
  "name": "loop1",
  "type": 0,
  "enabled": true,
  "phys_address": "8a:f1:be:90:20:00",
  "mtu": 1500,
  "vrf": 0,
  "ip_addresses": [
    "30.1.1.1/24"
  ]
}


/vnf-agent/agent_vpp_1/vpp/status/v1/bd/BD_INTERNAL_EW_L2FIB_agent_vpp_1
{"index":2,"internal_name":"BD_INTERNAL_EW_L2FIB_agent_vpp_1","bvi_interface":"not_set","last_change":1526476631,"l2_params":{"forward":true}}
/vnf-agent/agent_vpp_1/vpp/status/v1/bd/BD_INTERNAL_EW_agent_vpp_1
{"index":1,"internal_name":"BD_INTERNAL_EW_agent_vpp_1","bvi_interface":"not_set","interface_count":2,"last_change":1526476631,"l2_params":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true},"interfaces":[{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","sw_if_index":2},{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","sw_if_index":3}]}
/vnf-agent/agent_vpp_1/vpp/status/v1/bd/bd2
{"index":3,"internal_name":"bd2","bvi_interface":"not_set","interface_count":2,"last_change":1526476768,"l2_params":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true,"arp_termination":true},"interfaces":[{"name":"loop0","sw_if_index":4},{"name":"loop1","sw_if_index":5}]}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth
{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","internal_name":"host-node_1_noeth_1","if_index":2,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:3e:fd:61:28","mtu":1500,"statistics":{"in_packets":20,"in_bytes":1552}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth
{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","internal_name":"host-node_2_noeth_2","if_index":3,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:42:98:22:08","mtu":1500,"statistics":{"in_packets":22,"in_bytes":1732}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_LOOPBACK_H_agent_vpp_1
{"name":"IF_LOOPBACK_H_agent_vpp_1","internal_name":"loop0","if_index":1,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:00:00:aa:bb:00","mtu":1500,"statistics":{}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/local0
{"name":"local0","internal_name":"local0","admin_status":2,"oper_status":2,"statistics":{}}
/vnf-agent/node_1/check/status/v1/agent
{"build_version":"v1.1-5-g55e9977","build_date":"2018-03-06T11:05+00:00","state":1,"start_time":1526476614,"last_change":1526476619,"last_update":1526476835,"commit_hash":"55e99770087087fa8e41a980a8b6257c80c93f4c"}
/vnf-agent/node_1/check/status/v1/plugin/etcdv3
{"state":1,"last_change":1526476619,"last_update":1526476835}
/vnf-agent/node_1/check/status/v1/plugin/kafka
{"state":1,"last_change":1526476619,"last_update":1526476835}
/vnf-agent/node_2/check/status/v1/agent
{"build_version":"v1.1-5-g55e9977","build_date":"2018-03-06T11:05+00:00","state":1,"start_time":1526476623,"last_change":1526476628,"last_update":1526476833,"commit_hash":"55e99770087087fa8e41a980a8b6257c80c93f4c"}
/vnf-agent/node_2/check/status/v1/plugin/etcdv3
{"state":1,"last_change":1526476628,"last_update":1526476833}
/vnf-agent/node_2/check/status/v1/plugin/kafka
{"state":1,"last_change":1526476628,"last_update":1526476833}</msg>
<msg timestamp="20180516 15:20:42.295" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:20:42.295" starttime="20180516 15:20:42.294"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:20:42.296" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:20:42.296" starttime="20180516 15:20:42.295"></status>
</kw>
<msg timestamp="20180516 15:20:42.296" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:20:42.296" starttime="20180516 15:20:42.295"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} on ${machine}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:20:42.296" starttime="20180516 15:20:42.296"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${log}'=='true'</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:20:42.297" starttime="20180516 15:20:42.296"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:20:42.297" starttime="20180516 15:20:42.297"></status>
</kw>
<msg timestamp="20180516 15:20:42.297" level="INFO">${out} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<status status="PASS" endtime="20180516 15:20:42.297" starttime="20180516 15:20:41.767"></status>
</kw>
<msg timestamp="20180516 15:20:42.298" level="INFO">${dump} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<status status="PASS" endtime="20180516 15:20:42.298" starttime="20180516 15:20:41.752"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/etcd_dump-${tag}.txt</arg>
<arg>${dump}</arg>
</arguments>
<msg timestamp="20180516 15:20:42.298" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/etcd_dump-026_Start TCP And UDP Listeners_test_teardown.txt"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/etcd_dump-026_Start TCP And UDP Listeners_test_teardown.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:20:42.298" starttime="20180516 15:20:42.298"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${dump}</arg>
<arg>/error/</arg>
</arguments>
<assign>
<var>${errors}</var>
</assign>
<msg timestamp="20180516 15:20:42.299" level="INFO">0 out of 98 lines matched</msg>
<msg timestamp="20180516 15:20:42.299" level="INFO">${errors} = </msg>
<status status="PASS" endtime="20180516 15:20:42.299" starttime="20180516 15:20:42.299"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${errors}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${errors}</arg>
</arguments>
<msg timestamp="20180516 15:20:42.300" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:20:42.300" starttime="20180516 15:20:42.300"></status>
</kw>
<msg timestamp="20180516 15:20:42.300" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:20:42.300" starttime="20180516 15:20:42.299"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>Errors detected in keys: ${errors}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:20:42.300" starttime="20180516 15:20:42.300"></status>
</kw>
<status status="PASS" endtime="20180516 15:20:42.301" starttime="20180516 15:20:41.751"></status>
</kw>
<status status="PASS" endtime="20180516 15:20:42.301" starttime="20180516 15:20:41.748"></status>
</kw>
<status status="PASS" endtime="20180516 15:20:42.301" starttime="20180516 15:20:41.748"></status>
</kw>
<status status="PASS" endtime="20180516 15:20:42.301" critical="yes" starttime="20180516 15:20:28.268"></status>
</test>
<test id="s1-t13" name="Check Ping Agent1 -&gt; Agent2">
<kw type="setup" name="TestSetup">
<kw name="Make Datastore Snapshots" library="setup-teardown">
<arguments>
<arg>${TEST_NAME}_test_setup</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tag}</arg>
</arguments>
<msg timestamp="20180516 15:20:42.304" level="INFO">Check Ping Agent1 -&gt; Agent2_test_setup</msg>
<status status="PASS" endtime="20180516 15:20:42.304" starttime="20180516 15:20:42.303"></status>
</kw>
<kw name="Create Next Snapshot Prefix" library="setup-teardown">
<assign>
<var>${prefix}</var>
</assign>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>str(${snapshot_num}).zfill(3)</arg>
</arguments>
<assign>
<var>${prefix}</var>
</assign>
<msg timestamp="20180516 15:20:42.306" level="INFO">${prefix} = 027</msg>
<status status="PASS" endtime="20180516 15:20:42.306" starttime="20180516 15:20:42.305"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${snapshot_num}+1</arg>
</arguments>
<assign>
<var>${snapshot_num}</var>
</assign>
<msg timestamp="20180516 15:20:42.307" level="INFO">${snapshot_num} = 28</msg>
<status status="PASS" endtime="20180516 15:20:42.307" starttime="20180516 15:20:42.306"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${snapshot_num}</arg>
</arguments>
<msg timestamp="20180516 15:20:42.308" level="INFO">${snapshot_num} = 28</msg>
<status status="PASS" endtime="20180516 15:20:42.308" starttime="20180516 15:20:42.307"></status>
</kw>
<msg timestamp="20180516 15:20:42.308" level="INFO">${prefix} = 027</msg>
<status status="PASS" endtime="20180516 15:20:42.308" starttime="20180516 15:20:42.304"></status>
</kw>
<kw name="Take ETCD Snapshots" library="setup-teardown">
<arguments>
<arg>${prefix}_${tag}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tag}</arg>
</arguments>
<msg timestamp="20180516 15:20:42.309" level="INFO">027_Check Ping Agent1 -&gt; Agent2_test_setup</msg>
<status status="PASS" endtime="20180516 15:20:42.309" starttime="20180516 15:20:42.309"></status>
</kw>
<kw name="Get ETCD Dump" library="setup-teardown">
<assign>
<var>${dump}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DOCKER_COMMAND} exec etcd etcdctl get --prefix="true" ""</arg>
</arguments>
<assign>
<var>${command}</var>
</assign>
<msg timestamp="20180516 15:20:42.311" level="INFO">${command} = sudo docker exec etcd etcdctl get --prefix="true" ""</msg>
<status status="PASS" endtime="20180516 15:20:42.311" starttime="20180516 15:20:42.310"></status>
</kw>
<kw name="Execute On Machine" library="ssh">
<doc>*Execute On Machine ${machine} sudo docker exec etcd etcdctl get --prefix="true" ""*</doc>
<arguments>
<arg>docker</arg>
<arg>${command}</arg>
<arg>log=false</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${log}</arg>
</arguments>
<msg timestamp="20180516 15:20:42.323" level="INFO">docker</msg>
<msg timestamp="20180516 15:20:42.323" level="INFO">sudo docker exec etcd etcdctl get --prefix="true" ""</msg>
<msg timestamp="20180516 15:20:42.324" level="INFO">false</msg>
<status status="PASS" endtime="20180516 15:20:42.324" starttime="20180516 15:20:42.323"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:20:42.330" starttime="20180516 15:20:42.324"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:20:42.331" level="INFO">${currdate} = 2018-05-16 15:20:42.331</msg>
<status status="PASS" endtime="20180516 15:20:42.331" starttime="20180516 15:20:42.331"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20180516 15:20:42.331" level="INFO">Executing command 'sudo docker exec etcd etcdctl get --prefix="true" ""'.</msg>
<msg timestamp="20180516 15:20:42.918" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:20:42.918" level="INFO">${out} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<msg timestamp="20180516 15:20:42.918" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20180516 15:20:42.918" starttime="20180516 15:20:42.331"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${out}</arg>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:20:42.919" level="INFO">/sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-containers","description":"Wire 2 VNF containers to the vpp switch","type":2,"elements":[{"container":"node_1","port_label":"node1_veth","etcd_vpp_switch_key":"agent_vpp_1","ipv4_addr":"10.0.0.10","type":3},{"container":"node_2","port_label":"node2_veth","etcd_vpp_switch_key":"agent_vpp_1","ipv4_addr":"10.0.0.11","type":3}]}
/sfc-controller/v1/SP
{"mtu":1500,"starting_vlan_id":5000,"default_static_route_weight":5,"dynamic_bridge_parms":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true},"static_bridge_parms":{"forward":true}}
/sfc-controller/v1/id/HE/agent_vpp_1
{"name":"agent_vpp_1"}
/sfc-controller/v1/id/SFC/two-sample-vnf-containers/node_1_node1_veth
{"sfc_name":"two-sample-vnf-containers","container":"node_1","port":"node1_veth","mac_addr_id":1,"veth_id":1}
/sfc-controller/v1/id/SFC/two-sample-vnf-containers/node_2_node2_veth
{"sfc_name":"two-sample-vnf-containers","container":"node_2","port":"node2_veth","mac_addr_id":2,"veth_id":2}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VNF_node_1_node1_veth
{"name":"IF_VETH_VNF_node_1_node1_veth","enabled":true,"phys_address":"02:00:00:00:00:01","mtu":1500,"host_if_name":"node1_veth","ip_addresses":["10.0.0.10/24"],"namespace":{"type":1,"microservice":"node_1"},"veth":{"peer_if_name":"IF_VETH_VSWITCH_node_1_node1_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VNF_node_2_node2_veth
{"name":"IF_VETH_VNF_node_2_node2_veth","enabled":true,"phys_address":"02:00:00:00:00:02","mtu":1500,"host_if_name":"node2_veth","ip_addresses":["10.0.0.11/24"],"namespace":{"type":1,"microservice":"node_2"},"veth":{"peer_if_name":"IF_VETH_VSWITCH_node_2_node2_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VSWITCH_node_1_node1_veth
{"name":"IF_VETH_VSWITCH_node_1_node1_veth","enabled":true,"mtu":1500,"host_if_name":"node_1_noeth_1","namespace":{"type":1,"microservice":"agent_vpp_1"},"veth":{"peer_if_name":"IF_VETH_VNF_node_1_node1_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VSWITCH_node_2_node2_veth
{"name":"IF_VETH_VSWITCH_node_2_node2_veth","enabled":true,"mtu":1500,"host_if_name":"node_2_noeth_2","namespace":{"type":1,"microservice":"agent_vpp_1"},"veth":{"peer_if_name":"IF_VETH_VNF_node_2_node2_veth"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/BD_INTERNAL_EW_L2FIB_agent_vpp_1
{"name":"BD_INTERNAL_EW_L2FIB_agent_vpp_1","forward":true}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/BD_INTERNAL_EW_agent_vpp_1
{"name":"BD_INTERNAL_EW_agent_vpp_1","flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true,"interfaces":[{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth"},{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth"}]}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/bd2
{
  "name": "bd2",
  "flood": true,
  "unknown_unicast_flood": true,
  "forward": true,
  "learn": true,
  "arp_termination": true,
  "interfaces": [
    { "name": "loop0" },{ "name": "loop1" }
  ]
}


/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth
{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","type":4,"enabled":true,"mtu":1500,"afpacket":{"host_if_name":"node_1_noeth_1"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth
{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","type":4,"enabled":true,"mtu":1500,"afpacket":{"host_if_name":"node_2_noeth_2"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_LOOPBACK_H_agent_vpp_1
{"name":"IF_LOOPBACK_H_agent_vpp_1","enabled":true,"phys_address":"02:00:00:AA:BB:00","mtu":1500,"ip_addresses":["6.0.0.100"]}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/loop0
{
  "name": "loop0",
  "type": 0,
  "enabled": true,
  "phys_address": "8a:f1:be:90:00:00",
  "mtu": 1500,
  "vrf": 0,
  "ip_addresses": [
    "20.1.1.1/24"
  ]
}


/vnf-agent/agent_vpp_1/vpp/config/v1/interface/loop1
{
  "name": "loop1",
  "type": 0,
  "enabled": true,
  "phys_address": "8a:f1:be:90:20:00",
  "mtu": 1500,
  "vrf": 0,
  "ip_addresses": [
    "30.1.1.1/24"
  ]
}


/vnf-agent/agent_vpp_1/vpp/status/v1/bd/BD_INTERNAL_EW_L2FIB_agent_vpp_1
{"index":2,"internal_name":"BD_INTERNAL_EW_L2FIB_agent_vpp_1","bvi_interface":"not_set","last_change":1526476631,"l2_params":{"forward":true}}
/vnf-agent/agent_vpp_1/vpp/status/v1/bd/BD_INTERNAL_EW_agent_vpp_1
{"index":1,"internal_name":"BD_INTERNAL_EW_agent_vpp_1","bvi_interface":"not_set","interface_count":2,"last_change":1526476631,"l2_params":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true},"interfaces":[{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","sw_if_index":2},{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","sw_if_index":3}]}
/vnf-agent/agent_vpp_1/vpp/status/v1/bd/bd2
{"index":3,"internal_name":"bd2","bvi_interface":"not_set","interface_count":2,"last_change":1526476768,"l2_params":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true,"arp_termination":true},"interfaces":[{"name":"loop0","sw_if_index":4},{"name":"loop1","sw_if_index":5}]}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth
{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","internal_name":"host-node_1_noeth_1","if_index":2,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:3e:fd:61:28","mtu":1500,"statistics":{"in_packets":20,"in_bytes":1552}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth
{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","internal_name":"host-node_2_noeth_2","if_index":3,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:42:98:22:08","mtu":1500,"statistics":{"in_packets":22,"in_bytes":1732}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_LOOPBACK_H_agent_vpp_1
{"name":"IF_LOOPBACK_H_agent_vpp_1","internal_name":"loop0","if_index":1,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:00:00:aa:bb:00","mtu":1500,"statistics":{}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/local0
{"name":"local0","internal_name":"local0","admin_status":2,"oper_status":2,"statistics":{}}
/vnf-agent/node_1/check/status/v1/agent
{"build_version":"v1.1-5-g55e9977","build_date":"2018-03-06T11:05+00:00","state":1,"start_time":1526476614,"last_change":1526476619,"last_update":1526476835,"commit_hash":"55e99770087087fa8e41a980a8b6257c80c93f4c"}
/vnf-agent/node_1/check/status/v1/plugin/etcdv3
{"state":1,"last_change":1526476619,"last_update":1526476835}
/vnf-agent/node_1/check/status/v1/plugin/kafka
{"state":1,"last_change":1526476619,"last_update":1526476835}
/vnf-agent/node_2/check/status/v1/agent
{"build_version":"v1.1-5-g55e9977","build_date":"2018-03-06T11:05+00:00","state":1,"start_time":1526476623,"last_change":1526476628,"last_update":1526476833,"commit_hash":"55e99770087087fa8e41a980a8b6257c80c93f4c"}
/vnf-agent/node_2/check/status/v1/plugin/etcdv3
{"state":1,"last_change":1526476628,"last_update":1526476833}
/vnf-agent/node_2/check/status/v1/plugin/kafka
{"state":1,"last_change":1526476628,"last_update":1526476833}</msg>
<msg timestamp="20180516 15:20:42.919" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:20:42.919" starttime="20180516 15:20:42.919"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:20:42.921" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:20:42.921" starttime="20180516 15:20:42.920"></status>
</kw>
<msg timestamp="20180516 15:20:42.921" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:20:42.921" starttime="20180516 15:20:42.919"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} on ${machine}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:20:42.921" starttime="20180516 15:20:42.921"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${log}'=='true'</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:20:42.922" starttime="20180516 15:20:42.922"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:20:42.922" starttime="20180516 15:20:42.922"></status>
</kw>
<msg timestamp="20180516 15:20:42.922" level="INFO">${out} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<status status="PASS" endtime="20180516 15:20:42.923" starttime="20180516 15:20:42.322"></status>
</kw>
<msg timestamp="20180516 15:20:42.923" level="INFO">${dump} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<status status="PASS" endtime="20180516 15:20:42.923" starttime="20180516 15:20:42.310"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/etcd_dump-${tag}.txt</arg>
<arg>${dump}</arg>
</arguments>
<msg timestamp="20180516 15:20:42.923" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/etcd_dump-027_Check Ping Agent1 -&gt; Agent2_test_setup.txt"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/etcd_dump-027_Check Ping Agent1 -&gt; Agent2_test_setup.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:20:42.923" starttime="20180516 15:20:42.923"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${dump}</arg>
<arg>/error/</arg>
</arguments>
<assign>
<var>${errors}</var>
</assign>
<msg timestamp="20180516 15:20:42.924" level="INFO">0 out of 98 lines matched</msg>
<msg timestamp="20180516 15:20:42.924" level="INFO">${errors} = </msg>
<status status="PASS" endtime="20180516 15:20:42.924" starttime="20180516 15:20:42.924"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${errors}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${errors}</arg>
</arguments>
<msg timestamp="20180516 15:20:42.925" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:20:42.925" starttime="20180516 15:20:42.925"></status>
</kw>
<msg timestamp="20180516 15:20:42.925" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:20:42.925" starttime="20180516 15:20:42.924"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>Errors detected in keys: ${errors}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:20:42.926" starttime="20180516 15:20:42.926"></status>
</kw>
<status status="PASS" endtime="20180516 15:20:42.926" starttime="20180516 15:20:42.308"></status>
</kw>
<status status="PASS" endtime="20180516 15:20:42.926" starttime="20180516 15:20:42.303"></status>
</kw>
<status status="PASS" endtime="20180516 15:20:42.926" starttime="20180516 15:20:42.302"></status>
</kw>
<kw name="linux: Check Ping" library="linux">
<arguments>
<arg>node_1</arg>
<arg>10.0.0.11</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${ip}</arg>
</arguments>
<msg timestamp="20180516 15:20:42.927" level="INFO">node_1</msg>
<msg timestamp="20180516 15:20:42.927" level="INFO">10.0.0.11</msg>
<status status="PASS" endtime="20180516 15:20:42.927" starttime="20180516 15:20:42.927"></status>
</kw>
<kw name="Execute In Container" library="docker">
<arguments>
<arg>${node}</arg>
<arg>ping -c 5 ${ip}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${container}</arg>
<arg>${command}</arg>
</arguments>
<msg timestamp="20180516 15:20:42.928" level="INFO">node_1</msg>
<msg timestamp="20180516 15:20:42.928" level="INFO">ping -c 5 10.0.0.11</msg>
<status status="PASS" endtime="20180516 15:20:42.928" starttime="20180516 15:20:42.928"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>docker</arg>
</arguments>
<status status="PASS" endtime="20180516 15:20:42.929" starttime="20180516 15:20:42.929"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:20:42.929" level="INFO">${currdate} = 2018-05-16 15:20:42.929</msg>
<status status="PASS" endtime="20180516 15:20:42.929" starttime="20180516 15:20:42.929"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DOCKER_COMMAND} exec ${container} ${command}</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20180516 15:20:42.930" level="INFO">Executing command 'sudo docker exec node_1 ping -c 5 10.0.0.11'.</msg>
<msg timestamp="20180516 15:20:47.546" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:20:47.546" level="INFO">${out} = PING 10.0.0.11 (10.0.0.11) 56(84) bytes of data.
64 bytes from 10.0.0.11: icmp_seq=1 ttl=64 time=0.500 ms
64 bytes from 10.0.0.11: icmp_seq=2 ttl=64 time=0.222 ms
64 bytes from 10.0.0.11: icmp_seq=3 t...</msg>
<msg timestamp="20180516 15:20:47.546" level="INFO">${stderr} = </msg>
<msg timestamp="20180516 15:20:47.548" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20180516 15:20:47.548" starttime="20180516 15:20:42.929"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:20:47.549" level="INFO">PING 10.0.0.11 (10.0.0.11) 56(84) bytes of data.
64 bytes from 10.0.0.11: icmp_seq=1 ttl=64 time=0.500 ms
64 bytes from 10.0.0.11: icmp_seq=2 ttl=64 time=0.222 ms
64 bytes from 10.0.0.11: icmp_seq=3 ttl=64 time=0.099 ms
64 bytes from 10.0.0.11: icmp_seq=4 ttl=64 time=0.087 ms
64 bytes from 10.0.0.11: icmp_seq=5 ttl=64 time=0.103 ms

--- 10.0.0.11 ping statistics ---
5 packets transmitted, 5 received, 0% packet loss, time 4077ms
rtt min/avg/max/mdev = 0.087/0.202/0.500/0.157 ms</msg>
<status status="PASS" endtime="20180516 15:20:47.550" starttime="20180516 15:20:47.549"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:20:47.551" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:20:47.551" starttime="20180516 15:20:47.550"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${rc}</arg>
</arguments>
<msg timestamp="20180516 15:20:47.551" level="INFO">0</msg>
<status status="PASS" endtime="20180516 15:20:47.551" starttime="20180516 15:20:47.551"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:20:47.552" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:20:47.552" starttime="20180516 15:20:47.552"></status>
</kw>
<msg timestamp="20180516 15:20:47.552" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:20:47.552" starttime="20180516 15:20:47.552"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} in container ${container}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:20:47.553" starttime="20180516 15:20:47.553"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${container}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}***</arg>
</arguments>
<msg timestamp="20180516 15:20:47.554" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_node_1.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_node_1.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:20:47.554" starttime="20180516 15:20:47.553"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${container}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:20:47.554" starttime="20180516 15:20:47.554"></status>
</kw>
<msg timestamp="20180516 15:20:47.555" level="INFO">${out} = PING 10.0.0.11 (10.0.0.11) 56(84) bytes of data.
64 bytes from 10.0.0.11: icmp_seq=1 ttl=64 time=0.500 ms
64 bytes from 10.0.0.11: icmp_seq=2 ttl=64 time=0.222 ms
64 bytes from 10.0.0.11: icmp_seq=3 t...</msg>
<status status="PASS" endtime="20180516 15:20:47.555" starttime="20180516 15:20:42.928"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${out}</arg>
<arg>from ${ip}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:20:47.555" starttime="20180516 15:20:47.555"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${out}</arg>
<arg>100% packet loss</arg>
</arguments>
<status status="PASS" endtime="20180516 15:20:47.556" starttime="20180516 15:20:47.555"></status>
</kw>
<status status="PASS" endtime="20180516 15:20:47.556" starttime="20180516 15:20:42.927"></status>
</kw>
<kw type="teardown" name="TestTeardown">
<kw name="Make Datastore Snapshots" library="setup-teardown">
<arguments>
<arg>${TEST_NAME}_test_teardown</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tag}</arg>
</arguments>
<msg timestamp="20180516 15:20:47.557" level="INFO">Check Ping Agent1 -&gt; Agent2_test_teardown</msg>
<status status="PASS" endtime="20180516 15:20:47.557" starttime="20180516 15:20:47.557"></status>
</kw>
<kw name="Create Next Snapshot Prefix" library="setup-teardown">
<assign>
<var>${prefix}</var>
</assign>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>str(${snapshot_num}).zfill(3)</arg>
</arguments>
<assign>
<var>${prefix}</var>
</assign>
<msg timestamp="20180516 15:20:47.558" level="INFO">${prefix} = 028</msg>
<status status="PASS" endtime="20180516 15:20:47.558" starttime="20180516 15:20:47.558"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${snapshot_num}+1</arg>
</arguments>
<assign>
<var>${snapshot_num}</var>
</assign>
<msg timestamp="20180516 15:20:47.559" level="INFO">${snapshot_num} = 29</msg>
<status status="PASS" endtime="20180516 15:20:47.559" starttime="20180516 15:20:47.559"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${snapshot_num}</arg>
</arguments>
<msg timestamp="20180516 15:20:47.559" level="INFO">${snapshot_num} = 29</msg>
<status status="PASS" endtime="20180516 15:20:47.560" starttime="20180516 15:20:47.559"></status>
</kw>
<msg timestamp="20180516 15:20:47.560" level="INFO">${prefix} = 028</msg>
<status status="PASS" endtime="20180516 15:20:47.560" starttime="20180516 15:20:47.558"></status>
</kw>
<kw name="Take ETCD Snapshots" library="setup-teardown">
<arguments>
<arg>${prefix}_${tag}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tag}</arg>
</arguments>
<msg timestamp="20180516 15:20:47.561" level="INFO">028_Check Ping Agent1 -&gt; Agent2_test_teardown</msg>
<status status="PASS" endtime="20180516 15:20:47.561" starttime="20180516 15:20:47.561"></status>
</kw>
<kw name="Get ETCD Dump" library="setup-teardown">
<assign>
<var>${dump}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DOCKER_COMMAND} exec etcd etcdctl get --prefix="true" ""</arg>
</arguments>
<assign>
<var>${command}</var>
</assign>
<msg timestamp="20180516 15:20:47.562" level="INFO">${command} = sudo docker exec etcd etcdctl get --prefix="true" ""</msg>
<status status="PASS" endtime="20180516 15:20:47.562" starttime="20180516 15:20:47.561"></status>
</kw>
<kw name="Execute On Machine" library="ssh">
<doc>*Execute On Machine ${machine} sudo docker exec etcd etcdctl get --prefix="true" ""*</doc>
<arguments>
<arg>docker</arg>
<arg>${command}</arg>
<arg>log=false</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${log}</arg>
</arguments>
<msg timestamp="20180516 15:20:47.568" level="INFO">docker</msg>
<msg timestamp="20180516 15:20:47.569" level="INFO">sudo docker exec etcd etcdctl get --prefix="true" ""</msg>
<msg timestamp="20180516 15:20:47.569" level="INFO">false</msg>
<status status="PASS" endtime="20180516 15:20:47.569" starttime="20180516 15:20:47.568"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:20:47.569" starttime="20180516 15:20:47.569"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:20:47.570" level="INFO">${currdate} = 2018-05-16 15:20:47.569</msg>
<status status="PASS" endtime="20180516 15:20:47.570" starttime="20180516 15:20:47.569"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20180516 15:20:47.570" level="INFO">Executing command 'sudo docker exec etcd etcdctl get --prefix="true" ""'.</msg>
<msg timestamp="20180516 15:20:48.138" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:20:48.138" level="INFO">${out} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<msg timestamp="20180516 15:20:48.139" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20180516 15:20:48.139" starttime="20180516 15:20:47.570"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${out}</arg>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:20:48.139" level="INFO">/sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-containers","description":"Wire 2 VNF containers to the vpp switch","type":2,"elements":[{"container":"node_1","port_label":"node1_veth","etcd_vpp_switch_key":"agent_vpp_1","ipv4_addr":"10.0.0.10","type":3},{"container":"node_2","port_label":"node2_veth","etcd_vpp_switch_key":"agent_vpp_1","ipv4_addr":"10.0.0.11","type":3}]}
/sfc-controller/v1/SP
{"mtu":1500,"starting_vlan_id":5000,"default_static_route_weight":5,"dynamic_bridge_parms":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true},"static_bridge_parms":{"forward":true}}
/sfc-controller/v1/id/HE/agent_vpp_1
{"name":"agent_vpp_1"}
/sfc-controller/v1/id/SFC/two-sample-vnf-containers/node_1_node1_veth
{"sfc_name":"two-sample-vnf-containers","container":"node_1","port":"node1_veth","mac_addr_id":1,"veth_id":1}
/sfc-controller/v1/id/SFC/two-sample-vnf-containers/node_2_node2_veth
{"sfc_name":"two-sample-vnf-containers","container":"node_2","port":"node2_veth","mac_addr_id":2,"veth_id":2}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VNF_node_1_node1_veth
{"name":"IF_VETH_VNF_node_1_node1_veth","enabled":true,"phys_address":"02:00:00:00:00:01","mtu":1500,"host_if_name":"node1_veth","ip_addresses":["10.0.0.10/24"],"namespace":{"type":1,"microservice":"node_1"},"veth":{"peer_if_name":"IF_VETH_VSWITCH_node_1_node1_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VNF_node_2_node2_veth
{"name":"IF_VETH_VNF_node_2_node2_veth","enabled":true,"phys_address":"02:00:00:00:00:02","mtu":1500,"host_if_name":"node2_veth","ip_addresses":["10.0.0.11/24"],"namespace":{"type":1,"microservice":"node_2"},"veth":{"peer_if_name":"IF_VETH_VSWITCH_node_2_node2_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VSWITCH_node_1_node1_veth
{"name":"IF_VETH_VSWITCH_node_1_node1_veth","enabled":true,"mtu":1500,"host_if_name":"node_1_noeth_1","namespace":{"type":1,"microservice":"agent_vpp_1"},"veth":{"peer_if_name":"IF_VETH_VNF_node_1_node1_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VSWITCH_node_2_node2_veth
{"name":"IF_VETH_VSWITCH_node_2_node2_veth","enabled":true,"mtu":1500,"host_if_name":"node_2_noeth_2","namespace":{"type":1,"microservice":"agent_vpp_1"},"veth":{"peer_if_name":"IF_VETH_VNF_node_2_node2_veth"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/BD_INTERNAL_EW_L2FIB_agent_vpp_1
{"name":"BD_INTERNAL_EW_L2FIB_agent_vpp_1","forward":true}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/BD_INTERNAL_EW_agent_vpp_1
{"name":"BD_INTERNAL_EW_agent_vpp_1","flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true,"interfaces":[{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth"},{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth"}]}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/bd2
{
  "name": "bd2",
  "flood": true,
  "unknown_unicast_flood": true,
  "forward": true,
  "learn": true,
  "arp_termination": true,
  "interfaces": [
    { "name": "loop0" },{ "name": "loop1" }
  ]
}


/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth
{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","type":4,"enabled":true,"mtu":1500,"afpacket":{"host_if_name":"node_1_noeth_1"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth
{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","type":4,"enabled":true,"mtu":1500,"afpacket":{"host_if_name":"node_2_noeth_2"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_LOOPBACK_H_agent_vpp_1
{"name":"IF_LOOPBACK_H_agent_vpp_1","enabled":true,"phys_address":"02:00:00:AA:BB:00","mtu":1500,"ip_addresses":["6.0.0.100"]}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/loop0
{
  "name": "loop0",
  "type": 0,
  "enabled": true,
  "phys_address": "8a:f1:be:90:00:00",
  "mtu": 1500,
  "vrf": 0,
  "ip_addresses": [
    "20.1.1.1/24"
  ]
}


/vnf-agent/agent_vpp_1/vpp/config/v1/interface/loop1
{
  "name": "loop1",
  "type": 0,
  "enabled": true,
  "phys_address": "8a:f1:be:90:20:00",
  "mtu": 1500,
  "vrf": 0,
  "ip_addresses": [
    "30.1.1.1/24"
  ]
}


/vnf-agent/agent_vpp_1/vpp/status/v1/bd/BD_INTERNAL_EW_L2FIB_agent_vpp_1
{"index":2,"internal_name":"BD_INTERNAL_EW_L2FIB_agent_vpp_1","bvi_interface":"not_set","last_change":1526476631,"l2_params":{"forward":true}}
/vnf-agent/agent_vpp_1/vpp/status/v1/bd/BD_INTERNAL_EW_agent_vpp_1
{"index":1,"internal_name":"BD_INTERNAL_EW_agent_vpp_1","bvi_interface":"not_set","interface_count":2,"last_change":1526476631,"l2_params":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true},"interfaces":[{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","sw_if_index":2},{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","sw_if_index":3}]}
/vnf-agent/agent_vpp_1/vpp/status/v1/bd/bd2
{"index":3,"internal_name":"bd2","bvi_interface":"not_set","interface_count":2,"last_change":1526476768,"l2_params":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true,"arp_termination":true},"interfaces":[{"name":"loop0","sw_if_index":4},{"name":"loop1","sw_if_index":5}]}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth
{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","internal_name":"host-node_1_noeth_1","if_index":2,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:3e:fd:61:28","mtu":1500,"statistics":{"in_packets":20,"in_bytes":1552}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth
{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","internal_name":"host-node_2_noeth_2","if_index":3,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:42:98:22:08","mtu":1500,"statistics":{"in_packets":22,"in_bytes":1732}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_LOOPBACK_H_agent_vpp_1
{"name":"IF_LOOPBACK_H_agent_vpp_1","internal_name":"loop0","if_index":1,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:00:00:aa:bb:00","mtu":1500,"statistics":{}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/local0
{"name":"local0","internal_name":"local0","admin_status":2,"oper_status":2,"statistics":{}}
/vnf-agent/node_1/check/status/v1/agent
{"build_version":"v1.1-5-g55e9977","build_date":"2018-03-06T11:05+00:00","state":1,"start_time":1526476614,"last_change":1526476619,"last_update":1526476845,"commit_hash":"55e99770087087fa8e41a980a8b6257c80c93f4c"}
/vnf-agent/node_1/check/status/v1/plugin/etcdv3
{"state":1,"last_change":1526476619,"last_update":1526476845}
/vnf-agent/node_1/check/status/v1/plugin/kafka
{"state":1,"last_change":1526476619,"last_update":1526476845}
/vnf-agent/node_2/check/status/v1/agent
{"build_version":"v1.1-5-g55e9977","build_date":"2018-03-06T11:05+00:00","state":1,"start_time":1526476623,"last_change":1526476628,"last_update":1526476843,"commit_hash":"55e99770087087fa8e41a980a8b6257c80c93f4c"}
/vnf-agent/node_2/check/status/v1/plugin/etcdv3
{"state":1,"last_change":1526476628,"last_update":1526476843}
/vnf-agent/node_2/check/status/v1/plugin/kafka
{"state":1,"last_change":1526476628,"last_update":1526476843}</msg>
<msg timestamp="20180516 15:20:48.139" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:20:48.139" starttime="20180516 15:20:48.139"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:20:48.140" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:20:48.140" starttime="20180516 15:20:48.140"></status>
</kw>
<msg timestamp="20180516 15:20:48.140" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:20:48.140" starttime="20180516 15:20:48.140"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} on ${machine}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:20:48.141" starttime="20180516 15:20:48.141"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${log}'=='true'</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:20:48.142" starttime="20180516 15:20:48.142"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:20:48.142" starttime="20180516 15:20:48.142"></status>
</kw>
<msg timestamp="20180516 15:20:48.143" level="INFO">${out} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<status status="PASS" endtime="20180516 15:20:48.143" starttime="20180516 15:20:47.568"></status>
</kw>
<msg timestamp="20180516 15:20:48.143" level="INFO">${dump} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<status status="PASS" endtime="20180516 15:20:48.143" starttime="20180516 15:20:47.561"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/etcd_dump-${tag}.txt</arg>
<arg>${dump}</arg>
</arguments>
<msg timestamp="20180516 15:20:48.144" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/etcd_dump-028_Check Ping Agent1 -&gt; Agent2_test_teardown.txt"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/etcd_dump-028_Check Ping Agent1 -&gt; Agent2_test_teardown.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:20:48.145" starttime="20180516 15:20:48.143"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${dump}</arg>
<arg>/error/</arg>
</arguments>
<assign>
<var>${errors}</var>
</assign>
<msg timestamp="20180516 15:20:48.146" level="INFO">0 out of 98 lines matched</msg>
<msg timestamp="20180516 15:20:48.146" level="INFO">${errors} = </msg>
<status status="PASS" endtime="20180516 15:20:48.146" starttime="20180516 15:20:48.145"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${errors}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${errors}</arg>
</arguments>
<msg timestamp="20180516 15:20:48.147" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:20:48.147" starttime="20180516 15:20:48.147"></status>
</kw>
<msg timestamp="20180516 15:20:48.147" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:20:48.147" starttime="20180516 15:20:48.147"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>Errors detected in keys: ${errors}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:20:48.148" starttime="20180516 15:20:48.148"></status>
</kw>
<status status="PASS" endtime="20180516 15:20:48.148" starttime="20180516 15:20:47.560"></status>
</kw>
<status status="PASS" endtime="20180516 15:20:48.148" starttime="20180516 15:20:47.556"></status>
</kw>
<status status="PASS" endtime="20180516 15:20:48.148" starttime="20180516 15:20:47.556"></status>
</kw>
<status status="PASS" endtime="20180516 15:20:48.148" critical="yes" starttime="20180516 15:20:42.301"></status>
</test>
<test id="s1-t14" name="Check Ping Agent2 -&gt; Agent1">
<kw type="setup" name="TestSetup">
<kw name="Make Datastore Snapshots" library="setup-teardown">
<arguments>
<arg>${TEST_NAME}_test_setup</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tag}</arg>
</arguments>
<msg timestamp="20180516 15:20:48.157" level="INFO">Check Ping Agent2 -&gt; Agent1_test_setup</msg>
<status status="PASS" endtime="20180516 15:20:48.157" starttime="20180516 15:20:48.157"></status>
</kw>
<kw name="Create Next Snapshot Prefix" library="setup-teardown">
<assign>
<var>${prefix}</var>
</assign>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>str(${snapshot_num}).zfill(3)</arg>
</arguments>
<assign>
<var>${prefix}</var>
</assign>
<msg timestamp="20180516 15:20:48.158" level="INFO">${prefix} = 029</msg>
<status status="PASS" endtime="20180516 15:20:48.158" starttime="20180516 15:20:48.158"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${snapshot_num}+1</arg>
</arguments>
<assign>
<var>${snapshot_num}</var>
</assign>
<msg timestamp="20180516 15:20:48.159" level="INFO">${snapshot_num} = 30</msg>
<status status="PASS" endtime="20180516 15:20:48.159" starttime="20180516 15:20:48.158"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${snapshot_num}</arg>
</arguments>
<msg timestamp="20180516 15:20:48.164" level="INFO">${snapshot_num} = 30</msg>
<status status="PASS" endtime="20180516 15:20:48.164" starttime="20180516 15:20:48.159"></status>
</kw>
<msg timestamp="20180516 15:20:48.165" level="INFO">${prefix} = 029</msg>
<status status="PASS" endtime="20180516 15:20:48.165" starttime="20180516 15:20:48.157"></status>
</kw>
<kw name="Take ETCD Snapshots" library="setup-teardown">
<arguments>
<arg>${prefix}_${tag}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tag}</arg>
</arguments>
<msg timestamp="20180516 15:20:48.166" level="INFO">029_Check Ping Agent2 -&gt; Agent1_test_setup</msg>
<status status="PASS" endtime="20180516 15:20:48.166" starttime="20180516 15:20:48.166"></status>
</kw>
<kw name="Get ETCD Dump" library="setup-teardown">
<assign>
<var>${dump}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DOCKER_COMMAND} exec etcd etcdctl get --prefix="true" ""</arg>
</arguments>
<assign>
<var>${command}</var>
</assign>
<msg timestamp="20180516 15:20:48.169" level="INFO">${command} = sudo docker exec etcd etcdctl get --prefix="true" ""</msg>
<status status="PASS" endtime="20180516 15:20:48.169" starttime="20180516 15:20:48.167"></status>
</kw>
<kw name="Execute On Machine" library="ssh">
<doc>*Execute On Machine ${machine} sudo docker exec etcd etcdctl get --prefix="true" ""*</doc>
<arguments>
<arg>docker</arg>
<arg>${command}</arg>
<arg>log=false</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${log}</arg>
</arguments>
<msg timestamp="20180516 15:20:48.183" level="INFO">docker</msg>
<msg timestamp="20180516 15:20:48.183" level="INFO">sudo docker exec etcd etcdctl get --prefix="true" ""</msg>
<msg timestamp="20180516 15:20:48.183" level="INFO">false</msg>
<status status="PASS" endtime="20180516 15:20:48.183" starttime="20180516 15:20:48.183"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:20:48.184" starttime="20180516 15:20:48.184"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:20:48.184" level="INFO">${currdate} = 2018-05-16 15:20:48.184</msg>
<status status="PASS" endtime="20180516 15:20:48.184" starttime="20180516 15:20:48.184"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20180516 15:20:48.185" level="INFO">Executing command 'sudo docker exec etcd etcdctl get --prefix="true" ""'.</msg>
<msg timestamp="20180516 15:20:48.772" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:20:48.772" level="INFO">${out} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<msg timestamp="20180516 15:20:48.772" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20180516 15:20:48.772" starttime="20180516 15:20:48.184"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${out}</arg>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:20:48.773" level="INFO">/sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-containers","description":"Wire 2 VNF containers to the vpp switch","type":2,"elements":[{"container":"node_1","port_label":"node1_veth","etcd_vpp_switch_key":"agent_vpp_1","ipv4_addr":"10.0.0.10","type":3},{"container":"node_2","port_label":"node2_veth","etcd_vpp_switch_key":"agent_vpp_1","ipv4_addr":"10.0.0.11","type":3}]}
/sfc-controller/v1/SP
{"mtu":1500,"starting_vlan_id":5000,"default_static_route_weight":5,"dynamic_bridge_parms":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true},"static_bridge_parms":{"forward":true}}
/sfc-controller/v1/id/HE/agent_vpp_1
{"name":"agent_vpp_1"}
/sfc-controller/v1/id/SFC/two-sample-vnf-containers/node_1_node1_veth
{"sfc_name":"two-sample-vnf-containers","container":"node_1","port":"node1_veth","mac_addr_id":1,"veth_id":1}
/sfc-controller/v1/id/SFC/two-sample-vnf-containers/node_2_node2_veth
{"sfc_name":"two-sample-vnf-containers","container":"node_2","port":"node2_veth","mac_addr_id":2,"veth_id":2}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VNF_node_1_node1_veth
{"name":"IF_VETH_VNF_node_1_node1_veth","enabled":true,"phys_address":"02:00:00:00:00:01","mtu":1500,"host_if_name":"node1_veth","ip_addresses":["10.0.0.10/24"],"namespace":{"type":1,"microservice":"node_1"},"veth":{"peer_if_name":"IF_VETH_VSWITCH_node_1_node1_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VNF_node_2_node2_veth
{"name":"IF_VETH_VNF_node_2_node2_veth","enabled":true,"phys_address":"02:00:00:00:00:02","mtu":1500,"host_if_name":"node2_veth","ip_addresses":["10.0.0.11/24"],"namespace":{"type":1,"microservice":"node_2"},"veth":{"peer_if_name":"IF_VETH_VSWITCH_node_2_node2_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VSWITCH_node_1_node1_veth
{"name":"IF_VETH_VSWITCH_node_1_node1_veth","enabled":true,"mtu":1500,"host_if_name":"node_1_noeth_1","namespace":{"type":1,"microservice":"agent_vpp_1"},"veth":{"peer_if_name":"IF_VETH_VNF_node_1_node1_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VSWITCH_node_2_node2_veth
{"name":"IF_VETH_VSWITCH_node_2_node2_veth","enabled":true,"mtu":1500,"host_if_name":"node_2_noeth_2","namespace":{"type":1,"microservice":"agent_vpp_1"},"veth":{"peer_if_name":"IF_VETH_VNF_node_2_node2_veth"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/BD_INTERNAL_EW_L2FIB_agent_vpp_1
{"name":"BD_INTERNAL_EW_L2FIB_agent_vpp_1","forward":true}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/BD_INTERNAL_EW_agent_vpp_1
{"name":"BD_INTERNAL_EW_agent_vpp_1","flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true,"interfaces":[{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth"},{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth"}]}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/bd2
{
  "name": "bd2",
  "flood": true,
  "unknown_unicast_flood": true,
  "forward": true,
  "learn": true,
  "arp_termination": true,
  "interfaces": [
    { "name": "loop0" },{ "name": "loop1" }
  ]
}


/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth
{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","type":4,"enabled":true,"mtu":1500,"afpacket":{"host_if_name":"node_1_noeth_1"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth
{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","type":4,"enabled":true,"mtu":1500,"afpacket":{"host_if_name":"node_2_noeth_2"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_LOOPBACK_H_agent_vpp_1
{"name":"IF_LOOPBACK_H_agent_vpp_1","enabled":true,"phys_address":"02:00:00:AA:BB:00","mtu":1500,"ip_addresses":["6.0.0.100"]}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/loop0
{
  "name": "loop0",
  "type": 0,
  "enabled": true,
  "phys_address": "8a:f1:be:90:00:00",
  "mtu": 1500,
  "vrf": 0,
  "ip_addresses": [
    "20.1.1.1/24"
  ]
}


/vnf-agent/agent_vpp_1/vpp/config/v1/interface/loop1
{
  "name": "loop1",
  "type": 0,
  "enabled": true,
  "phys_address": "8a:f1:be:90:20:00",
  "mtu": 1500,
  "vrf": 0,
  "ip_addresses": [
    "30.1.1.1/24"
  ]
}


/vnf-agent/agent_vpp_1/vpp/status/v1/bd/BD_INTERNAL_EW_L2FIB_agent_vpp_1
{"index":2,"internal_name":"BD_INTERNAL_EW_L2FIB_agent_vpp_1","bvi_interface":"not_set","last_change":1526476631,"l2_params":{"forward":true}}
/vnf-agent/agent_vpp_1/vpp/status/v1/bd/BD_INTERNAL_EW_agent_vpp_1
{"index":1,"internal_name":"BD_INTERNAL_EW_agent_vpp_1","bvi_interface":"not_set","interface_count":2,"last_change":1526476631,"l2_params":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true},"interfaces":[{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","sw_if_index":2},{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","sw_if_index":3}]}
/vnf-agent/agent_vpp_1/vpp/status/v1/bd/bd2
{"index":3,"internal_name":"bd2","bvi_interface":"not_set","interface_count":2,"last_change":1526476768,"l2_params":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true,"arp_termination":true},"interfaces":[{"name":"loop0","sw_if_index":4},{"name":"loop1","sw_if_index":5}]}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth
{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","internal_name":"host-node_1_noeth_1","if_index":2,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:3e:fd:61:28","mtu":1500,"statistics":{"in_packets":20,"in_bytes":1552}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth
{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","internal_name":"host-node_2_noeth_2","if_index":3,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:42:98:22:08","mtu":1500,"statistics":{"in_packets":22,"in_bytes":1732}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_LOOPBACK_H_agent_vpp_1
{"name":"IF_LOOPBACK_H_agent_vpp_1","internal_name":"loop0","if_index":1,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:00:00:aa:bb:00","mtu":1500,"statistics":{}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/local0
{"name":"local0","internal_name":"local0","admin_status":2,"oper_status":2,"statistics":{}}
/vnf-agent/node_1/check/status/v1/agent
{"build_version":"v1.1-5-g55e9977","build_date":"2018-03-06T11:05+00:00","state":1,"start_time":1526476614,"last_change":1526476619,"last_update":1526476845,"commit_hash":"55e99770087087fa8e41a980a8b6257c80c93f4c"}
/vnf-agent/node_1/check/status/v1/plugin/etcdv3
{"state":1,"last_change":1526476619,"last_update":1526476845}
/vnf-agent/node_1/check/status/v1/plugin/kafka
{"state":1,"last_change":1526476619,"last_update":1526476845}
/vnf-agent/node_2/check/status/v1/agent
{"build_version":"v1.1-5-g55e9977","build_date":"2018-03-06T11:05+00:00","state":1,"start_time":1526476623,"last_change":1526476628,"last_update":1526476843,"commit_hash":"55e99770087087fa8e41a980a8b6257c80c93f4c"}
/vnf-agent/node_2/check/status/v1/plugin/etcdv3
{"state":1,"last_change":1526476628,"last_update":1526476843}
/vnf-agent/node_2/check/status/v1/plugin/kafka
{"state":1,"last_change":1526476628,"last_update":1526476843}</msg>
<msg timestamp="20180516 15:20:48.773" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:20:48.773" starttime="20180516 15:20:48.773"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:20:48.774" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:20:48.774" starttime="20180516 15:20:48.774"></status>
</kw>
<msg timestamp="20180516 15:20:48.774" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:20:48.774" starttime="20180516 15:20:48.774"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} on ${machine}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:20:48.775" starttime="20180516 15:20:48.774"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${log}'=='true'</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:20:48.775" starttime="20180516 15:20:48.775"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:20:48.776" starttime="20180516 15:20:48.776"></status>
</kw>
<msg timestamp="20180516 15:20:48.776" level="INFO">${out} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<status status="PASS" endtime="20180516 15:20:48.776" starttime="20180516 15:20:48.182"></status>
</kw>
<msg timestamp="20180516 15:20:48.776" level="INFO">${dump} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<status status="PASS" endtime="20180516 15:20:48.776" starttime="20180516 15:20:48.166"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/etcd_dump-${tag}.txt</arg>
<arg>${dump}</arg>
</arguments>
<msg timestamp="20180516 15:20:48.777" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/etcd_dump-029_Check Ping Agent2 -&gt; Agent1_test_setup.txt"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/etcd_dump-029_Check Ping Agent2 -&gt; Agent1_test_setup.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:20:48.777" starttime="20180516 15:20:48.777"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${dump}</arg>
<arg>/error/</arg>
</arguments>
<assign>
<var>${errors}</var>
</assign>
<msg timestamp="20180516 15:20:48.778" level="INFO">0 out of 98 lines matched</msg>
<msg timestamp="20180516 15:20:48.778" level="INFO">${errors} = </msg>
<status status="PASS" endtime="20180516 15:20:48.778" starttime="20180516 15:20:48.778"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${errors}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${errors}</arg>
</arguments>
<msg timestamp="20180516 15:20:48.779" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:20:48.779" starttime="20180516 15:20:48.779"></status>
</kw>
<msg timestamp="20180516 15:20:48.779" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:20:48.779" starttime="20180516 15:20:48.779"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>Errors detected in keys: ${errors}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:20:48.780" starttime="20180516 15:20:48.779"></status>
</kw>
<status status="PASS" endtime="20180516 15:20:48.780" starttime="20180516 15:20:48.165"></status>
</kw>
<status status="PASS" endtime="20180516 15:20:48.780" starttime="20180516 15:20:48.152"></status>
</kw>
<status status="PASS" endtime="20180516 15:20:48.780" starttime="20180516 15:20:48.151"></status>
</kw>
<kw name="linux: Check Ping" library="linux">
<arguments>
<arg>node_2</arg>
<arg>10.0.0.10</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${ip}</arg>
</arguments>
<msg timestamp="20180516 15:20:48.781" level="INFO">node_2</msg>
<msg timestamp="20180516 15:20:48.781" level="INFO">10.0.0.10</msg>
<status status="PASS" endtime="20180516 15:20:48.781" starttime="20180516 15:20:48.781"></status>
</kw>
<kw name="Execute In Container" library="docker">
<arguments>
<arg>${node}</arg>
<arg>ping -c 5 ${ip}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${container}</arg>
<arg>${command}</arg>
</arguments>
<msg timestamp="20180516 15:20:48.782" level="INFO">node_2</msg>
<msg timestamp="20180516 15:20:48.782" level="INFO">ping -c 5 10.0.0.10</msg>
<status status="PASS" endtime="20180516 15:20:48.783" starttime="20180516 15:20:48.782"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>docker</arg>
</arguments>
<status status="PASS" endtime="20180516 15:20:48.783" starttime="20180516 15:20:48.783"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:20:48.783" level="INFO">${currdate} = 2018-05-16 15:20:48.783</msg>
<status status="PASS" endtime="20180516 15:20:48.783" starttime="20180516 15:20:48.783"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DOCKER_COMMAND} exec ${container} ${command}</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20180516 15:20:48.784" level="INFO">Executing command 'sudo docker exec node_2 ping -c 5 10.0.0.10'.</msg>
<msg timestamp="20180516 15:20:53.275" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:20:53.276" level="INFO">${out} = PING 10.0.0.10 (10.0.0.10) 56(84) bytes of data.
64 bytes from 10.0.0.10: icmp_seq=1 ttl=64 time=0.251 ms
64 bytes from 10.0.0.10: icmp_seq=2 ttl=64 time=0.166 ms
64 bytes from 10.0.0.10: icmp_seq=3 t...</msg>
<msg timestamp="20180516 15:20:53.276" level="INFO">${stderr} = </msg>
<msg timestamp="20180516 15:20:53.276" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20180516 15:20:53.276" starttime="20180516 15:20:48.784"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:20:53.276" level="INFO">PING 10.0.0.10 (10.0.0.10) 56(84) bytes of data.
64 bytes from 10.0.0.10: icmp_seq=1 ttl=64 time=0.251 ms
64 bytes from 10.0.0.10: icmp_seq=2 ttl=64 time=0.166 ms
64 bytes from 10.0.0.10: icmp_seq=3 ttl=64 time=0.375 ms
64 bytes from 10.0.0.10: icmp_seq=4 ttl=64 time=0.195 ms
64 bytes from 10.0.0.10: icmp_seq=5 ttl=64 time=0.174 ms

--- 10.0.0.10 ping statistics ---
5 packets transmitted, 5 received, 0% packet loss, time 4031ms
rtt min/avg/max/mdev = 0.166/0.232/0.375/0.077 ms</msg>
<status status="PASS" endtime="20180516 15:20:53.277" starttime="20180516 15:20:53.276"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:20:53.277" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:20:53.277" starttime="20180516 15:20:53.277"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${rc}</arg>
</arguments>
<msg timestamp="20180516 15:20:53.277" level="INFO">0</msg>
<status status="PASS" endtime="20180516 15:20:53.278" starttime="20180516 15:20:53.277"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:20:53.279" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:20:53.279" starttime="20180516 15:20:53.278"></status>
</kw>
<msg timestamp="20180516 15:20:53.279" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:20:53.279" starttime="20180516 15:20:53.278"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} in container ${container}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:20:53.280" starttime="20180516 15:20:53.280"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${container}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}***</arg>
</arguments>
<msg timestamp="20180516 15:20:53.281" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_node_2.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_node_2.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:20:53.281" starttime="20180516 15:20:53.280"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${container}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:20:53.281" starttime="20180516 15:20:53.281"></status>
</kw>
<msg timestamp="20180516 15:20:53.282" level="INFO">${out} = PING 10.0.0.10 (10.0.0.10) 56(84) bytes of data.
64 bytes from 10.0.0.10: icmp_seq=1 ttl=64 time=0.251 ms
64 bytes from 10.0.0.10: icmp_seq=2 ttl=64 time=0.166 ms
64 bytes from 10.0.0.10: icmp_seq=3 t...</msg>
<status status="PASS" endtime="20180516 15:20:53.282" starttime="20180516 15:20:48.781"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${out}</arg>
<arg>from ${ip}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:20:53.282" starttime="20180516 15:20:53.282"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${out}</arg>
<arg>100% packet loss</arg>
</arguments>
<status status="PASS" endtime="20180516 15:20:53.283" starttime="20180516 15:20:53.282"></status>
</kw>
<status status="PASS" endtime="20180516 15:20:53.283" starttime="20180516 15:20:48.781"></status>
</kw>
<kw type="teardown" name="TestTeardown">
<kw name="Make Datastore Snapshots" library="setup-teardown">
<arguments>
<arg>${TEST_NAME}_test_teardown</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tag}</arg>
</arguments>
<msg timestamp="20180516 15:20:53.284" level="INFO">Check Ping Agent2 -&gt; Agent1_test_teardown</msg>
<status status="PASS" endtime="20180516 15:20:53.284" starttime="20180516 15:20:53.284"></status>
</kw>
<kw name="Create Next Snapshot Prefix" library="setup-teardown">
<assign>
<var>${prefix}</var>
</assign>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>str(${snapshot_num}).zfill(3)</arg>
</arguments>
<assign>
<var>${prefix}</var>
</assign>
<msg timestamp="20180516 15:20:53.285" level="INFO">${prefix} = 030</msg>
<status status="PASS" endtime="20180516 15:20:53.285" starttime="20180516 15:20:53.285"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${snapshot_num}+1</arg>
</arguments>
<assign>
<var>${snapshot_num}</var>
</assign>
<msg timestamp="20180516 15:20:53.286" level="INFO">${snapshot_num} = 31</msg>
<status status="PASS" endtime="20180516 15:20:53.286" starttime="20180516 15:20:53.285"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${snapshot_num}</arg>
</arguments>
<msg timestamp="20180516 15:20:53.286" level="INFO">${snapshot_num} = 31</msg>
<status status="PASS" endtime="20180516 15:20:53.286" starttime="20180516 15:20:53.286"></status>
</kw>
<msg timestamp="20180516 15:20:53.286" level="INFO">${prefix} = 030</msg>
<status status="PASS" endtime="20180516 15:20:53.286" starttime="20180516 15:20:53.284"></status>
</kw>
<kw name="Take ETCD Snapshots" library="setup-teardown">
<arguments>
<arg>${prefix}_${tag}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tag}</arg>
</arguments>
<msg timestamp="20180516 15:20:53.287" level="INFO">030_Check Ping Agent2 -&gt; Agent1_test_teardown</msg>
<status status="PASS" endtime="20180516 15:20:53.287" starttime="20180516 15:20:53.287"></status>
</kw>
<kw name="Get ETCD Dump" library="setup-teardown">
<assign>
<var>${dump}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DOCKER_COMMAND} exec etcd etcdctl get --prefix="true" ""</arg>
</arguments>
<assign>
<var>${command}</var>
</assign>
<msg timestamp="20180516 15:20:53.288" level="INFO">${command} = sudo docker exec etcd etcdctl get --prefix="true" ""</msg>
<status status="PASS" endtime="20180516 15:20:53.289" starttime="20180516 15:20:53.288"></status>
</kw>
<kw name="Execute On Machine" library="ssh">
<doc>*Execute On Machine ${machine} sudo docker exec etcd etcdctl get --prefix="true" ""*</doc>
<arguments>
<arg>docker</arg>
<arg>${command}</arg>
<arg>log=false</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${log}</arg>
</arguments>
<msg timestamp="20180516 15:20:53.295" level="INFO">docker</msg>
<msg timestamp="20180516 15:20:53.295" level="INFO">sudo docker exec etcd etcdctl get --prefix="true" ""</msg>
<msg timestamp="20180516 15:20:53.296" level="INFO">false</msg>
<status status="PASS" endtime="20180516 15:20:53.296" starttime="20180516 15:20:53.295"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:20:53.296" starttime="20180516 15:20:53.296"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:20:53.297" level="INFO">${currdate} = 2018-05-16 15:20:53.297</msg>
<status status="PASS" endtime="20180516 15:20:53.297" starttime="20180516 15:20:53.297"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20180516 15:20:53.298" level="INFO">Executing command 'sudo docker exec etcd etcdctl get --prefix="true" ""'.</msg>
<msg timestamp="20180516 15:20:53.868" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:20:53.868" level="INFO">${out} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<msg timestamp="20180516 15:20:53.868" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20180516 15:20:53.868" starttime="20180516 15:20:53.297"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${out}</arg>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:20:53.869" level="INFO">/sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-containers","description":"Wire 2 VNF containers to the vpp switch","type":2,"elements":[{"container":"node_1","port_label":"node1_veth","etcd_vpp_switch_key":"agent_vpp_1","ipv4_addr":"10.0.0.10","type":3},{"container":"node_2","port_label":"node2_veth","etcd_vpp_switch_key":"agent_vpp_1","ipv4_addr":"10.0.0.11","type":3}]}
/sfc-controller/v1/SP
{"mtu":1500,"starting_vlan_id":5000,"default_static_route_weight":5,"dynamic_bridge_parms":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true},"static_bridge_parms":{"forward":true}}
/sfc-controller/v1/id/HE/agent_vpp_1
{"name":"agent_vpp_1"}
/sfc-controller/v1/id/SFC/two-sample-vnf-containers/node_1_node1_veth
{"sfc_name":"two-sample-vnf-containers","container":"node_1","port":"node1_veth","mac_addr_id":1,"veth_id":1}
/sfc-controller/v1/id/SFC/two-sample-vnf-containers/node_2_node2_veth
{"sfc_name":"two-sample-vnf-containers","container":"node_2","port":"node2_veth","mac_addr_id":2,"veth_id":2}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VNF_node_1_node1_veth
{"name":"IF_VETH_VNF_node_1_node1_veth","enabled":true,"phys_address":"02:00:00:00:00:01","mtu":1500,"host_if_name":"node1_veth","ip_addresses":["10.0.0.10/24"],"namespace":{"type":1,"microservice":"node_1"},"veth":{"peer_if_name":"IF_VETH_VSWITCH_node_1_node1_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VNF_node_2_node2_veth
{"name":"IF_VETH_VNF_node_2_node2_veth","enabled":true,"phys_address":"02:00:00:00:00:02","mtu":1500,"host_if_name":"node2_veth","ip_addresses":["10.0.0.11/24"],"namespace":{"type":1,"microservice":"node_2"},"veth":{"peer_if_name":"IF_VETH_VSWITCH_node_2_node2_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VSWITCH_node_1_node1_veth
{"name":"IF_VETH_VSWITCH_node_1_node1_veth","enabled":true,"mtu":1500,"host_if_name":"node_1_noeth_1","namespace":{"type":1,"microservice":"agent_vpp_1"},"veth":{"peer_if_name":"IF_VETH_VNF_node_1_node1_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VSWITCH_node_2_node2_veth
{"name":"IF_VETH_VSWITCH_node_2_node2_veth","enabled":true,"mtu":1500,"host_if_name":"node_2_noeth_2","namespace":{"type":1,"microservice":"agent_vpp_1"},"veth":{"peer_if_name":"IF_VETH_VNF_node_2_node2_veth"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/BD_INTERNAL_EW_L2FIB_agent_vpp_1
{"name":"BD_INTERNAL_EW_L2FIB_agent_vpp_1","forward":true}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/BD_INTERNAL_EW_agent_vpp_1
{"name":"BD_INTERNAL_EW_agent_vpp_1","flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true,"interfaces":[{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth"},{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth"}]}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/bd2
{
  "name": "bd2",
  "flood": true,
  "unknown_unicast_flood": true,
  "forward": true,
  "learn": true,
  "arp_termination": true,
  "interfaces": [
    { "name": "loop0" },{ "name": "loop1" }
  ]
}


/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth
{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","type":4,"enabled":true,"mtu":1500,"afpacket":{"host_if_name":"node_1_noeth_1"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth
{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","type":4,"enabled":true,"mtu":1500,"afpacket":{"host_if_name":"node_2_noeth_2"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_LOOPBACK_H_agent_vpp_1
{"name":"IF_LOOPBACK_H_agent_vpp_1","enabled":true,"phys_address":"02:00:00:AA:BB:00","mtu":1500,"ip_addresses":["6.0.0.100"]}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/loop0
{
  "name": "loop0",
  "type": 0,
  "enabled": true,
  "phys_address": "8a:f1:be:90:00:00",
  "mtu": 1500,
  "vrf": 0,
  "ip_addresses": [
    "20.1.1.1/24"
  ]
}


/vnf-agent/agent_vpp_1/vpp/config/v1/interface/loop1
{
  "name": "loop1",
  "type": 0,
  "enabled": true,
  "phys_address": "8a:f1:be:90:20:00",
  "mtu": 1500,
  "vrf": 0,
  "ip_addresses": [
    "30.1.1.1/24"
  ]
}


/vnf-agent/agent_vpp_1/vpp/status/v1/bd/BD_INTERNAL_EW_L2FIB_agent_vpp_1
{"index":2,"internal_name":"BD_INTERNAL_EW_L2FIB_agent_vpp_1","bvi_interface":"not_set","last_change":1526476631,"l2_params":{"forward":true}}
/vnf-agent/agent_vpp_1/vpp/status/v1/bd/BD_INTERNAL_EW_agent_vpp_1
{"index":1,"internal_name":"BD_INTERNAL_EW_agent_vpp_1","bvi_interface":"not_set","interface_count":2,"last_change":1526476631,"l2_params":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true},"interfaces":[{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","sw_if_index":2},{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","sw_if_index":3}]}
/vnf-agent/agent_vpp_1/vpp/status/v1/bd/bd2
{"index":3,"internal_name":"bd2","bvi_interface":"not_set","interface_count":2,"last_change":1526476768,"l2_params":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true,"arp_termination":true},"interfaces":[{"name":"loop0","sw_if_index":4},{"name":"loop1","sw_if_index":5}]}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth
{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","internal_name":"host-node_1_noeth_1","if_index":2,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:3e:fd:61:28","mtu":1500,"statistics":{"in_packets":20,"in_bytes":1552}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth
{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","internal_name":"host-node_2_noeth_2","if_index":3,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:42:98:22:08","mtu":1500,"statistics":{"in_packets":22,"in_bytes":1732}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_LOOPBACK_H_agent_vpp_1
{"name":"IF_LOOPBACK_H_agent_vpp_1","internal_name":"loop0","if_index":1,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:00:00:aa:bb:00","mtu":1500,"statistics":{}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/local0
{"name":"local0","internal_name":"local0","admin_status":2,"oper_status":2,"statistics":{}}
/vnf-agent/node_1/check/status/v1/agent
{"build_version":"v1.1-5-g55e9977","build_date":"2018-03-06T11:05+00:00","state":1,"start_time":1526476614,"last_change":1526476619,"last_update":1526476845,"commit_hash":"55e99770087087fa8e41a980a8b6257c80c93f4c"}
/vnf-agent/node_1/check/status/v1/plugin/etcdv3
{"state":1,"last_change":1526476619,"last_update":1526476845}
/vnf-agent/node_1/check/status/v1/plugin/kafka
{"state":1,"last_change":1526476619,"last_update":1526476845}
/vnf-agent/node_2/check/status/v1/agent
{"build_version":"v1.1-5-g55e9977","build_date":"2018-03-06T11:05+00:00","state":1,"start_time":1526476623,"last_change":1526476628,"last_update":1526476853,"commit_hash":"55e99770087087fa8e41a980a8b6257c80c93f4c"}
/vnf-agent/node_2/check/status/v1/plugin/etcdv3
{"state":1,"last_change":1526476628,"last_update":1526476853}
/vnf-agent/node_2/check/status/v1/plugin/kafka
{"state":1,"last_change":1526476628,"last_update":1526476853}</msg>
<msg timestamp="20180516 15:20:53.869" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:20:53.869" starttime="20180516 15:20:53.868"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:20:53.870" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:20:53.870" starttime="20180516 15:20:53.870"></status>
</kw>
<msg timestamp="20180516 15:20:53.870" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:20:53.870" starttime="20180516 15:20:53.869"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} on ${machine}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:20:53.870" starttime="20180516 15:20:53.870"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${log}'=='true'</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:20:53.871" starttime="20180516 15:20:53.871"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:20:53.871" starttime="20180516 15:20:53.871"></status>
</kw>
<msg timestamp="20180516 15:20:53.872" level="INFO">${out} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<status status="PASS" endtime="20180516 15:20:53.872" starttime="20180516 15:20:53.294"></status>
</kw>
<msg timestamp="20180516 15:20:53.872" level="INFO">${dump} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<status status="PASS" endtime="20180516 15:20:53.872" starttime="20180516 15:20:53.288"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/etcd_dump-${tag}.txt</arg>
<arg>${dump}</arg>
</arguments>
<msg timestamp="20180516 15:20:53.872" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/etcd_dump-030_Check Ping Agent2 -&gt; Agent1_test_teardown.txt"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/etcd_dump-030_Check Ping Agent2 -&gt; Agent1_test_teardown.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:20:53.872" starttime="20180516 15:20:53.872"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${dump}</arg>
<arg>/error/</arg>
</arguments>
<assign>
<var>${errors}</var>
</assign>
<msg timestamp="20180516 15:20:53.873" level="INFO">0 out of 98 lines matched</msg>
<msg timestamp="20180516 15:20:53.873" level="INFO">${errors} = </msg>
<status status="PASS" endtime="20180516 15:20:53.873" starttime="20180516 15:20:53.873"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${errors}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${errors}</arg>
</arguments>
<msg timestamp="20180516 15:20:53.875" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:20:53.875" starttime="20180516 15:20:53.874"></status>
</kw>
<msg timestamp="20180516 15:20:53.875" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:20:53.875" starttime="20180516 15:20:53.873"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>Errors detected in keys: ${errors}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:20:53.876" starttime="20180516 15:20:53.875"></status>
</kw>
<status status="PASS" endtime="20180516 15:20:53.876" starttime="20180516 15:20:53.287"></status>
</kw>
<status status="PASS" endtime="20180516 15:20:53.876" starttime="20180516 15:20:53.283"></status>
</kw>
<status status="PASS" endtime="20180516 15:20:53.876" starttime="20180516 15:20:53.283"></status>
</kw>
<status status="PASS" endtime="20180516 15:20:53.876" critical="yes" starttime="20180516 15:20:48.149"></status>
</test>
<test id="s1-t15" name="Ping Loop0 -&gt; Loop1">
<kw type="setup" name="TestSetup">
<kw name="Make Datastore Snapshots" library="setup-teardown">
<arguments>
<arg>${TEST_NAME}_test_setup</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tag}</arg>
</arguments>
<msg timestamp="20180516 15:20:53.878" level="INFO">Ping Loop0 -&gt; Loop1_test_setup</msg>
<status status="PASS" endtime="20180516 15:20:53.878" starttime="20180516 15:20:53.878"></status>
</kw>
<kw name="Create Next Snapshot Prefix" library="setup-teardown">
<assign>
<var>${prefix}</var>
</assign>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>str(${snapshot_num}).zfill(3)</arg>
</arguments>
<assign>
<var>${prefix}</var>
</assign>
<msg timestamp="20180516 15:20:53.879" level="INFO">${prefix} = 031</msg>
<status status="PASS" endtime="20180516 15:20:53.879" starttime="20180516 15:20:53.878"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${snapshot_num}+1</arg>
</arguments>
<assign>
<var>${snapshot_num}</var>
</assign>
<msg timestamp="20180516 15:20:53.880" level="INFO">${snapshot_num} = 32</msg>
<status status="PASS" endtime="20180516 15:20:53.880" starttime="20180516 15:20:53.879"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${snapshot_num}</arg>
</arguments>
<msg timestamp="20180516 15:20:53.880" level="INFO">${snapshot_num} = 32</msg>
<status status="PASS" endtime="20180516 15:20:53.880" starttime="20180516 15:20:53.880"></status>
</kw>
<msg timestamp="20180516 15:20:53.880" level="INFO">${prefix} = 031</msg>
<status status="PASS" endtime="20180516 15:20:53.880" starttime="20180516 15:20:53.878"></status>
</kw>
<kw name="Take ETCD Snapshots" library="setup-teardown">
<arguments>
<arg>${prefix}_${tag}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tag}</arg>
</arguments>
<msg timestamp="20180516 15:20:53.881" level="INFO">031_Ping Loop0 -&gt; Loop1_test_setup</msg>
<status status="PASS" endtime="20180516 15:20:53.881" starttime="20180516 15:20:53.881"></status>
</kw>
<kw name="Get ETCD Dump" library="setup-teardown">
<assign>
<var>${dump}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DOCKER_COMMAND} exec etcd etcdctl get --prefix="true" ""</arg>
</arguments>
<assign>
<var>${command}</var>
</assign>
<msg timestamp="20180516 15:20:53.882" level="INFO">${command} = sudo docker exec etcd etcdctl get --prefix="true" ""</msg>
<status status="PASS" endtime="20180516 15:20:53.882" starttime="20180516 15:20:53.882"></status>
</kw>
<kw name="Execute On Machine" library="ssh">
<doc>*Execute On Machine ${machine} sudo docker exec etcd etcdctl get --prefix="true" ""*</doc>
<arguments>
<arg>docker</arg>
<arg>${command}</arg>
<arg>log=false</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${log}</arg>
</arguments>
<msg timestamp="20180516 15:20:53.889" level="INFO">docker</msg>
<msg timestamp="20180516 15:20:53.889" level="INFO">sudo docker exec etcd etcdctl get --prefix="true" ""</msg>
<msg timestamp="20180516 15:20:53.892" level="INFO">false</msg>
<status status="PASS" endtime="20180516 15:20:53.893" starttime="20180516 15:20:53.889"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:20:53.893" starttime="20180516 15:20:53.893"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:20:53.896" level="INFO">${currdate} = 2018-05-16 15:20:53.895</msg>
<status status="PASS" endtime="20180516 15:20:53.896" starttime="20180516 15:20:53.894"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20180516 15:20:53.896" level="INFO">Executing command 'sudo docker exec etcd etcdctl get --prefix="true" ""'.</msg>
<msg timestamp="20180516 15:20:54.425" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:20:54.425" level="INFO">${out} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<msg timestamp="20180516 15:20:54.425" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20180516 15:20:54.425" starttime="20180516 15:20:53.896"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${out}</arg>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:20:54.426" level="INFO">/sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-containers","description":"Wire 2 VNF containers to the vpp switch","type":2,"elements":[{"container":"node_1","port_label":"node1_veth","etcd_vpp_switch_key":"agent_vpp_1","ipv4_addr":"10.0.0.10","type":3},{"container":"node_2","port_label":"node2_veth","etcd_vpp_switch_key":"agent_vpp_1","ipv4_addr":"10.0.0.11","type":3}]}
/sfc-controller/v1/SP
{"mtu":1500,"starting_vlan_id":5000,"default_static_route_weight":5,"dynamic_bridge_parms":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true},"static_bridge_parms":{"forward":true}}
/sfc-controller/v1/id/HE/agent_vpp_1
{"name":"agent_vpp_1"}
/sfc-controller/v1/id/SFC/two-sample-vnf-containers/node_1_node1_veth
{"sfc_name":"two-sample-vnf-containers","container":"node_1","port":"node1_veth","mac_addr_id":1,"veth_id":1}
/sfc-controller/v1/id/SFC/two-sample-vnf-containers/node_2_node2_veth
{"sfc_name":"two-sample-vnf-containers","container":"node_2","port":"node2_veth","mac_addr_id":2,"veth_id":2}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VNF_node_1_node1_veth
{"name":"IF_VETH_VNF_node_1_node1_veth","enabled":true,"phys_address":"02:00:00:00:00:01","mtu":1500,"host_if_name":"node1_veth","ip_addresses":["10.0.0.10/24"],"namespace":{"type":1,"microservice":"node_1"},"veth":{"peer_if_name":"IF_VETH_VSWITCH_node_1_node1_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VNF_node_2_node2_veth
{"name":"IF_VETH_VNF_node_2_node2_veth","enabled":true,"phys_address":"02:00:00:00:00:02","mtu":1500,"host_if_name":"node2_veth","ip_addresses":["10.0.0.11/24"],"namespace":{"type":1,"microservice":"node_2"},"veth":{"peer_if_name":"IF_VETH_VSWITCH_node_2_node2_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VSWITCH_node_1_node1_veth
{"name":"IF_VETH_VSWITCH_node_1_node1_veth","enabled":true,"mtu":1500,"host_if_name":"node_1_noeth_1","namespace":{"type":1,"microservice":"agent_vpp_1"},"veth":{"peer_if_name":"IF_VETH_VNF_node_1_node1_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VSWITCH_node_2_node2_veth
{"name":"IF_VETH_VSWITCH_node_2_node2_veth","enabled":true,"mtu":1500,"host_if_name":"node_2_noeth_2","namespace":{"type":1,"microservice":"agent_vpp_1"},"veth":{"peer_if_name":"IF_VETH_VNF_node_2_node2_veth"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/BD_INTERNAL_EW_L2FIB_agent_vpp_1
{"name":"BD_INTERNAL_EW_L2FIB_agent_vpp_1","forward":true}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/BD_INTERNAL_EW_agent_vpp_1
{"name":"BD_INTERNAL_EW_agent_vpp_1","flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true,"interfaces":[{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth"},{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth"}]}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/bd2
{
  "name": "bd2",
  "flood": true,
  "unknown_unicast_flood": true,
  "forward": true,
  "learn": true,
  "arp_termination": true,
  "interfaces": [
    { "name": "loop0" },{ "name": "loop1" }
  ]
}


/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth
{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","type":4,"enabled":true,"mtu":1500,"afpacket":{"host_if_name":"node_1_noeth_1"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth
{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","type":4,"enabled":true,"mtu":1500,"afpacket":{"host_if_name":"node_2_noeth_2"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_LOOPBACK_H_agent_vpp_1
{"name":"IF_LOOPBACK_H_agent_vpp_1","enabled":true,"phys_address":"02:00:00:AA:BB:00","mtu":1500,"ip_addresses":["6.0.0.100"]}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/loop0
{
  "name": "loop0",
  "type": 0,
  "enabled": true,
  "phys_address": "8a:f1:be:90:00:00",
  "mtu": 1500,
  "vrf": 0,
  "ip_addresses": [
    "20.1.1.1/24"
  ]
}


/vnf-agent/agent_vpp_1/vpp/config/v1/interface/loop1
{
  "name": "loop1",
  "type": 0,
  "enabled": true,
  "phys_address": "8a:f1:be:90:20:00",
  "mtu": 1500,
  "vrf": 0,
  "ip_addresses": [
    "30.1.1.1/24"
  ]
}


/vnf-agent/agent_vpp_1/vpp/status/v1/bd/BD_INTERNAL_EW_L2FIB_agent_vpp_1
{"index":2,"internal_name":"BD_INTERNAL_EW_L2FIB_agent_vpp_1","bvi_interface":"not_set","last_change":1526476631,"l2_params":{"forward":true}}
/vnf-agent/agent_vpp_1/vpp/status/v1/bd/BD_INTERNAL_EW_agent_vpp_1
{"index":1,"internal_name":"BD_INTERNAL_EW_agent_vpp_1","bvi_interface":"not_set","interface_count":2,"last_change":1526476631,"l2_params":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true},"interfaces":[{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","sw_if_index":2},{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","sw_if_index":3}]}
/vnf-agent/agent_vpp_1/vpp/status/v1/bd/bd2
{"index":3,"internal_name":"bd2","bvi_interface":"not_set","interface_count":2,"last_change":1526476768,"l2_params":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true,"arp_termination":true},"interfaces":[{"name":"loop0","sw_if_index":4},{"name":"loop1","sw_if_index":5}]}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth
{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","internal_name":"host-node_1_noeth_1","if_index":2,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:3e:fd:61:28","mtu":1500,"statistics":{"in_packets":20,"in_bytes":1552}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth
{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","internal_name":"host-node_2_noeth_2","if_index":3,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:42:98:22:08","mtu":1500,"statistics":{"in_packets":22,"in_bytes":1732}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_LOOPBACK_H_agent_vpp_1
{"name":"IF_LOOPBACK_H_agent_vpp_1","internal_name":"loop0","if_index":1,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:00:00:aa:bb:00","mtu":1500,"statistics":{}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/local0
{"name":"local0","internal_name":"local0","admin_status":2,"oper_status":2,"statistics":{}}
/vnf-agent/node_1/check/status/v1/agent
{"build_version":"v1.1-5-g55e9977","build_date":"2018-03-06T11:05+00:00","state":1,"start_time":1526476614,"last_change":1526476619,"last_update":1526476845,"commit_hash":"55e99770087087fa8e41a980a8b6257c80c93f4c"}
/vnf-agent/node_1/check/status/v1/plugin/etcdv3
{"state":1,"last_change":1526476619,"last_update":1526476845}
/vnf-agent/node_1/check/status/v1/plugin/kafka
{"state":1,"last_change":1526476619,"last_update":1526476845}
/vnf-agent/node_2/check/status/v1/agent
{"build_version":"v1.1-5-g55e9977","build_date":"2018-03-06T11:05+00:00","state":1,"start_time":1526476623,"last_change":1526476628,"last_update":1526476853,"commit_hash":"55e99770087087fa8e41a980a8b6257c80c93f4c"}
/vnf-agent/node_2/check/status/v1/plugin/etcdv3
{"state":1,"last_change":1526476628,"last_update":1526476853}
/vnf-agent/node_2/check/status/v1/plugin/kafka
{"state":1,"last_change":1526476628,"last_update":1526476853}</msg>
<msg timestamp="20180516 15:20:54.427" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:20:54.427" starttime="20180516 15:20:54.426"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:20:54.428" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:20:54.428" starttime="20180516 15:20:54.427"></status>
</kw>
<msg timestamp="20180516 15:20:54.428" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:20:54.428" starttime="20180516 15:20:54.427"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} on ${machine}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:20:54.428" starttime="20180516 15:20:54.428"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${log}'=='true'</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:20:54.429" starttime="20180516 15:20:54.429"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:20:54.429" starttime="20180516 15:20:54.429"></status>
</kw>
<msg timestamp="20180516 15:20:54.430" level="INFO">${out} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<status status="PASS" endtime="20180516 15:20:54.430" starttime="20180516 15:20:53.887"></status>
</kw>
<msg timestamp="20180516 15:20:54.430" level="INFO">${dump} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<status status="PASS" endtime="20180516 15:20:54.430" starttime="20180516 15:20:53.882"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/etcd_dump-${tag}.txt</arg>
<arg>${dump}</arg>
</arguments>
<msg timestamp="20180516 15:20:54.430" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/etcd_dump-031_Ping Loop0 -&gt; Loop1_test_setup.txt"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/etcd_dump-031_Ping Loop0 -&gt; Loop1_test_setup.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:20:54.431" starttime="20180516 15:20:54.430"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${dump}</arg>
<arg>/error/</arg>
</arguments>
<assign>
<var>${errors}</var>
</assign>
<msg timestamp="20180516 15:20:54.431" level="INFO">0 out of 98 lines matched</msg>
<msg timestamp="20180516 15:20:54.431" level="INFO">${errors} = </msg>
<status status="PASS" endtime="20180516 15:20:54.431" starttime="20180516 15:20:54.431"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${errors}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${errors}</arg>
</arguments>
<msg timestamp="20180516 15:20:54.432" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:20:54.432" starttime="20180516 15:20:54.432"></status>
</kw>
<msg timestamp="20180516 15:20:54.432" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:20:54.432" starttime="20180516 15:20:54.431"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>Errors detected in keys: ${errors}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:20:54.433" starttime="20180516 15:20:54.433"></status>
</kw>
<status status="PASS" endtime="20180516 15:20:54.433" starttime="20180516 15:20:53.881"></status>
</kw>
<status status="PASS" endtime="20180516 15:20:54.433" starttime="20180516 15:20:53.877"></status>
</kw>
<status status="PASS" endtime="20180516 15:20:54.433" starttime="20180516 15:20:53.877"></status>
</kw>
<kw name="vpp_term: Check Ping Within Interface" library="vpp_term">
<arguments>
<arg>agent_vpp_1</arg>
<arg>30.1.1.1</arg>
<arg>loop0</arg>
<arg>15</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${ip}</arg>
<arg>${source}</arg>
<arg>${count}</arg>
</arguments>
<msg timestamp="20180516 15:20:54.434" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:20:54.434" level="INFO">30.1.1.1</msg>
<msg timestamp="20180516 15:20:54.434" level="INFO">loop0</msg>
<msg timestamp="20180516 15:20:54.434" level="INFO">15</msg>
<status status="PASS" endtime="20180516 15:20:54.434" starttime="20180516 15:20:54.434"></status>
</kw>
<kw name="vpp_term: Issue Command" library="vpp_term">
<arguments>
<arg>${node}</arg>
<arg>ping ${ip} source ${source} repeat ${count}</arg>
<arg>delay=10s</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${command}</arg>
<arg>${delay}</arg>
<arg>${node}_term</arg>
<arg>${${node}_VPP_TERM_PROMPT}</arg>
</arguments>
<msg timestamp="20180516 15:20:54.435" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:20:54.435" level="INFO">ping 30.1.1.1 source loop0 repeat 15</msg>
<msg timestamp="20180516 15:20:54.436" level="INFO">10s</msg>
<msg timestamp="20180516 15:20:54.436" level="INFO">agent_vpp_1_term</msg>
<msg timestamp="20180516 15:20:54.436" level="INFO">vpp#</msg>
<status status="PASS" endtime="20180516 15:20:54.436" starttime="20180516 15:20:54.435"></status>
</kw>
<kw name="Write To Machine Until String" library="ssh">
<doc>*Write Machine ${machine} ping 30.1.1.1 source loop0 repeat 15*</doc>
<arguments>
<arg>${node}_term</arg>
<arg>${command}</arg>
<arg>${${node}_VPP_TERM_PROMPT}</arg>
<arg>delay=${delay}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${string}</arg>
<arg>${delay}</arg>
</arguments>
<msg timestamp="20180516 15:20:54.442" level="INFO">agent_vpp_1_term</msg>
<msg timestamp="20180516 15:20:54.442" level="INFO">ping 30.1.1.1 source loop0 repeat 15</msg>
<msg timestamp="20180516 15:20:54.442" level="INFO">vpp#</msg>
<msg timestamp="20180516 15:20:54.442" level="INFO">10s</msg>
<status status="PASS" endtime="20180516 15:20:54.442" starttime="20180516 15:20:54.442"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:20:54.443" starttime="20180516 15:20:54.443"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:20:54.443" level="INFO">${currdate} = 2018-05-16 15:20:54.443</msg>
<status status="PASS" endtime="20180516 15:20:54.443" starttime="20180516 15:20:54.443"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20180516 15:20:54.458" level="INFO">ping 30.1.1.1 source loop0 repeat 15</msg>
<status status="PASS" endtime="20180516 15:20:54.458" starttime="20180516 15:20:54.445"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>${string}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20180516 15:21:09.486" level="INFO">Statistics: 15 sent, 0 received, 100% packet loss
vpp#</msg>
<msg timestamp="20180516 15:21:09.487" level="INFO">${out} = 
Statistics: 15 sent, 0 received, 100% packet loss
vpp#</msg>
<status status="PASS" endtime="20180516 15:21:09.487" starttime="20180516 15:20:54.458"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:21:09.488" level="INFO">
Statistics: 15 sent, 0 received, 100% packet loss
vpp#</msg>
<status status="PASS" endtime="20180516 15:21:09.488" starttime="20180516 15:21:09.488"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>delay=${delay}</arg>
</arguments>
<assign>
<var>${out2}</var>
</assign>
<msg timestamp="20180516 15:21:19.499" level="INFO">${out2} =  </msg>
<status status="PASS" endtime="20180516 15:21:19.499" starttime="20180516 15:21:09.488"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out2}</arg>
</arguments>
<msg timestamp="20180516 15:21:19.500" level="INFO"> </msg>
<status status="PASS" endtime="20180516 15:21:19.500" starttime="20180516 15:21:19.499"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${out2}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:21:19.500" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_term.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_term.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:21:19.501" starttime="20180516 15:21:19.500"></status>
</kw>
<msg timestamp="20180516 15:21:19.501" level="INFO">${out} = 
Statistics: 15 sent, 0 received, 100% packet loss
vpp# </msg>
<status status="PASS" endtime="20180516 15:21:19.501" starttime="20180516 15:20:54.441"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:21:19.501" level="INFO">
Statistics: 15 sent, 0 received, 100% packet loss
vpp# </msg>
<status status="PASS" endtime="20180516 15:21:19.501" starttime="20180516 15:21:19.501"></status>
</kw>
<msg timestamp="20180516 15:21:19.501" level="INFO">${out} = 
Statistics: 15 sent, 0 received, 100% packet loss
vpp# </msg>
<status status="PASS" endtime="20180516 15:21:19.501" starttime="20180516 15:20:54.435"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${out}</arg>
<arg>from ${ip}</arg>
</arguments>
<msg timestamp="20180516 15:21:19.502" level="FAIL">'
Statistics: 15 sent, 0 received, 100% packet loss
vpp# ' does not contain 'from 30.1.1.1'</msg>
<status status="FAIL" endtime="20180516 15:21:19.502" starttime="20180516 15:21:19.502"></status>
</kw>
<status status="FAIL" endtime="20180516 15:21:19.502" starttime="20180516 15:20:54.434"></status>
</kw>
<kw type="teardown" name="TestTeardown">
<kw name="Make Datastore Snapshots" library="setup-teardown">
<arguments>
<arg>${TEST_NAME}_test_teardown</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tag}</arg>
</arguments>
<msg timestamp="20180516 15:21:19.504" level="INFO">Ping Loop0 -&gt; Loop1_test_teardown</msg>
<status status="PASS" endtime="20180516 15:21:19.504" starttime="20180516 15:21:19.503"></status>
</kw>
<kw name="Create Next Snapshot Prefix" library="setup-teardown">
<assign>
<var>${prefix}</var>
</assign>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>str(${snapshot_num}).zfill(3)</arg>
</arguments>
<assign>
<var>${prefix}</var>
</assign>
<msg timestamp="20180516 15:21:19.505" level="INFO">${prefix} = 032</msg>
<status status="PASS" endtime="20180516 15:21:19.506" starttime="20180516 15:21:19.505"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${snapshot_num}+1</arg>
</arguments>
<assign>
<var>${snapshot_num}</var>
</assign>
<msg timestamp="20180516 15:21:19.506" level="INFO">${snapshot_num} = 33</msg>
<status status="PASS" endtime="20180516 15:21:19.506" starttime="20180516 15:21:19.506"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${snapshot_num}</arg>
</arguments>
<msg timestamp="20180516 15:21:19.507" level="INFO">${snapshot_num} = 33</msg>
<status status="PASS" endtime="20180516 15:21:19.507" starttime="20180516 15:21:19.507"></status>
</kw>
<msg timestamp="20180516 15:21:19.507" level="INFO">${prefix} = 032</msg>
<status status="PASS" endtime="20180516 15:21:19.507" starttime="20180516 15:21:19.504"></status>
</kw>
<kw name="Take ETCD Snapshots" library="setup-teardown">
<arguments>
<arg>${prefix}_${tag}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tag}</arg>
</arguments>
<msg timestamp="20180516 15:21:19.509" level="INFO">032_Ping Loop0 -&gt; Loop1_test_teardown</msg>
<status status="PASS" endtime="20180516 15:21:19.509" starttime="20180516 15:21:19.508"></status>
</kw>
<kw name="Get ETCD Dump" library="setup-teardown">
<assign>
<var>${dump}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DOCKER_COMMAND} exec etcd etcdctl get --prefix="true" ""</arg>
</arguments>
<assign>
<var>${command}</var>
</assign>
<msg timestamp="20180516 15:21:19.510" level="INFO">${command} = sudo docker exec etcd etcdctl get --prefix="true" ""</msg>
<status status="PASS" endtime="20180516 15:21:19.510" starttime="20180516 15:21:19.509"></status>
</kw>
<kw name="Execute On Machine" library="ssh">
<doc>*Execute On Machine ${machine} sudo docker exec etcd etcdctl get --prefix="true" ""*</doc>
<arguments>
<arg>docker</arg>
<arg>${command}</arg>
<arg>log=false</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${log}</arg>
</arguments>
<msg timestamp="20180516 15:21:19.516" level="INFO">docker</msg>
<msg timestamp="20180516 15:21:19.516" level="INFO">sudo docker exec etcd etcdctl get --prefix="true" ""</msg>
<msg timestamp="20180516 15:21:19.516" level="INFO">false</msg>
<status status="PASS" endtime="20180516 15:21:19.516" starttime="20180516 15:21:19.516"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:21:19.517" starttime="20180516 15:21:19.517"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:21:19.517" level="INFO">${currdate} = 2018-05-16 15:21:19.517</msg>
<status status="PASS" endtime="20180516 15:21:19.517" starttime="20180516 15:21:19.517"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20180516 15:21:19.518" level="INFO">Executing command 'sudo docker exec etcd etcdctl get --prefix="true" ""'.</msg>
<msg timestamp="20180516 15:21:20.023" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:21:20.023" level="INFO">${out} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<msg timestamp="20180516 15:21:20.023" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20180516 15:21:20.023" starttime="20180516 15:21:19.517"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${out}</arg>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:21:20.024" level="INFO">/sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-containers","description":"Wire 2 VNF containers to the vpp switch","type":2,"elements":[{"container":"node_1","port_label":"node1_veth","etcd_vpp_switch_key":"agent_vpp_1","ipv4_addr":"10.0.0.10","type":3},{"container":"node_2","port_label":"node2_veth","etcd_vpp_switch_key":"agent_vpp_1","ipv4_addr":"10.0.0.11","type":3}]}
/sfc-controller/v1/SP
{"mtu":1500,"starting_vlan_id":5000,"default_static_route_weight":5,"dynamic_bridge_parms":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true},"static_bridge_parms":{"forward":true}}
/sfc-controller/v1/id/HE/agent_vpp_1
{"name":"agent_vpp_1"}
/sfc-controller/v1/id/SFC/two-sample-vnf-containers/node_1_node1_veth
{"sfc_name":"two-sample-vnf-containers","container":"node_1","port":"node1_veth","mac_addr_id":1,"veth_id":1}
/sfc-controller/v1/id/SFC/two-sample-vnf-containers/node_2_node2_veth
{"sfc_name":"two-sample-vnf-containers","container":"node_2","port":"node2_veth","mac_addr_id":2,"veth_id":2}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VNF_node_1_node1_veth
{"name":"IF_VETH_VNF_node_1_node1_veth","enabled":true,"phys_address":"02:00:00:00:00:01","mtu":1500,"host_if_name":"node1_veth","ip_addresses":["10.0.0.10/24"],"namespace":{"type":1,"microservice":"node_1"},"veth":{"peer_if_name":"IF_VETH_VSWITCH_node_1_node1_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VNF_node_2_node2_veth
{"name":"IF_VETH_VNF_node_2_node2_veth","enabled":true,"phys_address":"02:00:00:00:00:02","mtu":1500,"host_if_name":"node2_veth","ip_addresses":["10.0.0.11/24"],"namespace":{"type":1,"microservice":"node_2"},"veth":{"peer_if_name":"IF_VETH_VSWITCH_node_2_node2_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VSWITCH_node_1_node1_veth
{"name":"IF_VETH_VSWITCH_node_1_node1_veth","enabled":true,"mtu":1500,"host_if_name":"node_1_noeth_1","namespace":{"type":1,"microservice":"agent_vpp_1"},"veth":{"peer_if_name":"IF_VETH_VNF_node_1_node1_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VSWITCH_node_2_node2_veth
{"name":"IF_VETH_VSWITCH_node_2_node2_veth","enabled":true,"mtu":1500,"host_if_name":"node_2_noeth_2","namespace":{"type":1,"microservice":"agent_vpp_1"},"veth":{"peer_if_name":"IF_VETH_VNF_node_2_node2_veth"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/BD_INTERNAL_EW_L2FIB_agent_vpp_1
{"name":"BD_INTERNAL_EW_L2FIB_agent_vpp_1","forward":true}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/BD_INTERNAL_EW_agent_vpp_1
{"name":"BD_INTERNAL_EW_agent_vpp_1","flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true,"interfaces":[{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth"},{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth"}]}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/bd2
{
  "name": "bd2",
  "flood": true,
  "unknown_unicast_flood": true,
  "forward": true,
  "learn": true,
  "arp_termination": true,
  "interfaces": [
    { "name": "loop0" },{ "name": "loop1" }
  ]
}


/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth
{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","type":4,"enabled":true,"mtu":1500,"afpacket":{"host_if_name":"node_1_noeth_1"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth
{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","type":4,"enabled":true,"mtu":1500,"afpacket":{"host_if_name":"node_2_noeth_2"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_LOOPBACK_H_agent_vpp_1
{"name":"IF_LOOPBACK_H_agent_vpp_1","enabled":true,"phys_address":"02:00:00:AA:BB:00","mtu":1500,"ip_addresses":["6.0.0.100"]}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/loop0
{
  "name": "loop0",
  "type": 0,
  "enabled": true,
  "phys_address": "8a:f1:be:90:00:00",
  "mtu": 1500,
  "vrf": 0,
  "ip_addresses": [
    "20.1.1.1/24"
  ]
}


/vnf-agent/agent_vpp_1/vpp/config/v1/interface/loop1
{
  "name": "loop1",
  "type": 0,
  "enabled": true,
  "phys_address": "8a:f1:be:90:20:00",
  "mtu": 1500,
  "vrf": 0,
  "ip_addresses": [
    "30.1.1.1/24"
  ]
}


/vnf-agent/agent_vpp_1/vpp/status/v1/bd/BD_INTERNAL_EW_L2FIB_agent_vpp_1
{"index":2,"internal_name":"BD_INTERNAL_EW_L2FIB_agent_vpp_1","bvi_interface":"not_set","last_change":1526476631,"l2_params":{"forward":true}}
/vnf-agent/agent_vpp_1/vpp/status/v1/bd/BD_INTERNAL_EW_agent_vpp_1
{"index":1,"internal_name":"BD_INTERNAL_EW_agent_vpp_1","bvi_interface":"not_set","interface_count":2,"last_change":1526476631,"l2_params":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true},"interfaces":[{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","sw_if_index":2},{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","sw_if_index":3}]}
/vnf-agent/agent_vpp_1/vpp/status/v1/bd/bd2
{"index":3,"internal_name":"bd2","bvi_interface":"not_set","interface_count":2,"last_change":1526476768,"l2_params":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true,"arp_termination":true},"interfaces":[{"name":"loop0","sw_if_index":4},{"name":"loop1","sw_if_index":5}]}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth
{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","internal_name":"host-node_1_noeth_1","if_index":2,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:3e:fd:61:28","mtu":1500,"statistics":{"in_packets":20,"in_bytes":1552}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth
{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","internal_name":"host-node_2_noeth_2","if_index":3,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:42:98:22:08","mtu":1500,"statistics":{"in_packets":22,"in_bytes":1732}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_LOOPBACK_H_agent_vpp_1
{"name":"IF_LOOPBACK_H_agent_vpp_1","internal_name":"loop0","if_index":1,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:00:00:aa:bb:00","mtu":1500,"statistics":{}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/local0
{"name":"local0","internal_name":"local0","admin_status":2,"oper_status":2,"statistics":{}}
/vnf-agent/node_1/check/status/v1/agent
{"build_version":"v1.1-5-g55e9977","build_date":"2018-03-06T11:05+00:00","state":1,"start_time":1526476614,"last_change":1526476619,"last_update":1526476875,"commit_hash":"55e99770087087fa8e41a980a8b6257c80c93f4c"}
/vnf-agent/node_1/check/status/v1/plugin/etcdv3
{"state":1,"last_change":1526476619,"last_update":1526476875}
/vnf-agent/node_1/check/status/v1/plugin/kafka
{"state":1,"last_change":1526476619,"last_update":1526476875}
/vnf-agent/node_2/check/status/v1/agent
{"build_version":"v1.1-5-g55e9977","build_date":"2018-03-06T11:05+00:00","state":1,"start_time":1526476623,"last_change":1526476628,"last_update":1526476873,"commit_hash":"55e99770087087fa8e41a980a8b6257c80c93f4c"}
/vnf-agent/node_2/check/status/v1/plugin/etcdv3
{"state":1,"last_change":1526476628,"last_update":1526476873}
/vnf-agent/node_2/check/status/v1/plugin/kafka
{"state":1,"last_change":1526476628,"last_update":1526476873}</msg>
<msg timestamp="20180516 15:21:20.024" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:21:20.024" starttime="20180516 15:21:20.023"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:21:20.025" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:21:20.025" starttime="20180516 15:21:20.025"></status>
</kw>
<msg timestamp="20180516 15:21:20.026" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:21:20.026" starttime="20180516 15:21:20.025"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} on ${machine}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:21:20.026" starttime="20180516 15:21:20.026"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${log}'=='true'</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:21:20.027" starttime="20180516 15:21:20.026"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:21:20.027" starttime="20180516 15:21:20.027"></status>
</kw>
<msg timestamp="20180516 15:21:20.027" level="INFO">${out} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<status status="PASS" endtime="20180516 15:21:20.027" starttime="20180516 15:21:19.515"></status>
</kw>
<msg timestamp="20180516 15:21:20.027" level="INFO">${dump} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<status status="PASS" endtime="20180516 15:21:20.028" starttime="20180516 15:21:19.509"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/etcd_dump-${tag}.txt</arg>
<arg>${dump}</arg>
</arguments>
<msg timestamp="20180516 15:21:20.028" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/etcd_dump-032_Ping Loop0 -&gt; Loop1_test_teardown.txt"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/etcd_dump-032_Ping Loop0 -&gt; Loop1_test_teardown.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:21:20.028" starttime="20180516 15:21:20.028"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${dump}</arg>
<arg>/error/</arg>
</arguments>
<assign>
<var>${errors}</var>
</assign>
<msg timestamp="20180516 15:21:20.029" level="INFO">0 out of 98 lines matched</msg>
<msg timestamp="20180516 15:21:20.029" level="INFO">${errors} = </msg>
<status status="PASS" endtime="20180516 15:21:20.029" starttime="20180516 15:21:20.029"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${errors}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${errors}</arg>
</arguments>
<msg timestamp="20180516 15:21:20.030" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:21:20.030" starttime="20180516 15:21:20.030"></status>
</kw>
<msg timestamp="20180516 15:21:20.030" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:21:20.030" starttime="20180516 15:21:20.029"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>Errors detected in keys: ${errors}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:21:20.031" starttime="20180516 15:21:20.030"></status>
</kw>
<status status="PASS" endtime="20180516 15:21:20.031" starttime="20180516 15:21:19.507"></status>
</kw>
<status status="PASS" endtime="20180516 15:21:20.031" starttime="20180516 15:21:19.503"></status>
</kw>
<status status="PASS" endtime="20180516 15:21:20.031" starttime="20180516 15:21:19.503"></status>
</kw>
<status status="FAIL" endtime="20180516 15:21:20.031" critical="yes" starttime="20180516 15:20:53.876">'
Statistics: 15 sent, 0 received, 100% packet loss
vpp# ' does not contain 'from 30.1.1.1'</status>
</test>
<test id="s1-t16" name="Ping Loop1 -&gt; Loop0">
<kw type="setup" name="TestSetup">
<kw name="Make Datastore Snapshots" library="setup-teardown">
<arguments>
<arg>${TEST_NAME}_test_setup</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tag}</arg>
</arguments>
<msg timestamp="20180516 15:21:20.033" level="INFO">Ping Loop1 -&gt; Loop0_test_setup</msg>
<status status="PASS" endtime="20180516 15:21:20.033" starttime="20180516 15:21:20.033"></status>
</kw>
<kw name="Create Next Snapshot Prefix" library="setup-teardown">
<assign>
<var>${prefix}</var>
</assign>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>str(${snapshot_num}).zfill(3)</arg>
</arguments>
<assign>
<var>${prefix}</var>
</assign>
<msg timestamp="20180516 15:21:20.034" level="INFO">${prefix} = 033</msg>
<status status="PASS" endtime="20180516 15:21:20.034" starttime="20180516 15:21:20.034"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${snapshot_num}+1</arg>
</arguments>
<assign>
<var>${snapshot_num}</var>
</assign>
<msg timestamp="20180516 15:21:20.035" level="INFO">${snapshot_num} = 34</msg>
<status status="PASS" endtime="20180516 15:21:20.035" starttime="20180516 15:21:20.034"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${snapshot_num}</arg>
</arguments>
<msg timestamp="20180516 15:21:20.035" level="INFO">${snapshot_num} = 34</msg>
<status status="PASS" endtime="20180516 15:21:20.035" starttime="20180516 15:21:20.035"></status>
</kw>
<msg timestamp="20180516 15:21:20.036" level="INFO">${prefix} = 033</msg>
<status status="PASS" endtime="20180516 15:21:20.036" starttime="20180516 15:21:20.033"></status>
</kw>
<kw name="Take ETCD Snapshots" library="setup-teardown">
<arguments>
<arg>${prefix}_${tag}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tag}</arg>
</arguments>
<msg timestamp="20180516 15:21:20.036" level="INFO">033_Ping Loop1 -&gt; Loop0_test_setup</msg>
<status status="PASS" endtime="20180516 15:21:20.037" starttime="20180516 15:21:20.036"></status>
</kw>
<kw name="Get ETCD Dump" library="setup-teardown">
<assign>
<var>${dump}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DOCKER_COMMAND} exec etcd etcdctl get --prefix="true" ""</arg>
</arguments>
<assign>
<var>${command}</var>
</assign>
<msg timestamp="20180516 15:21:20.038" level="INFO">${command} = sudo docker exec etcd etcdctl get --prefix="true" ""</msg>
<status status="PASS" endtime="20180516 15:21:20.038" starttime="20180516 15:21:20.038"></status>
</kw>
<kw name="Execute On Machine" library="ssh">
<doc>*Execute On Machine ${machine} sudo docker exec etcd etcdctl get --prefix="true" ""*</doc>
<arguments>
<arg>docker</arg>
<arg>${command}</arg>
<arg>log=false</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${log}</arg>
</arguments>
<msg timestamp="20180516 15:21:20.048" level="INFO">docker</msg>
<msg timestamp="20180516 15:21:20.048" level="INFO">sudo docker exec etcd etcdctl get --prefix="true" ""</msg>
<msg timestamp="20180516 15:21:20.049" level="INFO">false</msg>
<status status="PASS" endtime="20180516 15:21:20.049" starttime="20180516 15:21:20.048"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:21:20.050" starttime="20180516 15:21:20.049"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:21:20.050" level="INFO">${currdate} = 2018-05-16 15:21:20.050</msg>
<status status="PASS" endtime="20180516 15:21:20.050" starttime="20180516 15:21:20.050"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20180516 15:21:20.051" level="INFO">Executing command 'sudo docker exec etcd etcdctl get --prefix="true" ""'.</msg>
<msg timestamp="20180516 15:21:20.644" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:21:20.644" level="INFO">${out} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<msg timestamp="20180516 15:21:20.644" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20180516 15:21:20.644" starttime="20180516 15:21:20.050"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${out}</arg>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:21:20.645" level="INFO">/sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-containers","description":"Wire 2 VNF containers to the vpp switch","type":2,"elements":[{"container":"node_1","port_label":"node1_veth","etcd_vpp_switch_key":"agent_vpp_1","ipv4_addr":"10.0.0.10","type":3},{"container":"node_2","port_label":"node2_veth","etcd_vpp_switch_key":"agent_vpp_1","ipv4_addr":"10.0.0.11","type":3}]}
/sfc-controller/v1/SP
{"mtu":1500,"starting_vlan_id":5000,"default_static_route_weight":5,"dynamic_bridge_parms":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true},"static_bridge_parms":{"forward":true}}
/sfc-controller/v1/id/HE/agent_vpp_1
{"name":"agent_vpp_1"}
/sfc-controller/v1/id/SFC/two-sample-vnf-containers/node_1_node1_veth
{"sfc_name":"two-sample-vnf-containers","container":"node_1","port":"node1_veth","mac_addr_id":1,"veth_id":1}
/sfc-controller/v1/id/SFC/two-sample-vnf-containers/node_2_node2_veth
{"sfc_name":"two-sample-vnf-containers","container":"node_2","port":"node2_veth","mac_addr_id":2,"veth_id":2}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VNF_node_1_node1_veth
{"name":"IF_VETH_VNF_node_1_node1_veth","enabled":true,"phys_address":"02:00:00:00:00:01","mtu":1500,"host_if_name":"node1_veth","ip_addresses":["10.0.0.10/24"],"namespace":{"type":1,"microservice":"node_1"},"veth":{"peer_if_name":"IF_VETH_VSWITCH_node_1_node1_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VNF_node_2_node2_veth
{"name":"IF_VETH_VNF_node_2_node2_veth","enabled":true,"phys_address":"02:00:00:00:00:02","mtu":1500,"host_if_name":"node2_veth","ip_addresses":["10.0.0.11/24"],"namespace":{"type":1,"microservice":"node_2"},"veth":{"peer_if_name":"IF_VETH_VSWITCH_node_2_node2_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VSWITCH_node_1_node1_veth
{"name":"IF_VETH_VSWITCH_node_1_node1_veth","enabled":true,"mtu":1500,"host_if_name":"node_1_noeth_1","namespace":{"type":1,"microservice":"agent_vpp_1"},"veth":{"peer_if_name":"IF_VETH_VNF_node_1_node1_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VSWITCH_node_2_node2_veth
{"name":"IF_VETH_VSWITCH_node_2_node2_veth","enabled":true,"mtu":1500,"host_if_name":"node_2_noeth_2","namespace":{"type":1,"microservice":"agent_vpp_1"},"veth":{"peer_if_name":"IF_VETH_VNF_node_2_node2_veth"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/BD_INTERNAL_EW_L2FIB_agent_vpp_1
{"name":"BD_INTERNAL_EW_L2FIB_agent_vpp_1","forward":true}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/BD_INTERNAL_EW_agent_vpp_1
{"name":"BD_INTERNAL_EW_agent_vpp_1","flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true,"interfaces":[{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth"},{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth"}]}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/bd2
{
  "name": "bd2",
  "flood": true,
  "unknown_unicast_flood": true,
  "forward": true,
  "learn": true,
  "arp_termination": true,
  "interfaces": [
    { "name": "loop0" },{ "name": "loop1" }
  ]
}


/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth
{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","type":4,"enabled":true,"mtu":1500,"afpacket":{"host_if_name":"node_1_noeth_1"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth
{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","type":4,"enabled":true,"mtu":1500,"afpacket":{"host_if_name":"node_2_noeth_2"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_LOOPBACK_H_agent_vpp_1
{"name":"IF_LOOPBACK_H_agent_vpp_1","enabled":true,"phys_address":"02:00:00:AA:BB:00","mtu":1500,"ip_addresses":["6.0.0.100"]}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/loop0
{
  "name": "loop0",
  "type": 0,
  "enabled": true,
  "phys_address": "8a:f1:be:90:00:00",
  "mtu": 1500,
  "vrf": 0,
  "ip_addresses": [
    "20.1.1.1/24"
  ]
}


/vnf-agent/agent_vpp_1/vpp/config/v1/interface/loop1
{
  "name": "loop1",
  "type": 0,
  "enabled": true,
  "phys_address": "8a:f1:be:90:20:00",
  "mtu": 1500,
  "vrf": 0,
  "ip_addresses": [
    "30.1.1.1/24"
  ]
}


/vnf-agent/agent_vpp_1/vpp/status/v1/bd/BD_INTERNAL_EW_L2FIB_agent_vpp_1
{"index":2,"internal_name":"BD_INTERNAL_EW_L2FIB_agent_vpp_1","bvi_interface":"not_set","last_change":1526476631,"l2_params":{"forward":true}}
/vnf-agent/agent_vpp_1/vpp/status/v1/bd/BD_INTERNAL_EW_agent_vpp_1
{"index":1,"internal_name":"BD_INTERNAL_EW_agent_vpp_1","bvi_interface":"not_set","interface_count":2,"last_change":1526476631,"l2_params":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true},"interfaces":[{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","sw_if_index":2},{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","sw_if_index":3}]}
/vnf-agent/agent_vpp_1/vpp/status/v1/bd/bd2
{"index":3,"internal_name":"bd2","bvi_interface":"not_set","interface_count":2,"last_change":1526476768,"l2_params":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true,"arp_termination":true},"interfaces":[{"name":"loop0","sw_if_index":4},{"name":"loop1","sw_if_index":5}]}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth
{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","internal_name":"host-node_1_noeth_1","if_index":2,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:3e:fd:61:28","mtu":1500,"statistics":{"in_packets":20,"in_bytes":1552}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth
{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","internal_name":"host-node_2_noeth_2","if_index":3,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:42:98:22:08","mtu":1500,"statistics":{"in_packets":22,"in_bytes":1732}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_LOOPBACK_H_agent_vpp_1
{"name":"IF_LOOPBACK_H_agent_vpp_1","internal_name":"loop0","if_index":1,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:00:00:aa:bb:00","mtu":1500,"statistics":{}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/local0
{"name":"local0","internal_name":"local0","admin_status":2,"oper_status":2,"statistics":{}}
/vnf-agent/node_1/check/status/v1/agent
{"build_version":"v1.1-5-g55e9977","build_date":"2018-03-06T11:05+00:00","state":1,"start_time":1526476614,"last_change":1526476619,"last_update":1526476875,"commit_hash":"55e99770087087fa8e41a980a8b6257c80c93f4c"}
/vnf-agent/node_1/check/status/v1/plugin/etcdv3
{"state":1,"last_change":1526476619,"last_update":1526476875}
/vnf-agent/node_1/check/status/v1/plugin/kafka
{"state":1,"last_change":1526476619,"last_update":1526476875}
/vnf-agent/node_2/check/status/v1/agent
{"build_version":"v1.1-5-g55e9977","build_date":"2018-03-06T11:05+00:00","state":1,"start_time":1526476623,"last_change":1526476628,"last_update":1526476873,"commit_hash":"55e99770087087fa8e41a980a8b6257c80c93f4c"}
/vnf-agent/node_2/check/status/v1/plugin/etcdv3
{"state":1,"last_change":1526476628,"last_update":1526476873}
/vnf-agent/node_2/check/status/v1/plugin/kafka
{"state":1,"last_change":1526476628,"last_update":1526476873}</msg>
<msg timestamp="20180516 15:21:20.645" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:21:20.645" starttime="20180516 15:21:20.644"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:21:20.646" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:21:20.646" starttime="20180516 15:21:20.646"></status>
</kw>
<msg timestamp="20180516 15:21:20.646" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:21:20.646" starttime="20180516 15:21:20.645"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} on ${machine}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:21:20.647" starttime="20180516 15:21:20.646"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${log}'=='true'</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:21:20.647" starttime="20180516 15:21:20.647"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:21:20.648" starttime="20180516 15:21:20.647"></status>
</kw>
<msg timestamp="20180516 15:21:20.648" level="INFO">${out} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<status status="PASS" endtime="20180516 15:21:20.648" starttime="20180516 15:21:20.047"></status>
</kw>
<msg timestamp="20180516 15:21:20.648" level="INFO">${dump} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<status status="PASS" endtime="20180516 15:21:20.648" starttime="20180516 15:21:20.037"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/etcd_dump-${tag}.txt</arg>
<arg>${dump}</arg>
</arguments>
<msg timestamp="20180516 15:21:20.649" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/etcd_dump-033_Ping Loop1 -&gt; Loop0_test_setup.txt"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/etcd_dump-033_Ping Loop1 -&gt; Loop0_test_setup.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:21:20.649" starttime="20180516 15:21:20.648"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${dump}</arg>
<arg>/error/</arg>
</arguments>
<assign>
<var>${errors}</var>
</assign>
<msg timestamp="20180516 15:21:20.649" level="INFO">0 out of 98 lines matched</msg>
<msg timestamp="20180516 15:21:20.650" level="INFO">${errors} = </msg>
<status status="PASS" endtime="20180516 15:21:20.650" starttime="20180516 15:21:20.649"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${errors}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${errors}</arg>
</arguments>
<msg timestamp="20180516 15:21:20.650" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:21:20.651" starttime="20180516 15:21:20.650"></status>
</kw>
<msg timestamp="20180516 15:21:20.651" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:21:20.651" starttime="20180516 15:21:20.650"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>Errors detected in keys: ${errors}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:21:20.651" starttime="20180516 15:21:20.651"></status>
</kw>
<status status="PASS" endtime="20180516 15:21:20.651" starttime="20180516 15:21:20.036"></status>
</kw>
<status status="PASS" endtime="20180516 15:21:20.651" starttime="20180516 15:21:20.032"></status>
</kw>
<status status="PASS" endtime="20180516 15:21:20.652" starttime="20180516 15:21:20.032"></status>
</kw>
<kw name="vpp_term: Check Ping Within Interface" library="vpp_term">
<arguments>
<arg>agent_vpp_1</arg>
<arg>20.1.1.1</arg>
<arg>loop1</arg>
<arg>15</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${ip}</arg>
<arg>${source}</arg>
<arg>${count}</arg>
</arguments>
<msg timestamp="20180516 15:21:20.653" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:21:20.653" level="INFO">20.1.1.1</msg>
<msg timestamp="20180516 15:21:20.653" level="INFO">loop1</msg>
<msg timestamp="20180516 15:21:20.653" level="INFO">15</msg>
<status status="PASS" endtime="20180516 15:21:20.653" starttime="20180516 15:21:20.652"></status>
</kw>
<kw name="vpp_term: Issue Command" library="vpp_term">
<arguments>
<arg>${node}</arg>
<arg>ping ${ip} source ${source} repeat ${count}</arg>
<arg>delay=10s</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${command}</arg>
<arg>${delay}</arg>
<arg>${node}_term</arg>
<arg>${${node}_VPP_TERM_PROMPT}</arg>
</arguments>
<msg timestamp="20180516 15:21:20.654" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:21:20.654" level="INFO">ping 20.1.1.1 source loop1 repeat 15</msg>
<msg timestamp="20180516 15:21:20.654" level="INFO">10s</msg>
<msg timestamp="20180516 15:21:20.654" level="INFO">agent_vpp_1_term</msg>
<msg timestamp="20180516 15:21:20.655" level="INFO">vpp#</msg>
<status status="PASS" endtime="20180516 15:21:20.655" starttime="20180516 15:21:20.654"></status>
</kw>
<kw name="Write To Machine Until String" library="ssh">
<doc>*Write Machine ${machine} ping 20.1.1.1 source loop1 repeat 15*</doc>
<arguments>
<arg>${node}_term</arg>
<arg>${command}</arg>
<arg>${${node}_VPP_TERM_PROMPT}</arg>
<arg>delay=${delay}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${string}</arg>
<arg>${delay}</arg>
</arguments>
<msg timestamp="20180516 15:21:20.671" level="INFO">agent_vpp_1_term</msg>
<msg timestamp="20180516 15:21:20.671" level="INFO">ping 20.1.1.1 source loop1 repeat 15</msg>
<msg timestamp="20180516 15:21:20.671" level="INFO">vpp#</msg>
<msg timestamp="20180516 15:21:20.672" level="INFO">10s</msg>
<status status="PASS" endtime="20180516 15:21:20.672" starttime="20180516 15:21:20.671"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:21:20.672" starttime="20180516 15:21:20.672"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:21:20.673" level="INFO">${currdate} = 2018-05-16 15:21:20.673</msg>
<status status="PASS" endtime="20180516 15:21:20.673" starttime="20180516 15:21:20.672"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20180516 15:21:20.693" level="INFO">ping 20.1.1.1 source loop1 repeat 15</msg>
<status status="PASS" endtime="20180516 15:21:20.693" starttime="20180516 15:21:20.673"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>${string}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20180516 15:21:35.722" level="INFO">Statistics: 15 sent, 0 received, 100% packet loss
vpp#</msg>
<msg timestamp="20180516 15:21:35.722" level="INFO">${out} = 
Statistics: 15 sent, 0 received, 100% packet loss
vpp#</msg>
<status status="PASS" endtime="20180516 15:21:35.722" starttime="20180516 15:21:20.693"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:21:35.722" level="INFO">
Statistics: 15 sent, 0 received, 100% packet loss
vpp#</msg>
<status status="PASS" endtime="20180516 15:21:35.723" starttime="20180516 15:21:35.722"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>delay=${delay}</arg>
</arguments>
<assign>
<var>${out2}</var>
</assign>
<msg timestamp="20180516 15:21:45.724" level="INFO">${out2} =  </msg>
<status status="PASS" endtime="20180516 15:21:45.724" starttime="20180516 15:21:35.723"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out2}</arg>
</arguments>
<msg timestamp="20180516 15:21:45.724" level="INFO"> </msg>
<status status="PASS" endtime="20180516 15:21:45.724" starttime="20180516 15:21:45.724"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${out2}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:21:45.725" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_term.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_term.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:21:45.725" starttime="20180516 15:21:45.725"></status>
</kw>
<msg timestamp="20180516 15:21:45.726" level="INFO">${out} = 
Statistics: 15 sent, 0 received, 100% packet loss
vpp# </msg>
<status status="PASS" endtime="20180516 15:21:45.726" starttime="20180516 15:21:20.670"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:21:45.726" level="INFO">
Statistics: 15 sent, 0 received, 100% packet loss
vpp# </msg>
<status status="PASS" endtime="20180516 15:21:45.726" starttime="20180516 15:21:45.726"></status>
</kw>
<msg timestamp="20180516 15:21:45.726" level="INFO">${out} = 
Statistics: 15 sent, 0 received, 100% packet loss
vpp# </msg>
<status status="PASS" endtime="20180516 15:21:45.726" starttime="20180516 15:21:20.653"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${out}</arg>
<arg>from ${ip}</arg>
</arguments>
<msg timestamp="20180516 15:21:45.727" level="FAIL">'
Statistics: 15 sent, 0 received, 100% packet loss
vpp# ' does not contain 'from 20.1.1.1'</msg>
<status status="FAIL" endtime="20180516 15:21:45.727" starttime="20180516 15:21:45.727"></status>
</kw>
<status status="FAIL" endtime="20180516 15:21:45.727" starttime="20180516 15:21:20.652"></status>
</kw>
<kw type="teardown" name="TestTeardown">
<kw name="Make Datastore Snapshots" library="setup-teardown">
<arguments>
<arg>${TEST_NAME}_test_teardown</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tag}</arg>
</arguments>
<msg timestamp="20180516 15:21:45.728" level="INFO">Ping Loop1 -&gt; Loop0_test_teardown</msg>
<status status="PASS" endtime="20180516 15:21:45.729" starttime="20180516 15:21:45.728"></status>
</kw>
<kw name="Create Next Snapshot Prefix" library="setup-teardown">
<assign>
<var>${prefix}</var>
</assign>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>str(${snapshot_num}).zfill(3)</arg>
</arguments>
<assign>
<var>${prefix}</var>
</assign>
<msg timestamp="20180516 15:21:45.730" level="INFO">${prefix} = 034</msg>
<status status="PASS" endtime="20180516 15:21:45.730" starttime="20180516 15:21:45.729"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${snapshot_num}+1</arg>
</arguments>
<assign>
<var>${snapshot_num}</var>
</assign>
<msg timestamp="20180516 15:21:45.730" level="INFO">${snapshot_num} = 35</msg>
<status status="PASS" endtime="20180516 15:21:45.730" starttime="20180516 15:21:45.730"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${snapshot_num}</arg>
</arguments>
<msg timestamp="20180516 15:21:45.731" level="INFO">${snapshot_num} = 35</msg>
<status status="PASS" endtime="20180516 15:21:45.731" starttime="20180516 15:21:45.730"></status>
</kw>
<msg timestamp="20180516 15:21:45.731" level="INFO">${prefix} = 034</msg>
<status status="PASS" endtime="20180516 15:21:45.731" starttime="20180516 15:21:45.729"></status>
</kw>
<kw name="Take ETCD Snapshots" library="setup-teardown">
<arguments>
<arg>${prefix}_${tag}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tag}</arg>
</arguments>
<msg timestamp="20180516 15:21:45.732" level="INFO">034_Ping Loop1 -&gt; Loop0_test_teardown</msg>
<status status="PASS" endtime="20180516 15:21:45.732" starttime="20180516 15:21:45.731"></status>
</kw>
<kw name="Get ETCD Dump" library="setup-teardown">
<assign>
<var>${dump}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DOCKER_COMMAND} exec etcd etcdctl get --prefix="true" ""</arg>
</arguments>
<assign>
<var>${command}</var>
</assign>
<msg timestamp="20180516 15:21:45.733" level="INFO">${command} = sudo docker exec etcd etcdctl get --prefix="true" ""</msg>
<status status="PASS" endtime="20180516 15:21:45.733" starttime="20180516 15:21:45.732"></status>
</kw>
<kw name="Execute On Machine" library="ssh">
<doc>*Execute On Machine ${machine} sudo docker exec etcd etcdctl get --prefix="true" ""*</doc>
<arguments>
<arg>docker</arg>
<arg>${command}</arg>
<arg>log=false</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${log}</arg>
</arguments>
<msg timestamp="20180516 15:21:45.742" level="INFO">docker</msg>
<msg timestamp="20180516 15:21:45.742" level="INFO">sudo docker exec etcd etcdctl get --prefix="true" ""</msg>
<msg timestamp="20180516 15:21:45.742" level="INFO">false</msg>
<status status="PASS" endtime="20180516 15:21:45.742" starttime="20180516 15:21:45.742"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:21:45.743" starttime="20180516 15:21:45.742"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:21:45.743" level="INFO">${currdate} = 2018-05-16 15:21:45.743</msg>
<status status="PASS" endtime="20180516 15:21:45.743" starttime="20180516 15:21:45.743"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20180516 15:21:45.744" level="INFO">Executing command 'sudo docker exec etcd etcdctl get --prefix="true" ""'.</msg>
<msg timestamp="20180516 15:21:46.203" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:21:46.203" level="INFO">${out} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<msg timestamp="20180516 15:21:46.203" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20180516 15:21:46.204" starttime="20180516 15:21:45.743"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${out}</arg>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:21:46.204" level="INFO">/sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-containers","description":"Wire 2 VNF containers to the vpp switch","type":2,"elements":[{"container":"node_1","port_label":"node1_veth","etcd_vpp_switch_key":"agent_vpp_1","ipv4_addr":"10.0.0.10","type":3},{"container":"node_2","port_label":"node2_veth","etcd_vpp_switch_key":"agent_vpp_1","ipv4_addr":"10.0.0.11","type":3}]}
/sfc-controller/v1/SP
{"mtu":1500,"starting_vlan_id":5000,"default_static_route_weight":5,"dynamic_bridge_parms":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true},"static_bridge_parms":{"forward":true}}
/sfc-controller/v1/id/HE/agent_vpp_1
{"name":"agent_vpp_1"}
/sfc-controller/v1/id/SFC/two-sample-vnf-containers/node_1_node1_veth
{"sfc_name":"two-sample-vnf-containers","container":"node_1","port":"node1_veth","mac_addr_id":1,"veth_id":1}
/sfc-controller/v1/id/SFC/two-sample-vnf-containers/node_2_node2_veth
{"sfc_name":"two-sample-vnf-containers","container":"node_2","port":"node2_veth","mac_addr_id":2,"veth_id":2}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VNF_node_1_node1_veth
{"name":"IF_VETH_VNF_node_1_node1_veth","enabled":true,"phys_address":"02:00:00:00:00:01","mtu":1500,"host_if_name":"node1_veth","ip_addresses":["10.0.0.10/24"],"namespace":{"type":1,"microservice":"node_1"},"veth":{"peer_if_name":"IF_VETH_VSWITCH_node_1_node1_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VNF_node_2_node2_veth
{"name":"IF_VETH_VNF_node_2_node2_veth","enabled":true,"phys_address":"02:00:00:00:00:02","mtu":1500,"host_if_name":"node2_veth","ip_addresses":["10.0.0.11/24"],"namespace":{"type":1,"microservice":"node_2"},"veth":{"peer_if_name":"IF_VETH_VSWITCH_node_2_node2_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VSWITCH_node_1_node1_veth
{"name":"IF_VETH_VSWITCH_node_1_node1_veth","enabled":true,"mtu":1500,"host_if_name":"node_1_noeth_1","namespace":{"type":1,"microservice":"agent_vpp_1"},"veth":{"peer_if_name":"IF_VETH_VNF_node_1_node1_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VSWITCH_node_2_node2_veth
{"name":"IF_VETH_VSWITCH_node_2_node2_veth","enabled":true,"mtu":1500,"host_if_name":"node_2_noeth_2","namespace":{"type":1,"microservice":"agent_vpp_1"},"veth":{"peer_if_name":"IF_VETH_VNF_node_2_node2_veth"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/BD_INTERNAL_EW_L2FIB_agent_vpp_1
{"name":"BD_INTERNAL_EW_L2FIB_agent_vpp_1","forward":true}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/BD_INTERNAL_EW_agent_vpp_1
{"name":"BD_INTERNAL_EW_agent_vpp_1","flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true,"interfaces":[{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth"},{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth"}]}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/bd2
{
  "name": "bd2",
  "flood": true,
  "unknown_unicast_flood": true,
  "forward": true,
  "learn": true,
  "arp_termination": true,
  "interfaces": [
    { "name": "loop0" },{ "name": "loop1" }
  ]
}


/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth
{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","type":4,"enabled":true,"mtu":1500,"afpacket":{"host_if_name":"node_1_noeth_1"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth
{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","type":4,"enabled":true,"mtu":1500,"afpacket":{"host_if_name":"node_2_noeth_2"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_LOOPBACK_H_agent_vpp_1
{"name":"IF_LOOPBACK_H_agent_vpp_1","enabled":true,"phys_address":"02:00:00:AA:BB:00","mtu":1500,"ip_addresses":["6.0.0.100"]}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/loop0
{
  "name": "loop0",
  "type": 0,
  "enabled": true,
  "phys_address": "8a:f1:be:90:00:00",
  "mtu": 1500,
  "vrf": 0,
  "ip_addresses": [
    "20.1.1.1/24"
  ]
}


/vnf-agent/agent_vpp_1/vpp/config/v1/interface/loop1
{
  "name": "loop1",
  "type": 0,
  "enabled": true,
  "phys_address": "8a:f1:be:90:20:00",
  "mtu": 1500,
  "vrf": 0,
  "ip_addresses": [
    "30.1.1.1/24"
  ]
}


/vnf-agent/agent_vpp_1/vpp/status/v1/bd/BD_INTERNAL_EW_L2FIB_agent_vpp_1
{"index":2,"internal_name":"BD_INTERNAL_EW_L2FIB_agent_vpp_1","bvi_interface":"not_set","last_change":1526476631,"l2_params":{"forward":true}}
/vnf-agent/agent_vpp_1/vpp/status/v1/bd/BD_INTERNAL_EW_agent_vpp_1
{"index":1,"internal_name":"BD_INTERNAL_EW_agent_vpp_1","bvi_interface":"not_set","interface_count":2,"last_change":1526476631,"l2_params":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true},"interfaces":[{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","sw_if_index":2},{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","sw_if_index":3}]}
/vnf-agent/agent_vpp_1/vpp/status/v1/bd/bd2
{"index":3,"internal_name":"bd2","bvi_interface":"not_set","interface_count":2,"last_change":1526476768,"l2_params":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true,"arp_termination":true},"interfaces":[{"name":"loop0","sw_if_index":4},{"name":"loop1","sw_if_index":5}]}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth
{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","internal_name":"host-node_1_noeth_1","if_index":2,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:3e:fd:61:28","mtu":1500,"statistics":{"in_packets":20,"in_bytes":1552}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth
{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","internal_name":"host-node_2_noeth_2","if_index":3,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:42:98:22:08","mtu":1500,"statistics":{"in_packets":22,"in_bytes":1732}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_LOOPBACK_H_agent_vpp_1
{"name":"IF_LOOPBACK_H_agent_vpp_1","internal_name":"loop0","if_index":1,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:00:00:aa:bb:00","mtu":1500,"statistics":{}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/local0
{"name":"local0","internal_name":"local0","admin_status":2,"oper_status":2,"statistics":{}}
/vnf-agent/node_1/check/status/v1/agent
{"build_version":"v1.1-5-g55e9977","build_date":"2018-03-06T11:05+00:00","state":1,"start_time":1526476614,"last_change":1526476619,"last_update":1526476905,"commit_hash":"55e99770087087fa8e41a980a8b6257c80c93f4c"}
/vnf-agent/node_1/check/status/v1/plugin/etcdv3
{"state":1,"last_change":1526476619,"last_update":1526476905}
/vnf-agent/node_1/check/status/v1/plugin/kafka
{"state":1,"last_change":1526476619,"last_update":1526476905}
/vnf-agent/node_2/check/status/v1/agent
{"build_version":"v1.1-5-g55e9977","build_date":"2018-03-06T11:05+00:00","state":1,"start_time":1526476623,"last_change":1526476628,"last_update":1526476903,"commit_hash":"55e99770087087fa8e41a980a8b6257c80c93f4c"}
/vnf-agent/node_2/check/status/v1/plugin/etcdv3
{"state":1,"last_change":1526476628,"last_update":1526476903}
/vnf-agent/node_2/check/status/v1/plugin/kafka
{"state":1,"last_change":1526476628,"last_update":1526476903}</msg>
<msg timestamp="20180516 15:21:46.205" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:21:46.205" starttime="20180516 15:21:46.204"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:21:46.206" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:21:46.206" starttime="20180516 15:21:46.205"></status>
</kw>
<msg timestamp="20180516 15:21:46.206" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:21:46.206" starttime="20180516 15:21:46.205"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} on ${machine}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:21:46.206" starttime="20180516 15:21:46.206"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${log}'=='true'</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:21:46.207" starttime="20180516 15:21:46.207"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:21:46.207" starttime="20180516 15:21:46.207"></status>
</kw>
<msg timestamp="20180516 15:21:46.208" level="INFO">${out} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<status status="PASS" endtime="20180516 15:21:46.208" starttime="20180516 15:21:45.741"></status>
</kw>
<msg timestamp="20180516 15:21:46.208" level="INFO">${dump} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<status status="PASS" endtime="20180516 15:21:46.208" starttime="20180516 15:21:45.732"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/etcd_dump-${tag}.txt</arg>
<arg>${dump}</arg>
</arguments>
<msg timestamp="20180516 15:21:46.210" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/etcd_dump-034_Ping Loop1 -&gt; Loop0_test_teardown.txt"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/etcd_dump-034_Ping Loop1 -&gt; Loop0_test_teardown.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:21:46.211" starttime="20180516 15:21:46.210"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${dump}</arg>
<arg>/error/</arg>
</arguments>
<assign>
<var>${errors}</var>
</assign>
<msg timestamp="20180516 15:21:46.212" level="INFO">0 out of 98 lines matched</msg>
<msg timestamp="20180516 15:21:46.212" level="INFO">${errors} = </msg>
<status status="PASS" endtime="20180516 15:21:46.212" starttime="20180516 15:21:46.211"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${errors}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${errors}</arg>
</arguments>
<msg timestamp="20180516 15:21:46.213" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:21:46.213" starttime="20180516 15:21:46.213"></status>
</kw>
<msg timestamp="20180516 15:21:46.213" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:21:46.213" starttime="20180516 15:21:46.212"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>Errors detected in keys: ${errors}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:21:46.213" starttime="20180516 15:21:46.213"></status>
</kw>
<status status="PASS" endtime="20180516 15:21:46.214" starttime="20180516 15:21:45.731"></status>
</kw>
<status status="PASS" endtime="20180516 15:21:46.214" starttime="20180516 15:21:45.728"></status>
</kw>
<status status="PASS" endtime="20180516 15:21:46.214" starttime="20180516 15:21:45.728"></status>
</kw>
<status status="FAIL" endtime="20180516 15:21:46.214" critical="yes" starttime="20180516 15:21:20.032">'
Statistics: 15 sent, 0 received, 100% packet loss
vpp# ' does not contain 'from 20.1.1.1'</status>
</test>
<test id="s1-t17" name="Show Tracing">
<kw type="setup" name="TestSetup">
<kw name="Make Datastore Snapshots" library="setup-teardown">
<arguments>
<arg>${TEST_NAME}_test_setup</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tag}</arg>
</arguments>
<msg timestamp="20180516 15:21:46.218" level="INFO">Show Tracing_test_setup</msg>
<status status="PASS" endtime="20180516 15:21:46.219" starttime="20180516 15:21:46.218"></status>
</kw>
<kw name="Create Next Snapshot Prefix" library="setup-teardown">
<assign>
<var>${prefix}</var>
</assign>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>str(${snapshot_num}).zfill(3)</arg>
</arguments>
<assign>
<var>${prefix}</var>
</assign>
<msg timestamp="20180516 15:21:46.220" level="INFO">${prefix} = 035</msg>
<status status="PASS" endtime="20180516 15:21:46.220" starttime="20180516 15:21:46.219"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${snapshot_num}+1</arg>
</arguments>
<assign>
<var>${snapshot_num}</var>
</assign>
<msg timestamp="20180516 15:21:46.222" level="INFO">${snapshot_num} = 36</msg>
<status status="PASS" endtime="20180516 15:21:46.222" starttime="20180516 15:21:46.222"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${snapshot_num}</arg>
</arguments>
<msg timestamp="20180516 15:21:46.223" level="INFO">${snapshot_num} = 36</msg>
<status status="PASS" endtime="20180516 15:21:46.223" starttime="20180516 15:21:46.222"></status>
</kw>
<msg timestamp="20180516 15:21:46.223" level="INFO">${prefix} = 035</msg>
<status status="PASS" endtime="20180516 15:21:46.223" starttime="20180516 15:21:46.219"></status>
</kw>
<kw name="Take ETCD Snapshots" library="setup-teardown">
<arguments>
<arg>${prefix}_${tag}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tag}</arg>
</arguments>
<msg timestamp="20180516 15:21:46.224" level="INFO">035_Show Tracing_test_setup</msg>
<status status="PASS" endtime="20180516 15:21:46.224" starttime="20180516 15:21:46.224"></status>
</kw>
<kw name="Get ETCD Dump" library="setup-teardown">
<assign>
<var>${dump}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DOCKER_COMMAND} exec etcd etcdctl get --prefix="true" ""</arg>
</arguments>
<assign>
<var>${command}</var>
</assign>
<msg timestamp="20180516 15:21:46.226" level="INFO">${command} = sudo docker exec etcd etcdctl get --prefix="true" ""</msg>
<status status="PASS" endtime="20180516 15:21:46.226" starttime="20180516 15:21:46.226"></status>
</kw>
<kw name="Execute On Machine" library="ssh">
<doc>*Execute On Machine ${machine} sudo docker exec etcd etcdctl get --prefix="true" ""*</doc>
<arguments>
<arg>docker</arg>
<arg>${command}</arg>
<arg>log=false</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${log}</arg>
</arguments>
<msg timestamp="20180516 15:21:46.242" level="INFO">docker</msg>
<msg timestamp="20180516 15:21:46.242" level="INFO">sudo docker exec etcd etcdctl get --prefix="true" ""</msg>
<msg timestamp="20180516 15:21:46.242" level="INFO">false</msg>
<status status="PASS" endtime="20180516 15:21:46.242" starttime="20180516 15:21:46.240"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:21:46.243" starttime="20180516 15:21:46.243"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:21:46.245" level="INFO">${currdate} = 2018-05-16 15:21:46.245</msg>
<status status="PASS" endtime="20180516 15:21:46.245" starttime="20180516 15:21:46.245"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20180516 15:21:46.246" level="INFO">Executing command 'sudo docker exec etcd etcdctl get --prefix="true" ""'.</msg>
<msg timestamp="20180516 15:21:46.763" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:21:46.763" level="INFO">${out} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<msg timestamp="20180516 15:21:46.763" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20180516 15:21:46.763" starttime="20180516 15:21:46.245"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${out}</arg>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:21:46.764" level="INFO">/sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-containers","description":"Wire 2 VNF containers to the vpp switch","type":2,"elements":[{"container":"node_1","port_label":"node1_veth","etcd_vpp_switch_key":"agent_vpp_1","ipv4_addr":"10.0.0.10","type":3},{"container":"node_2","port_label":"node2_veth","etcd_vpp_switch_key":"agent_vpp_1","ipv4_addr":"10.0.0.11","type":3}]}
/sfc-controller/v1/SP
{"mtu":1500,"starting_vlan_id":5000,"default_static_route_weight":5,"dynamic_bridge_parms":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true},"static_bridge_parms":{"forward":true}}
/sfc-controller/v1/id/HE/agent_vpp_1
{"name":"agent_vpp_1"}
/sfc-controller/v1/id/SFC/two-sample-vnf-containers/node_1_node1_veth
{"sfc_name":"two-sample-vnf-containers","container":"node_1","port":"node1_veth","mac_addr_id":1,"veth_id":1}
/sfc-controller/v1/id/SFC/two-sample-vnf-containers/node_2_node2_veth
{"sfc_name":"two-sample-vnf-containers","container":"node_2","port":"node2_veth","mac_addr_id":2,"veth_id":2}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VNF_node_1_node1_veth
{"name":"IF_VETH_VNF_node_1_node1_veth","enabled":true,"phys_address":"02:00:00:00:00:01","mtu":1500,"host_if_name":"node1_veth","ip_addresses":["10.0.0.10/24"],"namespace":{"type":1,"microservice":"node_1"},"veth":{"peer_if_name":"IF_VETH_VSWITCH_node_1_node1_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VNF_node_2_node2_veth
{"name":"IF_VETH_VNF_node_2_node2_veth","enabled":true,"phys_address":"02:00:00:00:00:02","mtu":1500,"host_if_name":"node2_veth","ip_addresses":["10.0.0.11/24"],"namespace":{"type":1,"microservice":"node_2"},"veth":{"peer_if_name":"IF_VETH_VSWITCH_node_2_node2_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VSWITCH_node_1_node1_veth
{"name":"IF_VETH_VSWITCH_node_1_node1_veth","enabled":true,"mtu":1500,"host_if_name":"node_1_noeth_1","namespace":{"type":1,"microservice":"agent_vpp_1"},"veth":{"peer_if_name":"IF_VETH_VNF_node_1_node1_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VSWITCH_node_2_node2_veth
{"name":"IF_VETH_VSWITCH_node_2_node2_veth","enabled":true,"mtu":1500,"host_if_name":"node_2_noeth_2","namespace":{"type":1,"microservice":"agent_vpp_1"},"veth":{"peer_if_name":"IF_VETH_VNF_node_2_node2_veth"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/BD_INTERNAL_EW_L2FIB_agent_vpp_1
{"name":"BD_INTERNAL_EW_L2FIB_agent_vpp_1","forward":true}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/BD_INTERNAL_EW_agent_vpp_1
{"name":"BD_INTERNAL_EW_agent_vpp_1","flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true,"interfaces":[{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth"},{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth"}]}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/bd2
{
  "name": "bd2",
  "flood": true,
  "unknown_unicast_flood": true,
  "forward": true,
  "learn": true,
  "arp_termination": true,
  "interfaces": [
    { "name": "loop0" },{ "name": "loop1" }
  ]
}


/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth
{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","type":4,"enabled":true,"mtu":1500,"afpacket":{"host_if_name":"node_1_noeth_1"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth
{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","type":4,"enabled":true,"mtu":1500,"afpacket":{"host_if_name":"node_2_noeth_2"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_LOOPBACK_H_agent_vpp_1
{"name":"IF_LOOPBACK_H_agent_vpp_1","enabled":true,"phys_address":"02:00:00:AA:BB:00","mtu":1500,"ip_addresses":["6.0.0.100"]}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/loop0
{
  "name": "loop0",
  "type": 0,
  "enabled": true,
  "phys_address": "8a:f1:be:90:00:00",
  "mtu": 1500,
  "vrf": 0,
  "ip_addresses": [
    "20.1.1.1/24"
  ]
}


/vnf-agent/agent_vpp_1/vpp/config/v1/interface/loop1
{
  "name": "loop1",
  "type": 0,
  "enabled": true,
  "phys_address": "8a:f1:be:90:20:00",
  "mtu": 1500,
  "vrf": 0,
  "ip_addresses": [
    "30.1.1.1/24"
  ]
}


/vnf-agent/agent_vpp_1/vpp/status/v1/bd/BD_INTERNAL_EW_L2FIB_agent_vpp_1
{"index":2,"internal_name":"BD_INTERNAL_EW_L2FIB_agent_vpp_1","bvi_interface":"not_set","last_change":1526476631,"l2_params":{"forward":true}}
/vnf-agent/agent_vpp_1/vpp/status/v1/bd/BD_INTERNAL_EW_agent_vpp_1
{"index":1,"internal_name":"BD_INTERNAL_EW_agent_vpp_1","bvi_interface":"not_set","interface_count":2,"last_change":1526476631,"l2_params":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true},"interfaces":[{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","sw_if_index":2},{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","sw_if_index":3}]}
/vnf-agent/agent_vpp_1/vpp/status/v1/bd/bd2
{"index":3,"internal_name":"bd2","bvi_interface":"not_set","interface_count":2,"last_change":1526476768,"l2_params":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true,"arp_termination":true},"interfaces":[{"name":"loop0","sw_if_index":4},{"name":"loop1","sw_if_index":5}]}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth
{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","internal_name":"host-node_1_noeth_1","if_index":2,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:3e:fd:61:28","mtu":1500,"statistics":{"in_packets":20,"in_bytes":1552}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth
{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","internal_name":"host-node_2_noeth_2","if_index":3,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:42:98:22:08","mtu":1500,"statistics":{"in_packets":22,"in_bytes":1732}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_LOOPBACK_H_agent_vpp_1
{"name":"IF_LOOPBACK_H_agent_vpp_1","internal_name":"loop0","if_index":1,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:00:00:aa:bb:00","mtu":1500,"statistics":{}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/local0
{"name":"local0","internal_name":"local0","admin_status":2,"oper_status":2,"statistics":{}}
/vnf-agent/node_1/check/status/v1/agent
{"build_version":"v1.1-5-g55e9977","build_date":"2018-03-06T11:05+00:00","state":1,"start_time":1526476614,"last_change":1526476619,"last_update":1526476905,"commit_hash":"55e99770087087fa8e41a980a8b6257c80c93f4c"}
/vnf-agent/node_1/check/status/v1/plugin/etcdv3
{"state":1,"last_change":1526476619,"last_update":1526476905}
/vnf-agent/node_1/check/status/v1/plugin/kafka
{"state":1,"last_change":1526476619,"last_update":1526476905}
/vnf-agent/node_2/check/status/v1/agent
{"build_version":"v1.1-5-g55e9977","build_date":"2018-03-06T11:05+00:00","state":1,"start_time":1526476623,"last_change":1526476628,"last_update":1526476903,"commit_hash":"55e99770087087fa8e41a980a8b6257c80c93f4c"}
/vnf-agent/node_2/check/status/v1/plugin/etcdv3
{"state":1,"last_change":1526476628,"last_update":1526476903}
/vnf-agent/node_2/check/status/v1/plugin/kafka
{"state":1,"last_change":1526476628,"last_update":1526476903}</msg>
<msg timestamp="20180516 15:21:46.764" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:21:46.764" starttime="20180516 15:21:46.763"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:21:46.765" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:21:46.765" starttime="20180516 15:21:46.765"></status>
</kw>
<msg timestamp="20180516 15:21:46.765" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:21:46.765" starttime="20180516 15:21:46.764"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} on ${machine}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:21:46.766" starttime="20180516 15:21:46.765"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${log}'=='true'</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:21:46.766" starttime="20180516 15:21:46.766"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:21:46.767" starttime="20180516 15:21:46.766"></status>
</kw>
<msg timestamp="20180516 15:21:46.767" level="INFO">${out} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<status status="PASS" endtime="20180516 15:21:46.767" starttime="20180516 15:21:46.235"></status>
</kw>
<msg timestamp="20180516 15:21:46.767" level="INFO">${dump} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<status status="PASS" endtime="20180516 15:21:46.767" starttime="20180516 15:21:46.224"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/etcd_dump-${tag}.txt</arg>
<arg>${dump}</arg>
</arguments>
<msg timestamp="20180516 15:21:46.768" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/etcd_dump-035_Show Tracing_test_setup.txt"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/etcd_dump-035_Show Tracing_test_setup.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:21:46.768" starttime="20180516 15:21:46.767"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${dump}</arg>
<arg>/error/</arg>
</arguments>
<assign>
<var>${errors}</var>
</assign>
<msg timestamp="20180516 15:21:46.769" level="INFO">0 out of 98 lines matched</msg>
<msg timestamp="20180516 15:21:46.769" level="INFO">${errors} = </msg>
<status status="PASS" endtime="20180516 15:21:46.769" starttime="20180516 15:21:46.769"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${errors}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${errors}</arg>
</arguments>
<msg timestamp="20180516 15:21:46.770" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:21:46.770" starttime="20180516 15:21:46.770"></status>
</kw>
<msg timestamp="20180516 15:21:46.771" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:21:46.771" starttime="20180516 15:21:46.770"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>Errors detected in keys: ${errors}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:21:46.771" starttime="20180516 15:21:46.771"></status>
</kw>
<status status="PASS" endtime="20180516 15:21:46.771" starttime="20180516 15:21:46.223"></status>
</kw>
<status status="PASS" endtime="20180516 15:21:46.771" starttime="20180516 15:21:46.218"></status>
</kw>
<status status="PASS" endtime="20180516 15:21:46.771" starttime="20180516 15:21:46.217"></status>
</kw>
<kw name="vpp_term: Show Trace" library="vpp_term">
<doc>vpp_term: Show Trace</doc>
<arguments>
<arg>agent_vpp_1</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
</arguments>
<msg timestamp="20180516 15:21:46.772" level="INFO">agent_vpp_1</msg>
<status status="PASS" endtime="20180516 15:21:46.773" starttime="20180516 15:21:46.772"></status>
</kw>
<kw name="vpp_term: Issue Command" library="vpp_term">
<arguments>
<arg>${node}</arg>
<arg>show trace</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${node}</arg>
<arg>${command}</arg>
<arg>${delay}</arg>
<arg>${node}_term</arg>
<arg>${${node}_VPP_TERM_PROMPT}</arg>
</arguments>
<msg timestamp="20180516 15:21:46.773" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:21:46.774" level="INFO">show trace</msg>
<msg timestamp="20180516 15:21:46.774" level="INFO">3s</msg>
<msg timestamp="20180516 15:21:46.774" level="INFO">agent_vpp_1_term</msg>
<msg timestamp="20180516 15:21:46.774" level="INFO">vpp#</msg>
<status status="PASS" endtime="20180516 15:21:46.774" starttime="20180516 15:21:46.773"></status>
</kw>
<kw name="Write To Machine Until String" library="ssh">
<doc>*Write Machine ${machine} show trace*</doc>
<arguments>
<arg>${node}_term</arg>
<arg>${command}</arg>
<arg>${${node}_VPP_TERM_PROMPT}</arg>
<arg>delay=${delay}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${string}</arg>
<arg>${delay}</arg>
</arguments>
<msg timestamp="20180516 15:21:46.780" level="INFO">agent_vpp_1_term</msg>
<msg timestamp="20180516 15:21:46.780" level="INFO">show trace</msg>
<msg timestamp="20180516 15:21:46.780" level="INFO">vpp#</msg>
<msg timestamp="20180516 15:21:46.780" level="INFO">3s</msg>
<status status="PASS" endtime="20180516 15:21:46.780" starttime="20180516 15:21:46.779"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:21:46.781" starttime="20180516 15:21:46.781"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:21:46.782" level="INFO">${currdate} = 2018-05-16 15:21:46.782</msg>
<status status="PASS" endtime="20180516 15:21:46.782" starttime="20180516 15:21:46.781"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<msg timestamp="20180516 15:21:46.792" level="INFO">show trace</msg>
<status status="PASS" endtime="20180516 15:21:46.792" starttime="20180516 15:21:46.783"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>${string}</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20180516 15:21:46.924" level="INFO">------------------- Start of thread 0 vpp_main -------------------
Packet 1

00:04:14:614462: af-packet-input
  af_packet: hw_if_index 2 next-index 4
    tpacket2_hdr:
      status 0x20000001 len 42 snaplen 42 mac 66 net 80
      sec 0x5afc302b nsec 0x15b6e59c vlan 0 vlan_tpid 0
00:04:14:614472: ethernet-input
  ARP: 02:00:00:00:00:01 -&gt; ff:ff:ff:ff:ff:ff
00:04:14:614475: l2-input
  l2-input: sw_if_index 2 dst ff:ff:ff:ff:ff:ff src 02:00:00:00:00:01
00:04:14:614478: l2-learn
  l2-learn: sw_if_index 2 dst ff:ff:ff:ff:ff:ff src 02:00:00:00:00:01 bd_index 1
00:04:14:614488: l2-flood
  l2-flood: sw_if_index 2 dst ff:ff:ff:ff:ff:ff src 02:00:00:00:00:01 bd_index 1
00:04:14:614489: l2-output
  l2-output: sw_if_index 3 dst ff:ff:ff:ff:ff:ff src 02:00:00:00:00:01 data 08 06 00 01 08 00 06 04 00 01 02 00
00:04:14:614491: host-node_2_noeth_2-output
  host-node_2_noeth_2
  ARP: 02:00:00:00:00:01 -&gt; ff:ff:ff:ff:ff:ff
  request, type ethernet/IP4, address size 6/4
  02:00:00:00:00:01/10.0.0.10 -&gt; 00:00:00:00:00:00/10.0.0.11

Packet 2

00:04:14:614515: af-packet-input
  af_packet: hw_if_index 3 next-index 4
    tpacket2_hdr:
      status 0x20000001 len 42 snaplen 42 mac 66 net 80
      sec 0x5afc302b nsec 0x15b90dc0 vlan 0 vlan_tpid 0
00:04:14:614517: ethernet-input
  ARP: 02:00:00:00:00:02 -&gt; 02:00:00:00:00:01
00:04:14:614517: l2-input
  l2-input: sw_if_index 3 dst 02:00:00:00:00:01 src 02:00:00:00:00:02
00:04:14:614518: l2-learn
  l2-learn: sw_if_index 3 dst 02:00:00:00:00:01 src 02:00:00:00:00:02 bd_index 1
00:04:14:614519: l2-fwd
  l2-fwd:   sw_if_index 3 dst 02:00:00:00:00:01 src 02:00:00:00:00:02 bd_index 1
00:04:14:614520: l2-output
  l2-output: sw_if_index 2 dst 02:00:00:00:00:01 src 02:00:00:00:00:02 data 08 06 00 01 08 00 06 04 00 02 02 00
00:04:14:614521: host-node_1_noeth_1-output
  host-node_1_noeth_1
  ARP: 02:00:00:00:00:02 -&gt; 02:00:00:00:00:01
  reply, type ethernet/IP4, address size 6/4
  02:00:00:00:00:02/10.0.0.11 -&gt; 02:00:00:00:00:01/10.0.0.10

Packet 3

00:04:14:614531: af-packet-input
  af_packet: hw_if_index 2 next-index 4
    tpacket2_hdr:
      status 0x20000001 len 98 snaplen 98 mac 66 net 80
      sec 0x5afc302b nsec 0x15b95122 vlan 0 vlan_tpid 0
00:04:14:614532: ethernet-input
  IP4: 02:00:00:00:00:01 -&gt; 02:00:00:00:00:02
00:04:14:614532: l2-input
  l2-input: sw_if_index 2 dst 02:00:00:00:00:02 src 02:00:00:00:00:01
00:04:14:614533: l2-learn
  l2-learn: sw_if_index 2 dst 02:00:00:00:00:02 src 02:00:00:00:00:01 bd_index 1
00:04:14:614533: l2-fwd
  l2-fwd:   sw_if_index 2 dst 02:00:00:00:00:02 src 02:00:00:00:00:01 bd_index 1
00:04:14:614533: l2-output
  l2-output: sw_if_index 3 dst 02:00:00:00:00:02 src 02:00:00:00:00:01 data 08 00 45 00 00 54 83 42 40 00 40 01
00:04:14:614534: host-node_2_noeth_2-output
  host-node_2_noeth_2
  IP4: 02:00:00:00:00:01 -&gt; 02:00:00:00:00:02
  ICMP: 10.0.0.10 -&gt; 10.0.0.11
    tos 0x00, ttl 64, length 84, checksum 0xa352
    fragment id 0x8342, flags DONT_FRAGMENT
  ICMP echo_request checksum 0xddf

Packet 4

00:04:14:614821: af-packet-input
  af_packet: hw_if_index 3 next-index 4
    tpacket2_hdr:
      status 0x20000001 len 98 snaplen 98 mac 66 net 80
      sec 0x5afc302b nsec 0x15ba77f9 vlan 0 vlan_tpid 0
00:04:14:614825: ethernet-input
  IP4: 02:00:00:00:00:02 -&gt; 02:00:00:00:00:01
00:04:14:614826: l2-input
  l2-input: sw_if_index 3 dst 02:00:00:00:00:01 src 02:00:00:00:00:02
00:04:14:614841: l2-learn
  l2-learn: sw_if_index 3 dst 02:00:00:00:00:01 src 02:00:00:00:00:02 bd_index 1
00:04:14:614842: l2-fwd
  l2-fwd:   sw_if_index 3 dst 02:00:00:00:00:01 src 02:00:00:00:00:02 bd_index 1
00:04:14:614842: l2-output
  l2-output: sw_if_index 2 dst 02:00:00:00:00:01 src 02:00:00:00:00:02 data 08 00 45 00 00 54 43 a2 00 00 40 01
00:04:14:614843: host-node_1_noeth_1-output
  host-node_1_noeth_1
  IP4: 02:00:00:00:00:02 -&gt; 02:00:00:00:00:01
  ICMP: 10.0.0.11 -&gt; 10.0.0.10
    tos 0x00, ttl 64, length 84, checksum 0x22f3
    fragment id 0x43a2
  ICMP echo_reply checksum 0x15df

Packet 5

00:04:15:644862: af-packet-input
  af_packet: hw_if_index 2 next-index 4
    tpacket2_hdr:
      status 0x20000001 len 98 snaplen 98 mac 66 net 80
      sec 0x5afc302c nsec 0x1783b6a5 vlan 0 vlan_tpid 0
00:04:15:644901: ethernet-input
  IP4: 02:00:00:00:00:01 -&gt; 02:00:00:00:00:02
00:04:15:644908: l2-input
  l2-input: sw_if_index 2 dst 02:00:00:00:00:02 src 02:00:00:00:00:01
00:04:15:644911: l2-learn
  l2-learn: sw_if_index 2 dst 02:00:00:00:00:02 src 02:00:00:00:00:01 bd_index 1
00:04:15:644916: l2-fwd
  l2-fwd:   sw_if_index 2 dst 02:00:00:00:00:02 src 02:00:00:00:00:01 bd_index 1
00:04:15:644919: l2-output
  l2-output: sw_if_index 3 dst 02:00:00:00:00:02 src 02:00:00:00:00:01 data 08 00 45 00 00 54 83 70 40 00 40 01
00:04:15:644922: host-node_2_noeth_2-output
  host-node_2_noeth_2
  IP4: 02:00:00:00:00:01 -&gt; 02:00:00:00:00:02
  ICMP: 10.0.0.10 -&gt; 10.0.0.11
    tos 0x00, ttl 64, length 84, checksum 0xa324
    fragment id 0x8370, flags DONT_FRAGMENT
  ICMP echo_request checksum 0x2d68

Packet 6

00:04:15:644973: af-packet-input
  af_packet: hw_if_index 3 next-index 4
    tpacket2_hdr:
      status 0x20000001 len 98 snaplen 98 mac 66 net 80
      sec 0x5afc302c nsec 0x1785fb75 vlan 0 vlan_tpid 0
00:04:15:644978: ethernet-input
  IP4: 02:00:00:00:00:02 -&gt; 02:00:00:00:00:01
00:04:15:644979: l2-input
  l2-input: sw_if_index 3 dst 02:00:00:00:00:01 src 02:00:00:00:00:02
00:04:15:644980: l2-learn
  l2-learn: sw_if_index 3 dst 02:00:00:00:00:01 src 02:00:00:00:00:02 bd_index 1
00:04:15:644982: l2-fwd
  l2-fwd:   sw_if_index 3 dst 02:00:00:00:00:01 src 02:00:00:00:00:02 bd_index 1
00:04:15:644983: l2-output
  l2-output: sw_if_index 2 dst 02:00:00:00:00:01 src 02:00:00:00:00:02 data 08 00 45 00 00 54 43 b6 00 00 40 01
00:04:15:644984: host-node_1_noeth_1-output
  host-node_1_noeth_1
  IP4: 02:00:00:00:00:02 -&gt; 02:00:00:00:00:01
  ICMP: 10.0.0.11 -&gt; 10.0.0.10
    tos 0x00, ttl 64, length 84, checksum 0x22df
    fragment id 0x43b6
  ICMP echo_reply checksum 0x3568

Packet 7

00:04:16:668732: af-packet-input
  af_packet: hw_if_index 2 next-index 4
    tpacket2_hdr:
      status 0x20000001 len 98 snaplen 98 mac 66 net 80
      sec 0x5afc302d nsec 0x18ec8bd0 vlan 0 vlan_tpid 0
00:04:16:668738: ethernet-input
  IP4: 02:00:00:00:00:01 -&gt; 02:00:00:00:00:02
00:04:16:668741: l2-input
  l2-input: sw_if_index 2 dst 02:00:00:00:00:02 src 02:00:00:00:00:01
00:04:16:668744: l2-learn
  l2-learn: sw_if_index 2 dst 02:00:00:00:00:02 src 02:00:00:00:00:01 bd_index 1
00:04:16:668746: l2-fwd
  l2-fwd:   sw_if_index 2 dst 02:00:00:00:00:02 src 02:00:00:00:00:01 bd_index 1
00:04:16:668747: l2-output
  l2-output: sw_if_index 3 dst 02:00:00:00:00:02 src 02:00:00:00:00:01 data 08 00 45 00 00 54 84 59 40 00 40 01
00:04:16:668749: host-node_2_noeth_2-output
  host-node_2_noeth_2
  IP4: 02:00:00:00:00:01 -&gt; 02:00:00:00:00:02
  ICMP: 10.0.0.10 -&gt; 10.0.0.11
    tos 0x00, ttl 64, length 84, checksum 0xa23b
    fragment id 0x8459, flags DONT_FRAGMENT
  ICMP echo_request checksum 0xb40a

Packet 8

00:04:16:668776: af-packet-input
  af_packet: hw_if_index 3 next-index 4
    tpacket2_hdr:
      status 0x20000001 len 98 snaplen 98 mac 66 net 80
      sec 0x5afc302d nsec 0x18ed8b43 vlan 0 vlan_tpid 0
00:04:16:668777: ethernet-input
  IP4: 02:00:00:00:00:02 -&gt; 02:00:00:00:00:01
00:04:16:668778: l2-input
  l2-input: sw_if_index 3 dst 02:00:00:00:00:01 src 02:00:00:00:00:02
00:04:16:668778: l2-learn
  l2-learn: sw_if_index 3 dst 02:00:00:00:00:01 src 02:00:00:00:00:02 bd_index 1
00:04:16:668779: l2-fwd
  l2-fwd:   sw_if_index 3 dst 02:00:00:00:00:01 src 02:00:00:00:00:02 bd_index 1
00:04:16:668779: l2-output
  l2-output: sw_if_index 2 dst 02:00:00:00:00:01 src 02:00:00:00:00:02 data 08 00 45 00 00 54 44 59 00 00 40 01
00:04:16:668780: host-node_1_noeth_1-output
  host-node_1_noeth_1
  IP4: 02:00:00:00:00:02 -&gt; 02:00:00:00:00:01
  ICMP: 10.0.0.11 -&gt; 10.0.0.10
    tos 0x00, ttl 64, length 84, checksum 0x223c
    fragment id 0x4459
  ICMP echo_reply checksum 0xbc0a

Packet 9

00:04:17:692645: af-packet-input
  af_packet: hw_if_index 2 next-index 4
    tpacket2_hdr:
      status 0x20000001 len 98 snaplen 98 mac 66 net 80
      sec 0x5afc302e nsec 0x1a55d24e vlan 0 vlan_tpid 0
00:04:17:692650: ethernet-input
  IP4: 02:00:00:00:00:01 -&gt; 02:00:00:00:00:02
00:04:17:692654: l2-input
  l2-input: sw_if_index 2 dst 02:00:00:00:00:02 src 02:00:00:00:00:01
00:04:17:692658: l2-learn
  l2-learn: sw_if_index 2 dst 02:00:00:00:00:02 src 02:00:00:00:00:01 bd_index 1
00:04:17:692660: l2-fwd
  l2-fwd:   sw_if_index 2 dst 02:00:00:00:00:02 src 02:00:00:00:00:01 bd_index 1
00:04:17:692662: l2-output
  l2-output: sw_if_index 3 dst 02:00:00:00:00:02 src 02:00:00:00:00:01 data 08 00 45 00 00 54 85 3f 40 00 40 01
00:04:17:692664: host-node_2_noeth_2-output
  host-node_2_noeth_2
  IP4: 02:00:00:00:00:01 -&gt; 02:00:00:00:00:02
  ICMP: 10.0.0.10 -&gt; 10.0.0.11
    tos 0x00, ttl 64, length 84, checksum 0xa155
    fragment id 0x853f, flags DONT_FRAGMENT
  ICMP echo_request checksum 0x31ad

Packet 10

00:04:17:692688: af-packet-input
  af_packet: hw_if_index 3 next-index 4
    tpacket2_hdr:
      status 0x20000001 len 98 snaplen 98 mac 66 net 80
      sec 0x5afc302e nsec 0x1a56b2c4 vlan 0 vlan_tpid 0
00:04:17:692690: ethernet-input
  IP4: 02:00:00:00:00:02 -&gt; 02:00:00:00:00:01
00:04:17:692691: l2-input
  l2-input: sw_if_index 3 dst 02:00:00:00:00:01 src 02:00:00:00:00:02
00:04:17:692691: l2-learn
  l2-learn: sw_if_index 3 dst 02:00:00:00:00:01 src 02:00:00:00:00:02 bd_index 1
00:04:17:692692: l2-fwd
  l2-fwd:   sw_if_index 3 dst 02:00:00:00:00:01 src 02:00:00:00:00:02 bd_index 1
00:04:17:692692: l2-output
  l2-output: sw_if_index 2 dst 02:00:00:00:00:01 src 02:00:00:00:00:02 data 08 00 45 00 00 54 45 36 00 00 40 01
00:04:17:692693: host-node_1_noeth_1-output
  host-node_1_noeth_1
  IP4: 02:00:00:00:00:02 -&gt; 02:00:00:00:00:01
  ICMP: 10.0.0.11 -&gt; 10.0.0.10
    tos 0x00, ttl 64, length 84, checksum 0x215f
    fragment id 0x4536
  ICMP echo_reply checksum 0x39ad

vpp#</msg>
<msg timestamp="20180516 15:21:46.925" level="INFO">${out} = ------------------- Start of thread 0 vpp_main -------------------
Packet 1

00:04:14:614462: af-packet-input
  af_packet: hw_if_index 2 next-index 4
    tpacket2_hdr:
      status 0x20000001 le...</msg>
<status status="PASS" endtime="20180516 15:21:46.925" starttime="20180516 15:21:46.793"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:21:46.925" level="INFO">------------------- Start of thread 0 vpp_main -------------------
Packet 1

00:04:14:614462: af-packet-input
  af_packet: hw_if_index 2 next-index 4
    tpacket2_hdr:
      status 0x20000001 len 42 snaplen 42 mac 66 net 80
      sec 0x5afc302b nsec 0x15b6e59c vlan 0 vlan_tpid 0
00:04:14:614472: ethernet-input
  ARP: 02:00:00:00:00:01 -&gt; ff:ff:ff:ff:ff:ff
00:04:14:614475: l2-input
  l2-input: sw_if_index 2 dst ff:ff:ff:ff:ff:ff src 02:00:00:00:00:01
00:04:14:614478: l2-learn
  l2-learn: sw_if_index 2 dst ff:ff:ff:ff:ff:ff src 02:00:00:00:00:01 bd_index 1
00:04:14:614488: l2-flood
  l2-flood: sw_if_index 2 dst ff:ff:ff:ff:ff:ff src 02:00:00:00:00:01 bd_index 1
00:04:14:614489: l2-output
  l2-output: sw_if_index 3 dst ff:ff:ff:ff:ff:ff src 02:00:00:00:00:01 data 08 06 00 01 08 00 06 04 00 01 02 00
00:04:14:614491: host-node_2_noeth_2-output
  host-node_2_noeth_2
  ARP: 02:00:00:00:00:01 -&gt; ff:ff:ff:ff:ff:ff
  request, type ethernet/IP4, address size 6/4
  02:00:00:00:00:01/10.0.0.10 -&gt; 00:00:00:00:00:00/10.0.0.11

Packet 2

00:04:14:614515: af-packet-input
  af_packet: hw_if_index 3 next-index 4
    tpacket2_hdr:
      status 0x20000001 len 42 snaplen 42 mac 66 net 80
      sec 0x5afc302b nsec 0x15b90dc0 vlan 0 vlan_tpid 0
00:04:14:614517: ethernet-input
  ARP: 02:00:00:00:00:02 -&gt; 02:00:00:00:00:01
00:04:14:614517: l2-input
  l2-input: sw_if_index 3 dst 02:00:00:00:00:01 src 02:00:00:00:00:02
00:04:14:614518: l2-learn
  l2-learn: sw_if_index 3 dst 02:00:00:00:00:01 src 02:00:00:00:00:02 bd_index 1
00:04:14:614519: l2-fwd
  l2-fwd:   sw_if_index 3 dst 02:00:00:00:00:01 src 02:00:00:00:00:02 bd_index 1
00:04:14:614520: l2-output
  l2-output: sw_if_index 2 dst 02:00:00:00:00:01 src 02:00:00:00:00:02 data 08 06 00 01 08 00 06 04 00 02 02 00
00:04:14:614521: host-node_1_noeth_1-output
  host-node_1_noeth_1
  ARP: 02:00:00:00:00:02 -&gt; 02:00:00:00:00:01
  reply, type ethernet/IP4, address size 6/4
  02:00:00:00:00:02/10.0.0.11 -&gt; 02:00:00:00:00:01/10.0.0.10

Packet 3

00:04:14:614531: af-packet-input
  af_packet: hw_if_index 2 next-index 4
    tpacket2_hdr:
      status 0x20000001 len 98 snaplen 98 mac 66 net 80
      sec 0x5afc302b nsec 0x15b95122 vlan 0 vlan_tpid 0
00:04:14:614532: ethernet-input
  IP4: 02:00:00:00:00:01 -&gt; 02:00:00:00:00:02
00:04:14:614532: l2-input
  l2-input: sw_if_index 2 dst 02:00:00:00:00:02 src 02:00:00:00:00:01
00:04:14:614533: l2-learn
  l2-learn: sw_if_index 2 dst 02:00:00:00:00:02 src 02:00:00:00:00:01 bd_index 1
00:04:14:614533: l2-fwd
  l2-fwd:   sw_if_index 2 dst 02:00:00:00:00:02 src 02:00:00:00:00:01 bd_index 1
00:04:14:614533: l2-output
  l2-output: sw_if_index 3 dst 02:00:00:00:00:02 src 02:00:00:00:00:01 data 08 00 45 00 00 54 83 42 40 00 40 01
00:04:14:614534: host-node_2_noeth_2-output
  host-node_2_noeth_2
  IP4: 02:00:00:00:00:01 -&gt; 02:00:00:00:00:02
  ICMP: 10.0.0.10 -&gt; 10.0.0.11
    tos 0x00, ttl 64, length 84, checksum 0xa352
    fragment id 0x8342, flags DONT_FRAGMENT
  ICMP echo_request checksum 0xddf

Packet 4

00:04:14:614821: af-packet-input
  af_packet: hw_if_index 3 next-index 4
    tpacket2_hdr:
      status 0x20000001 len 98 snaplen 98 mac 66 net 80
      sec 0x5afc302b nsec 0x15ba77f9 vlan 0 vlan_tpid 0
00:04:14:614825: ethernet-input
  IP4: 02:00:00:00:00:02 -&gt; 02:00:00:00:00:01
00:04:14:614826: l2-input
  l2-input: sw_if_index 3 dst 02:00:00:00:00:01 src 02:00:00:00:00:02
00:04:14:614841: l2-learn
  l2-learn: sw_if_index 3 dst 02:00:00:00:00:01 src 02:00:00:00:00:02 bd_index 1
00:04:14:614842: l2-fwd
  l2-fwd:   sw_if_index 3 dst 02:00:00:00:00:01 src 02:00:00:00:00:02 bd_index 1
00:04:14:614842: l2-output
  l2-output: sw_if_index 2 dst 02:00:00:00:00:01 src 02:00:00:00:00:02 data 08 00 45 00 00 54 43 a2 00 00 40 01
00:04:14:614843: host-node_1_noeth_1-output
  host-node_1_noeth_1
  IP4: 02:00:00:00:00:02 -&gt; 02:00:00:00:00:01
  ICMP: 10.0.0.11 -&gt; 10.0.0.10
    tos 0x00, ttl 64, length 84, checksum 0x22f3
    fragment id 0x43a2
  ICMP echo_reply checksum 0x15df

Packet 5

00:04:15:644862: af-packet-input
  af_packet: hw_if_index 2 next-index 4
    tpacket2_hdr:
      status 0x20000001 len 98 snaplen 98 mac 66 net 80
      sec 0x5afc302c nsec 0x1783b6a5 vlan 0 vlan_tpid 0
00:04:15:644901: ethernet-input
  IP4: 02:00:00:00:00:01 -&gt; 02:00:00:00:00:02
00:04:15:644908: l2-input
  l2-input: sw_if_index 2 dst 02:00:00:00:00:02 src 02:00:00:00:00:01
00:04:15:644911: l2-learn
  l2-learn: sw_if_index 2 dst 02:00:00:00:00:02 src 02:00:00:00:00:01 bd_index 1
00:04:15:644916: l2-fwd
  l2-fwd:   sw_if_index 2 dst 02:00:00:00:00:02 src 02:00:00:00:00:01 bd_index 1
00:04:15:644919: l2-output
  l2-output: sw_if_index 3 dst 02:00:00:00:00:02 src 02:00:00:00:00:01 data 08 00 45 00 00 54 83 70 40 00 40 01
00:04:15:644922: host-node_2_noeth_2-output
  host-node_2_noeth_2
  IP4: 02:00:00:00:00:01 -&gt; 02:00:00:00:00:02
  ICMP: 10.0.0.10 -&gt; 10.0.0.11
    tos 0x00, ttl 64, length 84, checksum 0xa324
    fragment id 0x8370, flags DONT_FRAGMENT
  ICMP echo_request checksum 0x2d68

Packet 6

00:04:15:644973: af-packet-input
  af_packet: hw_if_index 3 next-index 4
    tpacket2_hdr:
      status 0x20000001 len 98 snaplen 98 mac 66 net 80
      sec 0x5afc302c nsec 0x1785fb75 vlan 0 vlan_tpid 0
00:04:15:644978: ethernet-input
  IP4: 02:00:00:00:00:02 -&gt; 02:00:00:00:00:01
00:04:15:644979: l2-input
  l2-input: sw_if_index 3 dst 02:00:00:00:00:01 src 02:00:00:00:00:02
00:04:15:644980: l2-learn
  l2-learn: sw_if_index 3 dst 02:00:00:00:00:01 src 02:00:00:00:00:02 bd_index 1
00:04:15:644982: l2-fwd
  l2-fwd:   sw_if_index 3 dst 02:00:00:00:00:01 src 02:00:00:00:00:02 bd_index 1
00:04:15:644983: l2-output
  l2-output: sw_if_index 2 dst 02:00:00:00:00:01 src 02:00:00:00:00:02 data 08 00 45 00 00 54 43 b6 00 00 40 01
00:04:15:644984: host-node_1_noeth_1-output
  host-node_1_noeth_1
  IP4: 02:00:00:00:00:02 -&gt; 02:00:00:00:00:01
  ICMP: 10.0.0.11 -&gt; 10.0.0.10
    tos 0x00, ttl 64, length 84, checksum 0x22df
    fragment id 0x43b6
  ICMP echo_reply checksum 0x3568

Packet 7

00:04:16:668732: af-packet-input
  af_packet: hw_if_index 2 next-index 4
    tpacket2_hdr:
      status 0x20000001 len 98 snaplen 98 mac 66 net 80
      sec 0x5afc302d nsec 0x18ec8bd0 vlan 0 vlan_tpid 0
00:04:16:668738: ethernet-input
  IP4: 02:00:00:00:00:01 -&gt; 02:00:00:00:00:02
00:04:16:668741: l2-input
  l2-input: sw_if_index 2 dst 02:00:00:00:00:02 src 02:00:00:00:00:01
00:04:16:668744: l2-learn
  l2-learn: sw_if_index 2 dst 02:00:00:00:00:02 src 02:00:00:00:00:01 bd_index 1
00:04:16:668746: l2-fwd
  l2-fwd:   sw_if_index 2 dst 02:00:00:00:00:02 src 02:00:00:00:00:01 bd_index 1
00:04:16:668747: l2-output
  l2-output: sw_if_index 3 dst 02:00:00:00:00:02 src 02:00:00:00:00:01 data 08 00 45 00 00 54 84 59 40 00 40 01
00:04:16:668749: host-node_2_noeth_2-output
  host-node_2_noeth_2
  IP4: 02:00:00:00:00:01 -&gt; 02:00:00:00:00:02
  ICMP: 10.0.0.10 -&gt; 10.0.0.11
    tos 0x00, ttl 64, length 84, checksum 0xa23b
    fragment id 0x8459, flags DONT_FRAGMENT
  ICMP echo_request checksum 0xb40a

Packet 8

00:04:16:668776: af-packet-input
  af_packet: hw_if_index 3 next-index 4
    tpacket2_hdr:
      status 0x20000001 len 98 snaplen 98 mac 66 net 80
      sec 0x5afc302d nsec 0x18ed8b43 vlan 0 vlan_tpid 0
00:04:16:668777: ethernet-input
  IP4: 02:00:00:00:00:02 -&gt; 02:00:00:00:00:01
00:04:16:668778: l2-input
  l2-input: sw_if_index 3 dst 02:00:00:00:00:01 src 02:00:00:00:00:02
00:04:16:668778: l2-learn
  l2-learn: sw_if_index 3 dst 02:00:00:00:00:01 src 02:00:00:00:00:02 bd_index 1
00:04:16:668779: l2-fwd
  l2-fwd:   sw_if_index 3 dst 02:00:00:00:00:01 src 02:00:00:00:00:02 bd_index 1
00:04:16:668779: l2-output
  l2-output: sw_if_index 2 dst 02:00:00:00:00:01 src 02:00:00:00:00:02 data 08 00 45 00 00 54 44 59 00 00 40 01
00:04:16:668780: host-node_1_noeth_1-output
  host-node_1_noeth_1
  IP4: 02:00:00:00:00:02 -&gt; 02:00:00:00:00:01
  ICMP: 10.0.0.11 -&gt; 10.0.0.10
    tos 0x00, ttl 64, length 84, checksum 0x223c
    fragment id 0x4459
  ICMP echo_reply checksum 0xbc0a

Packet 9

00:04:17:692645: af-packet-input
  af_packet: hw_if_index 2 next-index 4
    tpacket2_hdr:
      status 0x20000001 len 98 snaplen 98 mac 66 net 80
      sec 0x5afc302e nsec 0x1a55d24e vlan 0 vlan_tpid 0
00:04:17:692650: ethernet-input
  IP4: 02:00:00:00:00:01 -&gt; 02:00:00:00:00:02
00:04:17:692654: l2-input
  l2-input: sw_if_index 2 dst 02:00:00:00:00:02 src 02:00:00:00:00:01
00:04:17:692658: l2-learn
  l2-learn: sw_if_index 2 dst 02:00:00:00:00:02 src 02:00:00:00:00:01 bd_index 1
00:04:17:692660: l2-fwd
  l2-fwd:   sw_if_index 2 dst 02:00:00:00:00:02 src 02:00:00:00:00:01 bd_index 1
00:04:17:692662: l2-output
  l2-output: sw_if_index 3 dst 02:00:00:00:00:02 src 02:00:00:00:00:01 data 08 00 45 00 00 54 85 3f 40 00 40 01
00:04:17:692664: host-node_2_noeth_2-output
  host-node_2_noeth_2
  IP4: 02:00:00:00:00:01 -&gt; 02:00:00:00:00:02
  ICMP: 10.0.0.10 -&gt; 10.0.0.11
    tos 0x00, ttl 64, length 84, checksum 0xa155
    fragment id 0x853f, flags DONT_FRAGMENT
  ICMP echo_request checksum 0x31ad

Packet 10

00:04:17:692688: af-packet-input
  af_packet: hw_if_index 3 next-index 4
    tpacket2_hdr:
      status 0x20000001 len 98 snaplen 98 mac 66 net 80
      sec 0x5afc302e nsec 0x1a56b2c4 vlan 0 vlan_tpid 0
00:04:17:692690: ethernet-input
  IP4: 02:00:00:00:00:02 -&gt; 02:00:00:00:00:01
00:04:17:692691: l2-input
  l2-input: sw_if_index 3 dst 02:00:00:00:00:01 src 02:00:00:00:00:02
00:04:17:692691: l2-learn
  l2-learn: sw_if_index 3 dst 02:00:00:00:00:01 src 02:00:00:00:00:02 bd_index 1
00:04:17:692692: l2-fwd
  l2-fwd:   sw_if_index 3 dst 02:00:00:00:00:01 src 02:00:00:00:00:02 bd_index 1
00:04:17:692692: l2-output
  l2-output: sw_if_index 2 dst 02:00:00:00:00:01 src 02:00:00:00:00:02 data 08 00 45 00 00 54 45 36 00 00 40 01
00:04:17:692693: host-node_1_noeth_1-output
  host-node_1_noeth_1
  IP4: 02:00:00:00:00:02 -&gt; 02:00:00:00:00:01
  ICMP: 10.0.0.11 -&gt; 10.0.0.10
    tos 0x00, ttl 64, length 84, checksum 0x215f
    fragment id 0x4536
  ICMP echo_reply checksum 0x39ad

vpp#</msg>
<status status="PASS" endtime="20180516 15:21:46.926" starttime="20180516 15:21:46.925"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>delay=${delay}</arg>
</arguments>
<assign>
<var>${out2}</var>
</assign>
<msg timestamp="20180516 15:21:49.930" level="INFO">${out2} =  </msg>
<status status="PASS" endtime="20180516 15:21:49.930" starttime="20180516 15:21:46.926"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out2}</arg>
</arguments>
<msg timestamp="20180516 15:21:49.930" level="INFO"> </msg>
<status status="PASS" endtime="20180516 15:21:49.931" starttime="20180516 15:21:49.930"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${out2}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:21:49.932" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_term.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_term.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:21:49.932" starttime="20180516 15:21:49.931"></status>
</kw>
<msg timestamp="20180516 15:21:49.932" level="INFO">${out} = ------------------- Start of thread 0 vpp_main -------------------
Packet 1

00:04:14:614462: af-packet-input
  af_packet: hw_if_index 2 next-index 4
    tpacket2_hdr:
      status 0x20000001 le...</msg>
<status status="PASS" endtime="20180516 15:21:49.932" starttime="20180516 15:21:46.779"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:21:49.933" level="INFO">------------------- Start of thread 0 vpp_main -------------------
Packet 1

00:04:14:614462: af-packet-input
  af_packet: hw_if_index 2 next-index 4
    tpacket2_hdr:
      status 0x20000001 len 42 snaplen 42 mac 66 net 80
      sec 0x5afc302b nsec 0x15b6e59c vlan 0 vlan_tpid 0
00:04:14:614472: ethernet-input
  ARP: 02:00:00:00:00:01 -&gt; ff:ff:ff:ff:ff:ff
00:04:14:614475: l2-input
  l2-input: sw_if_index 2 dst ff:ff:ff:ff:ff:ff src 02:00:00:00:00:01
00:04:14:614478: l2-learn
  l2-learn: sw_if_index 2 dst ff:ff:ff:ff:ff:ff src 02:00:00:00:00:01 bd_index 1
00:04:14:614488: l2-flood
  l2-flood: sw_if_index 2 dst ff:ff:ff:ff:ff:ff src 02:00:00:00:00:01 bd_index 1
00:04:14:614489: l2-output
  l2-output: sw_if_index 3 dst ff:ff:ff:ff:ff:ff src 02:00:00:00:00:01 data 08 06 00 01 08 00 06 04 00 01 02 00
00:04:14:614491: host-node_2_noeth_2-output
  host-node_2_noeth_2
  ARP: 02:00:00:00:00:01 -&gt; ff:ff:ff:ff:ff:ff
  request, type ethernet/IP4, address size 6/4
  02:00:00:00:00:01/10.0.0.10 -&gt; 00:00:00:00:00:00/10.0.0.11

Packet 2

00:04:14:614515: af-packet-input
  af_packet: hw_if_index 3 next-index 4
    tpacket2_hdr:
      status 0x20000001 len 42 snaplen 42 mac 66 net 80
      sec 0x5afc302b nsec 0x15b90dc0 vlan 0 vlan_tpid 0
00:04:14:614517: ethernet-input
  ARP: 02:00:00:00:00:02 -&gt; 02:00:00:00:00:01
00:04:14:614517: l2-input
  l2-input: sw_if_index 3 dst 02:00:00:00:00:01 src 02:00:00:00:00:02
00:04:14:614518: l2-learn
  l2-learn: sw_if_index 3 dst 02:00:00:00:00:01 src 02:00:00:00:00:02 bd_index 1
00:04:14:614519: l2-fwd
  l2-fwd:   sw_if_index 3 dst 02:00:00:00:00:01 src 02:00:00:00:00:02 bd_index 1
00:04:14:614520: l2-output
  l2-output: sw_if_index 2 dst 02:00:00:00:00:01 src 02:00:00:00:00:02 data 08 06 00 01 08 00 06 04 00 02 02 00
00:04:14:614521: host-node_1_noeth_1-output
  host-node_1_noeth_1
  ARP: 02:00:00:00:00:02 -&gt; 02:00:00:00:00:01
  reply, type ethernet/IP4, address size 6/4
  02:00:00:00:00:02/10.0.0.11 -&gt; 02:00:00:00:00:01/10.0.0.10

Packet 3

00:04:14:614531: af-packet-input
  af_packet: hw_if_index 2 next-index 4
    tpacket2_hdr:
      status 0x20000001 len 98 snaplen 98 mac 66 net 80
      sec 0x5afc302b nsec 0x15b95122 vlan 0 vlan_tpid 0
00:04:14:614532: ethernet-input
  IP4: 02:00:00:00:00:01 -&gt; 02:00:00:00:00:02
00:04:14:614532: l2-input
  l2-input: sw_if_index 2 dst 02:00:00:00:00:02 src 02:00:00:00:00:01
00:04:14:614533: l2-learn
  l2-learn: sw_if_index 2 dst 02:00:00:00:00:02 src 02:00:00:00:00:01 bd_index 1
00:04:14:614533: l2-fwd
  l2-fwd:   sw_if_index 2 dst 02:00:00:00:00:02 src 02:00:00:00:00:01 bd_index 1
00:04:14:614533: l2-output
  l2-output: sw_if_index 3 dst 02:00:00:00:00:02 src 02:00:00:00:00:01 data 08 00 45 00 00 54 83 42 40 00 40 01
00:04:14:614534: host-node_2_noeth_2-output
  host-node_2_noeth_2
  IP4: 02:00:00:00:00:01 -&gt; 02:00:00:00:00:02
  ICMP: 10.0.0.10 -&gt; 10.0.0.11
    tos 0x00, ttl 64, length 84, checksum 0xa352
    fragment id 0x8342, flags DONT_FRAGMENT
  ICMP echo_request checksum 0xddf

Packet 4

00:04:14:614821: af-packet-input
  af_packet: hw_if_index 3 next-index 4
    tpacket2_hdr:
      status 0x20000001 len 98 snaplen 98 mac 66 net 80
      sec 0x5afc302b nsec 0x15ba77f9 vlan 0 vlan_tpid 0
00:04:14:614825: ethernet-input
  IP4: 02:00:00:00:00:02 -&gt; 02:00:00:00:00:01
00:04:14:614826: l2-input
  l2-input: sw_if_index 3 dst 02:00:00:00:00:01 src 02:00:00:00:00:02
00:04:14:614841: l2-learn
  l2-learn: sw_if_index 3 dst 02:00:00:00:00:01 src 02:00:00:00:00:02 bd_index 1
00:04:14:614842: l2-fwd
  l2-fwd:   sw_if_index 3 dst 02:00:00:00:00:01 src 02:00:00:00:00:02 bd_index 1
00:04:14:614842: l2-output
  l2-output: sw_if_index 2 dst 02:00:00:00:00:01 src 02:00:00:00:00:02 data 08 00 45 00 00 54 43 a2 00 00 40 01
00:04:14:614843: host-node_1_noeth_1-output
  host-node_1_noeth_1
  IP4: 02:00:00:00:00:02 -&gt; 02:00:00:00:00:01
  ICMP: 10.0.0.11 -&gt; 10.0.0.10
    tos 0x00, ttl 64, length 84, checksum 0x22f3
    fragment id 0x43a2
  ICMP echo_reply checksum 0x15df

Packet 5

00:04:15:644862: af-packet-input
  af_packet: hw_if_index 2 next-index 4
    tpacket2_hdr:
      status 0x20000001 len 98 snaplen 98 mac 66 net 80
      sec 0x5afc302c nsec 0x1783b6a5 vlan 0 vlan_tpid 0
00:04:15:644901: ethernet-input
  IP4: 02:00:00:00:00:01 -&gt; 02:00:00:00:00:02
00:04:15:644908: l2-input
  l2-input: sw_if_index 2 dst 02:00:00:00:00:02 src 02:00:00:00:00:01
00:04:15:644911: l2-learn
  l2-learn: sw_if_index 2 dst 02:00:00:00:00:02 src 02:00:00:00:00:01 bd_index 1
00:04:15:644916: l2-fwd
  l2-fwd:   sw_if_index 2 dst 02:00:00:00:00:02 src 02:00:00:00:00:01 bd_index 1
00:04:15:644919: l2-output
  l2-output: sw_if_index 3 dst 02:00:00:00:00:02 src 02:00:00:00:00:01 data 08 00 45 00 00 54 83 70 40 00 40 01
00:04:15:644922: host-node_2_noeth_2-output
  host-node_2_noeth_2
  IP4: 02:00:00:00:00:01 -&gt; 02:00:00:00:00:02
  ICMP: 10.0.0.10 -&gt; 10.0.0.11
    tos 0x00, ttl 64, length 84, checksum 0xa324
    fragment id 0x8370, flags DONT_FRAGMENT
  ICMP echo_request checksum 0x2d68

Packet 6

00:04:15:644973: af-packet-input
  af_packet: hw_if_index 3 next-index 4
    tpacket2_hdr:
      status 0x20000001 len 98 snaplen 98 mac 66 net 80
      sec 0x5afc302c nsec 0x1785fb75 vlan 0 vlan_tpid 0
00:04:15:644978: ethernet-input
  IP4: 02:00:00:00:00:02 -&gt; 02:00:00:00:00:01
00:04:15:644979: l2-input
  l2-input: sw_if_index 3 dst 02:00:00:00:00:01 src 02:00:00:00:00:02
00:04:15:644980: l2-learn
  l2-learn: sw_if_index 3 dst 02:00:00:00:00:01 src 02:00:00:00:00:02 bd_index 1
00:04:15:644982: l2-fwd
  l2-fwd:   sw_if_index 3 dst 02:00:00:00:00:01 src 02:00:00:00:00:02 bd_index 1
00:04:15:644983: l2-output
  l2-output: sw_if_index 2 dst 02:00:00:00:00:01 src 02:00:00:00:00:02 data 08 00 45 00 00 54 43 b6 00 00 40 01
00:04:15:644984: host-node_1_noeth_1-output
  host-node_1_noeth_1
  IP4: 02:00:00:00:00:02 -&gt; 02:00:00:00:00:01
  ICMP: 10.0.0.11 -&gt; 10.0.0.10
    tos 0x00, ttl 64, length 84, checksum 0x22df
    fragment id 0x43b6
  ICMP echo_reply checksum 0x3568

Packet 7

00:04:16:668732: af-packet-input
  af_packet: hw_if_index 2 next-index 4
    tpacket2_hdr:
      status 0x20000001 len 98 snaplen 98 mac 66 net 80
      sec 0x5afc302d nsec 0x18ec8bd0 vlan 0 vlan_tpid 0
00:04:16:668738: ethernet-input
  IP4: 02:00:00:00:00:01 -&gt; 02:00:00:00:00:02
00:04:16:668741: l2-input
  l2-input: sw_if_index 2 dst 02:00:00:00:00:02 src 02:00:00:00:00:01
00:04:16:668744: l2-learn
  l2-learn: sw_if_index 2 dst 02:00:00:00:00:02 src 02:00:00:00:00:01 bd_index 1
00:04:16:668746: l2-fwd
  l2-fwd:   sw_if_index 2 dst 02:00:00:00:00:02 src 02:00:00:00:00:01 bd_index 1
00:04:16:668747: l2-output
  l2-output: sw_if_index 3 dst 02:00:00:00:00:02 src 02:00:00:00:00:01 data 08 00 45 00 00 54 84 59 40 00 40 01
00:04:16:668749: host-node_2_noeth_2-output
  host-node_2_noeth_2
  IP4: 02:00:00:00:00:01 -&gt; 02:00:00:00:00:02
  ICMP: 10.0.0.10 -&gt; 10.0.0.11
    tos 0x00, ttl 64, length 84, checksum 0xa23b
    fragment id 0x8459, flags DONT_FRAGMENT
  ICMP echo_request checksum 0xb40a

Packet 8

00:04:16:668776: af-packet-input
  af_packet: hw_if_index 3 next-index 4
    tpacket2_hdr:
      status 0x20000001 len 98 snaplen 98 mac 66 net 80
      sec 0x5afc302d nsec 0x18ed8b43 vlan 0 vlan_tpid 0
00:04:16:668777: ethernet-input
  IP4: 02:00:00:00:00:02 -&gt; 02:00:00:00:00:01
00:04:16:668778: l2-input
  l2-input: sw_if_index 3 dst 02:00:00:00:00:01 src 02:00:00:00:00:02
00:04:16:668778: l2-learn
  l2-learn: sw_if_index 3 dst 02:00:00:00:00:01 src 02:00:00:00:00:02 bd_index 1
00:04:16:668779: l2-fwd
  l2-fwd:   sw_if_index 3 dst 02:00:00:00:00:01 src 02:00:00:00:00:02 bd_index 1
00:04:16:668779: l2-output
  l2-output: sw_if_index 2 dst 02:00:00:00:00:01 src 02:00:00:00:00:02 data 08 00 45 00 00 54 44 59 00 00 40 01
00:04:16:668780: host-node_1_noeth_1-output
  host-node_1_noeth_1
  IP4: 02:00:00:00:00:02 -&gt; 02:00:00:00:00:01
  ICMP: 10.0.0.11 -&gt; 10.0.0.10
    tos 0x00, ttl 64, length 84, checksum 0x223c
    fragment id 0x4459
  ICMP echo_reply checksum 0xbc0a

Packet 9

00:04:17:692645: af-packet-input
  af_packet: hw_if_index 2 next-index 4
    tpacket2_hdr:
      status 0x20000001 len 98 snaplen 98 mac 66 net 80
      sec 0x5afc302e nsec 0x1a55d24e vlan 0 vlan_tpid 0
00:04:17:692650: ethernet-input
  IP4: 02:00:00:00:00:01 -&gt; 02:00:00:00:00:02
00:04:17:692654: l2-input
  l2-input: sw_if_index 2 dst 02:00:00:00:00:02 src 02:00:00:00:00:01
00:04:17:692658: l2-learn
  l2-learn: sw_if_index 2 dst 02:00:00:00:00:02 src 02:00:00:00:00:01 bd_index 1
00:04:17:692660: l2-fwd
  l2-fwd:   sw_if_index 2 dst 02:00:00:00:00:02 src 02:00:00:00:00:01 bd_index 1
00:04:17:692662: l2-output
  l2-output: sw_if_index 3 dst 02:00:00:00:00:02 src 02:00:00:00:00:01 data 08 00 45 00 00 54 85 3f 40 00 40 01
00:04:17:692664: host-node_2_noeth_2-output
  host-node_2_noeth_2
  IP4: 02:00:00:00:00:01 -&gt; 02:00:00:00:00:02
  ICMP: 10.0.0.10 -&gt; 10.0.0.11
    tos 0x00, ttl 64, length 84, checksum 0xa155
    fragment id 0x853f, flags DONT_FRAGMENT
  ICMP echo_request checksum 0x31ad

Packet 10

00:04:17:692688: af-packet-input
  af_packet: hw_if_index 3 next-index 4
    tpacket2_hdr:
      status 0x20000001 len 98 snaplen 98 mac 66 net 80
      sec 0x5afc302e nsec 0x1a56b2c4 vlan 0 vlan_tpid 0
00:04:17:692690: ethernet-input
  IP4: 02:00:00:00:00:02 -&gt; 02:00:00:00:00:01
00:04:17:692691: l2-input
  l2-input: sw_if_index 3 dst 02:00:00:00:00:01 src 02:00:00:00:00:02
00:04:17:692691: l2-learn
  l2-learn: sw_if_index 3 dst 02:00:00:00:00:01 src 02:00:00:00:00:02 bd_index 1
00:04:17:692692: l2-fwd
  l2-fwd:   sw_if_index 3 dst 02:00:00:00:00:01 src 02:00:00:00:00:02 bd_index 1
00:04:17:692692: l2-output
  l2-output: sw_if_index 2 dst 02:00:00:00:00:01 src 02:00:00:00:00:02 data 08 00 45 00 00 54 45 36 00 00 40 01
00:04:17:692693: host-node_1_noeth_1-output
  host-node_1_noeth_1
  IP4: 02:00:00:00:00:02 -&gt; 02:00:00:00:00:01
  ICMP: 10.0.0.11 -&gt; 10.0.0.10
    tos 0x00, ttl 64, length 84, checksum 0x215f
    fragment id 0x4536
  ICMP echo_reply checksum 0x39ad

vpp# </msg>
<status status="PASS" endtime="20180516 15:21:49.933" starttime="20180516 15:21:49.933"></status>
</kw>
<msg timestamp="20180516 15:21:49.933" level="INFO">${out} = ------------------- Start of thread 0 vpp_main -------------------
Packet 1

00:04:14:614462: af-packet-input
  af_packet: hw_if_index 2 next-index 4
    tpacket2_hdr:
      status 0x20000001 le...</msg>
<status status="PASS" endtime="20180516 15:21:49.933" starttime="20180516 15:21:46.773"></status>
</kw>
<status status="PASS" endtime="20180516 15:21:49.934" starttime="20180516 15:21:46.772"></status>
</kw>
<kw type="teardown" name="TestTeardown">
<kw name="Make Datastore Snapshots" library="setup-teardown">
<arguments>
<arg>${TEST_NAME}_test_teardown</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tag}</arg>
</arguments>
<msg timestamp="20180516 15:21:49.935" level="INFO">Show Tracing_test_teardown</msg>
<status status="PASS" endtime="20180516 15:21:49.935" starttime="20180516 15:21:49.935"></status>
</kw>
<kw name="Create Next Snapshot Prefix" library="setup-teardown">
<assign>
<var>${prefix}</var>
</assign>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>str(${snapshot_num}).zfill(3)</arg>
</arguments>
<assign>
<var>${prefix}</var>
</assign>
<msg timestamp="20180516 15:21:49.936" level="INFO">${prefix} = 036</msg>
<status status="PASS" endtime="20180516 15:21:49.936" starttime="20180516 15:21:49.935"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${snapshot_num}+1</arg>
</arguments>
<assign>
<var>${snapshot_num}</var>
</assign>
<msg timestamp="20180516 15:21:49.936" level="INFO">${snapshot_num} = 37</msg>
<status status="PASS" endtime="20180516 15:21:49.936" starttime="20180516 15:21:49.936"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${snapshot_num}</arg>
</arguments>
<msg timestamp="20180516 15:21:49.937" level="INFO">${snapshot_num} = 37</msg>
<status status="PASS" endtime="20180516 15:21:49.937" starttime="20180516 15:21:49.937"></status>
</kw>
<msg timestamp="20180516 15:21:49.937" level="INFO">${prefix} = 036</msg>
<status status="PASS" endtime="20180516 15:21:49.937" starttime="20180516 15:21:49.935"></status>
</kw>
<kw name="Take ETCD Snapshots" library="setup-teardown">
<arguments>
<arg>${prefix}_${tag}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tag}</arg>
</arguments>
<msg timestamp="20180516 15:21:49.939" level="INFO">036_Show Tracing_test_teardown</msg>
<status status="PASS" endtime="20180516 15:21:49.939" starttime="20180516 15:21:49.938"></status>
</kw>
<kw name="Get ETCD Dump" library="setup-teardown">
<assign>
<var>${dump}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DOCKER_COMMAND} exec etcd etcdctl get --prefix="true" ""</arg>
</arguments>
<assign>
<var>${command}</var>
</assign>
<msg timestamp="20180516 15:21:49.940" level="INFO">${command} = sudo docker exec etcd etcdctl get --prefix="true" ""</msg>
<status status="PASS" endtime="20180516 15:21:49.940" starttime="20180516 15:21:49.939"></status>
</kw>
<kw name="Execute On Machine" library="ssh">
<doc>*Execute On Machine ${machine} sudo docker exec etcd etcdctl get --prefix="true" ""*</doc>
<arguments>
<arg>docker</arg>
<arg>${command}</arg>
<arg>log=false</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${log}</arg>
</arguments>
<msg timestamp="20180516 15:21:49.946" level="INFO">docker</msg>
<msg timestamp="20180516 15:21:49.946" level="INFO">sudo docker exec etcd etcdctl get --prefix="true" ""</msg>
<msg timestamp="20180516 15:21:49.947" level="INFO">false</msg>
<status status="PASS" endtime="20180516 15:21:49.947" starttime="20180516 15:21:49.946"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:21:49.947" starttime="20180516 15:21:49.947"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:21:49.948" level="INFO">${currdate} = 2018-05-16 15:21:49.947</msg>
<status status="PASS" endtime="20180516 15:21:49.948" starttime="20180516 15:21:49.947"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20180516 15:21:49.948" level="INFO">Executing command 'sudo docker exec etcd etcdctl get --prefix="true" ""'.</msg>
<msg timestamp="20180516 15:21:50.492" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:21:50.492" level="INFO">${out} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<msg timestamp="20180516 15:21:50.492" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20180516 15:21:50.492" starttime="20180516 15:21:49.948"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${out}</arg>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:21:50.493" level="INFO">/sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-containers","description":"Wire 2 VNF containers to the vpp switch","type":2,"elements":[{"container":"node_1","port_label":"node1_veth","etcd_vpp_switch_key":"agent_vpp_1","ipv4_addr":"10.0.0.10","type":3},{"container":"node_2","port_label":"node2_veth","etcd_vpp_switch_key":"agent_vpp_1","ipv4_addr":"10.0.0.11","type":3}]}
/sfc-controller/v1/SP
{"mtu":1500,"starting_vlan_id":5000,"default_static_route_weight":5,"dynamic_bridge_parms":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true},"static_bridge_parms":{"forward":true}}
/sfc-controller/v1/id/HE/agent_vpp_1
{"name":"agent_vpp_1"}
/sfc-controller/v1/id/SFC/two-sample-vnf-containers/node_1_node1_veth
{"sfc_name":"two-sample-vnf-containers","container":"node_1","port":"node1_veth","mac_addr_id":1,"veth_id":1}
/sfc-controller/v1/id/SFC/two-sample-vnf-containers/node_2_node2_veth
{"sfc_name":"two-sample-vnf-containers","container":"node_2","port":"node2_veth","mac_addr_id":2,"veth_id":2}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VNF_node_1_node1_veth
{"name":"IF_VETH_VNF_node_1_node1_veth","enabled":true,"phys_address":"02:00:00:00:00:01","mtu":1500,"host_if_name":"node1_veth","ip_addresses":["10.0.0.10/24"],"namespace":{"type":1,"microservice":"node_1"},"veth":{"peer_if_name":"IF_VETH_VSWITCH_node_1_node1_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VNF_node_2_node2_veth
{"name":"IF_VETH_VNF_node_2_node2_veth","enabled":true,"phys_address":"02:00:00:00:00:02","mtu":1500,"host_if_name":"node2_veth","ip_addresses":["10.0.0.11/24"],"namespace":{"type":1,"microservice":"node_2"},"veth":{"peer_if_name":"IF_VETH_VSWITCH_node_2_node2_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VSWITCH_node_1_node1_veth
{"name":"IF_VETH_VSWITCH_node_1_node1_veth","enabled":true,"mtu":1500,"host_if_name":"node_1_noeth_1","namespace":{"type":1,"microservice":"agent_vpp_1"},"veth":{"peer_if_name":"IF_VETH_VNF_node_1_node1_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VSWITCH_node_2_node2_veth
{"name":"IF_VETH_VSWITCH_node_2_node2_veth","enabled":true,"mtu":1500,"host_if_name":"node_2_noeth_2","namespace":{"type":1,"microservice":"agent_vpp_1"},"veth":{"peer_if_name":"IF_VETH_VNF_node_2_node2_veth"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/BD_INTERNAL_EW_L2FIB_agent_vpp_1
{"name":"BD_INTERNAL_EW_L2FIB_agent_vpp_1","forward":true}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/BD_INTERNAL_EW_agent_vpp_1
{"name":"BD_INTERNAL_EW_agent_vpp_1","flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true,"interfaces":[{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth"},{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth"}]}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/bd2
{
  "name": "bd2",
  "flood": true,
  "unknown_unicast_flood": true,
  "forward": true,
  "learn": true,
  "arp_termination": true,
  "interfaces": [
    { "name": "loop0" },{ "name": "loop1" }
  ]
}


/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth
{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","type":4,"enabled":true,"mtu":1500,"afpacket":{"host_if_name":"node_1_noeth_1"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth
{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","type":4,"enabled":true,"mtu":1500,"afpacket":{"host_if_name":"node_2_noeth_2"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_LOOPBACK_H_agent_vpp_1
{"name":"IF_LOOPBACK_H_agent_vpp_1","enabled":true,"phys_address":"02:00:00:AA:BB:00","mtu":1500,"ip_addresses":["6.0.0.100"]}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/loop0
{
  "name": "loop0",
  "type": 0,
  "enabled": true,
  "phys_address": "8a:f1:be:90:00:00",
  "mtu": 1500,
  "vrf": 0,
  "ip_addresses": [
    "20.1.1.1/24"
  ]
}


/vnf-agent/agent_vpp_1/vpp/config/v1/interface/loop1
{
  "name": "loop1",
  "type": 0,
  "enabled": true,
  "phys_address": "8a:f1:be:90:20:00",
  "mtu": 1500,
  "vrf": 0,
  "ip_addresses": [
    "30.1.1.1/24"
  ]
}


/vnf-agent/agent_vpp_1/vpp/status/v1/bd/BD_INTERNAL_EW_L2FIB_agent_vpp_1
{"index":2,"internal_name":"BD_INTERNAL_EW_L2FIB_agent_vpp_1","bvi_interface":"not_set","last_change":1526476631,"l2_params":{"forward":true}}
/vnf-agent/agent_vpp_1/vpp/status/v1/bd/BD_INTERNAL_EW_agent_vpp_1
{"index":1,"internal_name":"BD_INTERNAL_EW_agent_vpp_1","bvi_interface":"not_set","interface_count":2,"last_change":1526476631,"l2_params":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true},"interfaces":[{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","sw_if_index":2},{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","sw_if_index":3}]}
/vnf-agent/agent_vpp_1/vpp/status/v1/bd/bd2
{"index":3,"internal_name":"bd2","bvi_interface":"not_set","interface_count":2,"last_change":1526476768,"l2_params":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true,"arp_termination":true},"interfaces":[{"name":"loop0","sw_if_index":4},{"name":"loop1","sw_if_index":5}]}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth
{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","internal_name":"host-node_1_noeth_1","if_index":2,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:3e:fd:61:28","mtu":1500,"statistics":{"in_packets":20,"in_bytes":1552}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth
{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","internal_name":"host-node_2_noeth_2","if_index":3,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:42:98:22:08","mtu":1500,"statistics":{"in_packets":22,"in_bytes":1732}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_LOOPBACK_H_agent_vpp_1
{"name":"IF_LOOPBACK_H_agent_vpp_1","internal_name":"loop0","if_index":1,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:00:00:aa:bb:00","mtu":1500,"statistics":{}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/local0
{"name":"local0","internal_name":"local0","admin_status":2,"oper_status":2,"statistics":{}}
/vnf-agent/node_1/check/status/v1/agent
{"build_version":"v1.1-5-g55e9977","build_date":"2018-03-06T11:05+00:00","state":1,"start_time":1526476614,"last_change":1526476619,"last_update":1526476905,"commit_hash":"55e99770087087fa8e41a980a8b6257c80c93f4c"}
/vnf-agent/node_1/check/status/v1/plugin/etcdv3
{"state":1,"last_change":1526476619,"last_update":1526476905}
/vnf-agent/node_1/check/status/v1/plugin/kafka
{"state":1,"last_change":1526476619,"last_update":1526476905}
/vnf-agent/node_2/check/status/v1/agent
{"build_version":"v1.1-5-g55e9977","build_date":"2018-03-06T11:05+00:00","state":1,"start_time":1526476623,"last_change":1526476628,"last_update":1526476903,"commit_hash":"55e99770087087fa8e41a980a8b6257c80c93f4c"}
/vnf-agent/node_2/check/status/v1/plugin/etcdv3
{"state":1,"last_change":1526476628,"last_update":1526476903}
/vnf-agent/node_2/check/status/v1/plugin/kafka
{"state":1,"last_change":1526476628,"last_update":1526476903}</msg>
<msg timestamp="20180516 15:21:50.493" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:21:50.493" starttime="20180516 15:21:50.493"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:21:50.494" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:21:50.494" starttime="20180516 15:21:50.494"></status>
</kw>
<msg timestamp="20180516 15:21:50.494" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:21:50.494" starttime="20180516 15:21:50.494"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} on ${machine}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:21:50.495" starttime="20180516 15:21:50.495"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${log}'=='true'</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:21:50.495" starttime="20180516 15:21:50.495"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:21:50.496" starttime="20180516 15:21:50.496"></status>
</kw>
<msg timestamp="20180516 15:21:50.496" level="INFO">${out} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<status status="PASS" endtime="20180516 15:21:50.496" starttime="20180516 15:21:49.945"></status>
</kw>
<msg timestamp="20180516 15:21:50.496" level="INFO">${dump} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<status status="PASS" endtime="20180516 15:21:50.496" starttime="20180516 15:21:49.939"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/etcd_dump-${tag}.txt</arg>
<arg>${dump}</arg>
</arguments>
<msg timestamp="20180516 15:21:50.497" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/etcd_dump-036_Show Tracing_test_teardown.txt"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/etcd_dump-036_Show Tracing_test_teardown.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:21:50.497" starttime="20180516 15:21:50.497"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${dump}</arg>
<arg>/error/</arg>
</arguments>
<assign>
<var>${errors}</var>
</assign>
<msg timestamp="20180516 15:21:50.498" level="INFO">0 out of 98 lines matched</msg>
<msg timestamp="20180516 15:21:50.498" level="INFO">${errors} = </msg>
<status status="PASS" endtime="20180516 15:21:50.498" starttime="20180516 15:21:50.497"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${errors}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${errors}</arg>
</arguments>
<msg timestamp="20180516 15:21:50.499" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:21:50.499" starttime="20180516 15:21:50.498"></status>
</kw>
<msg timestamp="20180516 15:21:50.499" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:21:50.499" starttime="20180516 15:21:50.498"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>Errors detected in keys: ${errors}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:21:50.499" starttime="20180516 15:21:50.499"></status>
</kw>
<status status="PASS" endtime="20180516 15:21:50.499" starttime="20180516 15:21:49.938"></status>
</kw>
<status status="PASS" endtime="20180516 15:21:50.499" starttime="20180516 15:21:49.934"></status>
</kw>
<status status="PASS" endtime="20180516 15:21:50.500" starttime="20180516 15:21:49.934"></status>
</kw>
<status status="PASS" endtime="20180516 15:21:50.500" critical="yes" starttime="20180516 15:21:46.214"></status>
</test>
<test id="s1-t18" name="Done">
<kw type="setup" name="TestSetup">
<kw name="Make Datastore Snapshots" library="setup-teardown">
<arguments>
<arg>${TEST_NAME}_test_setup</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tag}</arg>
</arguments>
<msg timestamp="20180516 15:21:50.502" level="INFO">Done_test_setup</msg>
<status status="PASS" endtime="20180516 15:21:50.502" starttime="20180516 15:21:50.501"></status>
</kw>
<kw name="Create Next Snapshot Prefix" library="setup-teardown">
<assign>
<var>${prefix}</var>
</assign>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>str(${snapshot_num}).zfill(3)</arg>
</arguments>
<assign>
<var>${prefix}</var>
</assign>
<msg timestamp="20180516 15:21:50.502" level="INFO">${prefix} = 037</msg>
<status status="PASS" endtime="20180516 15:21:50.503" starttime="20180516 15:21:50.502"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${snapshot_num}+1</arg>
</arguments>
<assign>
<var>${snapshot_num}</var>
</assign>
<msg timestamp="20180516 15:21:50.503" level="INFO">${snapshot_num} = 38</msg>
<status status="PASS" endtime="20180516 15:21:50.503" starttime="20180516 15:21:50.503"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${snapshot_num}</arg>
</arguments>
<msg timestamp="20180516 15:21:50.504" level="INFO">${snapshot_num} = 38</msg>
<status status="PASS" endtime="20180516 15:21:50.504" starttime="20180516 15:21:50.503"></status>
</kw>
<msg timestamp="20180516 15:21:50.504" level="INFO">${prefix} = 037</msg>
<status status="PASS" endtime="20180516 15:21:50.504" starttime="20180516 15:21:50.502"></status>
</kw>
<kw name="Take ETCD Snapshots" library="setup-teardown">
<arguments>
<arg>${prefix}_${tag}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tag}</arg>
</arguments>
<msg timestamp="20180516 15:21:50.505" level="INFO">037_Done_test_setup</msg>
<status status="PASS" endtime="20180516 15:21:50.505" starttime="20180516 15:21:50.505"></status>
</kw>
<kw name="Get ETCD Dump" library="setup-teardown">
<assign>
<var>${dump}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DOCKER_COMMAND} exec etcd etcdctl get --prefix="true" ""</arg>
</arguments>
<assign>
<var>${command}</var>
</assign>
<msg timestamp="20180516 15:21:50.506" level="INFO">${command} = sudo docker exec etcd etcdctl get --prefix="true" ""</msg>
<status status="PASS" endtime="20180516 15:21:50.506" starttime="20180516 15:21:50.505"></status>
</kw>
<kw name="Execute On Machine" library="ssh">
<doc>*Execute On Machine ${machine} sudo docker exec etcd etcdctl get --prefix="true" ""*</doc>
<arguments>
<arg>docker</arg>
<arg>${command}</arg>
<arg>log=false</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${log}</arg>
</arguments>
<msg timestamp="20180516 15:21:50.513" level="INFO">docker</msg>
<msg timestamp="20180516 15:21:50.513" level="INFO">sudo docker exec etcd etcdctl get --prefix="true" ""</msg>
<msg timestamp="20180516 15:21:50.513" level="INFO">false</msg>
<status status="PASS" endtime="20180516 15:21:50.513" starttime="20180516 15:21:50.512"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:21:50.516" starttime="20180516 15:21:50.516"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:21:50.517" level="INFO">${currdate} = 2018-05-16 15:21:50.517</msg>
<status status="PASS" endtime="20180516 15:21:50.517" starttime="20180516 15:21:50.517"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20180516 15:21:50.518" level="INFO">Executing command 'sudo docker exec etcd etcdctl get --prefix="true" ""'.</msg>
<msg timestamp="20180516 15:21:51.033" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:21:51.033" level="INFO">${out} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<msg timestamp="20180516 15:21:51.033" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20180516 15:21:51.033" starttime="20180516 15:21:50.517"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${out}</arg>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:21:51.034" level="INFO">/sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-containers","description":"Wire 2 VNF containers to the vpp switch","type":2,"elements":[{"container":"node_1","port_label":"node1_veth","etcd_vpp_switch_key":"agent_vpp_1","ipv4_addr":"10.0.0.10","type":3},{"container":"node_2","port_label":"node2_veth","etcd_vpp_switch_key":"agent_vpp_1","ipv4_addr":"10.0.0.11","type":3}]}
/sfc-controller/v1/SP
{"mtu":1500,"starting_vlan_id":5000,"default_static_route_weight":5,"dynamic_bridge_parms":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true},"static_bridge_parms":{"forward":true}}
/sfc-controller/v1/id/HE/agent_vpp_1
{"name":"agent_vpp_1"}
/sfc-controller/v1/id/SFC/two-sample-vnf-containers/node_1_node1_veth
{"sfc_name":"two-sample-vnf-containers","container":"node_1","port":"node1_veth","mac_addr_id":1,"veth_id":1}
/sfc-controller/v1/id/SFC/two-sample-vnf-containers/node_2_node2_veth
{"sfc_name":"two-sample-vnf-containers","container":"node_2","port":"node2_veth","mac_addr_id":2,"veth_id":2}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VNF_node_1_node1_veth
{"name":"IF_VETH_VNF_node_1_node1_veth","enabled":true,"phys_address":"02:00:00:00:00:01","mtu":1500,"host_if_name":"node1_veth","ip_addresses":["10.0.0.10/24"],"namespace":{"type":1,"microservice":"node_1"},"veth":{"peer_if_name":"IF_VETH_VSWITCH_node_1_node1_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VNF_node_2_node2_veth
{"name":"IF_VETH_VNF_node_2_node2_veth","enabled":true,"phys_address":"02:00:00:00:00:02","mtu":1500,"host_if_name":"node2_veth","ip_addresses":["10.0.0.11/24"],"namespace":{"type":1,"microservice":"node_2"},"veth":{"peer_if_name":"IF_VETH_VSWITCH_node_2_node2_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VSWITCH_node_1_node1_veth
{"name":"IF_VETH_VSWITCH_node_1_node1_veth","enabled":true,"mtu":1500,"host_if_name":"node_1_noeth_1","namespace":{"type":1,"microservice":"agent_vpp_1"},"veth":{"peer_if_name":"IF_VETH_VNF_node_1_node1_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VSWITCH_node_2_node2_veth
{"name":"IF_VETH_VSWITCH_node_2_node2_veth","enabled":true,"mtu":1500,"host_if_name":"node_2_noeth_2","namespace":{"type":1,"microservice":"agent_vpp_1"},"veth":{"peer_if_name":"IF_VETH_VNF_node_2_node2_veth"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/BD_INTERNAL_EW_L2FIB_agent_vpp_1
{"name":"BD_INTERNAL_EW_L2FIB_agent_vpp_1","forward":true}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/BD_INTERNAL_EW_agent_vpp_1
{"name":"BD_INTERNAL_EW_agent_vpp_1","flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true,"interfaces":[{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth"},{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth"}]}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/bd2
{
  "name": "bd2",
  "flood": true,
  "unknown_unicast_flood": true,
  "forward": true,
  "learn": true,
  "arp_termination": true,
  "interfaces": [
    { "name": "loop0" },{ "name": "loop1" }
  ]
}


/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth
{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","type":4,"enabled":true,"mtu":1500,"afpacket":{"host_if_name":"node_1_noeth_1"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth
{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","type":4,"enabled":true,"mtu":1500,"afpacket":{"host_if_name":"node_2_noeth_2"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_LOOPBACK_H_agent_vpp_1
{"name":"IF_LOOPBACK_H_agent_vpp_1","enabled":true,"phys_address":"02:00:00:AA:BB:00","mtu":1500,"ip_addresses":["6.0.0.100"]}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/loop0
{
  "name": "loop0",
  "type": 0,
  "enabled": true,
  "phys_address": "8a:f1:be:90:00:00",
  "mtu": 1500,
  "vrf": 0,
  "ip_addresses": [
    "20.1.1.1/24"
  ]
}


/vnf-agent/agent_vpp_1/vpp/config/v1/interface/loop1
{
  "name": "loop1",
  "type": 0,
  "enabled": true,
  "phys_address": "8a:f1:be:90:20:00",
  "mtu": 1500,
  "vrf": 0,
  "ip_addresses": [
    "30.1.1.1/24"
  ]
}


/vnf-agent/agent_vpp_1/vpp/status/v1/bd/BD_INTERNAL_EW_L2FIB_agent_vpp_1
{"index":2,"internal_name":"BD_INTERNAL_EW_L2FIB_agent_vpp_1","bvi_interface":"not_set","last_change":1526476631,"l2_params":{"forward":true}}
/vnf-agent/agent_vpp_1/vpp/status/v1/bd/BD_INTERNAL_EW_agent_vpp_1
{"index":1,"internal_name":"BD_INTERNAL_EW_agent_vpp_1","bvi_interface":"not_set","interface_count":2,"last_change":1526476631,"l2_params":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true},"interfaces":[{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","sw_if_index":2},{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","sw_if_index":3}]}
/vnf-agent/agent_vpp_1/vpp/status/v1/bd/bd2
{"index":3,"internal_name":"bd2","bvi_interface":"not_set","interface_count":2,"last_change":1526476768,"l2_params":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true,"arp_termination":true},"interfaces":[{"name":"loop0","sw_if_index":4},{"name":"loop1","sw_if_index":5}]}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth
{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","internal_name":"host-node_1_noeth_1","if_index":2,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:3e:fd:61:28","mtu":1500,"statistics":{"in_packets":20,"in_bytes":1552}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth
{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","internal_name":"host-node_2_noeth_2","if_index":3,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:42:98:22:08","mtu":1500,"statistics":{"in_packets":22,"in_bytes":1732}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_LOOPBACK_H_agent_vpp_1
{"name":"IF_LOOPBACK_H_agent_vpp_1","internal_name":"loop0","if_index":1,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:00:00:aa:bb:00","mtu":1500,"statistics":{}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/local0
{"name":"local0","internal_name":"local0","admin_status":2,"oper_status":2,"statistics":{}}
/vnf-agent/node_1/check/status/v1/agent
{"build_version":"v1.1-5-g55e9977","build_date":"2018-03-06T11:05+00:00","state":1,"start_time":1526476614,"last_change":1526476619,"last_update":1526476905,"commit_hash":"55e99770087087fa8e41a980a8b6257c80c93f4c"}
/vnf-agent/node_1/check/status/v1/plugin/etcdv3
{"state":1,"last_change":1526476619,"last_update":1526476905}
/vnf-agent/node_1/check/status/v1/plugin/kafka
{"state":1,"last_change":1526476619,"last_update":1526476905}
/vnf-agent/node_2/check/status/v1/agent
{"build_version":"v1.1-5-g55e9977","build_date":"2018-03-06T11:05+00:00","state":1,"start_time":1526476623,"last_change":1526476628,"last_update":1526476903,"commit_hash":"55e99770087087fa8e41a980a8b6257c80c93f4c"}
/vnf-agent/node_2/check/status/v1/plugin/etcdv3
{"state":1,"last_change":1526476628,"last_update":1526476903}
/vnf-agent/node_2/check/status/v1/plugin/kafka
{"state":1,"last_change":1526476628,"last_update":1526476903}</msg>
<msg timestamp="20180516 15:21:51.034" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:21:51.034" starttime="20180516 15:21:51.033"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:21:51.035" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:21:51.035" starttime="20180516 15:21:51.035"></status>
</kw>
<msg timestamp="20180516 15:21:51.035" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:21:51.035" starttime="20180516 15:21:51.034"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} on ${machine}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:21:51.035" starttime="20180516 15:21:51.035"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${log}'=='true'</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:21:51.036" starttime="20180516 15:21:51.036"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:21:51.036" starttime="20180516 15:21:51.036"></status>
</kw>
<msg timestamp="20180516 15:21:51.037" level="INFO">${out} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<status status="PASS" endtime="20180516 15:21:51.037" starttime="20180516 15:21:50.510"></status>
</kw>
<msg timestamp="20180516 15:21:51.037" level="INFO">${dump} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<status status="PASS" endtime="20180516 15:21:51.037" starttime="20180516 15:21:50.505"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/etcd_dump-${tag}.txt</arg>
<arg>${dump}</arg>
</arguments>
<msg timestamp="20180516 15:21:51.038" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/etcd_dump-037_Done_test_setup.txt"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/etcd_dump-037_Done_test_setup.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:21:51.039" starttime="20180516 15:21:51.037"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${dump}</arg>
<arg>/error/</arg>
</arguments>
<assign>
<var>${errors}</var>
</assign>
<msg timestamp="20180516 15:21:51.040" level="INFO">0 out of 98 lines matched</msg>
<msg timestamp="20180516 15:21:51.040" level="INFO">${errors} = </msg>
<status status="PASS" endtime="20180516 15:21:51.040" starttime="20180516 15:21:51.039"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${errors}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${errors}</arg>
</arguments>
<msg timestamp="20180516 15:21:51.041" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:21:51.041" starttime="20180516 15:21:51.041"></status>
</kw>
<msg timestamp="20180516 15:21:51.041" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:21:51.041" starttime="20180516 15:21:51.040"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>Errors detected in keys: ${errors}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:21:51.042" starttime="20180516 15:21:51.042"></status>
</kw>
<status status="PASS" endtime="20180516 15:21:51.042" starttime="20180516 15:21:50.504"></status>
</kw>
<status status="PASS" endtime="20180516 15:21:51.042" starttime="20180516 15:21:50.501"></status>
</kw>
<status status="PASS" endtime="20180516 15:21:51.042" starttime="20180516 15:21:50.501"></status>
</kw>
<kw name="No Operation" library="BuiltIn">
<doc>Does absolutely nothing.</doc>
<status status="PASS" endtime="20180516 15:21:51.043" starttime="20180516 15:21:51.043"></status>
</kw>
<kw type="teardown" name="TestTeardown">
<kw name="Make Datastore Snapshots" library="setup-teardown">
<arguments>
<arg>${TEST_NAME}_test_teardown</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tag}</arg>
</arguments>
<msg timestamp="20180516 15:21:51.044" level="INFO">Done_test_teardown</msg>
<status status="PASS" endtime="20180516 15:21:51.044" starttime="20180516 15:21:51.044"></status>
</kw>
<kw name="Create Next Snapshot Prefix" library="setup-teardown">
<assign>
<var>${prefix}</var>
</assign>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>str(${snapshot_num}).zfill(3)</arg>
</arguments>
<assign>
<var>${prefix}</var>
</assign>
<msg timestamp="20180516 15:21:51.045" level="INFO">${prefix} = 038</msg>
<status status="PASS" endtime="20180516 15:21:51.045" starttime="20180516 15:21:51.045"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${snapshot_num}+1</arg>
</arguments>
<assign>
<var>${snapshot_num}</var>
</assign>
<msg timestamp="20180516 15:21:51.045" level="INFO">${snapshot_num} = 39</msg>
<status status="PASS" endtime="20180516 15:21:51.045" starttime="20180516 15:21:51.045"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${snapshot_num}</arg>
</arguments>
<msg timestamp="20180516 15:21:51.046" level="INFO">${snapshot_num} = 39</msg>
<status status="PASS" endtime="20180516 15:21:51.046" starttime="20180516 15:21:51.046"></status>
</kw>
<msg timestamp="20180516 15:21:51.046" level="INFO">${prefix} = 038</msg>
<status status="PASS" endtime="20180516 15:21:51.046" starttime="20180516 15:21:51.044"></status>
</kw>
<kw name="Take ETCD Snapshots" library="setup-teardown">
<arguments>
<arg>${prefix}_${tag}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tag}</arg>
</arguments>
<msg timestamp="20180516 15:21:51.047" level="INFO">038_Done_test_teardown</msg>
<status status="PASS" endtime="20180516 15:21:51.047" starttime="20180516 15:21:51.047"></status>
</kw>
<kw name="Get ETCD Dump" library="setup-teardown">
<assign>
<var>${dump}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DOCKER_COMMAND} exec etcd etcdctl get --prefix="true" ""</arg>
</arguments>
<assign>
<var>${command}</var>
</assign>
<msg timestamp="20180516 15:21:51.048" level="INFO">${command} = sudo docker exec etcd etcdctl get --prefix="true" ""</msg>
<status status="PASS" endtime="20180516 15:21:51.048" starttime="20180516 15:21:51.048"></status>
</kw>
<kw name="Execute On Machine" library="ssh">
<doc>*Execute On Machine ${machine} sudo docker exec etcd etcdctl get --prefix="true" ""*</doc>
<arguments>
<arg>docker</arg>
<arg>${command}</arg>
<arg>log=false</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${log}</arg>
</arguments>
<msg timestamp="20180516 15:21:51.055" level="INFO">docker</msg>
<msg timestamp="20180516 15:21:51.055" level="INFO">sudo docker exec etcd etcdctl get --prefix="true" ""</msg>
<msg timestamp="20180516 15:21:51.055" level="INFO">false</msg>
<status status="PASS" endtime="20180516 15:21:51.055" starttime="20180516 15:21:51.055"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:21:51.056" starttime="20180516 15:21:51.056"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:21:51.056" level="INFO">${currdate} = 2018-05-16 15:21:51.056</msg>
<status status="PASS" endtime="20180516 15:21:51.056" starttime="20180516 15:21:51.056"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20180516 15:21:51.057" level="INFO">Executing command 'sudo docker exec etcd etcdctl get --prefix="true" ""'.</msg>
<msg timestamp="20180516 15:21:51.772" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:21:51.772" level="INFO">${out} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<msg timestamp="20180516 15:21:51.772" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20180516 15:21:51.772" starttime="20180516 15:21:51.057"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${out}</arg>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:21:51.773" level="INFO">/sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-containers","description":"Wire 2 VNF containers to the vpp switch","type":2,"elements":[{"container":"node_1","port_label":"node1_veth","etcd_vpp_switch_key":"agent_vpp_1","ipv4_addr":"10.0.0.10","type":3},{"container":"node_2","port_label":"node2_veth","etcd_vpp_switch_key":"agent_vpp_1","ipv4_addr":"10.0.0.11","type":3}]}
/sfc-controller/v1/SP
{"mtu":1500,"starting_vlan_id":5000,"default_static_route_weight":5,"dynamic_bridge_parms":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true},"static_bridge_parms":{"forward":true}}
/sfc-controller/v1/id/HE/agent_vpp_1
{"name":"agent_vpp_1"}
/sfc-controller/v1/id/SFC/two-sample-vnf-containers/node_1_node1_veth
{"sfc_name":"two-sample-vnf-containers","container":"node_1","port":"node1_veth","mac_addr_id":1,"veth_id":1}
/sfc-controller/v1/id/SFC/two-sample-vnf-containers/node_2_node2_veth
{"sfc_name":"two-sample-vnf-containers","container":"node_2","port":"node2_veth","mac_addr_id":2,"veth_id":2}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VNF_node_1_node1_veth
{"name":"IF_VETH_VNF_node_1_node1_veth","enabled":true,"phys_address":"02:00:00:00:00:01","mtu":1500,"host_if_name":"node1_veth","ip_addresses":["10.0.0.10/24"],"namespace":{"type":1,"microservice":"node_1"},"veth":{"peer_if_name":"IF_VETH_VSWITCH_node_1_node1_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VNF_node_2_node2_veth
{"name":"IF_VETH_VNF_node_2_node2_veth","enabled":true,"phys_address":"02:00:00:00:00:02","mtu":1500,"host_if_name":"node2_veth","ip_addresses":["10.0.0.11/24"],"namespace":{"type":1,"microservice":"node_2"},"veth":{"peer_if_name":"IF_VETH_VSWITCH_node_2_node2_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VSWITCH_node_1_node1_veth
{"name":"IF_VETH_VSWITCH_node_1_node1_veth","enabled":true,"mtu":1500,"host_if_name":"node_1_noeth_1","namespace":{"type":1,"microservice":"agent_vpp_1"},"veth":{"peer_if_name":"IF_VETH_VNF_node_1_node1_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VSWITCH_node_2_node2_veth
{"name":"IF_VETH_VSWITCH_node_2_node2_veth","enabled":true,"mtu":1500,"host_if_name":"node_2_noeth_2","namespace":{"type":1,"microservice":"agent_vpp_1"},"veth":{"peer_if_name":"IF_VETH_VNF_node_2_node2_veth"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/BD_INTERNAL_EW_L2FIB_agent_vpp_1
{"name":"BD_INTERNAL_EW_L2FIB_agent_vpp_1","forward":true}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/BD_INTERNAL_EW_agent_vpp_1
{"name":"BD_INTERNAL_EW_agent_vpp_1","flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true,"interfaces":[{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth"},{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth"}]}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/bd2
{
  "name": "bd2",
  "flood": true,
  "unknown_unicast_flood": true,
  "forward": true,
  "learn": true,
  "arp_termination": true,
  "interfaces": [
    { "name": "loop0" },{ "name": "loop1" }
  ]
}


/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth
{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","type":4,"enabled":true,"mtu":1500,"afpacket":{"host_if_name":"node_1_noeth_1"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth
{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","type":4,"enabled":true,"mtu":1500,"afpacket":{"host_if_name":"node_2_noeth_2"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_LOOPBACK_H_agent_vpp_1
{"name":"IF_LOOPBACK_H_agent_vpp_1","enabled":true,"phys_address":"02:00:00:AA:BB:00","mtu":1500,"ip_addresses":["6.0.0.100"]}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/loop0
{
  "name": "loop0",
  "type": 0,
  "enabled": true,
  "phys_address": "8a:f1:be:90:00:00",
  "mtu": 1500,
  "vrf": 0,
  "ip_addresses": [
    "20.1.1.1/24"
  ]
}


/vnf-agent/agent_vpp_1/vpp/config/v1/interface/loop1
{
  "name": "loop1",
  "type": 0,
  "enabled": true,
  "phys_address": "8a:f1:be:90:20:00",
  "mtu": 1500,
  "vrf": 0,
  "ip_addresses": [
    "30.1.1.1/24"
  ]
}


/vnf-agent/agent_vpp_1/vpp/status/v1/bd/BD_INTERNAL_EW_L2FIB_agent_vpp_1
{"index":2,"internal_name":"BD_INTERNAL_EW_L2FIB_agent_vpp_1","bvi_interface":"not_set","last_change":1526476631,"l2_params":{"forward":true}}
/vnf-agent/agent_vpp_1/vpp/status/v1/bd/BD_INTERNAL_EW_agent_vpp_1
{"index":1,"internal_name":"BD_INTERNAL_EW_agent_vpp_1","bvi_interface":"not_set","interface_count":2,"last_change":1526476631,"l2_params":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true},"interfaces":[{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","sw_if_index":2},{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","sw_if_index":3}]}
/vnf-agent/agent_vpp_1/vpp/status/v1/bd/bd2
{"index":3,"internal_name":"bd2","bvi_interface":"not_set","interface_count":2,"last_change":1526476768,"l2_params":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true,"arp_termination":true},"interfaces":[{"name":"loop0","sw_if_index":4},{"name":"loop1","sw_if_index":5}]}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth
{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","internal_name":"host-node_1_noeth_1","if_index":2,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:3e:fd:61:28","mtu":1500,"statistics":{"in_packets":20,"in_bytes":1552}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth
{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","internal_name":"host-node_2_noeth_2","if_index":3,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:42:98:22:08","mtu":1500,"statistics":{"in_packets":22,"in_bytes":1732}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_LOOPBACK_H_agent_vpp_1
{"name":"IF_LOOPBACK_H_agent_vpp_1","internal_name":"loop0","if_index":1,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:00:00:aa:bb:00","mtu":1500,"statistics":{}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/local0
{"name":"local0","internal_name":"local0","admin_status":2,"oper_status":2,"statistics":{}}
/vnf-agent/node_1/check/status/v1/agent
{"build_version":"v1.1-5-g55e9977","build_date":"2018-03-06T11:05+00:00","state":1,"start_time":1526476614,"last_change":1526476619,"last_update":1526476905,"commit_hash":"55e99770087087fa8e41a980a8b6257c80c93f4c"}
/vnf-agent/node_1/check/status/v1/plugin/etcdv3
{"state":1,"last_change":1526476619,"last_update":1526476905}
/vnf-agent/node_1/check/status/v1/plugin/kafka
{"state":1,"last_change":1526476619,"last_update":1526476905}
/vnf-agent/node_2/check/status/v1/agent
{"build_version":"v1.1-5-g55e9977","build_date":"2018-03-06T11:05+00:00","state":1,"start_time":1526476623,"last_change":1526476628,"last_update":1526476903,"commit_hash":"55e99770087087fa8e41a980a8b6257c80c93f4c"}
/vnf-agent/node_2/check/status/v1/plugin/etcdv3
{"state":1,"last_change":1526476628,"last_update":1526476903}
/vnf-agent/node_2/check/status/v1/plugin/kafka
{"state":1,"last_change":1526476628,"last_update":1526476903}</msg>
<msg timestamp="20180516 15:21:51.773" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:21:51.773" starttime="20180516 15:21:51.773"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:21:51.774" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:21:51.774" starttime="20180516 15:21:51.774"></status>
</kw>
<msg timestamp="20180516 15:21:51.774" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:21:51.774" starttime="20180516 15:21:51.774"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} on ${machine}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:21:51.775" starttime="20180516 15:21:51.775"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${log}'=='true'</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:21:51.775" starttime="20180516 15:21:51.775"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:21:51.776" starttime="20180516 15:21:51.775"></status>
</kw>
<msg timestamp="20180516 15:21:51.776" level="INFO">${out} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<status status="PASS" endtime="20180516 15:21:51.776" starttime="20180516 15:21:51.053"></status>
</kw>
<msg timestamp="20180516 15:21:51.776" level="INFO">${dump} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<status status="PASS" endtime="20180516 15:21:51.776" starttime="20180516 15:21:51.047"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/etcd_dump-${tag}.txt</arg>
<arg>${dump}</arg>
</arguments>
<msg timestamp="20180516 15:21:51.777" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/etcd_dump-038_Done_test_teardown.txt"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/etcd_dump-038_Done_test_teardown.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:21:51.777" starttime="20180516 15:21:51.776"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${dump}</arg>
<arg>/error/</arg>
</arguments>
<assign>
<var>${errors}</var>
</assign>
<msg timestamp="20180516 15:21:51.777" level="INFO">0 out of 98 lines matched</msg>
<msg timestamp="20180516 15:21:51.777" level="INFO">${errors} = </msg>
<status status="PASS" endtime="20180516 15:21:51.777" starttime="20180516 15:21:51.777"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${errors}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${errors}</arg>
</arguments>
<msg timestamp="20180516 15:21:51.778" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:21:51.778" starttime="20180516 15:21:51.778"></status>
</kw>
<msg timestamp="20180516 15:21:51.778" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:21:51.778" starttime="20180516 15:21:51.778"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>Errors detected in keys: ${errors}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:21:51.779" starttime="20180516 15:21:51.778"></status>
</kw>
<status status="PASS" endtime="20180516 15:21:51.779" starttime="20180516 15:21:51.046"></status>
</kw>
<status status="PASS" endtime="20180516 15:21:51.779" starttime="20180516 15:21:51.043"></status>
</kw>
<status status="PASS" endtime="20180516 15:21:51.779" starttime="20180516 15:21:51.043"></status>
</kw>
<tags>
<tag>debug</tag>
</tags>
<status status="PASS" endtime="20180516 15:21:51.784" critical="yes" starttime="20180516 15:21:50.500"></status>
</test>
<test id="s1-t19" name="Remove Agent Nodes Again">
<kw type="setup" name="TestSetup">
<kw name="Make Datastore Snapshots" library="setup-teardown">
<arguments>
<arg>${TEST_NAME}_test_setup</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tag}</arg>
</arguments>
<msg timestamp="20180516 15:21:51.786" level="INFO">Remove Agent Nodes Again_test_setup</msg>
<status status="PASS" endtime="20180516 15:21:51.786" starttime="20180516 15:21:51.786"></status>
</kw>
<kw name="Create Next Snapshot Prefix" library="setup-teardown">
<assign>
<var>${prefix}</var>
</assign>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>str(${snapshot_num}).zfill(3)</arg>
</arguments>
<assign>
<var>${prefix}</var>
</assign>
<msg timestamp="20180516 15:21:51.787" level="INFO">${prefix} = 039</msg>
<status status="PASS" endtime="20180516 15:21:51.787" starttime="20180516 15:21:51.787"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${snapshot_num}+1</arg>
</arguments>
<assign>
<var>${snapshot_num}</var>
</assign>
<msg timestamp="20180516 15:21:51.787" level="INFO">${snapshot_num} = 40</msg>
<status status="PASS" endtime="20180516 15:21:51.787" starttime="20180516 15:21:51.787"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${snapshot_num}</arg>
</arguments>
<msg timestamp="20180516 15:21:51.788" level="INFO">${snapshot_num} = 40</msg>
<status status="PASS" endtime="20180516 15:21:51.793" starttime="20180516 15:21:51.788"></status>
</kw>
<msg timestamp="20180516 15:21:51.793" level="INFO">${prefix} = 039</msg>
<status status="PASS" endtime="20180516 15:21:51.793" starttime="20180516 15:21:51.786"></status>
</kw>
<kw name="Take ETCD Snapshots" library="setup-teardown">
<arguments>
<arg>${prefix}_${tag}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tag}</arg>
</arguments>
<msg timestamp="20180516 15:21:51.795" level="INFO">039_Remove Agent Nodes Again_test_setup</msg>
<status status="PASS" endtime="20180516 15:21:51.796" starttime="20180516 15:21:51.795"></status>
</kw>
<kw name="Get ETCD Dump" library="setup-teardown">
<assign>
<var>${dump}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DOCKER_COMMAND} exec etcd etcdctl get --prefix="true" ""</arg>
</arguments>
<assign>
<var>${command}</var>
</assign>
<msg timestamp="20180516 15:21:51.796" level="INFO">${command} = sudo docker exec etcd etcdctl get --prefix="true" ""</msg>
<status status="PASS" endtime="20180516 15:21:51.796" starttime="20180516 15:21:51.796"></status>
</kw>
<kw name="Execute On Machine" library="ssh">
<doc>*Execute On Machine ${machine} sudo docker exec etcd etcdctl get --prefix="true" ""*</doc>
<arguments>
<arg>docker</arg>
<arg>${command}</arg>
<arg>log=false</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${log}</arg>
</arguments>
<msg timestamp="20180516 15:21:51.810" level="INFO">docker</msg>
<msg timestamp="20180516 15:21:51.810" level="INFO">sudo docker exec etcd etcdctl get --prefix="true" ""</msg>
<msg timestamp="20180516 15:21:51.811" level="INFO">false</msg>
<status status="PASS" endtime="20180516 15:21:51.811" starttime="20180516 15:21:51.810"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:21:51.811" starttime="20180516 15:21:51.811"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:21:51.812" level="INFO">${currdate} = 2018-05-16 15:21:51.811</msg>
<status status="PASS" endtime="20180516 15:21:51.812" starttime="20180516 15:21:51.811"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20180516 15:21:51.812" level="INFO">Executing command 'sudo docker exec etcd etcdctl get --prefix="true" ""'.</msg>
<msg timestamp="20180516 15:21:52.350" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:21:52.350" level="INFO">${out} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<msg timestamp="20180516 15:21:52.350" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20180516 15:21:52.350" starttime="20180516 15:21:51.812"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${out}</arg>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:21:52.350" level="INFO">/sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-containers","description":"Wire 2 VNF containers to the vpp switch","type":2,"elements":[{"container":"node_1","port_label":"node1_veth","etcd_vpp_switch_key":"agent_vpp_1","ipv4_addr":"10.0.0.10","type":3},{"container":"node_2","port_label":"node2_veth","etcd_vpp_switch_key":"agent_vpp_1","ipv4_addr":"10.0.0.11","type":3}]}
/sfc-controller/v1/SP
{"mtu":1500,"starting_vlan_id":5000,"default_static_route_weight":5,"dynamic_bridge_parms":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true},"static_bridge_parms":{"forward":true}}
/sfc-controller/v1/id/HE/agent_vpp_1
{"name":"agent_vpp_1"}
/sfc-controller/v1/id/SFC/two-sample-vnf-containers/node_1_node1_veth
{"sfc_name":"two-sample-vnf-containers","container":"node_1","port":"node1_veth","mac_addr_id":1,"veth_id":1}
/sfc-controller/v1/id/SFC/two-sample-vnf-containers/node_2_node2_veth
{"sfc_name":"two-sample-vnf-containers","container":"node_2","port":"node2_veth","mac_addr_id":2,"veth_id":2}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VNF_node_1_node1_veth
{"name":"IF_VETH_VNF_node_1_node1_veth","enabled":true,"phys_address":"02:00:00:00:00:01","mtu":1500,"host_if_name":"node1_veth","ip_addresses":["10.0.0.10/24"],"namespace":{"type":1,"microservice":"node_1"},"veth":{"peer_if_name":"IF_VETH_VSWITCH_node_1_node1_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VNF_node_2_node2_veth
{"name":"IF_VETH_VNF_node_2_node2_veth","enabled":true,"phys_address":"02:00:00:00:00:02","mtu":1500,"host_if_name":"node2_veth","ip_addresses":["10.0.0.11/24"],"namespace":{"type":1,"microservice":"node_2"},"veth":{"peer_if_name":"IF_VETH_VSWITCH_node_2_node2_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VSWITCH_node_1_node1_veth
{"name":"IF_VETH_VSWITCH_node_1_node1_veth","enabled":true,"mtu":1500,"host_if_name":"node_1_noeth_1","namespace":{"type":1,"microservice":"agent_vpp_1"},"veth":{"peer_if_name":"IF_VETH_VNF_node_1_node1_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VSWITCH_node_2_node2_veth
{"name":"IF_VETH_VSWITCH_node_2_node2_veth","enabled":true,"mtu":1500,"host_if_name":"node_2_noeth_2","namespace":{"type":1,"microservice":"agent_vpp_1"},"veth":{"peer_if_name":"IF_VETH_VNF_node_2_node2_veth"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/BD_INTERNAL_EW_L2FIB_agent_vpp_1
{"name":"BD_INTERNAL_EW_L2FIB_agent_vpp_1","forward":true}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/BD_INTERNAL_EW_agent_vpp_1
{"name":"BD_INTERNAL_EW_agent_vpp_1","flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true,"interfaces":[{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth"},{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth"}]}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/bd2
{
  "name": "bd2",
  "flood": true,
  "unknown_unicast_flood": true,
  "forward": true,
  "learn": true,
  "arp_termination": true,
  "interfaces": [
    { "name": "loop0" },{ "name": "loop1" }
  ]
}


/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth
{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","type":4,"enabled":true,"mtu":1500,"afpacket":{"host_if_name":"node_1_noeth_1"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth
{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","type":4,"enabled":true,"mtu":1500,"afpacket":{"host_if_name":"node_2_noeth_2"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_LOOPBACK_H_agent_vpp_1
{"name":"IF_LOOPBACK_H_agent_vpp_1","enabled":true,"phys_address":"02:00:00:AA:BB:00","mtu":1500,"ip_addresses":["6.0.0.100"]}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/loop0
{
  "name": "loop0",
  "type": 0,
  "enabled": true,
  "phys_address": "8a:f1:be:90:00:00",
  "mtu": 1500,
  "vrf": 0,
  "ip_addresses": [
    "20.1.1.1/24"
  ]
}


/vnf-agent/agent_vpp_1/vpp/config/v1/interface/loop1
{
  "name": "loop1",
  "type": 0,
  "enabled": true,
  "phys_address": "8a:f1:be:90:20:00",
  "mtu": 1500,
  "vrf": 0,
  "ip_addresses": [
    "30.1.1.1/24"
  ]
}


/vnf-agent/agent_vpp_1/vpp/status/v1/bd/BD_INTERNAL_EW_L2FIB_agent_vpp_1
{"index":2,"internal_name":"BD_INTERNAL_EW_L2FIB_agent_vpp_1","bvi_interface":"not_set","last_change":1526476631,"l2_params":{"forward":true}}
/vnf-agent/agent_vpp_1/vpp/status/v1/bd/BD_INTERNAL_EW_agent_vpp_1
{"index":1,"internal_name":"BD_INTERNAL_EW_agent_vpp_1","bvi_interface":"not_set","interface_count":2,"last_change":1526476631,"l2_params":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true},"interfaces":[{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","sw_if_index":2},{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","sw_if_index":3}]}
/vnf-agent/agent_vpp_1/vpp/status/v1/bd/bd2
{"index":3,"internal_name":"bd2","bvi_interface":"not_set","interface_count":2,"last_change":1526476768,"l2_params":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true,"arp_termination":true},"interfaces":[{"name":"loop0","sw_if_index":4},{"name":"loop1","sw_if_index":5}]}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth
{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","internal_name":"host-node_1_noeth_1","if_index":2,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:3e:fd:61:28","mtu":1500,"statistics":{"in_packets":20,"in_bytes":1552}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth
{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","internal_name":"host-node_2_noeth_2","if_index":3,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:42:98:22:08","mtu":1500,"statistics":{"in_packets":22,"in_bytes":1732}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_LOOPBACK_H_agent_vpp_1
{"name":"IF_LOOPBACK_H_agent_vpp_1","internal_name":"loop0","if_index":1,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:00:00:aa:bb:00","mtu":1500,"statistics":{}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/local0
{"name":"local0","internal_name":"local0","admin_status":2,"oper_status":2,"statistics":{}}
/vnf-agent/node_1/check/status/v1/agent
{"build_version":"v1.1-5-g55e9977","build_date":"2018-03-06T11:05+00:00","state":1,"start_time":1526476614,"last_change":1526476619,"last_update":1526476905,"commit_hash":"55e99770087087fa8e41a980a8b6257c80c93f4c"}
/vnf-agent/node_1/check/status/v1/plugin/etcdv3
{"state":1,"last_change":1526476619,"last_update":1526476905}
/vnf-agent/node_1/check/status/v1/plugin/kafka
{"state":1,"last_change":1526476619,"last_update":1526476905}
/vnf-agent/node_2/check/status/v1/agent
{"build_version":"v1.1-5-g55e9977","build_date":"2018-03-06T11:05+00:00","state":1,"start_time":1526476623,"last_change":1526476628,"last_update":1526476903,"commit_hash":"55e99770087087fa8e41a980a8b6257c80c93f4c"}
/vnf-agent/node_2/check/status/v1/plugin/etcdv3
{"state":1,"last_change":1526476628,"last_update":1526476903}
/vnf-agent/node_2/check/status/v1/plugin/kafka
{"state":1,"last_change":1526476628,"last_update":1526476903}</msg>
<msg timestamp="20180516 15:21:52.351" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:21:52.351" starttime="20180516 15:21:52.350"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:21:52.352" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:21:52.352" starttime="20180516 15:21:52.351"></status>
</kw>
<msg timestamp="20180516 15:21:52.352" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:21:52.352" starttime="20180516 15:21:52.351"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} on ${machine}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:21:52.352" starttime="20180516 15:21:52.352"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${log}'=='true'</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:21:52.353" starttime="20180516 15:21:52.352"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:21:52.353" starttime="20180516 15:21:52.353"></status>
</kw>
<msg timestamp="20180516 15:21:52.353" level="INFO">${out} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<status status="PASS" endtime="20180516 15:21:52.353" starttime="20180516 15:21:51.809"></status>
</kw>
<msg timestamp="20180516 15:21:52.354" level="INFO">${dump} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<status status="PASS" endtime="20180516 15:21:52.354" starttime="20180516 15:21:51.796"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/etcd_dump-${tag}.txt</arg>
<arg>${dump}</arg>
</arguments>
<msg timestamp="20180516 15:21:52.354" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/etcd_dump-039_Remove Agent Nodes Again_test_setup.txt"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/etcd_dump-039_Remove Agent Nodes Again_test_setup.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:21:52.355" starttime="20180516 15:21:52.354"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${dump}</arg>
<arg>/error/</arg>
</arguments>
<assign>
<var>${errors}</var>
</assign>
<msg timestamp="20180516 15:21:52.355" level="INFO">0 out of 98 lines matched</msg>
<msg timestamp="20180516 15:21:52.355" level="INFO">${errors} = </msg>
<status status="PASS" endtime="20180516 15:21:52.355" starttime="20180516 15:21:52.355"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${errors}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${errors}</arg>
</arguments>
<msg timestamp="20180516 15:21:52.361" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:21:52.361" starttime="20180516 15:21:52.360"></status>
</kw>
<msg timestamp="20180516 15:21:52.361" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:21:52.361" starttime="20180516 15:21:52.356"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>Errors detected in keys: ${errors}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:21:52.362" starttime="20180516 15:21:52.361"></status>
</kw>
<status status="PASS" endtime="20180516 15:21:52.362" starttime="20180516 15:21:51.793"></status>
</kw>
<status status="PASS" endtime="20180516 15:21:52.362" starttime="20180516 15:21:51.785"></status>
</kw>
<status status="PASS" endtime="20180516 15:21:52.362" starttime="20180516 15:21:51.785"></status>
</kw>
<kw name="Remove All Nodes" library="docker">
<kw name="Log List" library="Collections">
<doc>Logs the length and contents of the ``list`` using given ``level``.</doc>
<arguments>
<arg>${NODES}</arg>
</arguments>
<msg timestamp="20180516 15:21:52.365" level="INFO">List length is 3 and it contains following items:
0: agent_vpp_1
1: node_1
2: node_2</msg>
<status status="PASS" endtime="20180516 15:21:52.366" starttime="20180516 15:21:52.365"></status>
</kw>
<kw type="for" name="${id} IN [ @{NODES} ]">
<kw type="foritem" name="${id} = agent_vpp_1">
<kw name="Remove Node" library="docker">
<arguments>
<arg>${id}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${node}</arg>
</arguments>
<msg timestamp="20180516 15:21:52.367" level="INFO">agent_vpp_1</msg>
<status status="PASS" endtime="20180516 15:21:52.367" starttime="20180516 15:21:52.366"></status>
</kw>
<kw name="Execute On Machine" library="ssh">
<doc>*Execute On Machine ${machine} ${command}*</doc>
<arguments>
<arg>docker</arg>
<arg>${DOCKER_COMMAND} logs --details -t ${node}</arg>
<arg>log=false</arg>
</arguments>
<assign>
<var>${log}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${log}</arg>
</arguments>
<msg timestamp="20180516 15:21:52.394" level="INFO">docker</msg>
<msg timestamp="20180516 15:21:52.394" level="INFO">sudo docker logs --details -t agent_vpp_1</msg>
<msg timestamp="20180516 15:21:52.394" level="INFO">false</msg>
<status status="PASS" endtime="20180516 15:21:52.394" starttime="20180516 15:21:52.394"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:21:52.395" starttime="20180516 15:21:52.394"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:21:52.397" level="INFO">${currdate} = 2018-05-16 15:21:52.397</msg>
<status status="PASS" endtime="20180516 15:21:52.397" starttime="20180516 15:21:52.397"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20180516 15:21:52.398" level="INFO">Executing command 'sudo docker logs --details -t agent_vpp_1'.</msg>
<msg timestamp="20180516 15:21:52.781" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:21:52.783" level="INFO">${out} = 2018-05-16T13:16:27.655439718Z  2018-05-16 13:16:27,654 CRIT Supervisor running as root (no user in config file)
2018-05-16T13:16:27.658784158Z  2018-05-16 13:16:27,658 INFO supervisord started with ...</msg>
<msg timestamp="20180516 15:21:52.783" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20180516 15:21:52.783" starttime="20180516 15:21:52.398"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${out}</arg>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:21:52.785" level="INFO">2018-05-16T13:16:27.655439718Z  2018-05-16 13:16:27,654 CRIT Supervisor running as root (no user in config file)
2018-05-16T13:16:27.658784158Z  2018-05-16 13:16:27,658 INFO supervisord started with pid 6571
2018-05-16T13:16:28.663207488Z  2018-05-16 13:16:28,660 INFO spawned: 'vpp_or_agent_not_running' with pid 6580
2018-05-16T13:16:28.663221688Z  2018-05-16 13:16:28,661 INFO spawned: 'vpp' with pid 6581
2018-05-16T13:16:28.676948863Z  2018-05-16 13:16:28,675 INFO spawned: 'agent' with pid 6582
2018-05-16T13:16:28.695850482Z  2018-05-16 13:16:28,694 DEBG 'vpp' stdout output:
2018-05-16T13:16:28.695878854Z  vlib_plugin_early_init:359: plugin path /usr/lib/vpp_plugins
2018-05-16T13:16:28.695881689Z  
2018-05-16T13:16:28.700543264Z  2018-05-16 13:16:28,700 DEBG 'vpp' stdout output:
2018-05-16T13:16:28.700556268Z  load_one_plugin:187: Loaded plugin: acl_plugin.so (Access Control Lists)
2018-05-16T13:16:28.700559139Z  
2018-05-16T13:16:28.702498090Z  2018-05-16 13:16:28,701 DEBG 'agent' stdout output:
2018-05-16T13:16:28.702507094Z  time="2018-05-16 13:16:28.70173" level=debug msg="initial log level: debug" loc="logrus/registry.go(36)" logger=defaultLogger
2018-05-16T13:16:28.702510350Z  
2018-05-16T13:16:28.702512573Z  2018-05-16 13:16:28,702 DEBG 'vpp' stdout output:
2018-05-16T13:16:28.702514848Z  load_one_plugin:187: Loaded plugin: avf_plugin.so (Intel Adaptive Virtual Function (AVF) Device Plugin)
2018-05-16T13:16:28.702517604Z  
2018-05-16T13:16:28.704412727Z  2018-05-16 13:16:28,703 DEBG 'vpp' stdout output:
2018-05-16T13:16:28.704420912Z  load_one_plugin:189: Loaded plugin: cdp_plugin.so
2018-05-16T13:16:28.704423509Z  
2018-05-16T13:16:28.733909146Z  2018-05-16 13:16:28,733 DEBG 'agent' stdout output:
2018-05-16T13:16:28.733922587Z  time="2018-05-16 13:16:28.73348" level=info msg="Starting agent v1.3-216-ga90615b" BuildDate="2018-05-14T09:13+00:00" CommitHash=a90615ba535933e4ce4c931919262a465d694a05 loc="core/agent_core.go(195)" logger=agentcore
2018-05-16T13:16:28.733927700Z  
2018-05-16T13:16:28.734824452Z  2018-05-16 13:16:28,734 DEBG 'agent' stdout output:
2018-05-16T13:16:28.734832532Z  time="2018-05-16 13:16:28.73425" level=debug msg="logs config: &amp;{DefaultLevel: Loggers:[]}" loc="logmanager/plugin_impl_log_manager.go(92)" logger=logs
2018-05-16T13:16:28.734835857Z  
2018-05-16T13:16:28.734838091Z  2018-05-16 13:16:28,734 DEBG 'agent' stdout output:
2018-05-16T13:16:28.734840430Z  time="2018-05-16 13:16:28.73445" level=info msg="plugin Logs: Init took 274.536µs" durationInNs=274536 loc="core/agent_core.go(295)" logger=agentcore
2018-05-16T13:16:28.734843477Z  
2018-05-16T13:16:28.736843149Z  2018-05-16 13:16:28,734 DEBG 'agent' stdout output:
2018-05-16T13:16:28.736851714Z  time="2018-05-16 13:16:28.73462" level=debug msg="Microservice label is set to agent_vpp_1" loc="servicelabel/plugin_impl_servicelabel.go(49)" logger=defaultLogger
2018-05-16T13:16:28.736862442Z  
2018-05-16T13:16:28.736864926Z  2018-05-16 13:16:28,735 DEBG 'agent' stdout output:
2018-05-16T13:16:28.736867137Z  time="2018-05-16 13:16:28.73589" level=info msg="plugin ServiceLabel: Init took 1.262738ms" durationInNs=1262738 loc="core/agent_core.go(295)" logger=agentcore
2018-05-16T13:16:28.736869647Z  
2018-05-16T13:16:28.736871700Z  2018-05-16 13:16:28,736 DEBG 'agent' stdout output:
2018-05-16T13:16:28.736873927Z  time="2018-05-16 13:16:28.73606" level=info msg="plugin StatusCheck: Init took 2.152µs" durationInNs=2152 loc="core/agent_core.go(295)" logger=agentcore
2018-05-16T13:16:28.736876700Z  
2018-05-16T13:16:28.738795569Z  2018-05-16 13:16:28,738 DEBG 'agent' stdout output:
2018-05-16T13:16:28.738804264Z  time="2018-05-16 13:16:28.73809" level=info msg="Connecting to etcd took 1.650045ms" durationInNs=1650045 loc="etcdv3/bytes_broker_impl.go(84)" logger=etcdv3
2018-05-16T13:16:28.738807356Z  
2018-05-16T13:16:28.739718687Z  2018-05-16 13:16:28,738 DEBG 'agent' stdout output:
2018-05-16T13:16:28.739726057Z  time="2018-05-16 13:16:28.73832" level=debug msg="NewEtcdConnectionWithBytes&amp;{0xc420264230 0xc420264240 0xc4200c9500 0xc420255ec0 0xc420264270 0xc42025cf00 0xc420268180 0xc420083620 {[172.17.0.1:2379] 0 1000000000 &lt;nil&gt;   false [] &lt;nil&gt;} &lt;nil&gt; 0xc4201c9860 0x8efbc0 0x8efef0 0xc42007f940 0x54ae60   &lt;nil&gt;}" loc="etcdv3/bytes_broker_impl.go(96)" logger=etcdv3
2018-05-16T13:16:28.739731578Z  
2018-05-16T13:16:28.740668115Z  2018-05-16 13:16:28,739 DEBG 'agent' stdout output:
2018-05-16T13:16:28.740676364Z  time="2018-05-16 13:16:28.73895" level=info msg="Plugin etcdv3: status check probe registered" loc="statuscheck/plugin_impl_statuscheck.go(144)" logger=status-check
2018-05-16T13:16:28.740679442Z  
2018-05-16T13:16:28.740681676Z  2018-05-16 13:16:28,739 DEBG 'agent' stdout output:
2018-05-16T13:16:28.740683907Z  time="2018-05-16 13:16:28.73984" level=info msg="plugin ETCD: Init took 3.612106ms" durationInNs=3612106 loc="core/agent_core.go(295)" logger=agentcore
2018-05-16T13:16:28.740686414Z  
2018-05-16T13:16:28.740688512Z  2018-05-16 13:16:28,740 DEBG 'agent' stdout output:
2018-05-16T13:16:28.740690726Z  time="2018-05-16 13:16:28.74000" level=info msg="plugin ETCDDataSync: Init took 1.046µs" durationInNs=1046 loc="core/agent_core.go(295)" logger=agentcore
2018-05-16T13:16:28.740693368Z  
2018-05-16T13:16:28.740695394Z  2018-05-16 13:16:28,740 DEBG 'agent' stdout output:
2018-05-16T13:16:28.740698001Z  time="2018-05-16 13:16:28.74020" level=info msg="Consul config not found, skip loading this plugin" loc="consul/plugin.go(72)" logger=consul
2018-05-16T13:16:28.740700485Z  
2018-05-16T13:16:28.742752038Z  2018-05-16 13:16:28,741 DEBG 'agent' stdout output:
2018-05-16T13:16:28.742779306Z  time="2018-05-16 13:16:28.74166" level=info msg="plugin Consul: Init took 1.48331ms" durationInNs=1483310 loc="core/agent_core.go(295)" logger=agentcore
2018-05-16T13:16:28.742804288Z  
2018-05-16T13:16:28.742806824Z  2018-05-16 13:16:28,741 DEBG 'agent' stdout output:
2018-05-16T13:16:28.742809052Z  time="2018-05-16 13:16:28.74186" level=info msg="plugin ConsulDataSync: Init took 917ns" durationInNs=917 loc="core/agent_core.go(295)" logger=agentcore
2018-05-16T13:16:28.742832884Z  
2018-05-16T13:16:28.742835112Z  2018-05-16 13:16:28,742 DEBG 'agent' stdout output:
2018-05-16T13:16:28.742837393Z  time="2018-05-16 13:16:28.74215" level=debug msg="Creating new consumer" loc="client/consumer.go(141)" logger=kafka
2018-05-16T13:16:28.742853194Z  
2018-05-16T13:16:28.743626734Z  2018-05-16 13:16:28,742 DEBG 'agent' stdout output:
2018-05-16T13:16:28.743634836Z  time="2018-05-16 13:16:28.74236" level=debug msg="AsyncProducer config: &amp;client.Config{Logger:(*logging.pluginLogger)(0xc4201d1900), Config:(*cluster.Config)(0xc4200d81e0), Context:context.Context(nil), Cancel:(context.CancelFunc)(nil), Brokers:[]string{\"172.17.0.1:9092\"}, GroupID:\"agent_vpp_1\", Debug:false, Topics:[]string{\"status-check\"}, Partition:-1, Partitioner:(sarama.PartitionerConstructor)(0xa08d20), InitialOffset:-1, RequiredAcks:-32768, RecvNotification:false, RecvNotificationChan:(chan *cluster.Notification)(nil), RecvError:false, RecvErrorChan:(chan error)(nil), RecvMessageChan:(chan *client.ConsumerMessage)(0xc42008d140), SendSuccess:true, SuccessChan:(chan *client.ProducerMessage)(0xc42008d1a0), SendError:true, ErrorChan:(chan *client.ProducerError)(0xc42008d200)}" loc="client/consumer.go(170)" logger=kafka
2018-05-16T13:16:28.743641671Z  
2018-05-16T13:16:28.761261844Z  2018-05-16 13:16:28,759 DEBG 'vpp' stdout output:
2018-05-16T13:16:28.761276209Z  load_one_plugin:106: Plugin disabled: dpdk_plugin.so
2018-05-16T13:16:28.761279134Z  
2018-05-16T13:16:28.769283757Z  2018-05-16 13:16:28,768 DEBG 'agent' stdout output:
2018-05-16T13:16:28.769296494Z  time="2018-05-16 13:16:28.76828" level=debug msg="Creating new consumer" loc="client/consumer.go(141)" logger=kafka
2018-05-16T13:16:28.769299639Z  
2018-05-16T13:16:28.769301872Z  2018-05-16 13:16:28,768 DEBG 'agent' stdout output:
2018-05-16T13:16:28.769304132Z  time="2018-05-16 13:16:28.76864" level=debug msg="AsyncProducer config: &amp;client.Config{Logger:(*logging.pluginLogger)(0xc4201d1900), Config:(*cluster.Config)(0xc4200d81e0), Context:context.Context(nil), Cancel:(context.CancelFunc)(nil), Brokers:[]string{\"172.17.0.1:9092\"}, GroupID:\"agent_vpp_1\", Debug:false, Topics:[]string{\"status-check\"}, Partition:-1, Partitioner:(sarama.PartitionerConstructor)(0xa08d20), InitialOffset:-1, RequiredAcks:-32768, RecvNotification:false, RecvNotificationChan:(chan *cluster.Notification)(nil), RecvError:false, RecvErrorChan:(chan error)(nil), RecvMessageChan:(chan *client.ConsumerMessage)(0xc42008d140), SendSuccess:true, SuccessChan:(chan *client.ProducerMessage)(0xc42008d560), SendError:true, ErrorChan:(chan *client.ProducerError)(0xc42008d5c0)}" loc="client/consumer.go(170)" logger=kafka
2018-05-16T13:16:28.769308428Z  
2018-05-16T13:16:28.771160910Z  2018-05-16 13:16:28,770 DEBG 'vpp' stdout output:
2018-05-16T13:16:28.771183771Z  load_one_plugin:187: Loaded plugin: flowprobe_plugin.so (Flow per Packet)
2018-05-16T13:16:28.771192485Z  
2018-05-16T13:16:28.772084222Z  2018-05-16 13:16:28,770 DEBG 'vpp' stdout output:
2018-05-16T13:16:28.772092411Z  load_one_plugin:187: Loaded plugin: gbp_plugin.so (Group Based Policy)
2018-05-16T13:16:28.772095119Z  
2018-05-16T13:16:28.773093652Z  2018-05-16 13:16:28,771 DEBG 'vpp' stdout output:
2018-05-16T13:16:28.773102067Z  load_one_plugin:187: Loaded plugin: gtpu_plugin.so (GTPv1-U)
2018-05-16T13:16:28.773104789Z  
2018-05-16T13:16:28.774105253Z  2018-05-16 13:16:28,772 DEBG 'vpp_or_agent_not_running' stdout output:
2018-05-16T13:16:28.774114777Z  READY
2018-05-16T13:16:28.774117440Z  
2018-05-16T13:16:28.774119694Z  2018-05-16 13:16:28,773 DEBG vpp_or_agent_not_running: ACKNOWLEDGED -&gt; READY
2018-05-16T13:16:28.775076596Z  2018-05-16 13:16:28,774 DEBG 'agent' stdout output:
2018-05-16T13:16:28.775084613Z  time="2018-05-16 13:16:28.77430" level=info msg="Group ID is set to agent_vpp_1" loc="kafka/plugin_impl_kafka.go(95)" logger=kafka
2018-05-16T13:16:28.775087630Z  
2018-05-16T13:16:28.775089981Z  2018-05-16 13:16:28,774 DEBG 'agent' stdout output:
2018-05-16T13:16:28.775092280Z  time="2018-05-16 13:16:28.77456" level=debug msg="Kafka connecting" addrs="[0xc420219340]" loc="mux/config.go(112)" logger=kafka
2018-05-16T13:16:28.775094931Z  
2018-05-16T13:16:28.775097001Z  2018-05-16 13:16:28,774 DEBG 'agent' stdout output:
2018-05-16T13:16:28.775099183Z  time="2018-05-16 13:16:28.77474" level=debug msg="entering NewSyncProducer ..." loc="client/syncproducer.go(48)" logger=kafka
2018-05-16T13:16:28.775101584Z  
2018-05-16T13:16:28.776070618Z  2018-05-16 13:16:28,775 DEBG 'agent' stdout output:
2018-05-16T13:16:28.776078369Z  time="2018-05-16 13:16:28.77511" level=debug msg="Entering NewAsyncProducer ..." loc="client/asyncproducer.go(51)" logger=kafka
2018-05-16T13:16:28.776081373Z  
2018-05-16T13:16:28.776083568Z  2018-05-16 13:16:28,775 DEBG 'agent' stdout output:
2018-05-16T13:16:28.776087760Z  time="2018-05-16 13:16:28.77531" level=debug msg="entering NewSyncProducer ..." loc="client/syncproducer.go(48)" logger=kafka
2018-05-16T13:16:28.776090343Z  
2018-05-16T13:16:28.776092449Z  2018-05-16 13:16:28,775 DEBG 'agent' stdout output:
2018-05-16T13:16:28.776094567Z  time="2018-05-16 13:16:28.77548" level=info msg="Invalid partition -1 - defaulting to 0" loc="client/config.go(254)" logger=kafka
2018-05-16T13:16:28.776096997Z  
2018-05-16T13:16:28.776099005Z  2018-05-16 13:16:28,775 DEBG 'agent' stdout output:
2018-05-16T13:16:28.776101093Z  time="2018-05-16 13:16:28.77564" level=debug msg="Entering NewAsyncProducer ..." loc="client/asyncproducer.go(51)" logger=kafka
2018-05-16T13:16:28.776103474Z  
2018-05-16T13:16:28.776110703Z  2018-05-16 13:16:28,775 DEBG 'agent' stdout output:
2018-05-16T13:16:28.776113222Z  time="2018-05-16 13:16:28.77582" level=info msg="Connecting to kafka took 1.073906ms" durationInNs=1073906 loc="mux/config.go(150)" logger=kafka
2018-05-16T13:16:28.776115705Z  
2018-05-16T13:16:28.776991289Z  2018-05-16 13:16:28,776 DEBG 'agent' stdout output:
2018-05-16T13:16:28.776999212Z  time="2018-05-16 13:16:28.77623" level=debug msg="Default multiplexer initialized" loc="kafka/plugin_impl_kafka.go(100)" logger=kafka
2018-05-16T13:16:28.777002311Z  
2018-05-16T13:16:28.778020195Z  2018-05-16 13:16:28,777 DEBG 'agent' stdout output:
2018-05-16T13:16:28.778028617Z  time="2018-05-16 13:16:28.77640" level=info msg="plugin Kafka: Init took 34.368681ms" durationInNs=34368681 loc="core/agent_core.go(295)" logger=agentcore
2018-05-16T13:16:28.778031814Z  time="2018-05-16 13:16:28.77646" level=info msg="Redis config not found, skip loading this plugin" loc="redis/plugin_impl_redis.go(107)" logger=redis
2018-05-16T13:16:28.778034403Z  time="2018-05-16 13:16:28.77649" level=info msg="plugin Redis: Init took 64.099µs" durationInNs=64099 loc="core/agent_core.go(295)" logger=agentcore
2018-05-16T13:16:28.778037318Z  time="2018-05-16 13:16:28.77651" level=info msg="plugin RedisDataSync: Init took 4.388µs" durationInNs=4388 loc="core/agent_core.go(295)" logger=agentcore
2018-05-16T13:16:28.778039900Z  time="2018-05-16 13:16:28.77656" level=info msg="cassandra client config not found  - skip loading this plugin" loc="cassandra/plugin_impl_cassa.go(72)" logger=cassandra
2018-05-16T13:16:28.778042515Z  time="2018-05-16 13:16:28.77658" level=info msg="plugin Cassandra: Init took 47.465µs" durationInNs=47465 loc="core/agent_core.go(295)" logger=agentcore
2018-05-16T13:16:28.778044955Z  time="2018-05-16 13:16:28.77661" level=info msg="plugin ResyncOrch: Init took 328ns" durationInNs=328 loc="core/agent_core.go(295)" logger=agentcore
2018-05-16T13:16:28.778047374Z  time="2018-05-16 13:16:28.77665" level=info msg="plugin HTTP: Init took 24.087µs" durationInNs=24087 loc="core/agent_core.go(295)" logger=agentcore
2018-05-16T13:16:28.778049867Z  time="2018-05-16 13:16:28.77670" level=info msg=init loc="rest/plugin_impl_fork.go(65)" logger=http-probe probePort=9191
2018-05-16T13:16:28.778052222Z  time="2018-05-16 13:16:28.77672" level=info msg="plugin HTTPProbe: Init took 47.718µs" durationInNs=47718 loc="core/agent_core.go(295)" logger=agentcore
2018-05-16T13:16:28.778054644Z  time="2018-05-16 13:16:28.77674" level=info msg="plugin Prometheus: Init took 1.112µs" durationInNs=1112 loc="core/agent_core.go(295)" logger=agentcore
2018-05-16T13:16:28.778057108Z  time="2018-05-16 13:16:28.77676" level=info msg="plugin HealthRPC: Init took 276ns" durationInNs=276 loc="core/agent_core.go(295)" logger=agentcore
2018-05-16T13:16:28.778059509Z  time="2018-05-16 13:16:28.77680" level=info msg="GaugeFunc('service_health') registered." loc="prometheus/plugin_impl_prometheus.go(189)" logger=prometheus
2018-05-16T13:16:28.778062362Z  time="2018-05-16 13:16:28.77685" level=info msg="GaugeFunc('service_info') registered." loc="prometheus/plugin_impl_prometheus.go(189)" logger=prometheus
2018-05-16T13:16:28.778068949Z  time="2018-05-16 13:16:28.77687" level=info msg="plugin PrometheusRPC: Init took 90.931µs" durationInNs=90931 loc="core/agent_core.go(295)" logger=agentcore
2018-05-16T13:16:28.778071640Z  
2018-05-16T13:16:28.779074000Z  2018-05-16 13:16:28,778 DEBG 'vpp' stdout output:
2018-05-16T13:16:28.779087329Z  load_one_plugin:187: Loaded plugin: igmp_plugin.so (IGMP messaging)
2018-05-16T13:16:28.779090113Z  load_one_plugin:187: Loaded plugin: ila_plugin.so (Identifier-locator addressing for IPv6)
2018-05-16T13:16:28.779092437Z  
2018-05-16T13:16:28.779094571Z  2018-05-16 13:16:28,778 DEBG 'agent' stdout output:
2018-05-16T13:16:28.779096749Z  time="2018-05-16 13:16:28.77812" level=debug msg="starting success handler ..." loc="client/asyncproducer.go(193)" logger=kafka
2018-05-16T13:16:28.779099352Z  time="2018-05-16 13:16:28.77814" level=debug msg="starting error handler ..." loc="client/asyncproducer.go(219)" logger=kafka
2018-05-16T13:16:28.779101770Z  time="2018-05-16 13:16:28.77816" level=debug msg="starting success handler ..." loc="client/asyncproducer.go(193)" logger=kafka
2018-05-16T13:16:28.779104201Z  time="2018-05-16 13:16:28.77821" level=debug msg="starting error handler ..." loc="client/asyncproducer.go(219)" logger=kafka
2018-05-16T13:16:28.779106569Z  
2018-05-16T13:16:28.780019172Z  2018-05-16 13:16:28,778 DEBG 'agent' stdout output:
2018-05-16T13:16:28.780028545Z  time="2018-05-16 13:16:28.77870" level=info msg="GRPC config not found, skip loading this plugin" loc="grpc/plugin_impl_grpc.go(142)" logger=grpc
2018-05-16T13:16:28.780031782Z  
2018-05-16T13:16:28.780952716Z  2018-05-16 13:16:28,780 DEBG 'vpp' stdout output:
2018-05-16T13:16:28.780976877Z  load_one_plugin:187: Loaded plugin: ioam_plugin.so (Inbound OAM)
2018-05-16T13:16:28.780998339Z  load_one_plugin:117: Plugin disabled (default): ixge_plugin.so
2018-05-16T13:16:28.781000712Z  load_one_plugin:187: Loaded plugin: kubeproxy_plugin.so (kube-proxy data plane)
2018-05-16T13:16:28.781003074Z  load_one_plugin:187: Loaded plugin: l2e_plugin.so (L2 Emulation)
2018-05-16T13:16:28.781005343Z  
2018-05-16T13:16:28.782109196Z  2018-05-16 13:16:28,781 DEBG 'vpp' stdout output:
2018-05-16T13:16:28.782131318Z  load_one_plugin:187: Loaded plugin: lacp_plugin.so (Link Aggregation Control Protocol)
2018-05-16T13:16:28.782134061Z  
2018-05-16T13:16:28.782866693Z  2018-05-16 13:16:28,782 DEBG 'agent' stdout output:
2018-05-16T13:16:28.782874954Z  time="2018-05-16 13:16:28.78225" level=info msg="plugin GRPC: Init took 5.329817ms" durationInNs=5329817 loc="core/agent_core.go(295)" logger=agentcore
2018-05-16T13:16:28.782878169Z  
2018-05-16T13:16:28.782880475Z  2018-05-16 13:16:28,782 DEBG 'agent' stdout output:
2018-05-16T13:16:28.782882829Z  time="2018-05-16 13:16:28.78246" level=info msg="plugin IfStatePub: Init took 525ns" durationInNs=525 loc="core/agent_core.go(295)" logger=agentcore
2018-05-16T13:16:28.782891175Z  
2018-05-16T13:16:28.784850108Z  2018-05-16 13:16:28,782 DEBG 'vpp' stdout output:
2018-05-16T13:16:28.784858359Z  load_one_plugin:187: Loaded plugin: lb_plugin.so (Load Balancer)
2018-05-16T13:16:28.784860961Z  
2018-05-16T13:16:28.784863674Z  2018-05-16 13:16:28,783 DEBG 'vpp' stdout output:
2018-05-16T13:16:28.784865859Z  load_one_plugin:187: Loaded plugin: memif_plugin.so (Packet Memory Interface (experimetal))
2018-05-16T13:16:28.784868001Z  
2018-05-16T13:16:28.784870107Z  2018-05-16 13:16:28,783 DEBG 'vpp' stdout output:
2018-05-16T13:16:28.784872226Z  load_one_plugin:187: Loaded plugin: nat_plugin.so (Network Address Translation)
2018-05-16T13:16:28.784874387Z  
2018-05-16T13:16:28.784876398Z  2018-05-16 13:16:28,784 DEBG 'vpp' stdout output:
2018-05-16T13:16:28.784878468Z  load_one_plugin:187: Loaded plugin: pppoe_plugin.so (PPPoE)
2018-05-16T13:16:28.784880559Z  
2018-05-16T13:16:28.784882568Z  2018-05-16 13:16:28,784 DEBG 'vpp' stdout output:
2018-05-16T13:16:28.784884670Z  load_one_plugin:187: Loaded plugin: srv6ad_plugin.so (Dynamic SRv6 proxy)
2018-05-16T13:16:28.784886853Z  
2018-05-16T13:16:28.784888886Z  2018-05-16 13:16:28,784 DEBG 'vpp' stdout output:
2018-05-16T13:16:28.784890967Z  load_one_plugin:187: Loaded plugin: srv6am_plugin.so (Masquerading SRv6 proxy)
2018-05-16T13:16:28.784893102Z  
2018-05-16T13:16:28.785870898Z  2018-05-16 13:16:28,785 DEBG 'vpp' stdout output:
2018-05-16T13:16:28.785879393Z  load_one_plugin:187: Loaded plugin: srv6as_plugin.so (Static SRv6 proxy)
2018-05-16T13:16:28.785882166Z  
2018-05-16T13:16:28.785884343Z  2018-05-16 13:16:28,785 DEBG 'vpp' stdout output:
2018-05-16T13:16:28.785886605Z  load_one_plugin:187: Loaded plugin: stn_plugin.so (VPP Steals the NIC for Container integration)
2018-05-16T13:16:28.785888872Z  
2018-05-16T13:16:28.786915655Z  2018-05-16 13:16:28,786 DEBG 'vpp' stdout output:
2018-05-16T13:16:28.786923612Z  load_one_plugin:187: Loaded plugin: tlsmbedtls_plugin.so (mbedtls based TLS Engine)
2018-05-16T13:16:28.786926417Z  
2018-05-16T13:16:28.786928694Z  2018-05-16 13:16:28,786 DEBG 'vpp' stdout output:
2018-05-16T13:16:28.786931014Z  load_one_plugin:187: Loaded plugin: tlsopenssl_plugin.so (openssl based TLS Engine)
2018-05-16T13:16:28.786933313Z  
2018-05-16T13:16:28.799644071Z  2018-05-16 13:16:28,799 DEBG 'vpp' stdout output:
2018-05-16T13:16:28.799657290Z  /usr/bin/vpp[6581]: tls_init_ca_chain:600: Could not initialize TLS CA certificates
2018-05-16T13:16:28.799660110Z  
2018-05-16T13:16:28.799662293Z  /usr/bin/vpp[6581]: tls_init_ca_chain:600: Could not initialize TLS CA certificates
2018-05-16T13:16:28.799673790Z  2018-05-16 13:16:28,799 DEBG 'vpp' stdout output:
2018-05-16T13:16:28.799676346Z  /usr/bin/vpp[6581]: tls_openssl_init:650: failed to initialize TLS CA chain
2018-05-16T13:16:28.799678525Z  
2018-05-16T13:16:28.799680549Z  /usr/bin/vpp[6581]: tls_openssl_init:650: failed to initialize TLS CA chain
2018-05-16T13:16:28.800654418Z  2018-05-16 13:16:28,799 DEBG 'vpp' stdout output:
2018-05-16T13:16:28.800663712Z  /usr/bin/vpp[6581]: tls_init_ca_chain:567: Could not initialize TLS CA certificates
2018-05-16T13:16:28.800666417Z  
2018-05-16T13:16:28.800668604Z  /usr/bin/vpp[6581]: tls_init_ca_chain:567: Could not initialize TLS CA certificates
2018-05-16T13:16:28.800670835Z  2018-05-16 13:16:28,799 DEBG 'vpp' stdout output:
2018-05-16T13:16:28.800673017Z  /usr/bin/vpp[6581]: tls_mbedtls_init:606: failed to initialize TLS CA chain
2018-05-16T13:16:28.800675171Z  
2018-05-16T13:16:28.800677233Z  /usr/bin/vpp[6581]: tls_mbedtls_init:606: failed to initialize TLS CA chain
2018-05-16T13:16:28.804490697Z  2018-05-16 13:16:28,803 DEBG 'vpp' stdout output:
2018-05-16T13:16:28.804500661Z  /usr/bin/vpp[6581]: load_one_plugin:67: Loaded plugin: /usr/lib/vpp_api_test_plugins/ioam_trace_test_plugin.so
2018-05-16T13:16:28.804503575Z  
2018-05-16T13:16:28.804505880Z  /usr/bin/vpp[6581]: load_one_plugin:67: Loaded plugin: /usr/lib/vpp_api_test_plugins/ioam_trace_test_plugin.so
2018-05-16T13:16:28.804508290Z  2018-05-16 13:16:28,804 DEBG 'vpp' stdout output:
2018-05-16T13:16:28.804510409Z  /usr/bin/vpp[6581]: load_one_plugin:67: Loaded plugin: /usr/lib/vpp_api_test_plugins/acl_test_plugin.so
2018-05-16T13:16:28.804512637Z  
2018-05-16T13:16:28.804514741Z  /usr/bin/vpp[6581]: load_one_plugin:67: Loaded plugin: /usr/lib/vpp_api_test_plugins/acl_test_plugin.so
2018-05-16T13:16:28.805482987Z  2018-05-16 13:16:28,804 DEBG 'vpp' stdout output:
2018-05-16T13:16:28.805491003Z  /usr/bin/vpp[6581]: load_one_plugin:67: Loaded plugin: /usr/lib/vpp_api_test_plugins/memif_test_plugin.so
2018-05-16T13:16:28.805493753Z  
2018-05-16T13:16:28.805495955Z  /usr/bin/vpp[6581]: load_one_plugin:67: Loaded plugin: /usr/lib/vpp_api_test_plugins/memif_test_plugin.so
2018-05-16T13:16:28.805498205Z  2018-05-16 13:16:28,804 DEBG 'vpp' stdout output:
2018-05-16T13:16:28.805500410Z  /usr/bin/vpp[6581]: load_one_plugin:67: Loaded plugin: /usr/lib/vpp_api_test_plugins/vxlan_gpe_ioam_export_test_plugin.so
2018-05-16T13:16:28.805502892Z  
2018-05-16T13:16:28.805505012Z  /usr/bin/vpp[6581]: load_one_plugin:67: Loaded plugin: /usr/lib/vpp_api_test_plugins/vxlan_gpe_ioam_export_test_plugin.so
2018-05-16T13:16:28.805507254Z  2018-05-16 13:16:28,805 DEBG 'vpp' stdout output:
2018-05-16T13:16:28.805509419Z  /usr/bin/vpp[6581]: load_one_plugin:67: Loaded plugin: /usr/lib/vpp_api_test_plugins/lb_test_plugin.so
2018-05-16T13:16:28.805520255Z  
2018-05-16T13:16:28.805522835Z  /usr/bin/vpp[6581]: load_one_plugin:67: Loaded plugin: /usr/lib/vpp_api_test_plugins/lb_test_plugin.so
2018-05-16T13:16:28.805525085Z  2018-05-16 13:16:28,805 DEBG 'vpp' stdout output:
2018-05-16T13:16:28.805527290Z  /usr/bin/vpp[6581]: load_one_plugin:67: Loaded plugin: /usr/lib/vpp_api_test_plugins/lacp_test_plugin.so
2018-05-16T13:16:28.805529547Z  
2018-05-16T13:16:28.806475379Z  /usr/bin/vpp[6581]: load_one_plugin:67: Loaded plugin: /usr/lib/vpp_api_test_plugins/lacp_test_plugin.so
2018-05-16T13:16:28.806483763Z  2018-05-16 13:16:28,805 DEBG 'vpp' stdout output:
2018-05-16T13:16:28.806486470Z  /usr/bin/vpp[6581]: load_one_plugin:67: Loaded plugin: /usr/lib/vpp_api_test_plugins/cdp_test_plugin.so
2018-05-16T13:16:28.806488900Z  
2018-05-16T13:16:28.806491090Z  /usr/bin/vpp[6581]: load_one_plugin:67: Loaded plugin: /usr/lib/vpp_api_test_plugins/cdp_test_plugin.so
2018-05-16T13:16:28.806493347Z  2018-05-16 13:16:28,806 DEBG 'vpp' stdout output:
2018-05-16T13:16:28.806495453Z  /usr/bin/vpp[6581]: load_one_plugin:67: Loaded plugin: /usr/lib/vpp_api_test_plugins/flowprobe_test_plugin.so
2018-05-16T13:16:28.806497890Z  
2018-05-16T13:16:28.806499986Z  /usr/bin/vpp[6581]: load_one_plugin:67: Loaded plugin: /usr/lib/vpp_api_test_plugins/flowprobe_test_plugin.so
2018-05-16T13:16:28.806502202Z  2018-05-16 13:16:28,806 DEBG 'vpp' stdout output:
2018-05-16T13:16:28.806504280Z  /usr/bin/vpp[6581]: load_one_plugin:67: Loaded plugin: /usr/lib/vpp_api_test_plugins/stn_test_plugin.so
2018-05-16T13:16:28.806506535Z  
2018-05-16T13:16:28.807524771Z  /usr/bin/vpp[6581]: load_one_plugin:67: Loaded plugin: /usr/lib/vpp_api_test_plugins/stn_test_plugin.so
2018-05-16T13:16:28.807533076Z  2018-05-16 13:16:28,806 DEBG 'vpp' stdout output:
2018-05-16T13:16:28.807550392Z  /usr/bin/vpp[6581]: load_one_plugin:67: Loaded plugin: /usr/lib/vpp_api_test_plugins/nat_test_plugin.so
2018-05-16T13:16:28.807552896Z  
2018-05-16T13:16:28.807555037Z  /usr/bin/vpp[6581]: load_one_plugin:67: Loaded plugin: /usr/lib/vpp_api_test_plugins/nat_test_plugin.so
2018-05-16T13:16:28.807557276Z  2018-05-16 13:16:28,806 DEBG 'vpp' stdout output:
2018-05-16T13:16:28.807578269Z  /usr/bin/vpp[6581]: load_one_plugin:67: Loaded plugin: /usr/lib/vpp_api_test_plugins/pppoe_test_plugin.so
2018-05-16T13:16:28.807580604Z  
2018-05-16T13:16:28.807582756Z  /usr/bin/vpp[6581]: load_one_plugin:67: Loaded plugin: /usr/lib/vpp_api_test_plugins/pppoe_test_plugin.so
2018-05-16T13:16:28.807585087Z  2018-05-16 13:16:28,807 DEBG 'vpp' stdout output:
2018-05-16T13:16:28.807601021Z  /usr/bin/vpp[6581]: load_one_plugin:67: Loaded plugin: /usr/lib/vpp_api_test_plugins/dpdk_test_plugin.so
2018-05-16T13:16:28.807603533Z  
2018-05-16T13:16:28.807605612Z  /usr/bin/vpp[6581]: load_one_plugin:67: Loaded plugin: /usr/lib/vpp_api_test_plugins/dpdk_test_plugin.so
2018-05-16T13:16:28.808528839Z  2018-05-16 13:16:28,808 DEBG 'vpp' stdout output:
2018-05-16T13:16:28.808552827Z  /usr/bin/vpp[6581]: load_one_plugin:67: Loaded plugin: /usr/lib/vpp_api_test_plugins/udp_ping_test_plugin.so
2018-05-16T13:16:28.808555665Z  
2018-05-16T13:16:28.808881104Z  /usr/bin/vpp[6581]: load_one_plugin:67: Loaded plugin: /usr/lib/vpp_api_test_plugins/udp_ping_test_plugin.so
2018-05-16T13:16:28.809376476Z  2018-05-16 13:16:28,808 DEBG 'vpp' stdout output:
2018-05-16T13:16:28.809384074Z  /usr/bin/vpp[6581]: load_one_plugin:67: Loaded plugin: /usr/lib/vpp_api_test_plugins/ioam_export_test_plugin.so
2018-05-16T13:16:28.809386666Z  
2018-05-16T13:16:28.809388896Z  /usr/bin/vpp[6581]: load_one_plugin:67: Loaded plugin: /usr/lib/vpp_api_test_plugins/ioam_export_test_plugin.so
2018-05-16T13:16:28.809951809Z  2018-05-16 13:16:28,809 DEBG 'vpp' stdout output:
2018-05-16T13:16:28.809959546Z  /usr/bin/vpp[6581]: load_one_plugin:67: Loaded plugin: /usr/lib/vpp_api_test_plugins/kubeproxy_test_plugin.so
2018-05-16T13:16:28.809962053Z  
2018-05-16T13:16:28.809964167Z  /usr/bin/vpp[6581]: load_one_plugin:67: Loaded plugin: /usr/lib/vpp_api_test_plugins/kubeproxy_test_plugin.so
2018-05-16T13:16:28.809966783Z  2018-05-16 13:16:28,809 DEBG 'vpp' stdout output:
2018-05-16T13:16:28.809968993Z  /usr/bin/vpp[6581]: load_one_plugin:67: Loaded plugin: /usr/lib/vpp_api_test_plugins/ioam_pot_test_plugin.so
2018-05-16T13:16:28.809971292Z  
2018-05-16T13:16:28.809973369Z  /usr/bin/vpp[6581]: load_one_plugin:67: Loaded plugin: /usr/lib/vpp_api_test_plugins/ioam_pot_test_plugin.so
2018-05-16T13:16:28.810415504Z  2018-05-16 13:16:28,810 DEBG 'vpp' stdout output:
2018-05-16T13:16:28.810422833Z  /usr/bin/vpp[6581]: load_one_plugin:67: Loaded plugin: /usr/lib/vpp_api_test_plugins/gtpu_test_plugin.so
2018-05-16T13:16:28.810425337Z  
2018-05-16T13:16:28.810427420Z  /usr/bin/vpp[6581]: load_one_plugin:67: Loaded plugin: /usr/lib/vpp_api_test_plugins/gtpu_test_plugin.so
2018-05-16T13:16:28.810973900Z  2018-05-16 13:16:28,810 DEBG 'vpp' stdout output:
2018-05-16T13:16:28.810983173Z  /usr/bin/vpp[6581]: load_one_plugin:67: Loaded plugin: /usr/lib/vpp_api_test_plugins/ioam_vxlan_gpe_test_plugin.so
2018-05-16T13:16:28.810986617Z  
2018-05-16T13:16:28.811001756Z  /usr/bin/vpp[6581]: load_one_plugin:67: Loaded plugin: /usr/lib/vpp_api_test_plugins/ioam_vxlan_gpe_test_plugin.so
2018-05-16T13:16:28.850560399Z  2018-05-16 13:16:28,850 DEBG 'agent' stdout output:
2018-05-16T13:16:28.850574177Z  time="2018-05-16 13:16:28.84942" level=info msg="Connected to VPP."
2018-05-16T13:16:28.850577380Z  time="2018-05-16 13:16:28.84955" level=info msg="Connecting to VPP took 66.810297ms" durationInNs=66810297 loc="govppmux/plugin_impl_govppmux.go(135)" logger=govpp
2018-05-16T13:16:28.850580218Z  
2018-05-16T13:16:28.855055868Z  2018-05-16 13:16:28,854 DEBG 'agent' stdout output:
2018-05-16T13:16:28.855072355Z  time="2018-05-16 13:16:28.85409" level=debug msg="version info: &amp;{Program:vpe Version:18.04-release BuildDate:Thu Apr 26 13:13:56 UTC 2018 BuildDirectory:/opt/vpp-agent/dev/vpp}" loc="govppmux/plugin_impl_govppmux.go(235)" logger=govpp
2018-05-16T13:16:28.855076348Z  time="2018-05-16 13:16:28.85413" level=info msg="VPP version: 18.04-release (Thu Apr 26 13:13:56 UTC 2018)" loc="govppmux/plugin_impl_govppmux.go(236)" logger=govpp
2018-05-16T13:16:28.855078966Z  time="2018-05-16 13:16:28.85416" level=info msg="Plugin govpp: status check probe registered" loc="statuscheck/plugin_impl_statuscheck.go(144)" logger=status-check
2018-05-16T13:16:28.855081498Z  time="2018-05-16 13:16:28.85419" level=info msg="Agent plugin state update." lastErr="&lt;nil&gt;" loc="statuscheck/plugin_impl_statuscheck.go(189)" logger=status-check plugin=govpp state=ok
2018-05-16T13:16:28.855084262Z  time="2018-05-16 13:16:28.85423" level=debug msg="govpp connect success &amp;{0xc4202b0980 1 0x191acc0 {{0 0} 0 0 0 0} map[control_ping_51077d14:763 control_ping_reply_f6b0b8ca:764 show_version_51077d14:773 show_version_reply_8b5a13b4:774] {{0 0} 0 0 0 0} map[2:0xc4202897a0 1:0xc420289560] {{0 0} 0 0 0 0} map[] 2 763 764}" loc="govppmux/plugin_impl_govppmux.go(141)" logger=govpp
2018-05-16T13:16:28.855089090Z  time="2018-05-16 13:16:28.85425" level=info msg="plugin GoVPP: Init took 71.642918ms" durationInNs=71642918 loc="core/agent_core.go(295)" logger=agentcore
2018-05-16T13:16:28.855091641Z  time="2018-05-16 13:16:28.85429" level=debug msg="Initializing Linux plugins" loc="linuxplugin/linuxplugin_init.go(115)" logger=linuxplugin
2018-05-16T13:16:28.855094015Z  time="2018-05-16 13:16:28.85441" level=debug msg="Linuxplugin config found" loc="linuxplugin/linuxplugin_init.go(273)" logger=linuxplugin
2018-05-16T13:16:28.855096374Z  time="2018-05-16 13:16:28.85443" level=info msg="stopwatch enabled for linuxplugin" loc="linuxplugin/linuxplugin_init.go(124)" logger=linuxplugin
2018-05-16T13:16:28.855098780Z  time="2018-05-16 13:16:28.85446" level=info msg="Init Linux namespace handler" loc="linuxplugin/linuxplugin_init.go(166)" logger=linuxplugin
2018-05-16T13:16:28.855101194Z  
2018-05-16T13:16:28.855618150Z  2018-05-16 13:16:28,855 DEBG 'agent' stdout output:
2018-05-16T13:16:28.855626429Z  time="2018-05-16 13:16:28.85488" level=info msg="Initializing namespace handler plugin" loc="nsplugin/ns_impl.go(73)" logger=linuxplugin-ns-handler
2018-05-16T13:16:28.855629408Z  time="2018-05-16 13:16:28.85495" level=debug msg="Using docker client endpoint: unix:///var/run/docker.sock" loc="nsplugin/ns_impl.go(101)" logger=linuxplugin-ns-handler
2018-05-16T13:16:28.855632098Z  
2018-05-16T13:16:28.856047823Z  2018-05-16 13:16:28,855 DEBG 'agent' stdout output:
2018-05-16T13:16:28.856055470Z  time="2018-05-16 13:16:28.85530" level=debug msg="namespace not found" loc="nsplugin/namespaces.go(301)" logger=linuxplugin-ns-handler namespace=veth-cfg-ns
2018-05-16T13:16:28.856058444Z  time="2018-05-16 13:16:28.85533" level=debug msg="Creating new named Linux namespace" loc="nsplugin/namespaces.go(185)" logger=linuxplugin-ns-handler namespace=veth-cfg-ns
2018-05-16T13:16:28.856061107Z  
2018-05-16T13:16:28.857056439Z  2018-05-16 13:16:28,856 DEBG 'agent' stdout output:
2018-05-16T13:16:28.857069394Z  time="2018-05-16 13:16:28.85630" level=info msg="Init Linux interface plugin" loc="linuxplugin/linuxplugin_init.go(176)" logger=linuxplugin
2018-05-16T13:16:28.857072790Z  time="2018-05-16 13:16:28.85633" level=debug msg="Initializing Linux Interface configurator" loc="ifplugin/interface_config.go(86)" logger=linuxplugin-if-conf
2018-05-16T13:16:28.857075460Z  time="2018-05-16 13:16:28.85637" level=debug msg="Initializing Linux Interface State Updater" loc="ifplugin/interface_state.go(54)" logger=linuxplugin-if-state
2018-05-16T13:16:28.857077905Z  time="2018-05-16 13:16:28.85641" level=info msg="Init Linux L3 plugin" loc="linuxplugin/linuxplugin_init.go(209)" logger=linuxplugin
2018-05-16T13:16:28.857080393Z  time="2018-05-16 13:16:28.85644" level=debug msg="Initializing Linux ARP configurator" loc="l3plugin/arp_config.go(68)" logger=linuxplugin-arp-conf
2018-05-16T13:16:28.857082848Z  time="2018-05-16 13:16:28.85647" level=debug msg="Initializing Linux Route configurator" loc="l3plugin/route_config.go(68)" logger=linuxplugin-route-conf
2018-05-16T13:16:28.857085225Z  
2018-05-16T13:16:28.857590184Z  2018-05-16 13:16:28,857 DEBG 'agent' stdout output:
2018-05-16T13:16:28.857597648Z  time="2018-05-16 13:16:28.85675" level=debug msg="subscribeWatcher begin" loc="linuxplugin/data_resync.go(152)" logger=linuxplugin
2018-05-16T13:16:28.857600567Z  time="2018-05-16 13:16:28.85679" level=debug msg="Watch linuxplugin" loc="mem/inmemory_name_mapping.go(149)" logger=defaultLogger
2018-05-16T13:16:28.857603015Z  time="2018-05-16 13:16:28.85682" level=debug msg="data watcher watch finished" loc="linuxplugin/data_resync.go(163)" logger=linuxplugin
2018-05-16T13:16:28.857605356Z  time="2018-05-16 13:16:28.85684" level=info msg="plugin Linux: Init took 2.563381ms" durationInNs=2563381 loc="core/agent_core.go(295)" logger=agentcore
2018-05-16T13:16:28.857607866Z  time="2018-05-16 13:16:28.85687" level=debug msg="Initializing default plugins" loc="defaultplugins/plugin_impl_vpp.go(282)" logger=default-plugins
2018-05-16T13:16:28.857610310Z  time="2018-05-16 13:16:28.85698" level=debug msg="defaultplugins config found: &amp;{Mtu:0 Stopwatch:true Strategy: StatusPublishers:[]}" loc="defaultplugins/plugin_impl_vpp.go(744)" logger=default-plugins
2018-05-16T13:16:28.857613035Z  
2018-05-16T13:16:28.857615163Z  2018-05-16 13:16:28,857 DEBG 'agent' stdout output:
2018-05-16T13:16:28.857617397Z  time="2018-05-16 13:16:28.85731" level=debug msg="status publishers from env: etcd" loc="defaultplugins/plugin_impl_vpp.go(747)" logger=default-plugins
2018-05-16T13:16:28.857619891Z  
2018-05-16T13:16:28.858062568Z  2018-05-16 13:16:28,857 DEBG 'agent' stdout output:
2018-05-16T13:16:28.858070864Z  time="2018-05-16 13:16:28.85748" level=info msg="Added status publisher \"etcd\" from config" loc="defaultplugins/plugin_impl_vpp.go(300)" logger=default-plugins
2018-05-16T13:16:28.858074267Z  
2018-05-16T13:16:28.858554847Z  2018-05-16 13:16:28,858 DEBG 'agent' stdout output:
2018-05-16T13:16:28.858562630Z  time="2018-05-16 13:16:28.85780" level=info msg="stopwatch enabled for default-plugins" loc="defaultplugins/plugin_impl_vpp.go(309)" logger=default-plugins
2018-05-16T13:16:28.858571018Z  time="2018-05-16 13:16:28.85783" level=info msg="Resync strategy  is not known, setting up the full resync" loc="defaultplugins/plugin_impl_vpp.go(392)" logger=default-plugins
2018-05-16T13:16:28.858574003Z  time="2018-05-16 13:16:28.85785" level=info msg="VPP resync strategy is set to full" loc="defaultplugins/plugin_impl_vpp.go(315)" logger=default-plugins
2018-05-16T13:16:28.858576526Z  time="2018-05-16 13:16:28.85790" level=info msg="Init interface plugin" loc="defaultplugins/plugin_impl_vpp.go(417)" logger=default-plugins
2018-05-16T13:16:28.858578998Z  time="2018-05-16 13:16:28.85794" level=debug msg="Initializing Interface configurator" loc="ifplugin/interface_config.go(92)" logger=default-plugins-if-conf
2018-05-16T13:16:28.858581423Z  
2018-05-16T13:16:28.858583976Z  2018-05-16 13:16:28,858 DEBG 'agent' stdout output:
2018-05-16T13:16:28.858586219Z  time="2018-05-16 13:16:28.85831" level=info msg="Initializing AF-Packet configurator" loc="ifplugin/afpacket_config.go(78)" logger=default-plugins-if-conf
2018-05-16T13:16:28.858588708Z  
2018-05-16T13:16:28.859134897Z  2018-05-16 13:16:28,858 DEBG 'agent' stdout output:
2018-05-16T13:16:28.859142478Z  time="2018-05-16 13:16:28.85863" level=debug msg="Linux interface state watcher started" loc="ifplugin/interface_config.go(751)" logger=linuxplugin-if-conf
2018-05-16T13:16:28.859145426Z  time="2018-05-16 13:16:28.85866" level=debug msg="Watching on linux link notifications" loc="ifplugin/interface_state.go(87)" logger=linuxplugin-if-state
2018-05-16T13:16:28.859147903Z  
2018-05-16T13:16:28.861564446Z  2018-05-16 13:16:28,860 DEBG 'agent' stdout output:
2018-05-16T13:16:28.861573113Z  time="2018-05-16 13:16:28.85935" level=debug msg="Memif socket dump completed, found 1 entries" loc="vppdump/dump_vppcalls.go(172)" logger=default-plugins-if-conf
2018-05-16T13:16:28.861576198Z  time="2018-05-16 13:16:28.85939" level=debug msg="ifConfigurator Initialized" loc="defaultplugins/plugin_impl_vpp.go(434)" logger=default-plugins
2018-05-16T13:16:28.861578903Z  time="2018-05-16 13:16:28.85943" level=info msg="Initializing InterfaceStateUpdater" loc="ifplugin/interface_state.go(93)" logger=default-plugins-if-state
2018-05-16T13:16:28.861581451Z  time="2018-05-16 13:16:28.85950" level=debug msg="Watch ifplugin_ifstate" loc="mem/inmemory_name_mapping.go(149)" logger=default-plugins-if-conf
2018-05-16T13:16:28.861583836Z  time="2018-05-16 13:16:28.85953" level=debug msg="ifStateUpdater Initialized" loc="defaultplugins/plugin_impl_vpp.go(450)" logger=default-plugins
2018-05-16T13:16:28.861586301Z  time="2018-05-16 13:16:28.85956" level=info msg="Initializing BFD configurator" loc="ifplugin/bfd_config.go(61)" logger=default-plugins-bfd-conf
2018-05-16T13:16:28.861588778Z  time="2018-05-16 13:16:28.85962" level=debug msg="bfdConfigurator Initialized" loc="defaultplugins/plugin_impl_vpp.go(457)" logger=default-plugins
2018-05-16T13:16:28.861591167Z  time="2018-05-16 13:16:28.85965" level=debug msg="Initializing STN configurator" loc="ifplugin/stn_config.go(74)" logger=default-plugins-stn-conf
2018-05-16T13:16:28.861598515Z  time="2018-05-16 13:16:28.85969" level=debug msg="stnConfigurator Initialized" loc="defaultplugins/plugin_impl_vpp.go(464)" logger=default-plugins
2018-05-16T13:16:28.861601247Z  time="2018-05-16 13:16:28.85972" level=debug msg="Initializing NAT configurator" loc="ifplugin/nat_config.go(92)" logger=default-plugins-nat-conf
2018-05-16T13:16:28.861603618Z  time="2018-05-16 13:16:28.85976" level=debug msg="Configurator Initialized" loc="defaultplugins/plugin_impl_vpp.go(471)" logger=default-plugins
2018-05-16T13:16:28.861606001Z  time="2018-05-16 13:16:28.85978" level=info msg="Init IPSec plugin" loc="defaultplugins/plugin_impl_vpp.go(477)" logger=default-plugins
2018-05-16T13:16:28.861608384Z  time="2018-05-16 13:16:28.85980" level=debug msg="Initializing IPSec configurator" loc="ipsecplugin/ipsec_config.go(68)" logger=default-plugins-ipsec-plugin
2018-05-16T13:16:28.861611538Z  time="2018-05-16 13:16:28.85984" level=debug msg="ipsecConfigurator Initialized" loc="defaultplugins/plugin_impl_vpp.go(509)" logger=default-plugins
2018-05-16T13:16:28.861614066Z  time="2018-05-16 13:16:28.85986" level=info msg="Init ACL plugin" loc="defaultplugins/plugin_impl_vpp.go(514)" logger=default-plugins
2018-05-16T13:16:28.861616484Z  time="2018-05-16 13:16:28.85989" level=info msg="Initializing ACL configurator" loc="aclplugin/acl_config.go(74)" logger=default-plugins-acl-plugin
2018-05-16T13:16:28.861618944Z  time="2018-05-16 13:16:28.85996" level=debug msg="aclConfigurator Initialized" loc="defaultplugins/plugin_impl_vpp.go(539)" logger=default-plugins
2018-05-16T13:16:28.861621365Z  time="2018-05-16 13:16:28.85998" level=info msg="Init L2 plugin" loc="defaultplugins/plugin_impl_vpp.go(545)" logger=default-plugins
2018-05-16T13:16:28.861623752Z  time="2018-05-16 13:16:28.86013" level=info msg="Initializing BridgeDomainStateUpdater" loc="l2plugin/bd_state.go(63)" logger=default-plugins-l2-bd-state
2018-05-16T13:16:28.861626239Z  time="2018-05-16 13:16:28.86017" level=debug msg="Watch bdplugin_bdstate" loc="mem/inmemory_name_mapping.go(149)" logger=default-plugins-l2-bd-conf
2018-05-16T13:16:28.861628713Z  time="2018-05-16 13:16:28.86020" level=debug msg="Initializing L2 Bridge domains configurator" loc="l2plugin/bd_config.go(72)" logger=default-plugins-l2-bd-conf
2018-05-16T13:16:28.861631162Z  time="2018-05-16 13:16:28.86024" level=debug msg="bdConfigurator Initialized" loc="defaultplugins/plugin_impl_vpp.go(602)" logger=default-plugins
2018-05-16T13:16:28.861633551Z  time="2018-05-16 13:16:28.86027" level=debug msg="Initializing L2 Bridge domains" loc="l2plugin/fib_config.go(61)" logger=default-plugins-l2-fib-conf
2018-05-16T13:16:28.861635969Z  time="2018-05-16 13:16:28.86031" level=debug msg="fibConfigurator Initialized" loc="defaultplugins/plugin_impl_vpp.go(609)" logger=default-plugins
2018-05-16T13:16:28.861638358Z  time="2018-05-16 13:16:28.86034" level=info msg="Initializing L2 xConnect configurator" loc="l2plugin/xconnect_config.go(53)" logger=default-plugins-xc-conf
2018-05-16T13:16:28.861640806Z  time="2018-05-16 13:16:28.86037" level=debug msg="xcConfigurator Initialized" loc="defaultplugins/plugin_impl_vpp.go(616)" logger=default-plugins
2018-05-16T13:16:28.861646412Z  time="2018-05-16 13:16:28.86039" level=info msg="Init L3 plugin" loc="defaultplugins/plugin_impl_vpp.go(622)" logger=default-plugins
2018-05-16T13:16:28.861686362Z  time="2018-05-16 13:16:28.86043" level=debug msg="Initializing L3 Route configurator" loc="l3plugin/route_config.go(64)" logger=default-plugins-l3-route-conf
2018-05-16T13:16:28.861691098Z  time="2018-05-16 13:16:28.86046" level=debug msg="routeConfigurator Initialized" loc="defaultplugins/plugin_impl_vpp.go(688)" logger=default-plugins
2018-05-16T13:16:28.861693953Z  time="2018-05-16 13:16:28.86048" level=debug msg="Initializing ARP configurator" loc="l3plugin/arp_config.go(66)" logger=default-plugins-l3-arp-conf
2018-05-16T13:16:28.861696516Z  
2018-05-16T13:16:28.862077194Z  2018-05-16 13:16:28,861 DEBG 'agent' stdout output:
2018-05-16T13:16:28.862085022Z  time="2018-05-16 13:16:28.86070" level=debug msg="arpConfigurator Initialized" loc="defaultplugins/plugin_impl_vpp.go(693)" logger=default-plugins
2018-05-16T13:16:28.862087901Z  time="2018-05-16 13:16:28.86073" level=debug msg="Initializing proxy ARP configurator" loc="l3plugin/arp_proxy_config.go(67)" logger=default-plugins-l3-proxyarp-conf
2018-05-16T13:16:28.862090382Z  time="2018-05-16 13:16:28.86076" level=debug msg="proxyArpConfigurator Initialized" loc="defaultplugins/plugin_impl_vpp.go(698)" logger=default-plugins
2018-05-16T13:16:28.862092871Z  time="2018-05-16 13:16:28.86078" level=info msg="Init L4 plugin" loc="defaultplugins/plugin_impl_vpp.go(704)" logger=default-plugins
2018-05-16T13:16:28.862095294Z  time="2018-05-16 13:16:28.86080" level=debug msg="Initializing L4 configurator" loc="l4plugin/l4_configurator.go(66)" logger=default-plugins-l4-plugin
2018-05-16T13:16:28.862097689Z  time="2018-05-16 13:16:28.86083" level=debug msg="l4Configurator Initialized" loc="defaultplugins/plugin_impl_vpp.go(729)" logger=default-plugins
2018-05-16T13:16:28.862100068Z  time="2018-05-16 13:16:28.86087" level=debug msg="subscribeWatcher begin" loc="defaultplugins/data_resync.go(685)" logger=default-plugins
2018-05-16T13:16:28.862102430Z  time="2018-05-16 13:16:28.86089" level=debug msg="Watch default-plugins" loc="mem/inmemory_name_mapping.go(149)" logger=default-plugins-if-conf
2018-05-16T13:16:28.862104839Z  time="2018-05-16 13:16:28.86091" level=debug msg="swIfIndexes watch registration finished" loc="defaultplugins/data_resync.go(687)" logger=default-plugins
2018-05-16T13:16:28.862107238Z  time="2018-05-16 13:16:28.86093" level=debug msg="Watch default-plugins" loc="mem/inmemory_name_mapping.go(149)" logger=default-plugins-l2-bd-conf
2018-05-16T13:16:28.862109614Z  time="2018-05-16 13:16:28.86095" level=debug msg="bdIndexes watch registration finished" loc="defaultplugins/data_resync.go(689)" logger=default-plugins
2018-05-16T13:16:28.862111992Z  time="2018-05-16 13:16:28.86098" level=debug msg="Watch default-plugins" loc="mem/inmemory_name_mapping.go(149)" logger=defaultLogger
2018-05-16T13:16:28.862114414Z  
2018-05-16T13:16:28.862573552Z  2018-05-16 13:16:28,862 DEBG 'agent' stdout output:
2018-05-16T13:16:28.862586388Z  time="2018-05-16 13:16:28.86100" level=debug msg="linuxIfIndexes watch registration finished" loc="defaultplugins/data_resync.go(692)" logger=default-plugins
2018-05-16T13:16:28.862589602Z  time="2018-05-16 13:16:28.86198" level=debug msg="data Transport watch finished" loc="defaultplugins/data_resync.go(727)" logger=default-plugins
2018-05-16T13:16:28.862592125Z  
2018-05-16T13:16:28.863151340Z  2018-05-16 13:16:28,862 DEBG 'agent' stdout output:
2018-05-16T13:16:28.863159291Z  time="2018-05-16 13:16:28.86229" level=info msg="plugin VPP: Init took 5.138823ms" durationInNs=5138823 loc="core/agent_core.go(295)" logger=agentcore
2018-05-16T13:16:28.863162272Z  time="2018-05-16 13:16:28.86233" level=info msg="plugin GRPCSvcPlugin: Init took 8.605µs" durationInNs=8605 loc="core/agent_core.go(295)" logger=agentcore
2018-05-16T13:16:28.863165249Z  time="2018-05-16 13:16:28.86235" level=info msg="plugin RESTAPIPlugin: Init took 279ns" durationInNs=279 loc="core/agent_core.go(295)" logger=agentcore
2018-05-16T13:16:28.863167708Z  time="2018-05-16 13:16:28.86238" level=debug msg="Register handler /log/{logger}/{level:debug|info|warning|error|fatal|panic}" loc="rest/plugin_impl_rest.go(80)" logger=http
2018-05-16T13:16:28.863170259Z  time="2018-05-16 13:16:28.86248" level=debug msg="Register handler /log/list" loc="rest/plugin_impl_rest.go(80)" logger=http
2018-05-16T13:16:28.863172782Z  
2018-05-16T13:16:28.869650956Z  2018-05-16 13:16:28,869 DEBG 'agent' stdout output:
2018-05-16T13:16:28.869660781Z  time="2018-05-16 13:16:28.86280" level=info msg="plugin Logs: AfterInit took 133.885µs" durationInNs=133885 loc="core/agent_core.go(345)" logger=agentcore
2018-05-16T13:16:28.869664158Z  time="2018-05-16 13:16:28.86283" level=info msg="plugin ServiceLabel: not implement AfterInit" loc="core/agent_core.go(348)" logger=agentcore
2018-05-16T13:16:28.869666708Z  time="2018-05-16 13:16:28.86286" level=info msg="plugin StatusCheck: AfterInit took 2.151µs" durationInNs=2151 loc="core/agent_core.go(345)" logger=agentcore
2018-05-16T13:16:28.869669306Z  time="2018-05-16 13:16:28.86287" level=info msg="plugin ETCD: not implement AfterInit" loc="core/agent_core.go(348)" logger=agentcore
2018-05-16T13:16:28.869671804Z  
2018-05-16T13:16:28.871619251Z  2018-05-16 13:16:28,869 DEBG 'agent' stdout output:
2018-05-16T13:16:28.871629519Z  time="2018-05-16 13:16:28.86406" level=debug msg="Started watcher on DHCP notifications" loc="ifplugin/interface_config.go(922)" logger=default-plugins-if-conf
2018-05-16T13:16:28.871632727Z  time="2018-05-16 13:16:28.86431" level=info msg="watchVPPNotifications starting" loc="ifplugin/interface_state.go(204)" logger=default-plugins-if-state
2018-05-16T13:16:28.871635353Z  time="2018-05-16 13:16:28.86435" level=info msg="watchVPPNotifications for bridge domain state started" loc="l2plugin/bd_state.go(93)" logger=default-plugins-l2-bd-state
2018-05-16T13:16:28.871637972Z  time="2018-05-16 13:16:28.86484" level=info msg="Docker ping check OK" loc="nsplugin/microservices.go(255)" logger=linuxplugin-ns-handler
2018-05-16T13:16:28.871640485Z  time="2018-05-16 13:16:28.86683" level=debug msg="processing new container 229bc936e9b554278970cb1b91c8f6618d28efbb634b756bff29acd84006462f with state running" loc="nsplugin/microservices.go(133)" logger=linuxplugin-ns-handler
2018-05-16T13:16:28.871648997Z  time="2018-05-16 13:16:28.86776" level=debug msg="detected container as microservice: Name=/agent_vpp_1 ID=229bc936e9b554278970cb1b91c8f6618d28efbb634b756bff29acd84006462f Created=2018-05-16 13:16:26.883690347 +0000 UTC State.StartedAt=2018-05-16 13:16:27.522354076 +0000 UTC" loc="nsplugin/microservices.go(166)" logger=linuxplugin-ns-handler
2018-05-16T13:16:28.871652117Z  time="2018-05-16 13:16:28.86779" level=debug msg="Discovered new microservice" id=229bc936e9b554278970cb1b91c8f6618d28efbb634b756bff29acd84006462f label=agent_vpp_1 loc="nsplugin/microservices.go(191)" logger=linuxplugin-ns-handler pid=6533
2018-05-16T13:16:28.871654736Z  time="2018-05-16 13:16:28.86782" level=debug msg="processing new container 2f7d62033432e9ea17db0045c43ee775fb65d88729928e2d7ee8603c457988ce with state running" loc="nsplugin/microservices.go(133)" logger=linuxplugin-ns-handler
2018-05-16T13:16:28.871657315Z  time="2018-05-16 13:16:28.86838" level=debug msg="processing new container 5fd9956e4db0bd3e22e70789fa34a6dc23ab3c7853dc9211d1df5f06a8942d37 with state running" loc="nsplugin/microservices.go(133)" logger=linuxplugin-ns-handler
2018-05-16T13:16:28.871660377Z  time="2018-05-16 13:16:28.86899" level=debug msg="processing new container dbef312b260f0794c6620b2ab230a76886e53d6bb38bc91ab1cf624acd59f448 with state running" loc="nsplugin/microservices.go(133)" logger=linuxplugin-ns-handler
2018-05-16T13:16:28.871662945Z  
2018-05-16T13:16:28.927102401Z  2018-05-16 13:16:28,925 DEBG 'agent' stdout output:
2018-05-16T13:16:28.927115770Z  time="2018-05-16 13:16:28.92542" level=info msg="plugin ETCDDataSync: AfterInit took 62.487641ms" durationInNs=62487641 loc="core/agent_core.go(345)" logger=agentcore
2018-05-16T13:16:28.927119561Z  
2018-05-16T13:16:28.927121908Z  2018-05-16 13:16:28,926 DEBG 'agent' stdout output:
2018-05-16T13:16:28.927124246Z  time="2018-05-16 13:16:28.92621" level=info msg="plugin Consul: not implement AfterInit" loc="core/agent_core.go(348)" logger=agentcore
2018-05-16T13:16:28.927126848Z  
2018-05-16T13:16:28.927129024Z  2018-05-16 13:16:28,926 DEBG 'agent' stdout output:
2018-05-16T13:16:28.927131261Z  time="2018-05-16 13:16:28.92640" level=info msg="plugin ConsulDataSync: AfterInit took 746ns" durationInNs=746 loc="core/agent_core.go(345)" logger=agentcore
2018-05-16T13:16:28.927133850Z  
2018-05-16T13:16:28.927136027Z  2018-05-16 13:16:28,926 DEBG 'agent' stdout output:
2018-05-16T13:16:28.927138302Z  time="2018-05-16 13:16:28.92658" level=debug msg="Consuming started" hashTopics="[]" loc="mux/multiplexer.go(191)" logger=kafka manualTopics="[]"
2018-05-16T13:16:28.927140999Z  
2018-05-16T13:16:28.928027553Z  2018-05-16 13:16:28,927 DEBG 'agent' stdout output:
2018-05-16T13:16:28.928041399Z  time="2018-05-16 13:16:28.92675" level=debug msg="entering NewConsumer ..." loc="client/consumer.go(59)" logger=kafka
2018-05-16T13:16:28.928044955Z  time="2018-05-16 13:16:28.92681" level=debug msg="Consumer config: &amp;client.Config{Logger:(*logging.pluginLogger)(0xc4201d1900), Config:(*cluster.Config)(0xc4200d81e0), Context:context.Context(nil), Cancel:(context.CancelFunc)(nil), Brokers:[]string{\"172.17.0.1:9092\"}, GroupID:\"agent_vpp_1\", Debug:false, Topics:[]string(nil), Partition:0, Partitioner:(sarama.PartitionerConstructor)(0xa089d0), InitialOffset:-2, RequiredAcks:-1, RecvNotification:false, RecvNotificationChan:(chan *cluster.Notification)(nil), RecvError:false, RecvErrorChan:(chan error)(nil), RecvMessageChan:(chan *client.ConsumerMessage)(0xc42043aa80), SendSuccess:true, SuccessChan:(chan *client.ProducerMessage)(0xc42008d560), SendError:true, ErrorChan:(chan *client.ProducerError)(0xc42008d5c0)}" loc="client/consumer.go(63)" logger=kafka
2018-05-16T13:16:28.928057691Z  
2018-05-16T13:16:28.930988981Z  2018-05-16 13:16:28,930 DEBG 'agent' stdout output:
2018-05-16T13:16:28.931020945Z  time="2018-05-16 13:16:28.93044" level=debug msg="new client created successfully ..." loc="client/consumer.go(75)" logger=kafka
2018-05-16T13:16:28.931024485Z  
2018-05-16T13:16:29.937797999Z  2018-05-16 13:16:29,937 INFO success: vpp_or_agent_not_running entered RUNNING state, process has stayed up for &gt; than 1 seconds (startsecs)
2018-05-16T13:16:29.937811677Z  2018-05-16 13:16:29,937 INFO success: vpp entered RUNNING state, process has stayed up for &gt; than 1 seconds (startsecs)
2018-05-16T13:16:29.938257214Z  2018-05-16 13:16:29,937 INFO success: agent entered RUNNING state, process has stayed up for &gt; than 1 seconds (startsecs)
2018-05-16T13:16:32.386494978Z  2018-05-16 13:16:32,385 DEBG 'agent' stdout output:
2018-05-16T13:16:32.386509023Z  time="2018-05-16 13:16:32.38534" level=debug msg="No topics for hash partitioner" loc="mux/multiplexer.go(198)" logger=kafka
2018-05-16T13:16:32.386512372Z  time="2018-05-16 13:16:32.38538" level=debug msg="No topics for manual partitioner" loc="mux/multiplexer.go(205)" logger=kafka
2018-05-16T13:16:32.386514889Z  
2018-05-16T13:16:32.388538216Z  2018-05-16 13:16:32,387 DEBG 'agent' stdout output:
2018-05-16T13:16:32.388547877Z  time="2018-05-16 13:16:32.38568" level=info msg="Plugin kafka: status check probe registered" loc="statuscheck/plugin_impl_statuscheck.go(144)" logger=status-check
2018-05-16T13:16:32.388551255Z  time="2018-05-16 13:16:32.38571" level=info msg="plugin Kafka: AfterInit took 3.459135943s" durationInNs=3459135943 loc="core/agent_core.go(345)" logger=agentcore
2018-05-16T13:16:32.388553879Z  time="2018-05-16 13:16:32.38573" level=info msg="plugin Redis: not implement AfterInit" loc="core/agent_core.go(348)" logger=agentcore
2018-05-16T13:16:32.388556348Z  time="2018-05-16 13:16:32.38575" level=info msg="plugin RedisDataSync: AfterInit took 600ns" durationInNs=600 loc="core/agent_core.go(345)" logger=agentcore
2018-05-16T13:16:32.388558750Z  time="2018-05-16 13:16:32.38577" level=info msg="plugin Cassandra: AfterInit took 303ns" durationInNs=303 loc="core/agent_core.go(345)" logger=agentcore
2018-05-16T13:16:32.388561276Z  time="2018-05-16 13:16:32.38580" level=info msg="Resync order[Config VPP default plug:IF/L2/L3 Status VPP default plug:IF/L2/L3 linuxplugin]" loc="resync/plugin_impl_resync.go(103)" logger=resync-orch
2018-05-16T13:16:32.388571565Z  time="2018-05-16 13:16:32.38755" level=debug msg="Generic Consumer started" loc="mux/multiplexer.go(294)" logger=kafka
2018-05-16T13:16:32.388574314Z  time="2018-05-16 13:16:32.38759" level=debug msg="Generic Consumer started" loc="mux/multiplexer.go(311)" logger=kafka
2018-05-16T13:16:32.388576669Z  
2018-05-16T13:16:32.434826365Z  2018-05-16 13:16:32,434 DEBG 'agent' stdout output:
2018-05-16T13:16:32.434840407Z  time="2018-05-16 13:16:32.43344" level=debug msg="Received RESYNC key vpp/config/v1/l4/namespaces/" loc="defaultplugins/data_resync.go(256)" logger=default-plugins
2018-05-16T13:16:32.434844038Z  time="2018-05-16 13:16:32.43347" level=debug msg="Received RESYNC key vpp/config/v1/nat/global/" loc="defaultplugins/data_resync.go(256)" logger=default-plugins
2018-05-16T13:16:32.434847267Z  time="2018-05-16 13:16:32.43349" level=debug msg="Received RESYNC key vpp/config/v1/acl/" loc="defaultplugins/data_resync.go(256)" logger=default-plugins
2018-05-16T13:16:32.434849868Z  time="2018-05-16 13:16:32.43354" level=debug msg="Received RESYNC key vpp/config/v1/proxyarp/interface/" loc="defaultplugins/data_resync.go(256)" logger=default-plugins
2018-05-16T13:16:32.434852537Z  time="2018-05-16 13:16:32.43358" level=debug msg="Received RESYNC key vpp/config/v1/l4/features/" loc="defaultplugins/data_resync.go(256)" logger=default-plugins
2018-05-16T13:16:32.434855095Z  time="2018-05-16 13:16:32.43361" level=debug msg="Received RESYNC key vpp/config/v1/vrf/" loc="defaultplugins/data_resync.go(256)" logger=default-plugins
2018-05-16T13:16:32.434857556Z  time="2018-05-16 13:16:32.43363" level=debug msg="Received RESYNC key vpp/config/v1/nat/snat/" loc="defaultplugins/data_resync.go(256)" logger=default-plugins
2018-05-16T13:16:32.434860054Z  time="2018-05-16 13:16:32.43365" level=debug msg="Received RESYNC key vpp/config/v1/ipsec/" loc="defaultplugins/data_resync.go(256)" logger=default-plugins
2018-05-16T13:16:32.434862571Z  time="2018-05-16 13:16:32.43367" level=debug msg="Received RESYNC key vpp/config/v1/arp/" loc="defaultplugins/data_resync.go(256)" logger=default-plugins
2018-05-16T13:16:32.434865044Z  
2018-05-16T13:16:32.435287363Z  2018-05-16 13:16:32,434 DEBG 'agent' stdout output:
2018-05-16T13:16:32.435295768Z  time="2018-05-16 13:16:32.43448" level=debug msg="Received RESYNC key vpp/config/v1/proxyarp/range/" loc="defaultplugins/data_resync.go(256)" logger=default-plugins
2018-05-16T13:16:32.435298828Z  time="2018-05-16 13:16:32.43453" level=debug msg="Received RESYNC key vpp/config/v1/stn/rules/" loc="defaultplugins/data_resync.go(256)" logger=default-plugins
2018-05-16T13:16:32.435301453Z  time="2018-05-16 13:16:32.43455" level=debug msg="Received RESYNC key vpp/config/v1/bfd/auth-key/" loc="defaultplugins/data_resync.go(256)" logger=default-plugins
2018-05-16T13:16:32.435304007Z  time="2018-05-16 13:16:32.43458" level=debug msg="Received RESYNC key vpp/config/v1/bfd/echo-function" loc="defaultplugins/data_resync.go(256)" logger=default-plugins
2018-05-16T13:16:32.435306499Z  time="2018-05-16 13:16:32.43460" level=debug msg="Received RESYNC key vpp/config/v1/bd/" loc="defaultplugins/data_resync.go(256)" logger=default-plugins
2018-05-16T13:16:32.435316453Z  time="2018-05-16 13:16:32.43462" level=debug msg="Received RESYNC key vpp/config/v1/nat/dnat/" loc="defaultplugins/data_resync.go(256)" logger=default-plugins
2018-05-16T13:16:32.435319405Z  time="2018-05-16 13:16:32.43464" level=debug msg="Received RESYNC key vpp/config/v1/interface/" loc="defaultplugins/data_resync.go(256)" logger=default-plugins
2018-05-16T13:16:32.435321914Z  time="2018-05-16 13:16:32.43466" level=debug msg="Received RESYNC key vpp/config/v1/bfd/session/" loc="defaultplugins/data_resync.go(256)" logger=default-plugins
2018-05-16T13:16:32.435324441Z  time="2018-05-16 13:16:32.43468" level=debug msg="Received RESYNC key vpp/config/v1/xconnect/" loc="defaultplugins/data_resync.go(256)" logger=default-plugins
2018-05-16T13:16:32.435326912Z  
2018-05-16T13:16:32.435785463Z  2018-05-16 13:16:32,435 DEBG 'agent' stdout output:
2018-05-16T13:16:32.435793441Z  time="2018-05-16 13:16:32.43514" level=debug msg="Received RESYNC interface values 0" loc="defaultplugins/data_resync.go(267)" logger=default-plugins
2018-05-16T13:16:32.435796498Z  time="2018-05-16 13:16:32.43517" level=debug msg="Received RESYNC BFD Session values 0" loc="defaultplugins/data_resync.go(270)" logger=default-plugins
2018-05-16T13:16:32.435799036Z  time="2018-05-16 13:16:32.43520" level=debug msg="Received RESYNC XConnects values 0" loc="defaultplugins/data_resync.go(283)" logger=default-plugins
2018-05-16T13:16:32.435801524Z  
2018-05-16T13:16:32.436287701Z  2018-05-16 13:16:32,435 DEBG 'agent' stdout output:
2018-05-16T13:16:32.436295448Z  time="2018-05-16 13:16:32.43553" level=debug msg="Received RESYNC DNAT configs 0" loc="defaultplugins/data_resync.go(314)" logger=default-plugins
2018-05-16T13:16:32.436298337Z  time="2018-05-16 13:16:32.43557" level=debug msg="Received RESYNC ACL values 0" loc="defaultplugins/data_resync.go(264)" logger=default-plugins
2018-05-16T13:16:32.436300908Z  time="2018-05-16 13:16:32.43560" level=debug msg="Received RESYNC proxy ARP interface values 0" loc="defaultplugins/data_resync.go(293)" logger=default-plugins
2018-05-16T13:16:32.436303514Z  time="2018-05-16 13:16:32.43563" level=debug msg="Received RESYNC AppNs feature flag" loc="defaultplugins/data_resync.go(299)" logger=default-plugins
2018-05-16T13:16:32.436305968Z  time="2018-05-16 13:16:32.43566" level=debug msg="Received RESYNC AppNamespace values 0" loc="defaultplugins/data_resync.go(302)" logger=default-plugins
2018-05-16T13:16:32.436308496Z  time="2018-05-16 13:16:32.43569" level=debug msg="Received RESYNC NAT global config" loc="defaultplugins/data_resync.go(308)" logger=default-plugins
2018-05-16T13:16:32.436310975Z  
2018-05-16T13:16:32.436790277Z  2018-05-16 13:16:32,436 DEBG 'agent' stdout output:
2018-05-16T13:16:32.436798405Z  time="2018-05-16 13:16:32.43601" level=debug msg="Received RESYNC VRF values 0" loc="defaultplugins/data_resync.go(286)" logger=default-plugins
2018-05-16T13:16:32.436801340Z  time="2018-05-16 13:16:32.43604" level=debug msg="Received RESYNC L3 FIB values 0" loc="defaultplugins/data_resync.go(287)" logger=default-plugins
2018-05-16T13:16:32.436805608Z  time="2018-05-16 13:16:32.43607" level=debug msg="Received RESYNC SNAT configs 0" loc="defaultplugins/data_resync.go(311)" logger=default-plugins
2018-05-16T13:16:32.436813067Z  time="2018-05-16 13:16:32.43609" level=debug msg="Received RESYNC IPSec configs 0" loc="defaultplugins/data_resync.go(317)" logger=default-plugins
2018-05-16T13:16:32.436815846Z  time="2018-05-16 13:16:32.43612" level=debug msg="Received RESYNC STN rules values 0" loc="defaultplugins/data_resync.go(305)" logger=default-plugins
2018-05-16T13:16:32.436818350Z  time="2018-05-16 13:16:32.43615" level=debug msg="Received RESYNC BFD Auth Key values 0" loc="defaultplugins/data_resync.go(273)" logger=default-plugins
2018-05-16T13:16:32.436820897Z  time="2018-05-16 13:16:32.43618" level=debug msg="Received RESYNC BFD Echo values 0" loc="defaultplugins/data_resync.go(276)" logger=default-plugins
2018-05-16T13:16:32.436823369Z  
2018-05-16T13:16:32.437203049Z  2018-05-16 13:16:32,436 DEBG 'agent' stdout output:
2018-05-16T13:16:32.437210721Z  time="2018-05-16 13:16:32.43654" level=debug msg="Received RESYNC BD values 0" loc="defaultplugins/data_resync.go(279)" logger=default-plugins
2018-05-16T13:16:32.437213626Z  time="2018-05-16 13:16:32.43657" level=debug msg="Received RESYNC L2 FIB values 0" loc="defaultplugins/data_resync.go(280)" logger=default-plugins
2018-05-16T13:16:32.437216141Z  time="2018-05-16 13:16:32.43660" level=debug msg="Received RESYNC ARP values 0" loc="defaultplugins/data_resync.go(290)" logger=default-plugins
2018-05-16T13:16:32.437271703Z  time="2018-05-16 13:16:32.43662" level=debug msg="Received RESYNC proxy ARP range values 0" loc="defaultplugins/data_resync.go(296)" logger=default-plugins
2018-05-16T13:16:32.437274652Z  time="2018-05-16 13:16:32.43665" level=info msg="resync the VPP Configuration begin" loc="defaultplugins/data_resync.go(113)" logger=default-plugins
2018-05-16T13:16:32.437293434Z  time="2018-05-16 13:16:32.43669" level=debug msg="RESYNC Interface begin for []" cfg="&amp;{0xc4202f4a20 0xc42024cba8 0xc420301130 0xc420302870 0xc420302890 map[] map[/run/vpp/memif.sock:0] 0 0xc4202eaa80 0xc4202ea840 0xc4202ea7e0 0xc4202eb080}" loc="ifplugin/data_resync.go(45)" logger=default-plugins-if-conf
2018-05-16T13:16:32.437296499Z  
2018-05-16T13:16:32.443891756Z  2018-05-16 13:16:32,443 DEBG 'agent' stdout output:
2018-05-16T13:16:32.443901285Z  time="2018-05-16 13:16:32.44346" level=debug msg="Getting VRF for interface 0" loc="vppcalls/vrf_vppcalls.go(28)" logger=default-plugins-if-conf
2018-05-16T13:16:32.443904438Z  
2018-05-16T13:16:32.447464069Z  2018-05-16 13:16:32,447 DEBG 'agent' stdout output:
2018-05-16T13:16:32.447479576Z  time="2018-05-16 13:16:32.44688" level=debug msg="Memif socket dump completed, found 1 entries" loc="vppdump/dump_vppcalls.go(172)" logger=default-plugins-if-conf
2018-05-16T13:16:32.447483146Z  
2018-05-16T13:16:32.452890021Z  2018-05-16 13:16:32,452 DEBG 'agent' stdout output:
2018-05-16T13:16:32.452899381Z  time="2018-05-16 13:16:32.45192" level=debug msg="publish write to ifplugin_ifstate{{default-plugins local0 false sw_if_indexes} 0xc4204a0560}" loc="mem/inmemory_name_mapping.go(245)" logger=default-plugins-if-conf
2018-05-16T13:16:32.452910573Z  time="2018-05-16 13:16:32.45196" level=debug msg="publish write to default-plugins{{default-plugins local0 false sw_if_indexes} 0xc4204a0560}" loc="mem/inmemory_name_mapping.go(245)" logger=default-plugins-if-conf
2018-05-16T13:16:32.452913721Z  
2018-05-16T13:16:32.454857695Z  2018-05-16 13:16:32,454 DEBG 'agent' stdout output:
2018-05-16T13:16:32.454866094Z  time="2018-05-16 13:16:32.45393" level=debug msg="RESYNC interfaces: registered interface local0 (index 0)" loc="ifplugin/data_resync.go(990)" logger=default-plugins-if-conf
2018-05-16T13:16:32.454869409Z  time="2018-05-16 13:16:32.45398" level=debug msg="RESYNC Interface end." cfg="&amp;{0xc4202f4a20 0xc42024cba8 0xc420301130 0xc420302870 0xc420302890 map[] map[/run/vpp/memif.sock:0] 0 0xc4202eaa80 0xc4202ea840 0xc4202ea7e0 0xc4202eb080}" loc="ifplugin/data_resync.go(171)" logger=default-plugins-if-conf
2018-05-16T13:16:32.454872618Z  time="2018-05-16 13:16:32.45404" level=info msg="vxlan.VxlanTunnelDump call took 1.988913ms" conf=InterfaceConfigurator durationInNs=1988913 loc="measure/stopwatch.go(148)" logger=default-plugins-if-conf wasCalled=1
2018-05-16T13:16:32.454875341Z  time="2018-05-16 13:16:32.45408" level=info msg="interfaces.SwInterfaceTagAddDel call took 1.915471ms" conf=InterfaceConfigurator durationInNs=1915471 loc="measure/stopwatch.go(148)" logger=default-plugins-if-conf wasCalled=1
2018-05-16T13:16:32.454877984Z  time="2018-05-16 13:16:32.45411" level=info msg="interfaces.SwInterfaceDump call took 6.720736ms" conf=InterfaceConfigurator durationInNs=6720736 loc="measure/stopwatch.go(148)" logger=default-plugins-if-conf wasCalled=1
2018-05-16T13:16:32.454880698Z  time="2018-05-16 13:16:32.45414" level=info msg="ip.IPAddressDump call took 972.097µs" conf=InterfaceConfigurator durationInNs=972097 loc="measure/stopwatch.go(148)" logger=default-plugins-if-conf wasCalled=2
2018-05-16T13:16:32.454883725Z  time="2018-05-16 13:16:32.45418" level=info msg="memif.MemifDump call took 962.399µs" conf=InterfaceConfigurator durationInNs=962399 loc="measure/stopwatch.go(148)" logger=default-plugins-if-conf wasCalled=2
2018-05-16T13:16:32.454886638Z  time="2018-05-16 13:16:32.45421" level=info msg="tap.SwInterfaceTapDump call took 2.037141ms" conf=InterfaceConfigurator durationInNs=2037141 loc="measure/stopwatch.go(148)" logger=default-plugins-if-conf wasCalled=1
2018-05-16T13:16:32.454889275Z  time="2018-05-16 13:16:32.45424" level=info msg="partial resync time is 16.531254ms" conf=InterfaceConfigurator durationInNs=16531254 loc="measure/stopwatch.go(164)" logger=default-plugins-if-conf
2018-05-16T13:16:32.454892291Z  time="2018-05-16 13:16:32.45427" level=debug msg="Resync ACLs started" loc="aclplugin/data_resync.go(26)" logger=default-plugins
2018-05-16T13:16:32.454894868Z  time="2018-05-16 13:16:32.45430" level=debug msg="dumping ACLs" loc="vppdump/dump_vppcalls.go(55)" logger=default-plugins-acl-plugin
2018-05-16T13:16:32.454897354Z  
2018-05-16T13:16:32.459818912Z  2018-05-16 13:16:32,459 DEBG 'agent' stdout output:
2018-05-16T13:16:32.459827919Z  time="2018-05-16 13:16:32.45911" level=debug msg="dumped 0 ACLs" loc="vppdump/dump_vppcalls.go(88)" logger=default-plugins-acl-plugin
2018-05-16T13:16:32.460051304Z  time="2018-05-16 13:16:32.45917" level=info msg="acl.ACLInterfaceSetACLList call took 0s" conf=ACLConfigurator durationInNs=0 loc="measure/stopwatch.go(148)" logger=default-plugins-acl-plugin wasCalled=0
2018-05-16T13:16:32.460063831Z  time="2018-05-16 13:16:32.45922" level=info msg="acl.ACLDump call took 1.776275ms" conf=ACLConfigurator durationInNs=1776275 loc="measure/stopwatch.go(148)" logger=default-plugins-acl-plugin wasCalled=2
2018-05-16T13:16:32.460066934Z  time="2018-05-16 13:16:32.45930" level=info msg="acl.ACLInterfaceListDump call took 1.203832ms" conf=ACLConfigurator durationInNs=1203832 loc="measure/stopwatch.go(148)" logger=default-plugins-acl-plugin wasCalled=1
2018-05-16T13:16:32.460069549Z  time="2018-05-16 13:16:32.45933" level=info msg="partial resync time is 4.756383ms" conf=ACLConfigurator durationInNs=4756383 loc="measure/stopwatch.go(164)" logger=default-plugins-acl-plugin
2018-05-16T13:16:32.460807259Z  time="2018-05-16 13:16:32.45940" level=debug msg="RESYNC BFD Keys begin." cfg="&amp;{0xc4202f4e10 0xc420302870 1 0xc420301720 0xc4203164a0 0xc4203164c0 0xc4203164e0 0xc4202eb320}" loc="ifplugin/data_resync.go(274)" logger=default-plugins-bfd-conf
2018-05-16T13:16:32.460814942Z  
2018-05-16T13:16:32.461413801Z  2018-05-16 13:16:32,461 DEBG 'agent' stdout output:
2018-05-16T13:16:32.461421619Z  time="2018-05-16 13:16:32.46089" level=debug msg="RESYNC BFD Keys end. &lt;nil&gt;" cfg="&amp;{0xc4202f4e10 0xc420302870 1 0xc420301720 0xc4203164a0 0xc4203164c0 0xc4203164e0 0xc4202eb320}" loc="ifplugin/data_resync.go(326)" logger=default-plugins-bfd-conf
2018-05-16T13:16:32.461425020Z  time="2018-05-16 13:16:32.46094" level=info msg="bfd.BfdAuthKeysDump call took 1.430977ms" conf=BFDConfigurator durationInNs=1430977 loc="measure/stopwatch.go(148)" logger=default-plugins-bfd-conf wasCalled=1
2018-05-16T13:16:32.461427739Z  time="2018-05-16 13:16:32.46097" level=info msg="partial resync time is 1.430977ms" conf=BFDConfigurator durationInNs=1430977 loc="measure/stopwatch.go(164)" logger=default-plugins-bfd-conf
2018-05-16T13:16:32.461430367Z  time="2018-05-16 13:16:32.46099" level=debug msg="RESYNC BFD Session begin." cfg="&amp;{0xc4202f4e10 0xc420302870 1 0xc420301720 0xc4203164a0 0xc4203164c0 0xc4203164e0 0xc4202eb320}" loc="ifplugin/data_resync.go(214)" logger=default-plugins-bfd-conf
2018-05-16T13:16:32.461433067Z  
2018-05-16T13:16:32.462829170Z  2018-05-16 13:16:32,462 DEBG 'agent' stdout output:
2018-05-16T13:16:32.462838070Z  time="2018-05-16 13:16:32.46179" level=debug msg="RESYNC BFD Session end. &lt;nil&gt;" cfg="&amp;{0xc4202f4e10 0xc420302870 1 0xc420301720 0xc4203164a0 0xc4203164c0 0xc4203164e0 0xc4202eb320}" loc="ifplugin/data_resync.go(267)" logger=default-plugins-bfd-conf
2018-05-16T13:16:32.462841625Z  time="2018-05-16 13:16:32.46185" level=info msg="bfd.BfdUDPSessionDump call took 749.517µs" conf=BFDConfigurator durationInNs=749517 loc="measure/stopwatch.go(148)" logger=default-plugins-bfd-conf wasCalled=1
2018-05-16T13:16:32.462845131Z  time="2018-05-16 13:16:32.46188" level=info msg="partial resync time is 749.517µs" conf=BFDConfigurator durationInNs=749517 loc="measure/stopwatch.go(164)" logger=default-plugins-bfd-conf
2018-05-16T13:16:32.462867974Z  time="2018-05-16 13:16:32.46190" level=debug msg="RESYNC BFD Echo source begin." cfg="&amp;{0xc4202f4e10 0xc420302870 1 0xc420301720 0xc4203164a0 0xc4203164c0 0xc4203164e0 0xc4202eb320}" loc="ifplugin/data_resync.go(333)" logger=default-plugins-bfd-conf
2018-05-16T13:16:32.462893300Z  time="2018-05-16 13:16:32.46193" level=debug msg="RESYNC BDs begin." cfg="&amp;{0xc4202f5e60 0xc42024cb18 0xc4201c0968 0xc420303b00 0xc420302870 1 0 0xc42032c300 0xc42032c060 0xc420326820}" loc="l2plugin/data_resync.go(28)" logger=default-plugins-l2-bd-conf
2018-05-16T13:16:32.462896552Z  
2018-05-16T13:16:32.464854548Z  2018-05-16 13:16:32,464 DEBG 'agent' stdout output:
2018-05-16T13:16:32.464878213Z  time="2018-05-16 13:16:32.46380" level=info msg="l2.BridgeDomainDump call took 1.746928ms" conf=BDConfigurator durationInNs=1746928 loc="measure/stopwatch.go(148)" logger=default-plugins-l2-bd-conf wasCalled=1
2018-05-16T13:16:32.464881565Z  time="2018-05-16 13:16:32.46383" level=info msg="partial resync time is 1.746928ms" conf=BDConfigurator durationInNs=1746928 loc="measure/stopwatch.go(164)" logger=default-plugins-l2-bd-conf
2018-05-16T13:16:32.464884364Z  time="2018-05-16 13:16:32.46387" level=debug msg="RESYNC FIBs begin." cfg="&amp;{0xc42033a000 0xc42024cb18 0xc420302870 0xc420303b00 &lt;nil&gt; 0xc420303cf0 0xc420303f20 0xc420303f40 1 0xc42032c4e0 0xc42032c6c0 0xc420319ad0 0xc420326af0}" loc="l2plugin/data_resync.go(155)" logger=default-plugins-l2-fib-conf
2018-05-16T13:16:32.464888035Z  
2018-05-16T13:16:32.466611663Z  2018-05-16 13:16:32,465 DEBG 'agent' stdout output:
2018-05-16T13:16:32.466620767Z  time="2018-05-16 13:16:32.46563" level=debug msg="RESYNC FIBs end." cfg="&amp;{0xc42033a000 0xc42024cb18 0xc420302870 0xc420303b00 &lt;nil&gt; 0xc420303cf0 0xc420303f20 0xc420303f40 1 0xc42032c4e0 0xc42032c6c0 0xc420319ad0 0xc420326af0}" loc="l2plugin/data_resync.go(241)" logger=default-plugins-l2-fib-conf
2018-05-16T13:16:32.466624580Z  time="2018-05-16 13:16:32.46568" level=info msg="l2.L2FibTableDump call took 1.673166ms" conf=FIBConfigurator durationInNs=1673166 loc="measure/stopwatch.go(148)" logger=default-plugins-l2-fib-conf wasCalled=1
2018-05-16T13:16:32.466627398Z  time="2018-05-16 13:16:32.46572" level=info msg="partial resync time is 1.673166ms" conf=FIBConfigurator durationInNs=1673166 loc="measure/stopwatch.go(164)" logger=default-plugins-l2-fib-conf
2018-05-16T13:16:32.466630209Z  time="2018-05-16 13:16:32.46575" level=debug msg="RESYNC XConnect begin." cfg="&amp;{0xc42033a3f0 0xc420302870 0xc4203540f0 0xc420354110 0xc420354130 1 0xc42032c8a0 0xc4203270e0}" loc="l2plugin/data_resync.go(248)" logger=default-plugins-xc-conf
2018-05-16T13:16:32.466633110Z  
2018-05-16T13:16:32.468635557Z  2018-05-16 13:16:32,467 DEBG 'agent' stdout output:
2018-05-16T13:16:32.468644352Z  time="2018-05-16 13:16:32.46757" level=debug msg="RESYNC XConnect end. &lt;nil&gt;" cfg="&amp;{0xc42033a3f0 0xc420302870 0xc4203540f0 0xc420354110 0xc420354130 1 0xc42032c8a0 0xc4203270e0}" loc="l2plugin/data_resync.go(301)" logger=default-plugins-xc-conf
2018-05-16T13:16:32.468648077Z  time="2018-05-16 13:16:32.46761" level=info msg="l2.L2XconnectDump call took 1.779829ms" conf=BFDConfigurator durationInNs=1779829 loc="measure/stopwatch.go(148)" logger=default-plugins-xc-conf wasCalled=1
2018-05-16T13:16:32.468650921Z  time="2018-05-16 13:16:32.46764" level=info msg="partial resync time is 1.779829ms" conf=BFDConfigurator durationInNs=1779829 loc="measure/stopwatch.go(164)" logger=default-plugins-xc-conf
2018-05-16T13:16:32.468673373Z  time="2018-05-16 13:16:32.46767" level=debug msg="RESYNC routes begin. " cfg="&amp;{0xc42033a750 0xc42024cb18 0xc4203542e0 1 0xc420302870 0xc420354300 0xc42032ca80 0xc420327360}" loc="l3plugin/data_resync.go(26)" logger=default-plugins-l3-route-conf
2018-05-16T13:16:32.468676705Z  
2018-05-16T13:16:32.472552849Z  2018-05-16 13:16:32,472 DEBG 'agent' stdout output:
2018-05-16T13:16:32.472562584Z  time="2018-05-16 13:16:32.47161" level=debug msg="Found 7 routes configured on the VPP" loc="l3plugin/data_resync.go(39)" logger=default-plugins-l3-route-conf
2018-05-16T13:16:32.472565829Z  time="2018-05-16 13:16:32.47165" level=debug msg="RESYNC routes end. &lt;nil&gt;" cfg="&amp;{0xc42033a750 0xc42024cb18 0xc4203542e0 1 0xc420302870 0xc420354300 0xc42032ca80 0xc420327360}" loc="l3plugin/data_resync.go(113)" logger=default-plugins-l3-route-conf
2018-05-16T13:16:32.472569092Z  time="2018-05-16 13:16:32.47169" level=info msg="ip.IPFibDump call took 3.880158ms" conf=RouteConfigurator durationInNs=3880158 loc="measure/stopwatch.go(148)" logger=default-plugins-l3-route-conf wasCalled=1
2018-05-16T13:16:32.472571858Z  time="2018-05-16 13:16:32.47172" level=info msg="partial resync time is 3.880158ms" conf=RouteConfigurator durationInNs=3880158 loc="measure/stopwatch.go(164)" logger=default-plugins-l3-route-conf
2018-05-16T13:16:32.472574544Z  time="2018-05-16 13:16:32.47175" level=debug msg="RESYNC arp begin. " cfg="&amp;{0xc42033a900 0xc42024cb18 0xc420354350 0xc420354370 0xc420354390 1 0xc420302870 0xc42032cc60 0xc420327400}" loc="l3plugin/data_resync.go(119)" logger=default-plugins-l3-arp-conf
2018-05-16T13:16:32.472577454Z  time="2018-05-16 13:16:32.47179" level=debug msg="RESYNC arp end. &lt;nil&gt;" cfg="&amp;{0xc42033a900 0xc42024cb18 0xc420354350 0xc420354370 0xc420354390 1 0xc420302870 0xc42032cc60 0xc420327400}" loc="l3plugin/data_resync.go(134)" logger=default-plugins-l3-arp-conf
2018-05-16T13:16:32.472580449Z  time="2018-05-16 13:16:32.47181" level=info msg="stopwatch has no entries" conf=ArpConfigurator loc="measure/stopwatch.go(161)" logger=default-plugins-l3-arp-conf
2018-05-16T13:16:32.472583051Z  time="2018-05-16 13:16:32.47184" level=info msg="partial resync time is 0s" conf=ArpConfigurator durationInNs=0 loc="measure/stopwatch.go(164)" logger=default-plugins-l3-arp-conf
2018-05-16T13:16:32.472585647Z  time="2018-05-16 13:16:32.47186" level=debug msg="RESYNC proxy ARP interfaces begin. " loc="l3plugin/data_resync.go(140)" logger=default-plugins-l3-proxyarp-conf
2018-05-16T13:16:32.472588793Z  time="2018-05-16 13:16:32.47189" level=debug msg="RESYNC proxy ARP interface end. &lt;nil&gt;" loc="l3plugin/data_resync.go(156)" logger=default-plugins-l3-proxyarp-conf
2018-05-16T13:16:32.472591508Z  time="2018-05-16 13:16:32.47191" level=info msg="stopwatch has no entries" conf=ProxyArpConfigurator loc="measure/stopwatch.go(161)" logger=default-plugins-l3-arp-conf
2018-05-16T13:16:32.472594049Z  time="2018-05-16 13:16:32.47194" level=info msg="partial resync time is 0s" conf=ProxyArpConfigurator durationInNs=0 loc="measure/stopwatch.go(164)" logger=default-plugins-l3-arp-conf
2018-05-16T13:16:32.472596703Z  time="2018-05-16 13:16:32.47197" level=debug msg="RESYNC proxy ARP ranges begin. " loc="l3plugin/data_resync.go(162)" logger=default-plugins-l3-proxyarp-conf
2018-05-16T13:16:32.472617865Z  time="2018-05-16 13:16:32.47199" level=debug msg="RESYNC proxy ARP ranges end. &lt;nil&gt;" loc="l3plugin/data_resync.go(178)" logger=default-plugins-l3-proxyarp-conf
2018-05-16T13:16:32.472620800Z  time="2018-05-16 13:16:32.47201" level=info msg="stopwatch has no entries" conf=ProxyArpConfigurator loc="measure/stopwatch.go(161)" logger=default-plugins-l3-arp-conf
2018-05-16T13:16:32.472623390Z  time="2018-05-16 13:16:32.47204" level=info msg="partial resync time is 0s" conf=ProxyArpConfigurator durationInNs=0 loc="measure/stopwatch.go(164)" logger=default-plugins-l3-arp-conf
2018-05-16T13:16:32.473569745Z  time="2018-05-16 13:16:32.47206" level=debug msg="RESYNC L4Features begin. " cfg="&amp;{0xc42033af30 &lt;nil&gt; 0xc42024cb18 0xc420302870 0xc420354900 0xc420354920 1 0xc420327cc0 0xc42032d020 false}" loc="l4plugin/data_resync.go(48)" logger=default-plugins-l4-plugin
2018-05-16T13:16:32.473578595Z  time="2018-05-16 13:16:32.47210" level=info msg="Setting up L4 features" loc="l4plugin/l4_configurator.go(83)" logger=default-plugins-l4-plugin
2018-05-16T13:16:32.473581534Z  time="2018-05-16 13:16:32.47213" level=info msg="Removing L4 features" loc="l4plugin/l4_configurator.go(113)" logger=default-plugins-l4-plugin
2018-05-16T13:16:32.473584092Z  
2018-05-16T13:16:32.474633048Z  2018-05-16 13:16:32,474 DEBG 'agent' stdout output:
2018-05-16T13:16:32.474641855Z  time="2018-05-16 13:16:32.47412" level=info msg="L4 features disabled" loc="l4plugin/l4_configurator.go(121)" logger=default-plugins-l4-plugin
2018-05-16T13:16:32.474921296Z  
2018-05-16T13:16:32.476565715Z  2018-05-16 13:16:32,475 DEBG 'agent' stdout output:
2018-05-16T13:16:32.476589718Z  time="2018-05-16 13:16:32.47478" level=debug msg="RESYNC L4Features end." cfg="&amp;{0xc42033af30 &lt;nil&gt; 0xc42024cb18 0xc420302870 0xc420354900 0xc420354920 1 0xc420327cc0 0xc42032d020 false}" loc="l4plugin/data_resync.go(64)" logger=default-plugins-l4-plugin
2018-05-16T13:16:32.476593612Z  
2018-05-16T13:16:32.476595899Z  2018-05-16 13:16:32,475 DEBG 'agent' stdout output:
2018-05-16T13:16:32.476598150Z  time="2018-05-16 13:16:32.47514" level=info msg="stopwatch has no entries" conf=L4Configurator loc="measure/stopwatch.go(161)" logger=default-plugins-l4-plugin
2018-05-16T13:16:32.476600692Z  time="2018-05-16 13:16:32.47518" level=info msg="partial resync time is 0s" conf=L4Configurator durationInNs=0 loc="measure/stopwatch.go(164)" logger=default-plugins-l4-plugin
2018-05-16T13:16:32.476603225Z  time="2018-05-16 13:16:32.47521" level=debug msg="RESYNC application namespaces begin. " cfg="&amp;{0xc42033af30 &lt;nil&gt; 0xc42024cb18 0xc420302870 0xc420354900 0xc420354920 1 0xc420327cc0 0xc42032d020 false}" loc="l4plugin/data_resync.go(23)" logger=default-plugins-l4-plugin
2018-05-16T13:16:32.476606117Z  time="2018-05-16 13:16:32.47525" level=debug msg="RESYNC application namespaces end." cfg="&amp;{0xc42033af30 &lt;nil&gt; 0xc42024cb18 0xc420302870 0xc420354900 0xc420354920 1 0xc420327cc0 0xc42032d020 false}" loc="l4plugin/data_resync.go(41)" logger=default-plugins-l4-plugin
2018-05-16T13:16:32.476609052Z  time="2018-05-16 13:16:32.47528" level=info msg="stopwatch has no entries" conf=L4Configurator loc="measure/stopwatch.go(161)" logger=default-plugins-l4-plugin
2018-05-16T13:16:32.476620880Z  time="2018-05-16 13:16:32.47534" level=info msg="partial resync time is 0s" conf=L4Configurator durationInNs=0 loc="measure/stopwatch.go(164)" logger=default-plugins-l4-plugin
2018-05-16T13:16:32.476623731Z  time="2018-05-16 13:16:32.47542" level=debug msg="RESYNC stn rules begin. " cfg="&amp;{0xc4202f50e0 0xc420302870 0xc420316620 1 0xc420316640 1 0xc4202eb500 0xc420301a90}" loc="ifplugin/data_resync.go(355)" logger=default-plugins-stn-conf
2018-05-16T13:16:32.476626508Z  
2018-05-16T13:16:32.477538830Z  2018-05-16 13:16:32,476 DEBG 'agent' stdout output:
2018-05-16T13:16:32.477547772Z  time="2018-05-16 13:16:32.47668" level=debug msg="found 0 configured STN rules" loc="ifplugin/stn_config.go(204)" logger=default-plugins-stn-conf
2018-05-16T13:16:32.477550959Z  time="2018-05-16 13:16:32.47673" level=info msg="stn.StnRulesDump call took 1.20377ms" conf=stnConfigurator durationInNs=1203770 loc="measure/stopwatch.go(148)" logger=default-plugins-stn-conf wasCalled=1
2018-05-16T13:16:32.477553652Z  time="2018-05-16 13:16:32.47676" level=info msg="partial resync time is 1.20377ms" conf=stnConfigurator durationInNs=1203770 loc="measure/stopwatch.go(164)" logger=default-plugins-stn-conf
2018-05-16T13:16:32.477556306Z  time="2018-05-16 13:16:32.47679" level=debug msg="RESYNC nat global config." loc="ifplugin/data_resync.go(435)" logger=default-plugins-nat-conf
2018-05-16T13:16:32.477558804Z  time="2018-05-16 13:16:32.47681" level=debug msg="dumping Nat44Global" loc="vppdump/dump_nat_vppcalls.go(34)" logger=default-plugins-nat-conf
2018-05-16T13:16:32.477561321Z  
2018-05-16T13:16:32.479418779Z  2018-05-16 13:16:32,478 DEBG 'agent' stdout output:
2018-05-16T13:16:32.479428103Z  time="2018-05-16 13:16:32.47845" level=debug msg="NAT44 forwarding dump complete, is enabled: false" loc="vppdump/dump_nat_vppcalls.go(408)" logger=default-plugins-nat-conf
2018-05-16T13:16:32.479431322Z  
2018-05-16T13:16:32.481352331Z  2018-05-16 13:16:32,480 DEBG 'agent' stdout output:
2018-05-16T13:16:32.481360986Z  time="2018-05-16 13:16:32.48051" level=debug msg="NAT44 interface dump complete, found 0 entries" loc="vppdump/dump_nat_vppcalls.go(350)" logger=default-plugins-nat-conf
2018-05-16T13:16:32.481364239Z  
2018-05-16T13:16:32.483341674Z  2018-05-16 13:16:32,482 DEBG 'agent' stdout output:
2018-05-16T13:16:32.483420864Z  time="2018-05-16 13:16:32.48238" level=debug msg="NAT44 interface with output feature dump complete, found 0 entries" loc="vppdump/dump_nat_vppcalls.go(389)" logger=default-plugins-nat-conf
2018-05-16T13:16:32.483428391Z  
2018-05-16T13:16:32.485329778Z  2018-05-16 13:16:32,484 DEBG 'agent' stdout output:
2018-05-16T13:16:32.485339394Z  time="2018-05-16 13:16:32.48432" level=debug msg="NAT44 address pool dump complete, found 0 entries" loc="vppdump/dump_nat_vppcalls.go(153)" logger=default-plugins-nat-conf
2018-05-16T13:16:32.485342612Z  time="2018-05-16 13:16:32.48437" level=debug msg="dumped Nat44Global" loc="vppdump/dump_nat_vppcalls.go(71)" logger=default-plugins-nat-conf
2018-05-16T13:16:32.485351561Z  time="2018-05-16 13:16:32.48440" level=info msg="Modifying NAT global config" loc="ifplugin/nat_config.go(241)" logger=default-plugins-nat-conf
2018-05-16T13:16:32.485354494Z  time="2018-05-16 13:16:32.48443" level=debug msg="Modifying NAT global config done" loc="ifplugin/nat_config.go(277)" logger=default-plugins-nat-conf
2018-05-16T13:16:32.485357101Z  time="2018-05-16 13:16:32.48446" level=debug msg="RESYNC DNAT config." loc="ifplugin/data_resync.go(454)" logger=default-plugins-nat-conf
2018-05-16T13:16:32.485359663Z  time="2018-05-16 13:16:32.48449" level=debug msg="dumping DNat" loc="vppdump/dump_nat_vppcalls.go(87)" logger=default-plugins-nat-conf
2018-05-16T13:16:32.485362215Z  
2018-05-16T13:16:32.487256632Z  2018-05-16 13:16:32,486 DEBG 'agent' stdout output:
2018-05-16T13:16:32.487265223Z  time="2018-05-16 13:16:32.48632" level=debug msg="NAT44 static mapping dump complete, found 0 entries" loc="vppdump/dump_nat_vppcalls.go(206)" logger=default-plugins-nat-conf
2018-05-16T13:16:32.487268271Z  
2018-05-16T13:16:32.489242748Z  2018-05-16 13:16:32,488 DEBG 'agent' stdout output:
2018-05-16T13:16:32.489250682Z  time="2018-05-16 13:16:32.48823" level=debug msg="NAT44 lb-static mapping dump complete, found 0 entries" loc="vppdump/dump_nat_vppcalls.go(257)" logger=default-plugins-nat-conf
2018-05-16T13:16:32.489253903Z  
2018-05-16T13:16:32.491233479Z  2018-05-16 13:16:32,490 DEBG 'agent' stdout output:
2018-05-16T13:16:32.491255987Z  time="2018-05-16 13:16:32.49023" level=debug msg="NAT44 identity mapping dump complete, found 0 entries" loc="vppdump/dump_nat_vppcalls.go(304)" logger=default-plugins-nat-conf
2018-05-16T13:16:32.491259329Z  time="2018-05-16 13:16:32.49027" level=debug msg="dumped 0 NAT44DNat configs" loc="vppdump/dump_nat_vppcalls.go(117)" logger=default-plugins-nat-conf
2018-05-16T13:16:32.491262015Z  time="2018-05-16 13:16:32.49030" level=debug msg="RESYNC IPSec begin." loc="ipsecplugin/data_resync.go(7)" logger=default-plugins-ipsec-plugin
2018-05-16T13:16:32.491264562Z  time="2018-05-16 13:16:32.49033" level=debug msg="RESYNC IPSec end." loc="ipsecplugin/data_resync.go(38)" logger=default-plugins-ipsec-plugin
2018-05-16T13:16:32.491267052Z  time="2018-05-16 13:16:32.49036" level=info msg="stopwatch has no entries" conf=IPSecConfigurator loc="measure/stopwatch.go(161)" logger=default-plugins-ipsec-plugin
2018-05-16T13:16:32.491269621Z  
2018-05-16T13:16:32.494140438Z  2018-05-16 13:16:32,493 DEBG 'agent' stdout output:
2018-05-16T13:16:32.494149197Z  time="2018-05-16 13:16:32.49315" level=info msg="partial resync time is 0s" conf=IPSecConfigurator durationInNs=0 loc="measure/stopwatch.go(164)" logger=default-plugins-ipsec-plugin
2018-05-16T13:16:32.494152477Z  
2018-05-16T13:16:32.494154747Z  2018-05-16 13:16:32,493 DEBG 'agent' stdout output:
2018-05-16T13:16:32.494157023Z  time="2018-05-16 13:16:32.49359" level=info msg="resync the VPP Configuration end in 56.888326ms" durationInNs=56888326 loc="defaultplugins/data_resync.go(117)" logger=default-plugins
2018-05-16T13:16:32.494167067Z  
2018-05-16T13:16:32.494169684Z  2018-05-16 13:16:32,493 DEBG 'agent' stdout output:
2018-05-16T13:16:32.494171935Z  time="2018-05-16 13:16:32.49378" level=debug msg="ACL configurator: resolving new interface local0" loc="aclplugin/acl_config.go(367)" logger=default-plugins-acl-plugin
2018-05-16T13:16:32.494174590Z  
2018-05-16T13:16:32.495142719Z  2018-05-16 13:16:32,494 DEBG 'agent' stdout output:
2018-05-16T13:16:32.495150897Z  time="2018-05-16 13:16:32.49398" level=debug msg="ACL configurator: new interface local0 resolution done" loc="aclplugin/acl_config.go(400)" logger=default-plugins-acl-plugin
2018-05-16T13:16:32.495154138Z  
2018-05-16T13:16:32.495156447Z  2018-05-16 13:16:32,494 DEBG 'agent' stdout output:
2018-05-16T13:16:32.495158728Z  time="2018-05-16 13:16:32.49430" level=debug msg="ARP configurator: resolving new interface local0" loc="l3plugin/arp_config.go(220)" logger=default-plugins-l3-arp-conf
2018-05-16T13:16:32.495161367Z  
2018-05-16T13:16:32.495163493Z  2018-05-16 13:16:32,494 DEBG 'agent' stdout output:
2018-05-16T13:16:32.495165699Z  time="2018-05-16 13:16:32.49448" level=debug msg="Proxy ARP: handling new interface local0" loc="l3plugin/arp_proxy_config.go(370)" logger=default-plugins-l3-proxyarp-conf
2018-05-16T13:16:32.495168294Z  
2018-05-16T13:16:32.495170460Z  2018-05-16 13:16:32,494 DEBG 'agent' stdout output:
2018-05-16T13:16:32.495172748Z  time="2018-05-16 13:16:32.49465" level=info msg="Assigning new interface local0 to bridge domain" loc="l2plugin/bd_config.go(286)" logger=default-plugins-l2-bd-conf
2018-05-16T13:16:32.495175300Z  
2018-05-16T13:16:32.495177486Z  2018-05-16 13:16:32,494 DEBG 'agent' stdout output:
2018-05-16T13:16:32.495179681Z  time="2018-05-16 13:16:32.49482" level=debug msg="Interface local0 does not belong to any bridge domain" loc="l2plugin/bd_config.go(290)" logger=default-plugins-l2-bd-conf
2018-05-16T13:16:32.495182158Z  
2018-05-16T13:16:32.496164636Z  2018-05-16 13:16:32,495 DEBG 'agent' stdout output:
2018-05-16T13:16:32.496172573Z  time="2018-05-16 13:16:32.49500" level=info msg="FIB configurator: resolving registered interface local0" loc="l2plugin/fib_config.go(209)" logger=default-plugins-l2-fib-conf
2018-05-16T13:16:32.496175745Z  
2018-05-16T13:16:32.496177965Z  2018-05-16 13:16:32,495 DEBG 'agent' stdout output:
2018-05-16T13:16:32.496180155Z  time="2018-05-16 13:16:32.49535" level=info msg="FIB: resolution of created interface local0 is done" loc="l2plugin/fib_config.go(267)" logger=default-plugins-l2-fib-conf
2018-05-16T13:16:32.496182692Z  
2018-05-16T13:16:32.496184833Z  2018-05-16 13:16:32,495 DEBG 'agent' stdout output:
2018-05-16T13:16:32.496187051Z  time="2018-05-16 13:16:32.49553" level=debug msg="XConnect configurator: resolving created interface local0" loc="l2plugin/xconnect_config.go(224)" logger=default-plugins-xc-conf
2018-05-16T13:16:32.496195628Z  
2018-05-16T13:16:32.496198128Z  2018-05-16 13:16:32,495 DEBG 'agent' stdout output:
2018-05-16T13:16:32.496200379Z  time="2018-05-16 13:16:32.49570" level=debug msg="STN plugin: resolving created interface: local0" loc="ifplugin/stn_config.go(113)" logger=default-plugins-stn-conf
2018-05-16T13:16:32.496202886Z  
2018-05-16T13:16:32.496205023Z  2018-05-16 13:16:32,495 DEBG 'agent' stdout output:
2018-05-16T13:16:32.496207582Z  time="2018-05-16 13:16:32.49587" level=debug msg="Rule exists: false returned rule: 0xc4204e33d0" loc="ifplugin/stn_config.go(300)" logger=default-plugins-stn-conf
2018-05-16T13:16:32.496210250Z  
2018-05-16T13:16:32.501023769Z  2018-05-16 13:16:32,500 DEBG 'agent' stdout output:
2018-05-16T13:16:32.501038144Z  time="2018-05-16 13:16:32.49988" level=debug msg="NAT configurator: resolving registered interface local0" loc="ifplugin/nat_config.go(421)" logger=default-plugins-nat-conf
2018-05-16T13:16:32.501041469Z  
2018-05-16T13:16:32.501043662Z  2018-05-16 13:16:32,500 DEBG 'agent' stdout output:
2018-05-16T13:16:32.501046000Z  time="2018-05-16 13:16:32.49910" level=info msg="Resync of Config VPP default plug:IF/L2/L3 took 113.133598ms" durationInNs=113133598 loc="resync/plugin_impl_resync.go(114)" logger=resync-orch
2018-05-16T13:16:32.501048808Z  
2018-05-16T13:16:32.504913209Z  2018-05-16 13:16:32,504 DEBG 'agent' stdout output:
2018-05-16T13:16:32.504926478Z  time="2018-05-16 13:16:32.50321" level=debug msg="trying to delete obsolete status for key vpp/status/v1/interface/ begin " loc="defaultplugins/watch_events.go(100)" logger=default-plugins
2018-05-16T13:16:32.504929741Z  time="2018-05-16 13:16:32.50325" level=debug msg="trying to delete obsolete status for key vpp/status/v1/bd/ begin " loc="defaultplugins/watch_events.go(100)" logger=default-plugins
2018-05-16T13:16:32.504932402Z  time="2018-05-16 13:16:32.50328" level=info msg="Resync of Status VPP default plug:IF/L2/L3 took 2.61163ms" durationInNs=2611630 loc="resync/plugin_impl_resync.go(114)" logger=resync-orch
2018-05-16T13:16:32.504935061Z  
2018-05-16T13:16:32.508892820Z  2018-05-16 13:16:32,508 DEBG 'agent' stdout output:
2018-05-16T13:16:32.508906444Z  time="2018-05-16 13:16:32.50712" level=debug msg="Received RESYNC key linux/config/v1/interface/" loc="linuxplugin/data_resync.go(81)" logger=linuxplugin
2018-05-16T13:16:32.508909796Z  time="2018-05-16 13:16:32.50717" level=debug msg="Received RESYNC key linux/config/v1/arp/" loc="linuxplugin/data_resync.go(81)" logger=linuxplugin
2018-05-16T13:16:32.508912523Z  time="2018-05-16 13:16:32.50721" level=debug msg="Received RESYNC key linux/config/v1/route/" loc="linuxplugin/data_resync.go(81)" logger=linuxplugin
2018-05-16T13:16:32.508915165Z  time="2018-05-16 13:16:32.50725" level=debug msg="Received RESYNC interface values 0" loc="linuxplugin/data_resync.go(86)" logger=linuxplugin
2018-05-16T13:16:32.508917658Z  time="2018-05-16 13:16:32.50730" level=debug msg="Received RESYNC ARP entry values 0" loc="linuxplugin/data_resync.go(89)" logger=linuxplugin
2018-05-16T13:16:32.508926435Z  time="2018-05-16 13:16:32.50733" level=debug msg="Received RESYNC route values 0" loc="linuxplugin/data_resync.go(92)" logger=linuxplugin
2018-05-16T13:16:32.508929219Z  time="2018-05-16 13:16:32.50735" level=info msg="resync the Linux Configuration" loc="linuxplugin/data_resync.go(51)" logger=linuxplugin
2018-05-16T13:16:32.508931663Z  time="2018-05-16 13:16:32.50738" level=debug msg="RESYNC Linux interface begin." loc="ifplugin/data_resync.go(51)" logger=linuxplugin-if-conf
2018-05-16T13:16:32.508934181Z  time="2018-05-16 13:16:32.50753" level=debug msg="publish write to linuxplugin{{linuxplugin lo false linux_if_indexes} 0xc4204ed5c0}" loc="mem/inmemory_name_mapping.go(245)" logger=defaultLogger
2018-05-16T13:16:32.508936776Z  time="2018-05-16 13:16:32.50757" level=debug msg="publish write to default-plugins{{linuxplugin lo false linux_if_indexes} 0xc4204ed5c0}" loc="mem/inmemory_name_mapping.go(245)" logger=defaultLogger
2018-05-16T13:16:32.508939353Z  time="2018-05-16 13:16:32.50760" level=debug msg="RESYNC Interface end. []" cfg="&amp;{0xc4200c3d40 {0 0} 0xc4202b9870 2 map[] map[] 0xc4202ba680 0x54ae60 {{} [0 0 0 0 1 0 0 0 0 0 0 0] 0} 0xc420289f80 0xc420289f20 &lt;nil&gt; 0xc4202b6580 0xc4202d1450}" loc="ifplugin/data_resync.go(161)" logger=linuxplugin-if-conf
2018-05-16T13:16:32.508943227Z  time="2018-05-16 13:16:32.50765" level=debug msg="RESYNC ARPs begin." cfg="&amp;{0xc4202f4000 0xc4202b6580 0xc4202b9870 1 0xc4202b9b10 map[] 0xc4202d1900}" loc="l3plugin/data_resync.go(31)" logger=linuxplugin-arp-conf
2018-05-16T13:16:32.508946052Z  time="2018-05-16 13:16:32.50768" level=info msg="Browsing Linux ARP entries" loc="l3plugin/arp_config.go(311)" logger=linuxplugin-arp-conf
2018-05-16T13:16:32.508948521Z  time="2018-05-16 13:16:32.50770" level=debug msg="Reading ARP entries" loc="linuxcalls/arp_linuxcalls.go(68)" logger=linuxplugin-arp-conf
2018-05-16T13:16:32.508950981Z  
2018-05-16T13:16:32.508953188Z  2018-05-16 13:16:32,508 DEBG 'agent' stdout output:
2018-05-16T13:16:32.508956284Z  time="2018-05-16 13:16:32.50833" level=debug msg="Found new static linux ARP entry" interface=289 loc="l3plugin/arp_config.go(320)" logger=linuxplugin-arp-conf
2018-05-16T13:16:32.508958800Z  
2018-05-16T13:16:32.508960981Z  2018-05-16 13:16:32,508 DEBG 'agent' stdout output:
2018-05-16T13:16:32.508963269Z  time="2018-05-16 13:16:32.50853" level=debug msg="ARP entry registered as iface289-172.17.0.1-02:42:05:9a:f1:2b" loc="l3plugin/arp_config.go(336)" logger=linuxplugin-arp-conf
2018-05-16T13:16:32.508965831Z  
2018-05-16T13:16:32.508967953Z  2018-05-16 13:16:32,508 DEBG 'agent' stdout output:
2018-05-16T13:16:32.509848076Z  time="2018-05-16 13:16:32.50869" level=debug msg="Found new static linux ARP entry" interface=289 loc="l3plugin/arp_config.go(320)" logger=linuxplugin-arp-conf
2018-05-16T13:16:32.509856873Z  
2018-05-16T13:16:32.509859558Z  2018-05-16 13:16:32,509 DEBG 'agent' stdout output:
2018-05-16T13:16:32.509861906Z  time="2018-05-16 13:16:32.50908" level=debug msg="ARP entry registered as iface289-ff02::2-33:33:00:00:00:02" loc="l3plugin/arp_config.go(336)" logger=linuxplugin-arp-conf
2018-05-16T13:16:32.509868760Z  
2018-05-16T13:16:32.509871250Z  2018-05-16 13:16:32,509 DEBG 'agent' stdout output:
2018-05-16T13:16:32.509873495Z  time="2018-05-16 13:16:32.50926" level=debug msg="Found new static linux ARP entry" interface=289 loc="l3plugin/arp_config.go(320)" logger=linuxplugin-arp-conf
2018-05-16T13:16:32.509875964Z  
2018-05-16T13:16:32.510853007Z  2018-05-16 13:16:32,509 DEBG 'agent' stdout output:
2018-05-16T13:16:32.510861157Z  time="2018-05-16 13:16:32.50943" level=debug msg="ARP entry registered as iface289-ff02::1:ff11:5-33:33:ff:11:00:05" loc="l3plugin/arp_config.go(336)" logger=linuxplugin-arp-conf
2018-05-16T13:16:32.510864394Z  time="2018-05-16 13:16:32.50946" level=debug msg="Found new static linux ARP entry" interface=289 loc="l3plugin/arp_config.go(320)" logger=linuxplugin-arp-conf
2018-05-16T13:16:32.510867056Z  time="2018-05-16 13:16:32.50949" level=debug msg="ARP entry registered as iface289-ff02::16-33:33:00:00:00:16" loc="l3plugin/arp_config.go(336)" logger=linuxplugin-arp-conf
2018-05-16T13:16:32.510869698Z  time="2018-05-16 13:16:32.50951" level=debug msg="RESYNC ARPs end. " cfg="&amp;{0xc4202f4000 0xc4202b6580 0xc4202b9870 5 0xc4202b9b10 map[] 0xc4202d1900}" loc="l3plugin/data_resync.go(55)" logger=linuxplugin-arp-conf
2018-05-16T13:16:32.510872499Z  time="2018-05-16 13:16:32.50955" level=debug msg="RESYNC static routes begin." cfg="&amp;{0xc4202f4240 0xc4202b6580 0xc4202b9870 1 0xc4202b9c10 0xc4202b9c30 0xc4202b9c50 map[] 0xc4202d1b30}" loc="l3plugin/data_resync.go(63)" logger=linuxplugin-route-conf
2018-05-16T13:16:32.510875242Z  time="2018-05-16 13:16:32.50959" level=info msg="Resync of linuxplugin took 6.278848ms" durationInNs=6278848 loc="resync/plugin_impl_resync.go(114)" logger=resync-orch
2018-05-16T13:16:32.510877858Z  time="2018-05-16 13:16:32.50961" level=info msg="Resync took 123.784427ms" durationInNs=123784427 loc="resync/plugin_impl_resync.go(120)" logger=resync-orch
2018-05-16T13:16:32.510880519Z  time="2018-05-16 13:16:32.50963" level=info msg="plugin ResyncOrch: AfterInit took 123.836445ms" durationInNs=123836445 loc="core/agent_core.go(345)" logger=agentcore
2018-05-16T13:16:32.510883078Z  time="2018-05-16 13:16:32.50966" level=info msg="Listening on http://0.0.0.0:9191" loc="rest/plugin_impl_rest.go(100)" logger=http
2018-05-16T13:16:32.510885558Z  
2018-05-16T13:16:32.510887715Z  2018-05-16 13:16:32,510 DEBG 'agent' stdout output:
2018-05-16T13:16:32.510890038Z  time="2018-05-16 13:16:32.51014" level=debug msg="Linux ARP configurator: resolve created interface lo" loc="l3plugin/arp_config.go(345)" logger=linuxplugin-arp-conf
2018-05-16T13:16:32.510892613Z  
2018-05-16T13:16:32.510894710Z  2018-05-16 13:16:32,510 DEBG 'agent' stdout output:
2018-05-16T13:16:32.510897386Z  time="2018-05-16 13:16:32.51032" level=info msg="Linux static route configurator: resolve new interface lo (idx 1)" loc="l3plugin/route_config.go(371)" logger=linuxplugin-route-conf
2018-05-16T13:16:32.510900032Z  
2018-05-16T13:16:32.510902166Z  2018-05-16 13:16:32,510 DEBG 'agent' stdout output:
2018-05-16T13:16:32.510906102Z  time="2018-05-16 13:16:32.51049" level=debug msg="Processing automatic interfaces for lo" loc="l3plugin/route_config.go(605)" logger=linuxplugin-route-conf
2018-05-16T13:16:32.510913168Z  
2018-05-16T13:16:32.511795566Z  2018-05-16 13:16:32,510 DEBG 'agent' stdout output:
2018-05-16T13:16:32.511803327Z  time="2018-05-16 13:16:32.51073" level=info msg="New Linux interface was created" hostIfName=lo ifIdx=1 ifName=lo loc="ifplugin/interface_config.go(848)" logger=default-plugins-if-conf
2018-05-16T13:16:32.511806351Z  
2018-05-16T13:16:32.611931150Z  2018-05-16 13:16:32,610 DEBG 'agent' stdout output:
2018-05-16T13:16:32.611943811Z  time="2018-05-16 13:16:32.60993" level=info msg="plugin HTTP: AfterInit took 100.248296ms" durationInNs=100248296 loc="core/agent_core.go(345)" logger=agentcore
2018-05-16T13:16:32.611947543Z  time="2018-05-16 13:16:32.60997" level=info msg="plugin HTTPProbe: AfterInit took 234ns" durationInNs=234 loc="core/agent_core.go(345)" logger=agentcore
2018-05-16T13:16:32.611950097Z  time="2018-05-16 13:16:32.61000" level=debug msg="Register handler /health" loc="rest/plugin_impl_rest.go(80)" logger=http
2018-05-16T13:16:32.611952691Z  time="2018-05-16 13:16:32.61004" level=info msg="Serving /health on port 9191" loc="prometheus/plugin_impl_prometheus.go(84)" logger=prometheus
2018-05-16T13:16:32.611955179Z  time="2018-05-16 13:16:32.61007" level=debug msg="Register handler /metrics" loc="rest/plugin_impl_rest.go(80)" logger=http
2018-05-16T13:16:32.611957690Z  time="2018-05-16 13:16:32.61009" level=info msg="Serving /metrics on port 9191" loc="prometheus/plugin_impl_prometheus.go(84)" logger=prometheus
2018-05-16T13:16:32.611960153Z  time="2018-05-16 13:16:32.61011" level=info msg="plugin Prometheus: AfterInit took 125.29µs" durationInNs=125290 loc="core/agent_core.go(345)" logger=agentcore
2018-05-16T13:16:32.611964089Z  time="2018-05-16 13:16:32.61014" level=info msg="Starting health http-probe on port 9191" loc="probe/plugin_impl_probes.go(44)" logger=health-rpc
2018-05-16T13:16:32.611966510Z  time="2018-05-16 13:16:32.61016" level=debug msg="Register handler /liveness" loc="rest/plugin_impl_rest.go(80)" logger=http
2018-05-16T13:16:32.611968932Z  time="2018-05-16 13:16:32.61019" level=debug msg="Register handler /readiness" loc="rest/plugin_impl_rest.go(80)" logger=http
2018-05-16T13:16:32.611971279Z  time="2018-05-16 13:16:32.61023" level=info msg="plugin HealthRPC: AfterInit took 94.308µs" durationInNs=94308 loc="core/agent_core.go(345)" logger=agentcore
2018-05-16T13:16:32.611973742Z  time="2018-05-16 13:16:32.61029" level=info msg="k=etcdv3, v=last_change:1526476588 last_update:1526476588 , state=INIT" loc="probe/plugin_impl_prometheus.go(114)" logger=health-prometheus-rpc
2018-05-16T13:16:32.611976246Z  time="2018-05-16 13:16:32.61032" level=info msg="DependencyHealth for plugin etcdv3: 0" loc="probe/plugin_impl_prometheus.go(152)" logger=health-prometheus-rpc
2018-05-16T13:16:32.611979486Z  time="2018-05-16 13:16:32.61036" level=info msg="GaugeFunc('service_dependency_health') registered." loc="prometheus/plugin_impl_prometheus.go(189)" logger=prometheus
2018-05-16T13:16:32.611982100Z  time="2018-05-16 13:16:32.61039" level=info msg="k=govpp, v=state:OK last_change:1526476588 last_update:1526476588 , state=OK" loc="probe/plugin_impl_prometheus.go(114)" logger=health-prometheus-rpc
2018-05-16T13:16:32.611988669Z  time="2018-05-16 13:16:32.61041" level=info msg="DependencyHealth for plugin govpp: 1" loc="probe/plugin_impl_prometheus.go(152)" logger=health-prometheus-rpc
2018-05-16T13:16:32.611991374Z  time="2018-05-16 13:16:32.61044" level=info msg="GaugeFunc('service_dependency_health') registered." loc="prometheus/plugin_impl_prometheus.go(189)" logger=prometheus
2018-05-16T13:16:32.611993778Z  time="2018-05-16 13:16:32.61046" level=info msg="k=kafka, v=last_change:1526476592 last_update:1526476592 , state=INIT" loc="probe/plugin_impl_prometheus.go(114)" logger=health-prometheus-rpc
2018-05-16T13:16:32.611996239Z  time="2018-05-16 13:16:32.61048" level=info msg="DependencyHealth for plugin kafka: 0" loc="probe/plugin_impl_prometheus.go(152)" logger=health-prometheus-rpc
2018-05-16T13:16:32.611998659Z  time="2018-05-16 13:16:32.61051" level=info msg="GaugeFunc('service_dependency_health') registered." loc="prometheus/plugin_impl_prometheus.go(189)" logger=prometheus
2018-05-16T13:16:32.612001050Z  time="2018-05-16 13:16:32.61053" level=info msg="plugin PrometheusRPC: AfterInit took 277.489µs" durationInNs=277489 loc="core/agent_core.go(345)" logger=agentcore
2018-05-16T13:16:32.612003532Z  time="2018-05-16 13:16:32.61055" level=info msg="exposing GRPC services over HTTP port 9191 /service " loc="grpc/plugin_impl_grpc.go(95)" logger=grpc
2018-05-16T13:16:32.612005969Z  time="2018-05-16 13:16:32.61057" level=debug msg="Register handler service" loc="rest/plugin_impl_rest.go(80)" logger=http
2018-05-16T13:16:32.612008356Z  time="2018-05-16 13:16:32.61059" level=info msg="plugin GRPC: AfterInit took 42.289µs" durationInNs=42289 loc="core/agent_core.go(345)" logger=agentcore
2018-05-16T13:16:32.612010775Z  time="2018-05-16 13:16:32.61061" level=info msg="plugin IfStatePub: AfterInit took 2.802µs" durationInNs=2802 loc="core/agent_core.go(345)" logger=agentcore
2018-05-16T13:16:32.612013211Z  time="2018-05-16 13:16:32.61063" level=info msg="plugin GoVPP: not implement AfterInit" loc="core/agent_core.go(348)" logger=agentcore
2018-05-16T13:16:32.612015930Z  time="2018-05-16 13:16:32.61064" level=info msg="plugin Linux: not implement AfterInit" loc="core/agent_core.go(348)" logger=agentcore
2018-05-16T13:16:32.612018393Z  time="2018-05-16 13:16:32.61066" level=debug msg="vpp plugins AfterInit begin" loc="defaultplugins/plugin_impl_vpp.go(765)" logger=default-plugins
2018-05-16T13:16:32.612020824Z  
2018-05-16T13:16:32.612900354Z  2018-05-16 13:16:32,612 DEBG 'agent' stdout output:
2018-05-16T13:16:32.612908395Z  time="2018-05-16 13:16:32.61208" level=debug msg="wantInterfaceEventsReply: &amp;{0} &lt;nil&gt;" loc="ifplugin/interface_state.go(154)" logger=default-plugins-if-state
2018-05-16T13:16:32.612911694Z  
2018-05-16T13:16:32.614856337Z  2018-05-16 13:16:32,614 DEBG 'agent' stdout output:
2018-05-16T13:16:32.614868637Z  time="2018-05-16 13:16:32.61308" level=debug msg="wantStatsReply: &amp;{0} &lt;nil&gt;" loc="ifplugin/interface_state.go(168)" logger=default-plugins-if-state
2018-05-16T13:16:32.614878384Z  time="2018-05-16 13:16:32.61311" level=info msg="Plugin default-plugins: status check probe registered" loc="statuscheck/plugin_impl_statuscheck.go(144)" logger=status-check
2018-05-16T13:16:32.614881314Z  time="2018-05-16 13:16:32.61314" level=debug msg="vpp plugins AfterInit finished successfully" loc="defaultplugins/plugin_impl_vpp.go(781)" logger=default-plugins
2018-05-16T13:16:32.614883923Z  time="2018-05-16 13:16:32.61316" level=info msg="plugin VPP: AfterInit took 2.493658ms" durationInNs=2493658 loc="core/agent_core.go(345)" logger=agentcore
2018-05-16T13:16:32.614886411Z  time="2018-05-16 13:16:32.61318" level=info msg="plugin GRPCSvcPlugin: AfterInit took 614ns" durationInNs=614 loc="core/agent_core.go(345)" logger=agentcore
2018-05-16T13:16:32.614888900Z  time="2018-05-16 13:16:32.61320" level=debug msg="VPP REST API Plugin is up and running !!" loc="restplugin/plugin_impl_rest.go(48)" logger=restapiplugin
2018-05-16T13:16:32.614891457Z  time="2018-05-16 13:16:32.61324" level=debug msg="Register handler /interfaces" loc="rest/plugin_impl_rest.go(80)" logger=http
2018-05-16T13:16:32.614893900Z  time="2018-05-16 13:16:32.61334" level=debug msg="Register handler /bridgedomains" loc="rest/plugin_impl_rest.go(80)" logger=http
2018-05-16T13:16:32.614896245Z  time="2018-05-16 13:16:32.61339" level=debug msg="Register handler /bridgedomainids" loc="rest/plugin_impl_rest.go(80)" logger=http
2018-05-16T13:16:32.614898622Z  time="2018-05-16 13:16:32.61342" level=debug msg="Register handler /fibs" loc="rest/plugin_impl_rest.go(80)" logger=http
2018-05-16T13:16:32.614900971Z  time="2018-05-16 13:16:32.61345" level=debug msg="Register handler /xconnectpairs" loc="rest/plugin_impl_rest.go(80)" logger=http
2018-05-16T13:16:32.614903325Z  time="2018-05-16 13:16:32.61347" level=debug msg="Register handler /staticroutes" loc="rest/plugin_impl_rest.go(80)" logger=http
2018-05-16T13:16:32.614905618Z  time="2018-05-16 13:16:32.61350" level=debug msg="Register handler /acl/interface/{swindex:[0-9]+}" loc="rest/plugin_impl_rest.go(80)" logger=http
2018-05-16T13:16:32.614908697Z  time="2018-05-16 13:16:32.61355" level=debug msg="Register handler /acl/ip" loc="rest/plugin_impl_rest.go(80)" logger=http
2018-05-16T13:16:32.614911136Z  time="2018-05-16 13:16:32.61358" level=debug msg="Register handler /acl/ip" loc="rest/plugin_impl_rest.go(80)" logger=http
2018-05-16T13:16:32.614913435Z  time="2018-05-16 13:16:32.61361" level=debug msg="Register handler /acl/ip/example" loc="rest/plugin_impl_rest.go(80)" logger=http
2018-05-16T13:16:32.614915772Z  time="2018-05-16 13:16:32.61364" level=debug msg="Register handler /" loc="rest/plugin_impl_rest.go(80)" logger=http
2018-05-16T13:16:32.614918105Z  time="2018-05-16 13:16:32.61366" level=info msg="plugin RESTAPIPlugin: AfterInit took 462.333µs" durationInNs=462333 loc="core/agent_core.go(345)" logger=agentcore
2018-05-16T13:16:32.614920974Z  time="2018-05-16 13:16:32.61369" level=info msg="All plugins initialized successfully, took 3.879516196s" durationInNs=3879516196 loc="core/agent_core.go(365)" logger=agentcore
2018-05-16T13:16:32.614924135Z  time="2018-05-16 13:16:32.61371" level=info msg="Agent Init took 128.20627ms" durationInNs=128206270 loc="core/agent_core.go(366)" logger=agentcore
2018-05-16T13:16:32.614928423Z  
2018-05-16T13:16:32.614930724Z  2018-05-16 13:16:32,614 DEBG 'agent' stdout output:
2018-05-16T13:16:32.614932973Z  time="2018-05-16 13:16:32.61373" level=info msg="Agent AfterInit took 3.751309926s" durationInNs=3751309926 loc="core/agent_core.go(367)" logger=agentcore
2018-05-16T13:16:32.614935418Z  
2018-05-16T13:16:33.876696358Z  2018-05-16 13:16:33,874 DEBG 'agent' stdout output:
2018-05-16T13:16:33.876714712Z  time="2018-05-16 13:16:33.86576" level=info msg="Agent plugin state update." lastErr="&lt;nil&gt;" loc="statuscheck/plugin_impl_statuscheck.go(189)" logger=status-check plugin=etcdv3 state=ok
2018-05-16T13:16:33.876718773Z  
2018-05-16T13:16:34.223893534Z  2018-05-16 13:16:34,223 DEBG 'agent' stdout output:
2018-05-16T13:16:34.223917514Z  time="2018-05-16 13:16:34.22319" level=info msg="Agent plugin state update." lastErr="&lt;nil&gt;" loc="statuscheck/plugin_impl_statuscheck.go(189)" logger=status-check plugin=kafka state=ok
2018-05-16T13:16:34.223925619Z  
2018-05-16T13:16:39.847439207Z  2018-05-16 13:16:39,846 DEBG 'agent' stdout output:
2018-05-16T13:16:39.847453386Z  time="2018-05-16 13:16:39.84584" level=error msg="dial tcp: lookup dbef312b260f on 173.38.200.100:53: no such host" loc="defaultplugins/publish.go(79)" logger=default-plugins
2018-05-16T13:16:39.847456932Z  time="2018-05-16 13:16:39.84588" level=info msg="Agent plugin state update." lastErr="&lt;nil&gt;" loc="statuscheck/plugin_impl_statuscheck.go(189)" logger=status-check plugin=default-plugins state=ok
2018-05-16T13:16:39.847459960Z  time="2018-05-16 13:16:39.84593" level=debug msg="Interface without internal name skipped for global status. Data: status:\"UNKNOWN_STATUS\" " loc="statuscheck/plugin_impl_statuscheck.go(226)" logger=status-check
2018-05-16T13:16:39.847476883Z  
2018-05-16T13:16:40.388125413Z  2018-05-16 13:16:40,387 DEBG 'agent' stdout output:
2018-05-16T13:16:40.388152056Z  time="2018-05-16 13:16:40.38605" level=debug msg="Interface without internal name skipped for global status. Data: status:\"UNKNOWN_STATUS\" " loc="statuscheck/plugin_impl_statuscheck.go(226)" logger=status-check
2018-05-16T13:16:40.388155887Z  
2018-05-16T13:16:40.934415420Z  2018-05-16 13:16:40,933 DEBG 'agent' stdout output:
2018-05-16T13:16:40.934429526Z  time="2018-05-16 13:16:40.93183" level=debug msg="Interface without internal name skipped for global status. Data: status:\"UNKNOWN_STATUS\" " loc="statuscheck/plugin_impl_statuscheck.go(226)" logger=status-check
2018-05-16T13:16:40.934433215Z  
2018-05-16T13:16:41.453681741Z  2018-05-16 13:16:41,453 DEBG 'agent' stdout output:
2018-05-16T13:16:41.453696054Z  time="2018-05-16 13:16:41.45204" level=debug msg="Interface without internal name skipped for global status. Data: status:\"UNKNOWN_STATUS\" " loc="statuscheck/plugin_impl_statuscheck.go(226)" logger=status-check
2018-05-16T13:16:41.453700098Z  
2018-05-16T13:16:41.971653686Z  2018-05-16 13:16:41,971 DEBG 'agent' stdout output:
2018-05-16T13:16:41.971674896Z  time="2018-05-16 13:16:41.96818" level=debug msg="Interface without internal name skipped for global status. Data: status:\"UNKNOWN_STATUS\" " loc="statuscheck/plugin_impl_statuscheck.go(226)" logger=status-check
2018-05-16T13:16:41.971679046Z  
2018-05-16T13:16:42.498917196Z  2018-05-16 13:16:42,498 DEBG 'agent' stdout output:
2018-05-16T13:16:42.498932985Z  time="2018-05-16 13:16:42.49755" level=debug msg="Interface without internal name skipped for global status. Data: status:\"UNKNOWN_STATUS\" " loc="statuscheck/plugin_impl_statuscheck.go(226)" logger=status-check
2018-05-16T13:16:42.498936792Z  
2018-05-16T13:16:43.024357096Z  2018-05-16 13:16:43,024 DEBG 'agent' stdout output:
2018-05-16T13:16:43.024370928Z  time="2018-05-16 13:16:43.02387" level=debug msg="Interface without internal name skipped for global status. Data: status:\"UNKNOWN_STATUS\" " loc="statuscheck/plugin_impl_statuscheck.go(226)" logger=status-check
2018-05-16T13:16:43.024374589Z  
2018-05-16T13:16:49.333012713Z  2018-05-16 13:16:49,332 DEBG 'agent' stdout output:
2018-05-16T13:16:49.333028500Z  time="2018-05-16 13:16:49.33167" level=debug msg="Interface without internal name skipped for global status. Data: status:\"UNKNOWN_STATUS\" " loc="statuscheck/plugin_impl_statuscheck.go(226)" logger=status-check
2018-05-16T13:16:49.333032789Z  
2018-05-16T13:16:49.899266731Z  2018-05-16 13:16:49,898 DEBG 'agent' stdout output:
2018-05-16T13:16:49.899281143Z  time="2018-05-16 13:16:49.89794" level=debug msg="Interface without internal name skipped for global status. Data: status:\"UNKNOWN_STATUS\" " loc="statuscheck/plugin_impl_statuscheck.go(226)" logger=status-check
2018-05-16T13:16:49.899284764Z  
2018-05-16T13:16:50.486227293Z  2018-05-16 13:16:50,485 DEBG 'agent' stdout output:
2018-05-16T13:16:50.486241852Z  time="2018-05-16 13:16:50.48531" level=debug msg="Interface without internal name skipped for global status. Data: status:\"UNKNOWN_STATUS\" " loc="statuscheck/plugin_impl_statuscheck.go(226)" logger=status-check
2018-05-16T13:16:50.486245529Z  
2018-05-16T13:16:51.086542108Z  2018-05-16 13:16:51,078 DEBG 'agent' stdout output:
2018-05-16T13:16:51.086558614Z  time="2018-05-16 13:16:51.07820" level=debug msg="Interface without internal name skipped for global status. Data: status:\"UNKNOWN_STATUS\" " loc="statuscheck/plugin_impl_statuscheck.go(226)" logger=status-check
2018-05-16T13:16:51.086562374Z  
2018-05-16T13:16:51.694419008Z  2018-05-16 13:16:51,694 DEBG 'agent' stdout output:
2018-05-16T13:16:51.694431938Z  time="2018-05-16 13:16:51.69320" level=debug msg="Interface without internal name skipped for global status. Data: status:\"UNKNOWN_STATUS\" " loc="statuscheck/plugin_impl_statuscheck.go(226)" logger=status-check
2018-05-16T13:16:51.694435678Z  
2018-05-16T13:16:52.251346902Z  2018-05-16 13:16:52,250 DEBG 'agent' stdout output:
2018-05-16T13:16:52.251361018Z  time="2018-05-16 13:16:52.24901" level=debug msg="Interface without internal name skipped for global status. Data: status:\"UNKNOWN_STATUS\" " loc="statuscheck/plugin_impl_statuscheck.go(226)" logger=status-check
2018-05-16T13:16:52.251374255Z  
2018-05-16T13:16:52.833244007Z  2018-05-16 13:16:52,832 DEBG 'agent' stdout output:
2018-05-16T13:16:52.833259353Z  time="2018-05-16 13:16:52.83246" level=debug msg="Interface without internal name skipped for global status. Data: status:\"UNKNOWN_STATUS\" " loc="statuscheck/plugin_impl_statuscheck.go(226)" logger=status-check
2018-05-16T13:16:52.833263376Z  
2018-05-16T13:16:52.876325186Z  2018-05-16 13:16:52,875 DEBG 'agent' stdout output:
2018-05-16T13:16:52.876336726Z  time="2018-05-16 13:16:52.87566" level=debug msg="processing new container 15c3e8866e047fd797d94df9dd192277cc2d34bb7af479e8e165b4604f469e1b with state created" loc="nsplugin/microservices.go(133)" logger=linuxplugin-ns-handler
2018-05-16T13:16:52.876340250Z  
2018-05-16T13:16:55.876438722Z  2018-05-16 13:16:55,876 DEBG 'agent' stdout output:
2018-05-16T13:16:55.877424859Z  time="2018-05-16 13:16:55.87598" level=debug msg="detected container as microservice: Name=/node_1 ID=15c3e8866e047fd797d94df9dd192277cc2d34bb7af479e8e165b4604f469e1b Created=2018-05-16 13:16:52.53559276 +0000 UTC State.StartedAt=2018-05-16 13:16:53.562476164 +0000 UTC" loc="nsplugin/microservices.go(166)" logger=linuxplugin-ns-handler
2018-05-16T13:16:55.877434457Z  time="2018-05-16 13:16:55.87601" level=debug msg="Discovered new microservice" id=15c3e8866e047fd797d94df9dd192277cc2d34bb7af479e8e165b4604f469e1b label=node_1 loc="nsplugin/microservices.go(191)" logger=linuxplugin-ns-handler pid=6846
2018-05-16T13:16:55.877437831Z  
2018-05-16T13:16:59.391119071Z  2018-05-16 13:16:59,390 DEBG 'agent' stdout output:
2018-05-16T13:16:59.391149462Z  time="2018-05-16 13:16:59.38759" level=debug msg="Interface without internal name skipped for global status. Data: status:\"UNKNOWN_STATUS\" " loc="statuscheck/plugin_impl_statuscheck.go(226)" logger=status-check
2018-05-16T13:16:59.391153532Z  
2018-05-16T13:16:59.893734577Z  2018-05-16 13:16:59,892 DEBG 'agent' stdout output:
2018-05-16T13:16:59.893785205Z  time="2018-05-16 13:16:59.89164" level=debug msg="Interface without internal name skipped for global status. Data: status:\"UNKNOWN_STATUS\" " loc="statuscheck/plugin_impl_statuscheck.go(226)" logger=status-check
2018-05-16T13:16:59.893789425Z  
2018-05-16T13:17:00.462437613Z  2018-05-16 13:17:00,459 DEBG 'agent' stdout output:
2018-05-16T13:17:00.462452547Z  time="2018-05-16 13:17:00.45664" level=debug msg="Interface without internal name skipped for global status. Data: status:\"UNKNOWN_STATUS\" " loc="statuscheck/plugin_impl_statuscheck.go(226)" logger=status-check
2018-05-16T13:17:00.462456512Z  
2018-05-16T13:17:00.996949308Z  2018-05-16 13:17:00,996 DEBG 'agent' stdout output:
2018-05-16T13:17:00.996969662Z  time="2018-05-16 13:17:00.99326" level=debug msg="Interface without internal name skipped for global status. Data: status:\"UNKNOWN_STATUS\" " loc="statuscheck/plugin_impl_statuscheck.go(226)" logger=status-check
2018-05-16T13:17:00.996983472Z  
2018-05-16T13:17:01.620839354Z  2018-05-16 13:17:01,617 DEBG 'agent' stdout output:
2018-05-16T13:17:01.620852367Z  time="2018-05-16 13:17:01.61707" level=debug msg="Interface without internal name skipped for global status. Data: status:\"UNKNOWN_STATUS\" " loc="statuscheck/plugin_impl_statuscheck.go(226)" logger=status-check
2018-05-16T13:17:01.620856235Z  
2018-05-16T13:17:01.882207870Z  2018-05-16 13:17:01,880 DEBG 'agent' stdout output:
2018-05-16T13:17:01.882220683Z  time="2018-05-16 13:17:01.88076" level=debug msg="processing new container 0f26023937cfa11cb8816afdf2b76898f7d4babd3c189f2e2e6023336ff3e088 with state running" loc="nsplugin/microservices.go(133)" logger=linuxplugin-ns-handler
2018-05-16T13:17:01.882224058Z  
2018-05-16T13:17:01.887204838Z  2018-05-16 13:17:01,886 DEBG 'agent' stdout output:
2018-05-16T13:17:01.887216802Z  time="2018-05-16 13:17:01.88458" level=debug msg="detected container as microservice: Name=/node_2 ID=0f26023937cfa11cb8816afdf2b76898f7d4babd3c189f2e2e6023336ff3e088 Created=2018-05-16 13:17:00.709589179 +0000 UTC State.StartedAt=2018-05-16 13:17:01.828547749 +0000 UTC" loc="nsplugin/microservices.go(166)" logger=linuxplugin-ns-handler
2018-05-16T13:17:01.887220417Z  
2018-05-16T13:17:01.887737964Z  2018-05-16 13:17:01,886 DEBG 'agent' stdout output:
2018-05-16T13:17:01.887745980Z  time="2018-05-16 13:17:01.88690" level=debug msg="Discovered new microservice" id=0f26023937cfa11cb8816afdf2b76898f7d4babd3c189f2e2e6023336ff3e088 label=node_2 loc="nsplugin/microservices.go(191)" logger=linuxplugin-ns-handler pid=7024
2018-05-16T13:17:01.887749230Z  
2018-05-16T13:17:02.175555470Z  2018-05-16 13:17:02,174 DEBG 'agent' stdout output:
2018-05-16T13:17:02.175569942Z  time="2018-05-16 13:17:02.17336" level=debug msg="Interface without internal name skipped for global status. Data: status:\"UNKNOWN_STATUS\" " loc="statuscheck/plugin_impl_statuscheck.go(226)" logger=status-check
2018-05-16T13:17:02.175573637Z  
2018-05-16T13:17:02.704441999Z  2018-05-16 13:17:02,703 DEBG 'agent' stdout output:
2018-05-16T13:17:02.704456672Z  time="2018-05-16 13:17:02.70323" level=debug msg="Interface without internal name skipped for global status. Data: status:\"UNKNOWN_STATUS\" " loc="statuscheck/plugin_impl_statuscheck.go(226)" logger=status-check
2018-05-16T13:17:02.704460411Z  
2018-05-16T13:17:09.310829676Z  2018-05-16 13:17:09,310 DEBG 'agent' stdout output:
2018-05-16T13:17:09.310849673Z  time="2018-05-16 13:17:09.30936" level=debug msg="Interface without internal name skipped for global status. Data: status:\"UNKNOWN_STATUS\" " loc="statuscheck/plugin_impl_statuscheck.go(226)" logger=status-check
2018-05-16T13:17:09.310855907Z  
2018-05-16T13:17:09.829690220Z  2018-05-16 13:17:09,828 DEBG 'agent' stdout output:
2018-05-16T13:17:09.829705089Z  time="2018-05-16 13:17:09.82630" level=debug msg="Interface without internal name skipped for global status. Data: status:\"UNKNOWN_STATUS\" " loc="statuscheck/plugin_impl_statuscheck.go(226)" logger=status-check
2018-05-16T13:17:09.829719085Z  
2018-05-16T13:17:10.350306253Z  2018-05-16 13:17:10,342 DEBG 'agent' stdout output:
2018-05-16T13:17:10.350321669Z  time="2018-05-16 13:17:10.34233" level=debug msg="Interface without internal name skipped for global status. Data: status:\"UNKNOWN_STATUS\" " loc="statuscheck/plugin_impl_statuscheck.go(226)" logger=status-check
2018-05-16T13:17:10.350325617Z  
2018-05-16T13:17:10.900830130Z  2018-05-16 13:17:10,896 DEBG 'agent' stdout output:
2018-05-16T13:17:10.900848741Z  time="2018-05-16 13:17:10.89594" level=debug msg="Interface without internal name skipped for global status. Data: status:\"UNKNOWN_STATUS\" " loc="statuscheck/plugin_impl_statuscheck.go(226)" logger=status-check
2018-05-16T13:17:10.900852896Z  
2018-05-16T13:17:10.922315610Z  2018-05-16 13:17:10,913 DEBG 'agent' stdout output:
2018-05-16T13:17:10.922335062Z  time="2018-05-16 13:17:10.90759" level=debug msg="processing new container 9386c35dc335b2ceff69a81ea34076d0dbd6745babdd9a4cb2f03f7c42ebcea8 with state created" loc="nsplugin/microservices.go(133)" logger=linuxplugin-ns-handler
2018-05-16T13:17:10.922338977Z  
2018-05-16T13:17:11.352218719Z  2018-05-16 13:17:11,349 DEBG 'agent' stdout output:
2018-05-16T13:17:11.352230812Z  time="2018-05-16 13:17:11.34398" level=debug msg="Start processing change for key: vpp/config/v1/interface/IF_LOOPBACK_H_agent_vpp_1" loc="defaultplugins/data_change.go(39)" logger=default-plugins
2018-05-16T13:17:11.352234307Z  
2018-05-16T13:17:11.361903471Z  2018-05-16 13:17:11,355 DEBG 'agent' stdout output:
2018-05-16T13:17:11.361919193Z  time="2018-05-16 13:17:11.35162" level=debug msg="dataChangeIface false Put name:\"IF_LOOPBACK_H_agent_vpp_1\" enabled:true phys_address:\"02:00:00:AA:BB:00\" mtu:1500 ip_addresses:\"6.0.0.100\"  " loc="defaultplugins/data_change.go(336)" logger=default-plugins
2018-05-16T13:17:11.361923283Z  time="2018-05-16 13:17:11.35198" level=info msg="Configuring new interface IF_LOOPBACK_H_agent_vpp_1" loc="ifplugin/interface_config.go(209)" logger=default-plugins-if-conf
2018-05-16T13:17:11.361926249Z  
2018-05-16T13:17:11.383351513Z  2018-05-16 13:17:11,382 DEBG 'agent' stdout output:
2018-05-16T13:17:11.383361334Z  time="2018-05-16 13:17:11.37878" level=debug msg="Setting interface 1 to VRF 0" loc="vppcalls/vrf_vppcalls.go(53)" logger=default-plugins-if-conf
2018-05-16T13:17:11.383364502Z  
2018-05-16T13:17:11.384805353Z  2018-05-16 13:17:11,384 DEBG 'agent' stdout output:
2018-05-16T13:17:11.384813617Z  time="2018-05-16 13:17:11.38433" level=debug msg="Looking up unnumbered interfaces dependent on IF_LOOPBACK_H_agent_vpp_1" loc="ifplugin/interface_config.go(448)" logger=default-plugins-if-conf
2018-05-16T13:17:11.384817038Z  
2018-05-16T13:17:11.387312370Z  2018-05-16 13:17:11,386 DEBG 'agent' stdout output:
2018-05-16T13:17:11.387322105Z  time="2018-05-16 13:17:11.38585" level=debug msg="publish write to default-plugins{{default-plugins IF_LOOPBACK_H_agent_vpp_1 false sw_if_indexes} 0xc420488520}" loc="mem/inmemory_name_mapping.go(245)" logger=default-plugins-if-conf
2018-05-16T13:17:11.387334308Z  time="2018-05-16 13:17:11.38590" level=debug msg="publish write to ifplugin_ifstate{{default-plugins IF_LOOPBACK_H_agent_vpp_1 false sw_if_indexes} 0xc420488520}" loc="mem/inmemory_name_mapping.go(245)" logger=default-plugins-if-conf
2018-05-16T13:17:11.387337377Z  time="2018-05-16 13:17:11.38593" level=debug msg="Configured interface" ifIdx=1 ifName=IF_LOOPBACK_H_agent_vpp_1 loc="ifplugin/interface_config.go(316)" logger=default-plugins-if-conf
2018-05-16T13:17:11.387339982Z  
2018-05-16T13:17:11.389933051Z  2018-05-16 13:17:11,389 DEBG 'agent' stdout output:
2018-05-16T13:17:11.389960615Z  time="2018-05-16 13:17:11.38867" level=debug msg="Interface state change notification." AdminUpDown=1 Deleted=0 LinkUpDown=1 ifName=IF_LOOPBACK_H_agent_vpp_1 loc="ifplugin/interface_state.go(257)" logger=default-plugins-if-state swIfIndex=1
2018-05-16T13:17:11.389964131Z  
2018-05-16T13:17:11.393409078Z  2018-05-16 13:17:11,392 DEBG 'agent' stdout output:
2018-05-16T13:17:11.393418281Z  time="2018-05-16 13:17:11.39134" level=info msg="Interface configuration done" ifIdx=1 ifName=IF_LOOPBACK_H_agent_vpp_1 loc="ifplugin/interface_config.go(316)" logger=default-plugins-if-conf
2018-05-16T13:17:11.393421648Z  time="2018-05-16 13:17:11.39143" level=debug msg="Start processing change for key: vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth" loc="defaultplugins/data_change.go(39)" logger=default-plugins
2018-05-16T13:17:11.393424410Z  time="2018-05-16 13:17:11.39152" level=debug msg="dataChangeIface false Put name:\"IF_AFPIF_VSWITCH_node_1_node1_veth\" type:AF_PACKET_INTERFACE enabled:true mtu:1500 afpacket:&lt;host_if_name:\"node_1_noeth_1\" &gt;  " loc="defaultplugins/data_change.go(336)" logger=default-plugins
2018-05-16T13:17:11.393427849Z  time="2018-05-16 13:17:11.39155" level=info msg="Configuring new interface IF_AFPIF_VSWITCH_node_1_node1_veth" loc="ifplugin/interface_config.go(209)" logger=default-plugins-if-conf
2018-05-16T13:17:11.393430474Z  time="2018-05-16 13:17:11.39159" level=debug msg="Afpacket interface with name IF_AFPIF_VSWITCH_node_1_node1_veth added to cache (hostIf: node_1_noeth_1, pending: true)" loc="ifplugin/afpacket_config.go(217)" logger=default-plugins-if-conf
2018-05-16T13:17:11.393433131Z  time="2018-05-16 13:17:11.39163" level=debug msg="interface name:\"IF_AFPIF_VSWITCH_node_1_node1_veth\" type:AF_PACKET_INTERFACE enabled:true mtu:1500 afpacket:&lt;host_if_name:\"node_1_noeth_1\" &gt;  cannot be created yet and will be configured later" loc="ifplugin/interface_config.go(239)" logger=default-plugins-if-conf
2018-05-16T13:17:11.393436564Z  time="2018-05-16 13:17:11.39167" level=debug msg="ACL configurator: resolving new interface IF_LOOPBACK_H_agent_vpp_1" loc="aclplugin/acl_config.go(367)" logger=default-plugins-acl-plugin
2018-05-16T13:17:11.393439138Z  time="2018-05-16 13:17:11.39169" level=debug msg="ACL configurator: new interface IF_LOOPBACK_H_agent_vpp_1 resolution done" loc="aclplugin/acl_config.go(400)" logger=default-plugins-acl-plugin
2018-05-16T13:17:11.393441653Z  time="2018-05-16 13:17:11.39171" level=debug msg="ARP configurator: resolving new interface IF_LOOPBACK_H_agent_vpp_1" loc="l3plugin/arp_config.go(220)" logger=default-plugins-l3-arp-conf
2018-05-16T13:17:11.393444698Z  time="2018-05-16 13:17:11.39174" level=debug msg="Proxy ARP: handling new interface IF_LOOPBACK_H_agent_vpp_1" loc="l3plugin/arp_proxy_config.go(370)" logger=default-plugins-l3-proxyarp-conf
2018-05-16T13:17:11.393455379Z  
2018-05-16T13:17:11.394341786Z  2018-05-16 13:17:11,393 DEBG 'agent' stdout output:
2018-05-16T13:17:11.394350896Z  time="2018-05-16 13:17:11.39311" level=info msg="Assigning new interface IF_LOOPBACK_H_agent_vpp_1 to bridge domain" loc="l2plugin/bd_config.go(286)" logger=default-plugins-l2-bd-conf
2018-05-16T13:17:11.394354067Z  time="2018-05-16 13:17:11.39314" level=debug msg="Interface IF_LOOPBACK_H_agent_vpp_1 does not belong to any bridge domain" loc="l2plugin/bd_config.go(290)" logger=default-plugins-l2-bd-conf
2018-05-16T13:17:11.394356667Z  time="2018-05-16 13:17:11.39317" level=info msg="FIB configurator: resolving registered interface IF_LOOPBACK_H_agent_vpp_1" loc="l2plugin/fib_config.go(209)" logger=default-plugins-l2-fib-conf
2018-05-16T13:17:11.394359251Z  time="2018-05-16 13:17:11.39319" level=info msg="FIB: resolution of created interface IF_LOOPBACK_H_agent_vpp_1 is done" loc="l2plugin/fib_config.go(267)" logger=default-plugins-l2-fib-conf
2018-05-16T13:17:11.394361772Z  time="2018-05-16 13:17:11.39322" level=debug msg="XConnect configurator: resolving created interface IF_LOOPBACK_H_agent_vpp_1" loc="l2plugin/xconnect_config.go(224)" logger=default-plugins-xc-conf
2018-05-16T13:17:11.394364254Z  time="2018-05-16 13:17:11.39324" level=debug msg="STN plugin: resolving created interface: IF_LOOPBACK_H_agent_vpp_1" loc="ifplugin/stn_config.go(113)" logger=default-plugins-stn-conf
2018-05-16T13:17:11.394366718Z  
2018-05-16T13:17:11.395347467Z  2018-05-16 13:17:11,394 DEBG 'agent' stdout output:
2018-05-16T13:17:11.395355372Z  time="2018-05-16 13:17:11.39406" level=debug msg="Rule exists: false returned rule: 0xc420453e20" loc="ifplugin/stn_config.go(300)" logger=default-plugins-stn-conf
2018-05-16T13:17:11.395358371Z  time="2018-05-16 13:17:11.39409" level=debug msg="NAT configurator: resolving registered interface IF_LOOPBACK_H_agent_vpp_1" loc="ifplugin/nat_config.go(421)" logger=default-plugins-nat-conf
2018-05-16T13:17:11.395360952Z  time="2018-05-16 13:17:11.39412" level=debug msg="Start processing change for key: vpp/config/v1/bd/BD_INTERNAL_EW_agent_vpp_1" loc="defaultplugins/data_change.go(39)" logger=default-plugins
2018-05-16T13:17:11.395363468Z  
2018-05-16T13:17:11.396412252Z  2018-05-16 13:17:11,395 DEBG 'agent' stdout output:
2018-05-16T13:17:11.396420836Z  time="2018-05-16 13:17:11.39504" level=debug msg="dataChangeBD false Put name:\"BD_INTERNAL_EW_agent_vpp_1\" flood:true unknown_unicast_flood:true forward:true learn:true interfaces:&lt;name:\"IF_AFPIF_VSWITCH_node_1_node1_veth\" &gt; interfaces:&lt;name:\"IF_AFPIF_VSWITCH_node_2_node2_veth\" &gt;  " loc="defaultplugins/data_change.go(388)" logger=default-plugins
2018-05-16T13:17:11.396425599Z  time="2018-05-16 13:17:11.39509" level=info msg="Configuring VPP Bridge Domain BD_INTERNAL_EW_agent_vpp_1" loc="l2plugin/bd_config.go(100)" logger=default-plugins-l2-bd-conf
2018-05-16T13:17:11.396428154Z  time="2018-05-16 13:17:11.39512" level=debug msg="Bridge domain BD_INTERNAL_EW_agent_vpp_1 does not contain any bvi interface" loc="l2plugin/bd_config.go(346)" logger=default-plugins-l2-bd-conf
2018-05-16T13:17:11.396437025Z  
2018-05-16T13:17:11.398356645Z  2018-05-16 13:17:11,397 DEBG 'agent' stdout output:
2018-05-16T13:17:11.398365747Z  time="2018-05-16 13:17:11.39689" level=debug msg="Required bridge domain BD_INTERNAL_EW_agent_vpp_1 interface IF_AFPIF_VSWITCH_node_1_node1_veth not found" loc="vppcalls/interface_vppcalls.go(45)" logger=default-plugins-l2-bd-conf
2018-05-16T13:17:11.398369025Z  time="2018-05-16 13:17:11.39698" level=debug msg="Required bridge domain BD_INTERNAL_EW_agent_vpp_1 interface IF_AFPIF_VSWITCH_node_2_node2_veth not found" loc="vppcalls/interface_vppcalls.go(45)" logger=default-plugins-l2-bd-conf
2018-05-16T13:17:11.398371723Z  time="2018-05-16 13:17:11.39706" level=debug msg="No ARP termination entries to set" Bridge domain name=BD_INTERNAL_EW_agent_vpp_1 loc="l2plugin/bd_config.go(133)" logger=default-plugins-l2-bd-conf
2018-05-16T13:17:11.398374319Z  time="2018-05-16 13:17:11.39714" level=debug msg="publish write to bdplugin_bdstate{{default-plugins BD_INTERNAL_EW_agent_vpp_1 false bd_indexes} 0xc420489b60}" loc="mem/inmemory_name_mapping.go(245)" logger=default-plugins-l2-bd-conf
2018-05-16T13:17:11.398376888Z  time="2018-05-16 13:17:11.39718" level=debug msg="publish write to default-plugins{{default-plugins BD_INTERNAL_EW_agent_vpp_1 false bd_indexes} 0xc420489b60}" loc="mem/inmemory_name_mapping.go(245)" logger=default-plugins-l2-bd-conf
2018-05-16T13:17:11.398379818Z  time="2018-05-16 13:17:11.39721" level=debug msg="Bridge domain registered" Index=1 Name=BD_INTERNAL_EW_agent_vpp_1 loc="l2plugin/bd_config.go(138)" logger=default-plugins-l2-bd-conf
2018-05-16T13:17:11.398382344Z  
2018-05-16T13:17:11.400354802Z  2018-05-16 13:17:11,399 DEBG 'agent' stdout output:
2018-05-16T13:17:11.400362895Z  time="2018-05-16 13:17:11.39888" level=info msg="Bridge domain BD_INTERNAL_EW_agent_vpp_1 configured" bdIdx=1 loc="l2plugin/bd_config.go(147)" logger=default-plugins-l2-bd-conf
2018-05-16T13:17:11.400365925Z  time="2018-05-16 13:17:11.39892" level=debug msg="Start processing change for key: linux/config/v1/interface/IF_VETH_VNF_node_1_node1_veth" loc="linuxplugin/data_change.go(28)" logger=linuxplugin
2018-05-16T13:17:11.400368609Z  time="2018-05-16 13:17:11.39907" level=debug msg="dataChangeIface false Put name:\"IF_VETH_VNF_node_1_node1_veth\" enabled:true ip_addresses:\"10.0.0.10/24\" phys_address:\"02:00:00:00:00:01\" mtu:1500 host_if_name:\"node1_veth\" namespace:&lt;type:MICROSERVICE_REF_NS microservice:\"node_1\" &gt; veth:&lt;peer_if_name:\"IF_VETH_VSWITCH_node_1_node1_veth\" &gt;  " loc="linuxplugin/data_change.go(72)" logger=linuxplugin
2018-05-16T13:17:11.400372451Z  time="2018-05-16 13:17:11.39910" level=info msg="Configuring new Linux interface node1_veth" loc="ifplugin/interface_config.go(119)" logger=linuxplugin-if-conf
2018-05-16T13:17:11.400375042Z  time="2018-05-16 13:17:11.39913" level=debug msg="Linux interface with name IF_VETH_VNF_node_1_node1_veth added to cache (peer: &lt;nil&gt;)" loc="ifplugin/interface_config.go(838)" logger=linuxplugin-if-conf
2018-05-16T13:17:11.400865221Z  time="2018-05-16 13:17:11.39916" level=debug msg="Configuring new Veth interface" hostName=node1_veth loc="ifplugin/interface_config.go(255)" logger=linuxplugin-if-conf name=IF_VETH_VNF_node_1_node1_veth peer=IF_VETH_VSWITCH_node_1_node1_veth
2018-05-16T13:17:11.400879027Z  time="2018-05-16 13:17:11.39919" level=info msg="cannot configure linux interface node1_veth: peer interface IF_VETH_VSWITCH_node_1_node1_veth is not configured yet" loc="ifplugin/interface_config.go(259)" logger=linuxplugin-if-conf
2018-05-16T13:17:11.400882330Z  
2018-05-16T13:17:11.402493376Z  2018-05-16 13:17:11,402 DEBG 'agent' stdout output:
2018-05-16T13:17:11.402502541Z  time="2018-05-16 13:17:11.40114" level=info msg="FIB configurator: resolving registered bridge domain BD_INTERNAL_EW_agent_vpp_1" loc="l2plugin/fib_config.go(300)" logger=default-plugins-l2-fib-conf
2018-05-16T13:17:11.402505838Z  
2018-05-16T13:17:11.404876319Z  2018-05-16 13:17:11,403 DEBG 'agent' stdout output:
2018-05-16T13:17:11.404885237Z  time="2018-05-16 13:17:11.40376" level=info msg="FIB: resolution of created bridge domain BD_INTERNAL_EW_agent_vpp_1 is done" loc="l2plugin/fib_config.go(358)" logger=default-plugins-l2-fib-conf
2018-05-16T13:17:11.404888502Z  
2018-05-16T13:17:11.405889381Z  2018-05-16 13:17:11,405 DEBG 'agent' stdout output:
2018-05-16T13:17:11.405897846Z  time="2018-05-16 13:17:11.40449" level=debug msg="Start processing change for key: linux/config/v1/interface/IF_VETH_VSWITCH_node_1_node1_veth" loc="linuxplugin/data_change.go(28)" logger=linuxplugin
2018-05-16T13:17:11.405901049Z  time="2018-05-16 13:17:11.40457" level=debug msg="dataChangeIface false Put name:\"IF_VETH_VSWITCH_node_1_node1_veth\" enabled:true mtu:1500 host_if_name:\"node_1_noeth_1\" namespace:&lt;type:MICROSERVICE_REF_NS microservice:\"agent_vpp_1\" &gt; veth:&lt;peer_if_name:\"IF_VETH_VNF_node_1_node1_veth\" &gt;  " loc="linuxplugin/data_change.go(72)" logger=linuxplugin
2018-05-16T13:17:11.405904816Z  time="2018-05-16 13:17:11.40461" level=info msg="Configuring new Linux interface node_1_noeth_1" loc="ifplugin/interface_config.go(119)" logger=linuxplugin-if-conf
2018-05-16T13:17:11.405907382Z  time="2018-05-16 13:17:11.40464" level=debug msg="Linux interface with name IF_VETH_VSWITCH_node_1_node1_veth added to cache (peer: &amp;{0xc420538400 0xc4204e38e0})" loc="ifplugin/interface_config.go(838)" logger=linuxplugin-if-conf
2018-05-16T13:17:11.405910161Z  time="2018-05-16 13:17:11.40466" level=debug msg="Configuring new Veth interface" hostName=node_1_noeth_1 loc="ifplugin/interface_config.go(255)" logger=linuxplugin-if-conf name=IF_VETH_VSWITCH_node_1_node1_veth peer=IF_VETH_VNF_node_1_node1_veth
2018-05-16T13:17:11.405912744Z  time="2018-05-16 13:17:11.40473" level=debug msg="Locked OS thread" loc="nsplugin/ns_impl.go(284)" logger=linuxplugin-if-conf
2018-05-16T13:17:11.405915154Z  time="2018-05-16 13:17:11.40477" level=debug msg="Switched Linux network namespace (veth-cfg-ns)" loc="nsplugin/ns_impl.go(288)" logger=linuxplugin-if-conf ns="NS(17: 3, 4026532555)" ns-fd=17
2018-05-16T13:17:11.405917702Z  
2018-05-16T13:17:11.406896101Z  2018-05-16 13:17:11,406 DEBG 'agent' stdout output:
2018-05-16T13:17:11.406904337Z  time="2018-05-16 13:17:11.40559" level=debug msg="Attempting to remove obsolete VETH" hostIfName=node_1_noeth_1 loc="ifplugin/interface_config.go(677)" logger=linuxplugin-if-conf ns="MICROSERVICE:agent_vpp_1" vethName=IF_VETH_VSWITCH_node_1_node1_veth
2018-05-16T13:17:11.406916733Z  time="2018-05-16 13:17:11.40566" level=debug msg="Switched Linux network namespace (PID:6533)" loc="nsplugin/ns_impl.go(288)" logger=linuxplugin-ns-handler ns="NS(18: 3, 4026532500)" ns-fd=18
2018-05-16T13:17:11.406919830Z  time="2018-05-16 13:17:11.40573" level=debug msg="Switched back to the original Linux network namespace" loc="nsplugin/ns_impl.go(296)" logger=linuxplugin-ns-handler orig-ns="NS(17: 3, 4026532555)" orig-ns-fd=17
2018-05-16T13:17:11.406922669Z  time="2018-05-16 13:17:11.40576" level=debug msg="Attempting to remove obsolete VETH" hostIfName=node1_veth loc="ifplugin/interface_config.go(677)" logger=linuxplugin-if-conf ns="MICROSERVICE:node_1" vethName=IF_VETH_VNF_node_1_node1_veth
2018-05-16T13:17:11.406925308Z  
2018-05-16T13:17:11.406927397Z  2018-05-16 13:17:11,406 DEBG 'agent' stdout output:
2018-05-16T13:17:11.406929655Z  time="2018-05-16 13:17:11.40655" level=debug msg="Switched Linux network namespace (PID:6846)" loc="nsplugin/ns_impl.go(288)" logger=linuxplugin-ns-handler ns="NS(18: 3, 4026532616)" ns-fd=18
2018-05-16T13:17:11.406932233Z  
2018-05-16T13:17:11.407876204Z  2018-05-16 13:17:11,407 DEBG 'agent' stdout output:
2018-05-16T13:17:11.407883901Z  time="2018-05-16 13:17:11.40676" level=debug msg="Switched back to the original Linux network namespace" loc="nsplugin/ns_impl.go(296)" logger=linuxplugin-ns-handler orig-ns="NS(17: 3, 4026532555)" orig-ns-fd=17
2018-05-16T13:17:11.407886997Z  
2018-05-16T13:17:11.408899115Z  2018-05-16 13:17:11,408 DEBG 'agent' stdout output:
2018-05-16T13:17:11.408907587Z  time="2018-05-16 13:17:11.40758" level=debug msg="Attempting to remove obsolete VETH" hostIfName=node_1_noeth_1 loc="ifplugin/interface_config.go(677)" logger=linuxplugin-if-conf ns=veth-cfg-ns vethName=IF_VETH_VSWITCH_node_1_node1_veth
2018-05-16T13:17:11.408910802Z  time="2018-05-16 13:17:11.40765" level=debug msg="Switched Linux network namespace (veth-cfg-ns)" loc="nsplugin/ns_impl.go(288)" logger=linuxplugin-ns-handler ns="NS(18: 3, 4026532555)" ns-fd=18
2018-05-16T13:17:11.408913560Z  time="2018-05-16 13:17:11.40771" level=debug msg="Switched back to the original Linux network namespace" loc="nsplugin/ns_impl.go(296)" logger=linuxplugin-ns-handler orig-ns="NS(17: 3, 4026532555)" orig-ns-fd=17
2018-05-16T13:17:11.408916426Z  time="2018-05-16 13:17:11.40774" level=debug msg="Attempting to remove obsolete VETH" hostIfName=node1_veth loc="ifplugin/interface_config.go(677)" logger=linuxplugin-if-conf ns=veth-cfg-ns vethName=IF_VETH_VNF_node_1_node1_veth
2018-05-16T13:17:11.408919130Z  time="2018-05-16 13:17:11.40778" level=debug msg="Switched Linux network namespace (veth-cfg-ns)" loc="nsplugin/ns_impl.go(288)" logger=linuxplugin-ns-handler ns="NS(18: 3, 4026532555)" ns-fd=18
2018-05-16T13:17:11.408921849Z  
2018-05-16T13:17:11.409897072Z  2018-05-16 13:17:11,409 DEBG 'agent' stdout output:
2018-05-16T13:17:11.409905274Z  time="2018-05-16 13:17:11.40871" level=debug msg="Switched back to the original Linux network namespace" loc="nsplugin/ns_impl.go(296)" logger=linuxplugin-ns-handler orig-ns="NS(17: 3, 4026532555)" orig-ns-fd=17
2018-05-16T13:17:11.409914708Z  time="2018-05-16 13:17:11.40877" level=debug msg="Creating new Linux VETH pair" ifName=node_1_noeth_1 loc="linuxcalls/veth_linuxcalls.go(31)" logger=linuxplugin-if-conf peerIfName=node1_veth
2018-05-16T13:17:11.409938829Z  
2018-05-16T13:17:11.414437913Z  2018-05-16 13:17:11,413 DEBG 'agent' stdout output:
2018-05-16T13:17:11.414467684Z  time="2018-05-16 13:17:11.41153" level=debug msg="Bridge domain BD_INTERNAL_EW_agent_vpp_1: state stored in ETCD" loc="defaultplugins/publish.go(146)" logger=default-plugins
2018-05-16T13:17:11.414471180Z  
2018-05-16T13:17:11.424564728Z  2018-05-16 13:17:11,424 DEBG 'agent' stdout output:
2018-05-16T13:17:11.424599699Z  time="2018-05-16 13:17:11.42316" level=debug msg="Moved Linux interface across namespaces" dest-namespace="PID:6533" dest-namespace-fd=17 ifName=node_1_noeth_1 loc="nsplugin/ns_impl.go(183)" logger=linuxplugin-if-conf
2018-05-16T13:17:11.424617246Z  
2018-05-16T13:17:11.427581763Z  2018-05-16 13:17:11,427 DEBG 'agent' stdout output:
2018-05-16T13:17:11.427684626Z  time="2018-05-16 13:17:11.42334" level=debug msg="Switched Linux network namespace (PID:6533)" loc="nsplugin/ns_impl.go(288)" logger=linuxplugin-if-conf ns="NS(19: 3, 4026532500)" ns-fd=19
2018-05-16T13:17:11.427690328Z  
2018-05-16T13:17:11.428460302Z  2018-05-16 13:17:11,428 DEBG 'agent' stdout output:
2018-05-16T13:17:11.428468876Z  time="2018-05-16 13:17:11.42783" level=debug msg="MTU was reconfigured for Linux interface" ifName=node_1_noeth_1 loc="nsplugin/ns_impl.go(227)" logger=linuxplugin-if-conf mtu=1500
2018-05-16T13:17:11.428472074Z  time="2018-05-16 13:17:11.42789" level=debug msg="Switched back to the original Linux network namespace" loc="nsplugin/ns_impl.go(296)" logger=linuxplugin-if-conf orig-ns="NS(18: 3, 4026532555)" orig-ns-fd=18
2018-05-16T13:17:11.428474991Z  
2018-05-16T13:17:11.428962528Z  2018-05-16 13:17:11,428 DEBG 'agent' stdout output:
2018-05-16T13:17:11.428970292Z  time="2018-05-16 13:17:11.42825" level=debug msg="Switched Linux network namespace (PID:6533)" loc="nsplugin/ns_impl.go(288)" logger=linuxplugin-ns-handler ns="NS(18: 3, 4026532500)" ns-fd=18
2018-05-16T13:17:11.428973585Z  
2018-05-16T13:17:11.429489761Z  2018-05-16 13:17:11,429 DEBG 'agent' stdout output:
2018-05-16T13:17:11.429498281Z  time="2018-05-16 13:17:11.42871" level=debug msg="MTU 1500 set to interface node_1_noeth_1" loc="ifplugin/interface_config.go(440)" logger=linuxplugin-if-conf
2018-05-16T13:17:11.429501344Z  
2018-05-16T13:17:11.430149777Z  2018-05-16 13:17:11,429 DEBG 'agent' stdout output:
2018-05-16T13:17:11.430158445Z  time="2018-05-16 13:17:11.42919" level=debug msg="publish write to linuxplugin{{linuxplugin IF_VETH_VSWITCH_node_1_node1_veth false linux_if_indexes} 0xc4204a15e0}" loc="mem/inmemory_name_mapping.go(245)" logger=defaultLogger
2018-05-16T13:17:11.430161687Z  time="2018-05-16 13:17:11.42925" level=debug msg="publish write to default-plugins{{linuxplugin IF_VETH_VSWITCH_node_1_node1_veth false linux_if_indexes} 0xc4204a15e0}" loc="mem/inmemory_name_mapping.go(245)" logger=defaultLogger
2018-05-16T13:17:11.430173792Z  time="2018-05-16 13:17:11.42928" level=info msg="An entry added into ifState." ifIdx=3 ifName=IF_VETH_VSWITCH_node_1_node1_veth loc="ifplugin/interface_config.go(454)" logger=linuxplugin-if-conf
2018-05-16T13:17:11.430176819Z  time="2018-05-16 13:17:11.42931" level=debug msg="Switched back to the original Linux network namespace" loc="nsplugin/ns_impl.go(296)" logger=linuxplugin-ns-handler orig-ns="NS(17: 3, 4026532555)" orig-ns-fd=17
2018-05-16T13:17:11.430179691Z  
2018-05-16T13:17:11.433035686Z  2018-05-16 13:17:11,432 DEBG 'agent' stdout output:
2018-05-16T13:17:11.433048343Z  time="2018-05-16 13:17:11.43205" level=debug msg="Processing Linux link update: Name=node_1_noeth_1 Type=veth OperState=down Index=3 HwAddr=b2:f1:cb:3e:97:0b" loc="ifplugin/interface_state.go(115)" logger=linuxplugin-if-state
2018-05-16T13:17:11.433051686Z  time="2018-05-16 13:17:11.43209" level=debug msg="Processing Linux link update: Name=node_1_noeth_1 Type=veth OperState=unknown Index=3 HwAddr=b2:f1:cb:3e:97:0b" loc="ifplugin/interface_state.go(115)" logger=linuxplugin-if-state
2018-05-16T13:17:11.433054363Z  time="2018-05-16 13:17:11.43211" level=debug msg="Processing Linux link update: Name=node_1_noeth_1 Type=veth OperState=unknown Index=3 HwAddr=b2:f1:cb:3e:97:0b" loc="ifplugin/interface_state.go(115)" logger=linuxplugin-if-state
2018-05-16T13:17:11.433532995Z  time="2018-05-16 13:17:11.43213" level=debug msg="Linux interface type veth state processing skipped" loc="ifplugin/interface_config.go(810)" logger=linuxplugin-if-conf
2018-05-16T13:17:11.433555427Z  time="2018-05-16 13:17:11.43215" level=debug msg="Linux interface type veth state processing skipped" loc="ifplugin/interface_config.go(810)" logger=linuxplugin-if-conf
2018-05-16T13:17:11.433558499Z  time="2018-05-16 13:17:11.43217" level=debug msg="Linux interface type veth state processing skipped" loc="ifplugin/interface_config.go(810)" logger=linuxplugin-if-conf
2018-05-16T13:17:11.433561104Z  time="2018-05-16 13:17:11.43228" level=debug msg="Global interface state data added: internal_name:\"local0\" status:\"DOWN\" " loc="statuscheck/plugin_impl_statuscheck.go(245)" logger=status-check
2018-05-16T13:17:11.433564137Z  
2018-05-16T13:17:11.439035232Z  2018-05-16 13:17:11,438 DEBG 'agent' stdout output:
2018-05-16T13:17:11.439044645Z  time="2018-05-16 13:17:11.43821" level=debug msg="Moved Linux interface across namespaces" dest-namespace="PID:6846" dest-namespace-fd=17 ifName=node1_veth loc="nsplugin/ns_impl.go(183)" logger=linuxplugin-if-conf
2018-05-16T13:17:11.439048164Z  time="2018-05-16 13:17:11.43828" level=debug msg="Switched Linux network namespace (PID:6846)" loc="nsplugin/ns_impl.go(288)" logger=linuxplugin-if-conf ns="NS(14: 3, 4026532616)" ns-fd=14
2018-05-16T13:17:11.439050822Z  time="2018-05-16 13:17:11.43836" level=debug msg="MTU was reconfigured for Linux interface" ifName=node1_veth loc="nsplugin/ns_impl.go(227)" logger=linuxplugin-if-conf mtu=1500
2018-05-16T13:17:11.439053331Z  time="2018-05-16 13:17:11.43840" level=debug msg="Switched back to the original Linux network namespace" loc="nsplugin/ns_impl.go(296)" logger=linuxplugin-if-conf orig-ns="NS(13: 3, 4026532555)" orig-ns-fd=13
2018-05-16T13:17:11.439056026Z  time="2018-05-16 13:17:11.43847" level=debug msg="Switched Linux network namespace (PID:6846)" loc="nsplugin/ns_impl.go(288)" logger=linuxplugin-ns-handler ns="NS(14: 3, 4026532616)" ns-fd=14
2018-05-16T13:17:11.439065200Z  
2018-05-16T13:17:11.440588522Z  2018-05-16 13:17:11,440 DEBG 'agent' stdout output:
2018-05-16T13:17:11.440597019Z  time="2018-05-16 13:17:11.43934" level=debug msg="MAC '02:00:00:00:00:01' set to interface node1_veth" loc="ifplugin/interface_config.go(418)" logger=linuxplugin-if-conf
2018-05-16T13:17:11.440600284Z  
2018-05-16T13:17:11.441021848Z  2018-05-16 13:17:11,440 DEBG 'agent' stdout output:
2018-05-16T13:17:11.441029777Z  time="2018-05-16 13:17:11.43978" level=debug msg="Processing Linux link update: Name=node_1_noeth_1 Type=veth OperState=up Index=3 HwAddr=b2:f1:cb:3e:97:0b" loc="ifplugin/interface_state.go(115)" logger=linuxplugin-if-state
2018-05-16T13:17:11.441032943Z  
2018-05-16T13:17:11.441601723Z  2018-05-16 13:17:11,441 DEBG 'agent' stdout output:
2018-05-16T13:17:11.441609654Z  time="2018-05-16 13:17:11.44090" level=debug msg="Linux interface type veth state processing skipped" loc="ifplugin/interface_config.go(810)" logger=linuxplugin-if-conf
2018-05-16T13:17:11.441612807Z  
2018-05-16T13:17:11.442206119Z  2018-05-16 13:17:11,441 DEBG 'agent' stdout output:
2018-05-16T13:17:11.442214337Z  time="2018-05-16 13:17:11.44129" level=debug msg="IP address '10.0.0.10/24' set to interface node1_veth" loc="ifplugin/interface_config.go(434)" logger=linuxplugin-if-conf
2018-05-16T13:17:11.442217425Z  time="2018-05-16 13:17:11.44139" level=debug msg="MTU 1500 set to interface node1_veth" loc="ifplugin/interface_config.go(440)" logger=linuxplugin-if-conf
2018-05-16T13:17:11.442219988Z  
2018-05-16T13:17:11.442562329Z  2018-05-16 13:17:11,442 DEBG 'agent' stdout output:
2018-05-16T13:17:11.442569733Z  time="2018-05-16 13:17:11.44192" level=debug msg="publish write to linuxplugin{{linuxplugin IF_VETH_VNF_node_1_node1_veth false linux_if_indexes} 0xc4204cca20}" loc="mem/inmemory_name_mapping.go(245)" logger=defaultLogger
2018-05-16T13:17:11.442572740Z  
2018-05-16T13:17:11.443026895Z  2018-05-16 13:17:11,442 DEBG 'agent' stdout output:
2018-05-16T13:17:11.443034751Z  time="2018-05-16 13:17:11.44242" level=debug msg="publish write to default-plugins{{linuxplugin IF_VETH_VNF_node_1_node1_veth false linux_if_indexes} 0xc4204cca20}" loc="mem/inmemory_name_mapping.go(245)" logger=defaultLogger
2018-05-16T13:17:11.443037895Z  
2018-05-16T13:17:11.443601440Z  2018-05-16 13:17:11,443 DEBG 'agent' stdout output:
2018-05-16T13:17:11.443622674Z  time="2018-05-16 13:17:11.44275" level=info msg="An entry added into ifState." ifIdx=2 ifName=IF_VETH_VNF_node_1_node1_veth loc="ifplugin/interface_config.go(454)" logger=linuxplugin-if-conf
2018-05-16T13:17:11.443626248Z  time="2018-05-16 13:17:11.44280" level=debug msg="Switched back to the original Linux network namespace" loc="nsplugin/ns_impl.go(296)" logger=linuxplugin-ns-handler orig-ns="NS(13: 3, 4026532555)" orig-ns-fd=13
2018-05-16T13:17:11.443629050Z  time="2018-05-16 13:17:11.44284" level=info msg="Linux interface IF_VETH_VSWITCH_node_1_node1_veth with hostIfName node_1_noeth_1 configured" loc="ifplugin/interface_config.go(297)" logger=linuxplugin-if-conf
2018-05-16T13:17:11.443639018Z  time="2018-05-16 13:17:11.44288" level=debug msg="Switched back to the original Linux network namespace" loc="nsplugin/ns_impl.go(296)" logger=linuxplugin-if-conf orig-ns="NS(16: 3, 4026532500)" orig-ns-fd=16
2018-05-16T13:17:11.443641920Z  time="2018-05-16 13:17:11.44292" level=debug msg="Unlocked OS thread" loc="nsplugin/ns_impl.go(306)" logger=linuxplugin-if-conf
2018-05-16T13:17:11.443644377Z  
2018-05-16T13:17:11.444569717Z  2018-05-16 13:17:11,444 DEBG 'agent' stdout output:
2018-05-16T13:17:11.444577864Z  time="2018-05-16 13:17:11.44376" level=debug msg="Start processing change for key: vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth" loc="defaultplugins/data_change.go(39)" logger=default-plugins
2018-05-16T13:17:11.444581267Z  time="2018-05-16 13:17:11.44385" level=debug msg="dataChangeIface false Put name:\"IF_AFPIF_VSWITCH_node_2_node2_veth\" type:AF_PACKET_INTERFACE enabled:true mtu:1500 afpacket:&lt;host_if_name:\"node_2_noeth_2\" &gt;  " loc="defaultplugins/data_change.go(336)" logger=default-plugins
2018-05-16T13:17:11.444585413Z  time="2018-05-16 13:17:11.44389" level=info msg="Configuring new interface IF_AFPIF_VSWITCH_node_2_node2_veth" loc="ifplugin/interface_config.go(209)" logger=default-plugins-if-conf
2018-05-16T13:17:11.444588056Z  time="2018-05-16 13:17:11.44393" level=debug msg="Afpacket interface with name IF_AFPIF_VSWITCH_node_2_node2_veth added to cache (hostIf: node_2_noeth_2, pending: true)" loc="ifplugin/afpacket_config.go(217)" logger=default-plugins-if-conf
2018-05-16T13:17:11.444590752Z  
2018-05-16T13:17:11.445033922Z  2018-05-16 13:17:11,444 DEBG 'agent' stdout output:
2018-05-16T13:17:11.445041753Z  time="2018-05-16 13:17:11.44422" level=debug msg="interface name:\"IF_AFPIF_VSWITCH_node_2_node2_veth\" type:AF_PACKET_INTERFACE enabled:true mtu:1500 afpacket:&lt;host_if_name:\"node_2_noeth_2\" &gt;  cannot be created yet and will be configured later" loc="ifplugin/interface_config.go(239)" logger=default-plugins-if-conf
2018-05-16T13:17:11.445045326Z  time="2018-05-16 13:17:11.44429" level=debug msg="Linux ARP configurator: resolve created interface IF_VETH_VSWITCH_node_1_node1_veth" loc="l3plugin/arp_config.go(345)" logger=linuxplugin-arp-conf
2018-05-16T13:17:11.445047855Z  time="2018-05-16 13:17:11.44432" level=info msg="Linux static route configurator: resolve new interface IF_VETH_VSWITCH_node_1_node1_veth (idx 2)" loc="l3plugin/route_config.go(371)" logger=linuxplugin-route-conf
2018-05-16T13:17:11.445050341Z  time="2018-05-16 13:17:11.44435" level=debug msg="Processing automatic interfaces for IF_VETH_VSWITCH_node_1_node1_veth" loc="l3plugin/route_config.go(605)" logger=linuxplugin-route-conf
2018-05-16T13:17:11.445052758Z  time="2018-05-16 13:17:11.44441" level=debug msg="Locked OS thread" loc="nsplugin/ns_impl.go(284)" logger=linuxplugin-route-conf
2018-05-16T13:17:11.445055151Z  time="2018-05-16 13:17:11.44444" level=debug msg="Switched Linux network namespace (PID:6533)" loc="nsplugin/ns_impl.go(288)" logger=linuxplugin-route-conf ns="NS(14: 3, 4026532500)" ns-fd=14
2018-05-16T13:17:11.445057689Z  
2018-05-16T13:17:11.445554937Z  2018-05-16 13:17:11,445 DEBG 'agent' stdout output:
2018-05-16T13:17:11.445562655Z  time="2018-05-16 13:17:11.44493" level=debug msg="Route with IP fe80:: skipped" loc="l3plugin/route_config.go(661)" logger=linuxplugin-route-conf
2018-05-16T13:17:11.445565579Z  
2018-05-16T13:17:11.445567736Z  2018-05-16 13:17:11,445 DEBG 'agent' stdout output:
2018-05-16T13:17:11.445569992Z  time="2018-05-16 13:17:11.44525" level=debug msg="Switched back to the original Linux network namespace" loc="nsplugin/ns_impl.go(296)" logger=linuxplugin-route-conf orig-ns="NS(13: 3, 4026532500)" orig-ns-fd=13
2018-05-16T13:17:11.445572713Z  
2018-05-16T13:17:11.446047575Z  2018-05-16 13:17:11,445 DEBG 'agent' stdout output:
2018-05-16T13:17:11.446055752Z  time="2018-05-16 13:17:11.44544" level=debug msg="Unlocked OS thread" loc="nsplugin/ns_impl.go(306)" logger=linuxplugin-route-conf
2018-05-16T13:17:11.446058891Z  
2018-05-16T13:17:11.447618721Z  2018-05-16 13:17:11,447 DEBG 'agent' stdout output:
2018-05-16T13:17:11.447628556Z  time="2018-05-16 13:17:11.44682" level=debug msg="Start processing change for key: vpp/config/v1/bd/BD_INTERNAL_EW_L2FIB_agent_vpp_1" loc="defaultplugins/data_change.go(39)" logger=default-plugins
2018-05-16T13:17:11.447631763Z  
2018-05-16T13:17:11.447634057Z  2018-05-16 13:17:11,447 DEBG 'agent' stdout output:
2018-05-16T13:17:11.447636332Z  time="2018-05-16 13:17:11.44724" level=debug msg="dataChangeBD false Put name:\"BD_INTERNAL_EW_L2FIB_agent_vpp_1\" forward:true  " loc="defaultplugins/data_change.go(388)" logger=default-plugins
2018-05-16T13:17:11.447639120Z  
2018-05-16T13:17:11.449592969Z  2018-05-16 13:17:11,449 DEBG 'agent' stdout output:
2018-05-16T13:17:11.449605674Z  time="2018-05-16 13:17:11.44892" level=info msg="Configuring VPP Bridge Domain BD_INTERNAL_EW_L2FIB_agent_vpp_1" loc="l2plugin/bd_config.go(100)" logger=default-plugins-l2-bd-conf
2018-05-16T13:17:11.449608789Z  
2018-05-16T13:17:11.449610991Z  2018-05-16 13:17:11,449 DEBG 'agent' stdout output:
2018-05-16T13:17:11.449613370Z  time="2018-05-16 13:17:11.44929" level=warning msg="Bridge domain BD_INTERNAL_EW_L2FIB_agent_vpp_1 does not contain any interface" loc="l2plugin/bd_config.go(336)" logger=default-plugins-l2-bd-conf
2018-05-16T13:17:11.449616093Z  
2018-05-16T13:17:11.450570762Z  2018-05-16 13:17:11,450 DEBG 'agent' stdout output:
2018-05-16T13:17:11.450579119Z  time="2018-05-16 13:17:11.45013" level=debug msg="Bridge domain BD_INTERNAL_EW_L2FIB_agent_vpp_1 has no new interface to set" loc="vppcalls/interface_vppcalls.go(37)" logger=default-plugins-l2-bd-conf
2018-05-16T13:17:11.450582243Z  time="2018-05-16 13:17:11.45018" level=debug msg="No ARP termination entries to set" Bridge domain name=BD_INTERNAL_EW_L2FIB_agent_vpp_1 loc="l2plugin/bd_config.go(133)" logger=default-plugins-l2-bd-conf
2018-05-16T13:17:11.450584915Z  time="2018-05-16 13:17:11.45024" level=debug msg="publish write to bdplugin_bdstate{{default-plugins BD_INTERNAL_EW_L2FIB_agent_vpp_1 false bd_indexes} 0xc4204a0320}" loc="mem/inmemory_name_mapping.go(245)" logger=default-plugins-l2-bd-conf
2018-05-16T13:17:11.450596618Z  time="2018-05-16 13:17:11.45028" level=debug msg="publish write to default-plugins{{default-plugins BD_INTERNAL_EW_L2FIB_agent_vpp_1 false bd_indexes} 0xc4204a0320}" loc="mem/inmemory_name_mapping.go(245)" logger=default-plugins-l2-bd-conf
2018-05-16T13:17:11.451048085Z  time="2018-05-16 13:17:11.45031" level=debug msg="Bridge domain registered" Index=2 Name=BD_INTERNAL_EW_L2FIB_agent_vpp_1 loc="l2plugin/bd_config.go(138)" logger=default-plugins-l2-bd-conf
2018-05-16T13:17:11.451056482Z  
2018-05-16T13:17:11.452138391Z  2018-05-16 13:17:11,451 DEBG 'agent' stdout output:
2018-05-16T13:17:11.452146605Z  time="2018-05-16 13:17:11.45111" level=info msg="Bridge domain BD_INTERNAL_EW_L2FIB_agent_vpp_1 configured" bdIdx=2 loc="l2plugin/bd_config.go(147)" logger=default-plugins-l2-bd-conf
2018-05-16T13:17:11.452149851Z  time="2018-05-16 13:17:11.45115" level=debug msg="Start processing change for key: linux/config/v1/interface/IF_VETH_VNF_node_2_node2_veth" loc="linuxplugin/data_change.go(28)" logger=linuxplugin
2018-05-16T13:17:11.452152587Z  time="2018-05-16 13:17:11.45122" level=debug msg="dataChangeIface false Put name:\"IF_VETH_VNF_node_2_node2_veth\" enabled:true ip_addresses:\"10.0.0.11/24\" phys_address:\"02:00:00:00:00:02\" mtu:1500 host_if_name:\"node2_veth\" namespace:&lt;type:MICROSERVICE_REF_NS microservice:\"node_2\" &gt; veth:&lt;peer_if_name:\"IF_VETH_VSWITCH_node_2_node2_veth\" &gt;  " loc="linuxplugin/data_change.go(72)" logger=linuxplugin
2018-05-16T13:17:11.452156624Z  time="2018-05-16 13:17:11.45125" level=info msg="Configuring new Linux interface node2_veth" loc="ifplugin/interface_config.go(119)" logger=linuxplugin-if-conf
2018-05-16T13:17:11.452159122Z  time="2018-05-16 13:17:11.45129" level=debug msg="Linux interface with name IF_VETH_VNF_node_2_node2_veth added to cache (peer: &lt;nil&gt;)" loc="ifplugin/interface_config.go(838)" logger=linuxplugin-if-conf
2018-05-16T13:17:11.452161834Z  time="2018-05-16 13:17:11.45131" level=debug msg="Configuring new Veth interface" hostName=node2_veth loc="ifplugin/interface_config.go(255)" logger=linuxplugin-if-conf name=IF_VETH_VNF_node_2_node2_veth peer=IF_VETH_VSWITCH_node_2_node2_veth
2018-05-16T13:17:11.452164476Z  time="2018-05-16 13:17:11.45134" level=info msg="cannot configure linux interface node2_veth: peer interface IF_VETH_VSWITCH_node_2_node2_veth is not configured yet" loc="ifplugin/interface_config.go(259)" logger=linuxplugin-if-conf
2018-05-16T13:17:11.452167082Z  time="2018-05-16 13:17:11.45137" level=info msg="FIB configurator: resolving registered bridge domain BD_INTERNAL_EW_L2FIB_agent_vpp_1" loc="l2plugin/fib_config.go(300)" logger=default-plugins-l2-fib-conf
2018-05-16T13:17:11.452170008Z  time="2018-05-16 13:17:11.45139" level=info msg="FIB: resolution of created bridge domain BD_INTERNAL_EW_L2FIB_agent_vpp_1 is done" loc="l2plugin/fib_config.go(358)" logger=default-plugins-l2-fib-conf
2018-05-16T13:17:11.452172659Z  time="2018-05-16 13:17:11.45142" level=info msg="New Linux interface was created" hostIfName=node_1_noeth_1 ifIdx=2 ifName=IF_VETH_VSWITCH_node_1_node1_veth loc="ifplugin/interface_config.go(848)" logger=default-plugins-if-conf
2018-05-16T13:17:11.452175240Z  time="2018-05-16 13:17:11.45144" level=info msg="Configuring new interface IF_AFPIF_VSWITCH_node_1_node1_veth" loc="ifplugin/interface_config.go(209)" logger=default-plugins-if-conf
2018-05-16T13:17:11.452183166Z  
2018-05-16T13:17:11.454097160Z  2018-05-16 13:17:11,453 DEBG 'agent' stdout output:
2018-05-16T13:17:11.454127543Z  time="2018-05-16 13:17:11.45337" level=debug msg="Bridge domain BD_INTERNAL_EW_L2FIB_agent_vpp_1: state stored in ETCD" loc="defaultplugins/publish.go(146)" logger=default-plugins
2018-05-16T13:17:11.454147399Z  
2018-05-16T13:17:11.459653277Z  2018-05-16 13:17:11,459 DEBG 'agent' stdout output:
2018-05-16T13:17:11.459667160Z  time="2018-05-16 13:17:11.45910" level=debug msg="processIfStateNotification but the swIfIndex is not event registered" loc="ifplugin/interface_state.go(248)" logger=default-plugins-if-state swIfIndex=2
2018-05-16T13:17:11.459670532Z  
2018-05-16T13:17:11.460581623Z  2018-05-16 13:17:11,460 DEBG 'agent' stdout output:
2018-05-16T13:17:11.460589622Z  time="2018-05-16 13:17:11.46010" level=debug msg="Afpacket interface with name IF_AFPIF_VSWITCH_node_1_node1_veth added to cache (hostIf: node_1_noeth_1, pending: false)" loc="ifplugin/afpacket_config.go(217)" logger=default-plugins-if-conf
2018-05-16T13:17:11.460592802Z  time="2018-05-16 13:17:11.46019" level=debug msg="publish write to ifplugin_ifstate{{default-plugins IF_AFPIF_VSWITCH_node_1_node1_veth false sw_if_indexes} 0xc4204a1060}" loc="mem/inmemory_name_mapping.go(245)" logger=default-plugins-if-conf
2018-05-16T13:17:11.460595505Z  time="2018-05-16 13:17:11.46026" level=debug msg="publish write to default-plugins{{default-plugins IF_AFPIF_VSWITCH_node_1_node1_veth false sw_if_indexes} 0xc4204a1060}" loc="mem/inmemory_name_mapping.go(245)" logger=default-plugins-if-conf
2018-05-16T13:17:11.460598143Z  time="2018-05-16 13:17:11.46033" level=debug msg="Setting interface 2 to VRF 0" loc="vppcalls/vrf_vppcalls.go(53)" logger=default-plugins-if-conf
2018-05-16T13:17:11.460600579Z  
2018-05-16T13:17:11.461622493Z  2018-05-16 13:17:11,461 DEBG 'agent' stdout output:
2018-05-16T13:17:11.461630485Z  time="2018-05-16 13:17:11.46108" level=debug msg="Looking up unnumbered interfaces dependent on IF_AFPIF_VSWITCH_node_1_node1_veth" loc="ifplugin/interface_config.go(448)" logger=default-plugins-if-conf
2018-05-16T13:17:11.461633682Z  
2018-05-16T13:17:11.462622892Z  2018-05-16 13:17:11,462 DEBG 'agent' stdout output:
2018-05-16T13:17:11.462631280Z  time="2018-05-16 13:17:11.46215" level=debug msg="Configured interface" ifIdx=2 ifName=IF_AFPIF_VSWITCH_node_1_node1_veth loc="ifplugin/interface_config.go(316)" logger=default-plugins-if-conf
2018-05-16T13:17:11.462634510Z  
2018-05-16T13:17:11.463529853Z  2018-05-16 13:17:11,463 DEBG 'agent' stdout output:
2018-05-16T13:17:11.463554623Z  time="2018-05-16 13:17:11.46307" level=debug msg="Interface state change notification." AdminUpDown=1 Deleted=0 LinkUpDown=1 ifName=IF_AFPIF_VSWITCH_node_1_node1_veth loc="ifplugin/interface_state.go(257)" logger=default-plugins-if-state swIfIndex=2
2018-05-16T13:17:11.463558115Z  
2018-05-16T13:17:11.466335248Z  2018-05-16 13:17:11,465 DEBG 'agent' stdout output:
2018-05-16T13:17:11.466384626Z  time="2018-05-16 13:17:11.46466" level=info msg="Interface configuration done" ifIdx=2 ifName=IF_AFPIF_VSWITCH_node_1_node1_veth loc="ifplugin/interface_config.go(316)" logger=default-plugins-if-conf
2018-05-16T13:17:11.466388305Z  time="2018-05-16 13:17:11.46475" level=debug msg="Linux ARP configurator: resolve created interface IF_VETH_VNF_node_1_node1_veth" loc="l3plugin/arp_config.go(345)" logger=linuxplugin-arp-conf
2018-05-16T13:17:11.466391028Z  time="2018-05-16 13:17:11.46479" level=info msg="Linux static route configurator: resolve new interface IF_VETH_VNF_node_1_node1_veth (idx 3)" loc="l3plugin/route_config.go(371)" logger=linuxplugin-route-conf
2018-05-16T13:17:11.466393779Z  time="2018-05-16 13:17:11.46484" level=debug msg="Processing automatic interfaces for IF_VETH_VNF_node_1_node1_veth" loc="l3plugin/route_config.go(605)" logger=linuxplugin-route-conf
2018-05-16T13:17:11.466396403Z  time="2018-05-16 13:17:11.46490" level=debug msg="Locked OS thread" loc="nsplugin/ns_impl.go(284)" logger=linuxplugin-route-conf
2018-05-16T13:17:11.466398916Z  time="2018-05-16 13:17:11.46497" level=debug msg="Switched Linux network namespace (PID:6846)" loc="nsplugin/ns_impl.go(288)" logger=linuxplugin-route-conf ns="NS(14: 3, 4026532616)" ns-fd=14
2018-05-16T13:17:11.466420233Z  time="2018-05-16 13:17:11.46515" level=debug msg="Retrying to configure default routes" loc="l3plugin/route_config.go(570)" logger=linuxplugin-route-conf
2018-05-16T13:17:11.466422722Z  time="2018-05-16 13:17:11.46518" level=debug msg="Route with IP fe80:: skipped" loc="l3plugin/route_config.go(661)" logger=linuxplugin-route-conf
2018-05-16T13:17:11.466425254Z  time="2018-05-16 13:17:11.46521" level=debug msg="Switched back to the original Linux network namespace" loc="nsplugin/ns_impl.go(296)" logger=linuxplugin-route-conf orig-ns="NS(13: 3, 4026532500)" orig-ns-fd=13
2018-05-16T13:17:11.466444002Z  time="2018-05-16 13:17:11.46524" level=debug msg="Unlocked OS thread" loc="nsplugin/ns_impl.go(306)" logger=linuxplugin-route-conf
2018-05-16T13:17:11.466446437Z  time="2018-05-16 13:17:11.46527" level=info msg="New Linux interface was created" hostIfName=node1_veth ifIdx=3 ifName=IF_VETH_VNF_node_1_node1_veth loc="ifplugin/interface_config.go(848)" logger=default-plugins-if-conf
2018-05-16T13:17:11.466449535Z  time="2018-05-16 13:17:11.46530" level=debug msg="ACL configurator: resolving new interface IF_AFPIF_VSWITCH_node_1_node1_veth" loc="aclplugin/acl_config.go(367)" logger=default-plugins-acl-plugin
2018-05-16T13:17:11.466470805Z  time="2018-05-16 13:17:11.46533" level=debug msg="ACL configurator: new interface IF_AFPIF_VSWITCH_node_1_node1_veth resolution done" loc="aclplugin/acl_config.go(400)" logger=default-plugins-acl-plugin
2018-05-16T13:17:11.467153701Z  time="2018-05-16 13:17:11.46535" level=debug msg="ARP configurator: resolving new interface IF_AFPIF_VSWITCH_node_1_node1_veth" loc="l3plugin/arp_config.go(220)" logger=default-plugins-l3-arp-conf
2018-05-16T13:17:11.467161604Z  time="2018-05-16 13:17:11.46537" level=debug msg="Proxy ARP: handling new interface IF_AFPIF_VSWITCH_node_1_node1_veth" loc="l3plugin/arp_proxy_config.go(370)" logger=default-plugins-l3-proxyarp-conf
2018-05-16T13:17:11.467164500Z  time="2018-05-16 13:17:11.46540" level=info msg="Assigning new interface IF_AFPIF_VSWITCH_node_1_node1_veth to bridge domain" loc="l2plugin/bd_config.go(286)" logger=default-plugins-l2-bd-conf
2018-05-16T13:17:11.467171585Z  
2018-05-16T13:17:11.467613031Z  2018-05-16 13:17:11,467 DEBG 'agent' stdout output:
2018-05-16T13:17:11.467620483Z  time="2018-05-16 13:17:11.46723" level=debug msg="Interface set to bridge domain" BD=1 Interface=2 loc="vppcalls/interface_vppcalls.go(140)" logger=default-plugins-l2-bd-conf
2018-05-16T13:17:11.467623421Z  
2018-05-16T13:17:11.470212817Z  2018-05-16 13:17:11,469 DEBG 'agent' stdout output:
2018-05-16T13:17:11.470221424Z  time="2018-05-16 13:17:11.46818" level=info msg="FIB configurator: resolving registered interface IF_AFPIF_VSWITCH_node_1_node1_veth" loc="l2plugin/fib_config.go(209)" logger=default-plugins-l2-fib-conf
2018-05-16T13:17:11.470224590Z  time="2018-05-16 13:17:11.46821" level=info msg="FIB: resolution of created interface IF_AFPIF_VSWITCH_node_1_node1_veth is done" loc="l2plugin/fib_config.go(267)" logger=default-plugins-l2-fib-conf
2018-05-16T13:17:11.470227350Z  time="2018-05-16 13:17:11.46823" level=debug msg="XConnect configurator: resolving created interface IF_AFPIF_VSWITCH_node_1_node1_veth" loc="l2plugin/xconnect_config.go(224)" logger=default-plugins-xc-conf
2018-05-16T13:17:11.470229933Z  time="2018-05-16 13:17:11.46826" level=debug msg="STN plugin: resolving created interface: IF_AFPIF_VSWITCH_node_1_node1_veth" loc="ifplugin/stn_config.go(113)" logger=default-plugins-stn-conf
2018-05-16T13:17:11.470232446Z  time="2018-05-16 13:17:11.46829" level=debug msg="Rule exists: false returned rule: 0xc420453100" loc="ifplugin/stn_config.go(300)" logger=default-plugins-stn-conf
2018-05-16T13:17:11.470234919Z  time="2018-05-16 13:17:11.46831" level=debug msg="NAT configurator: resolving registered interface IF_AFPIF_VSWITCH_node_1_node1_veth" loc="ifplugin/nat_config.go(421)" logger=default-plugins-nat-conf
2018-05-16T13:17:11.470237414Z  time="2018-05-16 13:17:11.46834" level=debug msg="Start processing change for key: linux/config/v1/interface/IF_VETH_VSWITCH_node_2_node2_veth" loc="linuxplugin/data_change.go(28)" logger=linuxplugin
2018-05-16T13:17:11.470239943Z  time="2018-05-16 13:17:11.46841" level=debug msg="dataChangeIface false Put name:\"IF_VETH_VSWITCH_node_2_node2_veth\" enabled:true mtu:1500 host_if_name:\"node_2_noeth_2\" namespace:&lt;type:MICROSERVICE_REF_NS microservice:\"agent_vpp_1\" &gt; veth:&lt;peer_if_name:\"IF_VETH_VNF_node_2_node2_veth\" &gt;  " loc="linuxplugin/data_change.go(72)" logger=linuxplugin
2018-05-16T13:17:11.470243507Z  time="2018-05-16 13:17:11.46844" level=info msg="Configuring new Linux interface node_2_noeth_2" loc="ifplugin/interface_config.go(119)" logger=linuxplugin-if-conf
2018-05-16T13:17:11.470246395Z  time="2018-05-16 13:17:11.46846" level=debug msg="Linux interface with name IF_VETH_VSWITCH_node_2_node2_veth added to cache (peer: &amp;{0xc420458200 0xc420453590})" loc="ifplugin/interface_config.go(838)" logger=linuxplugin-if-conf
2018-05-16T13:17:11.470249179Z  time="2018-05-16 13:17:11.46849" level=debug msg="Configuring new Veth interface" hostName=node_2_noeth_2 loc="ifplugin/interface_config.go(255)" logger=linuxplugin-if-conf name=IF_VETH_VSWITCH_node_2_node2_veth peer=IF_VETH_VNF_node_2_node2_veth
2018-05-16T13:17:11.470256133Z  time="2018-05-16 13:17:11.46861" level=debug msg="Locked OS thread" loc="nsplugin/ns_impl.go(284)" logger=linuxplugin-if-conf
2018-05-16T13:17:11.470258849Z  time="2018-05-16 13:17:11.46864" level=debug msg="Switched Linux network namespace (veth-cfg-ns)" loc="nsplugin/ns_impl.go(288)" logger=linuxplugin-if-conf ns="NS(14: 3, 4026532555)" ns-fd=14
2018-05-16T13:17:11.470261412Z  time="2018-05-16 13:17:11.46868" level=debug msg="Attempting to remove obsolete VETH" hostIfName=node_2_noeth_2 loc="ifplugin/interface_config.go(677)" logger=linuxplugin-if-conf ns="MICROSERVICE:agent_vpp_1" vethName=IF_VETH_VSWITCH_node_2_node2_veth
2018-05-16T13:17:11.470264066Z  time="2018-05-16 13:17:11.46873" level=debug msg="Switched Linux network namespace (PID:6533)" loc="nsplugin/ns_impl.go(288)" logger=linuxplugin-ns-handler ns="NS(16: 3, 4026532500)" ns-fd=16
2018-05-16T13:17:11.470266637Z  time="2018-05-16 13:17:11.46879" level=debug msg="Switched back to the original Linux network namespace" loc="nsplugin/ns_impl.go(296)" logger=linuxplugin-ns-handler orig-ns="NS(14: 3, 4026532555)" orig-ns-fd=14
2018-05-16T13:17:11.470269151Z  time="2018-05-16 13:17:11.46882" level=debug msg="Attempting to remove obsolete VETH" hostIfName=node2_veth loc="ifplugin/interface_config.go(677)" logger=linuxplugin-if-conf ns="MICROSERVICE:node_2" vethName=IF_VETH_VNF_node_2_node2_veth
2018-05-16T13:17:11.470271744Z  time="2018-05-16 13:17:11.46887" level=debug msg="Switched Linux network namespace (PID:7024)" loc="nsplugin/ns_impl.go(288)" logger=linuxplugin-ns-handler ns="NS(16: 3, 4026532677)" ns-fd=16
2018-05-16T13:17:11.470873803Z  time="2018-05-16 13:17:11.46892" level=debug msg="Switched back to the original Linux network namespace" loc="nsplugin/ns_impl.go(296)" logger=linuxplugin-ns-handler orig-ns="NS(14: 3, 4026532555)" orig-ns-fd=14
2018-05-16T13:17:11.470882094Z  time="2018-05-16 13:17:11.46895" level=debug msg="Attempting to remove obsolete VETH" hostIfName=node_2_noeth_2 loc="ifplugin/interface_config.go(677)" logger=linuxplugin-if-conf ns=veth-cfg-ns vethName=IF_VETH_VSWITCH_node_2_node2_veth
2018-05-16T13:17:11.470885108Z  time="2018-05-16 13:17:11.46900" level=debug msg="Switched Linux network namespace (veth-cfg-ns)" loc="nsplugin/ns_impl.go(288)" logger=linuxplugin-ns-handler ns="NS(16: 3, 4026532555)" ns-fd=16
2018-05-16T13:17:11.470887638Z  time="2018-05-16 13:17:11.46912" level=debug msg="Switched back to the original Linux network namespace" loc="nsplugin/ns_impl.go(296)" logger=linuxplugin-ns-handler orig-ns="NS(14: 3, 4026532555)" orig-ns-fd=14
2018-05-16T13:17:11.471117263Z  time="2018-05-16 13:17:11.46918" level=debug msg="Attempting to remove obsolete VETH" hostIfName=node2_veth loc="ifplugin/interface_config.go(677)" logger=linuxplugin-if-conf ns=veth-cfg-ns vethName=IF_VETH_VNF_node_2_node2_veth
2018-05-16T13:17:11.471125232Z  time="2018-05-16 13:17:11.46923" level=debug msg="Switched Linux network namespace (veth-cfg-ns)" loc="nsplugin/ns_impl.go(288)" logger=linuxplugin-ns-handler ns="NS(16: 3, 4026532555)" ns-fd=16
2018-05-16T13:17:11.471128212Z  time="2018-05-16 13:17:11.46928" level=debug msg="Switched back to the original Linux network namespace" loc="nsplugin/ns_impl.go(296)" logger=linuxplugin-ns-handler orig-ns="NS(14: 3, 4026532555)" orig-ns-fd=14
2018-05-16T13:17:11.471130972Z  time="2018-05-16 13:17:11.46931" level=debug msg="Creating new Linux VETH pair" ifName=node_2_noeth_2 loc="linuxcalls/veth_linuxcalls.go(31)" logger=linuxplugin-if-conf peerIfName=node2_veth
2018-05-16T13:17:11.471138693Z  
2018-05-16T13:17:11.472026672Z  2018-05-16 13:17:11,471 DEBG 'agent' stdout output:
2018-05-16T13:17:11.472034754Z  time="2018-05-16 13:17:11.47171" level=debug msg="Bridge domain BD_INTERNAL_EW_agent_vpp_1: state stored in ETCD" loc="defaultplugins/publish.go(146)" logger=default-plugins
2018-05-16T13:17:11.472037801Z  
2018-05-16T13:17:11.474496907Z  2018-05-16 13:17:11,474 DEBG 'agent' stdout output:
2018-05-16T13:17:11.474505849Z  time="2018-05-16 13:17:11.47405" level=debug msg="Moved Linux interface across namespaces" dest-namespace="PID:6533" dest-namespace-fd=14 ifName=node_2_noeth_2 loc="nsplugin/ns_impl.go(183)" logger=linuxplugin-if-conf
2018-05-16T13:17:11.474509251Z  
2018-05-16T13:17:11.474992549Z  2018-05-16 13:17:11,474 DEBG 'agent' stdout output:
2018-05-16T13:17:11.475000495Z  time="2018-05-16 13:17:11.47432" level=debug msg="Switched Linux network namespace (PID:6533)" loc="nsplugin/ns_impl.go(288)" logger=linuxplugin-if-conf ns="NS(17: 3, 4026532500)" ns-fd=17
2018-05-16T13:17:11.475003687Z  
2018-05-16T13:17:11.475005834Z  2018-05-16 13:17:11,474 DEBG 'agent' stdout output:
2018-05-16T13:17:11.475008046Z  time="2018-05-16 13:17:11.47472" level=debug msg="MTU was reconfigured for Linux interface" ifName=node_2_noeth_2 loc="nsplugin/ns_impl.go(227)" logger=linuxplugin-if-conf mtu=1500
2018-05-16T13:17:11.475010534Z  
2018-05-16T13:17:11.475492789Z  2018-05-16 13:17:11,475 DEBG 'agent' stdout output:
2018-05-16T13:17:11.475500331Z  time="2018-05-16 13:17:11.47505" level=debug msg="Switched back to the original Linux network namespace" loc="nsplugin/ns_impl.go(296)" logger=linuxplugin-if-conf orig-ns="NS(16: 3, 4026532555)" orig-ns-fd=16
2018-05-16T13:17:11.475503428Z  
2018-05-16T13:17:11.475505552Z  2018-05-16 13:17:11,475 DEBG 'agent' stdout output:
2018-05-16T13:17:11.475507836Z  time="2018-05-16 13:17:11.47527" level=debug msg="Switched Linux network namespace (PID:6533)" loc="nsplugin/ns_impl.go(288)" logger=linuxplugin-ns-handler ns="NS(16: 3, 4026532500)" ns-fd=16
2018-05-16T13:17:11.475510400Z  
2018-05-16T13:17:11.475998665Z  2018-05-16 13:17:11,475 DEBG 'agent' stdout output:
2018-05-16T13:17:11.476005885Z  time="2018-05-16 13:17:11.47570" level=debug msg="MTU 1500 set to interface node_2_noeth_2" loc="ifplugin/interface_config.go(440)" logger=linuxplugin-if-conf
2018-05-16T13:17:11.476008739Z  
2018-05-16T13:17:11.476466269Z  2018-05-16 13:17:11,476 DEBG 'agent' stdout output:
2018-05-16T13:17:11.476473742Z  time="2018-05-16 13:17:11.47611" level=debug msg="publish write to linuxplugin{{linuxplugin IF_VETH_VSWITCH_node_2_node2_veth false linux_if_indexes} 0xc420489d40}" loc="mem/inmemory_name_mapping.go(245)" logger=defaultLogger
2018-05-16T13:17:11.476476834Z  
2018-05-16T13:17:11.476996128Z  2018-05-16 13:17:11,476 DEBG 'agent' stdout output:
2018-05-16T13:17:11.477009094Z  time="2018-05-16 13:17:11.47631" level=debug msg="publish write to default-plugins{{linuxplugin IF_VETH_VSWITCH_node_2_node2_veth false linux_if_indexes} 0xc420489d40}" loc="mem/inmemory_name_mapping.go(245)" logger=defaultLogger
2018-05-16T13:17:11.477012471Z  
2018-05-16T13:17:11.477015214Z  2018-05-16 13:17:11,476 DEBG 'agent' stdout output:
2018-05-16T13:17:11.477017429Z  time="2018-05-16 13:17:11.47659" level=info msg="An entry added into ifState." ifIdx=5 ifName=IF_VETH_VSWITCH_node_2_node2_veth loc="ifplugin/interface_config.go(454)" logger=linuxplugin-if-conf
2018-05-16T13:17:11.477019979Z  
2018-05-16T13:17:11.477022104Z  2018-05-16 13:17:11,476 DEBG 'agent' stdout output:
2018-05-16T13:17:11.477024250Z  time="2018-05-16 13:17:11.47676" level=debug msg="Switched back to the original Linux network namespace" loc="nsplugin/ns_impl.go(296)" logger=linuxplugin-ns-handler orig-ns="NS(14: 3, 4026532555)" orig-ns-fd=14
2018-05-16T13:17:11.477026927Z  
2018-05-16T13:17:11.477999200Z  2018-05-16 13:17:11,477 DEBG 'agent' stdout output:
2018-05-16T13:17:11.478007471Z  time="2018-05-16 13:17:11.47729" level=debug msg="Processing Linux link update: Name=node_2_noeth_2 Type=veth OperState=down Index=5 HwAddr=22:c4:57:2e:db:6b" loc="ifplugin/interface_state.go(115)" logger=linuxplugin-if-state
2018-05-16T13:17:11.478010779Z  time="2018-05-16 13:17:11.47732" level=debug msg="Processing Linux link update: Name=node_2_noeth_2 Type=veth OperState=unknown Index=5 HwAddr=22:c4:57:2e:db:6b" loc="ifplugin/interface_state.go(115)" logger=linuxplugin-if-state
2018-05-16T13:17:11.478013465Z  time="2018-05-16 13:17:11.47734" level=debug msg="Processing Linux link update: Name=node_2_noeth_2 Type=veth OperState=unknown Index=5 HwAddr=22:c4:57:2e:db:6b" loc="ifplugin/interface_state.go(115)" logger=linuxplugin-if-state
2018-05-16T13:17:11.478016033Z  time="2018-05-16 13:17:11.47736" level=debug msg="Linux interface type veth state processing skipped" loc="ifplugin/interface_config.go(810)" logger=linuxplugin-if-conf
2018-05-16T13:17:11.478018469Z  time="2018-05-16 13:17:11.47738" level=debug msg="Linux interface type veth state processing skipped" loc="ifplugin/interface_config.go(810)" logger=linuxplugin-if-conf
2018-05-16T13:17:11.478020913Z  time="2018-05-16 13:17:11.47746" level=debug msg="Linux interface type veth state processing skipped" loc="ifplugin/interface_config.go(810)" logger=linuxplugin-if-conf
2018-05-16T13:17:11.478023334Z  
2018-05-16T13:17:11.489973125Z  2018-05-16 13:17:11,489 DEBG 'agent' stdout output:
2018-05-16T13:17:11.489986407Z  time="2018-05-16 13:17:11.48950" level=debug msg="Moved Linux interface across namespaces" dest-namespace="PID:7024" dest-namespace-fd=14 ifName=node2_veth loc="nsplugin/ns_impl.go(183)" logger=linuxplugin-if-conf
2018-05-16T13:17:11.489989875Z  
2018-05-16T13:17:11.490938194Z  2018-05-16 13:17:11,490 DEBG 'agent' stdout output:
2018-05-16T13:17:11.490946143Z  time="2018-05-16 13:17:11.49048" level=debug msg="Switched Linux network namespace (PID:7024)" loc="nsplugin/ns_impl.go(288)" logger=linuxplugin-if-conf ns="NS(17: 3, 4026532677)" ns-fd=17
2018-05-16T13:17:11.490960861Z  
2018-05-16T13:17:11.491444674Z  2018-05-16 13:17:11,490 DEBG 'agent' stdout output:
2018-05-16T13:17:11.491452822Z  time="2018-05-16 13:17:11.49076" level=debug msg="MTU was reconfigured for Linux interface" ifName=node2_veth loc="nsplugin/ns_impl.go(227)" logger=linuxplugin-if-conf mtu=1500
2018-05-16T13:17:11.491455995Z  
2018-05-16T13:17:11.491458282Z  2018-05-16 13:17:11,491 DEBG 'agent' stdout output:
2018-05-16T13:17:11.491460628Z  time="2018-05-16 13:17:11.49109" level=debug msg="Switched back to the original Linux network namespace" loc="nsplugin/ns_impl.go(296)" logger=linuxplugin-if-conf orig-ns="NS(16: 3, 4026532555)" orig-ns-fd=16
2018-05-16T13:17:11.491463455Z  
2018-05-16T13:17:11.491949637Z  2018-05-16 13:17:11,491 DEBG 'agent' stdout output:
2018-05-16T13:17:11.491957099Z  time="2018-05-16 13:17:11.49130" level=debug msg="Switched Linux network namespace (PID:7024)" loc="nsplugin/ns_impl.go(288)" logger=linuxplugin-ns-handler ns="NS(16: 3, 4026532677)" ns-fd=16
2018-05-16T13:17:11.491960314Z  
2018-05-16T13:17:11.492915399Z  2018-05-16 13:17:11,492 DEBG 'agent' stdout output:
2018-05-16T13:17:11.492923464Z  time="2018-05-16 13:17:11.49228" level=debug msg="MAC '02:00:00:00:00:02' set to interface node2_veth" loc="ifplugin/interface_config.go(418)" logger=linuxplugin-if-conf
2018-05-16T13:17:11.492926513Z  
2018-05-16T13:17:11.494906606Z  2018-05-16 13:17:11,494 DEBG 'agent' stdout output:
2018-05-16T13:17:11.494916188Z  time="2018-05-16 13:17:11.49328" level=debug msg="IP address '10.0.0.11/24' set to interface node2_veth" loc="ifplugin/interface_config.go(434)" logger=linuxplugin-if-conf
2018-05-16T13:17:11.494919462Z  time="2018-05-16 13:17:11.49364" level=debug msg="MTU 1500 set to interface node2_veth" loc="ifplugin/interface_config.go(440)" logger=linuxplugin-if-conf
2018-05-16T13:17:11.494922143Z  
2018-05-16T13:17:11.496028198Z  2018-05-16 13:17:11,495 DEBG 'agent' stdout output:
2018-05-16T13:17:11.496056321Z  time="2018-05-16 13:17:11.49253" level=debug msg="Processing Linux link update: Name=node_2_noeth_2 Type=veth OperState=up Index=5 HwAddr=22:c4:57:2e:db:6b" loc="ifplugin/interface_state.go(115)" logger=linuxplugin-if-state
2018-05-16T13:17:11.496073708Z  time="2018-05-16 13:17:11.49497" level=debug msg="Linux interface type veth state processing skipped" loc="ifplugin/interface_config.go(810)" logger=linuxplugin-if-conf
2018-05-16T13:17:11.496076460Z  
2018-05-16T13:17:11.496914985Z  2018-05-16 13:17:11,496 DEBG 'agent' stdout output:
2018-05-16T13:17:11.496923301Z  time="2018-05-16 13:17:11.49524" level=debug msg="publish write to linuxplugin{{linuxplugin IF_VETH_VNF_node_2_node2_veth false linux_if_indexes} 0xc42045cca0}" loc="mem/inmemory_name_mapping.go(245)" logger=defaultLogger
2018-05-16T13:17:11.496926424Z  time="2018-05-16 13:17:11.49529" level=debug msg="publish write to default-plugins{{linuxplugin IF_VETH_VNF_node_2_node2_veth false linux_if_indexes} 0xc42045cca0}" loc="mem/inmemory_name_mapping.go(245)" logger=defaultLogger
2018-05-16T13:17:11.496955629Z  time="2018-05-16 13:17:11.49532" level=info msg="An entry added into ifState." ifIdx=4 ifName=IF_VETH_VNF_node_2_node2_veth loc="ifplugin/interface_config.go(454)" logger=linuxplugin-if-conf
2018-05-16T13:17:11.496959134Z  time="2018-05-16 13:17:11.49536" level=debug msg="Switched back to the original Linux network namespace" loc="nsplugin/ns_impl.go(296)" logger=linuxplugin-ns-handler orig-ns="NS(14: 3, 4026532555)" orig-ns-fd=14
2018-05-16T13:17:11.496961947Z  time="2018-05-16 13:17:11.49539" level=info msg="Linux interface IF_VETH_VSWITCH_node_2_node2_veth with hostIfName node_2_noeth_2 configured" loc="ifplugin/interface_config.go(297)" logger=linuxplugin-if-conf
2018-05-16T13:17:11.496980843Z  time="2018-05-16 13:17:11.49542" level=debug msg="Switched back to the original Linux network namespace" loc="nsplugin/ns_impl.go(296)" logger=linuxplugin-if-conf orig-ns="NS(13: 3, 4026532500)" orig-ns-fd=13
2018-05-16T13:17:11.496983604Z  time="2018-05-16 13:17:11.49545" level=debug msg="Unlocked OS thread" loc="nsplugin/ns_impl.go(306)" logger=linuxplugin-if-conf
2018-05-16T13:17:11.496986270Z  time="2018-05-16 13:17:11.49548" level=debug msg="Linux ARP configurator: resolve created interface IF_VETH_VSWITCH_node_2_node2_veth" loc="l3plugin/arp_config.go(345)" logger=linuxplugin-arp-conf
2018-05-16T13:17:11.496988993Z  time="2018-05-16 13:17:11.49550" level=info msg="Linux static route configurator: resolve new interface IF_VETH_VSWITCH_node_2_node2_veth (idx 4)" loc="l3plugin/route_config.go(371)" logger=linuxplugin-route-conf
2018-05-16T13:17:11.496992343Z  time="2018-05-16 13:17:11.49553" level=debug msg="Processing automatic interfaces for IF_VETH_VSWITCH_node_2_node2_veth" loc="l3plugin/route_config.go(605)" logger=linuxplugin-route-conf
2018-05-16T13:17:11.496997447Z  time="2018-05-16 13:17:11.49560" level=debug msg="Locked OS thread" loc="nsplugin/ns_impl.go(284)" logger=linuxplugin-route-conf
2018-05-16T13:17:11.497000090Z  time="2018-05-16 13:17:11.49563" level=debug msg="Switched Linux network namespace (PID:6533)" loc="nsplugin/ns_impl.go(288)" logger=linuxplugin-route-conf ns="NS(14: 3, 4026532500)" ns-fd=14
2018-05-16T13:17:11.497002883Z  time="2018-05-16 13:17:11.49574" level=debug msg="Route with IP fe80:: skipped" loc="l3plugin/route_config.go(661)" logger=linuxplugin-route-conf
2018-05-16T13:17:11.497005454Z  time="2018-05-16 13:17:11.49577" level=debug msg="Switched back to the original Linux network namespace" loc="nsplugin/ns_impl.go(296)" logger=linuxplugin-route-conf orig-ns="NS(13: 3, 4026532500)" orig-ns-fd=13
2018-05-16T13:17:11.497008163Z  
2018-05-16T13:17:11.497857493Z  2018-05-16 13:17:11,497 DEBG 'agent' stdout output:
2018-05-16T13:17:11.497865839Z  time="2018-05-16 13:17:11.49705" level=debug msg="Unlocked OS thread" loc="nsplugin/ns_impl.go(306)" logger=linuxplugin-route-conf
2018-05-16T13:17:11.497868818Z  
2018-05-16T13:17:11.497871024Z  2018-05-16 13:17:11,497 DEBG 'agent' stdout output:
2018-05-16T13:17:11.497873363Z  time="2018-05-16 13:17:11.49738" level=info msg="New Linux interface was created" hostIfName=node_2_noeth_2 ifIdx=4 ifName=IF_VETH_VSWITCH_node_2_node2_veth loc="ifplugin/interface_config.go(848)" logger=default-plugins-if-conf
2018-05-16T13:17:11.497876081Z  
2018-05-16T13:17:11.498864871Z  2018-05-16 13:17:11,498 DEBG 'agent' stdout output:
2018-05-16T13:17:11.498878773Z  time="2018-05-16 13:17:11.49792" level=info msg="Configuring new interface IF_AFPIF_VSWITCH_node_2_node2_veth" loc="ifplugin/interface_config.go(209)" logger=default-plugins-if-conf
2018-05-16T13:17:11.498881914Z  
2018-05-16T13:17:11.503812535Z  2018-05-16 13:17:11,502 DEBG 'agent' stdout output:
2018-05-16T13:17:11.503825799Z  time="2018-05-16 13:17:11.50274" level=debug msg="processIfStateNotification but the swIfIndex is not event registered" loc="ifplugin/interface_state.go(248)" logger=default-plugins-if-state swIfIndex=3
2018-05-16T13:17:11.503829396Z  
2018-05-16T13:17:11.505698498Z  2018-05-16 13:17:11,505 DEBG 'agent' stdout output:
2018-05-16T13:17:11.505707708Z  time="2018-05-16 13:17:11.50475" level=debug msg="Afpacket interface with name IF_AFPIF_VSWITCH_node_2_node2_veth added to cache (hostIf: node_2_noeth_2, pending: false)" loc="ifplugin/afpacket_config.go(217)" logger=default-plugins-if-conf
2018-05-16T13:17:11.505710916Z  time="2018-05-16 13:17:11.50482" level=debug msg="publish write to ifplugin_ifstate{{default-plugins IF_AFPIF_VSWITCH_node_2_node2_veth false sw_if_indexes} 0xc42045d840}" loc="mem/inmemory_name_mapping.go(245)" logger=default-plugins-if-conf
2018-05-16T13:17:11.505713798Z  time="2018-05-16 13:17:11.50486" level=debug msg="publish write to default-plugins{{default-plugins IF_AFPIF_VSWITCH_node_2_node2_veth false sw_if_indexes} 0xc42045d840}" loc="mem/inmemory_name_mapping.go(245)" logger=default-plugins-if-conf
2018-05-16T13:17:11.505716513Z  time="2018-05-16 13:17:11.50490" level=debug msg="Setting interface 3 to VRF 0" loc="vppcalls/vrf_vppcalls.go(53)" logger=default-plugins-if-conf
2018-05-16T13:17:11.505719049Z  
2018-05-16T13:17:11.507706187Z  2018-05-16 13:17:11,506 DEBG 'agent' stdout output:
2018-05-16T13:17:11.507729371Z  time="2018-05-16 13:17:11.50681" level=debug msg="Looking up unnumbered interfaces dependent on IF_AFPIF_VSWITCH_node_2_node2_veth" loc="ifplugin/interface_config.go(448)" logger=default-plugins-if-conf
2018-05-16T13:17:11.507732816Z  
2018-05-16T13:17:11.509687270Z  2018-05-16 13:17:11,508 DEBG 'agent' stdout output:
2018-05-16T13:17:11.509698008Z  time="2018-05-16 13:17:11.50864" level=debug msg="Configured interface" ifIdx=3 ifName=IF_AFPIF_VSWITCH_node_2_node2_veth loc="ifplugin/interface_config.go(316)" logger=default-plugins-if-conf
2018-05-16T13:17:11.509701995Z  
2018-05-16T13:17:11.511645438Z  2018-05-16 13:17:11,510 DEBG 'agent' stdout output:
2018-05-16T13:17:11.511657728Z  time="2018-05-16 13:17:11.51067" level=debug msg="Interface state change notification." AdminUpDown=1 Deleted=0 LinkUpDown=1 ifName=IF_AFPIF_VSWITCH_node_2_node2_veth loc="ifplugin/interface_state.go(257)" logger=default-plugins-if-state swIfIndex=3
2018-05-16T13:17:11.511661025Z  
2018-05-16T13:17:11.513664478Z  2018-05-16 13:17:11,512 DEBG 'agent' stdout output:
2018-05-16T13:17:11.513676984Z  time="2018-05-16 13:17:11.51260" level=info msg="Interface configuration done" ifIdx=3 ifName=IF_AFPIF_VSWITCH_node_2_node2_veth loc="ifplugin/interface_config.go(316)" logger=default-plugins-if-conf
2018-05-16T13:17:11.513709800Z  time="2018-05-16 13:17:11.51266" level=info msg="New Linux interface was created" hostIfName=node2_veth ifIdx=5 ifName=IF_VETH_VNF_node_2_node2_veth loc="ifplugin/interface_config.go(848)" logger=default-plugins-if-conf
2018-05-16T13:17:11.513713166Z  time="2018-05-16 13:17:11.51270" level=debug msg="ACL configurator: resolving new interface IF_AFPIF_VSWITCH_node_2_node2_veth" loc="aclplugin/acl_config.go(367)" logger=default-plugins-acl-plugin
2018-05-16T13:17:11.513715896Z  time="2018-05-16 13:17:11.51273" level=debug msg="ACL configurator: new interface IF_AFPIF_VSWITCH_node_2_node2_veth resolution done" loc="aclplugin/acl_config.go(400)" logger=default-plugins-acl-plugin
2018-05-16T13:17:11.513718461Z  time="2018-05-16 13:17:11.51275" level=debug msg="ARP configurator: resolving new interface IF_AFPIF_VSWITCH_node_2_node2_veth" loc="l3plugin/arp_config.go(220)" logger=default-plugins-l3-arp-conf
2018-05-16T13:17:11.513721040Z  time="2018-05-16 13:17:11.51277" level=debug msg="Proxy ARP: handling new interface IF_AFPIF_VSWITCH_node_2_node2_veth" loc="l3plugin/arp_proxy_config.go(370)" logger=default-plugins-l3-proxyarp-conf
2018-05-16T13:17:11.513723795Z  time="2018-05-16 13:17:11.51280" level=info msg="Assigning new interface IF_AFPIF_VSWITCH_node_2_node2_veth to bridge domain" loc="l2plugin/bd_config.go(286)" logger=default-plugins-l2-bd-conf
2018-05-16T13:17:11.513726367Z  
2018-05-16T13:17:11.515540571Z  2018-05-16 13:17:11,514 DEBG 'agent' stdout output:
2018-05-16T13:17:11.515552008Z  time="2018-05-16 13:17:11.51466" level=debug msg="Interface set to bridge domain" BD=1 Interface=3 loc="vppcalls/interface_vppcalls.go(140)" logger=default-plugins-l2-bd-conf
2018-05-16T13:17:11.515555148Z  
2018-05-16T13:17:11.518634120Z  2018-05-16 13:17:11,517 DEBG 'agent' stdout output:
2018-05-16T13:17:11.518661313Z  time="2018-05-16 13:17:11.51649" level=info msg="FIB configurator: resolving registered interface IF_AFPIF_VSWITCH_node_2_node2_veth" loc="l2plugin/fib_config.go(209)" logger=default-plugins-l2-fib-conf
2018-05-16T13:17:11.518664824Z  time="2018-05-16 13:17:11.51652" level=info msg="FIB: resolution of created interface IF_AFPIF_VSWITCH_node_2_node2_veth is done" loc="l2plugin/fib_config.go(267)" logger=default-plugins-l2-fib-conf
2018-05-16T13:17:11.518667738Z  time="2018-05-16 13:17:11.51655" level=debug msg="XConnect configurator: resolving created interface IF_AFPIF_VSWITCH_node_2_node2_veth" loc="l2plugin/xconnect_config.go(224)" logger=default-plugins-xc-conf
2018-05-16T13:17:11.518670468Z  time="2018-05-16 13:17:11.51657" level=debug msg="STN plugin: resolving created interface: IF_AFPIF_VSWITCH_node_2_node2_veth" loc="ifplugin/stn_config.go(113)" logger=default-plugins-stn-conf
2018-05-16T13:17:11.518673147Z  time="2018-05-16 13:17:11.51660" level=debug msg="Rule exists: false returned rule: 0xc4203023a0" loc="ifplugin/stn_config.go(300)" logger=default-plugins-stn-conf
2018-05-16T13:17:11.518675790Z  time="2018-05-16 13:17:11.51662" level=debug msg="NAT configurator: resolving registered interface IF_AFPIF_VSWITCH_node_2_node2_veth" loc="ifplugin/nat_config.go(421)" logger=default-plugins-nat-conf
2018-05-16T13:17:11.518692313Z  time="2018-05-16 13:17:11.51665" level=debug msg="Linux ARP configurator: resolve created interface IF_VETH_VNF_node_2_node2_veth" loc="l3plugin/arp_config.go(345)" logger=linuxplugin-arp-conf
2018-05-16T13:17:11.518695115Z  time="2018-05-16 13:17:11.51668" level=info msg="Linux static route configurator: resolve new interface IF_VETH_VNF_node_2_node2_veth (idx 5)" loc="l3plugin/route_config.go(371)" logger=linuxplugin-route-conf
2018-05-16T13:17:11.518697763Z  time="2018-05-16 13:17:11.51670" level=debug msg="Processing automatic interfaces for IF_VETH_VNF_node_2_node2_veth" loc="l3plugin/route_config.go(605)" logger=linuxplugin-route-conf
2018-05-16T13:17:11.518700401Z  time="2018-05-16 13:17:11.51675" level=debug msg="Locked OS thread" loc="nsplugin/ns_impl.go(284)" logger=linuxplugin-route-conf
2018-05-16T13:17:11.518703309Z  time="2018-05-16 13:17:11.51679" level=debug msg="Switched Linux network namespace (PID:7024)" loc="nsplugin/ns_impl.go(288)" logger=linuxplugin-route-conf ns="NS(14: 3, 4026532677)" ns-fd=14
2018-05-16T13:17:11.518705996Z  time="2018-05-16 13:17:11.51692" level=debug msg="Retrying to configure default routes" loc="l3plugin/route_config.go(570)" logger=linuxplugin-route-conf
2018-05-16T13:17:11.518708498Z  time="2018-05-16 13:17:11.51694" level=debug msg="Route with IP fe80:: skipped" loc="l3plugin/route_config.go(661)" logger=linuxplugin-route-conf
2018-05-16T13:17:11.518710976Z  time="2018-05-16 13:17:11.51697" level=debug msg="Switched back to the original Linux network namespace" loc="nsplugin/ns_impl.go(296)" logger=linuxplugin-route-conf orig-ns="NS(13: 3, 4026532500)" orig-ns-fd=13
2018-05-16T13:17:11.518713595Z  time="2018-05-16 13:17:11.51700" level=debug msg="Unlocked OS thread" loc="nsplugin/ns_impl.go(306)" logger=linuxplugin-route-conf
2018-05-16T13:17:11.518716055Z  
2018-05-16T13:17:11.520481903Z  2018-05-16 13:17:11,519 DEBG 'agent' stdout output:
2018-05-16T13:17:11.520494025Z  time="2018-05-16 13:17:11.51934" level=debug msg="Bridge domain BD_INTERNAL_EW_agent_vpp_1: state stored in ETCD" loc="defaultplugins/publish.go(146)" logger=default-plugins
2018-05-16T13:17:11.520499564Z  
2018-05-16T13:17:13.053147921Z  2018-05-16 13:17:13,051 DEBG 'agent' stdout output:
2018-05-16T13:17:13.053162786Z  time="2018-05-16 13:17:13.05007" level=debug msg="Global interface state data added: internal_name:\"loop0\" index:1 status:\"UP\" mac_address:\"02:00:00:aa:bb:00\" " loc="statuscheck/plugin_impl_statuscheck.go(245)" logger=status-check
2018-05-16T13:17:13.053166942Z  
2018-05-16T13:17:13.574416950Z  2018-05-16 13:17:13,573 DEBG 'agent' stdout output:
2018-05-16T13:17:13.574445283Z  time="2018-05-16 13:17:13.57289" level=debug msg="Global interface state data added: internal_name:\"host-node_1_noeth_1\" index:2 status:\"UP\" mac_address:\"02:fe:3e:fd:61:28\" " loc="statuscheck/plugin_impl_statuscheck.go(245)" logger=status-check
2018-05-16T13:17:13.574449758Z  
2018-05-16T13:17:14.073992394Z  2018-05-16 13:17:14,073 DEBG 'agent' stdout output:
2018-05-16T13:17:14.074116506Z  time="2018-05-16 13:17:14.07152" level=debug msg="Global interface state data added: internal_name:\"host-node_2_noeth_2\" index:3 status:\"UP\" mac_address:\"02:fe:42:98:22:08\" " loc="statuscheck/plugin_impl_statuscheck.go(245)" logger=status-check
2018-05-16T13:17:14.074131513Z  
2018-05-16T13:17:49.637148793Z  2018-05-16 13:17:49,636 DEBG 'agent' stdout output:
2018-05-16T13:17:49.637163435Z  time="2018-05-16 13:17:49.63560" level=error msg="dial tcp: lookup dbef312b260f on 144.254.71.184:53: no such host" loc="defaultplugins/publish.go(79)" logger=default-plugins
2018-05-16T13:17:49.637167097Z  
2018-05-16T13:17:50.175800161Z  2018-05-16 13:17:50,175 DEBG 'agent' stdout output:
2018-05-16T13:17:50.176278104Z  time="2018-05-16 13:17:50.17226" level=error msg="dial tcp: lookup dbef312b260f on 173.38.200.100:53: no such host" loc="defaultplugins/publish.go(79)" logger=default-plugins
2018-05-16T13:17:50.176296221Z  
2018-05-16T13:18:08.548426990Z  2018-05-16 13:18:08,547 DEBG 'agent' stdout output:
2018-05-16T13:18:08.548441725Z  time="2018-05-16 13:18:08.54609" level=error msg="dial tcp: lookup dbef312b260f on 144.254.71.184:53: no such host" loc="defaultplugins/publish.go(79)" logger=default-plugins
2018-05-16T13:18:08.548445524Z  
2018-05-16T13:18:09.098821463Z  2018-05-16 13:18:09,096 DEBG 'agent' stdout output:
2018-05-16T13:18:09.098835676Z  time="2018-05-16 13:18:09.09543" level=error msg="dial tcp: lookup dbef312b260f on 173.38.200.100:53: no such host" loc="defaultplugins/publish.go(79)" logger=default-plugins
2018-05-16T13:18:09.098839422Z  
2018-05-16T13:18:28.844717920Z  2018-05-16 13:18:28,844 DEBG 'agent' stdout output:
2018-05-16T13:18:28.844737995Z  time="2018-05-16 13:18:28.84370" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:18:28.844744623Z  time="2018-05-16 13:18:28.84376" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:18:28.844750398Z  time="2018-05-16 13:18:28.84380" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:18:28.844755380Z  time="2018-05-16 13:18:28.84384" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:18:28.844760255Z  time="2018-05-16 13:18:28.84387" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:18:28.844765317Z  time="2018-05-16 13:18:28.84391" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:18:28.844770123Z  time="2018-05-16 13:18:28.84394" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:18:28.844782048Z  
2018-05-16T13:18:38.849056447Z  2018-05-16 13:18:38,848 DEBG 'agent' stdout output:
2018-05-16T13:18:38.849070287Z  time="2018-05-16 13:18:38.84807" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:18:38.849073520Z  time="2018-05-16 13:18:38.84811" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:18:38.849076255Z  time="2018-05-16 13:18:38.84813" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:18:38.849078767Z  time="2018-05-16 13:18:38.84814" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:18:38.849081332Z  time="2018-05-16 13:18:38.84816" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:18:38.849083824Z  time="2018-05-16 13:18:38.84818" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:18:38.849086325Z  time="2018-05-16 13:18:38.84820" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:18:38.849088803Z  time="2018-05-16 13:18:38.84822" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:18:38.849091307Z  time="2018-05-16 13:18:38.84824" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:18:38.849093813Z  
2018-05-16T13:18:42.680180485Z  2018-05-16 13:18:42,679 DEBG 'agent' stdout output:
2018-05-16T13:18:42.680192043Z  time="2018-05-16 13:18:42.67779" level=debug msg="Start processing change for key: vpp/config/v1/interface/loop0" loc="defaultplugins/data_change.go(39)" logger=default-plugins
2018-05-16T13:18:42.680195593Z  time="2018-05-16 13:18:42.67790" level=debug msg="dataChangeIface false Put name:\"loop0\" enabled:true phys_address:\"8a:f1:be:90:00:00\" mtu:1500 ip_addresses:\"20.1.1.1/24\"  " loc="defaultplugins/data_change.go(336)" logger=default-plugins
2018-05-16T13:18:42.680198619Z  time="2018-05-16 13:18:42.67798" level=info msg="Configuring new interface loop0" loc="ifplugin/interface_config.go(209)" logger=default-plugins-if-conf
2018-05-16T13:18:42.680201172Z  
2018-05-16T13:18:42.683148846Z  2018-05-16 13:18:42,682 DEBG 'agent' stdout output:
2018-05-16T13:18:42.683159044Z  time="2018-05-16 13:18:42.68246" level=debug msg="Setting interface 4 to VRF 0" loc="vppcalls/vrf_vppcalls.go(53)" logger=default-plugins-if-conf
2018-05-16T13:18:42.683162211Z  
2018-05-16T13:18:42.685135804Z  2018-05-16 13:18:42,684 DEBG 'agent' stdout output:
2018-05-16T13:18:42.685144695Z  time="2018-05-16 13:18:42.68440" level=debug msg="Looking up unnumbered interfaces dependent on loop0" loc="ifplugin/interface_config.go(448)" logger=default-plugins-if-conf
2018-05-16T13:18:42.685147882Z  
2018-05-16T13:18:42.685654635Z  2018-05-16 13:18:42,685 DEBG 'agent' stdout output:
2018-05-16T13:18:42.685662908Z  time="2018-05-16 13:18:42.68523" level=debug msg="publish write to ifplugin_ifstate{{default-plugins loop0 false sw_if_indexes} 0xc42000c2c0}" loc="mem/inmemory_name_mapping.go(245)" logger=default-plugins-if-conf
2018-05-16T13:18:42.685666198Z  time="2018-05-16 13:18:42.68528" level=debug msg="publish write to default-plugins{{default-plugins loop0 false sw_if_indexes} 0xc42000c2c0}" loc="mem/inmemory_name_mapping.go(245)" logger=default-plugins-if-conf
2018-05-16T13:18:42.685668931Z  time="2018-05-16 13:18:42.68531" level=debug msg="Configured interface" ifIdx=4 ifName=loop0 loc="ifplugin/interface_config.go(316)" logger=default-plugins-if-conf
2018-05-16T13:18:42.685671508Z  
2018-05-16T13:18:42.687146049Z  2018-05-16 13:18:42,686 DEBG 'agent' stdout output:
2018-05-16T13:18:42.687154696Z  time="2018-05-16 13:18:42.68668" level=debug msg="Interface state change notification." AdminUpDown=1 Deleted=0 LinkUpDown=1 ifName=loop0 loc="ifplugin/interface_state.go(257)" logger=default-plugins-if-state swIfIndex=4
2018-05-16T13:18:42.687157966Z  
2018-05-16T13:18:42.689187827Z  2018-05-16 13:18:42,688 DEBG 'agent' stdout output:
2018-05-16T13:18:42.689196324Z  time="2018-05-16 13:18:42.68816" level=info msg="Interface configuration done" ifIdx=4 ifName=loop0 loc="ifplugin/interface_config.go(316)" logger=default-plugins-if-conf
2018-05-16T13:18:42.689199517Z  time="2018-05-16 13:18:42.68821" level=debug msg="ACL configurator: resolving new interface loop0" loc="aclplugin/acl_config.go(367)" logger=default-plugins-acl-plugin
2018-05-16T13:18:42.689202268Z  time="2018-05-16 13:18:42.68823" level=debug msg="ACL configurator: new interface loop0 resolution done" loc="aclplugin/acl_config.go(400)" logger=default-plugins-acl-plugin
2018-05-16T13:18:42.689204888Z  time="2018-05-16 13:18:42.68826" level=debug msg="ARP configurator: resolving new interface loop0" loc="l3plugin/arp_config.go(220)" logger=default-plugins-l3-arp-conf
2018-05-16T13:18:42.689207448Z  time="2018-05-16 13:18:42.68828" level=debug msg="Proxy ARP: handling new interface loop0" loc="l3plugin/arp_proxy_config.go(370)" logger=default-plugins-l3-proxyarp-conf
2018-05-16T13:18:42.689209982Z  time="2018-05-16 13:18:42.68831" level=info msg="Assigning new interface loop0 to bridge domain" loc="l2plugin/bd_config.go(286)" logger=default-plugins-l2-bd-conf
2018-05-16T13:18:42.689212666Z  time="2018-05-16 13:18:42.68833" level=debug msg="Interface loop0 does not belong to any bridge domain" loc="l2plugin/bd_config.go(290)" logger=default-plugins-l2-bd-conf
2018-05-16T13:18:42.689215320Z  time="2018-05-16 13:18:42.68835" level=info msg="FIB configurator: resolving registered interface loop0" loc="l2plugin/fib_config.go(209)" logger=default-plugins-l2-fib-conf
2018-05-16T13:18:42.689225686Z  time="2018-05-16 13:18:42.68838" level=info msg="FIB: resolution of created interface loop0 is done" loc="l2plugin/fib_config.go(267)" logger=default-plugins-l2-fib-conf
2018-05-16T13:18:42.689228654Z  time="2018-05-16 13:18:42.68840" level=debug msg="XConnect configurator: resolving created interface loop0" loc="l2plugin/xconnect_config.go(224)" logger=default-plugins-xc-conf
2018-05-16T13:18:42.689231212Z  time="2018-05-16 13:18:42.68843" level=debug msg="STN plugin: resolving created interface: loop0" loc="ifplugin/stn_config.go(113)" logger=default-plugins-stn-conf
2018-05-16T13:18:42.689234189Z  time="2018-05-16 13:18:42.68845" level=debug msg="Rule exists: false returned rule: 0xc420265c10" loc="ifplugin/stn_config.go(300)" logger=default-plugins-stn-conf
2018-05-16T13:18:42.689236826Z  time="2018-05-16 13:18:42.68848" level=debug msg="NAT configurator: resolving registered interface loop0" loc="ifplugin/nat_config.go(421)" logger=default-plugins-nat-conf
2018-05-16T13:18:42.689239393Z  
2018-05-16T13:18:45.737807304Z  2018-05-16 13:18:45,735 DEBG 'agent' stdout output:
2018-05-16T13:18:45.737819254Z  time="2018-05-16 13:18:45.73525" level=debug msg="Start processing change for key: vpp/config/v1/interface/loop1" loc="defaultplugins/data_change.go(39)" logger=default-plugins
2018-05-16T13:18:45.737822639Z  time="2018-05-16 13:18:45.73533" level=debug msg="dataChangeIface false Put name:\"loop1\" enabled:true phys_address:\"8a:f1:be:90:20:00\" mtu:1500 ip_addresses:\"30.1.1.1/24\"  " loc="defaultplugins/data_change.go(336)" logger=default-plugins
2018-05-16T13:18:45.737825698Z  time="2018-05-16 13:18:45.73537" level=info msg="Configuring new interface loop1" loc="ifplugin/interface_config.go(209)" logger=default-plugins-if-conf
2018-05-16T13:18:45.737828336Z  
2018-05-16T13:18:45.742721022Z  2018-05-16 13:18:45,741 DEBG 'agent' stdout output:
2018-05-16T13:18:45.742731078Z  time="2018-05-16 13:18:45.74175" level=debug msg="Setting interface 5 to VRF 0" loc="vppcalls/vrf_vppcalls.go(53)" logger=default-plugins-if-conf
2018-05-16T13:18:45.742734127Z  
2018-05-16T13:18:45.746637619Z  2018-05-16 13:18:45,745 DEBG 'agent' stdout output:
2018-05-16T13:18:45.746647776Z  time="2018-05-16 13:18:45.74564" level=debug msg="Looking up unnumbered interfaces dependent on loop1" loc="ifplugin/interface_config.go(448)" logger=default-plugins-if-conf
2018-05-16T13:18:45.746651093Z  
2018-05-16T13:18:45.748705111Z  2018-05-16 13:18:45,748 DEBG 'agent' stdout output:
2018-05-16T13:18:45.748714667Z  time="2018-05-16 13:18:45.74777" level=debug msg="publish write to ifplugin_ifstate{{default-plugins loop1 false sw_if_indexes} 0xc4203e85a0}" loc="mem/inmemory_name_mapping.go(245)" logger=default-plugins-if-conf
2018-05-16T13:18:45.748717988Z  time="2018-05-16 13:18:45.74791" level=debug msg="publish write to default-plugins{{default-plugins loop1 false sw_if_indexes} 0xc4203e85a0}" loc="mem/inmemory_name_mapping.go(245)" logger=default-plugins-if-conf
2018-05-16T13:18:45.748720816Z  time="2018-05-16 13:18:45.74796" level=debug msg="Configured interface" ifIdx=5 ifName=loop1 loc="ifplugin/interface_config.go(316)" logger=default-plugins-if-conf
2018-05-16T13:18:45.748767048Z  
2018-05-16T13:18:45.752575682Z  2018-05-16 13:18:45,751 DEBG 'agent' stdout output:
2018-05-16T13:18:45.752589857Z  time="2018-05-16 13:18:45.75153" level=debug msg="Interface state change notification." AdminUpDown=1 Deleted=0 LinkUpDown=1 ifName=loop1 loc="ifplugin/interface_state.go(257)" logger=default-plugins-if-state swIfIndex=5
2018-05-16T13:18:45.752593310Z  
2018-05-16T13:18:45.754538775Z  2018-05-16 13:18:45,754 DEBG 'agent' stdout output:
2018-05-16T13:18:45.754550770Z  time="2018-05-16 13:18:45.75349" level=info msg="Interface configuration done" ifIdx=5 ifName=loop1 loc="ifplugin/interface_config.go(316)" logger=default-plugins-if-conf
2018-05-16T13:18:45.754553921Z  time="2018-05-16 13:18:45.75358" level=debug msg="ACL configurator: resolving new interface loop1" loc="aclplugin/acl_config.go(367)" logger=default-plugins-acl-plugin
2018-05-16T13:18:45.754556509Z  time="2018-05-16 13:18:45.75361" level=debug msg="ACL configurator: new interface loop1 resolution done" loc="aclplugin/acl_config.go(400)" logger=default-plugins-acl-plugin
2018-05-16T13:18:45.754559076Z  time="2018-05-16 13:18:45.75363" level=debug msg="ARP configurator: resolving new interface loop1" loc="l3plugin/arp_config.go(220)" logger=default-plugins-l3-arp-conf
2018-05-16T13:18:45.754561560Z  time="2018-05-16 13:18:45.75365" level=debug msg="Proxy ARP: handling new interface loop1" loc="l3plugin/arp_proxy_config.go(370)" logger=default-plugins-l3-proxyarp-conf
2018-05-16T13:18:45.755600706Z  time="2018-05-16 13:18:45.75368" level=info msg="Assigning new interface loop1 to bridge domain" loc="l2plugin/bd_config.go(286)" logger=default-plugins-l2-bd-conf
2018-05-16T13:18:45.755623328Z  time="2018-05-16 13:18:45.75374" level=debug msg="Interface loop1 does not belong to any bridge domain" loc="l2plugin/bd_config.go(290)" logger=default-plugins-l2-bd-conf
2018-05-16T13:18:45.755626847Z  time="2018-05-16 13:18:45.75377" level=info msg="FIB configurator: resolving registered interface loop1" loc="l2plugin/fib_config.go(209)" logger=default-plugins-l2-fib-conf
2018-05-16T13:18:45.755629597Z  time="2018-05-16 13:18:45.75379" level=info msg="FIB: resolution of created interface loop1 is done" loc="l2plugin/fib_config.go(267)" logger=default-plugins-l2-fib-conf
2018-05-16T13:18:45.755632250Z  time="2018-05-16 13:18:45.75383" level=debug msg="XConnect configurator: resolving created interface loop1" loc="l2plugin/xconnect_config.go(224)" logger=default-plugins-xc-conf
2018-05-16T13:18:45.755634919Z  time="2018-05-16 13:18:45.75391" level=debug msg="STN plugin: resolving created interface: loop1" loc="ifplugin/stn_config.go(113)" logger=default-plugins-stn-conf
2018-05-16T13:18:45.755637543Z  time="2018-05-16 13:18:45.75398" level=debug msg="Rule exists: false returned rule: 0xc420355f50" loc="ifplugin/stn_config.go(300)" logger=default-plugins-stn-conf
2018-05-16T13:18:45.755640137Z  time="2018-05-16 13:18:45.75405" level=debug msg="NAT configurator: resolving registered interface loop1" loc="ifplugin/nat_config.go(421)" logger=default-plugins-nat-conf
2018-05-16T13:18:45.755642811Z  
2018-05-16T13:18:48.853114655Z  2018-05-16 13:18:48,850 DEBG 'agent' stdout output:
2018-05-16T13:18:48.853134690Z  time="2018-05-16 13:18:48.85015" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:18:48.853138610Z  time="2018-05-16 13:18:48.85019" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:18:48.853141299Z  time="2018-05-16 13:18:48.85021" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:18:48.853143898Z  time="2018-05-16 13:18:48.85023" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:18:48.853146410Z  time="2018-05-16 13:18:48.85025" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:18:48.853148906Z  time="2018-05-16 13:18:48.85027" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:18:48.853151520Z  time="2018-05-16 13:18:48.85029" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:18:48.853154048Z  time="2018-05-16 13:18:48.85031" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:18:48.853156482Z  time="2018-05-16 13:18:48.85032" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:18:48.853158904Z  time="2018-05-16 13:18:48.85034" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:18:48.853161963Z  time="2018-05-16 13:18:48.85036" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:18:48.853164535Z  time="2018-05-16 13:18:48.85038" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:18:48.853166949Z  time="2018-05-16 13:18:48.85040" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:18:48.853169380Z  time="2018-05-16 13:18:48.85042" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:18:48.853171793Z  time="2018-05-16 13:18:48.85043" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:18:48.853176641Z  time="2018-05-16 13:18:48.85045" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:18:48.853179242Z  time="2018-05-16 13:18:48.85047" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:18:48.853181683Z  time="2018-05-16 13:18:48.85049" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:18:48.853184093Z  time="2018-05-16 13:18:48.85051" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:18:48.853186509Z  time="2018-05-16 13:18:48.85052" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:18:48.853188943Z  time="2018-05-16 13:18:48.85054" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:18:48.853228247Z  time="2018-05-16 13:18:48.85056" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:18:48.853232826Z  time="2018-05-16 13:18:48.85058" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:18:48.853235319Z  time="2018-05-16 13:18:48.85060" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:18:48.853237764Z  time="2018-05-16 13:18:48.85062" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:18:48.853240180Z  time="2018-05-16 13:18:48.85064" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:18:48.853242626Z  time="2018-05-16 13:18:48.85066" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:18:48.853245059Z  time="2018-05-16 13:18:48.85067" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:18:48.853247475Z  time="2018-05-16 13:18:48.85069" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:18:48.853249905Z  time="2018-05-16 13:18:48.85071" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:18:48.853256023Z  time="2018-05-16 13:18:48.85073" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:18:48.853258901Z  time="2018-05-16 13:18:48.85075" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:18:48.853261349Z  time="2018-05-16 13:18:48.85077" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:18:48.853263742Z  time="2018-05-16 13:18:48.85078" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:18:48.853266157Z  time="2018-05-16 13:18:48.85080" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:18:48.853268590Z  
2018-05-16T13:18:58.852412126Z  2018-05-16 13:18:58,852 DEBG 'agent' stdout output:
2018-05-16T13:18:58.852425416Z  time="2018-05-16 13:18:58.85136" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:18:58.852428809Z  time="2018-05-16 13:18:58.85140" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:18:58.852431540Z  time="2018-05-16 13:18:58.85142" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:18:58.852434290Z  time="2018-05-16 13:18:58.85144" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:18:58.852436901Z  time="2018-05-16 13:18:58.85146" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:18:58.852439448Z  time="2018-05-16 13:18:58.85148" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:18:58.852442002Z  time="2018-05-16 13:18:58.85150" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:18:58.852444517Z  time="2018-05-16 13:18:58.85152" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:18:58.852447060Z  time="2018-05-16 13:18:58.85154" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:18:58.852449631Z  time="2018-05-16 13:18:58.85155" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:18:58.852459443Z  time="2018-05-16 13:18:58.85157" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:18:58.852462381Z  time="2018-05-16 13:18:58.85162" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:18:58.852464879Z  time="2018-05-16 13:18:58.85164" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:18:58.852467366Z  time="2018-05-16 13:18:58.85166" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:18:58.852469875Z  time="2018-05-16 13:18:58.85168" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:18:58.852472361Z  time="2018-05-16 13:18:58.85170" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:18:58.852474887Z  
2018-05-16T13:18:58.853183566Z  2018-05-16 13:18:58,852 DEBG 'agent' stdout output:
2018-05-16T13:18:58.853191902Z  time="2018-05-16 13:18:58.85257" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:18:58.853195165Z  time="2018-05-16 13:18:58.85261" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:18:58.853197876Z  time="2018-05-16 13:18:58.85263" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:18:58.853200500Z  time="2018-05-16 13:18:58.85265" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:18:58.853203303Z  time="2018-05-16 13:18:58.85267" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:18:58.853206017Z  
2018-05-16T13:18:58.853769013Z  2018-05-16 13:18:58,853 DEBG 'agent' stdout output:
2018-05-16T13:18:58.853777239Z  time="2018-05-16 13:18:58.85323" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:18:58.853780301Z  time="2018-05-16 13:18:58.85327" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:18:58.853788605Z  
2018-05-16T13:19:05.959704271Z  2018-05-16 13:19:05,959 DEBG 'vpp' stdout output:
2018-05-16T13:19:05.959719098Z  /usr/bin/vpp[6581]: show interface: unknown input `None
2018-05-16T13:19:05.959722449Z  
2018-05-16T13:19:05.959743816Z  /usr/bin/vpp[6581]: show interface: unknown input `None
2018-05-16T13:19:08.850821591Z  2018-05-16 13:19:08,850 DEBG 'agent' stdout output:
2018-05-16T13:19:08.850834938Z  time="2018-05-16 13:19:08.84977" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:08.850838518Z  time="2018-05-16 13:19:08.84981" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:08.850841433Z  time="2018-05-16 13:19:08.84983" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:08.850844170Z  time="2018-05-16 13:19:08.84985" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:08.850846904Z  time="2018-05-16 13:19:08.84987" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:08.850849615Z  time="2018-05-16 13:19:08.84989" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:08.850852383Z  time="2018-05-16 13:19:08.84991" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:08.850855009Z  time="2018-05-16 13:19:08.84993" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:08.850857616Z  time="2018-05-16 13:19:08.84994" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:08.850860271Z  time="2018-05-16 13:19:08.84996" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:08.850863682Z  time="2018-05-16 13:19:08.84998" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:08.850866427Z  time="2018-05-16 13:19:08.85000" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:08.850869059Z  time="2018-05-16 13:19:08.85004" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:08.850877502Z  time="2018-05-16 13:19:08.85006" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:08.850880357Z  time="2018-05-16 13:19:08.85008" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:08.850882820Z  time="2018-05-16 13:19:08.85010" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:08.850885242Z  time="2018-05-16 13:19:08.85013" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:08.850887672Z  time="2018-05-16 13:19:08.85015" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:08.850890101Z  time="2018-05-16 13:19:08.85017" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:08.850892533Z  time="2018-05-16 13:19:08.85021" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:08.850943188Z  time="2018-05-16 13:19:08.85023" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:08.851786019Z  time="2018-05-16 13:19:08.85025" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:08.851793691Z  time="2018-05-16 13:19:08.85027" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:08.851796440Z  
2018-05-16T13:19:08.988077434Z  2018-05-16 13:19:08,987 DEBG 'vpp' stdout output:
2018-05-16T13:19:08.988144607Z  /usr/bin/vpp[6581]: show interface: unknown input `None
2018-05-16T13:19:08.988150853Z  
2018-05-16T13:19:08.988153306Z  /usr/bin/vpp[6581]: show interface: unknown input `None
2018-05-16T13:19:18.861176164Z  2018-05-16 13:19:18,860 DEBG 'agent' stdout output:
2018-05-16T13:19:18.861190743Z  time="2018-05-16 13:19:18.85633" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:18.861194417Z  time="2018-05-16 13:19:18.85644" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:18.861197180Z  time="2018-05-16 13:19:18.85651" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:18.861206149Z  time="2018-05-16 13:19:18.85656" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:18.861209124Z  time="2018-05-16 13:19:18.85663" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:18.861211683Z  time="2018-05-16 13:19:18.85669" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:18.861214314Z  time="2018-05-16 13:19:18.85674" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:18.861216946Z  time="2018-05-16 13:19:18.85678" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:18.861219481Z  time="2018-05-16 13:19:18.85683" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:18.861222116Z  time="2018-05-16 13:19:18.85687" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:18.861225454Z  time="2018-05-16 13:19:18.85690" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:18.861228029Z  time="2018-05-16 13:19:18.85696" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:18.861230508Z  time="2018-05-16 13:19:18.85701" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:18.861233014Z  time="2018-05-16 13:19:18.85706" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:18.861235502Z  time="2018-05-16 13:19:18.85710" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:18.861238039Z  
2018-05-16T13:19:18.862108234Z  2018-05-16 13:19:18,861 DEBG 'agent' stdout output:
2018-05-16T13:19:18.862116416Z  time="2018-05-16 13:19:18.86089" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:18.862119511Z  time="2018-05-16 13:19:18.86093" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:18.862126943Z  time="2018-05-16 13:19:18.86096" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:18.862129874Z  time="2018-05-16 13:19:18.86098" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:18.862132753Z  time="2018-05-16 13:19:18.86100" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:18.862135193Z  time="2018-05-16 13:19:18.86102" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:18.862137664Z  
2018-05-16T13:19:18.862139749Z  2018-05-16 13:19:18,861 DEBG 'agent' stdout output:
2018-05-16T13:19:18.862141962Z  time="2018-05-16 13:19:18.86153" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:18.862144453Z  time="2018-05-16 13:19:18.86157" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:18.862146968Z  
2018-05-16T13:19:22.197114600Z  2018-05-16 13:19:22,196 DEBG 'vpp' stdout output:
2018-05-16T13:19:22.197128230Z  /usr/bin/vpp[6581]: show interface: unknown input `None
2018-05-16T13:19:22.197131208Z  
2018-05-16T13:19:22.197133590Z  /usr/bin/vpp[6581]: show interface: unknown input `None
2018-05-16T13:19:25.227736531Z  2018-05-16 13:19:25,227 DEBG 'vpp' stdout output:
2018-05-16T13:19:25.227763611Z  /usr/bin/vpp[6581]: show interface: unknown input `None
2018-05-16T13:19:25.227766603Z  
2018-05-16T13:19:25.227768912Z  /usr/bin/vpp[6581]: show interface: unknown input `None
2018-05-16T13:19:28.862840094Z  2018-05-16 13:19:28,862 DEBG 'agent' stdout output:
2018-05-16T13:19:28.862853062Z  time="2018-05-16 13:19:28.85998" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:28.862856591Z  time="2018-05-16 13:19:28.86001" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:28.862859329Z  time="2018-05-16 13:19:28.86004" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:28.862861900Z  time="2018-05-16 13:19:28.86005" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:28.862864584Z  time="2018-05-16 13:19:28.86007" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:28.862872670Z  time="2018-05-16 13:19:28.86009" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:28.862875541Z  time="2018-05-16 13:19:28.86011" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:28.862877965Z  time="2018-05-16 13:19:28.86013" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:28.862880464Z  time="2018-05-16 13:19:28.86015" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:28.862882906Z  time="2018-05-16 13:19:28.86017" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:28.862886047Z  time="2018-05-16 13:19:28.86018" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:28.862888586Z  time="2018-05-16 13:19:28.86020" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:28.862890994Z  
2018-05-16T13:19:28.863792685Z  2018-05-16 13:19:28,863 DEBG 'agent' stdout output:
2018-05-16T13:19:28.863800674Z  time="2018-05-16 13:19:28.86299" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:28.864331739Z  time="2018-05-16 13:19:28.86303" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:28.864339840Z  time="2018-05-16 13:19:28.86305" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:28.864342899Z  time="2018-05-16 13:19:28.86307" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:28.864345501Z  time="2018-05-16 13:19:28.86309" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:28.864348080Z  time="2018-05-16 13:19:28.86311" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:28.864350616Z  time="2018-05-16 13:19:28.86313" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:28.864358006Z  time="2018-05-16 13:19:28.86315" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:28.864360861Z  time="2018-05-16 13:19:28.86317" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:28.864363404Z  time="2018-05-16 13:19:28.86318" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:28.864365878Z  time="2018-05-16 13:19:28.86320" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:28.864368366Z  
2018-05-16T13:19:28.869893330Z  2018-05-16 13:19:28,866 DEBG 'agent' stdout output:
2018-05-16T13:19:28.869903705Z  time="2018-05-16 13:19:28.86392" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:28.869907461Z  time="2018-05-16 13:19:28.86394" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:28.869910253Z  time="2018-05-16 13:19:28.86397" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:28.869912836Z  time="2018-05-16 13:19:28.86398" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:28.869915326Z  time="2018-05-16 13:19:28.86400" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:28.869917780Z  time="2018-05-16 13:19:28.86402" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:28.869920287Z  time="2018-05-16 13:19:28.86404" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:28.869922777Z  time="2018-05-16 13:19:28.86406" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:28.869925232Z  time="2018-05-16 13:19:28.86408" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:28.869927676Z  time="2018-05-16 13:19:28.86410" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:28.869935322Z  time="2018-05-16 13:19:28.86411" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:28.869938274Z  time="2018-05-16 13:19:28.86413" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:28.869940735Z  time="2018-05-16 13:19:28.86415" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:28.869943191Z  time="2018-05-16 13:19:28.86417" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:28.869945652Z  
2018-05-16T13:19:28.942519292Z  2018-05-16 13:19:28,941 DEBG 'agent' stdout output:
2018-05-16T13:19:28.942530553Z  time="2018-05-16 13:19:28.94130" level=debug msg="Start processing change for key: vpp/config/v1/bd/bd2" loc="defaultplugins/data_change.go(39)" logger=default-plugins
2018-05-16T13:19:28.942533907Z  time="2018-05-16 13:19:28.94139" level=debug msg="dataChangeBD false Put name:\"bd2\" flood:true unknown_unicast_flood:true forward:true learn:true arp_termination:true interfaces:&lt;name:\"loop0\" &gt; interfaces:&lt;name:\"loop1\" &gt;  " loc="defaultplugins/data_change.go(388)" logger=default-plugins
2018-05-16T13:19:28.942538438Z  
2018-05-16T13:19:28.942540605Z  2018-05-16 13:19:28,942 DEBG 'agent' stdout output:
2018-05-16T13:19:28.942542851Z  time="2018-05-16 13:19:28.94214" level=info msg="Configuring VPP Bridge Domain bd2" loc="l2plugin/bd_config.go(100)" logger=default-plugins-l2-bd-conf
2018-05-16T13:19:28.942545410Z  time="2018-05-16 13:19:28.94219" level=debug msg="Bridge domain bd2 does not contain any bvi interface" loc="l2plugin/bd_config.go(346)" logger=default-plugins-l2-bd-conf
2018-05-16T13:19:28.942548112Z  
2018-05-16T13:19:28.944516683Z  2018-05-16 13:19:28,944 DEBG 'agent' stdout output:
2018-05-16T13:19:28.944525120Z  time="2018-05-16 13:19:28.94401" level=debug msg="Interface set to bridge domain" BD=bd2 Interface=loop0 loc="vppcalls/interface_vppcalls.go(70)" logger=default-plugins-l2-bd-conf
2018-05-16T13:19:28.944528337Z  
2018-05-16T13:19:28.945569810Z  2018-05-16 13:19:28,945 DEBG 'agent' stdout output:
2018-05-16T13:19:28.945577724Z  time="2018-05-16 13:19:28.94502" level=debug msg="Interface set to bridge domain" BD=bd2 Interface=loop1 loc="vppcalls/interface_vppcalls.go(70)" logger=default-plugins-l2-bd-conf
2018-05-16T13:19:28.945580836Z  time="2018-05-16 13:19:28.94506" level=debug msg="No ARP termination entries to set" Bridge domain name=bd2 loc="l2plugin/bd_config.go(133)" logger=default-plugins-l2-bd-conf
2018-05-16T13:19:28.945583478Z  time="2018-05-16 13:19:28.94511" level=debug msg="publish write to bdplugin_bdstate{{default-plugins bd2 false bd_indexes} 0xc420488600}" loc="mem/inmemory_name_mapping.go(245)" logger=default-plugins-l2-bd-conf
2018-05-16T13:19:28.945586085Z  time="2018-05-16 13:19:28.94515" level=debug msg="publish write to default-plugins{{default-plugins bd2 false bd_indexes} 0xc420488600}" loc="mem/inmemory_name_mapping.go(245)" logger=default-plugins-l2-bd-conf
2018-05-16T13:19:28.945596730Z  time="2018-05-16 13:19:28.94518" level=debug msg="Bridge domain registered" Index=3 Name=bd2 loc="l2plugin/bd_config.go(138)" logger=default-plugins-l2-bd-conf
2018-05-16T13:19:28.945599486Z  
2018-05-16T13:19:28.948040815Z  2018-05-16 13:19:28,946 DEBG 'agent' stdout output:
2018-05-16T13:19:28.948052518Z  time="2018-05-16 13:19:28.94607" level=info msg="Bridge domain bd2 configured" bdIdx=3 loc="l2plugin/bd_config.go(147)" logger=default-plugins-l2-bd-conf
2018-05-16T13:19:28.948055799Z  time="2018-05-16 13:19:28.94610" level=info msg="FIB configurator: resolving registered bridge domain bd2" loc="l2plugin/fib_config.go(300)" logger=default-plugins-l2-fib-conf
2018-05-16T13:19:28.948058411Z  time="2018-05-16 13:19:28.94613" level=info msg="FIB: resolution of created bridge domain bd2 is done" loc="l2plugin/fib_config.go(358)" logger=default-plugins-l2-fib-conf
2018-05-16T13:19:28.948060922Z  
2018-05-16T13:19:28.948063034Z  2018-05-16 13:19:28,947 DEBG 'agent' stdout output:
2018-05-16T13:19:28.948065828Z  time="2018-05-16 13:19:28.94768" level=debug msg="Bridge domain bd2: state stored in ETCD" loc="defaultplugins/publish.go(146)" logger=default-plugins
2018-05-16T13:19:28.948068356Z  
2018-05-16T13:19:38.862247835Z  2018-05-16 13:19:38,861 DEBG 'agent' stdout output:
2018-05-16T13:19:38.862265756Z  time="2018-05-16 13:19:38.86020" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:38.862270550Z  time="2018-05-16 13:19:38.86025" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:38.862274387Z  time="2018-05-16 13:19:38.86029" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:38.862278172Z  time="2018-05-16 13:19:38.86033" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:38.862281826Z  time="2018-05-16 13:19:38.86037" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:38.862285436Z  time="2018-05-16 13:19:38.86040" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:38.862288938Z  time="2018-05-16 13:19:38.86043" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:38.862292497Z  time="2018-05-16 13:19:38.86047" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:38.862302575Z  time="2018-05-16 13:19:38.86050" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:38.862306425Z  time="2018-05-16 13:19:38.86053" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:38.862310941Z  time="2018-05-16 13:19:38.86056" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:38.862314568Z  time="2018-05-16 13:19:38.86059" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:38.862318016Z  time="2018-05-16 13:19:38.86062" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:38.862321436Z  time="2018-05-16 13:19:38.86065" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:38.862324859Z  time="2018-05-16 13:19:38.86068" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:38.862328331Z  time="2018-05-16 13:19:38.86071" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:38.862331799Z  time="2018-05-16 13:19:38.86074" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:38.862335220Z  time="2018-05-16 13:19:38.86077" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:38.862338694Z  time="2018-05-16 13:19:38.86081" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:38.862342174Z  time="2018-05-16 13:19:38.86084" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:38.862346019Z  time="2018-05-16 13:19:38.86087" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:38.862349542Z  time="2018-05-16 13:19:38.86091" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:38.862352958Z  time="2018-05-16 13:19:38.86094" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:38.862358922Z  time="2018-05-16 13:19:38.86097" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:38.862362562Z  time="2018-05-16 13:19:38.86101" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:38.862366033Z  time="2018-05-16 13:19:38.86104" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:38.862369515Z  
2018-05-16T13:19:38.864116391Z  2018-05-16 13:19:38,862 DEBG 'agent' stdout output:
2018-05-16T13:19:38.864128871Z  time="2018-05-16 13:19:38.86200" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:38.864133450Z  
2018-05-16T13:19:38.866097719Z  2018-05-16 13:19:38,865 DEBG 'agent' stdout output:
2018-05-16T13:19:38.866111738Z  time="2018-05-16 13:19:38.86327" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:38.866116834Z  time="2018-05-16 13:19:38.86331" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:38.866120682Z  time="2018-05-16 13:19:38.86334" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:38.866124377Z  time="2018-05-16 13:19:38.86337" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:38.866127830Z  time="2018-05-16 13:19:38.86340" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:38.866131408Z  time="2018-05-16 13:19:38.86342" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:38.866134948Z  time="2018-05-16 13:19:38.86345" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:38.866138643Z  time="2018-05-16 13:19:38.86348" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:38.866144093Z  time="2018-05-16 13:19:38.86374" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:38.866147776Z  time="2018-05-16 13:19:38.86380" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:38.866159334Z  time="2018-05-16 13:19:38.86383" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:38.866163429Z  time="2018-05-16 13:19:38.86387" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:38.866166926Z  time="2018-05-16 13:19:38.86390" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:38.866170408Z  time="2018-05-16 13:19:38.86393" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:38.866173908Z  time="2018-05-16 13:19:38.86396" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:38.866177479Z  
2018-05-16T13:19:48.864385609Z  2018-05-16 13:19:48,863 DEBG 'agent' stdout output:
2018-05-16T13:19:48.864400963Z  time="2018-05-16 13:19:48.86236" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:48.864404571Z  time="2018-05-16 13:19:48.86240" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:48.864407428Z  time="2018-05-16 13:19:48.86242" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:48.864410277Z  time="2018-05-16 13:19:48.86244" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:48.864413002Z  time="2018-05-16 13:19:48.86246" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:48.864415704Z  time="2018-05-16 13:19:48.86247" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:48.864418395Z  time="2018-05-16 13:19:48.86250" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:48.864421104Z  time="2018-05-16 13:19:48.86251" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:48.864423777Z  time="2018-05-16 13:19:48.86253" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:48.864430597Z  time="2018-05-16 13:19:48.86255" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:48.864433912Z  time="2018-05-16 13:19:48.86257" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:48.864436477Z  time="2018-05-16 13:19:48.86258" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:48.864438897Z  time="2018-05-16 13:19:48.86261" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:48.864441353Z  time="2018-05-16 13:19:48.86262" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:48.864443923Z  time="2018-05-16 13:19:48.86264" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:48.864446386Z  time="2018-05-16 13:19:48.86266" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:48.864448792Z  time="2018-05-16 13:19:48.86268" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:48.864451242Z  time="2018-05-16 13:19:48.86269" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:48.864453671Z  time="2018-05-16 13:19:48.86271" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:48.864456143Z  time="2018-05-16 13:19:48.86273" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:48.864458536Z  time="2018-05-16 13:19:48.86275" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:48.864461178Z  time="2018-05-16 13:19:48.86277" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:48.864463659Z  time="2018-05-16 13:19:48.86279" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:48.864466085Z  time="2018-05-16 13:19:48.86281" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:48.864470486Z  time="2018-05-16 13:19:48.86283" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:48.864473034Z  time="2018-05-16 13:19:48.86284" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:48.864475447Z  time="2018-05-16 13:19:48.86286" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:48.864477866Z  time="2018-05-16 13:19:48.86288" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:48.864480291Z  time="2018-05-16 13:19:48.86290" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:48.864482697Z  time="2018-05-16 13:19:48.86291" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:48.864485090Z  time="2018-05-16 13:19:48.86293" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:48.864487973Z  time="2018-05-16 13:19:48.86295" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:48.864490476Z  time="2018-05-16 13:19:48.86297" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:48.864492865Z  time="2018-05-16 13:19:48.86299" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:48.864495268Z  time="2018-05-16 13:19:48.86301" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:48.864497665Z  time="2018-05-16 13:19:48.86302" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:48.864500094Z  time="2018-05-16 13:19:48.86304" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:48.864502503Z  time="2018-05-16 13:19:48.86306" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:48.864504902Z  time="2018-05-16 13:19:48.86308" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:48.864510262Z  time="2018-05-16 13:19:48.86310" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:48.864512897Z  time="2018-05-16 13:19:48.86311" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:48.864515308Z  time="2018-05-16 13:19:48.86313" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:48.864517730Z  
2018-05-16T13:19:58.863533737Z  2018-05-16 13:19:58,862 DEBG 'agent' stdout output:
2018-05-16T13:19:58.863551701Z  time="2018-05-16 13:19:58.86158" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:58.863556662Z  time="2018-05-16 13:19:58.86162" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:58.863560579Z  time="2018-05-16 13:19:58.86165" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:58.863564266Z  time="2018-05-16 13:19:58.86168" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:58.863567833Z  time="2018-05-16 13:19:58.86171" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:58.863571492Z  time="2018-05-16 13:19:58.86173" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:58.863575078Z  time="2018-05-16 13:19:58.86176" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:58.863578595Z  time="2018-05-16 13:19:58.86179" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:58.863582564Z  time="2018-05-16 13:19:58.86182" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:58.863586014Z  time="2018-05-16 13:19:58.86184" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:58.863590343Z  time="2018-05-16 13:19:58.86187" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:58.863593918Z  time="2018-05-16 13:19:58.86189" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:58.863603760Z  time="2018-05-16 13:19:58.86192" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:58.863607763Z  time="2018-05-16 13:19:58.86194" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:58.863611235Z  time="2018-05-16 13:19:58.86197" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:58.863614710Z  time="2018-05-16 13:19:58.86200" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:58.863618133Z  time="2018-05-16 13:19:58.86202" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:58.863621532Z  time="2018-05-16 13:19:58.86204" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:58.863624934Z  time="2018-05-16 13:19:58.86207" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:58.863628340Z  time="2018-05-16 13:19:58.86210" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:58.863631793Z  time="2018-05-16 13:19:58.86212" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:58.863635726Z  time="2018-05-16 13:19:58.86215" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:58.863639305Z  time="2018-05-16 13:19:58.86218" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:58.863642719Z  time="2018-05-16 13:19:58.86220" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:58.863646131Z  time="2018-05-16 13:19:58.86223" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:58.863649568Z  time="2018-05-16 13:19:58.86226" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:58.863652972Z  time="2018-05-16 13:19:58.86228" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:58.863658884Z  time="2018-05-16 13:19:58.86231" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:58.863662504Z  time="2018-05-16 13:19:58.86233" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:58.863665955Z  time="2018-05-16 13:19:58.86236" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:58.863669428Z  time="2018-05-16 13:19:58.86239" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:58.863672878Z  
2018-05-16T13:19:58.864478954Z  2018-05-16 13:19:58,863 DEBG 'agent' stdout output:
2018-05-16T13:19:58.864489978Z  time="2018-05-16 13:19:58.86330" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:58.864494417Z  time="2018-05-16 13:19:58.86334" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:58.864498024Z  time="2018-05-16 13:19:58.86337" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:58.864501647Z  
2018-05-16T13:19:58.864504723Z  2018-05-16 13:19:58,864 DEBG 'agent' stdout output:
2018-05-16T13:19:58.864507897Z  time="2018-05-16 13:19:58.86395" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:58.864511409Z  time="2018-05-16 13:19:58.86399" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:58.864514898Z  time="2018-05-16 13:19:58.86402" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:58.864518362Z  time="2018-05-16 13:19:58.86405" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:58.864521984Z  time="2018-05-16 13:19:58.86408" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:58.865455067Z  time="2018-05-16 13:19:58.86410" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:58.865465948Z  time="2018-05-16 13:19:58.86413" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:58.865476274Z  time="2018-05-16 13:19:58.86415" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:19:58.865480322Z  
2018-05-16T13:20:08.871000551Z  2018-05-16 13:20:08,870 DEBG 'agent' stdout output:
2018-05-16T13:20:08.871015506Z  time="2018-05-16 13:20:08.86727" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:08.871019144Z  time="2018-05-16 13:20:08.86736" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:08.871021836Z  time="2018-05-16 13:20:08.86742" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:08.871024572Z  time="2018-05-16 13:20:08.86748" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:08.871027272Z  time="2018-05-16 13:20:08.86753" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:08.871029884Z  time="2018-05-16 13:20:08.86758" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:08.871032489Z  time="2018-05-16 13:20:08.86764" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:08.871035071Z  time="2018-05-16 13:20:08.86769" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:08.871037603Z  time="2018-05-16 13:20:08.86774" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:08.871040110Z  time="2018-05-16 13:20:08.86780" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:08.871043581Z  time="2018-05-16 13:20:08.86785" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:08.871046263Z  time="2018-05-16 13:20:08.86795" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:08.871049279Z  time="2018-05-16 13:20:08.86801" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:08.871056704Z  time="2018-05-16 13:20:08.86806" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:08.871059574Z  time="2018-05-16 13:20:08.86812" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:08.871062124Z  time="2018-05-16 13:20:08.86817" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:08.871064645Z  time="2018-05-16 13:20:08.86821" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:08.871067141Z  time="2018-05-16 13:20:08.86824" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:08.871069688Z  time="2018-05-16 13:20:08.86829" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:08.871072210Z  time="2018-05-16 13:20:08.86833" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:08.871074978Z  time="2018-05-16 13:20:08.86836" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:08.871077540Z  time="2018-05-16 13:20:08.86840" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:08.871080054Z  time="2018-05-16 13:20:08.86844" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:08.871082547Z  time="2018-05-16 13:20:08.86848" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:08.871085046Z  time="2018-05-16 13:20:08.86852" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:08.871087525Z  time="2018-05-16 13:20:08.86856" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:08.871090040Z  time="2018-05-16 13:20:08.86860" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:08.871092550Z  time="2018-05-16 13:20:08.86864" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:08.871097190Z  time="2018-05-16 13:20:08.86867" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:08.871099870Z  time="2018-05-16 13:20:08.86871" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:08.871102414Z  time="2018-05-16 13:20:08.86875" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:08.871105371Z  time="2018-05-16 13:20:08.86879" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:08.871107996Z  time="2018-05-16 13:20:08.86919" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:08.871110524Z  time="2018-05-16 13:20:08.86928" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:08.871113023Z  time="2018-05-16 13:20:08.86930" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:08.871115523Z  time="2018-05-16 13:20:08.86933" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:08.871118035Z  time="2018-05-16 13:20:08.86936" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:08.871120785Z  time="2018-05-16 13:20:08.86941" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:08.871123283Z  time="2018-05-16 13:20:08.86943" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:08.871125780Z  time="2018-05-16 13:20:08.86945" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:08.871128294Z  time="2018-05-16 13:20:08.86948" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:08.871165576Z  time="2018-05-16 13:20:08.86950" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:08.871170383Z  
2018-05-16T13:20:18.870495836Z  2018-05-16 13:20:18,869 DEBG 'agent' stdout output:
2018-05-16T13:20:18.870515273Z  time="2018-05-16 13:20:18.86847" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:18.870518885Z  time="2018-05-16 13:20:18.86850" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:18.870521553Z  time="2018-05-16 13:20:18.86852" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:18.870524228Z  time="2018-05-16 13:20:18.86854" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:18.870526779Z  time="2018-05-16 13:20:18.86856" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:18.870529296Z  time="2018-05-16 13:20:18.86858" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:18.870531767Z  time="2018-05-16 13:20:18.86860" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:18.870534241Z  time="2018-05-16 13:20:18.86862" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:18.870536714Z  time="2018-05-16 13:20:18.86864" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:18.870539212Z  time="2018-05-16 13:20:18.86866" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:18.870542445Z  time="2018-05-16 13:20:18.86867" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:18.870545047Z  time="2018-05-16 13:20:18.86869" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:18.870547504Z  time="2018-05-16 13:20:18.86871" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:18.870549972Z  time="2018-05-16 13:20:18.86873" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:18.870552434Z  time="2018-05-16 13:20:18.86875" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:18.870554876Z  time="2018-05-16 13:20:18.86877" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:18.870559311Z  time="2018-05-16 13:20:18.86878" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:18.870561869Z  time="2018-05-16 13:20:18.86880" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:18.870564301Z  time="2018-05-16 13:20:18.86882" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:18.870567197Z  time="2018-05-16 13:20:18.86884" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:18.870569893Z  time="2018-05-16 13:20:18.86886" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:18.870572458Z  time="2018-05-16 13:20:18.86887" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:18.870574904Z  time="2018-05-16 13:20:18.86890" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:18.870577329Z  time="2018-05-16 13:20:18.86891" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:18.870579820Z  time="2018-05-16 13:20:18.86893" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:18.870582318Z  time="2018-05-16 13:20:18.86895" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:18.870584806Z  time="2018-05-16 13:20:18.86897" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:18.870587262Z  time="2018-05-16 13:20:18.86899" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:18.870589723Z  time="2018-05-16 13:20:18.86901" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:18.870592180Z  time="2018-05-16 13:20:18.86902" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:18.870594627Z  time="2018-05-16 13:20:18.86904" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:18.870599255Z  time="2018-05-16 13:20:18.86906" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:18.870601952Z  time="2018-05-16 13:20:18.86908" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:18.870604408Z  time="2018-05-16 13:20:18.86910" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:18.870606836Z  time="2018-05-16 13:20:18.86911" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:18.870609264Z  time="2018-05-16 13:20:18.86913" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:18.870611669Z  time="2018-05-16 13:20:18.86915" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:18.870614107Z  time="2018-05-16 13:20:18.86917" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:18.870616530Z  time="2018-05-16 13:20:18.86919" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:18.870618991Z  time="2018-05-16 13:20:18.86920" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:18.870621426Z  time="2018-05-16 13:20:18.86922" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:18.870659581Z  time="2018-05-16 13:20:18.86924" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:18.870664167Z  
2018-05-16T13:20:28.867608326Z  2018-05-16 13:20:28,867 DEBG 'agent' stdout output:
2018-05-16T13:20:28.867637075Z  time="2018-05-16 13:20:28.86609" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:28.867640790Z  time="2018-05-16 13:20:28.86613" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:28.867643723Z  time="2018-05-16 13:20:28.86615" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:28.867653068Z  time="2018-05-16 13:20:28.86617" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:28.867656070Z  time="2018-05-16 13:20:28.86619" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:28.867658583Z  time="2018-05-16 13:20:28.86621" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:28.867661076Z  time="2018-05-16 13:20:28.86623" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:28.867663549Z  time="2018-05-16 13:20:28.86625" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:28.867666000Z  time="2018-05-16 13:20:28.86627" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:28.867668496Z  time="2018-05-16 13:20:28.86628" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:28.867671692Z  time="2018-05-16 13:20:28.86630" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:28.867674210Z  time="2018-05-16 13:20:28.86632" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:28.867676670Z  time="2018-05-16 13:20:28.86634" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:28.867679087Z  time="2018-05-16 13:20:28.86636" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:28.867681563Z  time="2018-05-16 13:20:28.86638" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:28.867684012Z  time="2018-05-16 13:20:28.86639" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:28.867686436Z  time="2018-05-16 13:20:28.86641" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:28.867688848Z  time="2018-05-16 13:20:28.86643" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:28.868050141Z  time="2018-05-16 13:20:28.86645" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:28.868057827Z  time="2018-05-16 13:20:28.86649" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:28.868060672Z  time="2018-05-16 13:20:28.86651" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:28.868063258Z  time="2018-05-16 13:20:28.86653" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:28.868084952Z  time="2018-05-16 13:20:28.86655" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:28.868087616Z  time="2018-05-16 13:20:28.86657" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:28.868090204Z  time="2018-05-16 13:20:28.86659" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:28.868106656Z  time="2018-05-16 13:20:28.86661" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:28.868109492Z  time="2018-05-16 13:20:28.86663" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:28.868112101Z  time="2018-05-16 13:20:28.86664" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:28.868114670Z  time="2018-05-16 13:20:28.86666" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:28.868117784Z  time="2018-05-16 13:20:28.86668" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:28.868121034Z  time="2018-05-16 13:20:28.86670" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:28.868123641Z  time="2018-05-16 13:20:28.86672" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:28.868126242Z  time="2018-05-16 13:20:28.86674" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:28.868133642Z  time="2018-05-16 13:20:28.86676" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:28.868136576Z  time="2018-05-16 13:20:28.86678" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:28.868139224Z  time="2018-05-16 13:20:28.86679" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:28.868141848Z  time="2018-05-16 13:20:28.86681" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:28.868144435Z  time="2018-05-16 13:20:28.86683" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:28.868147042Z  time="2018-05-16 13:20:28.86687" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:28.868149627Z  time="2018-05-16 13:20:28.86689" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:28.868187108Z  time="2018-05-16 13:20:28.86697" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:28.868191993Z  time="2018-05-16 13:20:28.86699" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:28.868208729Z  
2018-05-16T13:20:38.870753339Z  2018-05-16 13:20:38,870 DEBG 'agent' stdout output:
2018-05-16T13:20:38.870766939Z  time="2018-05-16 13:20:38.86268" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:38.870770289Z  time="2018-05-16 13:20:38.86272" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:38.870773009Z  time="2018-05-16 13:20:38.86274" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:38.870775582Z  time="2018-05-16 13:20:38.86276" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:38.870778108Z  time="2018-05-16 13:20:38.86278" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:38.870780612Z  time="2018-05-16 13:20:38.86280" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:38.870789080Z  time="2018-05-16 13:20:38.86282" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:38.870791889Z  time="2018-05-16 13:20:38.86284" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:38.870794391Z  time="2018-05-16 13:20:38.86286" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:38.870796895Z  time="2018-05-16 13:20:38.86288" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:38.870800127Z  time="2018-05-16 13:20:38.86290" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:38.870802603Z  time="2018-05-16 13:20:38.86291" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:38.870805006Z  time="2018-05-16 13:20:38.86294" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:38.870807425Z  time="2018-05-16 13:20:38.86296" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:38.870809859Z  time="2018-05-16 13:20:38.86297" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:38.870812679Z  time="2018-05-16 13:20:38.86299" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:38.870815123Z  time="2018-05-16 13:20:38.86301" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:38.870817551Z  time="2018-05-16 13:20:38.86303" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:38.871382111Z  time="2018-05-16 13:20:38.86305" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:38.871391746Z  time="2018-05-16 13:20:38.86306" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:38.871395912Z  time="2018-05-16 13:20:38.86308" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:38.871424757Z  time="2018-05-16 13:20:38.86310" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:38.871429082Z  time="2018-05-16 13:20:38.86314" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:38.871450383Z  time="2018-05-16 13:20:38.86316" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:38.871453809Z  time="2018-05-16 13:20:38.86319" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:38.871457174Z  time="2018-05-16 13:20:38.86320" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:38.871481537Z  time="2018-05-16 13:20:38.86322" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:38.871485089Z  time="2018-05-16 13:20:38.86324" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:38.871507024Z  time="2018-05-16 13:20:38.86326" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:38.871511192Z  time="2018-05-16 13:20:38.86328" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:38.871514757Z  time="2018-05-16 13:20:38.86330" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:38.871539349Z  time="2018-05-16 13:20:38.86331" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:38.871543081Z  time="2018-05-16 13:20:38.86333" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:38.871566039Z  time="2018-05-16 13:20:38.86335" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:38.871569864Z  time="2018-05-16 13:20:38.86337" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:38.871573361Z  time="2018-05-16 13:20:38.86356" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:38.871595316Z  time="2018-05-16 13:20:38.86361" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:38.871620263Z  time="2018-05-16 13:20:38.86370" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:38.871762502Z  time="2018-05-16 13:20:38.86372" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:38.871766713Z  time="2018-05-16 13:20:38.86376" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:38.871792461Z  time="2018-05-16 13:20:38.86378" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:38.871796174Z  time="2018-05-16 13:20:38.86380" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:38.871816206Z  
2018-05-16T13:20:48.868514594Z  2018-05-16 13:20:48,867 DEBG 'agent' stdout output:
2018-05-16T13:20:48.868530156Z  time="2018-05-16 13:20:48.86350" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:48.868533787Z  time="2018-05-16 13:20:48.86354" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:48.868536483Z  time="2018-05-16 13:20:48.86356" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:48.868539109Z  time="2018-05-16 13:20:48.86358" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:48.868541720Z  time="2018-05-16 13:20:48.86359" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:48.868544367Z  time="2018-05-16 13:20:48.86361" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:48.868546963Z  time="2018-05-16 13:20:48.86363" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:48.868549832Z  time="2018-05-16 13:20:48.86365" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:48.868561681Z  time="2018-05-16 13:20:48.86367" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:48.868564639Z  time="2018-05-16 13:20:48.86369" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:48.868567915Z  time="2018-05-16 13:20:48.86371" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:48.868570496Z  time="2018-05-16 13:20:48.86372" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:48.868573001Z  time="2018-05-16 13:20:48.86374" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:48.868575572Z  time="2018-05-16 13:20:48.86376" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:48.868578071Z  time="2018-05-16 13:20:48.86378" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:48.868580538Z  time="2018-05-16 13:20:48.86380" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:48.868583030Z  time="2018-05-16 13:20:48.86382" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:48.868585532Z  time="2018-05-16 13:20:48.86383" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:48.868588039Z  time="2018-05-16 13:20:48.86385" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:48.868590506Z  time="2018-05-16 13:20:48.86387" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:48.868592953Z  time="2018-05-16 13:20:48.86389" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:48.868635069Z  time="2018-05-16 13:20:48.86391" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:48.868639841Z  time="2018-05-16 13:20:48.86707" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:48.868645371Z  time="2018-05-16 13:20:48.86710" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:48.868648159Z  time="2018-05-16 13:20:48.86713" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:48.868650692Z  time="2018-05-16 13:20:48.86715" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:48.868653183Z  time="2018-05-16 13:20:48.86717" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:48.868655680Z  time="2018-05-16 13:20:48.86719" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:48.868658185Z  time="2018-05-16 13:20:48.86721" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:48.868660706Z  time="2018-05-16 13:20:48.86722" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:48.868663237Z  time="2018-05-16 13:20:48.86725" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:48.868666086Z  time="2018-05-16 13:20:48.86726" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:48.868668690Z  time="2018-05-16 13:20:48.86728" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:48.868671223Z  time="2018-05-16 13:20:48.86730" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:48.868673774Z  time="2018-05-16 13:20:48.86732" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:48.868676289Z  time="2018-05-16 13:20:48.86734" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:48.868678830Z  time="2018-05-16 13:20:48.86736" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:48.868681338Z  time="2018-05-16 13:20:48.86738" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:48.868683877Z  time="2018-05-16 13:20:48.86740" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:48.868688059Z  time="2018-05-16 13:20:48.86742" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:48.868690781Z  time="2018-05-16 13:20:48.86752" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:48.868693307Z  time="2018-05-16 13:20:48.86756" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:48.868695876Z  
2018-05-16T13:20:51.433304172Z  2018-05-16 13:20:51,432 DEBG 'agent' stdout output:
2018-05-16T13:20:51.433886996Z  time="2018-05-16 13:20:51.43151" level=error msg="dial tcp: i/o timeout" loc="defaultplugins/publish.go(79)" logger=default-plugins
2018-05-16T13:20:51.433896461Z  
2018-05-16T13:20:58.870610167Z  2018-05-16 13:20:58,870 DEBG 'agent' stdout output:
2018-05-16T13:20:58.870624277Z  time="2018-05-16 13:20:58.86421" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:58.870627872Z  time="2018-05-16 13:20:58.86438" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:58.870630694Z  time="2018-05-16 13:20:58.86444" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:58.870633320Z  time="2018-05-16 13:20:58.86447" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:58.870636048Z  time="2018-05-16 13:20:58.86468" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:58.870638608Z  time="2018-05-16 13:20:58.86475" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:58.870641311Z  time="2018-05-16 13:20:58.86479" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:58.871176342Z  time="2018-05-16 13:20:58.86481" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:58.871184817Z  time="2018-05-16 13:20:58.86485" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:58.871187779Z  time="2018-05-16 13:20:58.86487" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:58.871194698Z  time="2018-05-16 13:20:58.86488" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:58.871197522Z  time="2018-05-16 13:20:58.86490" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:58.871200134Z  time="2018-05-16 13:20:58.86492" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:58.871202695Z  time="2018-05-16 13:20:58.86494" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:58.871205233Z  time="2018-05-16 13:20:58.86496" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:58.871207763Z  time="2018-05-16 13:20:58.86498" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:58.871210268Z  time="2018-05-16 13:20:58.86505" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:58.871212789Z  time="2018-05-16 13:20:58.86511" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:58.871215829Z  time="2018-05-16 13:20:58.86512" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:58.871218398Z  time="2018-05-16 13:20:58.86514" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:58.871220949Z  time="2018-05-16 13:20:58.86516" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:58.871223469Z  time="2018-05-16 13:20:58.86519" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:58.871225977Z  time="2018-05-16 13:20:58.86522" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:58.871228527Z  time="2018-05-16 13:20:58.86524" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:58.871231056Z  time="2018-05-16 13:20:58.86526" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:58.871235676Z  time="2018-05-16 13:20:58.86527" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:58.871238402Z  time="2018-05-16 13:20:58.86529" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:58.871240952Z  time="2018-05-16 13:20:58.86531" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:58.871243533Z  time="2018-05-16 13:20:58.86533" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:58.871247738Z  time="2018-05-16 13:20:58.86535" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:58.871250473Z  time="2018-05-16 13:20:58.86537" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:58.871253086Z  time="2018-05-16 13:20:58.86538" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:58.871255635Z  time="2018-05-16 13:20:58.86540" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:58.871258151Z  time="2018-05-16 13:20:58.86542" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:58.871260669Z  time="2018-05-16 13:20:58.86544" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:58.871263191Z  time="2018-05-16 13:20:58.86546" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:58.871265733Z  time="2018-05-16 13:20:58.86547" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:58.871268264Z  time="2018-05-16 13:20:58.86555" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:58.871270819Z  time="2018-05-16 13:20:58.86560" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:58.871273596Z  time="2018-05-16 13:20:58.86562" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:58.871278198Z  time="2018-05-16 13:20:58.86564" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:20:58.871280965Z  
2018-05-16T13:21:08.878789182Z  2018-05-16 13:21:08,877 DEBG 'agent' stdout output:
2018-05-16T13:21:08.878806324Z  time="2018-05-16 13:21:08.86778" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:08.878810211Z  time="2018-05-16 13:21:08.86788" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:08.878813193Z  time="2018-05-16 13:21:08.86793" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:08.878816090Z  time="2018-05-16 13:21:08.86795" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:08.878818967Z  time="2018-05-16 13:21:08.86797" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:08.878821817Z  time="2018-05-16 13:21:08.86799" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:08.878824756Z  time="2018-05-16 13:21:08.86801" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:08.878827509Z  time="2018-05-16 13:21:08.86803" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:08.878830237Z  time="2018-05-16 13:21:08.86813" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:08.878832952Z  time="2018-05-16 13:21:08.86815" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:08.878836401Z  time="2018-05-16 13:21:08.86817" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:08.878839291Z  time="2018-05-16 13:21:08.86819" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:08.878842056Z  time="2018-05-16 13:21:08.86822" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:08.878849525Z  time="2018-05-16 13:21:08.86825" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:08.878852341Z  time="2018-05-16 13:21:08.86829" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:08.878854911Z  time="2018-05-16 13:21:08.86832" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:08.878857457Z  time="2018-05-16 13:21:08.86837" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:08.878859954Z  time="2018-05-16 13:21:08.86841" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:08.878862441Z  time="2018-05-16 13:21:08.86843" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:08.878864946Z  time="2018-05-16 13:21:08.86845" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:08.878867793Z  time="2018-05-16 13:21:08.86847" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:08.878870420Z  time="2018-05-16 13:21:08.86850" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:08.878872979Z  time="2018-05-16 13:21:08.86854" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:08.878875476Z  time="2018-05-16 13:21:08.86856" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:08.878877970Z  time="2018-05-16 13:21:08.86859" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:08.878880506Z  time="2018-05-16 13:21:08.86865" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:08.878882994Z  time="2018-05-16 13:21:08.86868" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:08.878885487Z  time="2018-05-16 13:21:08.86870" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:08.878890179Z  time="2018-05-16 13:21:08.86871" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:08.878893967Z  time="2018-05-16 13:21:08.86873" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:08.878896523Z  time="2018-05-16 13:21:08.86901" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:08.878899370Z  time="2018-05-16 13:21:08.86905" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:08.878901928Z  time="2018-05-16 13:21:08.86908" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:08.878904407Z  time="2018-05-16 13:21:08.86910" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:08.878906899Z  time="2018-05-16 13:21:08.86914" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:08.878909385Z  time="2018-05-16 13:21:08.86917" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:08.878911857Z  time="2018-05-16 13:21:08.86920" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:08.878914336Z  time="2018-05-16 13:21:08.86922" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:08.878916780Z  time="2018-05-16 13:21:08.86925" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:08.878919266Z  time="2018-05-16 13:21:08.86930" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:08.878921772Z  time="2018-05-16 13:21:08.86932" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:08.878924510Z  time="2018-05-16 13:21:08.86934" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:08.878927102Z  
2018-05-16T13:21:18.871751477Z  2018-05-16 13:21:18,871 DEBG 'agent' stdout output:
2018-05-16T13:21:18.871765707Z  time="2018-05-16 13:21:18.87005" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:18.871788607Z  time="2018-05-16 13:21:18.87009" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:18.871791507Z  time="2018-05-16 13:21:18.87013" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:18.871794045Z  time="2018-05-16 13:21:18.87015" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:18.871796612Z  time="2018-05-16 13:21:18.87017" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:18.871799130Z  time="2018-05-16 13:21:18.87019" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:18.871801714Z  time="2018-05-16 13:21:18.87022" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:18.871804302Z  time="2018-05-16 13:21:18.87024" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:18.871806764Z  time="2018-05-16 13:21:18.87026" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:18.871809231Z  time="2018-05-16 13:21:18.87028" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:18.871812276Z  time="2018-05-16 13:21:18.87029" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:18.871834183Z  time="2018-05-16 13:21:18.87031" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:18.871836739Z  time="2018-05-16 13:21:18.87033" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:18.871839256Z  time="2018-05-16 13:21:18.87035" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:18.871841757Z  time="2018-05-16 13:21:18.87037" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:18.871858137Z  time="2018-05-16 13:21:18.87039" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:18.871884776Z  time="2018-05-16 13:21:18.87042" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:18.871887670Z  time="2018-05-16 13:21:18.87045" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:18.871890276Z  time="2018-05-16 13:21:18.87047" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:18.871909322Z  time="2018-05-16 13:21:18.87049" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:18.871912202Z  time="2018-05-16 13:21:18.87051" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:18.872002043Z  time="2018-05-16 13:21:18.87052" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:18.872022581Z  time="2018-05-16 13:21:18.87054" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:18.872025108Z  time="2018-05-16 13:21:18.87056" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:18.872027641Z  time="2018-05-16 13:21:18.87058" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:18.872030127Z  time="2018-05-16 13:21:18.87060" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:18.872032648Z  time="2018-05-16 13:21:18.87062" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:18.872035197Z  time="2018-05-16 13:21:18.87064" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:18.872037709Z  time="2018-05-16 13:21:18.87066" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:18.872040244Z  time="2018-05-16 13:21:18.87067" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:18.872042768Z  time="2018-05-16 13:21:18.87069" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:18.872519100Z  time="2018-05-16 13:21:18.87071" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:18.872528532Z  time="2018-05-16 13:21:18.87073" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:18.872531537Z  time="2018-05-16 13:21:18.87075" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:18.872534135Z  time="2018-05-16 13:21:18.87076" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:18.872536798Z  time="2018-05-16 13:21:18.87078" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:18.872539410Z  time="2018-05-16 13:21:18.87080" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:18.872542013Z  time="2018-05-16 13:21:18.87084" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:18.872544644Z  time="2018-05-16 13:21:18.87086" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:18.872547234Z  time="2018-05-16 13:21:18.87087" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:18.872550680Z  time="2018-05-16 13:21:18.87089" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:18.872553326Z  time="2018-05-16 13:21:18.87092" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:18.872555967Z  
2018-05-16T13:21:28.874404203Z  2018-05-16 13:21:28,874 DEBG 'agent' stdout output:
2018-05-16T13:21:28.874418724Z  time="2018-05-16 13:21:28.87345" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:28.874422186Z  time="2018-05-16 13:21:28.87349" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:28.874424953Z  time="2018-05-16 13:21:28.87351" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:28.874433774Z  time="2018-05-16 13:21:28.87353" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:28.874436822Z  time="2018-05-16 13:21:28.87355" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:28.874439469Z  time="2018-05-16 13:21:28.87357" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:28.874441994Z  time="2018-05-16 13:21:28.87359" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:28.874444559Z  time="2018-05-16 13:21:28.87362" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:28.874447043Z  time="2018-05-16 13:21:28.87363" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:28.874449518Z  time="2018-05-16 13:21:28.87365" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:28.874452795Z  time="2018-05-16 13:21:28.87367" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:28.874455362Z  time="2018-05-16 13:21:28.87369" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:28.874457824Z  time="2018-05-16 13:21:28.87371" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:28.874460317Z  time="2018-05-16 13:21:28.87373" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:28.874462799Z  time="2018-05-16 13:21:28.87375" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:28.874465253Z  time="2018-05-16 13:21:28.87377" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:28.874467755Z  time="2018-05-16 13:21:28.87379" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:28.874470264Z  
2018-05-16T13:21:28.875372787Z  2018-05-16 13:21:28,874 DEBG 'agent' stdout output:
2018-05-16T13:21:28.875381084Z  time="2018-05-16 13:21:28.87455" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:28.875389239Z  time="2018-05-16 13:21:28.87459" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:28.875392207Z  time="2018-05-16 13:21:28.87461" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:28.875394793Z  time="2018-05-16 13:21:28.87463" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:28.875397314Z  time="2018-05-16 13:21:28.87465" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:28.875400488Z  time="2018-05-16 13:21:28.87467" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:28.875403165Z  time="2018-05-16 13:21:28.87468" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:28.875405747Z  time="2018-05-16 13:21:28.87471" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:28.875408244Z  time="2018-05-16 13:21:28.87472" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:28.875410718Z  time="2018-05-16 13:21:28.87474" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:28.875413642Z  time="2018-05-16 13:21:28.87476" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:28.875416171Z  time="2018-05-16 13:21:28.87478" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:28.875418648Z  
2018-05-16T13:21:28.875891561Z  2018-05-16 13:21:28,875 DEBG 'agent' stdout output:
2018-05-16T13:21:28.875899564Z  time="2018-05-16 13:21:28.87513" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:28.875902618Z  time="2018-05-16 13:21:28.87516" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:28.875905153Z  time="2018-05-16 13:21:28.87518" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:28.875912513Z  time="2018-05-16 13:21:28.87520" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:28.875915318Z  time="2018-05-16 13:21:28.87522" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:28.875917809Z  time="2018-05-16 13:21:28.87523" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:28.875920270Z  time="2018-05-16 13:21:28.87525" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:28.875922791Z  time="2018-05-16 13:21:28.87527" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:28.875925315Z  
2018-05-16T13:21:28.876408544Z  2018-05-16 13:21:28,875 DEBG 'agent' stdout output:
2018-05-16T13:21:28.876416154Z  time="2018-05-16 13:21:28.87529" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:28.876419047Z  time="2018-05-16 13:21:28.87569" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:28.876421639Z  time="2018-05-16 13:21:28.87571" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:28.876424164Z  time="2018-05-16 13:21:28.87573" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:28.876426744Z  time="2018-05-16 13:21:28.87575" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:28.876429290Z  
2018-05-16T13:21:38.882675799Z  2018-05-16 13:21:38,882 DEBG 'agent' stdout output:
2018-05-16T13:21:38.882690384Z  time="2018-05-16 13:21:38.87464" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:38.882693746Z  time="2018-05-16 13:21:38.87471" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:38.882696403Z  time="2018-05-16 13:21:38.87473" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:38.882698975Z  time="2018-05-16 13:21:38.87475" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:38.882706204Z  time="2018-05-16 13:21:38.87477" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:38.882708978Z  time="2018-05-16 13:21:38.87479" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:38.882711519Z  time="2018-05-16 13:21:38.87481" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:38.882714006Z  time="2018-05-16 13:21:38.87483" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:38.882716460Z  time="2018-05-16 13:21:38.87485" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:38.882718987Z  time="2018-05-16 13:21:38.87487" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:38.882722280Z  time="2018-05-16 13:21:38.87489" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:38.882724886Z  time="2018-05-16 13:21:38.87491" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:38.882727349Z  time="2018-05-16 13:21:38.87493" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:38.882729817Z  time="2018-05-16 13:21:38.87495" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:38.882732269Z  time="2018-05-16 13:21:38.87496" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:38.882734728Z  time="2018-05-16 13:21:38.87498" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:38.882737191Z  time="2018-05-16 13:21:38.87500" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:38.882739666Z  time="2018-05-16 13:21:38.87502" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:38.882742164Z  time="2018-05-16 13:21:38.87506" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:38.882746574Z  time="2018-05-16 13:21:38.87508" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:38.882749438Z  time="2018-05-16 13:21:38.87510" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:38.882752057Z  time="2018-05-16 13:21:38.87512" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:38.882754520Z  time="2018-05-16 13:21:38.87514" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:38.882757025Z  time="2018-05-16 13:21:38.87516" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:38.882759493Z  time="2018-05-16 13:21:38.87518" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:38.882761981Z  time="2018-05-16 13:21:38.87520" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:38.882764460Z  time="2018-05-16 13:21:38.87522" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:38.882766904Z  time="2018-05-16 13:21:38.87523" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:38.882769347Z  time="2018-05-16 13:21:38.87525" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:38.882771793Z  time="2018-05-16 13:21:38.87527" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:38.882774232Z  time="2018-05-16 13:21:38.87529" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:38.882777128Z  time="2018-05-16 13:21:38.87531" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:38.882779624Z  time="2018-05-16 13:21:38.87533" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:38.882782053Z  time="2018-05-16 13:21:38.87534" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:38.882786328Z  time="2018-05-16 13:21:38.87555" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:38.882788936Z  time="2018-05-16 13:21:38.87559" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:38.882791375Z  time="2018-05-16 13:21:38.87562" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:38.882793900Z  time="2018-05-16 13:21:38.87564" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:38.882796384Z  time="2018-05-16 13:21:38.87567" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:38.882798860Z  time="2018-05-16 13:21:38.87569" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:38.882801324Z  time="2018-05-16 13:21:38.87572" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:38.882837517Z  time="2018-05-16 13:21:38.87574" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:38.882842192Z  
2018-05-16T13:21:48.876449894Z  2018-05-16 13:21:48,875 DEBG 'agent' stdout output:
2018-05-16T13:21:48.876479125Z  time="2018-05-16 13:21:48.87485" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:48.876482821Z  time="2018-05-16 13:21:48.87488" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:48.876486308Z  time="2018-05-16 13:21:48.87490" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:48.876489095Z  time="2018-05-16 13:21:48.87492" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:48.876491829Z  time="2018-05-16 13:21:48.87494" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:48.876494675Z  time="2018-05-16 13:21:48.87496" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:48.876501068Z  time="2018-05-16 13:21:48.87498" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:48.876503823Z  time="2018-05-16 13:21:48.87500" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:48.876506325Z  time="2018-05-16 13:21:48.87502" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:48.876508788Z  time="2018-05-16 13:21:48.87503" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:48.876511843Z  time="2018-05-16 13:21:48.87505" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:48.876514494Z  time="2018-05-16 13:21:48.87507" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:48.876516945Z  time="2018-05-16 13:21:48.87509" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:48.876519407Z  time="2018-05-16 13:21:48.87511" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:48.876521857Z  time="2018-05-16 13:21:48.87513" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:48.876524302Z  time="2018-05-16 13:21:48.87515" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:48.876526772Z  time="2018-05-16 13:21:48.87516" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:48.876529220Z  time="2018-05-16 13:21:48.87518" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:48.876531724Z  time="2018-05-16 13:21:48.87520" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:48.876534191Z  time="2018-05-16 13:21:48.87522" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:48.876536649Z  time="2018-05-16 13:21:48.87524" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:48.876541176Z  time="2018-05-16 13:21:48.87525" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:48.876543848Z  time="2018-05-16 13:21:48.87530" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:48.876546296Z  time="2018-05-16 13:21:48.87532" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:48.876548766Z  time="2018-05-16 13:21:48.87535" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:48.876551230Z  time="2018-05-16 13:21:48.87536" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:48.876553720Z  time="2018-05-16 13:21:48.87538" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:48.876556188Z  time="2018-05-16 13:21:48.87540" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:48.876922480Z  time="2018-05-16 13:21:48.87542" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:48.876930111Z  time="2018-05-16 13:21:48.87544" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:48.876934351Z  time="2018-05-16 13:21:48.87546" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:48.876936862Z  time="2018-05-16 13:21:48.87547" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:48.876939349Z  time="2018-05-16 13:21:48.87549" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:48.876941799Z  time="2018-05-16 13:21:48.87551" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:48.876944279Z  time="2018-05-16 13:21:48.87553" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:48.876946713Z  time="2018-05-16 13:21:48.87555" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:48.876949140Z  time="2018-05-16 13:21:48.87557" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:48.876955748Z  time="2018-05-16 13:21:48.87558" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:48.876958479Z  time="2018-05-16 13:21:48.87560" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:48.876961365Z  time="2018-05-16 13:21:48.87562" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:48.876963905Z  time="2018-05-16 13:21:48.87564" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:48.876966350Z  time="2018-05-16 13:21:48.87566" level=debug msg="Unable to send to the ifStateNotifications channel - channel buffer full." loc="defaultplugins/plugin_impl_vpp.go(446)" logger=default-plugins
2018-05-16T13:21:48.876968836Z  </msg>
<msg timestamp="20180516 15:21:52.791" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:21:52.791" starttime="20180516 15:21:52.784"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:21:52.792" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:21:52.792" starttime="20180516 15:21:52.792"></status>
</kw>
<msg timestamp="20180516 15:21:52.792" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:21:52.792" starttime="20180516 15:21:52.792"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} on ${machine}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:21:52.793" starttime="20180516 15:21:52.793"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${log}'=='true'</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:21:52.794" starttime="20180516 15:21:52.793"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:21:52.794" starttime="20180516 15:21:52.794"></status>
</kw>
<msg timestamp="20180516 15:21:52.795" level="INFO">${log} = 2018-05-16T13:16:27.655439718Z  2018-05-16 13:16:27,654 CRIT Supervisor running as root (no user in config file)
2018-05-16T13:16:27.658784158Z  2018-05-16 13:16:27,658 INFO supervisord started with ...</msg>
<status status="PASS" endtime="20180516 15:21:52.795" starttime="20180516 15:21:52.393"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${node}_container_agent.log</arg>
<arg>${log}</arg>
</arguments>
<msg timestamp="20180516 15:21:52.796" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_container_agent.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_container_agent.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:21:52.796" starttime="20180516 15:21:52.795"></status>
</kw>
<kw name="Log ${node} Output" library="setup-teardown">
<doc>*Log ${machine} Output*</doc>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<msg timestamp="20180516 15:21:52.802" level="INFO">agent_vpp_1</msg>
<status status="PASS" endtime="20180516 15:21:52.802" starttime="20180516 15:21:52.802"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:21:52.802" starttime="20180516 15:21:52.802"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>delay=${SSH_READ_DELAY}s</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20180516 15:21:55.806" level="INFO">${out} = </msg>
<status status="PASS" endtime="20180516 15:21:55.807" starttime="20180516 15:21:52.803"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:21:55.807" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:21:55.807" starttime="20180516 15:21:55.807"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:21:55.808" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:21:55.808" starttime="20180516 15:21:55.807"></status>
</kw>
<status status="PASS" endtime="20180516 15:21:55.808" starttime="20180516 15:21:52.801"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${node}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:21:55.808" starttime="20180516 15:21:55.808"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20180516 15:21:55.810" starttime="20180516 15:21:55.809"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"vpp" in "${node}"</arg>
<arg>Remove VPP Connections</arg>
<arg>${node}</arg>
</arguments>
<kw name="Remove VPP Connections" library="docker">
<arguments>
<arg>${node}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${node}</arg>
</arguments>
<msg timestamp="20180516 15:21:55.811" level="INFO">agent_vpp_1</msg>
<status status="PASS" endtime="20180516 15:21:55.811" starttime="20180516 15:21:55.811"></status>
</kw>
<kw name="Log ${node}_term Output" library="setup-teardown">
<doc>*Log ${machine} Output*</doc>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<msg timestamp="20180516 15:21:55.817" level="INFO">agent_vpp_1_term</msg>
<status status="PASS" endtime="20180516 15:21:55.817" starttime="20180516 15:21:55.817"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:21:55.817" starttime="20180516 15:21:55.817"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>delay=${SSH_READ_DELAY}s</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20180516 15:21:58.821" level="INFO">${out} = </msg>
<status status="PASS" endtime="20180516 15:21:58.821" starttime="20180516 15:21:55.818"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:21:58.822" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:21:58.822" starttime="20180516 15:21:58.822"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:21:58.823" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_term.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_term.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:21:58.823" starttime="20180516 15:21:58.823"></status>
</kw>
<status status="PASS" endtime="20180516 15:21:58.824" starttime="20180516 15:21:55.816"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${node}_term</arg>
</arguments>
<status status="PASS" endtime="20180516 15:21:58.825" starttime="20180516 15:21:58.824"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20180516 15:21:58.842" starttime="20180516 15:21:58.825"></status>
</kw>
<kw name="Log ${node}_vat Output" library="setup-teardown">
<doc>*Log ${machine} Output*</doc>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<msg timestamp="20180516 15:21:58.847" level="INFO">agent_vpp_1_vat</msg>
<status status="PASS" endtime="20180516 15:21:58.847" starttime="20180516 15:21:58.847"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:21:58.847" starttime="20180516 15:21:58.847"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>delay=${SSH_READ_DELAY}s</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20180516 15:22:01.848" level="INFO">${out} = </msg>
<status status="PASS" endtime="20180516 15:22:01.848" starttime="20180516 15:21:58.848"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:22:01.849" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:22:01.849" starttime="20180516 15:22:01.849"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:22:01.850" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_vat.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_vat.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:22:01.850" starttime="20180516 15:22:01.849"></status>
</kw>
<status status="PASS" endtime="20180516 15:22:01.850" starttime="20180516 15:21:58.846"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${node}_vat</arg>
</arguments>
<status status="PASS" endtime="20180516 15:22:01.850" starttime="20180516 15:22:01.850"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20180516 15:22:01.965" starttime="20180516 15:22:01.851"></status>
</kw>
<status status="PASS" endtime="20180516 15:22:01.965" starttime="20180516 15:21:55.811"></status>
</kw>
<status status="PASS" endtime="20180516 15:22:01.965" starttime="20180516 15:21:55.810"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"libmemif" in "${node}"</arg>
<arg>Remove LM Connections</arg>
<arg>${node}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:22:01.966" starttime="20180516 15:22:01.966"></status>
</kw>
<kw name="Remove Values From List" library="Collections">
<doc>Removes all occurrences of given ``values`` from ``list``.</doc>
<arguments>
<arg>${NODES}</arg>
<arg>${node}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:22:01.967" starttime="20180516 15:22:01.966"></status>
</kw>
<kw name="Execute On Machine" library="ssh">
<doc>*Execute On Machine ${machine} ${command}*</doc>
<arguments>
<arg>docker</arg>
<arg>${DOCKER_COMMAND} rm -f ${node}</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${log}</arg>
</arguments>
<msg timestamp="20180516 15:22:01.977" level="INFO">docker</msg>
<msg timestamp="20180516 15:22:01.977" level="INFO">sudo docker rm -f agent_vpp_1</msg>
<msg timestamp="20180516 15:22:01.977" level="INFO">true</msg>
<status status="PASS" endtime="20180516 15:22:01.977" starttime="20180516 15:22:01.976"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:22:01.978" starttime="20180516 15:22:01.977"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:22:01.978" level="INFO">${currdate} = 2018-05-16 15:22:01.978</msg>
<status status="PASS" endtime="20180516 15:22:01.978" starttime="20180516 15:22:01.978"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20180516 15:22:01.978" level="INFO">Executing command 'sudo docker rm -f agent_vpp_1'.</msg>
<msg timestamp="20180516 15:22:02.768" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:22:02.768" level="INFO">${out} = agent_vpp_1</msg>
<msg timestamp="20180516 15:22:02.768" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20180516 15:22:02.768" starttime="20180516 15:22:01.978"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${out}</arg>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:22:02.769" level="INFO">agent_vpp_1</msg>
<msg timestamp="20180516 15:22:02.769" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:22:02.769" starttime="20180516 15:22:02.769"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:22:02.770" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:22:02.770" starttime="20180516 15:22:02.770"></status>
</kw>
<msg timestamp="20180516 15:22:02.770" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:22:02.770" starttime="20180516 15:22:02.769"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} on ${machine}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:22:02.771" starttime="20180516 15:22:02.771"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${log}'=='true'</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:22:02.772" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_docker.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_docker.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:22:02.772" starttime="20180516 15:22:02.772"></status>
</kw>
<status status="PASS" endtime="20180516 15:22:02.772" starttime="20180516 15:22:02.771"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:22:02.773" starttime="20180516 15:22:02.773"></status>
</kw>
<status status="PASS" endtime="20180516 15:22:02.773" starttime="20180516 15:22:01.975"></status>
</kw>
<status status="PASS" endtime="20180516 15:22:02.773" starttime="20180516 15:21:52.366"></status>
</kw>
<status status="PASS" endtime="20180516 15:22:02.773" starttime="20180516 15:21:52.366"></status>
</kw>
<kw type="foritem" name="${id} = node_1">
<kw name="Remove Node" library="docker">
<arguments>
<arg>${id}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${node}</arg>
</arguments>
<msg timestamp="20180516 15:22:02.774" level="INFO">node_1</msg>
<status status="PASS" endtime="20180516 15:22:02.774" starttime="20180516 15:22:02.774"></status>
</kw>
<kw name="Execute On Machine" library="ssh">
<doc>*Execute On Machine ${machine} ${command}*</doc>
<arguments>
<arg>docker</arg>
<arg>${DOCKER_COMMAND} logs --details -t ${node}</arg>
<arg>log=false</arg>
</arguments>
<assign>
<var>${log}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${log}</arg>
</arguments>
<msg timestamp="20180516 15:22:02.786" level="INFO">docker</msg>
<msg timestamp="20180516 15:22:02.786" level="INFO">sudo docker logs --details -t node_1</msg>
<msg timestamp="20180516 15:22:02.786" level="INFO">false</msg>
<status status="PASS" endtime="20180516 15:22:02.786" starttime="20180516 15:22:02.785"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:22:02.786" starttime="20180516 15:22:02.786"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:22:02.787" level="INFO">${currdate} = 2018-05-16 15:22:02.787</msg>
<status status="PASS" endtime="20180516 15:22:02.787" starttime="20180516 15:22:02.787"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20180516 15:22:02.787" level="INFO">Executing command 'sudo docker logs --details -t node_1'.</msg>
<msg timestamp="20180516 15:22:02.978" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:22:02.978" level="INFO">${out} = 2018-05-16T13:16:53.745731558Z  2018-05-16 13:16:53,745 CRIT Supervisor running as root (no user in config file)
2018-05-16T13:16:53.748191060Z  2018-05-16 13:16:53,747 INFO supervisord started with ...</msg>
<msg timestamp="20180516 15:22:02.978" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20180516 15:22:02.978" starttime="20180516 15:22:02.787"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${out}</arg>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:22:02.979" level="INFO">2018-05-16T13:16:53.745731558Z  2018-05-16 13:16:53,745 CRIT Supervisor running as root (no user in config file)
2018-05-16T13:16:53.748191060Z  2018-05-16 13:16:53,747 INFO supervisord started with pid 1
2018-05-16T13:16:54.749723391Z  2018-05-16 13:16:54,748 INFO spawned: 'agent' with pid 7
2018-05-16T13:16:54.765544787Z  2018-05-16 13:16:54,763 DEBG 'agent' stdout output:
2018-05-16T13:16:54.765574837Z  time="2018-05-16 13:16:54.76290" level=info msg="Starting agent v1.1-5-g55e9977" BuildDate="2018-03-06T11:05+00:00" CommitHash=55e99770087087fa8e41a980a8b6257c80c93f4c loc="core/agent_core.go(195)" logger=defaultLogger
2018-05-16T13:16:54.765580232Z  
2018-05-16T13:16:54.766502416Z  2018-05-16 13:16:54,764 DEBG 'agent' stdout output:
2018-05-16T13:16:54.766511249Z  time="2018-05-16 13:16:54.76461" level=info msg="plugin Logs: Init took 54.702µs" durationInNs=54702 loc="core/agent_core.go(295)" logger=defaultLogger
2018-05-16T13:16:54.766514588Z  
2018-05-16T13:16:54.766516814Z  2018-05-16 13:16:54,765 DEBG 'agent' stdout output:
2018-05-16T13:16:54.766519054Z  time="2018-05-16 13:16:54.76577" level=debug msg="Microservice label is set to node_1" loc="servicelabel/plugin_impl_servicelabel.go(49)" logger=defaultLogger
2018-05-16T13:16:54.766521521Z  
2018-05-16T13:16:54.766523606Z  2018-05-16 13:16:54,766 DEBG 'agent' stdout output:
2018-05-16T13:16:54.766525735Z  time="2018-05-16 13:16:54.76594" level=info msg="plugin ServiceLabel: Init took 175.065µs" durationInNs=175065 loc="core/agent_core.go(295)" logger=defaultLogger
2018-05-16T13:16:54.766528238Z  
2018-05-16T13:16:54.766530281Z  2018-05-16 13:16:54,766 DEBG 'agent' stdout output:
2018-05-16T13:16:54.766532538Z  time="2018-05-16 13:16:54.76610" level=info msg="plugin StatusCheck: Init took 2.308µs" durationInNs=2308 loc="core/agent_core.go(295)" logger=defaultLogger
2018-05-16T13:16:54.766535048Z  
2018-05-16T13:16:54.772370700Z  2018-05-16 13:16:54,770 DEBG 'agent' stdout output:
2018-05-16T13:16:54.772384139Z  time="2018-05-16 13:16:54.76871" level=info msg="Connecting to etcd took 1.122894ms" durationInNs=1122894 loc="etcdv3/bytes_broker_impl.go(85)" logger=etcdv3
2018-05-16T13:16:54.772387594Z  time="2018-05-16 13:16:54.76877" level=info msg="Plugin etcdv3: status check probe registered" loc="statuscheck/plugin_impl_statuscheck.go(144)" logger=status-check
2018-05-16T13:16:54.772390385Z  time="2018-05-16 13:16:54.76879" level=info msg="plugin ETCD: Init took 2.528543ms" durationInNs=2528543 loc="core/agent_core.go(295)" logger=defaultLogger
2018-05-16T13:16:54.772393013Z  time="2018-05-16 13:16:54.76882" level=info msg="plugin ETCDDataSync: Init took 986ns" durationInNs=986 loc="core/agent_core.go(295)" logger=defaultLogger
2018-05-16T13:16:54.772395525Z  
2018-05-16T13:16:54.781175094Z  2018-05-16 13:16:54,779 DEBG 'agent' stdout output:
2018-05-16T13:16:54.781188104Z  time="2018-05-16 13:16:54.77730" level=info msg="Group ID is set to node_1" loc="kafka/plugin_impl_kafka.go(95)" logger=kafka
2018-05-16T13:16:54.781197755Z  time="2018-05-16 13:16:54.77738" level=info msg="Invalid partition -1 - defaulting to 0" loc="client/config.go(254)" logger=kafka
2018-05-16T13:16:54.781200761Z  time="2018-05-16 13:16:54.77743" level=info msg="Connecting to kafka took 61.669µs" durationInNs=61669 loc="mux/config.go(150)" logger=kafka
2018-05-16T13:16:54.781203615Z  time="2018-05-16 13:16:54.77746" level=info msg="plugin Kafka: Init took 8.606184ms" durationInNs=8606184 loc="core/agent_core.go(295)" logger=defaultLogger
2018-05-16T13:16:54.781206140Z  time="2018-05-16 13:16:54.77755" level=info msg="redis config not found  - skip loading this plugin" loc="redis/plugin_impl_redis.go(107)" logger=redis
2018-05-16T13:16:54.781208642Z  time="2018-05-16 13:16:54.77757" level=info msg="plugin Redis: Init took 84.056µs" durationInNs=84056 loc="core/agent_core.go(295)" logger=defaultLogger
2018-05-16T13:16:54.781211175Z  time="2018-05-16 13:16:54.77759" level=info msg="plugin RedisDataSync: Init took 1.318µs" durationInNs=1318 loc="core/agent_core.go(295)" logger=defaultLogger
2018-05-16T13:16:54.781213563Z  time="2018-05-16 13:16:54.77764" level=info msg="cassandra client config not found  - skip loading this plugin" loc="cassandra/plugin_impl_cassa.go(72)" logger=cassandra
2018-05-16T13:16:54.781216053Z  time="2018-05-16 13:16:54.77766" level=info msg="plugin Cassandra: Init took 50.466µs" durationInNs=50466 loc="core/agent_core.go(295)" logger=defaultLogger
2018-05-16T13:16:54.781218572Z  time="2018-05-16 13:16:54.77769" level=info msg="plugin ResyncOrch: Init took 593ns" durationInNs=593 loc="core/agent_core.go(295)" logger=defaultLogger
2018-05-16T13:16:54.781221019Z  time="2018-05-16 13:16:54.77774" level=info msg="plugin HTTP: Init took 29.764µs" durationInNs=29764 loc="core/agent_core.go(295)" logger=defaultLogger
2018-05-16T13:16:54.781223452Z  time="2018-05-16 13:16:54.77778" level=info msg=init loc="rest/plugin_impl_fork.go(65)" logger=http-probe probePort=9191
2018-05-16T13:16:54.781225831Z  time="2018-05-16 13:16:54.77781" level=info msg="plugin HTTPProbe: Init took 49.246µs" durationInNs=49246 loc="core/agent_core.go(295)" logger=defaultLogger
2018-05-16T13:16:54.781228840Z  time="2018-05-16 13:16:54.77783" level=info msg="plugin Prometheus: Init took 957ns" durationInNs=957 loc="core/agent_core.go(295)" logger=defaultLogger
2018-05-16T13:16:54.781231361Z  time="2018-05-16 13:16:54.77785" level=info msg="plugin HealthRPC: Init took 261ns" durationInNs=261 loc="core/agent_core.go(295)" logger=defaultLogger
2018-05-16T13:16:54.781233781Z  time="2018-05-16 13:16:54.77790" level=info msg="GaugeFunc('service_health') registered." loc="prometheus/plugin_impl_prometheus.go(189)" logger=prometheus
2018-05-16T13:16:54.781236165Z  time="2018-05-16 13:16:54.77793" level=info msg="GaugeFunc('service_info') registered." loc="prometheus/plugin_impl_prometheus.go(189)" logger=prometheus
2018-05-16T13:16:54.781238562Z  time="2018-05-16 13:16:54.77796" level=info msg="plugin PrometheusRPC: Init took 81.376µs" durationInNs=81376 loc="core/agent_core.go(295)" logger=defaultLogger
2018-05-16T13:16:54.781241003Z  time="2018-05-16 13:16:54.77801" level=info msg="plugin GRPC: Init took 38.105µs" durationInNs=38105 loc="core/agent_core.go(295)" logger=defaultLogger
2018-05-16T13:16:54.781245263Z  
2018-05-16T13:16:54.781248071Z  2018-05-16 13:16:54,780 DEBG 'agent' stdout output:
2018-05-16T13:16:54.781250306Z  time="2018-05-16 13:16:54.78055" level=info msg="plugin Logs: AfterInit took 2.484044ms" durationInNs=2484044 loc="core/agent_core.go(345)" logger=defaultLogger
2018-05-16T13:16:54.781252721Z  
2018-05-16T13:16:54.781254785Z  2018-05-16 13:16:54,780 DEBG 'agent' stdout output:
2018-05-16T13:16:54.781256888Z  time="2018-05-16 13:16:54.78072" level=info msg="plugin ServiceLabel: not implement AfterInit" loc="core/agent_core.go(348)" logger=defaultLogger
2018-05-16T13:16:54.781259354Z  
2018-05-16T13:16:54.781261362Z  2018-05-16 13:16:54,780 DEBG 'agent' stdout output:
2018-05-16T13:16:54.781263478Z  time="2018-05-16 13:16:54.78089" level=info msg="plugin StatusCheck: AfterInit took 5.88µs" durationInNs=5880 loc="core/agent_core.go(345)" logger=defaultLogger
2018-05-16T13:16:54.781265932Z  
2018-05-16T13:16:54.783115945Z  2018-05-16 13:16:54,782 DEBG 'agent' stdout output:
2018-05-16T13:16:54.783128570Z  time="2018-05-16 13:16:54.78107" level=info msg="plugin ETCD: AfterInit took 253ns" durationInNs=253 loc="core/agent_core.go(345)" logger=defaultLogger
2018-05-16T13:16:54.783151332Z  
2018-05-16T13:16:54.783153762Z  2018-05-16 13:16:54,782 DEBG 'agent' stdout output:
2018-05-16T13:16:54.783156135Z  time="2018-05-16 13:16:54.78230" level=info msg="plugin ETCDDataSync: AfterInit took 3.658µs" durationInNs=3658 loc="core/agent_core.go(345)" logger=defaultLogger
2018-05-16T13:16:54.783159078Z  
2018-05-16T13:16:54.792027749Z  2018-05-16 13:16:54,790 DEBG 'agent' stdout output:
2018-05-16T13:16:54.792041250Z  time="2018-05-16 13:16:54.78881" level=info msg="Plugin kafka: status check probe registered" loc="statuscheck/plugin_impl_statuscheck.go(144)" logger=status-check
2018-05-16T13:16:54.792044815Z  
2018-05-16T13:16:54.792047179Z  2018-05-16 13:16:54,791 DEBG 'agent' stdout output:
2018-05-16T13:16:54.792049385Z  time="2018-05-16 13:16:54.79131" level=info msg="plugin Kafka: AfterInit took 8.847851ms" durationInNs=8847851 loc="core/agent_core.go(345)" logger=defaultLogger
2018-05-16T13:16:54.792051980Z  
2018-05-16T13:16:54.792054145Z  2018-05-16 13:16:54,791 DEBG 'agent' stdout output:
2018-05-16T13:16:54.792056377Z  time="2018-05-16 13:16:54.79150" level=info msg="plugin Redis: AfterInit took 397ns" durationInNs=397 loc="core/agent_core.go(345)" logger=defaultLogger
2018-05-16T13:16:54.792058858Z  
2018-05-16T13:16:54.792060897Z  2018-05-16 13:16:54,791 DEBG 'agent' stdout output:
2018-05-16T13:16:54.792063044Z  time="2018-05-16 13:16:54.79170" level=info msg="plugin RedisDataSync: AfterInit took 644ns" durationInNs=644 loc="core/agent_core.go(345)" logger=defaultLogger
2018-05-16T13:16:54.792065494Z  
2018-05-16T13:16:54.793984358Z  2018-05-16 13:16:54,793 DEBG 'agent' stdout output:
2018-05-16T13:16:54.794001884Z  time="2018-05-16 13:16:54.79295" level=info msg="plugin Cassandra: AfterInit took 363ns" durationInNs=363 loc="core/agent_core.go(345)" logger=defaultLogger
2018-05-16T13:16:54.794005521Z  
2018-05-16T13:16:54.794009336Z  2018-05-16 13:16:54,793 DEBG 'agent' stdout output:
2018-05-16T13:16:54.794011611Z  time="2018-05-16 13:16:54.79359" level=info msg="Resync order[]" loc="resync/plugin_impl_resync.go(98)" logger=resync-orch
2018-05-16T13:16:54.794014201Z  
2018-05-16T13:16:54.795926577Z  2018-05-16 13:16:54,794 DEBG 'agent' stdout output:
2018-05-16T13:16:54.795934912Z  time="2018-05-16 13:16:54.79377" level=info msg="Resync took 124ns" durationInNs=124 loc="resync/plugin_impl_resync.go(115)" logger=resync-orch
2018-05-16T13:16:54.795937998Z  
2018-05-16T13:16:54.795940208Z  2018-05-16 13:16:54,795 DEBG 'agent' stdout output:
2018-05-16T13:16:54.795942426Z  time="2018-05-16 13:16:54.79504" level=info msg="plugin ResyncOrch: AfterInit took 1.441871ms" durationInNs=1441871 loc="core/agent_core.go(345)" logger=defaultLogger
2018-05-16T13:16:54.795944964Z  
2018-05-16T13:16:54.796913640Z  2018-05-16 13:16:54,795 DEBG 'agent' stdout output:
2018-05-16T13:16:54.796921217Z  time="2018-05-16 13:16:54.79524" level=info msg="Listening on http://0.0.0.0:9191" loc="rest/plugin_impl_rest.go(100)" logger=http
2018-05-16T13:16:54.796924127Z  
2018-05-16T13:16:54.898164130Z  2018-05-16 13:16:54,897 DEBG 'agent' stdout output:
2018-05-16T13:16:54.898179095Z  time="2018-05-16 13:16:54.89660" level=info msg="plugin HTTP: AfterInit took 101.330865ms" durationInNs=101330865 loc="core/agent_core.go(345)" logger=defaultLogger
2018-05-16T13:16:54.898182910Z  time="2018-05-16 13:16:54.89664" level=info msg="plugin HTTPProbe: AfterInit took 260ns" durationInNs=260 loc="core/agent_core.go(345)" logger=defaultLogger
2018-05-16T13:16:54.898185769Z  time="2018-05-16 13:16:54.89669" level=info msg="Serving /health on port 9191" loc="prometheus/plugin_impl_prometheus.go(84)" logger=prometheus
2018-05-16T13:16:54.898188497Z  time="2018-05-16 13:16:54.89675" level=info msg="Serving /metrics on port 9191" loc="prometheus/plugin_impl_prometheus.go(84)" logger=prometheus
2018-05-16T13:16:54.898191072Z  time="2018-05-16 13:16:54.89677" level=info msg="plugin Prometheus: AfterInit took 104.904µs" durationInNs=104904 loc="core/agent_core.go(345)" logger=defaultLogger
2018-05-16T13:16:54.898194164Z  time="2018-05-16 13:16:54.89680" level=info msg="Starting health http-probe on port 9191" loc="probe/plugin_impl_probes.go(44)" logger=health-rpc
2018-05-16T13:16:54.898196778Z  
2018-05-16T13:16:54.898486406Z  2018-05-16 13:16:54,897 DEBG 'agent' stdout output:
2018-05-16T13:16:54.898507807Z  time="2018-05-16 13:16:54.89734" level=info msg="plugin HealthRPC: AfterInit took 51.498µs" durationInNs=51498 loc="core/agent_core.go(345)" logger=defaultLogger
2018-05-16T13:16:54.898510883Z  time="2018-05-16 13:16:54.89742" level=info msg="k=etcdv3, v=last_change:1526476614 last_update:1526476614 , state=INIT" loc="probe/plugin_impl_prometheus.go(114)" logger=health-prometheus-rpc
2018-05-16T13:16:54.898519658Z  time="2018-05-16 13:16:54.89746" level=info msg="DependencyHealth for plugin etcdv3: 0" loc="probe/plugin_impl_prometheus.go(152)" logger=health-prometheus-rpc
2018-05-16T13:16:54.898522450Z  time="2018-05-16 13:16:54.89750" level=info msg="GaugeFunc('service_dependency_health') registered." loc="prometheus/plugin_impl_prometheus.go(189)" logger=prometheus
2018-05-16T13:16:54.898893960Z  time="2018-05-16 13:16:54.89753" level=info msg="k=kafka, v=last_change:1526476614 last_update:1526476614 , state=INIT" loc="probe/plugin_impl_prometheus.go(114)" logger=health-prometheus-rpc
2018-05-16T13:16:54.898902042Z  time="2018-05-16 13:16:54.89756" level=info msg="DependencyHealth for plugin kafka: 0" loc="probe/plugin_impl_prometheus.go(152)" logger=health-prometheus-rpc
2018-05-16T13:16:54.898904904Z  time="2018-05-16 13:16:54.89759" level=info msg="GaugeFunc('service_dependency_health') registered." loc="prometheus/plugin_impl_prometheus.go(189)" logger=prometheus
2018-05-16T13:16:54.898907508Z  time="2018-05-16 13:16:54.89762" level=info msg="plugin PrometheusRPC: AfterInit took 246.394µs" durationInNs=246394 loc="core/agent_core.go(345)" logger=defaultLogger
2018-05-16T13:16:54.898910271Z  time="2018-05-16 13:16:54.89765" level=info msg="Listening GRPC on tcp://" loc="grpc/plugin_impl_grpc.go(119)" logger=grpc
2018-05-16T13:16:54.898912917Z  
2018-05-16T13:16:54.999175215Z  2018-05-16 13:16:54,998 DEBG 'agent' stdout output:
2018-05-16T13:16:54.999189384Z  time="2018-05-16 13:16:54.99865" level=info msg="plugin GRPC: AfterInit took 100.982266ms" durationInNs=100982266 loc="core/agent_core.go(345)" logger=defaultLogger
2018-05-16T13:16:54.999193029Z  
2018-05-16T13:16:55.000160962Z  2018-05-16 13:16:54,999 DEBG 'agent' stdout output:
2018-05-16T13:16:55.000169579Z  time="2018-05-16 13:16:54.99905" level=info msg="All plugins initialized successfully, took 234.489533ms" durationInNs=234489533 loc="core/agent_core.go(365)" logger=defaultLogger
2018-05-16T13:16:55.000172908Z  
2018-05-16T13:16:55.000175094Z  2018-05-16 13:16:54,999 DEBG 'agent' stdout output:
2018-05-16T13:16:55.000177420Z  time="2018-05-16 13:16:54.99938" level=info msg="Agent Init took 13.509252ms" durationInNs=13509252 loc="core/agent_core.go(366)" logger=defaultLogger
2018-05-16T13:16:55.000180088Z  
2018-05-16T13:16:55.000182178Z  2018-05-16 13:16:54,999 DEBG 'agent' stdout output:
2018-05-16T13:16:55.000184362Z  time="2018-05-16 13:16:54.99954" level=info msg="Agent AfterInit took 220.980281ms" durationInNs=220980281 loc="core/agent_core.go(367)" logger=defaultLogger
2018-05-16T13:16:55.000186883Z  
2018-05-16T13:16:56.001460542Z  2018-05-16 13:16:56,000 INFO success: agent entered RUNNING state, process has stayed up for &gt; than 1 seconds (startsecs)
2018-05-16T13:16:59.786953253Z  2018-05-16 13:16:59,786 DEBG 'agent' stdout output:
2018-05-16T13:16:59.786970986Z  time="2018-05-16 13:16:59.78612" level=info msg="Agent plugin state update." lastErr="&lt;nil&gt;" loc="statuscheck/plugin_impl_statuscheck.go(189)" logger=status-check plugin=etcdv3 state=ok
2018-05-16T13:16:59.786985225Z  
2018-05-16T13:16:59.790381282Z  2018-05-16 13:16:59,789 DEBG 'agent' stdout output:
2018-05-16T13:16:59.790395892Z  time="2018-05-16 13:16:59.78895" level=info msg="Agent plugin state update." lastErr="&lt;nil&gt;" loc="statuscheck/plugin_impl_statuscheck.go(189)" logger=status-check plugin=kafka state=ok
2018-05-16T13:16:59.790399729Z  </msg>
<msg timestamp="20180516 15:22:02.979" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:22:02.979" starttime="20180516 15:22:02.979"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:22:02.980" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:22:02.980" starttime="20180516 15:22:02.980"></status>
</kw>
<msg timestamp="20180516 15:22:02.980" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:22:02.980" starttime="20180516 15:22:02.980"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} on ${machine}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:22:02.981" starttime="20180516 15:22:02.980"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${log}'=='true'</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:22:02.981" starttime="20180516 15:22:02.981"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:22:02.982" starttime="20180516 15:22:02.981"></status>
</kw>
<msg timestamp="20180516 15:22:02.982" level="INFO">${log} = 2018-05-16T13:16:53.745731558Z  2018-05-16 13:16:53,745 CRIT Supervisor running as root (no user in config file)
2018-05-16T13:16:53.748191060Z  2018-05-16 13:16:53,747 INFO supervisord started with ...</msg>
<status status="PASS" endtime="20180516 15:22:02.982" starttime="20180516 15:22:02.785"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${node}_container_agent.log</arg>
<arg>${log}</arg>
</arguments>
<msg timestamp="20180516 15:22:02.983" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_node_1_container_agent.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_node_1_container_agent.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:22:02.983" starttime="20180516 15:22:02.982"></status>
</kw>
<kw name="Log ${node} Output" library="setup-teardown">
<doc>*Log ${machine} Output*</doc>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<msg timestamp="20180516 15:22:02.988" level="INFO">node_1</msg>
<status status="PASS" endtime="20180516 15:22:02.988" starttime="20180516 15:22:02.988"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:22:02.989" starttime="20180516 15:22:02.988"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>delay=${SSH_READ_DELAY}s</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20180516 15:22:05.992" level="INFO">${out} = </msg>
<status status="PASS" endtime="20180516 15:22:05.992" starttime="20180516 15:22:02.989"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:22:05.992" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:22:05.992" starttime="20180516 15:22:05.992"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:22:05.993" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_node_1.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_node_1.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:22:05.993" starttime="20180516 15:22:05.993"></status>
</kw>
<status status="PASS" endtime="20180516 15:22:05.993" starttime="20180516 15:22:02.987"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${node}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:22:05.994" starttime="20180516 15:22:05.994"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20180516 15:22:06.060" starttime="20180516 15:22:05.994"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"vpp" in "${node}"</arg>
<arg>Remove VPP Connections</arg>
<arg>${node}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:22:06.061" starttime="20180516 15:22:06.060"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"libmemif" in "${node}"</arg>
<arg>Remove LM Connections</arg>
<arg>${node}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:22:06.061" starttime="20180516 15:22:06.061"></status>
</kw>
<kw name="Remove Values From List" library="Collections">
<doc>Removes all occurrences of given ``values`` from ``list``.</doc>
<arguments>
<arg>${NODES}</arg>
<arg>${node}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:22:06.063" starttime="20180516 15:22:06.062"></status>
</kw>
<kw name="Execute On Machine" library="ssh">
<doc>*Execute On Machine ${machine} ${command}*</doc>
<arguments>
<arg>docker</arg>
<arg>${DOCKER_COMMAND} rm -f ${node}</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${log}</arg>
</arguments>
<msg timestamp="20180516 15:22:06.073" level="INFO">docker</msg>
<msg timestamp="20180516 15:22:06.074" level="INFO">sudo docker rm -f node_1</msg>
<msg timestamp="20180516 15:22:06.074" level="INFO">true</msg>
<status status="PASS" endtime="20180516 15:22:06.074" starttime="20180516 15:22:06.073"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:22:06.074" starttime="20180516 15:22:06.074"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:22:06.075" level="INFO">${currdate} = 2018-05-16 15:22:06.074</msg>
<status status="PASS" endtime="20180516 15:22:06.075" starttime="20180516 15:22:06.074"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20180516 15:22:06.076" level="INFO">Executing command 'sudo docker rm -f node_1'.</msg>
<msg timestamp="20180516 15:22:06.834" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:22:06.835" level="INFO">${out} = node_1</msg>
<msg timestamp="20180516 15:22:06.835" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20180516 15:22:06.835" starttime="20180516 15:22:06.075"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${out}</arg>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:22:06.835" level="INFO">node_1</msg>
<msg timestamp="20180516 15:22:06.835" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:22:06.835" starttime="20180516 15:22:06.835"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:22:06.837" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:22:06.837" starttime="20180516 15:22:06.837"></status>
</kw>
<msg timestamp="20180516 15:22:06.837" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:22:06.837" starttime="20180516 15:22:06.836"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} on ${machine}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:22:06.838" starttime="20180516 15:22:06.838"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${log}'=='true'</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:22:06.839" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_docker.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_docker.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:22:06.840" starttime="20180516 15:22:06.839"></status>
</kw>
<status status="PASS" endtime="20180516 15:22:06.840" starttime="20180516 15:22:06.838"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:22:06.841" starttime="20180516 15:22:06.840"></status>
</kw>
<status status="PASS" endtime="20180516 15:22:06.841" starttime="20180516 15:22:06.073"></status>
</kw>
<status status="PASS" endtime="20180516 15:22:06.841" starttime="20180516 15:22:02.774"></status>
</kw>
<status status="PASS" endtime="20180516 15:22:06.841" starttime="20180516 15:22:02.773"></status>
</kw>
<kw type="foritem" name="${id} = node_2">
<kw name="Remove Node" library="docker">
<arguments>
<arg>${id}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${node}</arg>
</arguments>
<msg timestamp="20180516 15:22:06.843" level="INFO">node_2</msg>
<status status="PASS" endtime="20180516 15:22:06.843" starttime="20180516 15:22:06.842"></status>
</kw>
<kw name="Execute On Machine" library="ssh">
<doc>*Execute On Machine ${machine} ${command}*</doc>
<arguments>
<arg>docker</arg>
<arg>${DOCKER_COMMAND} logs --details -t ${node}</arg>
<arg>log=false</arg>
</arguments>
<assign>
<var>${log}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${log}</arg>
</arguments>
<msg timestamp="20180516 15:22:06.859" level="INFO">docker</msg>
<msg timestamp="20180516 15:22:06.859" level="INFO">sudo docker logs --details -t node_2</msg>
<msg timestamp="20180516 15:22:06.859" level="INFO">false</msg>
<status status="PASS" endtime="20180516 15:22:06.859" starttime="20180516 15:22:06.858"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:22:06.860" starttime="20180516 15:22:06.859"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:22:06.861" level="INFO">${currdate} = 2018-05-16 15:22:06.860</msg>
<status status="PASS" endtime="20180516 15:22:06.861" starttime="20180516 15:22:06.860"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20180516 15:22:06.862" level="INFO">Executing command 'sudo docker logs --details -t node_2'.</msg>
<msg timestamp="20180516 15:22:07.084" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:22:07.085" level="INFO">${out} = 2018-05-16T13:17:02.052280008Z  2018-05-16 13:17:02,051 CRIT Supervisor running as root (no user in config file)
2018-05-16T13:17:02.056796523Z  2018-05-16 13:17:02,056 INFO supervisord started with ...</msg>
<msg timestamp="20180516 15:22:07.085" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20180516 15:22:07.085" starttime="20180516 15:22:06.862"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${out}</arg>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:22:07.086" level="INFO">2018-05-16T13:17:02.052280008Z  2018-05-16 13:17:02,051 CRIT Supervisor running as root (no user in config file)
2018-05-16T13:17:02.056796523Z  2018-05-16 13:17:02,056 INFO supervisord started with pid 1
2018-05-16T13:17:03.058574684Z  2018-05-16 13:17:03,057 INFO spawned: 'agent' with pid 7
2018-05-16T13:17:03.074455531Z  2018-05-16 13:17:03,073 DEBG 'agent' stdout output:
2018-05-16T13:17:03.074491265Z  time="2018-05-16 13:17:03.07095" level=info msg="Starting agent v1.1-5-g55e9977" BuildDate="2018-03-06T11:05+00:00" CommitHash=55e99770087087fa8e41a980a8b6257c80c93f4c loc="core/agent_core.go(195)" logger=defaultLogger
2018-05-16T13:17:03.074497702Z  
2018-05-16T13:17:03.074500026Z  2018-05-16 13:17:03,073 DEBG 'agent' stdout output:
2018-05-16T13:17:03.074502485Z  time="2018-05-16 13:17:03.07363" level=info msg="plugin Logs: Init took 50.857µs" durationInNs=50857 loc="core/agent_core.go(295)" logger=defaultLogger
2018-05-16T13:17:03.074505603Z  
2018-05-16T13:17:03.075238304Z  2018-05-16 13:17:03,073 DEBG 'agent' stdout output:
2018-05-16T13:17:03.075259403Z  time="2018-05-16 13:17:03.07382" level=debug msg="Microservice label is set to node_2" loc="servicelabel/plugin_impl_servicelabel.go(49)" logger=defaultLogger
2018-05-16T13:17:03.075278949Z  
2018-05-16T13:17:03.077082767Z  2018-05-16 13:17:03,074 DEBG 'agent' stdout output:
2018-05-16T13:17:03.077098032Z  time="2018-05-16 13:17:03.07469" level=info msg="plugin ServiceLabel: Init took 866.981µs" durationInNs=866981 loc="core/agent_core.go(295)" logger=defaultLogger
2018-05-16T13:17:03.077102434Z  
2018-05-16T13:17:03.077104808Z  2018-05-16 13:17:03,076 DEBG 'agent' stdout output:
2018-05-16T13:17:03.077107223Z  time="2018-05-16 13:17:03.07640" level=info msg="plugin StatusCheck: Init took 2.498µs" durationInNs=2498 loc="core/agent_core.go(295)" logger=defaultLogger
2018-05-16T13:17:03.077109910Z  
2018-05-16T13:17:03.083101026Z  2018-05-16 13:17:03,082 DEBG 'agent' stdout output:
2018-05-16T13:17:03.083116261Z  time="2018-05-16 13:17:03.07994" level=info msg="Connecting to etcd took 3.022259ms" durationInNs=3022259 loc="etcdv3/bytes_broker_impl.go(85)" logger=etcdv3
2018-05-16T13:17:03.083119879Z  time="2018-05-16 13:17:03.08007" level=info msg="Plugin etcdv3: status check probe registered" loc="statuscheck/plugin_impl_statuscheck.go(144)" logger=status-check
2018-05-16T13:17:03.083122668Z  time="2018-05-16 13:17:03.08010" level=info msg="plugin ETCD: Init took 3.463982ms" durationInNs=3463982 loc="core/agent_core.go(295)" logger=defaultLogger
2018-05-16T13:17:03.083125410Z  time="2018-05-16 13:17:03.08012" level=info msg="plugin ETCDDataSync: Init took 1.033µs" durationInNs=1033 loc="core/agent_core.go(295)" logger=defaultLogger
2018-05-16T13:17:03.083129059Z  
2018-05-16T13:17:03.087918733Z  2018-05-16 13:17:03,087 DEBG 'agent' stdout output:
2018-05-16T13:17:03.087932317Z  time="2018-05-16 13:17:03.08513" level=info msg="Group ID is set to node_2" loc="kafka/plugin_impl_kafka.go(95)" logger=kafka
2018-05-16T13:17:03.087944791Z  time="2018-05-16 13:17:03.08526" level=info msg="Invalid partition -1 - defaulting to 0" loc="client/config.go(254)" logger=kafka
2018-05-16T13:17:03.087947935Z  time="2018-05-16 13:17:03.08534" level=info msg="Connecting to kafka took 109.88µs" durationInNs=109880 loc="mux/config.go(150)" logger=kafka
2018-05-16T13:17:03.087950921Z  time="2018-05-16 13:17:03.08538" level=info msg="plugin Kafka: Init took 5.221604ms" durationInNs=5221604 loc="core/agent_core.go(295)" logger=defaultLogger
2018-05-16T13:17:03.087953627Z  time="2018-05-16 13:17:03.08550" level=info msg="redis config not found  - skip loading this plugin" loc="redis/plugin_impl_redis.go(107)" logger=redis
2018-05-16T13:17:03.087956141Z  time="2018-05-16 13:17:03.08553" level=info msg="plugin Redis: Init took 119.906µs" durationInNs=119906 loc="core/agent_core.go(295)" logger=defaultLogger
2018-05-16T13:17:03.088397353Z  time="2018-05-16 13:17:03.08558" level=info msg="plugin RedisDataSync: Init took 1.712µs" durationInNs=1712 loc="core/agent_core.go(295)" logger=defaultLogger
2018-05-16T13:17:03.088405847Z  time="2018-05-16 13:17:03.08567" level=info msg="cassandra client config not found  - skip loading this plugin" loc="cassandra/plugin_impl_cassa.go(72)" logger=cassandra
2018-05-16T13:17:03.088408773Z  time="2018-05-16 13:17:03.08571" level=info msg="plugin Cassandra: Init took 96.329µs" durationInNs=96329 loc="core/agent_core.go(295)" logger=defaultLogger
2018-05-16T13:17:03.088411386Z  time="2018-05-16 13:17:03.08573" level=info msg="plugin ResyncOrch: Init took 635ns" durationInNs=635 loc="core/agent_core.go(295)" logger=defaultLogger
2018-05-16T13:17:03.088413872Z  time="2018-05-16 13:17:03.08578" level=info msg="plugin HTTP: Init took 29.815µs" durationInNs=29815 loc="core/agent_core.go(295)" logger=defaultLogger
2018-05-16T13:17:03.088416398Z  time="2018-05-16 13:17:03.08583" level=info msg=init loc="rest/plugin_impl_fork.go(65)" logger=http-probe probePort=9191
2018-05-16T13:17:03.088418836Z  
2018-05-16T13:17:03.088421017Z  2018-05-16 13:17:03,088 DEBG 'agent' stdout output:
2018-05-16T13:17:03.088423307Z  time="2018-05-16 13:17:03.08813" level=info msg="plugin HTTPProbe: Init took 55.893µs" durationInNs=55893 loc="core/agent_core.go(295)" logger=defaultLogger
2018-05-16T13:17:03.088425850Z  
2018-05-16T13:17:03.089397767Z  2018-05-16 13:17:03,088 DEBG 'agent' stdout output:
2018-05-16T13:17:03.089405909Z  time="2018-05-16 13:17:03.08830" level=info msg="plugin Prometheus: Init took 1.526µs" durationInNs=1526 loc="core/agent_core.go(295)" logger=defaultLogger
2018-05-16T13:17:03.089409165Z  
2018-05-16T13:17:03.089411495Z  2018-05-16 13:17:03,089 DEBG 'agent' stdout output:
2018-05-16T13:17:03.089413772Z  time="2018-05-16 13:17:03.08898" level=info msg="plugin HealthRPC: Init took 322ns" durationInNs=322 loc="core/agent_core.go(295)" logger=defaultLogger
2018-05-16T13:17:03.089416265Z  
2018-05-16T13:17:03.090394681Z  2018-05-16 13:17:03,089 DEBG 'agent' stdout output:
2018-05-16T13:17:03.090403345Z  time="2018-05-16 13:17:03.08918" level=info msg="GaugeFunc('service_health') registered." loc="prometheus/plugin_impl_prometheus.go(189)" logger=prometheus
2018-05-16T13:17:03.090411720Z  
2018-05-16T13:17:03.090414394Z  2018-05-16 13:17:03,090 DEBG 'agent' stdout output:
2018-05-16T13:17:03.090416706Z  time="2018-05-16 13:17:03.08997" level=info msg="GaugeFunc('service_info') registered." loc="prometheus/plugin_impl_prometheus.go(189)" logger=prometheus
2018-05-16T13:17:03.090419245Z  
2018-05-16T13:17:03.090421358Z  2018-05-16 13:17:03,090 DEBG 'agent' stdout output:
2018-05-16T13:17:03.090423515Z  time="2018-05-16 13:17:03.09014" level=info msg="plugin PrometheusRPC: Init took 993.595µs" durationInNs=993595 loc="core/agent_core.go(295)" logger=defaultLogger
2018-05-16T13:17:03.090426292Z  
2018-05-16T13:17:03.091487200Z  2018-05-16 13:17:03,090 DEBG 'agent' stdout output:
2018-05-16T13:17:03.091495850Z  time="2018-05-16 13:17:03.09091" level=info msg="plugin GRPC: Init took 601.698µs" durationInNs=601698 loc="core/agent_core.go(295)" logger=defaultLogger
2018-05-16T13:17:03.091499241Z  
2018-05-16T13:17:03.092512018Z  2018-05-16 13:17:03,091 DEBG 'agent' stdout output:
2018-05-16T13:17:03.092520548Z  time="2018-05-16 13:17:03.09119" level=info msg="plugin Logs: AfterInit took 94.253µs" durationInNs=94253 loc="core/agent_core.go(345)" logger=defaultLogger
2018-05-16T13:17:03.092523751Z  
2018-05-16T13:17:03.094950737Z  2018-05-16 13:17:03,094 DEBG 'agent' stdout output:
2018-05-16T13:17:03.094962030Z  time="2018-05-16 13:17:03.09201" level=info msg="plugin ServiceLabel: not implement AfterInit" loc="core/agent_core.go(348)" logger=defaultLogger
2018-05-16T13:17:03.094965287Z  time="2018-05-16 13:17:03.09205" level=info msg="plugin StatusCheck: AfterInit took 5.331µs" durationInNs=5331 loc="core/agent_core.go(345)" logger=defaultLogger
2018-05-16T13:17:03.094968418Z  time="2018-05-16 13:17:03.09208" level=info msg="plugin ETCD: AfterInit took 229ns" durationInNs=229 loc="core/agent_core.go(345)" logger=defaultLogger
2018-05-16T13:17:03.094971014Z  time="2018-05-16 13:17:03.09210" level=info msg="plugin ETCDDataSync: AfterInit took 3.066µs" durationInNs=3066 loc="core/agent_core.go(345)" logger=defaultLogger
2018-05-16T13:17:03.094973564Z  
2018-05-16T13:17:03.103467816Z  2018-05-16 13:17:03,102 DEBG 'agent' stdout output:
2018-05-16T13:17:03.103491052Z  time="2018-05-16 13:17:03.10208" level=info msg="Plugin kafka: status check probe registered" loc="statuscheck/plugin_impl_statuscheck.go(144)" logger=status-check
2018-05-16T13:17:03.103496996Z  
2018-05-16T13:17:03.107161116Z  2018-05-16 13:17:03,106 DEBG 'agent' stdout output:
2018-05-16T13:17:03.107174137Z  time="2018-05-16 13:17:03.10425" level=info msg="plugin Kafka: AfterInit took 12.095697ms" durationInNs=12095697 loc="core/agent_core.go(345)" logger=defaultLogger
2018-05-16T13:17:03.107177499Z  
2018-05-16T13:17:03.107179781Z  2018-05-16 13:17:03,106 DEBG 'agent' stdout output:
2018-05-16T13:17:03.107383629Z  time="2018-05-16 13:17:03.10687" level=info msg="plugin Redis: AfterInit took 473ns" durationInNs=473 loc="core/agent_core.go(345)" logger=defaultLogger
2018-05-16T13:17:03.107401068Z  
2018-05-16T13:17:03.108447337Z  2018-05-16 13:17:03,107 DEBG 'agent' stdout output:
2018-05-16T13:17:03.108468870Z  time="2018-05-16 13:17:03.10727" level=info msg="plugin RedisDataSync: AfterInit took 676ns" durationInNs=676 loc="core/agent_core.go(345)" logger=defaultLogger
2018-05-16T13:17:03.108472263Z  
2018-05-16T13:17:03.108474561Z  2018-05-16 13:17:03,107 DEBG 'agent' stdout output:
2018-05-16T13:17:03.108476902Z  time="2018-05-16 13:17:03.10757" level=info msg="plugin Cassandra: AfterInit took 644ns" durationInNs=644 loc="core/agent_core.go(345)" logger=defaultLogger
2018-05-16T13:17:03.108479484Z  
2018-05-16T13:17:03.108481735Z  2018-05-16 13:17:03,107 DEBG 'agent' stdout output:
2018-05-16T13:17:03.108484028Z  time="2018-05-16 13:17:03.10773" level=info msg="Resync order[]" loc="resync/plugin_impl_resync.go(98)" logger=resync-orch
2018-05-16T13:17:03.108486556Z  
2018-05-16T13:17:03.108488682Z  2018-05-16 13:17:03,107 DEBG 'agent' stdout output:
2018-05-16T13:17:03.108490899Z  time="2018-05-16 13:17:03.10790" level=info msg="Resync took 111ns" durationInNs=111 loc="resync/plugin_impl_resync.go(115)" logger=resync-orch
2018-05-16T13:17:03.108507427Z  
2018-05-16T13:17:03.108509540Z  2018-05-16 13:17:03,108 DEBG 'agent' stdout output:
2018-05-16T13:17:03.108511862Z  time="2018-05-16 13:17:03.10806" level=info msg="plugin ResyncOrch: AfterInit took 336.117µs" durationInNs=336117 loc="core/agent_core.go(345)" logger=defaultLogger
2018-05-16T13:17:03.108531428Z  
2018-05-16T13:17:03.109361144Z  2018-05-16 13:17:03,108 DEBG 'agent' stdout output:
2018-05-16T13:17:03.109369156Z  time="2018-05-16 13:17:03.10821" level=info msg="Listening on http://0.0.0.0:9191" loc="rest/plugin_impl_rest.go(100)" logger=http
2018-05-16T13:17:03.109372007Z  
2018-05-16T13:17:03.210615211Z  2018-05-16 13:17:03,209 DEBG 'agent' stdout output:
2018-05-16T13:17:03.210630033Z  time="2018-05-16 13:17:03.20957" level=info msg="plugin HTTP: AfterInit took 101.055912ms" durationInNs=101055912 loc="core/agent_core.go(345)" logger=defaultLogger
2018-05-16T13:17:03.210635097Z  
2018-05-16T13:17:03.210637980Z  2018-05-16 13:17:03,210 DEBG 'agent' stdout output:
2018-05-16T13:17:03.210641093Z  time="2018-05-16 13:17:03.20997" level=info msg="plugin HTTPProbe: AfterInit took 542ns" durationInNs=542 loc="core/agent_core.go(345)" logger=defaultLogger
2018-05-16T13:17:03.210644231Z  
2018-05-16T13:17:03.210646365Z  2018-05-16 13:17:03,210 DEBG 'agent' stdout output:
2018-05-16T13:17:03.210650262Z  time="2018-05-16 13:17:03.21020" level=info msg="Serving /health on port 9191" loc="prometheus/plugin_impl_prometheus.go(84)" logger=prometheus
2018-05-16T13:17:03.210653927Z  
2018-05-16T13:17:03.211601882Z  2018-05-16 13:17:03,210 DEBG 'agent' stdout output:
2018-05-16T13:17:03.211632468Z  time="2018-05-16 13:17:03.21072" level=info msg="Serving /metrics on port 9191" loc="prometheus/plugin_impl_prometheus.go(84)" logger=prometheus
2018-05-16T13:17:03.211653628Z  
2018-05-16T13:17:03.211655844Z  2018-05-16 13:17:03,210 DEBG 'agent' stdout output:
2018-05-16T13:17:03.211658107Z  time="2018-05-16 13:17:03.21091" level=info msg="plugin Prometheus: AfterInit took 732.715µs" durationInNs=732715 loc="core/agent_core.go(345)" logger=defaultLogger
2018-05-16T13:17:03.211681548Z  
2018-05-16T13:17:03.211683815Z  2018-05-16 13:17:03,211 DEBG 'agent' stdout output:
2018-05-16T13:17:03.211686041Z  time="2018-05-16 13:17:03.21107" level=info msg="Starting health http-probe on port 9191" loc="probe/plugin_impl_probes.go(44)" logger=health-rpc
2018-05-16T13:17:03.211707836Z  
2018-05-16T13:17:03.211710246Z  2018-05-16 13:17:03,211 DEBG 'agent' stdout output:
2018-05-16T13:17:03.211712354Z  time="2018-05-16 13:17:03.21127" level=info msg="plugin HealthRPC: AfterInit took 202.056µs" durationInNs=202056 loc="core/agent_core.go(345)" logger=defaultLogger
2018-05-16T13:17:03.211714946Z  
2018-05-16T13:17:03.212587585Z  2018-05-16 13:17:03,211 DEBG 'agent' stdout output:
2018-05-16T13:17:03.212609783Z  time="2018-05-16 13:17:03.21177" level=info msg="k=etcdv3, v=last_change:1526476623 last_update:1526476623 , state=INIT" loc="probe/plugin_impl_prometheus.go(114)" logger=health-prometheus-rpc
2018-05-16T13:17:03.212634820Z  
2018-05-16T13:17:03.212637067Z  2018-05-16 13:17:03,212 DEBG 'agent' stdout output:
2018-05-16T13:17:03.212639316Z  time="2018-05-16 13:17:03.21195" level=info msg="DependencyHealth for plugin etcdv3: 0" loc="probe/plugin_impl_prometheus.go(152)" logger=health-prometheus-rpc
2018-05-16T13:17:03.212660760Z  
2018-05-16T13:17:03.212663004Z  2018-05-16 13:17:03,212 DEBG 'agent' stdout output:
2018-05-16T13:17:03.212665286Z  time="2018-05-16 13:17:03.21214" level=info msg="GaugeFunc('service_dependency_health') registered." loc="prometheus/plugin_impl_prometheus.go(189)" logger=prometheus
2018-05-16T13:17:03.212667876Z  
2018-05-16T13:17:03.212686223Z  2018-05-16 13:17:03,212 DEBG 'agent' stdout output:
2018-05-16T13:17:03.212688409Z  time="2018-05-16 13:17:03.21230" level=info msg="k=kafka, v=last_change:1526476623 last_update:1526476623 , state=INIT" loc="probe/plugin_impl_prometheus.go(114)" logger=health-prometheus-rpc
2018-05-16T13:17:03.212690960Z  
2018-05-16T13:17:03.213736589Z  2018-05-16 13:17:03,212 DEBG 'agent' stdout output:
2018-05-16T13:17:03.213763302Z  time="2018-05-16 13:17:03.21278" level=info msg="DependencyHealth for plugin kafka: 0" loc="probe/plugin_impl_prometheus.go(152)" logger=health-prometheus-rpc
2018-05-16T13:17:03.213766517Z  
2018-05-16T13:17:03.215493703Z  2018-05-16 13:17:03,213 DEBG 'agent' stdout output:
2018-05-16T13:17:03.215509044Z  time="2018-05-16 13:17:03.21322" level=info msg="GaugeFunc('service_dependency_health') registered." loc="prometheus/plugin_impl_prometheus.go(189)" logger=prometheus
2018-05-16T13:17:03.215512555Z  
2018-05-16T13:17:03.215514814Z  2018-05-16 13:17:03,214 DEBG 'agent' stdout output:
2018-05-16T13:17:03.215517182Z  time="2018-05-16 13:17:03.21478" level=info msg="plugin PrometheusRPC: AfterInit took 3.305617ms" durationInNs=3305617 loc="core/agent_core.go(345)" logger=defaultLogger
2018-05-16T13:17:03.215519829Z  
2018-05-16T13:17:03.217412920Z  2018-05-16 13:17:03,215 DEBG 'agent' stdout output:
2018-05-16T13:17:03.217421091Z  time="2018-05-16 13:17:03.21509" level=info msg="Listening GRPC on tcp://" loc="grpc/plugin_impl_grpc.go(119)" logger=grpc
2018-05-16T13:17:03.217424253Z  
2018-05-16T13:17:03.317863799Z  2018-05-16 13:17:03,317 DEBG 'agent' stdout output:
2018-05-16T13:17:03.317877008Z  time="2018-05-16 13:17:03.31688" level=info msg="plugin GRPC: AfterInit took 101.774202ms" durationInNs=101774202 loc="core/agent_core.go(345)" logger=defaultLogger
2018-05-16T13:17:03.317880558Z  time="2018-05-16 13:17:03.31693" level=info msg="All plugins initialized successfully, took 243.345802ms" durationInNs=243345802 loc="core/agent_core.go(365)" logger=defaultLogger
2018-05-16T13:17:03.317883382Z  time="2018-05-16 13:17:03.31695" level=info msg="Agent Init took 17.509117ms" durationInNs=17509117 loc="core/agent_core.go(366)" logger=defaultLogger
2018-05-16T13:17:03.317885950Z  time="2018-05-16 13:17:03.31699" level=info msg="Agent AfterInit took 225.836685ms" durationInNs=225836685 loc="core/agent_core.go(367)" logger=defaultLogger
2018-05-16T13:17:03.317888615Z  
2018-05-16T13:17:04.318066654Z  2018-05-16 13:17:04,317 INFO success: agent entered RUNNING state, process has stayed up for &gt; than 1 seconds (startsecs)
2018-05-16T13:17:08.097649434Z  2018-05-16 13:17:08,096 DEBG 'agent' stdout output:
2018-05-16T13:17:08.097662974Z  time="2018-05-16 13:17:08.09674" level=info msg="Agent plugin state update." lastErr="&lt;nil&gt;" loc="statuscheck/plugin_impl_statuscheck.go(189)" logger=status-check plugin=etcdv3 state=ok
2018-05-16T13:17:08.097666795Z  
2018-05-16T13:17:08.101308391Z  2018-05-16 13:17:08,100 DEBG 'agent' stdout output:
2018-05-16T13:17:08.101321013Z  time="2018-05-16 13:17:08.10023" level=info msg="Agent plugin state update." lastErr="&lt;nil&gt;" loc="statuscheck/plugin_impl_statuscheck.go(189)" logger=status-check plugin=kafka state=ok
2018-05-16T13:17:08.101324882Z  </msg>
<msg timestamp="20180516 15:22:07.087" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:22:07.087" starttime="20180516 15:22:07.085"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:22:07.088" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:22:07.089" starttime="20180516 15:22:07.088"></status>
</kw>
<msg timestamp="20180516 15:22:07.089" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:22:07.089" starttime="20180516 15:22:07.087"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} on ${machine}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:22:07.090" starttime="20180516 15:22:07.089"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${log}'=='true'</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:22:07.091" starttime="20180516 15:22:07.090"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:22:07.092" starttime="20180516 15:22:07.091"></status>
</kw>
<msg timestamp="20180516 15:22:07.092" level="INFO">${log} = 2018-05-16T13:17:02.052280008Z  2018-05-16 13:17:02,051 CRIT Supervisor running as root (no user in config file)
2018-05-16T13:17:02.056796523Z  2018-05-16 13:17:02,056 INFO supervisord started with ...</msg>
<status status="PASS" endtime="20180516 15:22:07.092" starttime="20180516 15:22:06.857"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${node}_container_agent.log</arg>
<arg>${log}</arg>
</arguments>
<msg timestamp="20180516 15:22:07.093" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_node_2_container_agent.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_node_2_container_agent.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:22:07.093" starttime="20180516 15:22:07.093"></status>
</kw>
<kw name="Log ${node} Output" library="setup-teardown">
<doc>*Log ${machine} Output*</doc>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<msg timestamp="20180516 15:22:07.102" level="INFO">node_2</msg>
<status status="PASS" endtime="20180516 15:22:07.102" starttime="20180516 15:22:07.102"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:22:07.102" starttime="20180516 15:22:07.102"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>delay=${SSH_READ_DELAY}s</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20180516 15:22:10.106" level="INFO">${out} = </msg>
<status status="PASS" endtime="20180516 15:22:10.106" starttime="20180516 15:22:07.103"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:22:10.107" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:22:10.107" starttime="20180516 15:22:10.107"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:22:10.108" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_node_2.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_node_2.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:22:10.108" starttime="20180516 15:22:10.107"></status>
</kw>
<status status="PASS" endtime="20180516 15:22:10.108" starttime="20180516 15:22:07.101"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${node}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:22:10.109" starttime="20180516 15:22:10.108"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20180516 15:22:10.225" starttime="20180516 15:22:10.109"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"vpp" in "${node}"</arg>
<arg>Remove VPP Connections</arg>
<arg>${node}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:22:10.226" starttime="20180516 15:22:10.226"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"libmemif" in "${node}"</arg>
<arg>Remove LM Connections</arg>
<arg>${node}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:22:10.226" starttime="20180516 15:22:10.226"></status>
</kw>
<kw name="Remove Values From List" library="Collections">
<doc>Removes all occurrences of given ``values`` from ``list``.</doc>
<arguments>
<arg>${NODES}</arg>
<arg>${node}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:22:10.227" starttime="20180516 15:22:10.227"></status>
</kw>
<kw name="Execute On Machine" library="ssh">
<doc>*Execute On Machine ${machine} ${command}*</doc>
<arguments>
<arg>docker</arg>
<arg>${DOCKER_COMMAND} rm -f ${node}</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${log}</arg>
</arguments>
<msg timestamp="20180516 15:22:10.245" level="INFO">docker</msg>
<msg timestamp="20180516 15:22:10.245" level="INFO">sudo docker rm -f node_2</msg>
<msg timestamp="20180516 15:22:10.245" level="INFO">true</msg>
<status status="PASS" endtime="20180516 15:22:10.245" starttime="20180516 15:22:10.244"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:22:10.245" starttime="20180516 15:22:10.245"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:22:10.246" level="INFO">${currdate} = 2018-05-16 15:22:10.246</msg>
<status status="PASS" endtime="20180516 15:22:10.246" starttime="20180516 15:22:10.246"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20180516 15:22:10.247" level="INFO">Executing command 'sudo docker rm -f node_2'.</msg>
<msg timestamp="20180516 15:22:10.987" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:22:10.987" level="INFO">${out} = node_2</msg>
<msg timestamp="20180516 15:22:10.987" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20180516 15:22:10.987" starttime="20180516 15:22:10.246"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${out}</arg>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:22:10.988" level="INFO">node_2</msg>
<msg timestamp="20180516 15:22:10.988" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:22:10.988" starttime="20180516 15:22:10.988"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:22:10.989" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:22:10.989" starttime="20180516 15:22:10.989"></status>
</kw>
<msg timestamp="20180516 15:22:10.989" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:22:10.989" starttime="20180516 15:22:10.988"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} on ${machine}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:22:10.990" starttime="20180516 15:22:10.989"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${log}'=='true'</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:22:10.991" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_docker.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_docker.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:22:10.991" starttime="20180516 15:22:10.990"></status>
</kw>
<status status="PASS" endtime="20180516 15:22:10.991" starttime="20180516 15:22:10.990"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:22:10.992" starttime="20180516 15:22:10.991"></status>
</kw>
<status status="PASS" endtime="20180516 15:22:10.992" starttime="20180516 15:22:10.244"></status>
</kw>
<status status="PASS" endtime="20180516 15:22:10.992" starttime="20180516 15:22:06.842"></status>
</kw>
<status status="PASS" endtime="20180516 15:22:10.992" starttime="20180516 15:22:06.841"></status>
</kw>
<status status="PASS" endtime="20180516 15:22:10.992" starttime="20180516 15:21:52.366"></status>
</kw>
<kw name="Execute On Machine" library="ssh">
<doc>*Execute On Machine ${machine} ${command}*</doc>
<arguments>
<arg>docker</arg>
<arg>${DOCKER_COMMAND} ps -as</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${log}</arg>
</arguments>
<msg timestamp="20180516 15:22:11.003" level="INFO">docker</msg>
<msg timestamp="20180516 15:22:11.003" level="INFO">sudo docker ps -as</msg>
<msg timestamp="20180516 15:22:11.003" level="INFO">true</msg>
<status status="PASS" endtime="20180516 15:22:11.003" starttime="20180516 15:22:11.003"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:22:11.004" starttime="20180516 15:22:11.004"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:22:11.004" level="INFO">${currdate} = 2018-05-16 15:22:11.004</msg>
<status status="PASS" endtime="20180516 15:22:11.004" starttime="20180516 15:22:11.004"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20180516 15:22:11.005" level="INFO">Executing command 'sudo docker ps -as'.</msg>
<msg timestamp="20180516 15:22:11.206" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:22:11.206" level="INFO">${out} = CONTAINER ID        IMAGE                           COMMAND                  CREATED             STATUS              PORTS                                            NAMES               SIZE
9386c35dc...</msg>
<msg timestamp="20180516 15:22:11.206" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20180516 15:22:11.206" starttime="20180516 15:22:11.005"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${out}</arg>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:22:11.206" level="INFO">CONTAINER ID        IMAGE                           COMMAND                  CREATED             STATUS              PORTS                                            NAMES               SIZE
9386c35dc335        ligato/prod_sfc_controller      "/bin/sfc-controller…"   5 minutes ago       Up 4 minutes                                                         sfc_controller      810B (virtual 40.9MB)
2f7d62033432        ligato/vpp-agent:pantheon-dev   "bash"                   5 minutes ago       Up 5 minutes                                                         vpp_agent_ctl       0B (virtual 223MB)
5fd9956e4db0        quay.io/coreos/etcd:v3.0.16     "/usr/local/bin/etcd…"   6 minutes ago       Up 6 minutes        0.0.0.0:2379-&gt;2379/tcp, 2380/tcp                 etcd                145MB (virtual 187MB)
dbef312b260f        spotify/kafka                   "supervisord -n"         6 minutes ago       Up 6 minutes        0.0.0.0:2181-&gt;2181/tcp, 0.0.0.0:9092-&gt;9092/tcp   kafka               1.16GB (virtual 1.6GB)</msg>
<msg timestamp="20180516 15:22:11.206" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:22:11.207" starttime="20180516 15:22:11.206"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:22:11.207" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:22:11.208" starttime="20180516 15:22:11.207"></status>
</kw>
<msg timestamp="20180516 15:22:11.208" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:22:11.208" starttime="20180516 15:22:11.207"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} on ${machine}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:22:11.208" starttime="20180516 15:22:11.208"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${log}'=='true'</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:22:11.209" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_docker.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_docker.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:22:11.209" starttime="20180516 15:22:11.209"></status>
</kw>
<status status="PASS" endtime="20180516 15:22:11.209" starttime="20180516 15:22:11.208"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:22:11.210" starttime="20180516 15:22:11.210"></status>
</kw>
<status status="PASS" endtime="20180516 15:22:11.210" starttime="20180516 15:22:11.002"></status>
</kw>
<status status="PASS" endtime="20180516 15:22:11.210" starttime="20180516 15:21:52.365"></status>
</kw>
<kw type="teardown" name="TestTeardown">
<kw name="Make Datastore Snapshots" library="setup-teardown">
<arguments>
<arg>${TEST_NAME}_test_teardown</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tag}</arg>
</arguments>
<msg timestamp="20180516 15:22:11.215" level="INFO">Remove Agent Nodes Again_test_teardown</msg>
<status status="PASS" endtime="20180516 15:22:11.215" starttime="20180516 15:22:11.215"></status>
</kw>
<kw name="Create Next Snapshot Prefix" library="setup-teardown">
<assign>
<var>${prefix}</var>
</assign>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>str(${snapshot_num}).zfill(3)</arg>
</arguments>
<assign>
<var>${prefix}</var>
</assign>
<msg timestamp="20180516 15:22:11.216" level="INFO">${prefix} = 040</msg>
<status status="PASS" endtime="20180516 15:22:11.216" starttime="20180516 15:22:11.216"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${snapshot_num}+1</arg>
</arguments>
<assign>
<var>${snapshot_num}</var>
</assign>
<msg timestamp="20180516 15:22:11.217" level="INFO">${snapshot_num} = 41</msg>
<status status="PASS" endtime="20180516 15:22:11.217" starttime="20180516 15:22:11.217"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${snapshot_num}</arg>
</arguments>
<msg timestamp="20180516 15:22:11.217" level="INFO">${snapshot_num} = 41</msg>
<status status="PASS" endtime="20180516 15:22:11.217" starttime="20180516 15:22:11.217"></status>
</kw>
<msg timestamp="20180516 15:22:11.218" level="INFO">${prefix} = 040</msg>
<status status="PASS" endtime="20180516 15:22:11.218" starttime="20180516 15:22:11.215"></status>
</kw>
<kw name="Take ETCD Snapshots" library="setup-teardown">
<arguments>
<arg>${prefix}_${tag}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tag}</arg>
</arguments>
<msg timestamp="20180516 15:22:11.224" level="INFO">040_Remove Agent Nodes Again_test_teardown</msg>
<status status="PASS" endtime="20180516 15:22:11.225" starttime="20180516 15:22:11.224"></status>
</kw>
<kw name="Get ETCD Dump" library="setup-teardown">
<assign>
<var>${dump}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DOCKER_COMMAND} exec etcd etcdctl get --prefix="true" ""</arg>
</arguments>
<assign>
<var>${command}</var>
</assign>
<msg timestamp="20180516 15:22:11.226" level="INFO">${command} = sudo docker exec etcd etcdctl get --prefix="true" ""</msg>
<status status="PASS" endtime="20180516 15:22:11.226" starttime="20180516 15:22:11.225"></status>
</kw>
<kw name="Execute On Machine" library="ssh">
<doc>*Execute On Machine ${machine} sudo docker exec etcd etcdctl get --prefix="true" ""*</doc>
<arguments>
<arg>docker</arg>
<arg>${command}</arg>
<arg>log=false</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${log}</arg>
</arguments>
<msg timestamp="20180516 15:22:11.242" level="INFO">docker</msg>
<msg timestamp="20180516 15:22:11.242" level="INFO">sudo docker exec etcd etcdctl get --prefix="true" ""</msg>
<msg timestamp="20180516 15:22:11.242" level="INFO">false</msg>
<status status="PASS" endtime="20180516 15:22:11.242" starttime="20180516 15:22:11.239"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:22:11.243" starttime="20180516 15:22:11.242"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:22:11.243" level="INFO">${currdate} = 2018-05-16 15:22:11.243</msg>
<status status="PASS" endtime="20180516 15:22:11.243" starttime="20180516 15:22:11.243"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20180516 15:22:11.246" level="INFO">Executing command 'sudo docker exec etcd etcdctl get --prefix="true" ""'.</msg>
<msg timestamp="20180516 15:22:11.575" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:22:11.575" level="INFO">${out} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<msg timestamp="20180516 15:22:11.575" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20180516 15:22:11.575" starttime="20180516 15:22:11.246"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${out}</arg>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:22:11.576" level="INFO">/sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-containers","description":"Wire 2 VNF containers to the vpp switch","type":2,"elements":[{"container":"node_1","port_label":"node1_veth","etcd_vpp_switch_key":"agent_vpp_1","ipv4_addr":"10.0.0.10","type":3},{"container":"node_2","port_label":"node2_veth","etcd_vpp_switch_key":"agent_vpp_1","ipv4_addr":"10.0.0.11","type":3}]}
/sfc-controller/v1/SP
{"mtu":1500,"starting_vlan_id":5000,"default_static_route_weight":5,"dynamic_bridge_parms":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true},"static_bridge_parms":{"forward":true}}
/sfc-controller/v1/id/HE/agent_vpp_1
{"name":"agent_vpp_1"}
/sfc-controller/v1/id/SFC/two-sample-vnf-containers/node_1_node1_veth
{"sfc_name":"two-sample-vnf-containers","container":"node_1","port":"node1_veth","mac_addr_id":1,"veth_id":1}
/sfc-controller/v1/id/SFC/two-sample-vnf-containers/node_2_node2_veth
{"sfc_name":"two-sample-vnf-containers","container":"node_2","port":"node2_veth","mac_addr_id":2,"veth_id":2}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VNF_node_1_node1_veth
{"name":"IF_VETH_VNF_node_1_node1_veth","enabled":true,"phys_address":"02:00:00:00:00:01","mtu":1500,"host_if_name":"node1_veth","ip_addresses":["10.0.0.10/24"],"namespace":{"type":1,"microservice":"node_1"},"veth":{"peer_if_name":"IF_VETH_VSWITCH_node_1_node1_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VNF_node_2_node2_veth
{"name":"IF_VETH_VNF_node_2_node2_veth","enabled":true,"phys_address":"02:00:00:00:00:02","mtu":1500,"host_if_name":"node2_veth","ip_addresses":["10.0.0.11/24"],"namespace":{"type":1,"microservice":"node_2"},"veth":{"peer_if_name":"IF_VETH_VSWITCH_node_2_node2_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VSWITCH_node_1_node1_veth
{"name":"IF_VETH_VSWITCH_node_1_node1_veth","enabled":true,"mtu":1500,"host_if_name":"node_1_noeth_1","namespace":{"type":1,"microservice":"agent_vpp_1"},"veth":{"peer_if_name":"IF_VETH_VNF_node_1_node1_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VSWITCH_node_2_node2_veth
{"name":"IF_VETH_VSWITCH_node_2_node2_veth","enabled":true,"mtu":1500,"host_if_name":"node_2_noeth_2","namespace":{"type":1,"microservice":"agent_vpp_1"},"veth":{"peer_if_name":"IF_VETH_VNF_node_2_node2_veth"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/BD_INTERNAL_EW_L2FIB_agent_vpp_1
{"name":"BD_INTERNAL_EW_L2FIB_agent_vpp_1","forward":true}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/BD_INTERNAL_EW_agent_vpp_1
{"name":"BD_INTERNAL_EW_agent_vpp_1","flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true,"interfaces":[{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth"},{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth"}]}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/bd2
{
  "name": "bd2",
  "flood": true,
  "unknown_unicast_flood": true,
  "forward": true,
  "learn": true,
  "arp_termination": true,
  "interfaces": [
    { "name": "loop0" },{ "name": "loop1" }
  ]
}


/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth
{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","type":4,"enabled":true,"mtu":1500,"afpacket":{"host_if_name":"node_1_noeth_1"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth
{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","type":4,"enabled":true,"mtu":1500,"afpacket":{"host_if_name":"node_2_noeth_2"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_LOOPBACK_H_agent_vpp_1
{"name":"IF_LOOPBACK_H_agent_vpp_1","enabled":true,"phys_address":"02:00:00:AA:BB:00","mtu":1500,"ip_addresses":["6.0.0.100"]}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/loop0
{
  "name": "loop0",
  "type": 0,
  "enabled": true,
  "phys_address": "8a:f1:be:90:00:00",
  "mtu": 1500,
  "vrf": 0,
  "ip_addresses": [
    "20.1.1.1/24"
  ]
}


/vnf-agent/agent_vpp_1/vpp/config/v1/interface/loop1
{
  "name": "loop1",
  "type": 0,
  "enabled": true,
  "phys_address": "8a:f1:be:90:20:00",
  "mtu": 1500,
  "vrf": 0,
  "ip_addresses": [
    "30.1.1.1/24"
  ]
}


/vnf-agent/agent_vpp_1/vpp/status/v1/bd/BD_INTERNAL_EW_L2FIB_agent_vpp_1
{"index":2,"internal_name":"BD_INTERNAL_EW_L2FIB_agent_vpp_1","bvi_interface":"not_set","last_change":1526476631,"l2_params":{"forward":true}}
/vnf-agent/agent_vpp_1/vpp/status/v1/bd/BD_INTERNAL_EW_agent_vpp_1
{"index":1,"internal_name":"BD_INTERNAL_EW_agent_vpp_1","bvi_interface":"not_set","interface_count":2,"last_change":1526476631,"l2_params":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true},"interfaces":[{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","sw_if_index":2},{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","sw_if_index":3}]}
/vnf-agent/agent_vpp_1/vpp/status/v1/bd/bd2
{"index":3,"internal_name":"bd2","bvi_interface":"not_set","interface_count":2,"last_change":1526476768,"l2_params":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true,"arp_termination":true},"interfaces":[{"name":"loop0","sw_if_index":4},{"name":"loop1","sw_if_index":5}]}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth
{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","internal_name":"host-node_1_noeth_1","if_index":2,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:3e:fd:61:28","mtu":1500,"statistics":{"in_packets":20,"in_bytes":1552}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth
{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","internal_name":"host-node_2_noeth_2","if_index":3,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:42:98:22:08","mtu":1500,"statistics":{"in_packets":22,"in_bytes":1732}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_LOOPBACK_H_agent_vpp_1
{"name":"IF_LOOPBACK_H_agent_vpp_1","internal_name":"loop0","if_index":1,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:00:00:aa:bb:00","mtu":1500,"statistics":{}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/local0
{"name":"local0","internal_name":"local0","admin_status":2,"oper_status":2,"statistics":{}}
/vnf-agent/node_1/check/status/v1/agent
{"build_version":"v1.1-5-g55e9977","build_date":"2018-03-06T11:05+00:00","state":1,"start_time":1526476614,"last_change":1526476619,"last_update":1526476925,"commit_hash":"55e99770087087fa8e41a980a8b6257c80c93f4c"}
/vnf-agent/node_1/check/status/v1/plugin/etcdv3
{"state":1,"last_change":1526476619,"last_update":1526476925}
/vnf-agent/node_1/check/status/v1/plugin/kafka
{"state":1,"last_change":1526476619,"last_update":1526476925}
/vnf-agent/node_2/check/status/v1/agent
{"build_version":"v1.1-5-g55e9977","build_date":"2018-03-06T11:05+00:00","state":1,"start_time":1526476623,"last_change":1526476628,"last_update":1526476923,"commit_hash":"55e99770087087fa8e41a980a8b6257c80c93f4c"}
/vnf-agent/node_2/check/status/v1/plugin/etcdv3
{"state":1,"last_change":1526476628,"last_update":1526476923}
/vnf-agent/node_2/check/status/v1/plugin/kafka
{"state":1,"last_change":1526476628,"last_update":1526476923}</msg>
<msg timestamp="20180516 15:22:11.576" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:22:11.576" starttime="20180516 15:22:11.576"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:22:11.577" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:22:11.577" starttime="20180516 15:22:11.577"></status>
</kw>
<msg timestamp="20180516 15:22:11.577" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:22:11.577" starttime="20180516 15:22:11.576"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} on ${machine}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:22:11.578" starttime="20180516 15:22:11.578"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${log}'=='true'</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:22:11.578" starttime="20180516 15:22:11.578"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:22:11.579" starttime="20180516 15:22:11.579"></status>
</kw>
<msg timestamp="20180516 15:22:11.579" level="INFO">${out} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<status status="PASS" endtime="20180516 15:22:11.579" starttime="20180516 15:22:11.239"></status>
</kw>
<msg timestamp="20180516 15:22:11.579" level="INFO">${dump} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<status status="PASS" endtime="20180516 15:22:11.579" starttime="20180516 15:22:11.225"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/etcd_dump-${tag}.txt</arg>
<arg>${dump}</arg>
</arguments>
<msg timestamp="20180516 15:22:11.580" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/etcd_dump-040_Remove Agent Nodes Again_test_teardown.txt"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/etcd_dump-040_Remove Agent Nodes Again_test_teardown.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:22:11.580" starttime="20180516 15:22:11.579"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${dump}</arg>
<arg>/error/</arg>
</arguments>
<assign>
<var>${errors}</var>
</assign>
<msg timestamp="20180516 15:22:11.582" level="INFO">0 out of 98 lines matched</msg>
<msg timestamp="20180516 15:22:11.582" level="INFO">${errors} = </msg>
<status status="PASS" endtime="20180516 15:22:11.582" starttime="20180516 15:22:11.581"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${errors}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${errors}</arg>
</arguments>
<msg timestamp="20180516 15:22:11.582" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:22:11.582" starttime="20180516 15:22:11.582"></status>
</kw>
<msg timestamp="20180516 15:22:11.583" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:22:11.583" starttime="20180516 15:22:11.582"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>Errors detected in keys: ${errors}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:22:11.583" starttime="20180516 15:22:11.583"></status>
</kw>
<status status="PASS" endtime="20180516 15:22:11.583" starttime="20180516 15:22:11.218"></status>
</kw>
<status status="PASS" endtime="20180516 15:22:11.583" starttime="20180516 15:22:11.214"></status>
</kw>
<status status="PASS" endtime="20180516 15:22:11.583" starttime="20180516 15:22:11.214"></status>
</kw>
<status status="PASS" endtime="20180516 15:22:11.584" critical="yes" starttime="20180516 15:21:51.785"></status>
</test>
<kw type="teardown" name="Suite Cleanup">
<kw name="Stop SFC Controller Container" library="docker">
<kw name="Execute On Machine" library="ssh">
<doc>*Execute On Machine ${machine} ${command}*</doc>
<arguments>
<arg>docker</arg>
<arg>${DOCKER_COMMAND} rm -f sfc_controller</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${log}</arg>
</arguments>
<msg timestamp="20180516 15:22:11.601" level="INFO">docker</msg>
<msg timestamp="20180516 15:22:11.601" level="INFO">sudo docker rm -f sfc_controller</msg>
<msg timestamp="20180516 15:22:11.601" level="INFO">true</msg>
<status status="PASS" endtime="20180516 15:22:11.601" starttime="20180516 15:22:11.601"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:22:11.602" starttime="20180516 15:22:11.602"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:22:11.605" level="INFO">${currdate} = 2018-05-16 15:22:11.605</msg>
<status status="PASS" endtime="20180516 15:22:11.605" starttime="20180516 15:22:11.602"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20180516 15:22:11.606" level="INFO">Executing command 'sudo docker rm -f sfc_controller'.</msg>
<msg timestamp="20180516 15:22:12.131" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:22:12.132" level="INFO">${out} = sfc_controller</msg>
<msg timestamp="20180516 15:22:12.132" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20180516 15:22:12.132" starttime="20180516 15:22:11.606"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${out}</arg>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:22:12.133" level="INFO">sfc_controller</msg>
<msg timestamp="20180516 15:22:12.133" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:22:12.133" starttime="20180516 15:22:12.132"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:22:12.134" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:22:12.134" starttime="20180516 15:22:12.134"></status>
</kw>
<msg timestamp="20180516 15:22:12.134" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:22:12.134" starttime="20180516 15:22:12.133"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} on ${machine}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:22:12.135" starttime="20180516 15:22:12.134"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${log}'=='true'</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:22:12.137" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_docker.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_docker.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:22:12.137" starttime="20180516 15:22:12.135"></status>
</kw>
<status status="PASS" endtime="20180516 15:22:12.137" starttime="20180516 15:22:12.135"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:22:12.138" starttime="20180516 15:22:12.137"></status>
</kw>
<status status="PASS" endtime="20180516 15:22:12.138" starttime="20180516 15:22:11.600"></status>
</kw>
<kw name="Log sfc_controller Output" library="setup-teardown">
<doc>*Log ${machine} Output*</doc>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<msg timestamp="20180516 15:22:12.144" level="INFO">sfc_controller</msg>
<status status="PASS" endtime="20180516 15:22:12.144" starttime="20180516 15:22:12.144"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:22:12.145" starttime="20180516 15:22:12.144"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>delay=${SSH_READ_DELAY}s</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20180516 15:22:15.147" level="INFO">msestak@msestak-VirtualBox:~$</msg>
<msg timestamp="20180516 15:22:15.147" level="INFO">${out} = msestak@msestak-VirtualBox:~$ </msg>
<status status="PASS" endtime="20180516 15:22:15.147" starttime="20180516 15:22:12.145"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:22:15.148" level="INFO">msestak@msestak-VirtualBox:~$ </msg>
<status status="PASS" endtime="20180516 15:22:15.148" starttime="20180516 15:22:15.147"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:22:15.149" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_sfc_controller.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_sfc_controller.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:22:15.149" starttime="20180516 15:22:15.148"></status>
</kw>
<status status="PASS" endtime="20180516 15:22:15.149" starttime="20180516 15:22:12.143"></status>
</kw>
<status status="PASS" endtime="20180516 15:22:15.149" starttime="20180516 15:22:11.586"></status>
</kw>
<kw name="Testsuite Teardown" library="setup-teardown">
<doc>*Testsuite Teardown*</doc>
<kw name="Make Datastore Snapshots" library="setup-teardown">
<arguments>
<arg>teardown</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tag}</arg>
</arguments>
<msg timestamp="20180516 15:22:15.150" level="INFO">teardown</msg>
<status status="PASS" endtime="20180516 15:22:15.150" starttime="20180516 15:22:15.150"></status>
</kw>
<kw name="Create Next Snapshot Prefix" library="setup-teardown">
<assign>
<var>${prefix}</var>
</assign>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>str(${snapshot_num}).zfill(3)</arg>
</arguments>
<assign>
<var>${prefix}</var>
</assign>
<msg timestamp="20180516 15:22:15.151" level="INFO">${prefix} = 041</msg>
<status status="PASS" endtime="20180516 15:22:15.151" starttime="20180516 15:22:15.151"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${snapshot_num}+1</arg>
</arguments>
<assign>
<var>${snapshot_num}</var>
</assign>
<msg timestamp="20180516 15:22:15.151" level="INFO">${snapshot_num} = 42</msg>
<status status="PASS" endtime="20180516 15:22:15.151" starttime="20180516 15:22:15.151"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${snapshot_num}</arg>
</arguments>
<msg timestamp="20180516 15:22:15.152" level="INFO">${snapshot_num} = 42</msg>
<status status="PASS" endtime="20180516 15:22:15.152" starttime="20180516 15:22:15.152"></status>
</kw>
<msg timestamp="20180516 15:22:15.152" level="INFO">${prefix} = 041</msg>
<status status="PASS" endtime="20180516 15:22:15.152" starttime="20180516 15:22:15.150"></status>
</kw>
<kw name="Take ETCD Snapshots" library="setup-teardown">
<arguments>
<arg>${prefix}_${tag}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tag}</arg>
</arguments>
<msg timestamp="20180516 15:22:15.153" level="INFO">041_teardown</msg>
<status status="PASS" endtime="20180516 15:22:15.153" starttime="20180516 15:22:15.153"></status>
</kw>
<kw name="Get ETCD Dump" library="setup-teardown">
<assign>
<var>${dump}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DOCKER_COMMAND} exec etcd etcdctl get --prefix="true" ""</arg>
</arguments>
<assign>
<var>${command}</var>
</assign>
<msg timestamp="20180516 15:22:15.154" level="INFO">${command} = sudo docker exec etcd etcdctl get --prefix="true" ""</msg>
<status status="PASS" endtime="20180516 15:22:15.154" starttime="20180516 15:22:15.154"></status>
</kw>
<kw name="Execute On Machine" library="ssh">
<doc>*Execute On Machine ${machine} sudo docker exec etcd etcdctl get --prefix="true" ""*</doc>
<arguments>
<arg>docker</arg>
<arg>${command}</arg>
<arg>log=false</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${log}</arg>
</arguments>
<msg timestamp="20180516 15:22:15.160" level="INFO">docker</msg>
<msg timestamp="20180516 15:22:15.160" level="INFO">sudo docker exec etcd etcdctl get --prefix="true" ""</msg>
<msg timestamp="20180516 15:22:15.160" level="INFO">false</msg>
<status status="PASS" endtime="20180516 15:22:15.160" starttime="20180516 15:22:15.160"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:22:15.161" starttime="20180516 15:22:15.160"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:22:15.161" level="INFO">${currdate} = 2018-05-16 15:22:15.161</msg>
<status status="PASS" endtime="20180516 15:22:15.161" starttime="20180516 15:22:15.161"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20180516 15:22:15.162" level="INFO">Executing command 'sudo docker exec etcd etcdctl get --prefix="true" ""'.</msg>
<msg timestamp="20180516 15:22:15.458" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:22:15.459" level="INFO">${out} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<msg timestamp="20180516 15:22:15.459" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20180516 15:22:15.459" starttime="20180516 15:22:15.161"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${out}</arg>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:22:15.459" level="INFO">/sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-containers","description":"Wire 2 VNF containers to the vpp switch","type":2,"elements":[{"container":"node_1","port_label":"node1_veth","etcd_vpp_switch_key":"agent_vpp_1","ipv4_addr":"10.0.0.10","type":3},{"container":"node_2","port_label":"node2_veth","etcd_vpp_switch_key":"agent_vpp_1","ipv4_addr":"10.0.0.11","type":3}]}
/sfc-controller/v1/SP
{"mtu":1500,"starting_vlan_id":5000,"default_static_route_weight":5,"dynamic_bridge_parms":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true},"static_bridge_parms":{"forward":true}}
/sfc-controller/v1/id/HE/agent_vpp_1
{"name":"agent_vpp_1"}
/sfc-controller/v1/id/SFC/two-sample-vnf-containers/node_1_node1_veth
{"sfc_name":"two-sample-vnf-containers","container":"node_1","port":"node1_veth","mac_addr_id":1,"veth_id":1}
/sfc-controller/v1/id/SFC/two-sample-vnf-containers/node_2_node2_veth
{"sfc_name":"two-sample-vnf-containers","container":"node_2","port":"node2_veth","mac_addr_id":2,"veth_id":2}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VNF_node_1_node1_veth
{"name":"IF_VETH_VNF_node_1_node1_veth","enabled":true,"phys_address":"02:00:00:00:00:01","mtu":1500,"host_if_name":"node1_veth","ip_addresses":["10.0.0.10/24"],"namespace":{"type":1,"microservice":"node_1"},"veth":{"peer_if_name":"IF_VETH_VSWITCH_node_1_node1_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VNF_node_2_node2_veth
{"name":"IF_VETH_VNF_node_2_node2_veth","enabled":true,"phys_address":"02:00:00:00:00:02","mtu":1500,"host_if_name":"node2_veth","ip_addresses":["10.0.0.11/24"],"namespace":{"type":1,"microservice":"node_2"},"veth":{"peer_if_name":"IF_VETH_VSWITCH_node_2_node2_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VSWITCH_node_1_node1_veth
{"name":"IF_VETH_VSWITCH_node_1_node1_veth","enabled":true,"mtu":1500,"host_if_name":"node_1_noeth_1","namespace":{"type":1,"microservice":"agent_vpp_1"},"veth":{"peer_if_name":"IF_VETH_VNF_node_1_node1_veth"}}
/vnf-agent/agent_vpp_1/linux/config/v1/interface/IF_VETH_VSWITCH_node_2_node2_veth
{"name":"IF_VETH_VSWITCH_node_2_node2_veth","enabled":true,"mtu":1500,"host_if_name":"node_2_noeth_2","namespace":{"type":1,"microservice":"agent_vpp_1"},"veth":{"peer_if_name":"IF_VETH_VNF_node_2_node2_veth"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/BD_INTERNAL_EW_L2FIB_agent_vpp_1
{"name":"BD_INTERNAL_EW_L2FIB_agent_vpp_1","forward":true}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/BD_INTERNAL_EW_agent_vpp_1
{"name":"BD_INTERNAL_EW_agent_vpp_1","flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true,"interfaces":[{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth"},{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth"}]}
/vnf-agent/agent_vpp_1/vpp/config/v1/bd/bd2
{
  "name": "bd2",
  "flood": true,
  "unknown_unicast_flood": true,
  "forward": true,
  "learn": true,
  "arp_termination": true,
  "interfaces": [
    { "name": "loop0" },{ "name": "loop1" }
  ]
}


/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth
{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","type":4,"enabled":true,"mtu":1500,"afpacket":{"host_if_name":"node_1_noeth_1"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth
{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","type":4,"enabled":true,"mtu":1500,"afpacket":{"host_if_name":"node_2_noeth_2"}}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_LOOPBACK_H_agent_vpp_1
{"name":"IF_LOOPBACK_H_agent_vpp_1","enabled":true,"phys_address":"02:00:00:AA:BB:00","mtu":1500,"ip_addresses":["6.0.0.100"]}
/vnf-agent/agent_vpp_1/vpp/config/v1/interface/loop0
{
  "name": "loop0",
  "type": 0,
  "enabled": true,
  "phys_address": "8a:f1:be:90:00:00",
  "mtu": 1500,
  "vrf": 0,
  "ip_addresses": [
    "20.1.1.1/24"
  ]
}


/vnf-agent/agent_vpp_1/vpp/config/v1/interface/loop1
{
  "name": "loop1",
  "type": 0,
  "enabled": true,
  "phys_address": "8a:f1:be:90:20:00",
  "mtu": 1500,
  "vrf": 0,
  "ip_addresses": [
    "30.1.1.1/24"
  ]
}


/vnf-agent/agent_vpp_1/vpp/status/v1/bd/BD_INTERNAL_EW_L2FIB_agent_vpp_1
{"index":2,"internal_name":"BD_INTERNAL_EW_L2FIB_agent_vpp_1","bvi_interface":"not_set","last_change":1526476631,"l2_params":{"forward":true}}
/vnf-agent/agent_vpp_1/vpp/status/v1/bd/BD_INTERNAL_EW_agent_vpp_1
{"index":1,"internal_name":"BD_INTERNAL_EW_agent_vpp_1","bvi_interface":"not_set","interface_count":2,"last_change":1526476631,"l2_params":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true},"interfaces":[{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","sw_if_index":2},{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","sw_if_index":3}]}
/vnf-agent/agent_vpp_1/vpp/status/v1/bd/bd2
{"index":3,"internal_name":"bd2","bvi_interface":"not_set","interface_count":2,"last_change":1526476768,"l2_params":{"flood":true,"unknown_unicast_flood":true,"forward":true,"learn":true,"arp_termination":true},"interfaces":[{"name":"loop0","sw_if_index":4},{"name":"loop1","sw_if_index":5}]}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth
{"name":"IF_AFPIF_VSWITCH_node_1_node1_veth","internal_name":"host-node_1_noeth_1","if_index":2,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:3e:fd:61:28","mtu":1500,"statistics":{"in_packets":20,"in_bytes":1552}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth
{"name":"IF_AFPIF_VSWITCH_node_2_node2_veth","internal_name":"host-node_2_noeth_2","if_index":3,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:fe:42:98:22:08","mtu":1500,"statistics":{"in_packets":22,"in_bytes":1732}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_LOOPBACK_H_agent_vpp_1
{"name":"IF_LOOPBACK_H_agent_vpp_1","internal_name":"loop0","if_index":1,"admin_status":1,"oper_status":1,"last_change":1526476631,"phys_address":"02:00:00:aa:bb:00","mtu":1500,"statistics":{}}
/vnf-agent/agent_vpp_1/vpp/status/v1/interface/local0
{"name":"local0","internal_name":"local0","admin_status":2,"oper_status":2,"statistics":{}}
/vnf-agent/node_1/check/status/v1/agent
{"build_version":"v1.1-5-g55e9977","build_date":"2018-03-06T11:05+00:00","state":1,"start_time":1526476614,"last_change":1526476619,"last_update":1526476925,"commit_hash":"55e99770087087fa8e41a980a8b6257c80c93f4c"}
/vnf-agent/node_1/check/status/v1/plugin/etcdv3
{"state":1,"last_change":1526476619,"last_update":1526476925}
/vnf-agent/node_1/check/status/v1/plugin/kafka
{"state":1,"last_change":1526476619,"last_update":1526476925}
/vnf-agent/node_2/check/status/v1/agent
{"build_version":"v1.1-5-g55e9977","build_date":"2018-03-06T11:05+00:00","state":1,"start_time":1526476623,"last_change":1526476628,"last_update":1526476923,"commit_hash":"55e99770087087fa8e41a980a8b6257c80c93f4c"}
/vnf-agent/node_2/check/status/v1/plugin/etcdv3
{"state":1,"last_change":1526476628,"last_update":1526476923}
/vnf-agent/node_2/check/status/v1/plugin/kafka
{"state":1,"last_change":1526476628,"last_update":1526476923}</msg>
<msg timestamp="20180516 15:22:15.460" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:22:15.460" starttime="20180516 15:22:15.459"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:22:15.466" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:22:15.466" starttime="20180516 15:22:15.465"></status>
</kw>
<msg timestamp="20180516 15:22:15.466" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:22:15.466" starttime="20180516 15:22:15.461"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} on ${machine}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:22:15.466" starttime="20180516 15:22:15.466"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${log}'=='true'</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:22:15.467" starttime="20180516 15:22:15.467"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:22:15.467" starttime="20180516 15:22:15.467"></status>
</kw>
<msg timestamp="20180516 15:22:15.468" level="INFO">${out} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<status status="PASS" endtime="20180516 15:22:15.468" starttime="20180516 15:22:15.159"></status>
</kw>
<msg timestamp="20180516 15:22:15.468" level="INFO">${dump} = /sfc-controller/v1/HE/agent_vpp_1
{"name":"agent_vpp_1","loopback_mac_addr":"02:00:00:AA:BB:00","loopback_ipv4":"6.0.0.100"}
/sfc-controller/v1/SFC/two-sample-vnf-containers
{"name":"two-sample-vnf-co...</msg>
<status status="PASS" endtime="20180516 15:22:15.468" starttime="20180516 15:22:15.153"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/etcd_dump-${tag}.txt</arg>
<arg>${dump}</arg>
</arguments>
<msg timestamp="20180516 15:22:15.468" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/etcd_dump-041_teardown.txt"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/etcd_dump-041_teardown.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:22:15.468" starttime="20180516 15:22:15.468"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${dump}</arg>
<arg>/error/</arg>
</arguments>
<assign>
<var>${errors}</var>
</assign>
<msg timestamp="20180516 15:22:15.469" level="INFO">0 out of 98 lines matched</msg>
<msg timestamp="20180516 15:22:15.469" level="INFO">${errors} = </msg>
<status status="PASS" endtime="20180516 15:22:15.469" starttime="20180516 15:22:15.469"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${errors}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${errors}</arg>
</arguments>
<msg timestamp="20180516 15:22:15.470" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:22:15.470" starttime="20180516 15:22:15.470"></status>
</kw>
<msg timestamp="20180516 15:22:15.470" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:22:15.470" starttime="20180516 15:22:15.469"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>Errors detected in keys: ${errors}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:22:15.470" starttime="20180516 15:22:15.470"></status>
</kw>
<status status="PASS" endtime="20180516 15:22:15.470" starttime="20180516 15:22:15.152"></status>
</kw>
<status status="PASS" endtime="20180516 15:22:15.471" starttime="20180516 15:22:15.149"></status>
</kw>
<kw name="Remove All Nodes" library="docker">
<kw name="Log List" library="Collections">
<doc>Logs the length and contents of the ``list`` using given ``level``.</doc>
<arguments>
<arg>${NODES}</arg>
</arguments>
<msg timestamp="20180516 15:22:15.471" level="INFO">List is empty.</msg>
<status status="PASS" endtime="20180516 15:22:15.471" starttime="20180516 15:22:15.471"></status>
</kw>
<kw type="for" name="${id} IN [ @{NODES} ]">
<status status="PASS" endtime="20180516 15:22:15.471" starttime="20180516 15:22:15.471"></status>
</kw>
<kw name="Execute On Machine" library="ssh">
<doc>*Execute On Machine ${machine} ${command}*</doc>
<arguments>
<arg>docker</arg>
<arg>${DOCKER_COMMAND} ps -as</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${log}</arg>
</arguments>
<msg timestamp="20180516 15:22:15.493" level="INFO">docker</msg>
<msg timestamp="20180516 15:22:15.493" level="INFO">sudo docker ps -as</msg>
<msg timestamp="20180516 15:22:15.493" level="INFO">true</msg>
<status status="PASS" endtime="20180516 15:22:15.493" starttime="20180516 15:22:15.492"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:22:15.493" starttime="20180516 15:22:15.493"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:22:15.494" level="INFO">${currdate} = 2018-05-16 15:22:15.494</msg>
<status status="PASS" endtime="20180516 15:22:15.494" starttime="20180516 15:22:15.494"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20180516 15:22:15.494" level="INFO">Executing command 'sudo docker ps -as'.</msg>
<msg timestamp="20180516 15:22:15.654" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:22:15.654" level="INFO">${out} = CONTAINER ID        IMAGE                           COMMAND                  CREATED             STATUS              PORTS                                            NAMES               SIZE
2f7d62033...</msg>
<msg timestamp="20180516 15:22:15.654" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20180516 15:22:15.654" starttime="20180516 15:22:15.494"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${out}</arg>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:22:15.655" level="INFO">CONTAINER ID        IMAGE                           COMMAND                  CREATED             STATUS              PORTS                                            NAMES               SIZE
2f7d62033432        ligato/vpp-agent:pantheon-dev   "bash"                   5 minutes ago       Up 5 minutes                                                         vpp_agent_ctl       0B (virtual 223MB)
5fd9956e4db0        quay.io/coreos/etcd:v3.0.16     "/usr/local/bin/etcd…"   6 minutes ago       Up 6 minutes        0.0.0.0:2379-&gt;2379/tcp, 2380/tcp                 etcd                145MB (virtual 187MB)
dbef312b260f        spotify/kafka                   "supervisord -n"         6 minutes ago       Up 6 minutes        0.0.0.0:2181-&gt;2181/tcp, 0.0.0.0:9092-&gt;9092/tcp   kafka               1.16GB (virtual 1.6GB)</msg>
<msg timestamp="20180516 15:22:15.655" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:22:15.655" starttime="20180516 15:22:15.655"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:22:15.656" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:22:15.656" starttime="20180516 15:22:15.655"></status>
</kw>
<msg timestamp="20180516 15:22:15.656" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:22:15.656" starttime="20180516 15:22:15.655"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} on ${machine}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:22:15.656" starttime="20180516 15:22:15.656"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${log}'=='true'</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:22:15.657" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_docker.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_docker.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:22:15.657" starttime="20180516 15:22:15.657"></status>
</kw>
<status status="PASS" endtime="20180516 15:22:15.657" starttime="20180516 15:22:15.656"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:22:15.658" starttime="20180516 15:22:15.658"></status>
</kw>
<status status="PASS" endtime="20180516 15:22:15.659" starttime="20180516 15:22:15.492"></status>
</kw>
<status status="PASS" endtime="20180516 15:22:15.659" starttime="20180516 15:22:15.471"></status>
</kw>
<kw name="Stop ETCD Server" library="docker">
<kw name="Execute On Machine" library="ssh">
<doc>*Execute On Machine ${machine} ${command}*</doc>
<arguments>
<arg>docker</arg>
<arg>${ETCD_SERVER_DESTROY}</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${log}</arg>
</arguments>
<msg timestamp="20180516 15:22:15.670" level="INFO">docker</msg>
<msg timestamp="20180516 15:22:15.670" level="INFO">sudo docker rm -f etcd</msg>
<msg timestamp="20180516 15:22:15.670" level="INFO">true</msg>
<status status="PASS" endtime="20180516 15:22:15.670" starttime="20180516 15:22:15.669"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:22:15.670" starttime="20180516 15:22:15.670"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:22:15.671" level="INFO">${currdate} = 2018-05-16 15:22:15.671</msg>
<status status="PASS" endtime="20180516 15:22:15.671" starttime="20180516 15:22:15.671"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20180516 15:22:15.671" level="INFO">Executing command 'sudo docker rm -f etcd'.</msg>
<msg timestamp="20180516 15:22:16.253" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:22:16.254" level="INFO">${out} = etcd</msg>
<msg timestamp="20180516 15:22:16.254" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20180516 15:22:16.254" starttime="20180516 15:22:15.671"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${out}</arg>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:22:16.254" level="INFO">etcd</msg>
<msg timestamp="20180516 15:22:16.255" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:22:16.255" starttime="20180516 15:22:16.254"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:22:16.255" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:22:16.255" starttime="20180516 15:22:16.255"></status>
</kw>
<msg timestamp="20180516 15:22:16.255" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:22:16.256" starttime="20180516 15:22:16.255"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} on ${machine}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:22:16.256" starttime="20180516 15:22:16.256"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${log}'=='true'</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:22:16.258" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_docker.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_docker.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:22:16.258" starttime="20180516 15:22:16.257"></status>
</kw>
<status status="PASS" endtime="20180516 15:22:16.258" starttime="20180516 15:22:16.256"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:22:16.258" starttime="20180516 15:22:16.258"></status>
</kw>
<status status="PASS" endtime="20180516 15:22:16.258" starttime="20180516 15:22:15.669"></status>
</kw>
<kw name="Log etcd Output" library="setup-teardown">
<doc>*Log ${machine} Output*</doc>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<msg timestamp="20180516 15:22:16.263" level="INFO">etcd</msg>
<status status="PASS" endtime="20180516 15:22:16.264" starttime="20180516 15:22:16.263"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:22:16.264" starttime="20180516 15:22:16.264"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>delay=${SSH_READ_DELAY}s</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20180516 15:22:19.266" level="INFO">2018-05-16 13:16:11.699145 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:16:11.710348 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:16:11.793257 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:16:12.506454 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:16:12.692975 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:16:13.050269 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:16:20.363985 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:16:22.446787 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:16:22.473447 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:16:22.770698 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:16:23.149160 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:16:23.240878 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:16:37.245301 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:16:38.325742 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:16:38.449422 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:16:41.787525 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:16:42.136349 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:16:42.698634 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:17:01.949135 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:17:07.639314 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:17:08.449824 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:17:10.048363 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:17:10.394224 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:17:10.982325 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:17:42.149388 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:17:44.608653 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:17:47.587548 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:17:52.476350 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:17:53.303161 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:17:56.787630 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:18:49.483828 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:18:52.709732 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:18:55.473527 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:18:57.833723 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:19:07.510059 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:19:09.111198 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:20:26.518109 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:20:27.214235 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:20:51.726765 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:20:54.029069 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:21:06.562021 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:21:15.058127 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:22:09.040894 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
msestak@msestak-VirtualBox:~$</msg>
<msg timestamp="20180516 15:22:19.266" level="INFO">${out} = 2018-05-16 13:16:11.699145 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested ad...</msg>
<status status="PASS" endtime="20180516 15:22:19.266" starttime="20180516 15:22:16.264"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:22:19.267" level="INFO">2018-05-16 13:16:11.699145 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:16:11.710348 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:16:11.793257 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:16:12.506454 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:16:12.692975 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:16:13.050269 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:16:20.363985 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:16:22.446787 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:16:22.473447 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:16:22.770698 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:16:23.149160 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:16:23.240878 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:16:37.245301 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:16:38.325742 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:16:38.449422 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:16:41.787525 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:16:42.136349 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:16:42.698634 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:17:01.949135 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:17:07.639314 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:17:08.449824 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:17:10.048363 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:17:10.394224 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:17:10.982325 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:17:42.149388 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:17:44.608653 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:17:47.587548 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:17:52.476350 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:17:53.303161 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:17:56.787630 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:18:49.483828 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:18:52.709732 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:18:55.473527 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:18:57.833723 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:19:07.510059 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:19:09.111198 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:20:26.518109 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:20:27.214235 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:20:51.726765 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:20:54.029069 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:21:06.562021 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:21:15.058127 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
2018-05-16 13:22:09.040894 I | v3rpc/grpc: grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp [::]:2379: connect: cannot assign requested address"; Reconnecting to {"[::]:2379" &lt;nil&gt;}
msestak@msestak-VirtualBox:~$ </msg>
<status status="PASS" endtime="20180516 15:22:19.267" starttime="20180516 15:22:19.266"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:22:19.270" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_etcd.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_etcd.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:22:19.270" starttime="20180516 15:22:19.268"></status>
</kw>
<status status="PASS" endtime="20180516 15:22:19.270" starttime="20180516 15:22:16.263"></status>
</kw>
<status status="PASS" endtime="20180516 15:22:19.270" starttime="20180516 15:22:15.659"></status>
</kw>
<kw name="Stop VPP Ctl Container" library="docker">
<kw name="Execute On Machine" library="ssh">
<doc>*Execute On Machine ${machine} ${command}*</doc>
<arguments>
<arg>docker</arg>
<arg>${DOCKER_COMMAND} rm -f vpp_agent_ctl</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${log}</arg>
</arguments>
<msg timestamp="20180516 15:22:19.280" level="INFO">docker</msg>
<msg timestamp="20180516 15:22:19.280" level="INFO">sudo docker rm -f vpp_agent_ctl</msg>
<msg timestamp="20180516 15:22:19.280" level="INFO">true</msg>
<status status="PASS" endtime="20180516 15:22:19.280" starttime="20180516 15:22:19.280"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:22:19.281" starttime="20180516 15:22:19.281"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:22:19.281" level="INFO">${currdate} = 2018-05-16 15:22:19.281</msg>
<status status="PASS" endtime="20180516 15:22:19.281" starttime="20180516 15:22:19.281"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20180516 15:22:19.282" level="INFO">Executing command 'sudo docker rm -f vpp_agent_ctl'.</msg>
<msg timestamp="20180516 15:22:19.737" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:22:19.737" level="INFO">${out} = vpp_agent_ctl</msg>
<msg timestamp="20180516 15:22:19.737" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20180516 15:22:19.737" starttime="20180516 15:22:19.282"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${out}</arg>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:22:19.739" level="INFO">vpp_agent_ctl</msg>
<msg timestamp="20180516 15:22:19.739" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:22:19.739" starttime="20180516 15:22:19.738"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:22:19.740" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:22:19.740" starttime="20180516 15:22:19.740"></status>
</kw>
<msg timestamp="20180516 15:22:19.740" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:22:19.740" starttime="20180516 15:22:19.739"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} on ${machine}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:22:19.741" starttime="20180516 15:22:19.740"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${log}'=='true'</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:22:19.742" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_docker.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_docker.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:22:19.742" starttime="20180516 15:22:19.741"></status>
</kw>
<status status="PASS" endtime="20180516 15:22:19.742" starttime="20180516 15:22:19.741"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:22:19.742" starttime="20180516 15:22:19.742"></status>
</kw>
<status status="PASS" endtime="20180516 15:22:19.743" starttime="20180516 15:22:19.279"></status>
</kw>
<kw name="Log vpp_agent_ctl Output" library="setup-teardown">
<doc>*Log ${machine} Output*</doc>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<msg timestamp="20180516 15:22:19.748" level="INFO">vpp_agent_ctl</msg>
<status status="PASS" endtime="20180516 15:22:19.748" starttime="20180516 15:22:19.748"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:22:19.748" starttime="20180516 15:22:19.748"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>delay=${SSH_READ_DELAY}s</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20180516 15:22:22.751" level="INFO">msestak@msestak-VirtualBox:~$</msg>
<msg timestamp="20180516 15:22:22.751" level="INFO">${out} = msestak@msestak-VirtualBox:~$ </msg>
<status status="PASS" endtime="20180516 15:22:22.751" starttime="20180516 15:22:19.749"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:22:22.752" level="INFO">msestak@msestak-VirtualBox:~$ </msg>
<status status="PASS" endtime="20180516 15:22:22.752" starttime="20180516 15:22:22.751"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:22:22.753" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_vpp_agent_ctl.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_vpp_agent_ctl.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:22:22.753" starttime="20180516 15:22:22.753"></status>
</kw>
<status status="PASS" endtime="20180516 15:22:22.753" starttime="20180516 15:22:19.747"></status>
</kw>
<status status="PASS" endtime="20180516 15:22:22.753" starttime="20180516 15:22:19.270"></status>
</kw>
<kw name="Stop Kafka Server" library="docker">
<kw name="Execute On Machine" library="ssh">
<doc>*Execute On Machine ${machine} ${command}*</doc>
<arguments>
<arg>docker</arg>
<arg>${KAFKA_SERVER_DESTROY}</arg>
</arguments>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${machine}</arg>
<arg>${command}</arg>
<arg>${log}</arg>
</arguments>
<msg timestamp="20180516 15:22:22.763" level="INFO">docker</msg>
<msg timestamp="20180516 15:22:22.763" level="INFO">sudo docker rm -f kafka</msg>
<msg timestamp="20180516 15:22:22.764" level="INFO">true</msg>
<status status="PASS" endtime="20180516 15:22:22.764" starttime="20180516 15:22:22.763"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:22:22.764" starttime="20180516 15:22:22.764"></status>
</kw>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<assign>
<var>${currdate}</var>
</assign>
<msg timestamp="20180516 15:22:22.765" level="INFO">${currdate} = 2018-05-16 15:22:22.765</msg>
<status status="PASS" endtime="20180516 15:22:22.765" starttime="20180516 15:22:22.764"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${out}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20180516 15:22:22.765" level="INFO">Executing command 'sudo docker rm -f kafka'.</msg>
<msg timestamp="20180516 15:22:23.334" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20180516 15:22:23.334" level="INFO">${out} = kafka</msg>
<msg timestamp="20180516 15:22:23.334" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20180516 15:22:23.334" starttime="20180516 15:22:22.765"></status>
</kw>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${out}</arg>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:22:23.335" level="INFO">kafka</msg>
<msg timestamp="20180516 15:22:23.335" level="INFO"></msg>
<status status="PASS" endtime="20180516 15:22:23.335" starttime="20180516 15:22:23.335"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Empty</arg>
<arg>${stderr}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20180516 15:22:23.336" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20180516 15:22:23.336" starttime="20180516 15:22:23.336"></status>
</kw>
<msg timestamp="20180516 15:22:23.336" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20180516 15:22:23.336" starttime="20180516 15:22:23.336"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Log</arg>
<arg>One or more error occured during execution of a command ${command} on ${machine}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20180516 15:22:23.337" starttime="20180516 15:22:23.337"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${log}'=='true'</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Time:${currdate} Command: ${command}${\n}${out}${\n}</arg>
</arguments>
<msg timestamp="20180516 15:22:23.338" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_docker.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_docker.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:22:23.338" starttime="20180516 15:22:23.338"></status>
</kw>
<status status="PASS" endtime="20180516 15:22:23.338" starttime="20180516 15:22:23.337"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${status}==False</arg>
<arg>Append To File</arg>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>*** Error: ${stderr}${\n}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:22:23.339" starttime="20180516 15:22:23.339"></status>
</kw>
<status status="PASS" endtime="20180516 15:22:23.339" starttime="20180516 15:22:22.763"></status>
</kw>
<kw name="Log kafka Output" library="setup-teardown">
<doc>*Log ${machine} Output*</doc>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<msg timestamp="20180516 15:22:23.344" level="INFO">kafka</msg>
<status status="PASS" endtime="20180516 15:22:23.344" starttime="20180516 15:22:23.344"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${machine}</arg>
</arguments>
<status status="PASS" endtime="20180516 15:22:23.345" starttime="20180516 15:22:23.344"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<arguments>
<arg>delay=${SSH_READ_DELAY}s</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20180516 15:22:26.347" level="INFO">msestak@msestak-VirtualBox:~$</msg>
<msg timestamp="20180516 15:22:26.348" level="INFO">${out} = msestak@msestak-VirtualBox:~$ </msg>
<status status="PASS" endtime="20180516 15:22:26.348" starttime="20180516 15:22:23.345"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:22:26.348" level="INFO">msestak@msestak-VirtualBox:~$ </msg>
<status status="PASS" endtime="20180516 15:22:26.348" starttime="20180516 15:22:26.348"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/output_${machine}.log</arg>
<arg>${out}</arg>
</arguments>
<msg timestamp="20180516 15:22:26.349" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_kafka.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_kafka.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20180516 15:22:26.349" starttime="20180516 15:22:26.348"></status>
</kw>
<status status="PASS" endtime="20180516 15:22:26.349" starttime="20180516 15:22:23.343"></status>
</kw>
<status status="PASS" endtime="20180516 15:22:26.349" starttime="20180516 15:22:22.754"></status>
</kw>
<kw name="Get Connections" library="SSHLibrary">
<doc>Return information about all the open connections.</doc>
<msg timestamp="20180516 15:22:26.350" level="INFO">index=1
path_separator=/
prompt=None
width=80
newline=

height=24
encoding=UTF-8
alias=docker
host=192.168.100.20
timeout=1 minute
term_type=vt100
port=22</msg>
<msg timestamp="20180516 15:22:26.350" level="INFO">index=2
path_separator=/
prompt=None
width=80
newline=

height=24
encoding=UTF-8
alias=etcd
host=192.168.100.20
timeout=1 minute
term_type=vt100
port=22</msg>
<msg timestamp="20180516 15:22:26.350" level="INFO">index=3
path_separator=/
prompt=None
width=80
newline=

height=24
encoding=UTF-8
alias=kafka
host=192.168.100.20
timeout=1 minute
term_type=vt100
port=22</msg>
<msg timestamp="20180516 15:22:26.350" level="INFO">index=4
path_separator=/
prompt=None
width=80
newline=

height=24
encoding=UTF-8
alias=kafka
host=192.168.100.20
timeout=1 minute
term_type=vt100
port=22</msg>
<msg timestamp="20180516 15:22:26.350" level="INFO">index=5
path_separator=/
prompt=None
width=80
newline=

height=24
encoding=UTF-8
alias=etcd
host=192.168.100.20
timeout=1 minute
term_type=vt100
port=22</msg>
<msg timestamp="20180516 15:22:26.350" level="INFO">index=6
path_separator=/
prompt=None
width=80
newline=

height=24
encoding=UTF-8
alias=vpp_agent_ctl
host=192.168.100.20
timeout=1 minute
term_type=vt100
port=22</msg>
<msg timestamp="20180516 15:22:26.350" level="INFO">index=7
path_separator=/
prompt=None
width=80
newline=

height=24
encoding=UTF-8
alias=agent_vpp_1
host=192.168.100.20
timeout=1 minute
term_type=vt100
port=22</msg>
<msg timestamp="20180516 15:22:26.350" level="INFO">index=8
path_separator=/
prompt=None
width=80
newline=

height=24
encoding=UTF-8
alias=agent_vpp_1_term
host=192.168.100.20
timeout=1 minute
term_type=vt100
port=22</msg>
<msg timestamp="20180516 15:22:26.350" level="INFO">index=9
path_separator=/
prompt=None
width=80
newline=

height=24
encoding=UTF-8
alias=agent_vpp_1_vat
host=192.168.100.20
timeout=1 minute
term_type=vt100
port=22</msg>
<msg timestamp="20180516 15:22:26.351" level="INFO">index=10
path_separator=/
prompt=None
width=80
newline=

height=24
encoding=UTF-8
alias=node_1
host=192.168.100.20
timeout=1 minute
term_type=vt100
port=22</msg>
<msg timestamp="20180516 15:22:26.351" level="INFO">index=11
path_separator=/
prompt=None
width=80
newline=

height=24
encoding=UTF-8
alias=node_2
host=192.168.100.20
timeout=1 minute
term_type=vt100
port=22</msg>
<msg timestamp="20180516 15:22:26.351" level="INFO">index=12
path_separator=/
prompt=None
width=80
newline=

height=24
encoding=UTF-8
alias=sfc_controller
host=192.168.100.20
timeout=1 minute
term_type=vt100
port=22</msg>
<status status="PASS" endtime="20180516 15:22:26.351" starttime="20180516 15:22:26.350"></status>
</kw>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20180516 15:22:26.634" starttime="20180516 15:22:26.351"></status>
</kw>
<kw name="Check Agent Logs For Errors" library="setup-teardown">
<kw name="List Files In Directory" library="OperatingSystem">
<doc>Wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/</arg>
<arg>*_container_agent.log</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20180516 15:22:26.635" html="yes" level="INFO">Listing contents of directory '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results&lt;/a&gt;'.</msg>
<msg timestamp="20180516 15:22:26.636" level="INFO">3 files:
output_agent_vpp_1_container_agent.log
output_node_1_container_agent.log
output_node_2_container_agent.log</msg>
<msg timestamp="20180516 15:22:26.636" level="INFO">@{logs} = [ output_agent_vpp_1_container_agent.log | output_node_1_container_agent.log | output_node_2_container_agent.log ]</msg>
<status status="PASS" endtime="20180516 15:22:26.636" starttime="20180516 15:22:26.635"></status>
</kw>
<kw name="Log List" library="Collections">
<doc>Logs the length and contents of the ``list`` using given ``level``.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<msg timestamp="20180516 15:22:26.637" level="INFO">List length is 3 and it contains following items:
0: output_agent_vpp_1_container_agent.log
1: output_node_1_container_agent.log
2: output_node_2_container_agent.log</msg>
<status status="PASS" endtime="20180516 15:22:26.637" starttime="20180516 15:22:26.636"></status>
</kw>
<kw type="for" name="${log} IN [ @{logs} ]">
<kw type="foritem" name="${log} = output_agent_vpp_1_container_agent.log">
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/${log}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20180516 15:22:26.638" html="yes" level="INFO">Getting file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_container_agent.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_agent_vpp_1_container_agent.log&lt;/a&gt;'.</msg>
<msg timestamp="20180516 15:22:26.642" level="INFO">${data} = 2018-05-16T13:16:27.655439718Z  2018-05-16 13:16:27,654 CRIT Supervisor running as root (no user in config file)
2018-05-16T13:16:27.658784158Z  2018-05-16 13:16:27,658 INFO supervisord started with p...</msg>
<status status="PASS" endtime="20180516 15:22:26.642" starttime="20180516 15:22:26.637"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${data}</arg>
<arg>exited: agent (exit status</arg>
</arguments>
<status status="PASS" endtime="20180516 15:22:26.643" starttime="20180516 15:22:26.643"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${data}</arg>
<arg>exited: vpp (exit status</arg>
</arguments>
<status status="PASS" endtime="20180516 15:22:26.644" starttime="20180516 15:22:26.644"></status>
</kw>
<status status="PASS" endtime="20180516 15:22:26.644" starttime="20180516 15:22:26.637"></status>
</kw>
<kw type="foritem" name="${log} = output_node_1_container_agent.log">
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/${log}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20180516 15:22:26.645" html="yes" level="INFO">Getting file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_node_1_container_agent.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_node_1_container_agent.log&lt;/a&gt;'.</msg>
<msg timestamp="20180516 15:22:26.645" level="INFO">${data} = 2018-05-16T13:16:53.745731558Z  2018-05-16 13:16:53,745 CRIT Supervisor running as root (no user in config file)
2018-05-16T13:16:53.748191060Z  2018-05-16 13:16:53,747 INFO supervisord started with p...</msg>
<status status="PASS" endtime="20180516 15:22:26.645" starttime="20180516 15:22:26.644"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${data}</arg>
<arg>exited: agent (exit status</arg>
</arguments>
<status status="PASS" endtime="20180516 15:22:26.646" starttime="20180516 15:22:26.645"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${data}</arg>
<arg>exited: vpp (exit status</arg>
</arguments>
<status status="PASS" endtime="20180516 15:22:26.646" starttime="20180516 15:22:26.646"></status>
</kw>
<status status="PASS" endtime="20180516 15:22:26.646" starttime="20180516 15:22:26.644"></status>
</kw>
<kw type="foritem" name="${log} = output_node_2_container_agent.log">
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${RESULTS_FOLDER}/${log}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20180516 15:22:26.647" html="yes" level="INFO">Getting file '&lt;a href="file:///home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_node_2_container_agent.log"&gt;/home/marcello/workspace/release/vpp-agent/tests/robot/suites/traffic/acl_traffic/results/output_node_2_container_agent.log&lt;/a&gt;'.</msg>
<msg timestamp="20180516 15:22:26.647" level="INFO">${data} = 2018-05-16T13:17:02.052280008Z  2018-05-16 13:17:02,051 CRIT Supervisor running as root (no user in config file)
2018-05-16T13:17:02.056796523Z  2018-05-16 13:17:02,056 INFO supervisord started with p...</msg>
<status status="PASS" endtime="20180516 15:22:26.647" starttime="20180516 15:22:26.646"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${data}</arg>
<arg>exited: agent (exit status</arg>
</arguments>
<status status="PASS" endtime="20180516 15:22:26.648" starttime="20180516 15:22:26.647"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${data}</arg>
<arg>exited: vpp (exit status</arg>
</arguments>
<status status="PASS" endtime="20180516 15:22:26.648" starttime="20180516 15:22:26.648"></status>
</kw>
<status status="PASS" endtime="20180516 15:22:26.648" starttime="20180516 15:22:26.646"></status>
</kw>
<status status="PASS" endtime="20180516 15:22:26.648" starttime="20180516 15:22:26.637"></status>
</kw>
<status status="PASS" endtime="20180516 15:22:26.648" starttime="20180516 15:22:26.635"></status>
</kw>
<status status="PASS" endtime="20180516 15:22:26.648" starttime="20180516 15:22:15.149"></status>
</kw>
<status status="PASS" endtime="20180516 15:22:26.648" starttime="20180516 15:22:11.586"></status>
</kw>
<status status="FAIL" endtime="20180516 15:22:26.649" starttime="20180516 15:15:43.049"></status>
</suite>
<statistics>
<total>
<stat fail="4" pass="15">Critical Tests</stat>
<stat fail="4" pass="15">All Tests</stat>
</total>
<tag>
<stat fail="0" pass="1">debug</stat>
<stat fail="0" pass="1">setup</stat>
</tag>
<suite>
<stat fail="4" id="s1" name="Acl Traffic" pass="15">Acl Traffic</stat>
</suite>
</statistics>
<errors>
<msg timestamp="20180516 15:18:22.668" level="WARN">One or more error occured during execution of a command vpp-agent-ctl /opt/vpp-agent/dev/etcd.conf -get /vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth in container vpp_agent_ctl</msg>
<msg timestamp="20180516 15:18:32.173" level="WARN">One or more error occured during execution of a command vpp-agent-ctl /opt/vpp-agent/dev/etcd.conf -get /vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth in container vpp_agent_ctl</msg>
<msg timestamp="20180516 15:18:32.443" level="WARN">One or more error occured during execution of a command vpp-agent-ctl /opt/vpp-agent/dev/etcd.conf -get /vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth in container vpp_agent_ctl</msg>
<msg timestamp="20180516 15:18:41.949" level="WARN">One or more error occured during execution of a command vpp-agent-ctl /opt/vpp-agent/dev/etcd.conf -get /vnf-agent/agent_vpp_1/vpp/config/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth in container vpp_agent_ctl</msg>
<msg timestamp="20180516 15:18:52.219" level="WARN">One or more error occured during execution of a command vpp-agent-ctl /opt/vpp-agent/dev/etcd.conf -get /vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_1_node1_veth in container vpp_agent_ctl</msg>
<msg timestamp="20180516 15:18:52.590" level="WARN">One or more error occured during execution of a command vpp-agent-ctl /opt/vpp-agent/dev/etcd.conf -get /vnf-agent/agent_vpp_1/vpp/status/v1/interface/IF_AFPIF_VSWITCH_node_2_node2_veth in container vpp_agent_ctl</msg>
<msg timestamp="20180516 15:18:59.820" level="WARN">One or more error occured during execution of a command vpp-agent-ctl /opt/vpp-agent/dev/etcd.conf -get /vnf-agent/agent_vpp_1/vpp/status/v1/interface/loop0 in container vpp_agent_ctl</msg>
<msg timestamp="20180516 15:19:16.052" level="WARN">One or more error occured during execution of a command vpp-agent-ctl /opt/vpp-agent/dev/etcd.conf -get /vnf-agent/agent_vpp_1/vpp/status/v1/interface/loop0 in container vpp_agent_ctl</msg>
</errors>
</robot>
