syntax = "proto3";

package l3;

/* static ip routes */
message LinuxStaticRoutes {
    message Route {                         /* route name */
        string name = 1;

        message Namespace {                 /* Linux network namespace to attach the route entry into. */
            enum NamespaceType {
                PID_REF_NS = 0;             /* Attach to namespace of a given process. */
                MICROSERVICE_REF_NS = 1;    /* Attach to namespace of a docker container running given microservice. */
                NAMED_NS = 2;               /* Attach to named namespace. */
                FILE_REF_NS = 3;            /* Attach to namespace referenced by a file handle. */
            }
            NamespaceType type = 1;
            uint32 pid = 2;
            string microservice = 3;
            string name = 4;
            string filepath = 5;
        }
        Namespace namespace = 2;

        string interface = 3;               /* interface name */
        string description = 4;             /* optional description */

        message Scope {                     /* the scope of the area where the link is valid */
            enum ScopeType {
                GLOBAL = 0;
                SITE = 1;
                LINK = 2;
                HOST = 3;
            }
            ScopeType type = 1;
        }
        Scope scope = 5;

        string src_ip_addr = 6;             /* source ip address + prefix in format <address>/<prefix> */
        string dst_ip_addr = 7;             /* destination ip address  */
        string gw_addr = 8;                 /* gateway address */
        uint32 priority = 9;                /* routing priority (weight) */
        uint32 table = 10;                  /* linux kernel routing table */
    }
    repeated Route route = 1;               /* list of IP static routes */
}

/* static arp entires */
message LinuxStaticArpEntries {
    message ArpEntry {
        string name = 1;                    /* arp entry name */


        message Namespace {                 /* Linux network namespace to attach the arp entry into. */
            enum NamespaceType {
                PID_REF_NS = 0;             /* Attach to namespace of a given process. */
                MICROSERVICE_REF_NS = 1;    /* Attach to namespace of a docker container running given microservice. */
                NAMED_NS = 2;               /* Attach to named namespace. */
                FILE_REF_NS = 3;            /* Attach to namespace referenced by a file handle. */
            }
            NamespaceType type = 1;
            uint32 pid = 2;
            string microservice = 3;
            string name = 4;
            string filepath = 5;
        }
        Namespace namespace = 2;

        string interface = 3;               /* interface to which this neighbour is attached */

        message NudState {
            enum NudStateType {
                PERMANENT = 0;
                NOARP = 1;
                REACHABLE = 2;
                STATE = 3;
            }
            NudStateType type = 1;
        }
        NudState state = 4;                 /* state of the neighbour entry */

        string ip_addr = 5;                 /* ip address */
        string hw_address = 6;              /* mac address */
    }
    repeated ArpEntry arp_entry = 1;        /* list of ARP entries */
}