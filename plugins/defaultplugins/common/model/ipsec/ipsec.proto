syntax = "proto3";
package ipsec;

/* Cryptographic algorithm for encryption */
enum CryptoAlgorithm {
    NONE_CRYPTO = 0;
    AES_CBC_128 = 1;
    AES_CBC_192 = 2;
    AES_CBC_256 = 3;
}
/* Cryptographic algorithm for authentication */
enum IntegAlgorithm {
    NONE_INTEG = 0;
    MD5_96 = 1;
    SHA1_96 = 2;
    SHA_256_96 = 3;
    SHA_256_128 = 4;
    SHA_384_192 = 5;
    SHA_512_256 = 6;
}

/* Tunnel Interfaces */
message TunnelInterfaces {
    message Tunnel {
        string name = 1; /* tunnel name */

        bool esn = 2; /* extended sequence number */
        bool anti_replay = 3; /* anti replay option */

        string local_ip = 4;
        string remote_ip = 5;
        uint32 local_spi = 6;
        uint32 remote_spi = 7;

        CryptoAlgorithm crypto_alg = 8;
        string local_crypto_key = 9;
        string remote_crypto_key = 10;

        IntegAlgorithm integ_alg = 11;
        string local_integ_key = 12;
        string remote_integ_key = 13;

        /* Extra fields related to interface */
        bool enabled = 100;
        repeated string ip_addresses = 101;
        uint32 vrf = 102;
    }
    repeated Tunnel tunnels = 1;
}

/* Security Policy Database (SPD) */
message SecurityPolicyDatabases {
    message SPD {
        string name = 1;

        /* Interface */
        message Interface {
            string name = 1;    /* interface name */
        }
        repeated Interface interfaces = 2;    /* list of interfaces belonging to this SPD */

        /* Policy Entry */
        message PolicyEntry {
            string sa = 1;     /* security association name */

            int32 priority = 2;
            bool is_outbound = 3;

            string remote_addr_start = 4;
            string remote_addr_stop = 5;
            string local_addr_start = 6;
            string local_addr_stop = 7;

            uint32 protocol = 8;

            uint32 remote_port_start = 9;
            uint32 remote_port_stop = 10;
            uint32 local_port_start = 11;
            uint32 local_port_stop = 12;

            /* Policy action */
            enum Action {
                BYPASS = 0;
                DISCARD = 1;
                //RESOLVE = 2; // unused in VPP
                PROTECT = 3;
            }
            Action action = 13; /* policy action */
        }
        repeated PolicyEntry policy_entries = 3;   /* list of policy entries belonging to this SPD */
    }
    repeated SPD spds = 1;  /* list of all SPDs */
}

/* Security Association (SA) */
message SecurityAssociations {
    message SA {
        string name = 1;    /* security association name */
        uint32 spi = 2;     /* security parameter index */

        /* IPSec protocol */
        enum IPSecProtocol {
            AH = 0;
            ESP = 1;
        }
        IPSecProtocol protocol = 3;

        CryptoAlgorithm crypto_alg = 4;
        string crypto_key = 5;

        IntegAlgorithm integ_alg = 6;
        string integ_key = 7;

        bool use_esn = 8;          /* Use extended sequence number */
        bool use_anti_replay = 9;  /* Use anti replay */

        string tunnel_src_addr = 10;
        string tunnel_dst_addr = 11;
    }
    repeated SA sas = 1;
}

message ResyncRequest {
    repeated TunnelInterfaces.Tunnel tunnels = 1;
    repeated SecurityPolicyDatabases.SPD spds = 2;
    repeated SecurityAssociations.SA sas = 3;
}
