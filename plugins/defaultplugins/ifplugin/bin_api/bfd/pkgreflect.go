// Code generated by github.com/ungerik/pkgreflect DO NOT EDIT.

package bfd

import "reflect"

var Types = map[string]reflect.Type{
	"BfdAuthDelKey":              reflect.TypeOf((*BfdAuthDelKey)(nil)).Elem(),
	"BfdAuthDelKeyReply":         reflect.TypeOf((*BfdAuthDelKeyReply)(nil)).Elem(),
	"BfdAuthKeysDetails":         reflect.TypeOf((*BfdAuthKeysDetails)(nil)).Elem(),
	"BfdAuthKeysDump":            reflect.TypeOf((*BfdAuthKeysDump)(nil)).Elem(),
	"BfdAuthSetKey":              reflect.TypeOf((*BfdAuthSetKey)(nil)).Elem(),
	"BfdAuthSetKeyReply":         reflect.TypeOf((*BfdAuthSetKeyReply)(nil)).Elem(),
	"BfdUDPAdd":                  reflect.TypeOf((*BfdUDPAdd)(nil)).Elem(),
	"BfdUDPAddReply":             reflect.TypeOf((*BfdUDPAddReply)(nil)).Elem(),
	"BfdUDPAuthActivate":         reflect.TypeOf((*BfdUDPAuthActivate)(nil)).Elem(),
	"BfdUDPAuthActivateReply":    reflect.TypeOf((*BfdUDPAuthActivateReply)(nil)).Elem(),
	"BfdUDPAuthDeactivate":       reflect.TypeOf((*BfdUDPAuthDeactivate)(nil)).Elem(),
	"BfdUDPAuthDeactivateReply":  reflect.TypeOf((*BfdUDPAuthDeactivateReply)(nil)).Elem(),
	"BfdUDPDel":                  reflect.TypeOf((*BfdUDPDel)(nil)).Elem(),
	"BfdUDPDelEchoSource":        reflect.TypeOf((*BfdUDPDelEchoSource)(nil)).Elem(),
	"BfdUDPDelEchoSourceReply":   reflect.TypeOf((*BfdUDPDelEchoSourceReply)(nil)).Elem(),
	"BfdUDPDelReply":             reflect.TypeOf((*BfdUDPDelReply)(nil)).Elem(),
	"BfdUDPMod":                  reflect.TypeOf((*BfdUDPMod)(nil)).Elem(),
	"BfdUDPModReply":             reflect.TypeOf((*BfdUDPModReply)(nil)).Elem(),
	"BfdUDPSessionDetails":       reflect.TypeOf((*BfdUDPSessionDetails)(nil)).Elem(),
	"BfdUDPSessionDump":          reflect.TypeOf((*BfdUDPSessionDump)(nil)).Elem(),
	"BfdUDPSessionSetFlags":      reflect.TypeOf((*BfdUDPSessionSetFlags)(nil)).Elem(),
	"BfdUDPSessionSetFlagsReply": reflect.TypeOf((*BfdUDPSessionSetFlagsReply)(nil)).Elem(),
	"BfdUDPSetEchoSource":        reflect.TypeOf((*BfdUDPSetEchoSource)(nil)).Elem(),
	"BfdUDPSetEchoSourceReply":   reflect.TypeOf((*BfdUDPSetEchoSourceReply)(nil)).Elem(),
	"WantBfdEvents":              reflect.TypeOf((*WantBfdEvents)(nil)).Elem(),
	"WantBfdEventsReply":         reflect.TypeOf((*WantBfdEventsReply)(nil)).Elem(),
}

var Functions = map[string]reflect.Value{
	"NewBfdAuthDelKey":              reflect.ValueOf(NewBfdAuthDelKey),
	"NewBfdAuthDelKeyReply":         reflect.ValueOf(NewBfdAuthDelKeyReply),
	"NewBfdAuthKeysDetails":         reflect.ValueOf(NewBfdAuthKeysDetails),
	"NewBfdAuthKeysDump":            reflect.ValueOf(NewBfdAuthKeysDump),
	"NewBfdAuthSetKey":              reflect.ValueOf(NewBfdAuthSetKey),
	"NewBfdAuthSetKeyReply":         reflect.ValueOf(NewBfdAuthSetKeyReply),
	"NewBfdUDPAdd":                  reflect.ValueOf(NewBfdUDPAdd),
	"NewBfdUDPAddReply":             reflect.ValueOf(NewBfdUDPAddReply),
	"NewBfdUDPAuthActivate":         reflect.ValueOf(NewBfdUDPAuthActivate),
	"NewBfdUDPAuthActivateReply":    reflect.ValueOf(NewBfdUDPAuthActivateReply),
	"NewBfdUDPAuthDeactivate":       reflect.ValueOf(NewBfdUDPAuthDeactivate),
	"NewBfdUDPAuthDeactivateReply":  reflect.ValueOf(NewBfdUDPAuthDeactivateReply),
	"NewBfdUDPDel":                  reflect.ValueOf(NewBfdUDPDel),
	"NewBfdUDPDelEchoSource":        reflect.ValueOf(NewBfdUDPDelEchoSource),
	"NewBfdUDPDelEchoSourceReply":   reflect.ValueOf(NewBfdUDPDelEchoSourceReply),
	"NewBfdUDPDelReply":             reflect.ValueOf(NewBfdUDPDelReply),
	"NewBfdUDPMod":                  reflect.ValueOf(NewBfdUDPMod),
	"NewBfdUDPModReply":             reflect.ValueOf(NewBfdUDPModReply),
	"NewBfdUDPSessionDetails":       reflect.ValueOf(NewBfdUDPSessionDetails),
	"NewBfdUDPSessionDump":          reflect.ValueOf(NewBfdUDPSessionDump),
	"NewBfdUDPSessionSetFlags":      reflect.ValueOf(NewBfdUDPSessionSetFlags),
	"NewBfdUDPSessionSetFlagsReply": reflect.ValueOf(NewBfdUDPSessionSetFlagsReply),
	"NewBfdUDPSetEchoSource":        reflect.ValueOf(NewBfdUDPSetEchoSource),
	"NewBfdUDPSetEchoSourceReply":   reflect.ValueOf(NewBfdUDPSetEchoSourceReply),
	"NewWantBfdEvents":              reflect.ValueOf(NewWantBfdEvents),
	"NewWantBfdEventsReply":         reflect.ValueOf(NewWantBfdEventsReply),
}

var Variables = map[string]reflect.Value{}

var Consts = map[string]reflect.Value{
	"VlAPIVersion": reflect.ValueOf(VlAPIVersion),
}
