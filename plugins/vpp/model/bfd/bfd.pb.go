// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bfd.proto

/*
Package bfd is a generated protocol buffer package.

Package bfd provides data model to single-hop UDP transport BFD based on RFC 5880 and RFC 5881.

It is generated from these files:
	bfd.proto

It has these top-level messages:
	SingleHopBFD
*/
package bfd

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type SingleHopBFD_Key_AuthenticationType int32

const (
	SingleHopBFD_Key_KEYED_SHA1            SingleHopBFD_Key_AuthenticationType = 0
	SingleHopBFD_Key_METICULOUS_KEYED_SHA1 SingleHopBFD_Key_AuthenticationType = 1
)

var SingleHopBFD_Key_AuthenticationType_name = map[int32]string{
	0: "KEYED_SHA1",
	1: "METICULOUS_KEYED_SHA1",
}
var SingleHopBFD_Key_AuthenticationType_value = map[string]int32{
	"KEYED_SHA1":            0,
	"METICULOUS_KEYED_SHA1": 1,
}

func (x SingleHopBFD_Key_AuthenticationType) String() string {
	return proto.EnumName(SingleHopBFD_Key_AuthenticationType_name, int32(x))
}
func (SingleHopBFD_Key_AuthenticationType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorBfd, []int{0, 1, 0}
}

type SingleHopBFD struct {
	Sessions     []*SingleHopBFD_Session    `protobuf:"bytes,1,rep,name=sessions" json:"sessions,omitempty"`
	Keys         []*SingleHopBFD_Key        `protobuf:"bytes,2,rep,name=keys" json:"keys,omitempty"`
	EchoFunction *SingleHopBFD_EchoFunction `protobuf:"bytes,3,opt,name=echo_function,json=echoFunction" json:"echo_function,omitempty"`
}

func (m *SingleHopBFD) Reset()                    { *m = SingleHopBFD{} }
func (m *SingleHopBFD) String() string            { return proto.CompactTextString(m) }
func (*SingleHopBFD) ProtoMessage()               {}
func (*SingleHopBFD) Descriptor() ([]byte, []int) { return fileDescriptorBfd, []int{0} }

func (m *SingleHopBFD) GetSessions() []*SingleHopBFD_Session {
	if m != nil {
		return m.Sessions
	}
	return nil
}

func (m *SingleHopBFD) GetKeys() []*SingleHopBFD_Key {
	if m != nil {
		return m.Keys
	}
	return nil
}

func (m *SingleHopBFD) GetEchoFunction() *SingleHopBFD_EchoFunction {
	if m != nil {
		return m.EchoFunction
	}
	return nil
}

type SingleHopBFD_Session struct {
	Interface             string                               `protobuf:"bytes,3,opt,name=interface,proto3" json:"interface,omitempty"`
	DestinationAddress    string                               `protobuf:"bytes,4,opt,name=destination_address,json=destinationAddress,proto3" json:"destination_address,omitempty"`
	SourceAddress         string                               `protobuf:"bytes,5,opt,name=source_address,json=sourceAddress,proto3" json:"source_address,omitempty"`
	Enabled               bool                                 `protobuf:"varint,7,opt,name=enabled,proto3" json:"enabled,omitempty"`
	DesiredMinTxInterval  uint32                               `protobuf:"varint,8,opt,name=desired_min_tx_interval,json=desiredMinTxInterval,proto3" json:"desired_min_tx_interval,omitempty"`
	RequiredMinRxInterval uint32                               `protobuf:"varint,9,opt,name=required_min_rx_interval,json=requiredMinRxInterval,proto3" json:"required_min_rx_interval,omitempty"`
	DetectMultiplier      uint32                               `protobuf:"varint,10,opt,name=detect_multiplier,json=detectMultiplier,proto3" json:"detect_multiplier,omitempty"`
	Authentication        *SingleHopBFD_Session_Authentication `protobuf:"bytes,11,opt,name=authentication" json:"authentication,omitempty"`
}

func (m *SingleHopBFD_Session) Reset()                    { *m = SingleHopBFD_Session{} }
func (m *SingleHopBFD_Session) String() string            { return proto.CompactTextString(m) }
func (*SingleHopBFD_Session) ProtoMessage()               {}
func (*SingleHopBFD_Session) Descriptor() ([]byte, []int) { return fileDescriptorBfd, []int{0, 0} }

func (m *SingleHopBFD_Session) GetInterface() string {
	if m != nil {
		return m.Interface
	}
	return ""
}

func (m *SingleHopBFD_Session) GetDestinationAddress() string {
	if m != nil {
		return m.DestinationAddress
	}
	return ""
}

func (m *SingleHopBFD_Session) GetSourceAddress() string {
	if m != nil {
		return m.SourceAddress
	}
	return ""
}

func (m *SingleHopBFD_Session) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *SingleHopBFD_Session) GetDesiredMinTxInterval() uint32 {
	if m != nil {
		return m.DesiredMinTxInterval
	}
	return 0
}

func (m *SingleHopBFD_Session) GetRequiredMinRxInterval() uint32 {
	if m != nil {
		return m.RequiredMinRxInterval
	}
	return 0
}

func (m *SingleHopBFD_Session) GetDetectMultiplier() uint32 {
	if m != nil {
		return m.DetectMultiplier
	}
	return 0
}

func (m *SingleHopBFD_Session) GetAuthentication() *SingleHopBFD_Session_Authentication {
	if m != nil {
		return m.Authentication
	}
	return nil
}

type SingleHopBFD_Session_Authentication struct {
	KeyId           uint32 `protobuf:"varint,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	AdvertisedKeyId uint32 `protobuf:"varint,2,opt,name=advertised_key_id,json=advertisedKeyId,proto3" json:"advertised_key_id,omitempty"`
}

func (m *SingleHopBFD_Session_Authentication) Reset()         { *m = SingleHopBFD_Session_Authentication{} }
func (m *SingleHopBFD_Session_Authentication) String() string { return proto.CompactTextString(m) }
func (*SingleHopBFD_Session_Authentication) ProtoMessage()    {}
func (*SingleHopBFD_Session_Authentication) Descriptor() ([]byte, []int) {
	return fileDescriptorBfd, []int{0, 0, 0}
}

func (m *SingleHopBFD_Session_Authentication) GetKeyId() uint32 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *SingleHopBFD_Session_Authentication) GetAdvertisedKeyId() uint32 {
	if m != nil {
		return m.AdvertisedKeyId
	}
	return 0
}

type SingleHopBFD_Key struct {
	Name               string                              `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	AuthKeyIndex       uint32                              `protobuf:"varint,2,opt,name=auth_key_index,json=authKeyIndex,proto3" json:"auth_key_index,omitempty"`
	Id                 uint32                              `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	AuthenticationType SingleHopBFD_Key_AuthenticationType `protobuf:"varint,4,opt,name=authentication_type,json=authenticationType,proto3,enum=bfd.SingleHopBFD_Key_AuthenticationType" json:"authentication_type,omitempty"`
	Secret             string                              `protobuf:"bytes,5,opt,name=secret,proto3" json:"secret,omitempty"`
}

func (m *SingleHopBFD_Key) Reset()                    { *m = SingleHopBFD_Key{} }
func (m *SingleHopBFD_Key) String() string            { return proto.CompactTextString(m) }
func (*SingleHopBFD_Key) ProtoMessage()               {}
func (*SingleHopBFD_Key) Descriptor() ([]byte, []int) { return fileDescriptorBfd, []int{0, 1} }

func (m *SingleHopBFD_Key) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SingleHopBFD_Key) GetAuthKeyIndex() uint32 {
	if m != nil {
		return m.AuthKeyIndex
	}
	return 0
}

func (m *SingleHopBFD_Key) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SingleHopBFD_Key) GetAuthenticationType() SingleHopBFD_Key_AuthenticationType {
	if m != nil {
		return m.AuthenticationType
	}
	return SingleHopBFD_Key_KEYED_SHA1
}

func (m *SingleHopBFD_Key) GetSecret() string {
	if m != nil {
		return m.Secret
	}
	return ""
}

type SingleHopBFD_EchoFunction struct {
	Name                string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	EchoSourceInterface string `protobuf:"bytes,2,opt,name=echo_source_interface,json=echoSourceInterface,proto3" json:"echo_source_interface,omitempty"`
}

func (m *SingleHopBFD_EchoFunction) Reset()                    { *m = SingleHopBFD_EchoFunction{} }
func (m *SingleHopBFD_EchoFunction) String() string            { return proto.CompactTextString(m) }
func (*SingleHopBFD_EchoFunction) ProtoMessage()               {}
func (*SingleHopBFD_EchoFunction) Descriptor() ([]byte, []int) { return fileDescriptorBfd, []int{0, 2} }

func (m *SingleHopBFD_EchoFunction) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SingleHopBFD_EchoFunction) GetEchoSourceInterface() string {
	if m != nil {
		return m.EchoSourceInterface
	}
	return ""
}

func init() {
	proto.RegisterType((*SingleHopBFD)(nil), "bfd.SingleHopBFD")
	proto.RegisterType((*SingleHopBFD_Session)(nil), "bfd.SingleHopBFD.Session")
	proto.RegisterType((*SingleHopBFD_Session_Authentication)(nil), "bfd.SingleHopBFD.Session.Authentication")
	proto.RegisterType((*SingleHopBFD_Key)(nil), "bfd.SingleHopBFD.Key")
	proto.RegisterType((*SingleHopBFD_EchoFunction)(nil), "bfd.SingleHopBFD.EchoFunction")
	proto.RegisterEnum("bfd.SingleHopBFD_Key_AuthenticationType", SingleHopBFD_Key_AuthenticationType_name, SingleHopBFD_Key_AuthenticationType_value)
}

func init() { proto.RegisterFile("bfd.proto", fileDescriptorBfd) }

var fileDescriptorBfd = []byte{
	// 547 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x94, 0xd1, 0x6e, 0xda, 0x4c,
	0x10, 0x85, 0x7f, 0x9b, 0x24, 0x84, 0x09, 0xf8, 0x4f, 0x26, 0xa5, 0x75, 0x50, 0x55, 0xa1, 0xa8,
	0x95, 0x68, 0x2b, 0x51, 0x95, 0x2a, 0xea, 0x65, 0x45, 0x13, 0xa2, 0x20, 0x8a, 0x5a, 0xd9, 0xa4,
	0x52, 0xae, 0x2c, 0xe3, 0x1d, 0xca, 0x0a, 0x58, 0x53, 0xef, 0x12, 0xe1, 0xeb, 0x3e, 0x67, 0x9f,
	0xa2, 0x2f, 0x50, 0x79, 0x6d, 0xc0, 0x84, 0xf4, 0x8e, 0x3d, 0xe7, 0x3b, 0xa3, 0x99, 0x65, 0xd6,
	0x50, 0x1a, 0x8e, 0x58, 0x73, 0x1e, 0x85, 0x2a, 0xc4, 0xc2, 0x70, 0xc4, 0xce, 0xff, 0x14, 0xa1,
	0xec, 0x72, 0xf1, 0x63, 0x4a, 0x37, 0xe1, 0xfc, 0xf3, 0xf5, 0x15, 0x5e, 0xc0, 0xa1, 0x24, 0x29,
	0x79, 0x28, 0xa4, 0x6d, 0xd4, 0x0b, 0x8d, 0xa3, 0xd6, 0x59, 0x33, 0xc9, 0xe4, 0xa1, 0xa6, 0x9b,
	0x12, 0xce, 0x1a, 0xc5, 0xd7, 0xb0, 0x37, 0xa1, 0x58, 0xda, 0xa6, 0x8e, 0x54, 0x77, 0x23, 0x3d,
	0x8a, 0x1d, 0x8d, 0xe0, 0x25, 0x54, 0x28, 0x18, 0x87, 0xde, 0x68, 0x21, 0x02, 0xc5, 0x43, 0x61,
	0x17, 0xea, 0x46, 0xe3, 0xa8, 0xf5, 0x62, 0x37, 0xd3, 0x09, 0xc6, 0xe1, 0x75, 0x46, 0x39, 0x65,
	0xca, 0x9d, 0x6a, 0xbf, 0x0b, 0x50, 0xcc, 0xba, 0xc0, 0xe7, 0x50, 0xe2, 0x42, 0x51, 0x34, 0xf2,
	0x03, 0xd2, 0xc5, 0x4a, 0xce, 0x46, 0xc0, 0x77, 0x70, 0xca, 0x48, 0x2a, 0x2e, 0xfc, 0x24, 0xe8,
	0xf9, 0x8c, 0x45, 0x24, 0xa5, 0xbd, 0xa7, 0x39, 0xcc, 0x59, 0xed, 0xd4, 0xc1, 0x57, 0x60, 0xc9,
	0x70, 0x11, 0x05, 0xb4, 0x66, 0xf7, 0x35, 0x5b, 0x49, 0xd5, 0x15, 0x66, 0x43, 0x91, 0x84, 0x3f,
	0x9c, 0x12, 0xb3, 0x8b, 0x75, 0xa3, 0x71, 0xe8, 0xac, 0x8e, 0x78, 0x01, 0xcf, 0x18, 0x49, 0x1e,
	0x11, 0xf3, 0x66, 0x5c, 0x78, 0x6a, 0xe9, 0xe9, 0x6e, 0xee, 0xfd, 0xa9, 0x7d, 0x58, 0x37, 0x1a,
	0x15, 0xe7, 0x49, 0x66, 0xf7, 0xb9, 0x18, 0x2c, 0xbb, 0x99, 0x87, 0x1f, 0xc1, 0x8e, 0xe8, 0xe7,
	0x62, 0x9d, 0x8b, 0x72, 0xb9, 0x92, 0xce, 0x55, 0x57, 0x7e, 0x9f, 0x0b, 0x67, 0x13, 0x7c, 0x0b,
	0x27, 0x8c, 0x14, 0x05, 0xca, 0x9b, 0x2d, 0xa6, 0x8a, 0xcf, 0xa7, 0x9c, 0x22, 0x1b, 0x74, 0xe2,
	0x38, 0x35, 0xfa, 0x6b, 0x1d, 0xbf, 0x81, 0xe5, 0x2f, 0xd4, 0x98, 0x84, 0xe2, 0x81, 0x1e, 0xdb,
	0x3e, 0xd2, 0xd7, 0xdf, 0xf8, 0xe7, 0xbf, 0xdc, 0x6c, 0x6f, 0xf1, 0xce, 0x83, 0x7c, 0xcd, 0x05,
	0x6b, 0x9b, 0xc0, 0x2a, 0x1c, 0x4c, 0x28, 0xf6, 0x38, 0xb3, 0x0d, 0xdd, 0xc5, 0xfe, 0x84, 0xe2,
	0x2e, 0xc3, 0x37, 0x70, 0xe2, 0xb3, 0x7b, 0x8a, 0x14, 0x97, 0xc4, 0xbc, 0x8c, 0x30, 0x35, 0xf1,
	0xff, 0xc6, 0xe8, 0x25, 0x6c, 0xed, 0x97, 0x09, 0x85, 0x1e, 0xc5, 0x88, 0xb0, 0x27, 0xfc, 0x19,
	0xe9, 0x42, 0x25, 0x47, 0xff, 0xc6, 0x97, 0xe9, 0x08, 0x69, 0x05, 0xc1, 0x68, 0x99, 0x15, 0x29,
	0x27, 0x6a, 0x12, 0x4f, 0x34, 0xb4, 0xc0, 0xe4, 0x4c, 0xaf, 0x43, 0xc5, 0x31, 0x39, 0xc3, 0x3b,
	0x38, 0xdd, 0x6e, 0xdc, 0x53, 0xf1, 0x9c, 0xf4, 0x1e, 0x58, 0x8f, 0x4d, 0xdf, 0xa3, 0xf8, 0xc1,
	0xe4, 0x83, 0x78, 0x4e, 0x0e, 0xfa, 0x3b, 0x1a, 0x3e, 0x85, 0x03, 0x49, 0x41, 0x44, 0x2a, 0xdb,
	0x94, 0xec, 0x74, 0xfe, 0x09, 0x70, 0xb7, 0x02, 0x5a, 0x00, 0xbd, 0xce, 0x5d, 0xe7, 0xca, 0x73,
	0x6f, 0xda, 0xef, 0x8f, 0xff, 0xc3, 0x33, 0xa8, 0xf6, 0x3b, 0x83, 0xee, 0xe5, 0xed, 0x97, 0xaf,
	0xb7, 0xae, 0x97, 0xb3, 0x8c, 0xda, 0x77, 0x28, 0xe7, 0xdf, 0xc0, 0xa3, 0xb7, 0xd1, 0x82, 0xaa,
	0x7e, 0x4e, 0xd9, 0xce, 0x6e, 0x5e, 0x82, 0xa9, 0xa1, 0xd3, 0xc4, 0x74, 0xb5, 0xd7, 0x5d, 0x59,
	0xc3, 0x03, 0xfd, 0x05, 0xf8, 0xf0, 0x37, 0x00, 0x00, 0xff, 0xff, 0xc3, 0xf0, 0xe6, 0x06, 0x0e,
	0x04, 0x00, 0x00,
}
