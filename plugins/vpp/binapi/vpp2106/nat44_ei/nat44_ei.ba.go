// Code generated by GoVPP's binapi-generator. DO NOT EDIT.

// Package nat44_ei contains generated bindings for API file nat44_ei.api.
//
// Contents:
//   1 enum
//  73 messages
//
package nat44_ei

import (
	"strconv"

	api "git.fd.io/govpp.git/api"
	codec "git.fd.io/govpp.git/codec"
	interface_types "go.ligato.io/vpp-agent/v3/plugins/vpp/binapi/vpp2106/interface_types"
	ip_types "go.ligato.io/vpp-agent/v3/plugins/vpp/binapi/vpp2106/ip_types"
	nat_types "go.ligato.io/vpp-agent/v3/plugins/vpp/binapi/vpp2106/nat_types"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the GoVPP api package it is being compiled against.
// A compilation error at this line likely means your copy of the
// GoVPP api package needs to be updated.
const _ = api.GoVppAPIPackageIsVersion2

const (
	APIFile    = "nat44_ei"
	APIVersion = "1.1.1"
	VersionCrc = 0x62d113ee
)

// Nat44EiConfigFlags defines enum 'nat44_ei_config_flags'.
type Nat44EiConfigFlags uint8

const (
	NAT44_EI_NONE                Nat44EiConfigFlags = 0
	NAT44_EI_STATIC_MAPPING_ONLY Nat44EiConfigFlags = 1
	NAT44_EI_CONNECTION_TRACKING Nat44EiConfigFlags = 2
	NAT44_EI_OUT2IN_DPO          Nat44EiConfigFlags = 4
	NAT44_EI_ADDR_ONLY_MAPPING   Nat44EiConfigFlags = 8
	NAT44_EI_IF_INSIDE           Nat44EiConfigFlags = 16
	NAT44_EI_IF_OUTSIDE          Nat44EiConfigFlags = 32
	NAT44_EI_STATIC_MAPPING      Nat44EiConfigFlags = 64
)

var (
	Nat44EiConfigFlags_name = map[uint8]string{
		0:  "NAT44_EI_NONE",
		1:  "NAT44_EI_STATIC_MAPPING_ONLY",
		2:  "NAT44_EI_CONNECTION_TRACKING",
		4:  "NAT44_EI_OUT2IN_DPO",
		8:  "NAT44_EI_ADDR_ONLY_MAPPING",
		16: "NAT44_EI_IF_INSIDE",
		32: "NAT44_EI_IF_OUTSIDE",
		64: "NAT44_EI_STATIC_MAPPING",
	}
	Nat44EiConfigFlags_value = map[string]uint8{
		"NAT44_EI_NONE":                0,
		"NAT44_EI_STATIC_MAPPING_ONLY": 1,
		"NAT44_EI_CONNECTION_TRACKING": 2,
		"NAT44_EI_OUT2IN_DPO":          4,
		"NAT44_EI_ADDR_ONLY_MAPPING":   8,
		"NAT44_EI_IF_INSIDE":           16,
		"NAT44_EI_IF_OUTSIDE":          32,
		"NAT44_EI_STATIC_MAPPING":      64,
	}
)

func (x Nat44EiConfigFlags) String() string {
	s, ok := Nat44EiConfigFlags_name[uint8(x)]
	if ok {
		return s
	}
	str := func(n uint8) string {
		s, ok := Nat44EiConfigFlags_name[uint8(n)]
		if ok {
			return s
		}
		return "Nat44EiConfigFlags(" + strconv.Itoa(int(n)) + ")"
	}
	for i := uint8(0); i <= 8; i++ {
		val := uint8(x)
		if val&(1<<i) != 0 {
			if s != "" {
				s += "|"
			}
			s += str(1 << i)
		}
	}
	if s == "" {
		return str(uint8(x))
	}
	return s
}

// Nat44EiAddDelAddressRange defines message 'nat44_ei_add_del_address_range'.
// InProgress: the message form may change in the future versions
type Nat44EiAddDelAddressRange struct {
	FirstIPAddress ip_types.IP4Address `binapi:"ip4_address,name=first_ip_address" json:"first_ip_address,omitempty"`
	LastIPAddress  ip_types.IP4Address `binapi:"ip4_address,name=last_ip_address" json:"last_ip_address,omitempty"`
	VrfID          uint32              `binapi:"u32,name=vrf_id" json:"vrf_id,omitempty"`
	IsAdd          bool                `binapi:"bool,name=is_add" json:"is_add,omitempty"`
}

func (m *Nat44EiAddDelAddressRange) Reset()               { *m = Nat44EiAddDelAddressRange{} }
func (*Nat44EiAddDelAddressRange) GetMessageName() string { return "nat44_ei_add_del_address_range" }
func (*Nat44EiAddDelAddressRange) GetCrcString() string   { return "35f21abc" }
func (*Nat44EiAddDelAddressRange) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *Nat44EiAddDelAddressRange) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1 * 4 // m.FirstIPAddress
	size += 1 * 4 // m.LastIPAddress
	size += 4     // m.VrfID
	size += 1     // m.IsAdd
	return size
}
func (m *Nat44EiAddDelAddressRange) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeBytes(m.FirstIPAddress[:], 4)
	buf.EncodeBytes(m.LastIPAddress[:], 4)
	buf.EncodeUint32(m.VrfID)
	buf.EncodeBool(m.IsAdd)
	return buf.Bytes(), nil
}
func (m *Nat44EiAddDelAddressRange) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	copy(m.FirstIPAddress[:], buf.DecodeBytes(4))
	copy(m.LastIPAddress[:], buf.DecodeBytes(4))
	m.VrfID = buf.DecodeUint32()
	m.IsAdd = buf.DecodeBool()
	return nil
}

// Nat44EiAddDelAddressRangeReply defines message 'nat44_ei_add_del_address_range_reply'.
// InProgress: the message form may change in the future versions
type Nat44EiAddDelAddressRangeReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *Nat44EiAddDelAddressRangeReply) Reset() { *m = Nat44EiAddDelAddressRangeReply{} }
func (*Nat44EiAddDelAddressRangeReply) GetMessageName() string {
	return "nat44_ei_add_del_address_range_reply"
}
func (*Nat44EiAddDelAddressRangeReply) GetCrcString() string { return "e8d4e804" }
func (*Nat44EiAddDelAddressRangeReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *Nat44EiAddDelAddressRangeReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *Nat44EiAddDelAddressRangeReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *Nat44EiAddDelAddressRangeReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// Nat44EiAddDelIdentityMapping defines message 'nat44_ei_add_del_identity_mapping'.
// Deprecated: the message will be removed in the future versions
type Nat44EiAddDelIdentityMapping struct {
	IsAdd     bool                           `binapi:"bool,name=is_add" json:"is_add,omitempty"`
	Flags     Nat44EiConfigFlags             `binapi:"nat44_ei_config_flags,name=flags" json:"flags,omitempty"`
	IPAddress ip_types.IP4Address            `binapi:"ip4_address,name=ip_address" json:"ip_address,omitempty"`
	Protocol  uint8                          `binapi:"u8,name=protocol" json:"protocol,omitempty"`
	Port      uint16                         `binapi:"u16,name=port" json:"port,omitempty"`
	SwIfIndex interface_types.InterfaceIndex `binapi:"interface_index,name=sw_if_index" json:"sw_if_index,omitempty"`
	VrfID     uint32                         `binapi:"u32,name=vrf_id" json:"vrf_id,omitempty"`
	Tag       string                         `binapi:"string[64],name=tag" json:"tag,omitempty"`
}

func (m *Nat44EiAddDelIdentityMapping) Reset() { *m = Nat44EiAddDelIdentityMapping{} }
func (*Nat44EiAddDelIdentityMapping) GetMessageName() string {
	return "nat44_ei_add_del_identity_mapping"
}
func (*Nat44EiAddDelIdentityMapping) GetCrcString() string { return "cb8606b9" }
func (*Nat44EiAddDelIdentityMapping) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *Nat44EiAddDelIdentityMapping) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1     // m.IsAdd
	size += 1     // m.Flags
	size += 1 * 4 // m.IPAddress
	size += 1     // m.Protocol
	size += 2     // m.Port
	size += 4     // m.SwIfIndex
	size += 4     // m.VrfID
	size += 64    // m.Tag
	return size
}
func (m *Nat44EiAddDelIdentityMapping) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeBool(m.IsAdd)
	buf.EncodeUint8(uint8(m.Flags))
	buf.EncodeBytes(m.IPAddress[:], 4)
	buf.EncodeUint8(m.Protocol)
	buf.EncodeUint16(m.Port)
	buf.EncodeUint32(uint32(m.SwIfIndex))
	buf.EncodeUint32(m.VrfID)
	buf.EncodeString(m.Tag, 64)
	return buf.Bytes(), nil
}
func (m *Nat44EiAddDelIdentityMapping) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.IsAdd = buf.DecodeBool()
	m.Flags = Nat44EiConfigFlags(buf.DecodeUint8())
	copy(m.IPAddress[:], buf.DecodeBytes(4))
	m.Protocol = buf.DecodeUint8()
	m.Port = buf.DecodeUint16()
	m.SwIfIndex = interface_types.InterfaceIndex(buf.DecodeUint32())
	m.VrfID = buf.DecodeUint32()
	m.Tag = buf.DecodeString(64)
	return nil
}

// Nat44EiAddDelIdentityMappingReply defines message 'nat44_ei_add_del_identity_mapping_reply'.
// Deprecated: the message will be removed in the future versions
type Nat44EiAddDelIdentityMappingReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *Nat44EiAddDelIdentityMappingReply) Reset() { *m = Nat44EiAddDelIdentityMappingReply{} }
func (*Nat44EiAddDelIdentityMappingReply) GetMessageName() string {
	return "nat44_ei_add_del_identity_mapping_reply"
}
func (*Nat44EiAddDelIdentityMappingReply) GetCrcString() string { return "e8d4e804" }
func (*Nat44EiAddDelIdentityMappingReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *Nat44EiAddDelIdentityMappingReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *Nat44EiAddDelIdentityMappingReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *Nat44EiAddDelIdentityMappingReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// Nat44EiAddDelInterfaceAddr defines message 'nat44_ei_add_del_interface_addr'.
// Deprecated: the message will be removed in the future versions
type Nat44EiAddDelInterfaceAddr struct {
	IsAdd     bool                           `binapi:"bool,name=is_add" json:"is_add,omitempty"`
	SwIfIndex interface_types.InterfaceIndex `binapi:"interface_index,name=sw_if_index" json:"sw_if_index,omitempty"`
	Flags     Nat44EiConfigFlags             `binapi:"nat44_ei_config_flags,name=flags" json:"flags,omitempty"`
}

func (m *Nat44EiAddDelInterfaceAddr) Reset()               { *m = Nat44EiAddDelInterfaceAddr{} }
func (*Nat44EiAddDelInterfaceAddr) GetMessageName() string { return "nat44_ei_add_del_interface_addr" }
func (*Nat44EiAddDelInterfaceAddr) GetCrcString() string   { return "883abbcc" }
func (*Nat44EiAddDelInterfaceAddr) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *Nat44EiAddDelInterfaceAddr) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1 // m.IsAdd
	size += 4 // m.SwIfIndex
	size += 1 // m.Flags
	return size
}
func (m *Nat44EiAddDelInterfaceAddr) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeBool(m.IsAdd)
	buf.EncodeUint32(uint32(m.SwIfIndex))
	buf.EncodeUint8(uint8(m.Flags))
	return buf.Bytes(), nil
}
func (m *Nat44EiAddDelInterfaceAddr) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.IsAdd = buf.DecodeBool()
	m.SwIfIndex = interface_types.InterfaceIndex(buf.DecodeUint32())
	m.Flags = Nat44EiConfigFlags(buf.DecodeUint8())
	return nil
}

// Nat44EiAddDelInterfaceAddrReply defines message 'nat44_ei_add_del_interface_addr_reply'.
// Deprecated: the message will be removed in the future versions
type Nat44EiAddDelInterfaceAddrReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *Nat44EiAddDelInterfaceAddrReply) Reset() { *m = Nat44EiAddDelInterfaceAddrReply{} }
func (*Nat44EiAddDelInterfaceAddrReply) GetMessageName() string {
	return "nat44_ei_add_del_interface_addr_reply"
}
func (*Nat44EiAddDelInterfaceAddrReply) GetCrcString() string { return "e8d4e804" }
func (*Nat44EiAddDelInterfaceAddrReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *Nat44EiAddDelInterfaceAddrReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *Nat44EiAddDelInterfaceAddrReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *Nat44EiAddDelInterfaceAddrReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// Nat44EiAddDelStaticMapping defines message 'nat44_ei_add_del_static_mapping'.
// InProgress: the message form may change in the future versions
type Nat44EiAddDelStaticMapping struct {
	IsAdd             bool                           `binapi:"bool,name=is_add" json:"is_add,omitempty"`
	Flags             Nat44EiConfigFlags             `binapi:"nat44_ei_config_flags,name=flags" json:"flags,omitempty"`
	LocalIPAddress    ip_types.IP4Address            `binapi:"ip4_address,name=local_ip_address" json:"local_ip_address,omitempty"`
	ExternalIPAddress ip_types.IP4Address            `binapi:"ip4_address,name=external_ip_address" json:"external_ip_address,omitempty"`
	Protocol          uint8                          `binapi:"u8,name=protocol" json:"protocol,omitempty"`
	LocalPort         uint16                         `binapi:"u16,name=local_port" json:"local_port,omitempty"`
	ExternalPort      uint16                         `binapi:"u16,name=external_port" json:"external_port,omitempty"`
	ExternalSwIfIndex interface_types.InterfaceIndex `binapi:"interface_index,name=external_sw_if_index" json:"external_sw_if_index,omitempty"`
	VrfID             uint32                         `binapi:"u32,name=vrf_id" json:"vrf_id,omitempty"`
	Tag               string                         `binapi:"string[64],name=tag" json:"tag,omitempty"`
}

func (m *Nat44EiAddDelStaticMapping) Reset()               { *m = Nat44EiAddDelStaticMapping{} }
func (*Nat44EiAddDelStaticMapping) GetMessageName() string { return "nat44_ei_add_del_static_mapping" }
func (*Nat44EiAddDelStaticMapping) GetCrcString() string   { return "b404b7fe" }
func (*Nat44EiAddDelStaticMapping) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *Nat44EiAddDelStaticMapping) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1     // m.IsAdd
	size += 1     // m.Flags
	size += 1 * 4 // m.LocalIPAddress
	size += 1 * 4 // m.ExternalIPAddress
	size += 1     // m.Protocol
	size += 2     // m.LocalPort
	size += 2     // m.ExternalPort
	size += 4     // m.ExternalSwIfIndex
	size += 4     // m.VrfID
	size += 64    // m.Tag
	return size
}
func (m *Nat44EiAddDelStaticMapping) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeBool(m.IsAdd)
	buf.EncodeUint8(uint8(m.Flags))
	buf.EncodeBytes(m.LocalIPAddress[:], 4)
	buf.EncodeBytes(m.ExternalIPAddress[:], 4)
	buf.EncodeUint8(m.Protocol)
	buf.EncodeUint16(m.LocalPort)
	buf.EncodeUint16(m.ExternalPort)
	buf.EncodeUint32(uint32(m.ExternalSwIfIndex))
	buf.EncodeUint32(m.VrfID)
	buf.EncodeString(m.Tag, 64)
	return buf.Bytes(), nil
}
func (m *Nat44EiAddDelStaticMapping) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.IsAdd = buf.DecodeBool()
	m.Flags = Nat44EiConfigFlags(buf.DecodeUint8())
	copy(m.LocalIPAddress[:], buf.DecodeBytes(4))
	copy(m.ExternalIPAddress[:], buf.DecodeBytes(4))
	m.Protocol = buf.DecodeUint8()
	m.LocalPort = buf.DecodeUint16()
	m.ExternalPort = buf.DecodeUint16()
	m.ExternalSwIfIndex = interface_types.InterfaceIndex(buf.DecodeUint32())
	m.VrfID = buf.DecodeUint32()
	m.Tag = buf.DecodeString(64)
	return nil
}

// Nat44EiAddDelStaticMappingReply defines message 'nat44_ei_add_del_static_mapping_reply'.
// InProgress: the message form may change in the future versions
type Nat44EiAddDelStaticMappingReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *Nat44EiAddDelStaticMappingReply) Reset() { *m = Nat44EiAddDelStaticMappingReply{} }
func (*Nat44EiAddDelStaticMappingReply) GetMessageName() string {
	return "nat44_ei_add_del_static_mapping_reply"
}
func (*Nat44EiAddDelStaticMappingReply) GetCrcString() string { return "e8d4e804" }
func (*Nat44EiAddDelStaticMappingReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *Nat44EiAddDelStaticMappingReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *Nat44EiAddDelStaticMappingReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *Nat44EiAddDelStaticMappingReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// Nat44EiAddressDetails defines message 'nat44_ei_address_details'.
// InProgress: the message form may change in the future versions
type Nat44EiAddressDetails struct {
	IPAddress ip_types.IP4Address `binapi:"ip4_address,name=ip_address" json:"ip_address,omitempty"`
	VrfID     uint32              `binapi:"u32,name=vrf_id" json:"vrf_id,omitempty"`
}

func (m *Nat44EiAddressDetails) Reset()               { *m = Nat44EiAddressDetails{} }
func (*Nat44EiAddressDetails) GetMessageName() string { return "nat44_ei_address_details" }
func (*Nat44EiAddressDetails) GetCrcString() string   { return "318f1202" }
func (*Nat44EiAddressDetails) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *Nat44EiAddressDetails) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1 * 4 // m.IPAddress
	size += 4     // m.VrfID
	return size
}
func (m *Nat44EiAddressDetails) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeBytes(m.IPAddress[:], 4)
	buf.EncodeUint32(m.VrfID)
	return buf.Bytes(), nil
}
func (m *Nat44EiAddressDetails) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	copy(m.IPAddress[:], buf.DecodeBytes(4))
	m.VrfID = buf.DecodeUint32()
	return nil
}

// Nat44EiAddressDump defines message 'nat44_ei_address_dump'.
// InProgress: the message form may change in the future versions
type Nat44EiAddressDump struct{}

func (m *Nat44EiAddressDump) Reset()               { *m = Nat44EiAddressDump{} }
func (*Nat44EiAddressDump) GetMessageName() string { return "nat44_ei_address_dump" }
func (*Nat44EiAddressDump) GetCrcString() string   { return "51077d14" }
func (*Nat44EiAddressDump) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *Nat44EiAddressDump) Size() (size int) {
	if m == nil {
		return 0
	}
	return size
}
func (m *Nat44EiAddressDump) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	return buf.Bytes(), nil
}
func (m *Nat44EiAddressDump) Unmarshal(b []byte) error {
	return nil
}

// Nat44EiDelSession defines message 'nat44_ei_del_session'.
// InProgress: the message form may change in the future versions
type Nat44EiDelSession struct {
	Address        ip_types.IP4Address `binapi:"ip4_address,name=address" json:"address,omitempty"`
	Protocol       uint8               `binapi:"u8,name=protocol" json:"protocol,omitempty"`
	Port           uint16              `binapi:"u16,name=port" json:"port,omitempty"`
	VrfID          uint32              `binapi:"u32,name=vrf_id" json:"vrf_id,omitempty"`
	Flags          Nat44EiConfigFlags  `binapi:"nat44_ei_config_flags,name=flags" json:"flags,omitempty"`
	ExtHostAddress ip_types.IP4Address `binapi:"ip4_address,name=ext_host_address" json:"ext_host_address,omitempty"`
	ExtHostPort    uint16              `binapi:"u16,name=ext_host_port" json:"ext_host_port,omitempty"`
}

func (m *Nat44EiDelSession) Reset()               { *m = Nat44EiDelSession{} }
func (*Nat44EiDelSession) GetMessageName() string { return "nat44_ei_del_session" }
func (*Nat44EiDelSession) GetCrcString() string   { return "74969ffe" }
func (*Nat44EiDelSession) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *Nat44EiDelSession) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1 * 4 // m.Address
	size += 1     // m.Protocol
	size += 2     // m.Port
	size += 4     // m.VrfID
	size += 1     // m.Flags
	size += 1 * 4 // m.ExtHostAddress
	size += 2     // m.ExtHostPort
	return size
}
func (m *Nat44EiDelSession) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeBytes(m.Address[:], 4)
	buf.EncodeUint8(m.Protocol)
	buf.EncodeUint16(m.Port)
	buf.EncodeUint32(m.VrfID)
	buf.EncodeUint8(uint8(m.Flags))
	buf.EncodeBytes(m.ExtHostAddress[:], 4)
	buf.EncodeUint16(m.ExtHostPort)
	return buf.Bytes(), nil
}
func (m *Nat44EiDelSession) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	copy(m.Address[:], buf.DecodeBytes(4))
	m.Protocol = buf.DecodeUint8()
	m.Port = buf.DecodeUint16()
	m.VrfID = buf.DecodeUint32()
	m.Flags = Nat44EiConfigFlags(buf.DecodeUint8())
	copy(m.ExtHostAddress[:], buf.DecodeBytes(4))
	m.ExtHostPort = buf.DecodeUint16()
	return nil
}

// Nat44EiDelSessionReply defines message 'nat44_ei_del_session_reply'.
// InProgress: the message form may change in the future versions
type Nat44EiDelSessionReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *Nat44EiDelSessionReply) Reset()               { *m = Nat44EiDelSessionReply{} }
func (*Nat44EiDelSessionReply) GetMessageName() string { return "nat44_ei_del_session_reply" }
func (*Nat44EiDelSessionReply) GetCrcString() string   { return "e8d4e804" }
func (*Nat44EiDelSessionReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *Nat44EiDelSessionReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *Nat44EiDelSessionReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *Nat44EiDelSessionReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// Nat44EiDelUser defines message 'nat44_ei_del_user'.
// InProgress: the message form may change in the future versions
type Nat44EiDelUser struct {
	IPAddress ip_types.IP4Address `binapi:"ip4_address,name=ip_address" json:"ip_address,omitempty"`
	FibIndex  uint32              `binapi:"u32,name=fib_index" json:"fib_index,omitempty"`
}

func (m *Nat44EiDelUser) Reset()               { *m = Nat44EiDelUser{} }
func (*Nat44EiDelUser) GetMessageName() string { return "nat44_ei_del_user" }
func (*Nat44EiDelUser) GetCrcString() string   { return "99a9f998" }
func (*Nat44EiDelUser) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *Nat44EiDelUser) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1 * 4 // m.IPAddress
	size += 4     // m.FibIndex
	return size
}
func (m *Nat44EiDelUser) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeBytes(m.IPAddress[:], 4)
	buf.EncodeUint32(m.FibIndex)
	return buf.Bytes(), nil
}
func (m *Nat44EiDelUser) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	copy(m.IPAddress[:], buf.DecodeBytes(4))
	m.FibIndex = buf.DecodeUint32()
	return nil
}

// Nat44EiDelUserReply defines message 'nat44_ei_del_user_reply'.
// InProgress: the message form may change in the future versions
type Nat44EiDelUserReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *Nat44EiDelUserReply) Reset()               { *m = Nat44EiDelUserReply{} }
func (*Nat44EiDelUserReply) GetMessageName() string { return "nat44_ei_del_user_reply" }
func (*Nat44EiDelUserReply) GetCrcString() string   { return "e8d4e804" }
func (*Nat44EiDelUserReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *Nat44EiDelUserReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *Nat44EiDelUserReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *Nat44EiDelUserReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// Nat44EiForwardingEnableDisable defines message 'nat44_ei_forwarding_enable_disable'.
// InProgress: the message form may change in the future versions
type Nat44EiForwardingEnableDisable struct {
	Enable bool `binapi:"bool,name=enable" json:"enable,omitempty"`
}

func (m *Nat44EiForwardingEnableDisable) Reset() { *m = Nat44EiForwardingEnableDisable{} }
func (*Nat44EiForwardingEnableDisable) GetMessageName() string {
	return "nat44_ei_forwarding_enable_disable"
}
func (*Nat44EiForwardingEnableDisable) GetCrcString() string { return "b3e225d2" }
func (*Nat44EiForwardingEnableDisable) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *Nat44EiForwardingEnableDisable) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1 // m.Enable
	return size
}
func (m *Nat44EiForwardingEnableDisable) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeBool(m.Enable)
	return buf.Bytes(), nil
}
func (m *Nat44EiForwardingEnableDisable) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Enable = buf.DecodeBool()
	return nil
}

// Nat44EiForwardingEnableDisableReply defines message 'nat44_ei_forwarding_enable_disable_reply'.
// InProgress: the message form may change in the future versions
type Nat44EiForwardingEnableDisableReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *Nat44EiForwardingEnableDisableReply) Reset() { *m = Nat44EiForwardingEnableDisableReply{} }
func (*Nat44EiForwardingEnableDisableReply) GetMessageName() string {
	return "nat44_ei_forwarding_enable_disable_reply"
}
func (*Nat44EiForwardingEnableDisableReply) GetCrcString() string { return "e8d4e804" }
func (*Nat44EiForwardingEnableDisableReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *Nat44EiForwardingEnableDisableReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *Nat44EiForwardingEnableDisableReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *Nat44EiForwardingEnableDisableReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// Nat44EiGetAddrAndPortAllocAlg defines message 'nat44_ei_get_addr_and_port_alloc_alg'.
// Deprecated: the message will be removed in the future versions
type Nat44EiGetAddrAndPortAllocAlg struct{}

func (m *Nat44EiGetAddrAndPortAllocAlg) Reset() { *m = Nat44EiGetAddrAndPortAllocAlg{} }
func (*Nat44EiGetAddrAndPortAllocAlg) GetMessageName() string {
	return "nat44_ei_get_addr_and_port_alloc_alg"
}
func (*Nat44EiGetAddrAndPortAllocAlg) GetCrcString() string { return "51077d14" }
func (*Nat44EiGetAddrAndPortAllocAlg) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *Nat44EiGetAddrAndPortAllocAlg) Size() (size int) {
	if m == nil {
		return 0
	}
	return size
}
func (m *Nat44EiGetAddrAndPortAllocAlg) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	return buf.Bytes(), nil
}
func (m *Nat44EiGetAddrAndPortAllocAlg) Unmarshal(b []byte) error {
	return nil
}

// Nat44EiGetAddrAndPortAllocAlgReply defines message 'nat44_ei_get_addr_and_port_alloc_alg_reply'.
// Deprecated: the message will be removed in the future versions
type Nat44EiGetAddrAndPortAllocAlgReply struct {
	Retval     int32  `binapi:"i32,name=retval" json:"retval,omitempty"`
	Alg        uint8  `binapi:"u8,name=alg" json:"alg,omitempty"`
	PsidOffset uint8  `binapi:"u8,name=psid_offset" json:"psid_offset,omitempty"`
	PsidLength uint8  `binapi:"u8,name=psid_length" json:"psid_length,omitempty"`
	Psid       uint16 `binapi:"u16,name=psid" json:"psid,omitempty"`
	StartPort  uint16 `binapi:"u16,name=start_port" json:"start_port,omitempty"`
	EndPort    uint16 `binapi:"u16,name=end_port" json:"end_port,omitempty"`
}

func (m *Nat44EiGetAddrAndPortAllocAlgReply) Reset() { *m = Nat44EiGetAddrAndPortAllocAlgReply{} }
func (*Nat44EiGetAddrAndPortAllocAlgReply) GetMessageName() string {
	return "nat44_ei_get_addr_and_port_alloc_alg_reply"
}
func (*Nat44EiGetAddrAndPortAllocAlgReply) GetCrcString() string { return "3607a7d0" }
func (*Nat44EiGetAddrAndPortAllocAlgReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *Nat44EiGetAddrAndPortAllocAlgReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	size += 1 // m.Alg
	size += 1 // m.PsidOffset
	size += 1 // m.PsidLength
	size += 2 // m.Psid
	size += 2 // m.StartPort
	size += 2 // m.EndPort
	return size
}
func (m *Nat44EiGetAddrAndPortAllocAlgReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	buf.EncodeUint8(m.Alg)
	buf.EncodeUint8(m.PsidOffset)
	buf.EncodeUint8(m.PsidLength)
	buf.EncodeUint16(m.Psid)
	buf.EncodeUint16(m.StartPort)
	buf.EncodeUint16(m.EndPort)
	return buf.Bytes(), nil
}
func (m *Nat44EiGetAddrAndPortAllocAlgReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	m.Alg = buf.DecodeUint8()
	m.PsidOffset = buf.DecodeUint8()
	m.PsidLength = buf.DecodeUint8()
	m.Psid = buf.DecodeUint16()
	m.StartPort = buf.DecodeUint16()
	m.EndPort = buf.DecodeUint16()
	return nil
}

// Nat44EiGetMssClamping defines message 'nat44_ei_get_mss_clamping'.
// Deprecated: the message will be removed in the future versions
type Nat44EiGetMssClamping struct{}

func (m *Nat44EiGetMssClamping) Reset()               { *m = Nat44EiGetMssClamping{} }
func (*Nat44EiGetMssClamping) GetMessageName() string { return "nat44_ei_get_mss_clamping" }
func (*Nat44EiGetMssClamping) GetCrcString() string   { return "51077d14" }
func (*Nat44EiGetMssClamping) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *Nat44EiGetMssClamping) Size() (size int) {
	if m == nil {
		return 0
	}
	return size
}
func (m *Nat44EiGetMssClamping) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	return buf.Bytes(), nil
}
func (m *Nat44EiGetMssClamping) Unmarshal(b []byte) error {
	return nil
}

// Nat44EiGetMssClampingReply defines message 'nat44_ei_get_mss_clamping_reply'.
// Deprecated: the message will be removed in the future versions
type Nat44EiGetMssClampingReply struct {
	Retval   int32  `binapi:"i32,name=retval" json:"retval,omitempty"`
	MssValue uint16 `binapi:"u16,name=mss_value" json:"mss_value,omitempty"`
	Enable   bool   `binapi:"bool,name=enable" json:"enable,omitempty"`
}

func (m *Nat44EiGetMssClampingReply) Reset()               { *m = Nat44EiGetMssClampingReply{} }
func (*Nat44EiGetMssClampingReply) GetMessageName() string { return "nat44_ei_get_mss_clamping_reply" }
func (*Nat44EiGetMssClampingReply) GetCrcString() string   { return "1c0b2a78" }
func (*Nat44EiGetMssClampingReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *Nat44EiGetMssClampingReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	size += 2 // m.MssValue
	size += 1 // m.Enable
	return size
}
func (m *Nat44EiGetMssClampingReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	buf.EncodeUint16(m.MssValue)
	buf.EncodeBool(m.Enable)
	return buf.Bytes(), nil
}
func (m *Nat44EiGetMssClampingReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	m.MssValue = buf.DecodeUint16()
	m.Enable = buf.DecodeBool()
	return nil
}

// Nat44EiHaFlush defines message 'nat44_ei_ha_flush'.
// InProgress: the message form may change in the future versions
type Nat44EiHaFlush struct{}

func (m *Nat44EiHaFlush) Reset()               { *m = Nat44EiHaFlush{} }
func (*Nat44EiHaFlush) GetMessageName() string { return "nat44_ei_ha_flush" }
func (*Nat44EiHaFlush) GetCrcString() string   { return "51077d14" }
func (*Nat44EiHaFlush) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *Nat44EiHaFlush) Size() (size int) {
	if m == nil {
		return 0
	}
	return size
}
func (m *Nat44EiHaFlush) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	return buf.Bytes(), nil
}
func (m *Nat44EiHaFlush) Unmarshal(b []byte) error {
	return nil
}

// Nat44EiHaFlushReply defines message 'nat44_ei_ha_flush_reply'.
// InProgress: the message form may change in the future versions
type Nat44EiHaFlushReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *Nat44EiHaFlushReply) Reset()               { *m = Nat44EiHaFlushReply{} }
func (*Nat44EiHaFlushReply) GetMessageName() string { return "nat44_ei_ha_flush_reply" }
func (*Nat44EiHaFlushReply) GetCrcString() string   { return "e8d4e804" }
func (*Nat44EiHaFlushReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *Nat44EiHaFlushReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *Nat44EiHaFlushReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *Nat44EiHaFlushReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// Nat44EiHaGetFailover defines message 'nat44_ei_ha_get_failover'.
// Deprecated: the message will be removed in the future versions
type Nat44EiHaGetFailover struct{}

func (m *Nat44EiHaGetFailover) Reset()               { *m = Nat44EiHaGetFailover{} }
func (*Nat44EiHaGetFailover) GetMessageName() string { return "nat44_ei_ha_get_failover" }
func (*Nat44EiHaGetFailover) GetCrcString() string   { return "51077d14" }
func (*Nat44EiHaGetFailover) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *Nat44EiHaGetFailover) Size() (size int) {
	if m == nil {
		return 0
	}
	return size
}
func (m *Nat44EiHaGetFailover) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	return buf.Bytes(), nil
}
func (m *Nat44EiHaGetFailover) Unmarshal(b []byte) error {
	return nil
}

// Nat44EiHaGetFailoverReply defines message 'nat44_ei_ha_get_failover_reply'.
// Deprecated: the message will be removed in the future versions
type Nat44EiHaGetFailoverReply struct {
	Retval                 int32               `binapi:"i32,name=retval" json:"retval,omitempty"`
	IPAddress              ip_types.IP4Address `binapi:"ip4_address,name=ip_address" json:"ip_address,omitempty"`
	Port                   uint16              `binapi:"u16,name=port" json:"port,omitempty"`
	SessionRefreshInterval uint32              `binapi:"u32,name=session_refresh_interval" json:"session_refresh_interval,omitempty"`
}

func (m *Nat44EiHaGetFailoverReply) Reset()               { *m = Nat44EiHaGetFailoverReply{} }
func (*Nat44EiHaGetFailoverReply) GetMessageName() string { return "nat44_ei_ha_get_failover_reply" }
func (*Nat44EiHaGetFailoverReply) GetCrcString() string   { return "a67d8752" }
func (*Nat44EiHaGetFailoverReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *Nat44EiHaGetFailoverReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4     // m.Retval
	size += 1 * 4 // m.IPAddress
	size += 2     // m.Port
	size += 4     // m.SessionRefreshInterval
	return size
}
func (m *Nat44EiHaGetFailoverReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	buf.EncodeBytes(m.IPAddress[:], 4)
	buf.EncodeUint16(m.Port)
	buf.EncodeUint32(m.SessionRefreshInterval)
	return buf.Bytes(), nil
}
func (m *Nat44EiHaGetFailoverReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	copy(m.IPAddress[:], buf.DecodeBytes(4))
	m.Port = buf.DecodeUint16()
	m.SessionRefreshInterval = buf.DecodeUint32()
	return nil
}

// Nat44EiHaGetListener defines message 'nat44_ei_ha_get_listener'.
// Deprecated: the message will be removed in the future versions
type Nat44EiHaGetListener struct{}

func (m *Nat44EiHaGetListener) Reset()               { *m = Nat44EiHaGetListener{} }
func (*Nat44EiHaGetListener) GetMessageName() string { return "nat44_ei_ha_get_listener" }
func (*Nat44EiHaGetListener) GetCrcString() string   { return "51077d14" }
func (*Nat44EiHaGetListener) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *Nat44EiHaGetListener) Size() (size int) {
	if m == nil {
		return 0
	}
	return size
}
func (m *Nat44EiHaGetListener) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	return buf.Bytes(), nil
}
func (m *Nat44EiHaGetListener) Unmarshal(b []byte) error {
	return nil
}

// Nat44EiHaGetListenerReply defines message 'nat44_ei_ha_get_listener_reply'.
// Deprecated: the message will be removed in the future versions
type Nat44EiHaGetListenerReply struct {
	Retval    int32               `binapi:"i32,name=retval" json:"retval,omitempty"`
	IPAddress ip_types.IP4Address `binapi:"ip4_address,name=ip_address" json:"ip_address,omitempty"`
	Port      uint16              `binapi:"u16,name=port" json:"port,omitempty"`
	PathMtu   uint32              `binapi:"u32,name=path_mtu" json:"path_mtu,omitempty"`
}

func (m *Nat44EiHaGetListenerReply) Reset()               { *m = Nat44EiHaGetListenerReply{} }
func (*Nat44EiHaGetListenerReply) GetMessageName() string { return "nat44_ei_ha_get_listener_reply" }
func (*Nat44EiHaGetListenerReply) GetCrcString() string   { return "123ea41f" }
func (*Nat44EiHaGetListenerReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *Nat44EiHaGetListenerReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4     // m.Retval
	size += 1 * 4 // m.IPAddress
	size += 2     // m.Port
	size += 4     // m.PathMtu
	return size
}
func (m *Nat44EiHaGetListenerReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	buf.EncodeBytes(m.IPAddress[:], 4)
	buf.EncodeUint16(m.Port)
	buf.EncodeUint32(m.PathMtu)
	return buf.Bytes(), nil
}
func (m *Nat44EiHaGetListenerReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	copy(m.IPAddress[:], buf.DecodeBytes(4))
	m.Port = buf.DecodeUint16()
	m.PathMtu = buf.DecodeUint32()
	return nil
}

// Nat44EiHaResync defines message 'nat44_ei_ha_resync'.
// InProgress: the message form may change in the future versions
type Nat44EiHaResync struct {
	WantResyncEvent uint8  `binapi:"u8,name=want_resync_event" json:"want_resync_event,omitempty"`
	PID             uint32 `binapi:"u32,name=pid" json:"pid,omitempty"`
}

func (m *Nat44EiHaResync) Reset()               { *m = Nat44EiHaResync{} }
func (*Nat44EiHaResync) GetMessageName() string { return "nat44_ei_ha_resync" }
func (*Nat44EiHaResync) GetCrcString() string   { return "c8ab9e03" }
func (*Nat44EiHaResync) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *Nat44EiHaResync) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1 // m.WantResyncEvent
	size += 4 // m.PID
	return size
}
func (m *Nat44EiHaResync) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint8(m.WantResyncEvent)
	buf.EncodeUint32(m.PID)
	return buf.Bytes(), nil
}
func (m *Nat44EiHaResync) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.WantResyncEvent = buf.DecodeUint8()
	m.PID = buf.DecodeUint32()
	return nil
}

// Nat44EiHaResyncCompletedEvent defines message 'nat44_ei_ha_resync_completed_event'.
// InProgress: the message form may change in the future versions
type Nat44EiHaResyncCompletedEvent struct {
	PID         uint32 `binapi:"u32,name=pid" json:"pid,omitempty"`
	MissedCount uint32 `binapi:"u32,name=missed_count" json:"missed_count,omitempty"`
}

func (m *Nat44EiHaResyncCompletedEvent) Reset() { *m = Nat44EiHaResyncCompletedEvent{} }
func (*Nat44EiHaResyncCompletedEvent) GetMessageName() string {
	return "nat44_ei_ha_resync_completed_event"
}
func (*Nat44EiHaResyncCompletedEvent) GetCrcString() string { return "fdc598fb" }
func (*Nat44EiHaResyncCompletedEvent) GetMessageType() api.MessageType {
	return api.EventMessage
}

func (m *Nat44EiHaResyncCompletedEvent) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.PID
	size += 4 // m.MissedCount
	return size
}
func (m *Nat44EiHaResyncCompletedEvent) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.PID)
	buf.EncodeUint32(m.MissedCount)
	return buf.Bytes(), nil
}
func (m *Nat44EiHaResyncCompletedEvent) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.PID = buf.DecodeUint32()
	m.MissedCount = buf.DecodeUint32()
	return nil
}

// Nat44EiHaResyncReply defines message 'nat44_ei_ha_resync_reply'.
// InProgress: the message form may change in the future versions
type Nat44EiHaResyncReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *Nat44EiHaResyncReply) Reset()               { *m = Nat44EiHaResyncReply{} }
func (*Nat44EiHaResyncReply) GetMessageName() string { return "nat44_ei_ha_resync_reply" }
func (*Nat44EiHaResyncReply) GetCrcString() string   { return "e8d4e804" }
func (*Nat44EiHaResyncReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *Nat44EiHaResyncReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *Nat44EiHaResyncReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *Nat44EiHaResyncReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// Nat44EiHaSetFailover defines message 'nat44_ei_ha_set_failover'.
// InProgress: the message form may change in the future versions
type Nat44EiHaSetFailover struct {
	IPAddress              ip_types.IP4Address `binapi:"ip4_address,name=ip_address" json:"ip_address,omitempty"`
	Port                   uint16              `binapi:"u16,name=port" json:"port,omitempty"`
	SessionRefreshInterval uint32              `binapi:"u32,name=session_refresh_interval" json:"session_refresh_interval,omitempty"`
}

func (m *Nat44EiHaSetFailover) Reset()               { *m = Nat44EiHaSetFailover{} }
func (*Nat44EiHaSetFailover) GetMessageName() string { return "nat44_ei_ha_set_failover" }
func (*Nat44EiHaSetFailover) GetCrcString() string   { return "718246af" }
func (*Nat44EiHaSetFailover) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *Nat44EiHaSetFailover) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1 * 4 // m.IPAddress
	size += 2     // m.Port
	size += 4     // m.SessionRefreshInterval
	return size
}
func (m *Nat44EiHaSetFailover) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeBytes(m.IPAddress[:], 4)
	buf.EncodeUint16(m.Port)
	buf.EncodeUint32(m.SessionRefreshInterval)
	return buf.Bytes(), nil
}
func (m *Nat44EiHaSetFailover) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	copy(m.IPAddress[:], buf.DecodeBytes(4))
	m.Port = buf.DecodeUint16()
	m.SessionRefreshInterval = buf.DecodeUint32()
	return nil
}

// Nat44EiHaSetFailoverReply defines message 'nat44_ei_ha_set_failover_reply'.
// InProgress: the message form may change in the future versions
type Nat44EiHaSetFailoverReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *Nat44EiHaSetFailoverReply) Reset()               { *m = Nat44EiHaSetFailoverReply{} }
func (*Nat44EiHaSetFailoverReply) GetMessageName() string { return "nat44_ei_ha_set_failover_reply" }
func (*Nat44EiHaSetFailoverReply) GetCrcString() string   { return "e8d4e804" }
func (*Nat44EiHaSetFailoverReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *Nat44EiHaSetFailoverReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *Nat44EiHaSetFailoverReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *Nat44EiHaSetFailoverReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// Nat44EiHaSetListener defines message 'nat44_ei_ha_set_listener'.
// InProgress: the message form may change in the future versions
type Nat44EiHaSetListener struct {
	IPAddress ip_types.IP4Address `binapi:"ip4_address,name=ip_address" json:"ip_address,omitempty"`
	Port      uint16              `binapi:"u16,name=port" json:"port,omitempty"`
	PathMtu   uint32              `binapi:"u32,name=path_mtu" json:"path_mtu,omitempty"`
}

func (m *Nat44EiHaSetListener) Reset()               { *m = Nat44EiHaSetListener{} }
func (*Nat44EiHaSetListener) GetMessageName() string { return "nat44_ei_ha_set_listener" }
func (*Nat44EiHaSetListener) GetCrcString() string   { return "e4a8cb4e" }
func (*Nat44EiHaSetListener) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *Nat44EiHaSetListener) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1 * 4 // m.IPAddress
	size += 2     // m.Port
	size += 4     // m.PathMtu
	return size
}
func (m *Nat44EiHaSetListener) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeBytes(m.IPAddress[:], 4)
	buf.EncodeUint16(m.Port)
	buf.EncodeUint32(m.PathMtu)
	return buf.Bytes(), nil
}
func (m *Nat44EiHaSetListener) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	copy(m.IPAddress[:], buf.DecodeBytes(4))
	m.Port = buf.DecodeUint16()
	m.PathMtu = buf.DecodeUint32()
	return nil
}

// Nat44EiHaSetListenerReply defines message 'nat44_ei_ha_set_listener_reply'.
// InProgress: the message form may change in the future versions
type Nat44EiHaSetListenerReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *Nat44EiHaSetListenerReply) Reset()               { *m = Nat44EiHaSetListenerReply{} }
func (*Nat44EiHaSetListenerReply) GetMessageName() string { return "nat44_ei_ha_set_listener_reply" }
func (*Nat44EiHaSetListenerReply) GetCrcString() string   { return "e8d4e804" }
func (*Nat44EiHaSetListenerReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *Nat44EiHaSetListenerReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *Nat44EiHaSetListenerReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *Nat44EiHaSetListenerReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// Nat44EiIdentityMappingDetails defines message 'nat44_ei_identity_mapping_details'.
// Deprecated: the message will be removed in the future versions
type Nat44EiIdentityMappingDetails struct {
	Flags     Nat44EiConfigFlags             `binapi:"nat44_ei_config_flags,name=flags" json:"flags,omitempty"`
	IPAddress ip_types.IP4Address            `binapi:"ip4_address,name=ip_address" json:"ip_address,omitempty"`
	Protocol  uint8                          `binapi:"u8,name=protocol" json:"protocol,omitempty"`
	Port      uint16                         `binapi:"u16,name=port" json:"port,omitempty"`
	SwIfIndex interface_types.InterfaceIndex `binapi:"interface_index,name=sw_if_index" json:"sw_if_index,omitempty"`
	VrfID     uint32                         `binapi:"u32,name=vrf_id" json:"vrf_id,omitempty"`
	Tag       string                         `binapi:"string[64],name=tag" json:"tag,omitempty"`
}

func (m *Nat44EiIdentityMappingDetails) Reset() { *m = Nat44EiIdentityMappingDetails{} }
func (*Nat44EiIdentityMappingDetails) GetMessageName() string {
	return "nat44_ei_identity_mapping_details"
}
func (*Nat44EiIdentityMappingDetails) GetCrcString() string { return "30d53e26" }
func (*Nat44EiIdentityMappingDetails) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *Nat44EiIdentityMappingDetails) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1     // m.Flags
	size += 1 * 4 // m.IPAddress
	size += 1     // m.Protocol
	size += 2     // m.Port
	size += 4     // m.SwIfIndex
	size += 4     // m.VrfID
	size += 64    // m.Tag
	return size
}
func (m *Nat44EiIdentityMappingDetails) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint8(uint8(m.Flags))
	buf.EncodeBytes(m.IPAddress[:], 4)
	buf.EncodeUint8(m.Protocol)
	buf.EncodeUint16(m.Port)
	buf.EncodeUint32(uint32(m.SwIfIndex))
	buf.EncodeUint32(m.VrfID)
	buf.EncodeString(m.Tag, 64)
	return buf.Bytes(), nil
}
func (m *Nat44EiIdentityMappingDetails) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Flags = Nat44EiConfigFlags(buf.DecodeUint8())
	copy(m.IPAddress[:], buf.DecodeBytes(4))
	m.Protocol = buf.DecodeUint8()
	m.Port = buf.DecodeUint16()
	m.SwIfIndex = interface_types.InterfaceIndex(buf.DecodeUint32())
	m.VrfID = buf.DecodeUint32()
	m.Tag = buf.DecodeString(64)
	return nil
}

// Nat44EiIdentityMappingDump defines message 'nat44_ei_identity_mapping_dump'.
// Deprecated: the message will be removed in the future versions
type Nat44EiIdentityMappingDump struct{}

func (m *Nat44EiIdentityMappingDump) Reset()               { *m = Nat44EiIdentityMappingDump{} }
func (*Nat44EiIdentityMappingDump) GetMessageName() string { return "nat44_ei_identity_mapping_dump" }
func (*Nat44EiIdentityMappingDump) GetCrcString() string   { return "51077d14" }
func (*Nat44EiIdentityMappingDump) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *Nat44EiIdentityMappingDump) Size() (size int) {
	if m == nil {
		return 0
	}
	return size
}
func (m *Nat44EiIdentityMappingDump) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	return buf.Bytes(), nil
}
func (m *Nat44EiIdentityMappingDump) Unmarshal(b []byte) error {
	return nil
}

// Nat44EiInterfaceAddDelFeature defines message 'nat44_ei_interface_add_del_feature'.
// InProgress: the message form may change in the future versions
type Nat44EiInterfaceAddDelFeature struct {
	IsAdd     bool                           `binapi:"bool,name=is_add" json:"is_add,omitempty"`
	Flags     Nat44EiConfigFlags             `binapi:"nat44_ei_config_flags,name=flags" json:"flags,omitempty"`
	SwIfIndex interface_types.InterfaceIndex `binapi:"interface_index,name=sw_if_index" json:"sw_if_index,omitempty"`
}

func (m *Nat44EiInterfaceAddDelFeature) Reset() { *m = Nat44EiInterfaceAddDelFeature{} }
func (*Nat44EiInterfaceAddDelFeature) GetMessageName() string {
	return "nat44_ei_interface_add_del_feature"
}
func (*Nat44EiInterfaceAddDelFeature) GetCrcString() string { return "63a2db8b" }
func (*Nat44EiInterfaceAddDelFeature) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *Nat44EiInterfaceAddDelFeature) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1 // m.IsAdd
	size += 1 // m.Flags
	size += 4 // m.SwIfIndex
	return size
}
func (m *Nat44EiInterfaceAddDelFeature) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeBool(m.IsAdd)
	buf.EncodeUint8(uint8(m.Flags))
	buf.EncodeUint32(uint32(m.SwIfIndex))
	return buf.Bytes(), nil
}
func (m *Nat44EiInterfaceAddDelFeature) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.IsAdd = buf.DecodeBool()
	m.Flags = Nat44EiConfigFlags(buf.DecodeUint8())
	m.SwIfIndex = interface_types.InterfaceIndex(buf.DecodeUint32())
	return nil
}

// Nat44EiInterfaceAddDelFeatureReply defines message 'nat44_ei_interface_add_del_feature_reply'.
// InProgress: the message form may change in the future versions
type Nat44EiInterfaceAddDelFeatureReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *Nat44EiInterfaceAddDelFeatureReply) Reset() { *m = Nat44EiInterfaceAddDelFeatureReply{} }
func (*Nat44EiInterfaceAddDelFeatureReply) GetMessageName() string {
	return "nat44_ei_interface_add_del_feature_reply"
}
func (*Nat44EiInterfaceAddDelFeatureReply) GetCrcString() string { return "e8d4e804" }
func (*Nat44EiInterfaceAddDelFeatureReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *Nat44EiInterfaceAddDelFeatureReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *Nat44EiInterfaceAddDelFeatureReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *Nat44EiInterfaceAddDelFeatureReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// Nat44EiInterfaceAddDelOutputFeature defines message 'nat44_ei_interface_add_del_output_feature'.
// Deprecated: the message will be removed in the future versions
type Nat44EiInterfaceAddDelOutputFeature struct {
	IsAdd     bool                           `binapi:"bool,name=is_add" json:"is_add,omitempty"`
	Flags     Nat44EiConfigFlags             `binapi:"nat44_ei_config_flags,name=flags" json:"flags,omitempty"`
	SwIfIndex interface_types.InterfaceIndex `binapi:"interface_index,name=sw_if_index" json:"sw_if_index,omitempty"`
}

func (m *Nat44EiInterfaceAddDelOutputFeature) Reset() { *m = Nat44EiInterfaceAddDelOutputFeature{} }
func (*Nat44EiInterfaceAddDelOutputFeature) GetMessageName() string {
	return "nat44_ei_interface_add_del_output_feature"
}
func (*Nat44EiInterfaceAddDelOutputFeature) GetCrcString() string { return "63a2db8b" }
func (*Nat44EiInterfaceAddDelOutputFeature) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *Nat44EiInterfaceAddDelOutputFeature) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1 // m.IsAdd
	size += 1 // m.Flags
	size += 4 // m.SwIfIndex
	return size
}
func (m *Nat44EiInterfaceAddDelOutputFeature) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeBool(m.IsAdd)
	buf.EncodeUint8(uint8(m.Flags))
	buf.EncodeUint32(uint32(m.SwIfIndex))
	return buf.Bytes(), nil
}
func (m *Nat44EiInterfaceAddDelOutputFeature) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.IsAdd = buf.DecodeBool()
	m.Flags = Nat44EiConfigFlags(buf.DecodeUint8())
	m.SwIfIndex = interface_types.InterfaceIndex(buf.DecodeUint32())
	return nil
}

// Nat44EiInterfaceAddDelOutputFeatureReply defines message 'nat44_ei_interface_add_del_output_feature_reply'.
// Deprecated: the message will be removed in the future versions
type Nat44EiInterfaceAddDelOutputFeatureReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *Nat44EiInterfaceAddDelOutputFeatureReply) Reset() {
	*m = Nat44EiInterfaceAddDelOutputFeatureReply{}
}
func (*Nat44EiInterfaceAddDelOutputFeatureReply) GetMessageName() string {
	return "nat44_ei_interface_add_del_output_feature_reply"
}
func (*Nat44EiInterfaceAddDelOutputFeatureReply) GetCrcString() string { return "e8d4e804" }
func (*Nat44EiInterfaceAddDelOutputFeatureReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *Nat44EiInterfaceAddDelOutputFeatureReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *Nat44EiInterfaceAddDelOutputFeatureReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *Nat44EiInterfaceAddDelOutputFeatureReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// Nat44EiInterfaceAddrDetails defines message 'nat44_ei_interface_addr_details'.
// Deprecated: the message will be removed in the future versions
type Nat44EiInterfaceAddrDetails struct {
	SwIfIndex interface_types.InterfaceIndex `binapi:"interface_index,name=sw_if_index" json:"sw_if_index,omitempty"`
}

func (m *Nat44EiInterfaceAddrDetails) Reset()               { *m = Nat44EiInterfaceAddrDetails{} }
func (*Nat44EiInterfaceAddrDetails) GetMessageName() string { return "nat44_ei_interface_addr_details" }
func (*Nat44EiInterfaceAddrDetails) GetCrcString() string   { return "0b45011c" }
func (*Nat44EiInterfaceAddrDetails) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *Nat44EiInterfaceAddrDetails) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.SwIfIndex
	return size
}
func (m *Nat44EiInterfaceAddrDetails) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(uint32(m.SwIfIndex))
	return buf.Bytes(), nil
}
func (m *Nat44EiInterfaceAddrDetails) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.SwIfIndex = interface_types.InterfaceIndex(buf.DecodeUint32())
	return nil
}

// Nat44EiInterfaceAddrDump defines message 'nat44_ei_interface_addr_dump'.
// Deprecated: the message will be removed in the future versions
type Nat44EiInterfaceAddrDump struct{}

func (m *Nat44EiInterfaceAddrDump) Reset()               { *m = Nat44EiInterfaceAddrDump{} }
func (*Nat44EiInterfaceAddrDump) GetMessageName() string { return "nat44_ei_interface_addr_dump" }
func (*Nat44EiInterfaceAddrDump) GetCrcString() string   { return "51077d14" }
func (*Nat44EiInterfaceAddrDump) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *Nat44EiInterfaceAddrDump) Size() (size int) {
	if m == nil {
		return 0
	}
	return size
}
func (m *Nat44EiInterfaceAddrDump) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	return buf.Bytes(), nil
}
func (m *Nat44EiInterfaceAddrDump) Unmarshal(b []byte) error {
	return nil
}

// Nat44EiInterfaceDetails defines message 'nat44_ei_interface_details'.
// InProgress: the message form may change in the future versions
type Nat44EiInterfaceDetails struct {
	Flags     Nat44EiConfigFlags             `binapi:"nat44_ei_config_flags,name=flags" json:"flags,omitempty"`
	SwIfIndex interface_types.InterfaceIndex `binapi:"interface_index,name=sw_if_index" json:"sw_if_index,omitempty"`
}

func (m *Nat44EiInterfaceDetails) Reset()               { *m = Nat44EiInterfaceDetails{} }
func (*Nat44EiInterfaceDetails) GetMessageName() string { return "nat44_ei_interface_details" }
func (*Nat44EiInterfaceDetails) GetCrcString() string   { return "f446e508" }
func (*Nat44EiInterfaceDetails) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *Nat44EiInterfaceDetails) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1 // m.Flags
	size += 4 // m.SwIfIndex
	return size
}
func (m *Nat44EiInterfaceDetails) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint8(uint8(m.Flags))
	buf.EncodeUint32(uint32(m.SwIfIndex))
	return buf.Bytes(), nil
}
func (m *Nat44EiInterfaceDetails) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Flags = Nat44EiConfigFlags(buf.DecodeUint8())
	m.SwIfIndex = interface_types.InterfaceIndex(buf.DecodeUint32())
	return nil
}

// Nat44EiInterfaceDump defines message 'nat44_ei_interface_dump'.
// InProgress: the message form may change in the future versions
type Nat44EiInterfaceDump struct{}

func (m *Nat44EiInterfaceDump) Reset()               { *m = Nat44EiInterfaceDump{} }
func (*Nat44EiInterfaceDump) GetMessageName() string { return "nat44_ei_interface_dump" }
func (*Nat44EiInterfaceDump) GetCrcString() string   { return "51077d14" }
func (*Nat44EiInterfaceDump) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *Nat44EiInterfaceDump) Size() (size int) {
	if m == nil {
		return 0
	}
	return size
}
func (m *Nat44EiInterfaceDump) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	return buf.Bytes(), nil
}
func (m *Nat44EiInterfaceDump) Unmarshal(b []byte) error {
	return nil
}

// Nat44EiInterfaceOutputFeatureDetails defines message 'nat44_ei_interface_output_feature_details'.
// Deprecated: the message will be removed in the future versions
type Nat44EiInterfaceOutputFeatureDetails struct {
	Flags     Nat44EiConfigFlags             `binapi:"nat44_ei_config_flags,name=flags" json:"flags,omitempty"`
	SwIfIndex interface_types.InterfaceIndex `binapi:"interface_index,name=sw_if_index" json:"sw_if_index,omitempty"`
}

func (m *Nat44EiInterfaceOutputFeatureDetails) Reset() { *m = Nat44EiInterfaceOutputFeatureDetails{} }
func (*Nat44EiInterfaceOutputFeatureDetails) GetMessageName() string {
	return "nat44_ei_interface_output_feature_details"
}
func (*Nat44EiInterfaceOutputFeatureDetails) GetCrcString() string { return "f446e508" }
func (*Nat44EiInterfaceOutputFeatureDetails) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *Nat44EiInterfaceOutputFeatureDetails) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1 // m.Flags
	size += 4 // m.SwIfIndex
	return size
}
func (m *Nat44EiInterfaceOutputFeatureDetails) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint8(uint8(m.Flags))
	buf.EncodeUint32(uint32(m.SwIfIndex))
	return buf.Bytes(), nil
}
func (m *Nat44EiInterfaceOutputFeatureDetails) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Flags = Nat44EiConfigFlags(buf.DecodeUint8())
	m.SwIfIndex = interface_types.InterfaceIndex(buf.DecodeUint32())
	return nil
}

// Nat44EiInterfaceOutputFeatureDump defines message 'nat44_ei_interface_output_feature_dump'.
// Deprecated: the message will be removed in the future versions
type Nat44EiInterfaceOutputFeatureDump struct{}

func (m *Nat44EiInterfaceOutputFeatureDump) Reset() { *m = Nat44EiInterfaceOutputFeatureDump{} }
func (*Nat44EiInterfaceOutputFeatureDump) GetMessageName() string {
	return "nat44_ei_interface_output_feature_dump"
}
func (*Nat44EiInterfaceOutputFeatureDump) GetCrcString() string { return "51077d14" }
func (*Nat44EiInterfaceOutputFeatureDump) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *Nat44EiInterfaceOutputFeatureDump) Size() (size int) {
	if m == nil {
		return 0
	}
	return size
}
func (m *Nat44EiInterfaceOutputFeatureDump) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	return buf.Bytes(), nil
}
func (m *Nat44EiInterfaceOutputFeatureDump) Unmarshal(b []byte) error {
	return nil
}

// Nat44EiIpfixEnableDisable defines message 'nat44_ei_ipfix_enable_disable'.
// InProgress: the message form may change in the future versions
type Nat44EiIpfixEnableDisable struct {
	DomainID uint32 `binapi:"u32,name=domain_id" json:"domain_id,omitempty"`
	SrcPort  uint16 `binapi:"u16,name=src_port" json:"src_port,omitempty"`
	Enable   bool   `binapi:"bool,name=enable" json:"enable,omitempty"`
}

func (m *Nat44EiIpfixEnableDisable) Reset()               { *m = Nat44EiIpfixEnableDisable{} }
func (*Nat44EiIpfixEnableDisable) GetMessageName() string { return "nat44_ei_ipfix_enable_disable" }
func (*Nat44EiIpfixEnableDisable) GetCrcString() string   { return "9af4a2d2" }
func (*Nat44EiIpfixEnableDisable) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *Nat44EiIpfixEnableDisable) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.DomainID
	size += 2 // m.SrcPort
	size += 1 // m.Enable
	return size
}
func (m *Nat44EiIpfixEnableDisable) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.DomainID)
	buf.EncodeUint16(m.SrcPort)
	buf.EncodeBool(m.Enable)
	return buf.Bytes(), nil
}
func (m *Nat44EiIpfixEnableDisable) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.DomainID = buf.DecodeUint32()
	m.SrcPort = buf.DecodeUint16()
	m.Enable = buf.DecodeBool()
	return nil
}

// Nat44EiIpfixEnableDisableReply defines message 'nat44_ei_ipfix_enable_disable_reply'.
// InProgress: the message form may change in the future versions
type Nat44EiIpfixEnableDisableReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *Nat44EiIpfixEnableDisableReply) Reset() { *m = Nat44EiIpfixEnableDisableReply{} }
func (*Nat44EiIpfixEnableDisableReply) GetMessageName() string {
	return "nat44_ei_ipfix_enable_disable_reply"
}
func (*Nat44EiIpfixEnableDisableReply) GetCrcString() string { return "e8d4e804" }
func (*Nat44EiIpfixEnableDisableReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *Nat44EiIpfixEnableDisableReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *Nat44EiIpfixEnableDisableReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *Nat44EiIpfixEnableDisableReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// Nat44EiPluginEnableDisable defines message 'nat44_ei_plugin_enable_disable'.
// InProgress: the message form may change in the future versions
type Nat44EiPluginEnableDisable struct {
	InsideVrf     uint32             `binapi:"u32,name=inside_vrf" json:"inside_vrf,omitempty"`
	OutsideVrf    uint32             `binapi:"u32,name=outside_vrf" json:"outside_vrf,omitempty"`
	Users         uint32             `binapi:"u32,name=users" json:"users,omitempty"`
	UserMemory    uint32             `binapi:"u32,name=user_memory" json:"user_memory,omitempty"`
	Sessions      uint32             `binapi:"u32,name=sessions" json:"sessions,omitempty"`
	SessionMemory uint32             `binapi:"u32,name=session_memory" json:"session_memory,omitempty"`
	UserSessions  uint32             `binapi:"u32,name=user_sessions" json:"user_sessions,omitempty"`
	Enable        bool               `binapi:"bool,name=enable" json:"enable,omitempty"`
	Flags         Nat44EiConfigFlags `binapi:"nat44_ei_config_flags,name=flags" json:"flags,omitempty"`
}

func (m *Nat44EiPluginEnableDisable) Reset()               { *m = Nat44EiPluginEnableDisable{} }
func (*Nat44EiPluginEnableDisable) GetMessageName() string { return "nat44_ei_plugin_enable_disable" }
func (*Nat44EiPluginEnableDisable) GetCrcString() string   { return "bf692144" }
func (*Nat44EiPluginEnableDisable) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *Nat44EiPluginEnableDisable) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.InsideVrf
	size += 4 // m.OutsideVrf
	size += 4 // m.Users
	size += 4 // m.UserMemory
	size += 4 // m.Sessions
	size += 4 // m.SessionMemory
	size += 4 // m.UserSessions
	size += 1 // m.Enable
	size += 1 // m.Flags
	return size
}
func (m *Nat44EiPluginEnableDisable) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.InsideVrf)
	buf.EncodeUint32(m.OutsideVrf)
	buf.EncodeUint32(m.Users)
	buf.EncodeUint32(m.UserMemory)
	buf.EncodeUint32(m.Sessions)
	buf.EncodeUint32(m.SessionMemory)
	buf.EncodeUint32(m.UserSessions)
	buf.EncodeBool(m.Enable)
	buf.EncodeUint8(uint8(m.Flags))
	return buf.Bytes(), nil
}
func (m *Nat44EiPluginEnableDisable) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.InsideVrf = buf.DecodeUint32()
	m.OutsideVrf = buf.DecodeUint32()
	m.Users = buf.DecodeUint32()
	m.UserMemory = buf.DecodeUint32()
	m.Sessions = buf.DecodeUint32()
	m.SessionMemory = buf.DecodeUint32()
	m.UserSessions = buf.DecodeUint32()
	m.Enable = buf.DecodeBool()
	m.Flags = Nat44EiConfigFlags(buf.DecodeUint8())
	return nil
}

// Nat44EiPluginEnableDisableReply defines message 'nat44_ei_plugin_enable_disable_reply'.
// InProgress: the message form may change in the future versions
type Nat44EiPluginEnableDisableReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *Nat44EiPluginEnableDisableReply) Reset() { *m = Nat44EiPluginEnableDisableReply{} }
func (*Nat44EiPluginEnableDisableReply) GetMessageName() string {
	return "nat44_ei_plugin_enable_disable_reply"
}
func (*Nat44EiPluginEnableDisableReply) GetCrcString() string { return "e8d4e804" }
func (*Nat44EiPluginEnableDisableReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *Nat44EiPluginEnableDisableReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *Nat44EiPluginEnableDisableReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *Nat44EiPluginEnableDisableReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// Nat44EiSetAddrAndPortAllocAlg defines message 'nat44_ei_set_addr_and_port_alloc_alg'.
// InProgress: the message form may change in the future versions
type Nat44EiSetAddrAndPortAllocAlg struct {
	Alg        uint8  `binapi:"u8,name=alg" json:"alg,omitempty"`
	PsidOffset uint8  `binapi:"u8,name=psid_offset" json:"psid_offset,omitempty"`
	PsidLength uint8  `binapi:"u8,name=psid_length" json:"psid_length,omitempty"`
	Psid       uint16 `binapi:"u16,name=psid" json:"psid,omitempty"`
	StartPort  uint16 `binapi:"u16,name=start_port" json:"start_port,omitempty"`
	EndPort    uint16 `binapi:"u16,name=end_port" json:"end_port,omitempty"`
}

func (m *Nat44EiSetAddrAndPortAllocAlg) Reset() { *m = Nat44EiSetAddrAndPortAllocAlg{} }
func (*Nat44EiSetAddrAndPortAllocAlg) GetMessageName() string {
	return "nat44_ei_set_addr_and_port_alloc_alg"
}
func (*Nat44EiSetAddrAndPortAllocAlg) GetCrcString() string { return "deeb746f" }
func (*Nat44EiSetAddrAndPortAllocAlg) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *Nat44EiSetAddrAndPortAllocAlg) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1 // m.Alg
	size += 1 // m.PsidOffset
	size += 1 // m.PsidLength
	size += 2 // m.Psid
	size += 2 // m.StartPort
	size += 2 // m.EndPort
	return size
}
func (m *Nat44EiSetAddrAndPortAllocAlg) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint8(m.Alg)
	buf.EncodeUint8(m.PsidOffset)
	buf.EncodeUint8(m.PsidLength)
	buf.EncodeUint16(m.Psid)
	buf.EncodeUint16(m.StartPort)
	buf.EncodeUint16(m.EndPort)
	return buf.Bytes(), nil
}
func (m *Nat44EiSetAddrAndPortAllocAlg) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Alg = buf.DecodeUint8()
	m.PsidOffset = buf.DecodeUint8()
	m.PsidLength = buf.DecodeUint8()
	m.Psid = buf.DecodeUint16()
	m.StartPort = buf.DecodeUint16()
	m.EndPort = buf.DecodeUint16()
	return nil
}

// Nat44EiSetAddrAndPortAllocAlgReply defines message 'nat44_ei_set_addr_and_port_alloc_alg_reply'.
// InProgress: the message form may change in the future versions
type Nat44EiSetAddrAndPortAllocAlgReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *Nat44EiSetAddrAndPortAllocAlgReply) Reset() { *m = Nat44EiSetAddrAndPortAllocAlgReply{} }
func (*Nat44EiSetAddrAndPortAllocAlgReply) GetMessageName() string {
	return "nat44_ei_set_addr_and_port_alloc_alg_reply"
}
func (*Nat44EiSetAddrAndPortAllocAlgReply) GetCrcString() string { return "e8d4e804" }
func (*Nat44EiSetAddrAndPortAllocAlgReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *Nat44EiSetAddrAndPortAllocAlgReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *Nat44EiSetAddrAndPortAllocAlgReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *Nat44EiSetAddrAndPortAllocAlgReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// Nat44EiSetFqOptions defines message 'nat44_ei_set_fq_options'.
// InProgress: the message form may change in the future versions
type Nat44EiSetFqOptions struct {
	FrameQueueNelts uint32 `binapi:"u32,name=frame_queue_nelts" json:"frame_queue_nelts,omitempty"`
}

func (m *Nat44EiSetFqOptions) Reset()               { *m = Nat44EiSetFqOptions{} }
func (*Nat44EiSetFqOptions) GetMessageName() string { return "nat44_ei_set_fq_options" }
func (*Nat44EiSetFqOptions) GetCrcString() string   { return "2399bd71" }
func (*Nat44EiSetFqOptions) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *Nat44EiSetFqOptions) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.FrameQueueNelts
	return size
}
func (m *Nat44EiSetFqOptions) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.FrameQueueNelts)
	return buf.Bytes(), nil
}
func (m *Nat44EiSetFqOptions) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.FrameQueueNelts = buf.DecodeUint32()
	return nil
}

// Nat44EiSetFqOptionsReply defines message 'nat44_ei_set_fq_options_reply'.
// InProgress: the message form may change in the future versions
type Nat44EiSetFqOptionsReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *Nat44EiSetFqOptionsReply) Reset()               { *m = Nat44EiSetFqOptionsReply{} }
func (*Nat44EiSetFqOptionsReply) GetMessageName() string { return "nat44_ei_set_fq_options_reply" }
func (*Nat44EiSetFqOptionsReply) GetCrcString() string   { return "e8d4e804" }
func (*Nat44EiSetFqOptionsReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *Nat44EiSetFqOptionsReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *Nat44EiSetFqOptionsReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *Nat44EiSetFqOptionsReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// Nat44EiSetLogLevel defines message 'nat44_ei_set_log_level'.
// Deprecated: the message will be removed in the future versions
type Nat44EiSetLogLevel struct {
	LogLevel nat_types.NatLogLevel `binapi:"nat_log_level,name=log_level" json:"log_level,omitempty"`
}

func (m *Nat44EiSetLogLevel) Reset()               { *m = Nat44EiSetLogLevel{} }
func (*Nat44EiSetLogLevel) GetMessageName() string { return "nat44_ei_set_log_level" }
func (*Nat44EiSetLogLevel) GetCrcString() string   { return "70076bfe" }
func (*Nat44EiSetLogLevel) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *Nat44EiSetLogLevel) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1 // m.LogLevel
	return size
}
func (m *Nat44EiSetLogLevel) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint8(uint8(m.LogLevel))
	return buf.Bytes(), nil
}
func (m *Nat44EiSetLogLevel) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.LogLevel = nat_types.NatLogLevel(buf.DecodeUint8())
	return nil
}

// Nat44EiSetLogLevelReply defines message 'nat44_ei_set_log_level_reply'.
// Deprecated: the message will be removed in the future versions
type Nat44EiSetLogLevelReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *Nat44EiSetLogLevelReply) Reset()               { *m = Nat44EiSetLogLevelReply{} }
func (*Nat44EiSetLogLevelReply) GetMessageName() string { return "nat44_ei_set_log_level_reply" }
func (*Nat44EiSetLogLevelReply) GetCrcString() string   { return "e8d4e804" }
func (*Nat44EiSetLogLevelReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *Nat44EiSetLogLevelReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *Nat44EiSetLogLevelReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *Nat44EiSetLogLevelReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// Nat44EiSetMssClamping defines message 'nat44_ei_set_mss_clamping'.
// InProgress: the message form may change in the future versions
type Nat44EiSetMssClamping struct {
	MssValue uint16 `binapi:"u16,name=mss_value" json:"mss_value,omitempty"`
	Enable   bool   `binapi:"bool,name=enable" json:"enable,omitempty"`
}

func (m *Nat44EiSetMssClamping) Reset()               { *m = Nat44EiSetMssClamping{} }
func (*Nat44EiSetMssClamping) GetMessageName() string { return "nat44_ei_set_mss_clamping" }
func (*Nat44EiSetMssClamping) GetCrcString() string   { return "25e90abb" }
func (*Nat44EiSetMssClamping) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *Nat44EiSetMssClamping) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 2 // m.MssValue
	size += 1 // m.Enable
	return size
}
func (m *Nat44EiSetMssClamping) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint16(m.MssValue)
	buf.EncodeBool(m.Enable)
	return buf.Bytes(), nil
}
func (m *Nat44EiSetMssClamping) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.MssValue = buf.DecodeUint16()
	m.Enable = buf.DecodeBool()
	return nil
}

// Nat44EiSetMssClampingReply defines message 'nat44_ei_set_mss_clamping_reply'.
// InProgress: the message form may change in the future versions
type Nat44EiSetMssClampingReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *Nat44EiSetMssClampingReply) Reset()               { *m = Nat44EiSetMssClampingReply{} }
func (*Nat44EiSetMssClampingReply) GetMessageName() string { return "nat44_ei_set_mss_clamping_reply" }
func (*Nat44EiSetMssClampingReply) GetCrcString() string   { return "e8d4e804" }
func (*Nat44EiSetMssClampingReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *Nat44EiSetMssClampingReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *Nat44EiSetMssClampingReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *Nat44EiSetMssClampingReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// Nat44EiSetTimeouts defines message 'nat44_ei_set_timeouts'.
// InProgress: the message form may change in the future versions
type Nat44EiSetTimeouts struct {
	UDP            uint32 `binapi:"u32,name=udp" json:"udp,omitempty"`
	TCPEstablished uint32 `binapi:"u32,name=tcp_established" json:"tcp_established,omitempty"`
	TCPTransitory  uint32 `binapi:"u32,name=tcp_transitory" json:"tcp_transitory,omitempty"`
	ICMP           uint32 `binapi:"u32,name=icmp" json:"icmp,omitempty"`
}

func (m *Nat44EiSetTimeouts) Reset()               { *m = Nat44EiSetTimeouts{} }
func (*Nat44EiSetTimeouts) GetMessageName() string { return "nat44_ei_set_timeouts" }
func (*Nat44EiSetTimeouts) GetCrcString() string   { return "d4746b16" }
func (*Nat44EiSetTimeouts) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *Nat44EiSetTimeouts) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.UDP
	size += 4 // m.TCPEstablished
	size += 4 // m.TCPTransitory
	size += 4 // m.ICMP
	return size
}
func (m *Nat44EiSetTimeouts) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.UDP)
	buf.EncodeUint32(m.TCPEstablished)
	buf.EncodeUint32(m.TCPTransitory)
	buf.EncodeUint32(m.ICMP)
	return buf.Bytes(), nil
}
func (m *Nat44EiSetTimeouts) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.UDP = buf.DecodeUint32()
	m.TCPEstablished = buf.DecodeUint32()
	m.TCPTransitory = buf.DecodeUint32()
	m.ICMP = buf.DecodeUint32()
	return nil
}

// Nat44EiSetTimeoutsReply defines message 'nat44_ei_set_timeouts_reply'.
// InProgress: the message form may change in the future versions
type Nat44EiSetTimeoutsReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *Nat44EiSetTimeoutsReply) Reset()               { *m = Nat44EiSetTimeoutsReply{} }
func (*Nat44EiSetTimeoutsReply) GetMessageName() string { return "nat44_ei_set_timeouts_reply" }
func (*Nat44EiSetTimeoutsReply) GetCrcString() string   { return "e8d4e804" }
func (*Nat44EiSetTimeoutsReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *Nat44EiSetTimeoutsReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *Nat44EiSetTimeoutsReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *Nat44EiSetTimeoutsReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// Nat44EiSetWorkers defines message 'nat44_ei_set_workers'.
// InProgress: the message form may change in the future versions
type Nat44EiSetWorkers struct {
	WorkerMask uint64 `binapi:"u64,name=worker_mask" json:"worker_mask,omitempty"`
}

func (m *Nat44EiSetWorkers) Reset()               { *m = Nat44EiSetWorkers{} }
func (*Nat44EiSetWorkers) GetMessageName() string { return "nat44_ei_set_workers" }
func (*Nat44EiSetWorkers) GetCrcString() string   { return "da926638" }
func (*Nat44EiSetWorkers) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *Nat44EiSetWorkers) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 8 // m.WorkerMask
	return size
}
func (m *Nat44EiSetWorkers) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint64(m.WorkerMask)
	return buf.Bytes(), nil
}
func (m *Nat44EiSetWorkers) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.WorkerMask = buf.DecodeUint64()
	return nil
}

// Nat44EiSetWorkersReply defines message 'nat44_ei_set_workers_reply'.
// InProgress: the message form may change in the future versions
type Nat44EiSetWorkersReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *Nat44EiSetWorkersReply) Reset()               { *m = Nat44EiSetWorkersReply{} }
func (*Nat44EiSetWorkersReply) GetMessageName() string { return "nat44_ei_set_workers_reply" }
func (*Nat44EiSetWorkersReply) GetCrcString() string   { return "e8d4e804" }
func (*Nat44EiSetWorkersReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *Nat44EiSetWorkersReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *Nat44EiSetWorkersReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *Nat44EiSetWorkersReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// Nat44EiShowFqOptions defines message 'nat44_ei_show_fq_options'.
// InProgress: the message form may change in the future versions
type Nat44EiShowFqOptions struct{}

func (m *Nat44EiShowFqOptions) Reset()               { *m = Nat44EiShowFqOptions{} }
func (*Nat44EiShowFqOptions) GetMessageName() string { return "nat44_ei_show_fq_options" }
func (*Nat44EiShowFqOptions) GetCrcString() string   { return "51077d14" }
func (*Nat44EiShowFqOptions) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *Nat44EiShowFqOptions) Size() (size int) {
	if m == nil {
		return 0
	}
	return size
}
func (m *Nat44EiShowFqOptions) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	return buf.Bytes(), nil
}
func (m *Nat44EiShowFqOptions) Unmarshal(b []byte) error {
	return nil
}

// Nat44EiShowFqOptionsReply defines message 'nat44_ei_show_fq_options_reply'.
// InProgress: the message form may change in the future versions
type Nat44EiShowFqOptionsReply struct {
	Retval          int32  `binapi:"i32,name=retval" json:"retval,omitempty"`
	FrameQueueNelts uint32 `binapi:"u32,name=frame_queue_nelts" json:"frame_queue_nelts,omitempty"`
}

func (m *Nat44EiShowFqOptionsReply) Reset()               { *m = Nat44EiShowFqOptionsReply{} }
func (*Nat44EiShowFqOptionsReply) GetMessageName() string { return "nat44_ei_show_fq_options_reply" }
func (*Nat44EiShowFqOptionsReply) GetCrcString() string   { return "7213b545" }
func (*Nat44EiShowFqOptionsReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *Nat44EiShowFqOptionsReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	size += 4 // m.FrameQueueNelts
	return size
}
func (m *Nat44EiShowFqOptionsReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	buf.EncodeUint32(m.FrameQueueNelts)
	return buf.Bytes(), nil
}
func (m *Nat44EiShowFqOptionsReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	m.FrameQueueNelts = buf.DecodeUint32()
	return nil
}

// Nat44EiShowRunningConfig defines message 'nat44_ei_show_running_config'.
// InProgress: the message form may change in the future versions
type Nat44EiShowRunningConfig struct{}

func (m *Nat44EiShowRunningConfig) Reset()               { *m = Nat44EiShowRunningConfig{} }
func (*Nat44EiShowRunningConfig) GetMessageName() string { return "nat44_ei_show_running_config" }
func (*Nat44EiShowRunningConfig) GetCrcString() string   { return "51077d14" }
func (*Nat44EiShowRunningConfig) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *Nat44EiShowRunningConfig) Size() (size int) {
	if m == nil {
		return 0
	}
	return size
}
func (m *Nat44EiShowRunningConfig) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	return buf.Bytes(), nil
}
func (m *Nat44EiShowRunningConfig) Unmarshal(b []byte) error {
	return nil
}

// Nat44EiShowRunningConfigReply defines message 'nat44_ei_show_running_config_reply'.
// InProgress: the message form may change in the future versions
type Nat44EiShowRunningConfigReply struct {
	Retval              int32                 `binapi:"i32,name=retval" json:"retval,omitempty"`
	InsideVrf           uint32                `binapi:"u32,name=inside_vrf" json:"inside_vrf,omitempty"`
	OutsideVrf          uint32                `binapi:"u32,name=outside_vrf" json:"outside_vrf,omitempty"`
	Users               uint32                `binapi:"u32,name=users" json:"users,omitempty"`
	Sessions            uint32                `binapi:"u32,name=sessions" json:"sessions,omitempty"`
	UserSessions        uint32                `binapi:"u32,name=user_sessions" json:"user_sessions,omitempty"`
	UserBuckets         uint32                `binapi:"u32,name=user_buckets" json:"user_buckets,omitempty"`
	TranslationBuckets  uint32                `binapi:"u32,name=translation_buckets" json:"translation_buckets,omitempty"`
	ForwardingEnabled   bool                  `binapi:"bool,name=forwarding_enabled" json:"forwarding_enabled,omitempty"`
	IpfixLoggingEnabled bool                  `binapi:"bool,name=ipfix_logging_enabled" json:"ipfix_logging_enabled,omitempty"`
	Timeouts            nat_types.NatTimeouts `binapi:"nat_timeouts,name=timeouts" json:"timeouts,omitempty"`
	LogLevel            nat_types.NatLogLevel `binapi:"nat_log_level,name=log_level" json:"log_level,omitempty"`
	Flags               Nat44EiConfigFlags    `binapi:"nat44_ei_config_flags,name=flags" json:"flags,omitempty"`
}

func (m *Nat44EiShowRunningConfigReply) Reset() { *m = Nat44EiShowRunningConfigReply{} }
func (*Nat44EiShowRunningConfigReply) GetMessageName() string {
	return "nat44_ei_show_running_config_reply"
}
func (*Nat44EiShowRunningConfigReply) GetCrcString() string { return "41b66a81" }
func (*Nat44EiShowRunningConfigReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *Nat44EiShowRunningConfigReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	size += 4 // m.InsideVrf
	size += 4 // m.OutsideVrf
	size += 4 // m.Users
	size += 4 // m.Sessions
	size += 4 // m.UserSessions
	size += 4 // m.UserBuckets
	size += 4 // m.TranslationBuckets
	size += 1 // m.ForwardingEnabled
	size += 1 // m.IpfixLoggingEnabled
	size += 4 // m.Timeouts.UDP
	size += 4 // m.Timeouts.TCPEstablished
	size += 4 // m.Timeouts.TCPTransitory
	size += 4 // m.Timeouts.ICMP
	size += 1 // m.LogLevel
	size += 1 // m.Flags
	return size
}
func (m *Nat44EiShowRunningConfigReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	buf.EncodeUint32(m.InsideVrf)
	buf.EncodeUint32(m.OutsideVrf)
	buf.EncodeUint32(m.Users)
	buf.EncodeUint32(m.Sessions)
	buf.EncodeUint32(m.UserSessions)
	buf.EncodeUint32(m.UserBuckets)
	buf.EncodeUint32(m.TranslationBuckets)
	buf.EncodeBool(m.ForwardingEnabled)
	buf.EncodeBool(m.IpfixLoggingEnabled)
	buf.EncodeUint32(m.Timeouts.UDP)
	buf.EncodeUint32(m.Timeouts.TCPEstablished)
	buf.EncodeUint32(m.Timeouts.TCPTransitory)
	buf.EncodeUint32(m.Timeouts.ICMP)
	buf.EncodeUint8(uint8(m.LogLevel))
	buf.EncodeUint8(uint8(m.Flags))
	return buf.Bytes(), nil
}
func (m *Nat44EiShowRunningConfigReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	m.InsideVrf = buf.DecodeUint32()
	m.OutsideVrf = buf.DecodeUint32()
	m.Users = buf.DecodeUint32()
	m.Sessions = buf.DecodeUint32()
	m.UserSessions = buf.DecodeUint32()
	m.UserBuckets = buf.DecodeUint32()
	m.TranslationBuckets = buf.DecodeUint32()
	m.ForwardingEnabled = buf.DecodeBool()
	m.IpfixLoggingEnabled = buf.DecodeBool()
	m.Timeouts.UDP = buf.DecodeUint32()
	m.Timeouts.TCPEstablished = buf.DecodeUint32()
	m.Timeouts.TCPTransitory = buf.DecodeUint32()
	m.Timeouts.ICMP = buf.DecodeUint32()
	m.LogLevel = nat_types.NatLogLevel(buf.DecodeUint8())
	m.Flags = Nat44EiConfigFlags(buf.DecodeUint8())
	return nil
}

// Nat44EiStaticMappingDetails defines message 'nat44_ei_static_mapping_details'.
// InProgress: the message form may change in the future versions
type Nat44EiStaticMappingDetails struct {
	Flags             Nat44EiConfigFlags             `binapi:"nat44_ei_config_flags,name=flags" json:"flags,omitempty"`
	LocalIPAddress    ip_types.IP4Address            `binapi:"ip4_address,name=local_ip_address" json:"local_ip_address,omitempty"`
	ExternalIPAddress ip_types.IP4Address            `binapi:"ip4_address,name=external_ip_address" json:"external_ip_address,omitempty"`
	Protocol          uint8                          `binapi:"u8,name=protocol" json:"protocol,omitempty"`
	LocalPort         uint16                         `binapi:"u16,name=local_port" json:"local_port,omitempty"`
	ExternalPort      uint16                         `binapi:"u16,name=external_port" json:"external_port,omitempty"`
	ExternalSwIfIndex interface_types.InterfaceIndex `binapi:"interface_index,name=external_sw_if_index" json:"external_sw_if_index,omitempty"`
	VrfID             uint32                         `binapi:"u32,name=vrf_id" json:"vrf_id,omitempty"`
	Tag               string                         `binapi:"string[64],name=tag" json:"tag,omitempty"`
}

func (m *Nat44EiStaticMappingDetails) Reset()               { *m = Nat44EiStaticMappingDetails{} }
func (*Nat44EiStaticMappingDetails) GetMessageName() string { return "nat44_ei_static_mapping_details" }
func (*Nat44EiStaticMappingDetails) GetCrcString() string   { return "6b51ca6e" }
func (*Nat44EiStaticMappingDetails) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *Nat44EiStaticMappingDetails) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1     // m.Flags
	size += 1 * 4 // m.LocalIPAddress
	size += 1 * 4 // m.ExternalIPAddress
	size += 1     // m.Protocol
	size += 2     // m.LocalPort
	size += 2     // m.ExternalPort
	size += 4     // m.ExternalSwIfIndex
	size += 4     // m.VrfID
	size += 64    // m.Tag
	return size
}
func (m *Nat44EiStaticMappingDetails) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint8(uint8(m.Flags))
	buf.EncodeBytes(m.LocalIPAddress[:], 4)
	buf.EncodeBytes(m.ExternalIPAddress[:], 4)
	buf.EncodeUint8(m.Protocol)
	buf.EncodeUint16(m.LocalPort)
	buf.EncodeUint16(m.ExternalPort)
	buf.EncodeUint32(uint32(m.ExternalSwIfIndex))
	buf.EncodeUint32(m.VrfID)
	buf.EncodeString(m.Tag, 64)
	return buf.Bytes(), nil
}
func (m *Nat44EiStaticMappingDetails) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Flags = Nat44EiConfigFlags(buf.DecodeUint8())
	copy(m.LocalIPAddress[:], buf.DecodeBytes(4))
	copy(m.ExternalIPAddress[:], buf.DecodeBytes(4))
	m.Protocol = buf.DecodeUint8()
	m.LocalPort = buf.DecodeUint16()
	m.ExternalPort = buf.DecodeUint16()
	m.ExternalSwIfIndex = interface_types.InterfaceIndex(buf.DecodeUint32())
	m.VrfID = buf.DecodeUint32()
	m.Tag = buf.DecodeString(64)
	return nil
}

// Nat44EiStaticMappingDump defines message 'nat44_ei_static_mapping_dump'.
// InProgress: the message form may change in the future versions
type Nat44EiStaticMappingDump struct{}

func (m *Nat44EiStaticMappingDump) Reset()               { *m = Nat44EiStaticMappingDump{} }
func (*Nat44EiStaticMappingDump) GetMessageName() string { return "nat44_ei_static_mapping_dump" }
func (*Nat44EiStaticMappingDump) GetCrcString() string   { return "51077d14" }
func (*Nat44EiStaticMappingDump) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *Nat44EiStaticMappingDump) Size() (size int) {
	if m == nil {
		return 0
	}
	return size
}
func (m *Nat44EiStaticMappingDump) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	return buf.Bytes(), nil
}
func (m *Nat44EiStaticMappingDump) Unmarshal(b []byte) error {
	return nil
}

// Nat44EiUserDetails defines message 'nat44_ei_user_details'.
// InProgress: the message form may change in the future versions
type Nat44EiUserDetails struct {
	VrfID           uint32              `binapi:"u32,name=vrf_id" json:"vrf_id,omitempty"`
	IPAddress       ip_types.IP4Address `binapi:"ip4_address,name=ip_address" json:"ip_address,omitempty"`
	Nsessions       uint32              `binapi:"u32,name=nsessions" json:"nsessions,omitempty"`
	Nstaticsessions uint32              `binapi:"u32,name=nstaticsessions" json:"nstaticsessions,omitempty"`
}

func (m *Nat44EiUserDetails) Reset()               { *m = Nat44EiUserDetails{} }
func (*Nat44EiUserDetails) GetMessageName() string { return "nat44_ei_user_details" }
func (*Nat44EiUserDetails) GetCrcString() string   { return "355896c2" }
func (*Nat44EiUserDetails) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *Nat44EiUserDetails) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4     // m.VrfID
	size += 1 * 4 // m.IPAddress
	size += 4     // m.Nsessions
	size += 4     // m.Nstaticsessions
	return size
}
func (m *Nat44EiUserDetails) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.VrfID)
	buf.EncodeBytes(m.IPAddress[:], 4)
	buf.EncodeUint32(m.Nsessions)
	buf.EncodeUint32(m.Nstaticsessions)
	return buf.Bytes(), nil
}
func (m *Nat44EiUserDetails) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.VrfID = buf.DecodeUint32()
	copy(m.IPAddress[:], buf.DecodeBytes(4))
	m.Nsessions = buf.DecodeUint32()
	m.Nstaticsessions = buf.DecodeUint32()
	return nil
}

// Nat44EiUserDump defines message 'nat44_ei_user_dump'.
// InProgress: the message form may change in the future versions
type Nat44EiUserDump struct{}

func (m *Nat44EiUserDump) Reset()               { *m = Nat44EiUserDump{} }
func (*Nat44EiUserDump) GetMessageName() string { return "nat44_ei_user_dump" }
func (*Nat44EiUserDump) GetCrcString() string   { return "51077d14" }
func (*Nat44EiUserDump) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *Nat44EiUserDump) Size() (size int) {
	if m == nil {
		return 0
	}
	return size
}
func (m *Nat44EiUserDump) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	return buf.Bytes(), nil
}
func (m *Nat44EiUserDump) Unmarshal(b []byte) error {
	return nil
}

// Nat44EiUserSessionDetails defines message 'nat44_ei_user_session_details'.
// InProgress: the message form may change in the future versions
type Nat44EiUserSessionDetails struct {
	OutsideIPAddress ip_types.IP4Address `binapi:"ip4_address,name=outside_ip_address" json:"outside_ip_address,omitempty"`
	OutsidePort      uint16              `binapi:"u16,name=outside_port" json:"outside_port,omitempty"`
	InsideIPAddress  ip_types.IP4Address `binapi:"ip4_address,name=inside_ip_address" json:"inside_ip_address,omitempty"`
	InsidePort       uint16              `binapi:"u16,name=inside_port" json:"inside_port,omitempty"`
	Protocol         uint16              `binapi:"u16,name=protocol" json:"protocol,omitempty"`
	Flags            Nat44EiConfigFlags  `binapi:"nat44_ei_config_flags,name=flags" json:"flags,omitempty"`
	LastHeard        uint64              `binapi:"u64,name=last_heard" json:"last_heard,omitempty"`
	TotalBytes       uint64              `binapi:"u64,name=total_bytes" json:"total_bytes,omitempty"`
	TotalPkts        uint32              `binapi:"u32,name=total_pkts" json:"total_pkts,omitempty"`
	ExtHostAddress   ip_types.IP4Address `binapi:"ip4_address,name=ext_host_address" json:"ext_host_address,omitempty"`
	ExtHostPort      uint16              `binapi:"u16,name=ext_host_port" json:"ext_host_port,omitempty"`
}

func (m *Nat44EiUserSessionDetails) Reset()               { *m = Nat44EiUserSessionDetails{} }
func (*Nat44EiUserSessionDetails) GetMessageName() string { return "nat44_ei_user_session_details" }
func (*Nat44EiUserSessionDetails) GetCrcString() string   { return "19b7c0ac" }
func (*Nat44EiUserSessionDetails) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *Nat44EiUserSessionDetails) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1 * 4 // m.OutsideIPAddress
	size += 2     // m.OutsidePort
	size += 1 * 4 // m.InsideIPAddress
	size += 2     // m.InsidePort
	size += 2     // m.Protocol
	size += 1     // m.Flags
	size += 8     // m.LastHeard
	size += 8     // m.TotalBytes
	size += 4     // m.TotalPkts
	size += 1 * 4 // m.ExtHostAddress
	size += 2     // m.ExtHostPort
	return size
}
func (m *Nat44EiUserSessionDetails) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeBytes(m.OutsideIPAddress[:], 4)
	buf.EncodeUint16(m.OutsidePort)
	buf.EncodeBytes(m.InsideIPAddress[:], 4)
	buf.EncodeUint16(m.InsidePort)
	buf.EncodeUint16(m.Protocol)
	buf.EncodeUint8(uint8(m.Flags))
	buf.EncodeUint64(m.LastHeard)
	buf.EncodeUint64(m.TotalBytes)
	buf.EncodeUint32(m.TotalPkts)
	buf.EncodeBytes(m.ExtHostAddress[:], 4)
	buf.EncodeUint16(m.ExtHostPort)
	return buf.Bytes(), nil
}
func (m *Nat44EiUserSessionDetails) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	copy(m.OutsideIPAddress[:], buf.DecodeBytes(4))
	m.OutsidePort = buf.DecodeUint16()
	copy(m.InsideIPAddress[:], buf.DecodeBytes(4))
	m.InsidePort = buf.DecodeUint16()
	m.Protocol = buf.DecodeUint16()
	m.Flags = Nat44EiConfigFlags(buf.DecodeUint8())
	m.LastHeard = buf.DecodeUint64()
	m.TotalBytes = buf.DecodeUint64()
	m.TotalPkts = buf.DecodeUint32()
	copy(m.ExtHostAddress[:], buf.DecodeBytes(4))
	m.ExtHostPort = buf.DecodeUint16()
	return nil
}

// Nat44EiUserSessionDump defines message 'nat44_ei_user_session_dump'.
// InProgress: the message form may change in the future versions
type Nat44EiUserSessionDump struct {
	IPAddress ip_types.IP4Address `binapi:"ip4_address,name=ip_address" json:"ip_address,omitempty"`
	VrfID     uint32              `binapi:"u32,name=vrf_id" json:"vrf_id,omitempty"`
}

func (m *Nat44EiUserSessionDump) Reset()               { *m = Nat44EiUserSessionDump{} }
func (*Nat44EiUserSessionDump) GetMessageName() string { return "nat44_ei_user_session_dump" }
func (*Nat44EiUserSessionDump) GetCrcString() string   { return "e1899c98" }
func (*Nat44EiUserSessionDump) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *Nat44EiUserSessionDump) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1 * 4 // m.IPAddress
	size += 4     // m.VrfID
	return size
}
func (m *Nat44EiUserSessionDump) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeBytes(m.IPAddress[:], 4)
	buf.EncodeUint32(m.VrfID)
	return buf.Bytes(), nil
}
func (m *Nat44EiUserSessionDump) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	copy(m.IPAddress[:], buf.DecodeBytes(4))
	m.VrfID = buf.DecodeUint32()
	return nil
}

// Nat44EiWorkerDetails defines message 'nat44_ei_worker_details'.
// InProgress: the message form may change in the future versions
type Nat44EiWorkerDetails struct {
	WorkerIndex uint32 `binapi:"u32,name=worker_index" json:"worker_index,omitempty"`
	LcoreID     uint32 `binapi:"u32,name=lcore_id" json:"lcore_id,omitempty"`
	Name        string `binapi:"string[64],name=name" json:"name,omitempty"`
}

func (m *Nat44EiWorkerDetails) Reset()               { *m = Nat44EiWorkerDetails{} }
func (*Nat44EiWorkerDetails) GetMessageName() string { return "nat44_ei_worker_details" }
func (*Nat44EiWorkerDetails) GetCrcString() string   { return "84bf06fc" }
func (*Nat44EiWorkerDetails) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *Nat44EiWorkerDetails) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4  // m.WorkerIndex
	size += 4  // m.LcoreID
	size += 64 // m.Name
	return size
}
func (m *Nat44EiWorkerDetails) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.WorkerIndex)
	buf.EncodeUint32(m.LcoreID)
	buf.EncodeString(m.Name, 64)
	return buf.Bytes(), nil
}
func (m *Nat44EiWorkerDetails) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.WorkerIndex = buf.DecodeUint32()
	m.LcoreID = buf.DecodeUint32()
	m.Name = buf.DecodeString(64)
	return nil
}

// Nat44EiWorkerDump defines message 'nat44_ei_worker_dump'.
// InProgress: the message form may change in the future versions
type Nat44EiWorkerDump struct{}

func (m *Nat44EiWorkerDump) Reset()               { *m = Nat44EiWorkerDump{} }
func (*Nat44EiWorkerDump) GetMessageName() string { return "nat44_ei_worker_dump" }
func (*Nat44EiWorkerDump) GetCrcString() string   { return "51077d14" }
func (*Nat44EiWorkerDump) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *Nat44EiWorkerDump) Size() (size int) {
	if m == nil {
		return 0
	}
	return size
}
func (m *Nat44EiWorkerDump) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	return buf.Bytes(), nil
}
func (m *Nat44EiWorkerDump) Unmarshal(b []byte) error {
	return nil
}

func init() { file_nat44_ei_binapi_init() }
func file_nat44_ei_binapi_init() {
	api.RegisterMessage((*Nat44EiAddDelAddressRange)(nil), "nat44_ei_add_del_address_range_35f21abc")
	api.RegisterMessage((*Nat44EiAddDelAddressRangeReply)(nil), "nat44_ei_add_del_address_range_reply_e8d4e804")
	api.RegisterMessage((*Nat44EiAddDelIdentityMapping)(nil), "nat44_ei_add_del_identity_mapping_cb8606b9")
	api.RegisterMessage((*Nat44EiAddDelIdentityMappingReply)(nil), "nat44_ei_add_del_identity_mapping_reply_e8d4e804")
	api.RegisterMessage((*Nat44EiAddDelInterfaceAddr)(nil), "nat44_ei_add_del_interface_addr_883abbcc")
	api.RegisterMessage((*Nat44EiAddDelInterfaceAddrReply)(nil), "nat44_ei_add_del_interface_addr_reply_e8d4e804")
	api.RegisterMessage((*Nat44EiAddDelStaticMapping)(nil), "nat44_ei_add_del_static_mapping_b404b7fe")
	api.RegisterMessage((*Nat44EiAddDelStaticMappingReply)(nil), "nat44_ei_add_del_static_mapping_reply_e8d4e804")
	api.RegisterMessage((*Nat44EiAddressDetails)(nil), "nat44_ei_address_details_318f1202")
	api.RegisterMessage((*Nat44EiAddressDump)(nil), "nat44_ei_address_dump_51077d14")
	api.RegisterMessage((*Nat44EiDelSession)(nil), "nat44_ei_del_session_74969ffe")
	api.RegisterMessage((*Nat44EiDelSessionReply)(nil), "nat44_ei_del_session_reply_e8d4e804")
	api.RegisterMessage((*Nat44EiDelUser)(nil), "nat44_ei_del_user_99a9f998")
	api.RegisterMessage((*Nat44EiDelUserReply)(nil), "nat44_ei_del_user_reply_e8d4e804")
	api.RegisterMessage((*Nat44EiForwardingEnableDisable)(nil), "nat44_ei_forwarding_enable_disable_b3e225d2")
	api.RegisterMessage((*Nat44EiForwardingEnableDisableReply)(nil), "nat44_ei_forwarding_enable_disable_reply_e8d4e804")
	api.RegisterMessage((*Nat44EiGetAddrAndPortAllocAlg)(nil), "nat44_ei_get_addr_and_port_alloc_alg_51077d14")
	api.RegisterMessage((*Nat44EiGetAddrAndPortAllocAlgReply)(nil), "nat44_ei_get_addr_and_port_alloc_alg_reply_3607a7d0")
	api.RegisterMessage((*Nat44EiGetMssClamping)(nil), "nat44_ei_get_mss_clamping_51077d14")
	api.RegisterMessage((*Nat44EiGetMssClampingReply)(nil), "nat44_ei_get_mss_clamping_reply_1c0b2a78")
	api.RegisterMessage((*Nat44EiHaFlush)(nil), "nat44_ei_ha_flush_51077d14")
	api.RegisterMessage((*Nat44EiHaFlushReply)(nil), "nat44_ei_ha_flush_reply_e8d4e804")
	api.RegisterMessage((*Nat44EiHaGetFailover)(nil), "nat44_ei_ha_get_failover_51077d14")
	api.RegisterMessage((*Nat44EiHaGetFailoverReply)(nil), "nat44_ei_ha_get_failover_reply_a67d8752")
	api.RegisterMessage((*Nat44EiHaGetListener)(nil), "nat44_ei_ha_get_listener_51077d14")
	api.RegisterMessage((*Nat44EiHaGetListenerReply)(nil), "nat44_ei_ha_get_listener_reply_123ea41f")
	api.RegisterMessage((*Nat44EiHaResync)(nil), "nat44_ei_ha_resync_c8ab9e03")
	api.RegisterMessage((*Nat44EiHaResyncCompletedEvent)(nil), "nat44_ei_ha_resync_completed_event_fdc598fb")
	api.RegisterMessage((*Nat44EiHaResyncReply)(nil), "nat44_ei_ha_resync_reply_e8d4e804")
	api.RegisterMessage((*Nat44EiHaSetFailover)(nil), "nat44_ei_ha_set_failover_718246af")
	api.RegisterMessage((*Nat44EiHaSetFailoverReply)(nil), "nat44_ei_ha_set_failover_reply_e8d4e804")
	api.RegisterMessage((*Nat44EiHaSetListener)(nil), "nat44_ei_ha_set_listener_e4a8cb4e")
	api.RegisterMessage((*Nat44EiHaSetListenerReply)(nil), "nat44_ei_ha_set_listener_reply_e8d4e804")
	api.RegisterMessage((*Nat44EiIdentityMappingDetails)(nil), "nat44_ei_identity_mapping_details_30d53e26")
	api.RegisterMessage((*Nat44EiIdentityMappingDump)(nil), "nat44_ei_identity_mapping_dump_51077d14")
	api.RegisterMessage((*Nat44EiInterfaceAddDelFeature)(nil), "nat44_ei_interface_add_del_feature_63a2db8b")
	api.RegisterMessage((*Nat44EiInterfaceAddDelFeatureReply)(nil), "nat44_ei_interface_add_del_feature_reply_e8d4e804")
	api.RegisterMessage((*Nat44EiInterfaceAddDelOutputFeature)(nil), "nat44_ei_interface_add_del_output_feature_63a2db8b")
	api.RegisterMessage((*Nat44EiInterfaceAddDelOutputFeatureReply)(nil), "nat44_ei_interface_add_del_output_feature_reply_e8d4e804")
	api.RegisterMessage((*Nat44EiInterfaceAddrDetails)(nil), "nat44_ei_interface_addr_details_0b45011c")
	api.RegisterMessage((*Nat44EiInterfaceAddrDump)(nil), "nat44_ei_interface_addr_dump_51077d14")
	api.RegisterMessage((*Nat44EiInterfaceDetails)(nil), "nat44_ei_interface_details_f446e508")
	api.RegisterMessage((*Nat44EiInterfaceDump)(nil), "nat44_ei_interface_dump_51077d14")
	api.RegisterMessage((*Nat44EiInterfaceOutputFeatureDetails)(nil), "nat44_ei_interface_output_feature_details_f446e508")
	api.RegisterMessage((*Nat44EiInterfaceOutputFeatureDump)(nil), "nat44_ei_interface_output_feature_dump_51077d14")
	api.RegisterMessage((*Nat44EiIpfixEnableDisable)(nil), "nat44_ei_ipfix_enable_disable_9af4a2d2")
	api.RegisterMessage((*Nat44EiIpfixEnableDisableReply)(nil), "nat44_ei_ipfix_enable_disable_reply_e8d4e804")
	api.RegisterMessage((*Nat44EiPluginEnableDisable)(nil), "nat44_ei_plugin_enable_disable_bf692144")
	api.RegisterMessage((*Nat44EiPluginEnableDisableReply)(nil), "nat44_ei_plugin_enable_disable_reply_e8d4e804")
	api.RegisterMessage((*Nat44EiSetAddrAndPortAllocAlg)(nil), "nat44_ei_set_addr_and_port_alloc_alg_deeb746f")
	api.RegisterMessage((*Nat44EiSetAddrAndPortAllocAlgReply)(nil), "nat44_ei_set_addr_and_port_alloc_alg_reply_e8d4e804")
	api.RegisterMessage((*Nat44EiSetFqOptions)(nil), "nat44_ei_set_fq_options_2399bd71")
	api.RegisterMessage((*Nat44EiSetFqOptionsReply)(nil), "nat44_ei_set_fq_options_reply_e8d4e804")
	api.RegisterMessage((*Nat44EiSetLogLevel)(nil), "nat44_ei_set_log_level_70076bfe")
	api.RegisterMessage((*Nat44EiSetLogLevelReply)(nil), "nat44_ei_set_log_level_reply_e8d4e804")
	api.RegisterMessage((*Nat44EiSetMssClamping)(nil), "nat44_ei_set_mss_clamping_25e90abb")
	api.RegisterMessage((*Nat44EiSetMssClampingReply)(nil), "nat44_ei_set_mss_clamping_reply_e8d4e804")
	api.RegisterMessage((*Nat44EiSetTimeouts)(nil), "nat44_ei_set_timeouts_d4746b16")
	api.RegisterMessage((*Nat44EiSetTimeoutsReply)(nil), "nat44_ei_set_timeouts_reply_e8d4e804")
	api.RegisterMessage((*Nat44EiSetWorkers)(nil), "nat44_ei_set_workers_da926638")
	api.RegisterMessage((*Nat44EiSetWorkersReply)(nil), "nat44_ei_set_workers_reply_e8d4e804")
	api.RegisterMessage((*Nat44EiShowFqOptions)(nil), "nat44_ei_show_fq_options_51077d14")
	api.RegisterMessage((*Nat44EiShowFqOptionsReply)(nil), "nat44_ei_show_fq_options_reply_7213b545")
	api.RegisterMessage((*Nat44EiShowRunningConfig)(nil), "nat44_ei_show_running_config_51077d14")
	api.RegisterMessage((*Nat44EiShowRunningConfigReply)(nil), "nat44_ei_show_running_config_reply_41b66a81")
	api.RegisterMessage((*Nat44EiStaticMappingDetails)(nil), "nat44_ei_static_mapping_details_6b51ca6e")
	api.RegisterMessage((*Nat44EiStaticMappingDump)(nil), "nat44_ei_static_mapping_dump_51077d14")
	api.RegisterMessage((*Nat44EiUserDetails)(nil), "nat44_ei_user_details_355896c2")
	api.RegisterMessage((*Nat44EiUserDump)(nil), "nat44_ei_user_dump_51077d14")
	api.RegisterMessage((*Nat44EiUserSessionDetails)(nil), "nat44_ei_user_session_details_19b7c0ac")
	api.RegisterMessage((*Nat44EiUserSessionDump)(nil), "nat44_ei_user_session_dump_e1899c98")
	api.RegisterMessage((*Nat44EiWorkerDetails)(nil), "nat44_ei_worker_details_84bf06fc")
	api.RegisterMessage((*Nat44EiWorkerDump)(nil), "nat44_ei_worker_dump_51077d14")
}

// Messages returns list of all messages in this module.
func AllMessages() []api.Message {
	return []api.Message{
		(*Nat44EiAddDelAddressRange)(nil),
		(*Nat44EiAddDelAddressRangeReply)(nil),
		(*Nat44EiAddDelIdentityMapping)(nil),
		(*Nat44EiAddDelIdentityMappingReply)(nil),
		(*Nat44EiAddDelInterfaceAddr)(nil),
		(*Nat44EiAddDelInterfaceAddrReply)(nil),
		(*Nat44EiAddDelStaticMapping)(nil),
		(*Nat44EiAddDelStaticMappingReply)(nil),
		(*Nat44EiAddressDetails)(nil),
		(*Nat44EiAddressDump)(nil),
		(*Nat44EiDelSession)(nil),
		(*Nat44EiDelSessionReply)(nil),
		(*Nat44EiDelUser)(nil),
		(*Nat44EiDelUserReply)(nil),
		(*Nat44EiForwardingEnableDisable)(nil),
		(*Nat44EiForwardingEnableDisableReply)(nil),
		(*Nat44EiGetAddrAndPortAllocAlg)(nil),
		(*Nat44EiGetAddrAndPortAllocAlgReply)(nil),
		(*Nat44EiGetMssClamping)(nil),
		(*Nat44EiGetMssClampingReply)(nil),
		(*Nat44EiHaFlush)(nil),
		(*Nat44EiHaFlushReply)(nil),
		(*Nat44EiHaGetFailover)(nil),
		(*Nat44EiHaGetFailoverReply)(nil),
		(*Nat44EiHaGetListener)(nil),
		(*Nat44EiHaGetListenerReply)(nil),
		(*Nat44EiHaResync)(nil),
		(*Nat44EiHaResyncCompletedEvent)(nil),
		(*Nat44EiHaResyncReply)(nil),
		(*Nat44EiHaSetFailover)(nil),
		(*Nat44EiHaSetFailoverReply)(nil),
		(*Nat44EiHaSetListener)(nil),
		(*Nat44EiHaSetListenerReply)(nil),
		(*Nat44EiIdentityMappingDetails)(nil),
		(*Nat44EiIdentityMappingDump)(nil),
		(*Nat44EiInterfaceAddDelFeature)(nil),
		(*Nat44EiInterfaceAddDelFeatureReply)(nil),
		(*Nat44EiInterfaceAddDelOutputFeature)(nil),
		(*Nat44EiInterfaceAddDelOutputFeatureReply)(nil),
		(*Nat44EiInterfaceAddrDetails)(nil),
		(*Nat44EiInterfaceAddrDump)(nil),
		(*Nat44EiInterfaceDetails)(nil),
		(*Nat44EiInterfaceDump)(nil),
		(*Nat44EiInterfaceOutputFeatureDetails)(nil),
		(*Nat44EiInterfaceOutputFeatureDump)(nil),
		(*Nat44EiIpfixEnableDisable)(nil),
		(*Nat44EiIpfixEnableDisableReply)(nil),
		(*Nat44EiPluginEnableDisable)(nil),
		(*Nat44EiPluginEnableDisableReply)(nil),
		(*Nat44EiSetAddrAndPortAllocAlg)(nil),
		(*Nat44EiSetAddrAndPortAllocAlgReply)(nil),
		(*Nat44EiSetFqOptions)(nil),
		(*Nat44EiSetFqOptionsReply)(nil),
		(*Nat44EiSetLogLevel)(nil),
		(*Nat44EiSetLogLevelReply)(nil),
		(*Nat44EiSetMssClamping)(nil),
		(*Nat44EiSetMssClampingReply)(nil),
		(*Nat44EiSetTimeouts)(nil),
		(*Nat44EiSetTimeoutsReply)(nil),
		(*Nat44EiSetWorkers)(nil),
		(*Nat44EiSetWorkersReply)(nil),
		(*Nat44EiShowFqOptions)(nil),
		(*Nat44EiShowFqOptionsReply)(nil),
		(*Nat44EiShowRunningConfig)(nil),
		(*Nat44EiShowRunningConfigReply)(nil),
		(*Nat44EiStaticMappingDetails)(nil),
		(*Nat44EiStaticMappingDump)(nil),
		(*Nat44EiUserDetails)(nil),
		(*Nat44EiUserDump)(nil),
		(*Nat44EiUserSessionDetails)(nil),
		(*Nat44EiUserSessionDump)(nil),
		(*Nat44EiWorkerDetails)(nil),
		(*Nat44EiWorkerDump)(nil),
	}
}
