// Code generated by GoVPP's binapi-generator. DO NOT EDIT.

// Package ip6_nd contains generated bindings for API file ip6_nd.api.
//
// Contents:
// -  2 structs
// - 17 messages
package ip6_nd

import (
	api "go.fd.io/govpp/api"
	codec "go.fd.io/govpp/codec"
	interface_types "go.ligato.io/vpp-agent/v3/plugins/vpp/binapi/vpp2306/interface_types"
	ip_types "go.ligato.io/vpp-agent/v3/plugins/vpp/binapi/vpp2306/ip_types"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the GoVPP api package it is being compiled against.
// A compilation error at this line likely means your copy of the
// GoVPP api package needs to be updated.
const _ = api.GoVppAPIPackageIsVersion2

const (
	APIFile    = "ip6_nd"
	APIVersion = "1.1.0"
	VersionCrc = 0x5f19a809
)

// IP6RaPrefixInfo defines type 'ip6_ra_prefix_info'.
type IP6RaPrefixInfo struct {
	Prefix        ip_types.Prefix `binapi:"prefix,name=prefix" json:"prefix,omitempty"`
	Flags         uint8           `binapi:"u8,name=flags" json:"flags,omitempty"`
	ValidTime     uint32          `binapi:"u32,name=valid_time" json:"valid_time,omitempty"`
	PreferredTime uint32          `binapi:"u32,name=preferred_time" json:"preferred_time,omitempty"`
}

// IP6ndRaPrefix defines type 'ip6nd_ra_prefix'.
type IP6ndRaPrefix struct {
	Prefix                ip_types.Prefix `binapi:"prefix,name=prefix" json:"prefix,omitempty"`
	OnlinkFlag            bool            `binapi:"bool,name=onlink_flag" json:"onlink_flag,omitempty"`
	AutonomousFlag        bool            `binapi:"bool,name=autonomous_flag" json:"autonomous_flag,omitempty"`
	ValLifetime           uint32          `binapi:"u32,name=val_lifetime" json:"val_lifetime,omitempty"`
	PrefLifetime          uint32          `binapi:"u32,name=pref_lifetime" json:"pref_lifetime,omitempty"`
	ValidLifetimeExpires  float64         `binapi:"f64,name=valid_lifetime_expires" json:"valid_lifetime_expires,omitempty"`
	PrefLifetimeExpires   float64         `binapi:"f64,name=pref_lifetime_expires" json:"pref_lifetime_expires,omitempty"`
	DecrementLifetimeFlag bool            `binapi:"bool,name=decrement_lifetime_flag" json:"decrement_lifetime_flag,omitempty"`
	NoAdvertise           bool            `binapi:"bool,name=no_advertise" json:"no_advertise,omitempty"`
}

// Tell client about a router advertisement event
//   - pid - client pid registered to receive notification
//   - current_hop_limit - RA current hop limit
//   - flags - RA flags
//   - router_lifetime_in_sec - RA lifetime in seconds
//   - router_addr - The router's address
//   - neighbor_reachable_time_in_msec - RA neighbor reachable time in msec
//   - time_in_msec_between_retransmitted_neighbor_solicitations -
//     time in msec between retransmitted neighbor solicitations
//   - n_prefixes -
//   - prefixes -
//
// IP6RaEvent defines message 'ip6_ra_event'.
type IP6RaEvent struct {
	PID                                                 uint32                         `binapi:"u32,name=pid" json:"pid,omitempty"`
	SwIfIndex                                           interface_types.InterfaceIndex `binapi:"interface_index,name=sw_if_index" json:"sw_if_index,omitempty"`
	RouterAddr                                          ip_types.IP6Address            `binapi:"ip6_address,name=router_addr" json:"router_addr,omitempty"`
	CurrentHopLimit                                     uint8                          `binapi:"u8,name=current_hop_limit" json:"current_hop_limit,omitempty"`
	Flags                                               uint8                          `binapi:"u8,name=flags" json:"flags,omitempty"`
	RouterLifetimeInSec                                 uint16                         `binapi:"u16,name=router_lifetime_in_sec" json:"router_lifetime_in_sec,omitempty"`
	NeighborReachableTimeInMsec                         uint32                         `binapi:"u32,name=neighbor_reachable_time_in_msec" json:"neighbor_reachable_time_in_msec,omitempty"`
	TimeInMsecBetweenRetransmittedNeighborSolicitations uint32                         `binapi:"u32,name=time_in_msec_between_retransmitted_neighbor_solicitations" json:"time_in_msec_between_retransmitted_neighbor_solicitations,omitempty"`
	NPrefixes                                           uint32                         `binapi:"u32,name=n_prefixes" json:"-"`
	Prefixes                                            []IP6RaPrefixInfo              `binapi:"ip6_ra_prefix_info[n_prefixes],name=prefixes" json:"prefixes,omitempty"`
}

func (m *IP6RaEvent) Reset()               { *m = IP6RaEvent{} }
func (*IP6RaEvent) GetMessageName() string { return "ip6_ra_event" }
func (*IP6RaEvent) GetCrcString() string   { return "0364c1c5" }
func (*IP6RaEvent) GetMessageType() api.MessageType {
	return api.EventMessage
}

func (m *IP6RaEvent) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4      // m.PID
	size += 4      // m.SwIfIndex
	size += 1 * 16 // m.RouterAddr
	size += 1      // m.CurrentHopLimit
	size += 1      // m.Flags
	size += 2      // m.RouterLifetimeInSec
	size += 4      // m.NeighborReachableTimeInMsec
	size += 4      // m.TimeInMsecBetweenRetransmittedNeighborSolicitations
	size += 4      // m.NPrefixes
	for j1 := 0; j1 < len(m.Prefixes); j1++ {
		var s1 IP6RaPrefixInfo
		_ = s1
		if j1 < len(m.Prefixes) {
			s1 = m.Prefixes[j1]
		}
		size += 1      // s1.Prefix.Address.Af
		size += 1 * 16 // s1.Prefix.Address.Un
		size += 1      // s1.Prefix.Len
		size += 1      // s1.Flags
		size += 4      // s1.ValidTime
		size += 4      // s1.PreferredTime
	}
	return size
}
func (m *IP6RaEvent) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.PID)
	buf.EncodeUint32(uint32(m.SwIfIndex))
	buf.EncodeBytes(m.RouterAddr[:], 16)
	buf.EncodeUint8(m.CurrentHopLimit)
	buf.EncodeUint8(m.Flags)
	buf.EncodeUint16(m.RouterLifetimeInSec)
	buf.EncodeUint32(m.NeighborReachableTimeInMsec)
	buf.EncodeUint32(m.TimeInMsecBetweenRetransmittedNeighborSolicitations)
	buf.EncodeUint32(uint32(len(m.Prefixes)))
	for j0 := 0; j0 < len(m.Prefixes); j0++ {
		var v0 IP6RaPrefixInfo // Prefixes
		if j0 < len(m.Prefixes) {
			v0 = m.Prefixes[j0]
		}
		buf.EncodeUint8(uint8(v0.Prefix.Address.Af))
		buf.EncodeBytes(v0.Prefix.Address.Un.XXX_UnionData[:], 16)
		buf.EncodeUint8(v0.Prefix.Len)
		buf.EncodeUint8(v0.Flags)
		buf.EncodeUint32(v0.ValidTime)
		buf.EncodeUint32(v0.PreferredTime)
	}
	return buf.Bytes(), nil
}
func (m *IP6RaEvent) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.PID = buf.DecodeUint32()
	m.SwIfIndex = interface_types.InterfaceIndex(buf.DecodeUint32())
	copy(m.RouterAddr[:], buf.DecodeBytes(16))
	m.CurrentHopLimit = buf.DecodeUint8()
	m.Flags = buf.DecodeUint8()
	m.RouterLifetimeInSec = buf.DecodeUint16()
	m.NeighborReachableTimeInMsec = buf.DecodeUint32()
	m.TimeInMsecBetweenRetransmittedNeighborSolicitations = buf.DecodeUint32()
	m.NPrefixes = buf.DecodeUint32()
	m.Prefixes = make([]IP6RaPrefixInfo, m.NPrefixes)
	for j0 := 0; j0 < len(m.Prefixes); j0++ {
		m.Prefixes[j0].Prefix.Address.Af = ip_types.AddressFamily(buf.DecodeUint8())
		copy(m.Prefixes[j0].Prefix.Address.Un.XXX_UnionData[:], buf.DecodeBytes(16))
		m.Prefixes[j0].Prefix.Len = buf.DecodeUint8()
		m.Prefixes[j0].Flags = buf.DecodeUint8()
		m.Prefixes[j0].ValidTime = buf.DecodeUint32()
		m.Prefixes[j0].PreferredTime = buf.DecodeUint32()
	}
	return nil
}

// IPv6 ND proxy config
//   - sw_if_index - The interface the host is on
//   - ip - The address of the host for which to proxy for
//   - is_add - Adding or deleting
//
// IP6ndProxyAddDel defines message 'ip6nd_proxy_add_del'.
type IP6ndProxyAddDel struct {
	SwIfIndex interface_types.InterfaceIndex `binapi:"interface_index,name=sw_if_index" json:"sw_if_index,omitempty"`
	IsAdd     bool                           `binapi:"bool,name=is_add" json:"is_add,omitempty"`
	IP        ip_types.IP6Address            `binapi:"ip6_address,name=ip" json:"ip,omitempty"`
}

func (m *IP6ndProxyAddDel) Reset()               { *m = IP6ndProxyAddDel{} }
func (*IP6ndProxyAddDel) GetMessageName() string { return "ip6nd_proxy_add_del" }
func (*IP6ndProxyAddDel) GetCrcString() string   { return "c2e4a686" }
func (*IP6ndProxyAddDel) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *IP6ndProxyAddDel) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4      // m.SwIfIndex
	size += 1      // m.IsAdd
	size += 1 * 16 // m.IP
	return size
}
func (m *IP6ndProxyAddDel) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(uint32(m.SwIfIndex))
	buf.EncodeBool(m.IsAdd)
	buf.EncodeBytes(m.IP[:], 16)
	return buf.Bytes(), nil
}
func (m *IP6ndProxyAddDel) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.SwIfIndex = interface_types.InterfaceIndex(buf.DecodeUint32())
	m.IsAdd = buf.DecodeBool()
	copy(m.IP[:], buf.DecodeBytes(16))
	return nil
}

// IP6ndProxyAddDelReply defines message 'ip6nd_proxy_add_del_reply'.
type IP6ndProxyAddDelReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *IP6ndProxyAddDelReply) Reset()               { *m = IP6ndProxyAddDelReply{} }
func (*IP6ndProxyAddDelReply) GetMessageName() string { return "ip6nd_proxy_add_del_reply" }
func (*IP6ndProxyAddDelReply) GetCrcString() string   { return "e8d4e804" }
func (*IP6ndProxyAddDelReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *IP6ndProxyAddDelReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *IP6ndProxyAddDelReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *IP6ndProxyAddDelReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// IPv6 ND proxy details returned after request
//   - sw_if_index - The interface the host is on
//   - ip - The address of the host for which to proxy for
//
// IP6ndProxyDetails defines message 'ip6nd_proxy_details'.
type IP6ndProxyDetails struct {
	SwIfIndex interface_types.InterfaceIndex `binapi:"interface_index,name=sw_if_index" json:"sw_if_index,omitempty"`
	IP        ip_types.IP6Address            `binapi:"ip6_address,name=ip" json:"ip,omitempty"`
}

func (m *IP6ndProxyDetails) Reset()               { *m = IP6ndProxyDetails{} }
func (*IP6ndProxyDetails) GetMessageName() string { return "ip6nd_proxy_details" }
func (*IP6ndProxyDetails) GetCrcString() string   { return "30b9ff4a" }
func (*IP6ndProxyDetails) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *IP6ndProxyDetails) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4      // m.SwIfIndex
	size += 1 * 16 // m.IP
	return size
}
func (m *IP6ndProxyDetails) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(uint32(m.SwIfIndex))
	buf.EncodeBytes(m.IP[:], 16)
	return buf.Bytes(), nil
}
func (m *IP6ndProxyDetails) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.SwIfIndex = interface_types.InterfaceIndex(buf.DecodeUint32())
	copy(m.IP[:], buf.DecodeBytes(16))
	return nil
}

// IPv6 ND proxy dump request
// IP6ndProxyDump defines message 'ip6nd_proxy_dump'.
type IP6ndProxyDump struct{}

func (m *IP6ndProxyDump) Reset()               { *m = IP6ndProxyDump{} }
func (*IP6ndProxyDump) GetMessageName() string { return "ip6nd_proxy_dump" }
func (*IP6ndProxyDump) GetCrcString() string   { return "51077d14" }
func (*IP6ndProxyDump) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *IP6ndProxyDump) Size() (size int) {
	if m == nil {
		return 0
	}
	return size
}
func (m *IP6ndProxyDump) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	return buf.Bytes(), nil
}
func (m *IP6ndProxyDump) Unmarshal(b []byte) error {
	return nil
}

// IPv6 ND (mirror) proxy
//   - sw_if_index - The interface the host is on
//   - is_enable - enable or disable
//
// IP6ndProxyEnableDisable defines message 'ip6nd_proxy_enable_disable'.
type IP6ndProxyEnableDisable struct {
	SwIfIndex interface_types.InterfaceIndex `binapi:"interface_index,name=sw_if_index" json:"sw_if_index,omitempty"`
	IsEnable  bool                           `binapi:"bool,name=is_enable" json:"is_enable,omitempty"`
}

func (m *IP6ndProxyEnableDisable) Reset()               { *m = IP6ndProxyEnableDisable{} }
func (*IP6ndProxyEnableDisable) GetMessageName() string { return "ip6nd_proxy_enable_disable" }
func (*IP6ndProxyEnableDisable) GetCrcString() string   { return "7daa1e3a" }
func (*IP6ndProxyEnableDisable) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *IP6ndProxyEnableDisable) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.SwIfIndex
	size += 1 // m.IsEnable
	return size
}
func (m *IP6ndProxyEnableDisable) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(uint32(m.SwIfIndex))
	buf.EncodeBool(m.IsEnable)
	return buf.Bytes(), nil
}
func (m *IP6ndProxyEnableDisable) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.SwIfIndex = interface_types.InterfaceIndex(buf.DecodeUint32())
	m.IsEnable = buf.DecodeBool()
	return nil
}

// IP6ndProxyEnableDisableReply defines message 'ip6nd_proxy_enable_disable_reply'.
type IP6ndProxyEnableDisableReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *IP6ndProxyEnableDisableReply) Reset() { *m = IP6ndProxyEnableDisableReply{} }
func (*IP6ndProxyEnableDisableReply) GetMessageName() string {
	return "ip6nd_proxy_enable_disable_reply"
}
func (*IP6ndProxyEnableDisableReply) GetCrcString() string { return "e8d4e804" }
func (*IP6ndProxyEnableDisableReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *IP6ndProxyEnableDisableReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *IP6ndProxyEnableDisableReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *IP6ndProxyEnableDisableReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// Start / stop sending router solicitation
//   - irt - initial retransmission time
//   - mrt - maximum retransmission time
//   - mrc - maximum retransmission count
//   - mrd - maximum retransmission duration
//   - sw_if_index - software interface index of interface
//     for sending router solicitation
//   - stop - if non-zero then stop sending router solicitation,
//     otherwise start sending router solicitation
//
// IP6ndSendRouterSolicitation defines message 'ip6nd_send_router_solicitation'.
type IP6ndSendRouterSolicitation struct {
	Irt       uint32                         `binapi:"u32,name=irt" json:"irt,omitempty"`
	Mrt       uint32                         `binapi:"u32,name=mrt" json:"mrt,omitempty"`
	Mrc       uint32                         `binapi:"u32,name=mrc" json:"mrc,omitempty"`
	Mrd       uint32                         `binapi:"u32,name=mrd" json:"mrd,omitempty"`
	SwIfIndex interface_types.InterfaceIndex `binapi:"interface_index,name=sw_if_index" json:"sw_if_index,omitempty"`
	Stop      bool                           `binapi:"bool,name=stop" json:"stop,omitempty"`
}

func (m *IP6ndSendRouterSolicitation) Reset()               { *m = IP6ndSendRouterSolicitation{} }
func (*IP6ndSendRouterSolicitation) GetMessageName() string { return "ip6nd_send_router_solicitation" }
func (*IP6ndSendRouterSolicitation) GetCrcString() string   { return "e5de609c" }
func (*IP6ndSendRouterSolicitation) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *IP6ndSendRouterSolicitation) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Irt
	size += 4 // m.Mrt
	size += 4 // m.Mrc
	size += 4 // m.Mrd
	size += 4 // m.SwIfIndex
	size += 1 // m.Stop
	return size
}
func (m *IP6ndSendRouterSolicitation) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.Irt)
	buf.EncodeUint32(m.Mrt)
	buf.EncodeUint32(m.Mrc)
	buf.EncodeUint32(m.Mrd)
	buf.EncodeUint32(uint32(m.SwIfIndex))
	buf.EncodeBool(m.Stop)
	return buf.Bytes(), nil
}
func (m *IP6ndSendRouterSolicitation) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Irt = buf.DecodeUint32()
	m.Mrt = buf.DecodeUint32()
	m.Mrc = buf.DecodeUint32()
	m.Mrd = buf.DecodeUint32()
	m.SwIfIndex = interface_types.InterfaceIndex(buf.DecodeUint32())
	m.Stop = buf.DecodeBool()
	return nil
}

// IP6ndSendRouterSolicitationReply defines message 'ip6nd_send_router_solicitation_reply'.
type IP6ndSendRouterSolicitationReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *IP6ndSendRouterSolicitationReply) Reset() { *m = IP6ndSendRouterSolicitationReply{} }
func (*IP6ndSendRouterSolicitationReply) GetMessageName() string {
	return "ip6nd_send_router_solicitation_reply"
}
func (*IP6ndSendRouterSolicitationReply) GetCrcString() string { return "e8d4e804" }
func (*IP6ndSendRouterSolicitationReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *IP6ndSendRouterSolicitationReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *IP6ndSendRouterSolicitationReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *IP6ndSendRouterSolicitationReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// IPv6 router advertisement config request
//   - suppress -
//   - managed -
//   - other -
//   - ll_option -
//   - send_unicast -
//   - cease -
//   - is_no -
//   - default_router -
//   - max_interval -
//   - min_interval -
//   - lifetime -
//   - initial_count -
//   - initial_interval -
//
// SwInterfaceIP6ndRaConfig defines message 'sw_interface_ip6nd_ra_config'.
type SwInterfaceIP6ndRaConfig struct {
	SwIfIndex       interface_types.InterfaceIndex `binapi:"interface_index,name=sw_if_index" json:"sw_if_index,omitempty"`
	Suppress        uint8                          `binapi:"u8,name=suppress" json:"suppress,omitempty"`
	Managed         uint8                          `binapi:"u8,name=managed" json:"managed,omitempty"`
	Other           uint8                          `binapi:"u8,name=other" json:"other,omitempty"`
	LlOption        uint8                          `binapi:"u8,name=ll_option" json:"ll_option,omitempty"`
	SendUnicast     uint8                          `binapi:"u8,name=send_unicast" json:"send_unicast,omitempty"`
	Cease           uint8                          `binapi:"u8,name=cease" json:"cease,omitempty"`
	IsNo            bool                           `binapi:"bool,name=is_no" json:"is_no,omitempty"`
	DefaultRouter   uint8                          `binapi:"u8,name=default_router" json:"default_router,omitempty"`
	MaxInterval     uint32                         `binapi:"u32,name=max_interval" json:"max_interval,omitempty"`
	MinInterval     uint32                         `binapi:"u32,name=min_interval" json:"min_interval,omitempty"`
	Lifetime        uint32                         `binapi:"u32,name=lifetime" json:"lifetime,omitempty"`
	InitialCount    uint32                         `binapi:"u32,name=initial_count" json:"initial_count,omitempty"`
	InitialInterval uint32                         `binapi:"u32,name=initial_interval" json:"initial_interval,omitempty"`
}

func (m *SwInterfaceIP6ndRaConfig) Reset()               { *m = SwInterfaceIP6ndRaConfig{} }
func (*SwInterfaceIP6ndRaConfig) GetMessageName() string { return "sw_interface_ip6nd_ra_config" }
func (*SwInterfaceIP6ndRaConfig) GetCrcString() string   { return "3eb00b1c" }
func (*SwInterfaceIP6ndRaConfig) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *SwInterfaceIP6ndRaConfig) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.SwIfIndex
	size += 1 // m.Suppress
	size += 1 // m.Managed
	size += 1 // m.Other
	size += 1 // m.LlOption
	size += 1 // m.SendUnicast
	size += 1 // m.Cease
	size += 1 // m.IsNo
	size += 1 // m.DefaultRouter
	size += 4 // m.MaxInterval
	size += 4 // m.MinInterval
	size += 4 // m.Lifetime
	size += 4 // m.InitialCount
	size += 4 // m.InitialInterval
	return size
}
func (m *SwInterfaceIP6ndRaConfig) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(uint32(m.SwIfIndex))
	buf.EncodeUint8(m.Suppress)
	buf.EncodeUint8(m.Managed)
	buf.EncodeUint8(m.Other)
	buf.EncodeUint8(m.LlOption)
	buf.EncodeUint8(m.SendUnicast)
	buf.EncodeUint8(m.Cease)
	buf.EncodeBool(m.IsNo)
	buf.EncodeUint8(m.DefaultRouter)
	buf.EncodeUint32(m.MaxInterval)
	buf.EncodeUint32(m.MinInterval)
	buf.EncodeUint32(m.Lifetime)
	buf.EncodeUint32(m.InitialCount)
	buf.EncodeUint32(m.InitialInterval)
	return buf.Bytes(), nil
}
func (m *SwInterfaceIP6ndRaConfig) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.SwIfIndex = interface_types.InterfaceIndex(buf.DecodeUint32())
	m.Suppress = buf.DecodeUint8()
	m.Managed = buf.DecodeUint8()
	m.Other = buf.DecodeUint8()
	m.LlOption = buf.DecodeUint8()
	m.SendUnicast = buf.DecodeUint8()
	m.Cease = buf.DecodeUint8()
	m.IsNo = buf.DecodeBool()
	m.DefaultRouter = buf.DecodeUint8()
	m.MaxInterval = buf.DecodeUint32()
	m.MinInterval = buf.DecodeUint32()
	m.Lifetime = buf.DecodeUint32()
	m.InitialCount = buf.DecodeUint32()
	m.InitialInterval = buf.DecodeUint32()
	return nil
}

// SwInterfaceIP6ndRaConfigReply defines message 'sw_interface_ip6nd_ra_config_reply'.
type SwInterfaceIP6ndRaConfigReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *SwInterfaceIP6ndRaConfigReply) Reset() { *m = SwInterfaceIP6ndRaConfigReply{} }
func (*SwInterfaceIP6ndRaConfigReply) GetMessageName() string {
	return "sw_interface_ip6nd_ra_config_reply"
}
func (*SwInterfaceIP6ndRaConfigReply) GetCrcString() string { return "e8d4e804" }
func (*SwInterfaceIP6ndRaConfigReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *SwInterfaceIP6ndRaConfigReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *SwInterfaceIP6ndRaConfigReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *SwInterfaceIP6ndRaConfigReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// Details on IPv6 Router Advertisements for a single interface
//   - sw_if_index - interface index the details are belong to
//   - cur_hop_limit - current hop limit
//   - adv_managed_flag - if true, enable DHCP for address
//   - adv_other_flag - if true, Enable DHCP for other information
//   - adv_router_lifetime - lifetime associated with the default router in
//     seconds (zero indicates that the router is not
//     a default router)
//   - adv_neighbor_reachable_time - number of milliseconds within which a
//     neighbor is assumed to be reachable
//     (zero means unspecified)
//   - adv_retransmit_interval - number of milliseconds between
//     retransmitted Neighbor Solicitation
//     messages (zero means unspecified)
//   - adv_link_mtu - MTU that all the nodes on a link use
//   - send_radv - if true, send periodic Router Advertisements
//   - cease_radv - if true, cease to send periodic Router Advertisements
//   - send_unicast - if true, destination address of a Router
//     Advertisement message will use the source address of
//     the Router Solicitation message (when available).
//     Otherwise, multicast address will be used
//   - adv_link_layer_address - if true, add link layer address option
//   - max_radv_interval - maximum time in seconds allowed between sending
//     unsolicited multicast Router Advertisements
//   - min_radv_interval - minimum time in seconds allowed between sending
//     unsolicited multicast Router Advertisements
//   - last_radv_time - number of seconds since the last time a solicited
//     Router Advertisement message was sent (zero means
//     never)
//   - last_multicast_time - number of seconds since the last time a
//     multicast Router Advertisements message was
//     sent (zero means never)
//   - next_multicast_time - number of seconds within which next time a
//     multicast Router Advertisement message will be
//     sent (zero means never)
//   - initial_adverts_count - number of initial Router Advertisement
//     messages to send
//   - initial_adverts_interval - number of seconds between initial Router
//     Advertisement messages
//   - initial_adverts_sent - if true, all initial Router Advertisement
//     messages were sent
//   - n_advertisements_sent - number of Router Advertisements sent
//   - n_solicitations_rcvd - number of Router Solicitations received
//   - n_solicitations_dropped - number of Router Solicitations dropped
//   - n_prefixes - number of prefix entries
//   - prefixes - array of prefix entries
//
// SwInterfaceIP6ndRaDetails defines message 'sw_interface_ip6nd_ra_details'.
// InProgress: the message form may change in the future versions
type SwInterfaceIP6ndRaDetails struct {
	SwIfIndex                interface_types.InterfaceIndex `binapi:"interface_index,name=sw_if_index" json:"sw_if_index,omitempty"`
	CurHopLimit              uint8                          `binapi:"u8,name=cur_hop_limit" json:"cur_hop_limit,omitempty"`
	AdvManagedFlag           bool                           `binapi:"bool,name=adv_managed_flag" json:"adv_managed_flag,omitempty"`
	AdvOtherFlag             bool                           `binapi:"bool,name=adv_other_flag" json:"adv_other_flag,omitempty"`
	AdvRouterLifetime        uint16                         `binapi:"u16,name=adv_router_lifetime" json:"adv_router_lifetime,omitempty"`
	AdvNeighborReachableTime uint32                         `binapi:"u32,name=adv_neighbor_reachable_time" json:"adv_neighbor_reachable_time,omitempty"`
	AdvRetransmitInterval    uint32                         `binapi:"u32,name=adv_retransmit_interval" json:"adv_retransmit_interval,omitempty"`
	AdvLinkMtu               uint32                         `binapi:"u32,name=adv_link_mtu" json:"adv_link_mtu,omitempty"`
	SendRadv                 bool                           `binapi:"bool,name=send_radv" json:"send_radv,omitempty"`
	CeaseRadv                bool                           `binapi:"bool,name=cease_radv" json:"cease_radv,omitempty"`
	SendUnicast              bool                           `binapi:"bool,name=send_unicast" json:"send_unicast,omitempty"`
	AdvLinkLayerAddress      bool                           `binapi:"bool,name=adv_link_layer_address" json:"adv_link_layer_address,omitempty"`
	MaxRadvInterval          float64                        `binapi:"f64,name=max_radv_interval" json:"max_radv_interval,omitempty"`
	MinRadvInterval          float64                        `binapi:"f64,name=min_radv_interval" json:"min_radv_interval,omitempty"`
	LastRadvTime             float64                        `binapi:"f64,name=last_radv_time" json:"last_radv_time,omitempty"`
	LastMulticastTime        float64                        `binapi:"f64,name=last_multicast_time" json:"last_multicast_time,omitempty"`
	NextMulticastTime        float64                        `binapi:"f64,name=next_multicast_time" json:"next_multicast_time,omitempty"`
	InitialAdvertsCount      uint32                         `binapi:"u32,name=initial_adverts_count" json:"initial_adverts_count,omitempty"`
	InitialAdvertsInterval   float64                        `binapi:"f64,name=initial_adverts_interval" json:"initial_adverts_interval,omitempty"`
	InitialAdvertsSent       bool                           `binapi:"bool,name=initial_adverts_sent" json:"initial_adverts_sent,omitempty"`
	NAdvertisementsSent      uint32                         `binapi:"u32,name=n_advertisements_sent" json:"n_advertisements_sent,omitempty"`
	NSolicitationsRcvd       uint32                         `binapi:"u32,name=n_solicitations_rcvd" json:"n_solicitations_rcvd,omitempty"`
	NSolicitationsDropped    uint32                         `binapi:"u32,name=n_solicitations_dropped" json:"n_solicitations_dropped,omitempty"`
	NPrefixes                uint32                         `binapi:"u32,name=n_prefixes" json:"-"`
	Prefixes                 []IP6ndRaPrefix                `binapi:"ip6nd_ra_prefix[n_prefixes],name=prefixes" json:"prefixes,omitempty"`
}

func (m *SwInterfaceIP6ndRaDetails) Reset()               { *m = SwInterfaceIP6ndRaDetails{} }
func (*SwInterfaceIP6ndRaDetails) GetMessageName() string { return "sw_interface_ip6nd_ra_details" }
func (*SwInterfaceIP6ndRaDetails) GetCrcString() string   { return "d3198de5" }
func (*SwInterfaceIP6ndRaDetails) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *SwInterfaceIP6ndRaDetails) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.SwIfIndex
	size += 1 // m.CurHopLimit
	size += 1 // m.AdvManagedFlag
	size += 1 // m.AdvOtherFlag
	size += 2 // m.AdvRouterLifetime
	size += 4 // m.AdvNeighborReachableTime
	size += 4 // m.AdvRetransmitInterval
	size += 4 // m.AdvLinkMtu
	size += 1 // m.SendRadv
	size += 1 // m.CeaseRadv
	size += 1 // m.SendUnicast
	size += 1 // m.AdvLinkLayerAddress
	size += 8 // m.MaxRadvInterval
	size += 8 // m.MinRadvInterval
	size += 8 // m.LastRadvTime
	size += 8 // m.LastMulticastTime
	size += 8 // m.NextMulticastTime
	size += 4 // m.InitialAdvertsCount
	size += 8 // m.InitialAdvertsInterval
	size += 1 // m.InitialAdvertsSent
	size += 4 // m.NAdvertisementsSent
	size += 4 // m.NSolicitationsRcvd
	size += 4 // m.NSolicitationsDropped
	size += 4 // m.NPrefixes
	for j1 := 0; j1 < len(m.Prefixes); j1++ {
		var s1 IP6ndRaPrefix
		_ = s1
		if j1 < len(m.Prefixes) {
			s1 = m.Prefixes[j1]
		}
		size += 1      // s1.Prefix.Address.Af
		size += 1 * 16 // s1.Prefix.Address.Un
		size += 1      // s1.Prefix.Len
		size += 1      // s1.OnlinkFlag
		size += 1      // s1.AutonomousFlag
		size += 4      // s1.ValLifetime
		size += 4      // s1.PrefLifetime
		size += 8      // s1.ValidLifetimeExpires
		size += 8      // s1.PrefLifetimeExpires
		size += 1      // s1.DecrementLifetimeFlag
		size += 1      // s1.NoAdvertise
	}
	return size
}
func (m *SwInterfaceIP6ndRaDetails) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(uint32(m.SwIfIndex))
	buf.EncodeUint8(m.CurHopLimit)
	buf.EncodeBool(m.AdvManagedFlag)
	buf.EncodeBool(m.AdvOtherFlag)
	buf.EncodeUint16(m.AdvRouterLifetime)
	buf.EncodeUint32(m.AdvNeighborReachableTime)
	buf.EncodeUint32(m.AdvRetransmitInterval)
	buf.EncodeUint32(m.AdvLinkMtu)
	buf.EncodeBool(m.SendRadv)
	buf.EncodeBool(m.CeaseRadv)
	buf.EncodeBool(m.SendUnicast)
	buf.EncodeBool(m.AdvLinkLayerAddress)
	buf.EncodeFloat64(m.MaxRadvInterval)
	buf.EncodeFloat64(m.MinRadvInterval)
	buf.EncodeFloat64(m.LastRadvTime)
	buf.EncodeFloat64(m.LastMulticastTime)
	buf.EncodeFloat64(m.NextMulticastTime)
	buf.EncodeUint32(m.InitialAdvertsCount)
	buf.EncodeFloat64(m.InitialAdvertsInterval)
	buf.EncodeBool(m.InitialAdvertsSent)
	buf.EncodeUint32(m.NAdvertisementsSent)
	buf.EncodeUint32(m.NSolicitationsRcvd)
	buf.EncodeUint32(m.NSolicitationsDropped)
	buf.EncodeUint32(uint32(len(m.Prefixes)))
	for j0 := 0; j0 < len(m.Prefixes); j0++ {
		var v0 IP6ndRaPrefix // Prefixes
		if j0 < len(m.Prefixes) {
			v0 = m.Prefixes[j0]
		}
		buf.EncodeUint8(uint8(v0.Prefix.Address.Af))
		buf.EncodeBytes(v0.Prefix.Address.Un.XXX_UnionData[:], 16)
		buf.EncodeUint8(v0.Prefix.Len)
		buf.EncodeBool(v0.OnlinkFlag)
		buf.EncodeBool(v0.AutonomousFlag)
		buf.EncodeUint32(v0.ValLifetime)
		buf.EncodeUint32(v0.PrefLifetime)
		buf.EncodeFloat64(v0.ValidLifetimeExpires)
		buf.EncodeFloat64(v0.PrefLifetimeExpires)
		buf.EncodeBool(v0.DecrementLifetimeFlag)
		buf.EncodeBool(v0.NoAdvertise)
	}
	return buf.Bytes(), nil
}
func (m *SwInterfaceIP6ndRaDetails) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.SwIfIndex = interface_types.InterfaceIndex(buf.DecodeUint32())
	m.CurHopLimit = buf.DecodeUint8()
	m.AdvManagedFlag = buf.DecodeBool()
	m.AdvOtherFlag = buf.DecodeBool()
	m.AdvRouterLifetime = buf.DecodeUint16()
	m.AdvNeighborReachableTime = buf.DecodeUint32()
	m.AdvRetransmitInterval = buf.DecodeUint32()
	m.AdvLinkMtu = buf.DecodeUint32()
	m.SendRadv = buf.DecodeBool()
	m.CeaseRadv = buf.DecodeBool()
	m.SendUnicast = buf.DecodeBool()
	m.AdvLinkLayerAddress = buf.DecodeBool()
	m.MaxRadvInterval = buf.DecodeFloat64()
	m.MinRadvInterval = buf.DecodeFloat64()
	m.LastRadvTime = buf.DecodeFloat64()
	m.LastMulticastTime = buf.DecodeFloat64()
	m.NextMulticastTime = buf.DecodeFloat64()
	m.InitialAdvertsCount = buf.DecodeUint32()
	m.InitialAdvertsInterval = buf.DecodeFloat64()
	m.InitialAdvertsSent = buf.DecodeBool()
	m.NAdvertisementsSent = buf.DecodeUint32()
	m.NSolicitationsRcvd = buf.DecodeUint32()
	m.NSolicitationsDropped = buf.DecodeUint32()
	m.NPrefixes = buf.DecodeUint32()
	m.Prefixes = make([]IP6ndRaPrefix, m.NPrefixes)
	for j0 := 0; j0 < len(m.Prefixes); j0++ {
		m.Prefixes[j0].Prefix.Address.Af = ip_types.AddressFamily(buf.DecodeUint8())
		copy(m.Prefixes[j0].Prefix.Address.Un.XXX_UnionData[:], buf.DecodeBytes(16))
		m.Prefixes[j0].Prefix.Len = buf.DecodeUint8()
		m.Prefixes[j0].OnlinkFlag = buf.DecodeBool()
		m.Prefixes[j0].AutonomousFlag = buf.DecodeBool()
		m.Prefixes[j0].ValLifetime = buf.DecodeUint32()
		m.Prefixes[j0].PrefLifetime = buf.DecodeUint32()
		m.Prefixes[j0].ValidLifetimeExpires = buf.DecodeFloat64()
		m.Prefixes[j0].PrefLifetimeExpires = buf.DecodeFloat64()
		m.Prefixes[j0].DecrementLifetimeFlag = buf.DecodeBool()
		m.Prefixes[j0].NoAdvertise = buf.DecodeBool()
	}
	return nil
}

// Dump IPv6 Router Advertisements details on a per-interface basis
//   - sw_if_index - interface index to use as a filter (0xffffffff
//     represents all interfaces)
//
// SwInterfaceIP6ndRaDump defines message 'sw_interface_ip6nd_ra_dump'.
// InProgress: the message form may change in the future versions
type SwInterfaceIP6ndRaDump struct {
	SwIfIndex interface_types.InterfaceIndex `binapi:"interface_index,name=sw_if_index" json:"sw_if_index,omitempty"`
}

func (m *SwInterfaceIP6ndRaDump) Reset()               { *m = SwInterfaceIP6ndRaDump{} }
func (*SwInterfaceIP6ndRaDump) GetMessageName() string { return "sw_interface_ip6nd_ra_dump" }
func (*SwInterfaceIP6ndRaDump) GetCrcString() string   { return "f9e6675e" }
func (*SwInterfaceIP6ndRaDump) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *SwInterfaceIP6ndRaDump) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.SwIfIndex
	return size
}
func (m *SwInterfaceIP6ndRaDump) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(uint32(m.SwIfIndex))
	return buf.Bytes(), nil
}
func (m *SwInterfaceIP6ndRaDump) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.SwIfIndex = interface_types.InterfaceIndex(buf.DecodeUint32())
	return nil
}

// IPv6 router advertisement prefix config request
//   - sw_if_index - The interface the RA prefix information is for
//   - prefix - The prefix to advertise
//   - use_default - Revert to default settings
//   - no_advertise - Do not advertise this prefix
//   - off_link - The prefix is off link (it is not configured on the interface)
//     Configures the L-flag, When set, indicates that this
//     prefix can be used for on-link determination.
//   - no_autoconfig - Setting for the A-flag. When
//     set indicates that this prefix can be used for
//     stateless address configuration.
//   - no_onlink - The prefix is not on link. Make sure this is consistent
//     with the off_link parameter else YMMV
//   - is_no - add/delete
//   - val_lifetime - The length of time in
//     seconds (relative to the time the packet is sent)
//     that the prefix is valid for the purpose of on-link
//     determination.  A value of all one bits
//     (0xffffffff) represents infinity
//   - pref_lifetime - The length of time in
//     seconds (relative to the time the packet is sent)
//     that addresses generated from the prefix via
//     stateless address autoconfiguration remain
//     preferred [ADDRCONF].  A value of all one bits
//     (0xffffffff) represents infinity.
//
// SwInterfaceIP6ndRaPrefix defines message 'sw_interface_ip6nd_ra_prefix'.
type SwInterfaceIP6ndRaPrefix struct {
	SwIfIndex    interface_types.InterfaceIndex `binapi:"interface_index,name=sw_if_index" json:"sw_if_index,omitempty"`
	Prefix       ip_types.Prefix                `binapi:"prefix,name=prefix" json:"prefix,omitempty"`
	UseDefault   bool                           `binapi:"bool,name=use_default" json:"use_default,omitempty"`
	NoAdvertise  bool                           `binapi:"bool,name=no_advertise" json:"no_advertise,omitempty"`
	OffLink      bool                           `binapi:"bool,name=off_link" json:"off_link,omitempty"`
	NoAutoconfig bool                           `binapi:"bool,name=no_autoconfig" json:"no_autoconfig,omitempty"`
	NoOnlink     bool                           `binapi:"bool,name=no_onlink" json:"no_onlink,omitempty"`
	IsNo         bool                           `binapi:"bool,name=is_no" json:"is_no,omitempty"`
	ValLifetime  uint32                         `binapi:"u32,name=val_lifetime" json:"val_lifetime,omitempty"`
	PrefLifetime uint32                         `binapi:"u32,name=pref_lifetime" json:"pref_lifetime,omitempty"`
}

func (m *SwInterfaceIP6ndRaPrefix) Reset()               { *m = SwInterfaceIP6ndRaPrefix{} }
func (*SwInterfaceIP6ndRaPrefix) GetMessageName() string { return "sw_interface_ip6nd_ra_prefix" }
func (*SwInterfaceIP6ndRaPrefix) GetCrcString() string   { return "82cc1b28" }
func (*SwInterfaceIP6ndRaPrefix) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *SwInterfaceIP6ndRaPrefix) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4      // m.SwIfIndex
	size += 1      // m.Prefix.Address.Af
	size += 1 * 16 // m.Prefix.Address.Un
	size += 1      // m.Prefix.Len
	size += 1      // m.UseDefault
	size += 1      // m.NoAdvertise
	size += 1      // m.OffLink
	size += 1      // m.NoAutoconfig
	size += 1      // m.NoOnlink
	size += 1      // m.IsNo
	size += 4      // m.ValLifetime
	size += 4      // m.PrefLifetime
	return size
}
func (m *SwInterfaceIP6ndRaPrefix) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(uint32(m.SwIfIndex))
	buf.EncodeUint8(uint8(m.Prefix.Address.Af))
	buf.EncodeBytes(m.Prefix.Address.Un.XXX_UnionData[:], 16)
	buf.EncodeUint8(m.Prefix.Len)
	buf.EncodeBool(m.UseDefault)
	buf.EncodeBool(m.NoAdvertise)
	buf.EncodeBool(m.OffLink)
	buf.EncodeBool(m.NoAutoconfig)
	buf.EncodeBool(m.NoOnlink)
	buf.EncodeBool(m.IsNo)
	buf.EncodeUint32(m.ValLifetime)
	buf.EncodeUint32(m.PrefLifetime)
	return buf.Bytes(), nil
}
func (m *SwInterfaceIP6ndRaPrefix) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.SwIfIndex = interface_types.InterfaceIndex(buf.DecodeUint32())
	m.Prefix.Address.Af = ip_types.AddressFamily(buf.DecodeUint8())
	copy(m.Prefix.Address.Un.XXX_UnionData[:], buf.DecodeBytes(16))
	m.Prefix.Len = buf.DecodeUint8()
	m.UseDefault = buf.DecodeBool()
	m.NoAdvertise = buf.DecodeBool()
	m.OffLink = buf.DecodeBool()
	m.NoAutoconfig = buf.DecodeBool()
	m.NoOnlink = buf.DecodeBool()
	m.IsNo = buf.DecodeBool()
	m.ValLifetime = buf.DecodeUint32()
	m.PrefLifetime = buf.DecodeUint32()
	return nil
}

// SwInterfaceIP6ndRaPrefixReply defines message 'sw_interface_ip6nd_ra_prefix_reply'.
type SwInterfaceIP6ndRaPrefixReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *SwInterfaceIP6ndRaPrefixReply) Reset() { *m = SwInterfaceIP6ndRaPrefixReply{} }
func (*SwInterfaceIP6ndRaPrefixReply) GetMessageName() string {
	return "sw_interface_ip6nd_ra_prefix_reply"
}
func (*SwInterfaceIP6ndRaPrefixReply) GetCrcString() string { return "e8d4e804" }
func (*SwInterfaceIP6ndRaPrefixReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *SwInterfaceIP6ndRaPrefixReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *SwInterfaceIP6ndRaPrefixReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *SwInterfaceIP6ndRaPrefixReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// Register for ip6 router advertisement events
//   - enable - 1 => register for events, 0 => cancel registration
//   - pid - sender's pid
//
// WantIP6RaEvents defines message 'want_ip6_ra_events'.
type WantIP6RaEvents struct {
	Enable bool   `binapi:"bool,name=enable" json:"enable,omitempty"`
	PID    uint32 `binapi:"u32,name=pid" json:"pid,omitempty"`
}

func (m *WantIP6RaEvents) Reset()               { *m = WantIP6RaEvents{} }
func (*WantIP6RaEvents) GetMessageName() string { return "want_ip6_ra_events" }
func (*WantIP6RaEvents) GetCrcString() string   { return "3ec6d6c2" }
func (*WantIP6RaEvents) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *WantIP6RaEvents) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1 // m.Enable
	size += 4 // m.PID
	return size
}
func (m *WantIP6RaEvents) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeBool(m.Enable)
	buf.EncodeUint32(m.PID)
	return buf.Bytes(), nil
}
func (m *WantIP6RaEvents) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Enable = buf.DecodeBool()
	m.PID = buf.DecodeUint32()
	return nil
}

// WantIP6RaEventsReply defines message 'want_ip6_ra_events_reply'.
type WantIP6RaEventsReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *WantIP6RaEventsReply) Reset()               { *m = WantIP6RaEventsReply{} }
func (*WantIP6RaEventsReply) GetMessageName() string { return "want_ip6_ra_events_reply" }
func (*WantIP6RaEventsReply) GetCrcString() string   { return "e8d4e804" }
func (*WantIP6RaEventsReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *WantIP6RaEventsReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *WantIP6RaEventsReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *WantIP6RaEventsReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

func init() { file_ip6_nd_binapi_init() }
func file_ip6_nd_binapi_init() {
	api.RegisterMessage((*IP6RaEvent)(nil), "ip6_ra_event_0364c1c5")
	api.RegisterMessage((*IP6ndProxyAddDel)(nil), "ip6nd_proxy_add_del_c2e4a686")
	api.RegisterMessage((*IP6ndProxyAddDelReply)(nil), "ip6nd_proxy_add_del_reply_e8d4e804")
	api.RegisterMessage((*IP6ndProxyDetails)(nil), "ip6nd_proxy_details_30b9ff4a")
	api.RegisterMessage((*IP6ndProxyDump)(nil), "ip6nd_proxy_dump_51077d14")
	api.RegisterMessage((*IP6ndProxyEnableDisable)(nil), "ip6nd_proxy_enable_disable_7daa1e3a")
	api.RegisterMessage((*IP6ndProxyEnableDisableReply)(nil), "ip6nd_proxy_enable_disable_reply_e8d4e804")
	api.RegisterMessage((*IP6ndSendRouterSolicitation)(nil), "ip6nd_send_router_solicitation_e5de609c")
	api.RegisterMessage((*IP6ndSendRouterSolicitationReply)(nil), "ip6nd_send_router_solicitation_reply_e8d4e804")
	api.RegisterMessage((*SwInterfaceIP6ndRaConfig)(nil), "sw_interface_ip6nd_ra_config_3eb00b1c")
	api.RegisterMessage((*SwInterfaceIP6ndRaConfigReply)(nil), "sw_interface_ip6nd_ra_config_reply_e8d4e804")
	api.RegisterMessage((*SwInterfaceIP6ndRaDetails)(nil), "sw_interface_ip6nd_ra_details_d3198de5")
	api.RegisterMessage((*SwInterfaceIP6ndRaDump)(nil), "sw_interface_ip6nd_ra_dump_f9e6675e")
	api.RegisterMessage((*SwInterfaceIP6ndRaPrefix)(nil), "sw_interface_ip6nd_ra_prefix_82cc1b28")
	api.RegisterMessage((*SwInterfaceIP6ndRaPrefixReply)(nil), "sw_interface_ip6nd_ra_prefix_reply_e8d4e804")
	api.RegisterMessage((*WantIP6RaEvents)(nil), "want_ip6_ra_events_3ec6d6c2")
	api.RegisterMessage((*WantIP6RaEventsReply)(nil), "want_ip6_ra_events_reply_e8d4e804")
}

// Messages returns list of all messages in this module.
func AllMessages() []api.Message {
	return []api.Message{
		(*IP6RaEvent)(nil),
		(*IP6ndProxyAddDel)(nil),
		(*IP6ndProxyAddDelReply)(nil),
		(*IP6ndProxyDetails)(nil),
		(*IP6ndProxyDump)(nil),
		(*IP6ndProxyEnableDisable)(nil),
		(*IP6ndProxyEnableDisableReply)(nil),
		(*IP6ndSendRouterSolicitation)(nil),
		(*IP6ndSendRouterSolicitationReply)(nil),
		(*SwInterfaceIP6ndRaConfig)(nil),
		(*SwInterfaceIP6ndRaConfigReply)(nil),
		(*SwInterfaceIP6ndRaDetails)(nil),
		(*SwInterfaceIP6ndRaDump)(nil),
		(*SwInterfaceIP6ndRaPrefix)(nil),
		(*SwInterfaceIP6ndRaPrefixReply)(nil),
		(*WantIP6RaEvents)(nil),
		(*WantIP6RaEventsReply)(nil),
	}
}
