// Code generated by GoVPP's binapi-generator. DO NOT EDIT.

// Package acl contains generated bindings for API file acl.api.
//
// Contents:
//  38 messages
//
package acl

import (
	api "git.fd.io/govpp.git/api"
	codec "git.fd.io/govpp.git/codec"
	acl_types "go.ligato.io/vpp-agent/v3/plugins/vpp/binapi/vpp2101/acl_types"
	_ "go.ligato.io/vpp-agent/v3/plugins/vpp/binapi/vpp2101/ethernet_types"
	interface_types "go.ligato.io/vpp-agent/v3/plugins/vpp/binapi/vpp2101/interface_types"
	ip_types "go.ligato.io/vpp-agent/v3/plugins/vpp/binapi/vpp2101/ip_types"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the GoVPP api package it is being compiled against.
// A compilation error at this line likely means your copy of the
// GoVPP api package needs to be updated.
const _ = api.GoVppAPIPackageIsVersion2

const (
	APIFile    = "acl"
	APIVersion = "2.0.0"
	VersionCrc = 0xa832e616
)

// ACLAddReplace defines message 'acl_add_replace'.
type ACLAddReplace struct {
	ACLIndex uint32              `binapi:"u32,name=acl_index" json:"acl_index,omitempty"`
	Tag      string              `binapi:"string[64],name=tag" json:"tag,omitempty"`
	Count    uint32              `binapi:"u32,name=count" json:"-"`
	R        []acl_types.ACLRule `binapi:"acl_rule[count],name=r" json:"r,omitempty"`
}

func (m *ACLAddReplace) Reset()               { *m = ACLAddReplace{} }
func (*ACLAddReplace) GetMessageName() string { return "acl_add_replace" }
func (*ACLAddReplace) GetCrcString() string   { return "1cabdeab" }
func (*ACLAddReplace) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *ACLAddReplace) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4  // m.ACLIndex
	size += 64 // m.Tag
	size += 4  // m.Count
	for j1 := 0; j1 < len(m.R); j1++ {
		var s1 acl_types.ACLRule
		_ = s1
		if j1 < len(m.R) {
			s1 = m.R[j1]
		}
		size += 1      // s1.IsPermit
		size += 1      // s1.SrcPrefix.Address.Af
		size += 1 * 16 // s1.SrcPrefix.Address.Un
		size += 1      // s1.SrcPrefix.Len
		size += 1      // s1.DstPrefix.Address.Af
		size += 1 * 16 // s1.DstPrefix.Address.Un
		size += 1      // s1.DstPrefix.Len
		size += 1      // s1.Proto
		size += 2      // s1.SrcportOrIcmptypeFirst
		size += 2      // s1.SrcportOrIcmptypeLast
		size += 2      // s1.DstportOrIcmpcodeFirst
		size += 2      // s1.DstportOrIcmpcodeLast
		size += 1      // s1.TCPFlagsMask
		size += 1      // s1.TCPFlagsValue
	}
	return size
}
func (m *ACLAddReplace) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.ACLIndex)
	buf.EncodeString(m.Tag, 64)
	buf.EncodeUint32(uint32(len(m.R)))
	for j0 := 0; j0 < len(m.R); j0++ {
		var v0 acl_types.ACLRule // R
		if j0 < len(m.R) {
			v0 = m.R[j0]
		}
		buf.EncodeUint8(uint8(v0.IsPermit))
		buf.EncodeUint8(uint8(v0.SrcPrefix.Address.Af))
		buf.EncodeBytes(v0.SrcPrefix.Address.Un.XXX_UnionData[:], 16)
		buf.EncodeUint8(v0.SrcPrefix.Len)
		buf.EncodeUint8(uint8(v0.DstPrefix.Address.Af))
		buf.EncodeBytes(v0.DstPrefix.Address.Un.XXX_UnionData[:], 16)
		buf.EncodeUint8(v0.DstPrefix.Len)
		buf.EncodeUint8(uint8(v0.Proto))
		buf.EncodeUint16(v0.SrcportOrIcmptypeFirst)
		buf.EncodeUint16(v0.SrcportOrIcmptypeLast)
		buf.EncodeUint16(v0.DstportOrIcmpcodeFirst)
		buf.EncodeUint16(v0.DstportOrIcmpcodeLast)
		buf.EncodeUint8(v0.TCPFlagsMask)
		buf.EncodeUint8(v0.TCPFlagsValue)
	}
	return buf.Bytes(), nil
}
func (m *ACLAddReplace) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.ACLIndex = buf.DecodeUint32()
	m.Tag = buf.DecodeString(64)
	m.Count = buf.DecodeUint32()
	m.R = make([]acl_types.ACLRule, m.Count)
	for j0 := 0; j0 < len(m.R); j0++ {
		m.R[j0].IsPermit = acl_types.ACLAction(buf.DecodeUint8())
		m.R[j0].SrcPrefix.Address.Af = ip_types.AddressFamily(buf.DecodeUint8())
		copy(m.R[j0].SrcPrefix.Address.Un.XXX_UnionData[:], buf.DecodeBytes(16))
		m.R[j0].SrcPrefix.Len = buf.DecodeUint8()
		m.R[j0].DstPrefix.Address.Af = ip_types.AddressFamily(buf.DecodeUint8())
		copy(m.R[j0].DstPrefix.Address.Un.XXX_UnionData[:], buf.DecodeBytes(16))
		m.R[j0].DstPrefix.Len = buf.DecodeUint8()
		m.R[j0].Proto = ip_types.IPProto(buf.DecodeUint8())
		m.R[j0].SrcportOrIcmptypeFirst = buf.DecodeUint16()
		m.R[j0].SrcportOrIcmptypeLast = buf.DecodeUint16()
		m.R[j0].DstportOrIcmpcodeFirst = buf.DecodeUint16()
		m.R[j0].DstportOrIcmpcodeLast = buf.DecodeUint16()
		m.R[j0].TCPFlagsMask = buf.DecodeUint8()
		m.R[j0].TCPFlagsValue = buf.DecodeUint8()
	}
	return nil
}

// ACLAddReplaceReply defines message 'acl_add_replace_reply'.
type ACLAddReplaceReply struct {
	ACLIndex uint32 `binapi:"u32,name=acl_index" json:"acl_index,omitempty"`
	Retval   int32  `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *ACLAddReplaceReply) Reset()               { *m = ACLAddReplaceReply{} }
func (*ACLAddReplaceReply) GetMessageName() string { return "acl_add_replace_reply" }
func (*ACLAddReplaceReply) GetCrcString() string   { return "ac407b0c" }
func (*ACLAddReplaceReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *ACLAddReplaceReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.ACLIndex
	size += 4 // m.Retval
	return size
}
func (m *ACLAddReplaceReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.ACLIndex)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *ACLAddReplaceReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.ACLIndex = buf.DecodeUint32()
	m.Retval = buf.DecodeInt32()
	return nil
}

// ACLDel defines message 'acl_del'.
type ACLDel struct {
	ACLIndex uint32 `binapi:"u32,name=acl_index" json:"acl_index,omitempty"`
}

func (m *ACLDel) Reset()               { *m = ACLDel{} }
func (*ACLDel) GetMessageName() string { return "acl_del" }
func (*ACLDel) GetCrcString() string   { return "ef34fea4" }
func (*ACLDel) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *ACLDel) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.ACLIndex
	return size
}
func (m *ACLDel) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.ACLIndex)
	return buf.Bytes(), nil
}
func (m *ACLDel) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.ACLIndex = buf.DecodeUint32()
	return nil
}

// ACLDelReply defines message 'acl_del_reply'.
type ACLDelReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *ACLDelReply) Reset()               { *m = ACLDelReply{} }
func (*ACLDelReply) GetMessageName() string { return "acl_del_reply" }
func (*ACLDelReply) GetCrcString() string   { return "e8d4e804" }
func (*ACLDelReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *ACLDelReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *ACLDelReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *ACLDelReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// ACLDetails defines message 'acl_details'.
type ACLDetails struct {
	ACLIndex uint32              `binapi:"u32,name=acl_index" json:"acl_index,omitempty"`
	Tag      string              `binapi:"string[64],name=tag" json:"tag,omitempty"`
	Count    uint32              `binapi:"u32,name=count" json:"-"`
	R        []acl_types.ACLRule `binapi:"acl_rule[count],name=r" json:"r,omitempty"`
}

func (m *ACLDetails) Reset()               { *m = ACLDetails{} }
func (*ACLDetails) GetMessageName() string { return "acl_details" }
func (*ACLDetails) GetCrcString() string   { return "7a97f21c" }
func (*ACLDetails) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *ACLDetails) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4  // m.ACLIndex
	size += 64 // m.Tag
	size += 4  // m.Count
	for j1 := 0; j1 < len(m.R); j1++ {
		var s1 acl_types.ACLRule
		_ = s1
		if j1 < len(m.R) {
			s1 = m.R[j1]
		}
		size += 1      // s1.IsPermit
		size += 1      // s1.SrcPrefix.Address.Af
		size += 1 * 16 // s1.SrcPrefix.Address.Un
		size += 1      // s1.SrcPrefix.Len
		size += 1      // s1.DstPrefix.Address.Af
		size += 1 * 16 // s1.DstPrefix.Address.Un
		size += 1      // s1.DstPrefix.Len
		size += 1      // s1.Proto
		size += 2      // s1.SrcportOrIcmptypeFirst
		size += 2      // s1.SrcportOrIcmptypeLast
		size += 2      // s1.DstportOrIcmpcodeFirst
		size += 2      // s1.DstportOrIcmpcodeLast
		size += 1      // s1.TCPFlagsMask
		size += 1      // s1.TCPFlagsValue
	}
	return size
}
func (m *ACLDetails) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.ACLIndex)
	buf.EncodeString(m.Tag, 64)
	buf.EncodeUint32(uint32(len(m.R)))
	for j0 := 0; j0 < len(m.R); j0++ {
		var v0 acl_types.ACLRule // R
		if j0 < len(m.R) {
			v0 = m.R[j0]
		}
		buf.EncodeUint8(uint8(v0.IsPermit))
		buf.EncodeUint8(uint8(v0.SrcPrefix.Address.Af))
		buf.EncodeBytes(v0.SrcPrefix.Address.Un.XXX_UnionData[:], 16)
		buf.EncodeUint8(v0.SrcPrefix.Len)
		buf.EncodeUint8(uint8(v0.DstPrefix.Address.Af))
		buf.EncodeBytes(v0.DstPrefix.Address.Un.XXX_UnionData[:], 16)
		buf.EncodeUint8(v0.DstPrefix.Len)
		buf.EncodeUint8(uint8(v0.Proto))
		buf.EncodeUint16(v0.SrcportOrIcmptypeFirst)
		buf.EncodeUint16(v0.SrcportOrIcmptypeLast)
		buf.EncodeUint16(v0.DstportOrIcmpcodeFirst)
		buf.EncodeUint16(v0.DstportOrIcmpcodeLast)
		buf.EncodeUint8(v0.TCPFlagsMask)
		buf.EncodeUint8(v0.TCPFlagsValue)
	}
	return buf.Bytes(), nil
}
func (m *ACLDetails) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.ACLIndex = buf.DecodeUint32()
	m.Tag = buf.DecodeString(64)
	m.Count = buf.DecodeUint32()
	m.R = make([]acl_types.ACLRule, m.Count)
	for j0 := 0; j0 < len(m.R); j0++ {
		m.R[j0].IsPermit = acl_types.ACLAction(buf.DecodeUint8())
		m.R[j0].SrcPrefix.Address.Af = ip_types.AddressFamily(buf.DecodeUint8())
		copy(m.R[j0].SrcPrefix.Address.Un.XXX_UnionData[:], buf.DecodeBytes(16))
		m.R[j0].SrcPrefix.Len = buf.DecodeUint8()
		m.R[j0].DstPrefix.Address.Af = ip_types.AddressFamily(buf.DecodeUint8())
		copy(m.R[j0].DstPrefix.Address.Un.XXX_UnionData[:], buf.DecodeBytes(16))
		m.R[j0].DstPrefix.Len = buf.DecodeUint8()
		m.R[j0].Proto = ip_types.IPProto(buf.DecodeUint8())
		m.R[j0].SrcportOrIcmptypeFirst = buf.DecodeUint16()
		m.R[j0].SrcportOrIcmptypeLast = buf.DecodeUint16()
		m.R[j0].DstportOrIcmpcodeFirst = buf.DecodeUint16()
		m.R[j0].DstportOrIcmpcodeLast = buf.DecodeUint16()
		m.R[j0].TCPFlagsMask = buf.DecodeUint8()
		m.R[j0].TCPFlagsValue = buf.DecodeUint8()
	}
	return nil
}

// ACLDump defines message 'acl_dump'.
type ACLDump struct {
	ACLIndex uint32 `binapi:"u32,name=acl_index" json:"acl_index,omitempty"`
}

func (m *ACLDump) Reset()               { *m = ACLDump{} }
func (*ACLDump) GetMessageName() string { return "acl_dump" }
func (*ACLDump) GetCrcString() string   { return "ef34fea4" }
func (*ACLDump) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *ACLDump) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.ACLIndex
	return size
}
func (m *ACLDump) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.ACLIndex)
	return buf.Bytes(), nil
}
func (m *ACLDump) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.ACLIndex = buf.DecodeUint32()
	return nil
}

// ACLInterfaceAddDel defines message 'acl_interface_add_del'.
type ACLInterfaceAddDel struct {
	IsAdd     bool                           `binapi:"bool,name=is_add,default=true" json:"is_add,omitempty"`
	IsInput   bool                           `binapi:"bool,name=is_input" json:"is_input,omitempty"`
	SwIfIndex interface_types.InterfaceIndex `binapi:"interface_index,name=sw_if_index" json:"sw_if_index,omitempty"`
	ACLIndex  uint32                         `binapi:"u32,name=acl_index" json:"acl_index,omitempty"`
}

func (m *ACLInterfaceAddDel) Reset()               { *m = ACLInterfaceAddDel{} }
func (*ACLInterfaceAddDel) GetMessageName() string { return "acl_interface_add_del" }
func (*ACLInterfaceAddDel) GetCrcString() string   { return "4b54bebd" }
func (*ACLInterfaceAddDel) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *ACLInterfaceAddDel) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1 // m.IsAdd
	size += 1 // m.IsInput
	size += 4 // m.SwIfIndex
	size += 4 // m.ACLIndex
	return size
}
func (m *ACLInterfaceAddDel) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeBool(m.IsAdd)
	buf.EncodeBool(m.IsInput)
	buf.EncodeUint32(uint32(m.SwIfIndex))
	buf.EncodeUint32(m.ACLIndex)
	return buf.Bytes(), nil
}
func (m *ACLInterfaceAddDel) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.IsAdd = buf.DecodeBool()
	m.IsInput = buf.DecodeBool()
	m.SwIfIndex = interface_types.InterfaceIndex(buf.DecodeUint32())
	m.ACLIndex = buf.DecodeUint32()
	return nil
}

// ACLInterfaceAddDelReply defines message 'acl_interface_add_del_reply'.
type ACLInterfaceAddDelReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *ACLInterfaceAddDelReply) Reset()               { *m = ACLInterfaceAddDelReply{} }
func (*ACLInterfaceAddDelReply) GetMessageName() string { return "acl_interface_add_del_reply" }
func (*ACLInterfaceAddDelReply) GetCrcString() string   { return "e8d4e804" }
func (*ACLInterfaceAddDelReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *ACLInterfaceAddDelReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *ACLInterfaceAddDelReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *ACLInterfaceAddDelReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// ACLInterfaceEtypeWhitelistDetails defines message 'acl_interface_etype_whitelist_details'.
type ACLInterfaceEtypeWhitelistDetails struct {
	SwIfIndex interface_types.InterfaceIndex `binapi:"interface_index,name=sw_if_index" json:"sw_if_index,omitempty"`
	Count     uint8                          `binapi:"u8,name=count" json:"-"`
	NInput    uint8                          `binapi:"u8,name=n_input" json:"n_input,omitempty"`
	Whitelist []uint16                       `binapi:"u16[count],name=whitelist" json:"whitelist,omitempty"`
}

func (m *ACLInterfaceEtypeWhitelistDetails) Reset() { *m = ACLInterfaceEtypeWhitelistDetails{} }
func (*ACLInterfaceEtypeWhitelistDetails) GetMessageName() string {
	return "acl_interface_etype_whitelist_details"
}
func (*ACLInterfaceEtypeWhitelistDetails) GetCrcString() string { return "cc2bfded" }
func (*ACLInterfaceEtypeWhitelistDetails) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *ACLInterfaceEtypeWhitelistDetails) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4                    // m.SwIfIndex
	size += 1                    // m.Count
	size += 1                    // m.NInput
	size += 2 * len(m.Whitelist) // m.Whitelist
	return size
}
func (m *ACLInterfaceEtypeWhitelistDetails) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(uint32(m.SwIfIndex))
	buf.EncodeUint8(uint8(len(m.Whitelist)))
	buf.EncodeUint8(m.NInput)
	for i := 0; i < len(m.Whitelist); i++ {
		var x uint16
		if i < len(m.Whitelist) {
			x = uint16(m.Whitelist[i])
		}
		buf.EncodeUint16(x)
	}
	return buf.Bytes(), nil
}
func (m *ACLInterfaceEtypeWhitelistDetails) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.SwIfIndex = interface_types.InterfaceIndex(buf.DecodeUint32())
	m.Count = buf.DecodeUint8()
	m.NInput = buf.DecodeUint8()
	m.Whitelist = make([]uint16, m.Count)
	for i := 0; i < len(m.Whitelist); i++ {
		m.Whitelist[i] = buf.DecodeUint16()
	}
	return nil
}

// ACLInterfaceEtypeWhitelistDump defines message 'acl_interface_etype_whitelist_dump'.
type ACLInterfaceEtypeWhitelistDump struct {
	SwIfIndex interface_types.InterfaceIndex `binapi:"interface_index,name=sw_if_index" json:"sw_if_index,omitempty"`
}

func (m *ACLInterfaceEtypeWhitelistDump) Reset() { *m = ACLInterfaceEtypeWhitelistDump{} }
func (*ACLInterfaceEtypeWhitelistDump) GetMessageName() string {
	return "acl_interface_etype_whitelist_dump"
}
func (*ACLInterfaceEtypeWhitelistDump) GetCrcString() string { return "f9e6675e" }
func (*ACLInterfaceEtypeWhitelistDump) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *ACLInterfaceEtypeWhitelistDump) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.SwIfIndex
	return size
}
func (m *ACLInterfaceEtypeWhitelistDump) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(uint32(m.SwIfIndex))
	return buf.Bytes(), nil
}
func (m *ACLInterfaceEtypeWhitelistDump) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.SwIfIndex = interface_types.InterfaceIndex(buf.DecodeUint32())
	return nil
}

// ACLInterfaceListDetails defines message 'acl_interface_list_details'.
type ACLInterfaceListDetails struct {
	SwIfIndex interface_types.InterfaceIndex `binapi:"interface_index,name=sw_if_index" json:"sw_if_index,omitempty"`
	Count     uint8                          `binapi:"u8,name=count" json:"-"`
	NInput    uint8                          `binapi:"u8,name=n_input" json:"n_input,omitempty"`
	Acls      []uint32                       `binapi:"u32[count],name=acls" json:"acls,omitempty"`
}

func (m *ACLInterfaceListDetails) Reset()               { *m = ACLInterfaceListDetails{} }
func (*ACLInterfaceListDetails) GetMessageName() string { return "acl_interface_list_details" }
func (*ACLInterfaceListDetails) GetCrcString() string   { return "e695d256" }
func (*ACLInterfaceListDetails) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *ACLInterfaceListDetails) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4               // m.SwIfIndex
	size += 1               // m.Count
	size += 1               // m.NInput
	size += 4 * len(m.Acls) // m.Acls
	return size
}
func (m *ACLInterfaceListDetails) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(uint32(m.SwIfIndex))
	buf.EncodeUint8(uint8(len(m.Acls)))
	buf.EncodeUint8(m.NInput)
	for i := 0; i < len(m.Acls); i++ {
		var x uint32
		if i < len(m.Acls) {
			x = uint32(m.Acls[i])
		}
		buf.EncodeUint32(x)
	}
	return buf.Bytes(), nil
}
func (m *ACLInterfaceListDetails) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.SwIfIndex = interface_types.InterfaceIndex(buf.DecodeUint32())
	m.Count = buf.DecodeUint8()
	m.NInput = buf.DecodeUint8()
	m.Acls = make([]uint32, m.Count)
	for i := 0; i < len(m.Acls); i++ {
		m.Acls[i] = buf.DecodeUint32()
	}
	return nil
}

// ACLInterfaceListDump defines message 'acl_interface_list_dump'.
type ACLInterfaceListDump struct {
	SwIfIndex interface_types.InterfaceIndex `binapi:"interface_index,name=sw_if_index,default=4294967295" json:"sw_if_index,omitempty"`
}

func (m *ACLInterfaceListDump) Reset()               { *m = ACLInterfaceListDump{} }
func (*ACLInterfaceListDump) GetMessageName() string { return "acl_interface_list_dump" }
func (*ACLInterfaceListDump) GetCrcString() string   { return "f9e6675e" }
func (*ACLInterfaceListDump) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *ACLInterfaceListDump) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.SwIfIndex
	return size
}
func (m *ACLInterfaceListDump) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(uint32(m.SwIfIndex))
	return buf.Bytes(), nil
}
func (m *ACLInterfaceListDump) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.SwIfIndex = interface_types.InterfaceIndex(buf.DecodeUint32())
	return nil
}

// ACLInterfaceSetACLList defines message 'acl_interface_set_acl_list'.
type ACLInterfaceSetACLList struct {
	SwIfIndex interface_types.InterfaceIndex `binapi:"interface_index,name=sw_if_index" json:"sw_if_index,omitempty"`
	Count     uint8                          `binapi:"u8,name=count" json:"-"`
	NInput    uint8                          `binapi:"u8,name=n_input" json:"n_input,omitempty"`
	Acls      []uint32                       `binapi:"u32[count],name=acls" json:"acls,omitempty"`
}

func (m *ACLInterfaceSetACLList) Reset()               { *m = ACLInterfaceSetACLList{} }
func (*ACLInterfaceSetACLList) GetMessageName() string { return "acl_interface_set_acl_list" }
func (*ACLInterfaceSetACLList) GetCrcString() string   { return "473982bd" }
func (*ACLInterfaceSetACLList) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *ACLInterfaceSetACLList) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4               // m.SwIfIndex
	size += 1               // m.Count
	size += 1               // m.NInput
	size += 4 * len(m.Acls) // m.Acls
	return size
}
func (m *ACLInterfaceSetACLList) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(uint32(m.SwIfIndex))
	buf.EncodeUint8(uint8(len(m.Acls)))
	buf.EncodeUint8(m.NInput)
	for i := 0; i < len(m.Acls); i++ {
		var x uint32
		if i < len(m.Acls) {
			x = uint32(m.Acls[i])
		}
		buf.EncodeUint32(x)
	}
	return buf.Bytes(), nil
}
func (m *ACLInterfaceSetACLList) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.SwIfIndex = interface_types.InterfaceIndex(buf.DecodeUint32())
	m.Count = buf.DecodeUint8()
	m.NInput = buf.DecodeUint8()
	m.Acls = make([]uint32, m.Count)
	for i := 0; i < len(m.Acls); i++ {
		m.Acls[i] = buf.DecodeUint32()
	}
	return nil
}

// ACLInterfaceSetACLListReply defines message 'acl_interface_set_acl_list_reply'.
type ACLInterfaceSetACLListReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *ACLInterfaceSetACLListReply) Reset() { *m = ACLInterfaceSetACLListReply{} }
func (*ACLInterfaceSetACLListReply) GetMessageName() string {
	return "acl_interface_set_acl_list_reply"
}
func (*ACLInterfaceSetACLListReply) GetCrcString() string { return "e8d4e804" }
func (*ACLInterfaceSetACLListReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *ACLInterfaceSetACLListReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *ACLInterfaceSetACLListReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *ACLInterfaceSetACLListReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// ACLInterfaceSetEtypeWhitelist defines message 'acl_interface_set_etype_whitelist'.
type ACLInterfaceSetEtypeWhitelist struct {
	SwIfIndex interface_types.InterfaceIndex `binapi:"interface_index,name=sw_if_index" json:"sw_if_index,omitempty"`
	Count     uint8                          `binapi:"u8,name=count" json:"-"`
	NInput    uint8                          `binapi:"u8,name=n_input" json:"n_input,omitempty"`
	Whitelist []uint16                       `binapi:"u16[count],name=whitelist" json:"whitelist,omitempty"`
}

func (m *ACLInterfaceSetEtypeWhitelist) Reset() { *m = ACLInterfaceSetEtypeWhitelist{} }
func (*ACLInterfaceSetEtypeWhitelist) GetMessageName() string {
	return "acl_interface_set_etype_whitelist"
}
func (*ACLInterfaceSetEtypeWhitelist) GetCrcString() string { return "3f5c2d2d" }
func (*ACLInterfaceSetEtypeWhitelist) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *ACLInterfaceSetEtypeWhitelist) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4                    // m.SwIfIndex
	size += 1                    // m.Count
	size += 1                    // m.NInput
	size += 2 * len(m.Whitelist) // m.Whitelist
	return size
}
func (m *ACLInterfaceSetEtypeWhitelist) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(uint32(m.SwIfIndex))
	buf.EncodeUint8(uint8(len(m.Whitelist)))
	buf.EncodeUint8(m.NInput)
	for i := 0; i < len(m.Whitelist); i++ {
		var x uint16
		if i < len(m.Whitelist) {
			x = uint16(m.Whitelist[i])
		}
		buf.EncodeUint16(x)
	}
	return buf.Bytes(), nil
}
func (m *ACLInterfaceSetEtypeWhitelist) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.SwIfIndex = interface_types.InterfaceIndex(buf.DecodeUint32())
	m.Count = buf.DecodeUint8()
	m.NInput = buf.DecodeUint8()
	m.Whitelist = make([]uint16, m.Count)
	for i := 0; i < len(m.Whitelist); i++ {
		m.Whitelist[i] = buf.DecodeUint16()
	}
	return nil
}

// ACLInterfaceSetEtypeWhitelistReply defines message 'acl_interface_set_etype_whitelist_reply'.
type ACLInterfaceSetEtypeWhitelistReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *ACLInterfaceSetEtypeWhitelistReply) Reset() { *m = ACLInterfaceSetEtypeWhitelistReply{} }
func (*ACLInterfaceSetEtypeWhitelistReply) GetMessageName() string {
	return "acl_interface_set_etype_whitelist_reply"
}
func (*ACLInterfaceSetEtypeWhitelistReply) GetCrcString() string { return "e8d4e804" }
func (*ACLInterfaceSetEtypeWhitelistReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *ACLInterfaceSetEtypeWhitelistReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *ACLInterfaceSetEtypeWhitelistReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *ACLInterfaceSetEtypeWhitelistReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// ACLPluginControlPing defines message 'acl_plugin_control_ping'.
type ACLPluginControlPing struct{}

func (m *ACLPluginControlPing) Reset()               { *m = ACLPluginControlPing{} }
func (*ACLPluginControlPing) GetMessageName() string { return "acl_plugin_control_ping" }
func (*ACLPluginControlPing) GetCrcString() string   { return "51077d14" }
func (*ACLPluginControlPing) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *ACLPluginControlPing) Size() (size int) {
	if m == nil {
		return 0
	}
	return size
}
func (m *ACLPluginControlPing) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	return buf.Bytes(), nil
}
func (m *ACLPluginControlPing) Unmarshal(b []byte) error {
	return nil
}

// ACLPluginControlPingReply defines message 'acl_plugin_control_ping_reply'.
type ACLPluginControlPingReply struct {
	Retval      int32  `binapi:"i32,name=retval" json:"retval,omitempty"`
	ClientIndex uint32 `binapi:"u32,name=client_index" json:"client_index,omitempty"`
	VpePID      uint32 `binapi:"u32,name=vpe_pid" json:"vpe_pid,omitempty"`
}

func (m *ACLPluginControlPingReply) Reset()               { *m = ACLPluginControlPingReply{} }
func (*ACLPluginControlPingReply) GetMessageName() string { return "acl_plugin_control_ping_reply" }
func (*ACLPluginControlPingReply) GetCrcString() string   { return "f6b0b8ca" }
func (*ACLPluginControlPingReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *ACLPluginControlPingReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	size += 4 // m.ClientIndex
	size += 4 // m.VpePID
	return size
}
func (m *ACLPluginControlPingReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	buf.EncodeUint32(m.ClientIndex)
	buf.EncodeUint32(m.VpePID)
	return buf.Bytes(), nil
}
func (m *ACLPluginControlPingReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	m.ClientIndex = buf.DecodeUint32()
	m.VpePID = buf.DecodeUint32()
	return nil
}

// ACLPluginGetConnTableMaxEntries defines message 'acl_plugin_get_conn_table_max_entries'.
type ACLPluginGetConnTableMaxEntries struct{}

func (m *ACLPluginGetConnTableMaxEntries) Reset() { *m = ACLPluginGetConnTableMaxEntries{} }
func (*ACLPluginGetConnTableMaxEntries) GetMessageName() string {
	return "acl_plugin_get_conn_table_max_entries"
}
func (*ACLPluginGetConnTableMaxEntries) GetCrcString() string { return "51077d14" }
func (*ACLPluginGetConnTableMaxEntries) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *ACLPluginGetConnTableMaxEntries) Size() (size int) {
	if m == nil {
		return 0
	}
	return size
}
func (m *ACLPluginGetConnTableMaxEntries) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	return buf.Bytes(), nil
}
func (m *ACLPluginGetConnTableMaxEntries) Unmarshal(b []byte) error {
	return nil
}

// ACLPluginGetConnTableMaxEntriesReply defines message 'acl_plugin_get_conn_table_max_entries_reply'.
type ACLPluginGetConnTableMaxEntriesReply struct {
	ConnTableMaxEntries uint64 `binapi:"u64,name=conn_table_max_entries" json:"conn_table_max_entries,omitempty"`
}

func (m *ACLPluginGetConnTableMaxEntriesReply) Reset() { *m = ACLPluginGetConnTableMaxEntriesReply{} }
func (*ACLPluginGetConnTableMaxEntriesReply) GetMessageName() string {
	return "acl_plugin_get_conn_table_max_entries_reply"
}
func (*ACLPluginGetConnTableMaxEntriesReply) GetCrcString() string { return "7a096d3d" }
func (*ACLPluginGetConnTableMaxEntriesReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *ACLPluginGetConnTableMaxEntriesReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 8 // m.ConnTableMaxEntries
	return size
}
func (m *ACLPluginGetConnTableMaxEntriesReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint64(m.ConnTableMaxEntries)
	return buf.Bytes(), nil
}
func (m *ACLPluginGetConnTableMaxEntriesReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.ConnTableMaxEntries = buf.DecodeUint64()
	return nil
}

// ACLPluginGetVersion defines message 'acl_plugin_get_version'.
type ACLPluginGetVersion struct{}

func (m *ACLPluginGetVersion) Reset()               { *m = ACLPluginGetVersion{} }
func (*ACLPluginGetVersion) GetMessageName() string { return "acl_plugin_get_version" }
func (*ACLPluginGetVersion) GetCrcString() string   { return "51077d14" }
func (*ACLPluginGetVersion) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *ACLPluginGetVersion) Size() (size int) {
	if m == nil {
		return 0
	}
	return size
}
func (m *ACLPluginGetVersion) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	return buf.Bytes(), nil
}
func (m *ACLPluginGetVersion) Unmarshal(b []byte) error {
	return nil
}

// ACLPluginGetVersionReply defines message 'acl_plugin_get_version_reply'.
type ACLPluginGetVersionReply struct {
	Major uint32 `binapi:"u32,name=major" json:"major,omitempty"`
	Minor uint32 `binapi:"u32,name=minor" json:"minor,omitempty"`
}

func (m *ACLPluginGetVersionReply) Reset()               { *m = ACLPluginGetVersionReply{} }
func (*ACLPluginGetVersionReply) GetMessageName() string { return "acl_plugin_get_version_reply" }
func (*ACLPluginGetVersionReply) GetCrcString() string   { return "9b32cf86" }
func (*ACLPluginGetVersionReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *ACLPluginGetVersionReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Major
	size += 4 // m.Minor
	return size
}
func (m *ACLPluginGetVersionReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.Major)
	buf.EncodeUint32(m.Minor)
	return buf.Bytes(), nil
}
func (m *ACLPluginGetVersionReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Major = buf.DecodeUint32()
	m.Minor = buf.DecodeUint32()
	return nil
}

// ACLStatsIntfCountersEnable defines message 'acl_stats_intf_counters_enable'.
type ACLStatsIntfCountersEnable struct {
	Enable bool `binapi:"bool,name=enable" json:"enable,omitempty"`
}

func (m *ACLStatsIntfCountersEnable) Reset()               { *m = ACLStatsIntfCountersEnable{} }
func (*ACLStatsIntfCountersEnable) GetMessageName() string { return "acl_stats_intf_counters_enable" }
func (*ACLStatsIntfCountersEnable) GetCrcString() string   { return "b3e225d2" }
func (*ACLStatsIntfCountersEnable) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *ACLStatsIntfCountersEnable) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1 // m.Enable
	return size
}
func (m *ACLStatsIntfCountersEnable) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeBool(m.Enable)
	return buf.Bytes(), nil
}
func (m *ACLStatsIntfCountersEnable) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Enable = buf.DecodeBool()
	return nil
}

// ACLStatsIntfCountersEnableReply defines message 'acl_stats_intf_counters_enable_reply'.
type ACLStatsIntfCountersEnableReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *ACLStatsIntfCountersEnableReply) Reset() { *m = ACLStatsIntfCountersEnableReply{} }
func (*ACLStatsIntfCountersEnableReply) GetMessageName() string {
	return "acl_stats_intf_counters_enable_reply"
}
func (*ACLStatsIntfCountersEnableReply) GetCrcString() string { return "e8d4e804" }
func (*ACLStatsIntfCountersEnableReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *ACLStatsIntfCountersEnableReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *ACLStatsIntfCountersEnableReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *ACLStatsIntfCountersEnableReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// MacipACLAdd defines message 'macip_acl_add'.
type MacipACLAdd struct {
	Tag   string                   `binapi:"string[64],name=tag" json:"tag,omitempty"`
	Count uint32                   `binapi:"u32,name=count" json:"-"`
	R     []acl_types.MacipACLRule `binapi:"macip_acl_rule[count],name=r" json:"r,omitempty"`
}

func (m *MacipACLAdd) Reset()               { *m = MacipACLAdd{} }
func (*MacipACLAdd) GetMessageName() string { return "macip_acl_add" }
func (*MacipACLAdd) GetCrcString() string   { return "d648fd0a" }
func (*MacipACLAdd) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *MacipACLAdd) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 64 // m.Tag
	size += 4  // m.Count
	for j1 := 0; j1 < len(m.R); j1++ {
		var s1 acl_types.MacipACLRule
		_ = s1
		if j1 < len(m.R) {
			s1 = m.R[j1]
		}
		size += 1      // s1.IsPermit
		size += 1 * 6  // s1.SrcMac
		size += 1 * 6  // s1.SrcMacMask
		size += 1      // s1.SrcPrefix.Address.Af
		size += 1 * 16 // s1.SrcPrefix.Address.Un
		size += 1      // s1.SrcPrefix.Len
	}
	return size
}
func (m *MacipACLAdd) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeString(m.Tag, 64)
	buf.EncodeUint32(uint32(len(m.R)))
	for j0 := 0; j0 < len(m.R); j0++ {
		var v0 acl_types.MacipACLRule // R
		if j0 < len(m.R) {
			v0 = m.R[j0]
		}
		buf.EncodeUint8(uint8(v0.IsPermit))
		buf.EncodeBytes(v0.SrcMac[:], 6)
		buf.EncodeBytes(v0.SrcMacMask[:], 6)
		buf.EncodeUint8(uint8(v0.SrcPrefix.Address.Af))
		buf.EncodeBytes(v0.SrcPrefix.Address.Un.XXX_UnionData[:], 16)
		buf.EncodeUint8(v0.SrcPrefix.Len)
	}
	return buf.Bytes(), nil
}
func (m *MacipACLAdd) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Tag = buf.DecodeString(64)
	m.Count = buf.DecodeUint32()
	m.R = make([]acl_types.MacipACLRule, m.Count)
	for j0 := 0; j0 < len(m.R); j0++ {
		m.R[j0].IsPermit = acl_types.ACLAction(buf.DecodeUint8())
		copy(m.R[j0].SrcMac[:], buf.DecodeBytes(6))
		copy(m.R[j0].SrcMacMask[:], buf.DecodeBytes(6))
		m.R[j0].SrcPrefix.Address.Af = ip_types.AddressFamily(buf.DecodeUint8())
		copy(m.R[j0].SrcPrefix.Address.Un.XXX_UnionData[:], buf.DecodeBytes(16))
		m.R[j0].SrcPrefix.Len = buf.DecodeUint8()
	}
	return nil
}

// MacipACLAddReplace defines message 'macip_acl_add_replace'.
type MacipACLAddReplace struct {
	ACLIndex uint32                   `binapi:"u32,name=acl_index,default=4294967295" json:"acl_index,omitempty"`
	Tag      string                   `binapi:"string[64],name=tag" json:"tag,omitempty"`
	Count    uint32                   `binapi:"u32,name=count" json:"-"`
	R        []acl_types.MacipACLRule `binapi:"macip_acl_rule[count],name=r" json:"r,omitempty"`
}

func (m *MacipACLAddReplace) Reset()               { *m = MacipACLAddReplace{} }
func (*MacipACLAddReplace) GetMessageName() string { return "macip_acl_add_replace" }
func (*MacipACLAddReplace) GetCrcString() string   { return "e34402a7" }
func (*MacipACLAddReplace) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *MacipACLAddReplace) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4  // m.ACLIndex
	size += 64 // m.Tag
	size += 4  // m.Count
	for j1 := 0; j1 < len(m.R); j1++ {
		var s1 acl_types.MacipACLRule
		_ = s1
		if j1 < len(m.R) {
			s1 = m.R[j1]
		}
		size += 1      // s1.IsPermit
		size += 1 * 6  // s1.SrcMac
		size += 1 * 6  // s1.SrcMacMask
		size += 1      // s1.SrcPrefix.Address.Af
		size += 1 * 16 // s1.SrcPrefix.Address.Un
		size += 1      // s1.SrcPrefix.Len
	}
	return size
}
func (m *MacipACLAddReplace) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.ACLIndex)
	buf.EncodeString(m.Tag, 64)
	buf.EncodeUint32(uint32(len(m.R)))
	for j0 := 0; j0 < len(m.R); j0++ {
		var v0 acl_types.MacipACLRule // R
		if j0 < len(m.R) {
			v0 = m.R[j0]
		}
		buf.EncodeUint8(uint8(v0.IsPermit))
		buf.EncodeBytes(v0.SrcMac[:], 6)
		buf.EncodeBytes(v0.SrcMacMask[:], 6)
		buf.EncodeUint8(uint8(v0.SrcPrefix.Address.Af))
		buf.EncodeBytes(v0.SrcPrefix.Address.Un.XXX_UnionData[:], 16)
		buf.EncodeUint8(v0.SrcPrefix.Len)
	}
	return buf.Bytes(), nil
}
func (m *MacipACLAddReplace) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.ACLIndex = buf.DecodeUint32()
	m.Tag = buf.DecodeString(64)
	m.Count = buf.DecodeUint32()
	m.R = make([]acl_types.MacipACLRule, m.Count)
	for j0 := 0; j0 < len(m.R); j0++ {
		m.R[j0].IsPermit = acl_types.ACLAction(buf.DecodeUint8())
		copy(m.R[j0].SrcMac[:], buf.DecodeBytes(6))
		copy(m.R[j0].SrcMacMask[:], buf.DecodeBytes(6))
		m.R[j0].SrcPrefix.Address.Af = ip_types.AddressFamily(buf.DecodeUint8())
		copy(m.R[j0].SrcPrefix.Address.Un.XXX_UnionData[:], buf.DecodeBytes(16))
		m.R[j0].SrcPrefix.Len = buf.DecodeUint8()
	}
	return nil
}

// MacipACLAddReplaceReply defines message 'macip_acl_add_replace_reply'.
type MacipACLAddReplaceReply struct {
	ACLIndex uint32 `binapi:"u32,name=acl_index" json:"acl_index,omitempty"`
	Retval   int32  `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *MacipACLAddReplaceReply) Reset()               { *m = MacipACLAddReplaceReply{} }
func (*MacipACLAddReplaceReply) GetMessageName() string { return "macip_acl_add_replace_reply" }
func (*MacipACLAddReplaceReply) GetCrcString() string   { return "ac407b0c" }
func (*MacipACLAddReplaceReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *MacipACLAddReplaceReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.ACLIndex
	size += 4 // m.Retval
	return size
}
func (m *MacipACLAddReplaceReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.ACLIndex)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *MacipACLAddReplaceReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.ACLIndex = buf.DecodeUint32()
	m.Retval = buf.DecodeInt32()
	return nil
}

// MacipACLAddReply defines message 'macip_acl_add_reply'.
type MacipACLAddReply struct {
	ACLIndex uint32 `binapi:"u32,name=acl_index" json:"acl_index,omitempty"`
	Retval   int32  `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *MacipACLAddReply) Reset()               { *m = MacipACLAddReply{} }
func (*MacipACLAddReply) GetMessageName() string { return "macip_acl_add_reply" }
func (*MacipACLAddReply) GetCrcString() string   { return "ac407b0c" }
func (*MacipACLAddReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *MacipACLAddReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.ACLIndex
	size += 4 // m.Retval
	return size
}
func (m *MacipACLAddReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.ACLIndex)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *MacipACLAddReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.ACLIndex = buf.DecodeUint32()
	m.Retval = buf.DecodeInt32()
	return nil
}

// MacipACLDel defines message 'macip_acl_del'.
type MacipACLDel struct {
	ACLIndex uint32 `binapi:"u32,name=acl_index" json:"acl_index,omitempty"`
}

func (m *MacipACLDel) Reset()               { *m = MacipACLDel{} }
func (*MacipACLDel) GetMessageName() string { return "macip_acl_del" }
func (*MacipACLDel) GetCrcString() string   { return "ef34fea4" }
func (*MacipACLDel) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *MacipACLDel) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.ACLIndex
	return size
}
func (m *MacipACLDel) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.ACLIndex)
	return buf.Bytes(), nil
}
func (m *MacipACLDel) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.ACLIndex = buf.DecodeUint32()
	return nil
}

// MacipACLDelReply defines message 'macip_acl_del_reply'.
type MacipACLDelReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *MacipACLDelReply) Reset()               { *m = MacipACLDelReply{} }
func (*MacipACLDelReply) GetMessageName() string { return "macip_acl_del_reply" }
func (*MacipACLDelReply) GetCrcString() string   { return "e8d4e804" }
func (*MacipACLDelReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *MacipACLDelReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *MacipACLDelReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *MacipACLDelReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// MacipACLDetails defines message 'macip_acl_details'.
type MacipACLDetails struct {
	ACLIndex uint32                   `binapi:"u32,name=acl_index" json:"acl_index,omitempty"`
	Tag      string                   `binapi:"string[64],name=tag" json:"tag,omitempty"`
	Count    uint32                   `binapi:"u32,name=count" json:"-"`
	R        []acl_types.MacipACLRule `binapi:"macip_acl_rule[count],name=r" json:"r,omitempty"`
}

func (m *MacipACLDetails) Reset()               { *m = MacipACLDetails{} }
func (*MacipACLDetails) GetMessageName() string { return "macip_acl_details" }
func (*MacipACLDetails) GetCrcString() string   { return "57c7482f" }
func (*MacipACLDetails) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *MacipACLDetails) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4  // m.ACLIndex
	size += 64 // m.Tag
	size += 4  // m.Count
	for j1 := 0; j1 < len(m.R); j1++ {
		var s1 acl_types.MacipACLRule
		_ = s1
		if j1 < len(m.R) {
			s1 = m.R[j1]
		}
		size += 1      // s1.IsPermit
		size += 1 * 6  // s1.SrcMac
		size += 1 * 6  // s1.SrcMacMask
		size += 1      // s1.SrcPrefix.Address.Af
		size += 1 * 16 // s1.SrcPrefix.Address.Un
		size += 1      // s1.SrcPrefix.Len
	}
	return size
}
func (m *MacipACLDetails) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.ACLIndex)
	buf.EncodeString(m.Tag, 64)
	buf.EncodeUint32(uint32(len(m.R)))
	for j0 := 0; j0 < len(m.R); j0++ {
		var v0 acl_types.MacipACLRule // R
		if j0 < len(m.R) {
			v0 = m.R[j0]
		}
		buf.EncodeUint8(uint8(v0.IsPermit))
		buf.EncodeBytes(v0.SrcMac[:], 6)
		buf.EncodeBytes(v0.SrcMacMask[:], 6)
		buf.EncodeUint8(uint8(v0.SrcPrefix.Address.Af))
		buf.EncodeBytes(v0.SrcPrefix.Address.Un.XXX_UnionData[:], 16)
		buf.EncodeUint8(v0.SrcPrefix.Len)
	}
	return buf.Bytes(), nil
}
func (m *MacipACLDetails) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.ACLIndex = buf.DecodeUint32()
	m.Tag = buf.DecodeString(64)
	m.Count = buf.DecodeUint32()
	m.R = make([]acl_types.MacipACLRule, m.Count)
	for j0 := 0; j0 < len(m.R); j0++ {
		m.R[j0].IsPermit = acl_types.ACLAction(buf.DecodeUint8())
		copy(m.R[j0].SrcMac[:], buf.DecodeBytes(6))
		copy(m.R[j0].SrcMacMask[:], buf.DecodeBytes(6))
		m.R[j0].SrcPrefix.Address.Af = ip_types.AddressFamily(buf.DecodeUint8())
		copy(m.R[j0].SrcPrefix.Address.Un.XXX_UnionData[:], buf.DecodeBytes(16))
		m.R[j0].SrcPrefix.Len = buf.DecodeUint8()
	}
	return nil
}

// MacipACLDump defines message 'macip_acl_dump'.
type MacipACLDump struct {
	ACLIndex uint32 `binapi:"u32,name=acl_index,default=4294967295" json:"acl_index,omitempty"`
}

func (m *MacipACLDump) Reset()               { *m = MacipACLDump{} }
func (*MacipACLDump) GetMessageName() string { return "macip_acl_dump" }
func (*MacipACLDump) GetCrcString() string   { return "ef34fea4" }
func (*MacipACLDump) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *MacipACLDump) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.ACLIndex
	return size
}
func (m *MacipACLDump) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.ACLIndex)
	return buf.Bytes(), nil
}
func (m *MacipACLDump) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.ACLIndex = buf.DecodeUint32()
	return nil
}

// MacipACLInterfaceAddDel defines message 'macip_acl_interface_add_del'.
type MacipACLInterfaceAddDel struct {
	IsAdd     bool                           `binapi:"bool,name=is_add,default=true" json:"is_add,omitempty"`
	SwIfIndex interface_types.InterfaceIndex `binapi:"interface_index,name=sw_if_index" json:"sw_if_index,omitempty"`
	ACLIndex  uint32                         `binapi:"u32,name=acl_index" json:"acl_index,omitempty"`
}

func (m *MacipACLInterfaceAddDel) Reset()               { *m = MacipACLInterfaceAddDel{} }
func (*MacipACLInterfaceAddDel) GetMessageName() string { return "macip_acl_interface_add_del" }
func (*MacipACLInterfaceAddDel) GetCrcString() string   { return "4b8690b1" }
func (*MacipACLInterfaceAddDel) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *MacipACLInterfaceAddDel) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1 // m.IsAdd
	size += 4 // m.SwIfIndex
	size += 4 // m.ACLIndex
	return size
}
func (m *MacipACLInterfaceAddDel) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeBool(m.IsAdd)
	buf.EncodeUint32(uint32(m.SwIfIndex))
	buf.EncodeUint32(m.ACLIndex)
	return buf.Bytes(), nil
}
func (m *MacipACLInterfaceAddDel) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.IsAdd = buf.DecodeBool()
	m.SwIfIndex = interface_types.InterfaceIndex(buf.DecodeUint32())
	m.ACLIndex = buf.DecodeUint32()
	return nil
}

// MacipACLInterfaceAddDelReply defines message 'macip_acl_interface_add_del_reply'.
type MacipACLInterfaceAddDelReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *MacipACLInterfaceAddDelReply) Reset() { *m = MacipACLInterfaceAddDelReply{} }
func (*MacipACLInterfaceAddDelReply) GetMessageName() string {
	return "macip_acl_interface_add_del_reply"
}
func (*MacipACLInterfaceAddDelReply) GetCrcString() string { return "e8d4e804" }
func (*MacipACLInterfaceAddDelReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *MacipACLInterfaceAddDelReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *MacipACLInterfaceAddDelReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *MacipACLInterfaceAddDelReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// MacipACLInterfaceGet defines message 'macip_acl_interface_get'.
type MacipACLInterfaceGet struct{}

func (m *MacipACLInterfaceGet) Reset()               { *m = MacipACLInterfaceGet{} }
func (*MacipACLInterfaceGet) GetMessageName() string { return "macip_acl_interface_get" }
func (*MacipACLInterfaceGet) GetCrcString() string   { return "51077d14" }
func (*MacipACLInterfaceGet) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *MacipACLInterfaceGet) Size() (size int) {
	if m == nil {
		return 0
	}
	return size
}
func (m *MacipACLInterfaceGet) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	return buf.Bytes(), nil
}
func (m *MacipACLInterfaceGet) Unmarshal(b []byte) error {
	return nil
}

// MacipACLInterfaceGetReply defines message 'macip_acl_interface_get_reply'.
type MacipACLInterfaceGetReply struct {
	Count uint32   `binapi:"u32,name=count" json:"-"`
	Acls  []uint32 `binapi:"u32[count],name=acls" json:"acls,omitempty"`
}

func (m *MacipACLInterfaceGetReply) Reset()               { *m = MacipACLInterfaceGetReply{} }
func (*MacipACLInterfaceGetReply) GetMessageName() string { return "macip_acl_interface_get_reply" }
func (*MacipACLInterfaceGetReply) GetCrcString() string   { return "accf9b05" }
func (*MacipACLInterfaceGetReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *MacipACLInterfaceGetReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4               // m.Count
	size += 4 * len(m.Acls) // m.Acls
	return size
}
func (m *MacipACLInterfaceGetReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(uint32(len(m.Acls)))
	for i := 0; i < len(m.Acls); i++ {
		var x uint32
		if i < len(m.Acls) {
			x = uint32(m.Acls[i])
		}
		buf.EncodeUint32(x)
	}
	return buf.Bytes(), nil
}
func (m *MacipACLInterfaceGetReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Count = buf.DecodeUint32()
	m.Acls = make([]uint32, m.Count)
	for i := 0; i < len(m.Acls); i++ {
		m.Acls[i] = buf.DecodeUint32()
	}
	return nil
}

// MacipACLInterfaceListDetails defines message 'macip_acl_interface_list_details'.
type MacipACLInterfaceListDetails struct {
	SwIfIndex interface_types.InterfaceIndex `binapi:"interface_index,name=sw_if_index" json:"sw_if_index,omitempty"`
	Count     uint8                          `binapi:"u8,name=count" json:"-"`
	Acls      []uint32                       `binapi:"u32[count],name=acls" json:"acls,omitempty"`
}

func (m *MacipACLInterfaceListDetails) Reset() { *m = MacipACLInterfaceListDetails{} }
func (*MacipACLInterfaceListDetails) GetMessageName() string {
	return "macip_acl_interface_list_details"
}
func (*MacipACLInterfaceListDetails) GetCrcString() string { return "a0c5d56d" }
func (*MacipACLInterfaceListDetails) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *MacipACLInterfaceListDetails) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4               // m.SwIfIndex
	size += 1               // m.Count
	size += 4 * len(m.Acls) // m.Acls
	return size
}
func (m *MacipACLInterfaceListDetails) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(uint32(m.SwIfIndex))
	buf.EncodeUint8(uint8(len(m.Acls)))
	for i := 0; i < len(m.Acls); i++ {
		var x uint32
		if i < len(m.Acls) {
			x = uint32(m.Acls[i])
		}
		buf.EncodeUint32(x)
	}
	return buf.Bytes(), nil
}
func (m *MacipACLInterfaceListDetails) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.SwIfIndex = interface_types.InterfaceIndex(buf.DecodeUint32())
	m.Count = buf.DecodeUint8()
	m.Acls = make([]uint32, m.Count)
	for i := 0; i < len(m.Acls); i++ {
		m.Acls[i] = buf.DecodeUint32()
	}
	return nil
}

// MacipACLInterfaceListDump defines message 'macip_acl_interface_list_dump'.
type MacipACLInterfaceListDump struct {
	SwIfIndex interface_types.InterfaceIndex `binapi:"interface_index,name=sw_if_index" json:"sw_if_index,omitempty"`
}

func (m *MacipACLInterfaceListDump) Reset()               { *m = MacipACLInterfaceListDump{} }
func (*MacipACLInterfaceListDump) GetMessageName() string { return "macip_acl_interface_list_dump" }
func (*MacipACLInterfaceListDump) GetCrcString() string   { return "f9e6675e" }
func (*MacipACLInterfaceListDump) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *MacipACLInterfaceListDump) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.SwIfIndex
	return size
}
func (m *MacipACLInterfaceListDump) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(uint32(m.SwIfIndex))
	return buf.Bytes(), nil
}
func (m *MacipACLInterfaceListDump) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.SwIfIndex = interface_types.InterfaceIndex(buf.DecodeUint32())
	return nil
}

func init() { file_acl_binapi_init() }
func file_acl_binapi_init() {
	api.RegisterMessage((*ACLAddReplace)(nil), "acl_add_replace_1cabdeab")
	api.RegisterMessage((*ACLAddReplaceReply)(nil), "acl_add_replace_reply_ac407b0c")
	api.RegisterMessage((*ACLDel)(nil), "acl_del_ef34fea4")
	api.RegisterMessage((*ACLDelReply)(nil), "acl_del_reply_e8d4e804")
	api.RegisterMessage((*ACLDetails)(nil), "acl_details_7a97f21c")
	api.RegisterMessage((*ACLDump)(nil), "acl_dump_ef34fea4")
	api.RegisterMessage((*ACLInterfaceAddDel)(nil), "acl_interface_add_del_4b54bebd")
	api.RegisterMessage((*ACLInterfaceAddDelReply)(nil), "acl_interface_add_del_reply_e8d4e804")
	api.RegisterMessage((*ACLInterfaceEtypeWhitelistDetails)(nil), "acl_interface_etype_whitelist_details_cc2bfded")
	api.RegisterMessage((*ACLInterfaceEtypeWhitelistDump)(nil), "acl_interface_etype_whitelist_dump_f9e6675e")
	api.RegisterMessage((*ACLInterfaceListDetails)(nil), "acl_interface_list_details_e695d256")
	api.RegisterMessage((*ACLInterfaceListDump)(nil), "acl_interface_list_dump_f9e6675e")
	api.RegisterMessage((*ACLInterfaceSetACLList)(nil), "acl_interface_set_acl_list_473982bd")
	api.RegisterMessage((*ACLInterfaceSetACLListReply)(nil), "acl_interface_set_acl_list_reply_e8d4e804")
	api.RegisterMessage((*ACLInterfaceSetEtypeWhitelist)(nil), "acl_interface_set_etype_whitelist_3f5c2d2d")
	api.RegisterMessage((*ACLInterfaceSetEtypeWhitelistReply)(nil), "acl_interface_set_etype_whitelist_reply_e8d4e804")
	api.RegisterMessage((*ACLPluginControlPing)(nil), "acl_plugin_control_ping_51077d14")
	api.RegisterMessage((*ACLPluginControlPingReply)(nil), "acl_plugin_control_ping_reply_f6b0b8ca")
	api.RegisterMessage((*ACLPluginGetConnTableMaxEntries)(nil), "acl_plugin_get_conn_table_max_entries_51077d14")
	api.RegisterMessage((*ACLPluginGetConnTableMaxEntriesReply)(nil), "acl_plugin_get_conn_table_max_entries_reply_7a096d3d")
	api.RegisterMessage((*ACLPluginGetVersion)(nil), "acl_plugin_get_version_51077d14")
	api.RegisterMessage((*ACLPluginGetVersionReply)(nil), "acl_plugin_get_version_reply_9b32cf86")
	api.RegisterMessage((*ACLStatsIntfCountersEnable)(nil), "acl_stats_intf_counters_enable_b3e225d2")
	api.RegisterMessage((*ACLStatsIntfCountersEnableReply)(nil), "acl_stats_intf_counters_enable_reply_e8d4e804")
	api.RegisterMessage((*MacipACLAdd)(nil), "macip_acl_add_d648fd0a")
	api.RegisterMessage((*MacipACLAddReplace)(nil), "macip_acl_add_replace_e34402a7")
	api.RegisterMessage((*MacipACLAddReplaceReply)(nil), "macip_acl_add_replace_reply_ac407b0c")
	api.RegisterMessage((*MacipACLAddReply)(nil), "macip_acl_add_reply_ac407b0c")
	api.RegisterMessage((*MacipACLDel)(nil), "macip_acl_del_ef34fea4")
	api.RegisterMessage((*MacipACLDelReply)(nil), "macip_acl_del_reply_e8d4e804")
	api.RegisterMessage((*MacipACLDetails)(nil), "macip_acl_details_57c7482f")
	api.RegisterMessage((*MacipACLDump)(nil), "macip_acl_dump_ef34fea4")
	api.RegisterMessage((*MacipACLInterfaceAddDel)(nil), "macip_acl_interface_add_del_4b8690b1")
	api.RegisterMessage((*MacipACLInterfaceAddDelReply)(nil), "macip_acl_interface_add_del_reply_e8d4e804")
	api.RegisterMessage((*MacipACLInterfaceGet)(nil), "macip_acl_interface_get_51077d14")
	api.RegisterMessage((*MacipACLInterfaceGetReply)(nil), "macip_acl_interface_get_reply_accf9b05")
	api.RegisterMessage((*MacipACLInterfaceListDetails)(nil), "macip_acl_interface_list_details_a0c5d56d")
	api.RegisterMessage((*MacipACLInterfaceListDump)(nil), "macip_acl_interface_list_dump_f9e6675e")
}

// Messages returns list of all messages in this module.
func AllMessages() []api.Message {
	return []api.Message{
		(*ACLAddReplace)(nil),
		(*ACLAddReplaceReply)(nil),
		(*ACLDel)(nil),
		(*ACLDelReply)(nil),
		(*ACLDetails)(nil),
		(*ACLDump)(nil),
		(*ACLInterfaceAddDel)(nil),
		(*ACLInterfaceAddDelReply)(nil),
		(*ACLInterfaceEtypeWhitelistDetails)(nil),
		(*ACLInterfaceEtypeWhitelistDump)(nil),
		(*ACLInterfaceListDetails)(nil),
		(*ACLInterfaceListDump)(nil),
		(*ACLInterfaceSetACLList)(nil),
		(*ACLInterfaceSetACLListReply)(nil),
		(*ACLInterfaceSetEtypeWhitelist)(nil),
		(*ACLInterfaceSetEtypeWhitelistReply)(nil),
		(*ACLPluginControlPing)(nil),
		(*ACLPluginControlPingReply)(nil),
		(*ACLPluginGetConnTableMaxEntries)(nil),
		(*ACLPluginGetConnTableMaxEntriesReply)(nil),
		(*ACLPluginGetVersion)(nil),
		(*ACLPluginGetVersionReply)(nil),
		(*ACLStatsIntfCountersEnable)(nil),
		(*ACLStatsIntfCountersEnableReply)(nil),
		(*MacipACLAdd)(nil),
		(*MacipACLAddReplace)(nil),
		(*MacipACLAddReplaceReply)(nil),
		(*MacipACLAddReply)(nil),
		(*MacipACLDel)(nil),
		(*MacipACLDelReply)(nil),
		(*MacipACLDetails)(nil),
		(*MacipACLDump)(nil),
		(*MacipACLInterfaceAddDel)(nil),
		(*MacipACLInterfaceAddDelReply)(nil),
		(*MacipACLInterfaceGet)(nil),
		(*MacipACLInterfaceGetReply)(nil),
		(*MacipACLInterfaceListDetails)(nil),
		(*MacipACLInterfaceListDump)(nil),
	}
}
