// Code generated by GoVPP's binapi-generator. DO NOT EDIT.
// source: /usr/share/vpp/api/core/arp.api.json

/*
Package arp is a generated VPP binary API for 'arp' module.

It consists of:
	 10 enums
	  7 aliases
	  7 types
	  1 union
	  8 messages
	  4 services
*/
package arp

import (
	bytes "bytes"
	context "context"
	api "git.fd.io/govpp.git/api"
	struc "github.com/lunixbochs/struc"
	io "io"
	strconv "strconv"

	ethernet_types "go.ligato.io/vpp-agent/v3/plugins/vpp/binapi/vpp2001/ethernet_types"
	interface_types "go.ligato.io/vpp-agent/v3/plugins/vpp/binapi/vpp2001/interface_types"
	ip_types "go.ligato.io/vpp-agent/v3/plugins/vpp/binapi/vpp2001/ip_types"
)

const (
	// ModuleName is the name of this module.
	ModuleName = "arp"
	// VersionCrc is the CRC of this module.
	VersionCrc = 0xa818aaf3
)

type AddressFamily = ip_types.AddressFamily

type IfStatusFlags = interface_types.IfStatusFlags

type IfType = interface_types.IfType

type IPDscp = ip_types.IPDscp

type IPEcn = ip_types.IPEcn

type IPProto = ip_types.IPProto

type LinkDuplex = interface_types.LinkDuplex

type MtuProto = interface_types.MtuProto

type RxMode = interface_types.RxMode

type SubIfFlags = interface_types.SubIfFlags

type AddressWithPrefix = ip_types.AddressWithPrefix

type InterfaceIndex = interface_types.InterfaceIndex

type IP4Address = ip_types.IP4Address

type IP4AddressWithPrefix = ip_types.IP4AddressWithPrefix

type IP6Address = ip_types.IP6Address

type IP6AddressWithPrefix = ip_types.IP6AddressWithPrefix

type MacAddress = ethernet_types.MacAddress

type Address = ip_types.Address

type IP4Prefix = ip_types.IP4Prefix

type IP6Prefix = ip_types.IP6Prefix

type Mprefix = ip_types.Mprefix

type Prefix = ip_types.Prefix

type PrefixMatcher = ip_types.PrefixMatcher

// ProxyArp represents VPP binary API type 'proxy_arp'.
type ProxyArp struct {
	TableID uint32
	Low     IP4Address
	Hi      IP4Address
}

func (*ProxyArp) GetTypeName() string { return "proxy_arp" }

type AddressUnion = ip_types.AddressUnion

// ProxyArpAddDel represents VPP binary API message 'proxy_arp_add_del'.
type ProxyArpAddDel struct {
	IsAdd bool
	Proxy ProxyArp
}

func (m *ProxyArpAddDel) Reset()                        { *m = ProxyArpAddDel{} }
func (*ProxyArpAddDel) GetMessageName() string          { return "proxy_arp_add_del" }
func (*ProxyArpAddDel) GetCrcString() string            { return "85486cbd" }
func (*ProxyArpAddDel) GetMessageType() api.MessageType { return api.RequestMessage }

// ProxyArpAddDelReply represents VPP binary API message 'proxy_arp_add_del_reply'.
type ProxyArpAddDelReply struct {
	Retval int32
}

func (m *ProxyArpAddDelReply) Reset()                        { *m = ProxyArpAddDelReply{} }
func (*ProxyArpAddDelReply) GetMessageName() string          { return "proxy_arp_add_del_reply" }
func (*ProxyArpAddDelReply) GetCrcString() string            { return "e8d4e804" }
func (*ProxyArpAddDelReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// ProxyArpDetails represents VPP binary API message 'proxy_arp_details'.
type ProxyArpDetails struct {
	Proxy ProxyArp
}

func (m *ProxyArpDetails) Reset()                        { *m = ProxyArpDetails{} }
func (*ProxyArpDetails) GetMessageName() string          { return "proxy_arp_details" }
func (*ProxyArpDetails) GetCrcString() string            { return "9228c150" }
func (*ProxyArpDetails) GetMessageType() api.MessageType { return api.ReplyMessage }

// ProxyArpDump represents VPP binary API message 'proxy_arp_dump'.
type ProxyArpDump struct{}

func (m *ProxyArpDump) Reset()                        { *m = ProxyArpDump{} }
func (*ProxyArpDump) GetMessageName() string          { return "proxy_arp_dump" }
func (*ProxyArpDump) GetCrcString() string            { return "51077d14" }
func (*ProxyArpDump) GetMessageType() api.MessageType { return api.RequestMessage }

// ProxyArpIntfcDetails represents VPP binary API message 'proxy_arp_intfc_details'.
type ProxyArpIntfcDetails struct {
	SwIfIndex uint32
}

func (m *ProxyArpIntfcDetails) Reset()                        { *m = ProxyArpIntfcDetails{} }
func (*ProxyArpIntfcDetails) GetMessageName() string          { return "proxy_arp_intfc_details" }
func (*ProxyArpIntfcDetails) GetCrcString() string            { return "f6458e5f" }
func (*ProxyArpIntfcDetails) GetMessageType() api.MessageType { return api.ReplyMessage }

// ProxyArpIntfcDump represents VPP binary API message 'proxy_arp_intfc_dump'.
type ProxyArpIntfcDump struct{}

func (m *ProxyArpIntfcDump) Reset()                        { *m = ProxyArpIntfcDump{} }
func (*ProxyArpIntfcDump) GetMessageName() string          { return "proxy_arp_intfc_dump" }
func (*ProxyArpIntfcDump) GetCrcString() string            { return "51077d14" }
func (*ProxyArpIntfcDump) GetMessageType() api.MessageType { return api.RequestMessage }

// ProxyArpIntfcEnableDisable represents VPP binary API message 'proxy_arp_intfc_enable_disable'.
type ProxyArpIntfcEnableDisable struct {
	SwIfIndex InterfaceIndex
	Enable    bool
}

func (m *ProxyArpIntfcEnableDisable) Reset()                        { *m = ProxyArpIntfcEnableDisable{} }
func (*ProxyArpIntfcEnableDisable) GetMessageName() string          { return "proxy_arp_intfc_enable_disable" }
func (*ProxyArpIntfcEnableDisable) GetCrcString() string            { return "ae6cfcfb" }
func (*ProxyArpIntfcEnableDisable) GetMessageType() api.MessageType { return api.RequestMessage }

// ProxyArpIntfcEnableDisableReply represents VPP binary API message 'proxy_arp_intfc_enable_disable_reply'.
type ProxyArpIntfcEnableDisableReply struct {
	Retval int32
}

func (m *ProxyArpIntfcEnableDisableReply) Reset() { *m = ProxyArpIntfcEnableDisableReply{} }
func (*ProxyArpIntfcEnableDisableReply) GetMessageName() string {
	return "proxy_arp_intfc_enable_disable_reply"
}
func (*ProxyArpIntfcEnableDisableReply) GetCrcString() string            { return "e8d4e804" }
func (*ProxyArpIntfcEnableDisableReply) GetMessageType() api.MessageType { return api.ReplyMessage }

func init() {
	api.RegisterMessage((*ProxyArpAddDel)(nil), "arp.ProxyArpAddDel")
	api.RegisterMessage((*ProxyArpAddDelReply)(nil), "arp.ProxyArpAddDelReply")
	api.RegisterMessage((*ProxyArpDetails)(nil), "arp.ProxyArpDetails")
	api.RegisterMessage((*ProxyArpDump)(nil), "arp.ProxyArpDump")
	api.RegisterMessage((*ProxyArpIntfcDetails)(nil), "arp.ProxyArpIntfcDetails")
	api.RegisterMessage((*ProxyArpIntfcDump)(nil), "arp.ProxyArpIntfcDump")
	api.RegisterMessage((*ProxyArpIntfcEnableDisable)(nil), "arp.ProxyArpIntfcEnableDisable")
	api.RegisterMessage((*ProxyArpIntfcEnableDisableReply)(nil), "arp.ProxyArpIntfcEnableDisableReply")
}

// Messages returns list of all messages in this module.
func AllMessages() []api.Message {
	return []api.Message{
		(*ProxyArpAddDel)(nil),
		(*ProxyArpAddDelReply)(nil),
		(*ProxyArpDetails)(nil),
		(*ProxyArpDump)(nil),
		(*ProxyArpIntfcDetails)(nil),
		(*ProxyArpIntfcDump)(nil),
		(*ProxyArpIntfcEnableDisable)(nil),
		(*ProxyArpIntfcEnableDisableReply)(nil),
	}
}

// RPCService represents RPC service API for arp module.
type RPCService interface {
	DumpProxyArp(ctx context.Context, in *ProxyArpDump) (RPCService_DumpProxyArpClient, error)
	DumpProxyArpIntfc(ctx context.Context, in *ProxyArpIntfcDump) (RPCService_DumpProxyArpIntfcClient, error)
	ProxyArpAddDel(ctx context.Context, in *ProxyArpAddDel) (*ProxyArpAddDelReply, error)
	ProxyArpIntfcEnableDisable(ctx context.Context, in *ProxyArpIntfcEnableDisable) (*ProxyArpIntfcEnableDisableReply, error)
}

type serviceClient struct {
	ch api.Channel
}

func NewServiceClient(ch api.Channel) RPCService {
	return &serviceClient{ch}
}

func (c *serviceClient) DumpProxyArp(ctx context.Context, in *ProxyArpDump) (RPCService_DumpProxyArpClient, error) {
	stream := c.ch.SendMultiRequest(in)
	x := &serviceClient_DumpProxyArpClient{stream}
	return x, nil
}

type RPCService_DumpProxyArpClient interface {
	Recv() (*ProxyArpDetails, error)
}

type serviceClient_DumpProxyArpClient struct {
	api.MultiRequestCtx
}

func (c *serviceClient_DumpProxyArpClient) Recv() (*ProxyArpDetails, error) {
	m := new(ProxyArpDetails)
	stop, err := c.MultiRequestCtx.ReceiveReply(m)
	if err != nil {
		return nil, err
	}
	if stop {
		return nil, io.EOF
	}
	return m, nil
}

func (c *serviceClient) DumpProxyArpIntfc(ctx context.Context, in *ProxyArpIntfcDump) (RPCService_DumpProxyArpIntfcClient, error) {
	stream := c.ch.SendMultiRequest(in)
	x := &serviceClient_DumpProxyArpIntfcClient{stream}
	return x, nil
}

type RPCService_DumpProxyArpIntfcClient interface {
	Recv() (*ProxyArpIntfcDetails, error)
}

type serviceClient_DumpProxyArpIntfcClient struct {
	api.MultiRequestCtx
}

func (c *serviceClient_DumpProxyArpIntfcClient) Recv() (*ProxyArpIntfcDetails, error) {
	m := new(ProxyArpIntfcDetails)
	stop, err := c.MultiRequestCtx.ReceiveReply(m)
	if err != nil {
		return nil, err
	}
	if stop {
		return nil, io.EOF
	}
	return m, nil
}

func (c *serviceClient) ProxyArpAddDel(ctx context.Context, in *ProxyArpAddDel) (*ProxyArpAddDelReply, error) {
	out := new(ProxyArpAddDelReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ProxyArpIntfcEnableDisable(ctx context.Context, in *ProxyArpIntfcEnableDisable) (*ProxyArpIntfcEnableDisableReply, error) {
	out := new(ProxyArpIntfcEnableDisableReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// This is a compile-time assertion to ensure that this generated file
// is compatible with the GoVPP api package it is being compiled against.
// A compilation error at this line likely means your copy of the
// GoVPP api package needs to be updated.
const _ = api.GoVppAPIPackageIsVersion1 // please upgrade the GoVPP api package

// Reference imports to suppress errors if they are not otherwise used.
var _ = api.RegisterMessage
var _ = bytes.NewBuffer
var _ = context.Background
var _ = io.Copy
var _ = strconv.Itoa
var _ = struc.Pack
