// Code generated by GoVPP's binapi-generator. DO NOT EDIT.
// source: /usr/share/vpp/api/core/ip.api.json

/*
Package ip is a generated VPP binary API for 'ip' module.

It consists of:
	 15 enums
	  7 aliases
	 14 types
	  1 union
	 60 messages
	 30 services
*/
package ip

import (
	bytes "bytes"
	context "context"
	api "git.fd.io/govpp.git/api"
	struc "github.com/lunixbochs/struc"
	io "io"
	strconv "strconv"

	ethernet_types "go.ligato.io/vpp-agent/v3/plugins/vpp/binapi/vpp2001/ethernet_types"
	fib_types "go.ligato.io/vpp-agent/v3/plugins/vpp/binapi/vpp2001/fib_types"
	interface_types "go.ligato.io/vpp-agent/v3/plugins/vpp/binapi/vpp2001/interface_types"
	ip_types "go.ligato.io/vpp-agent/v3/plugins/vpp/binapi/vpp2001/ip_types"
)

const (
	// ModuleName is the name of this module.
	ModuleName = "ip"
	// VersionCrc is the CRC of this module.
	VersionCrc = 0xfc3fea46
)

type AddressFamily = ip_types.AddressFamily

type FibPathFlags = fib_types.FibPathFlags

type FibPathNhProto = fib_types.FibPathNhProto

type FibPathType = fib_types.FibPathType

type IfStatusFlags = interface_types.IfStatusFlags

type IfType = interface_types.IfType

type IPDscp = ip_types.IPDscp

type IPEcn = ip_types.IPEcn

type IPProto = ip_types.IPProto

// IPReassType represents VPP binary API enum 'ip_reass_type'.
type IPReassType uint32

const (
	IP_REASS_TYPE_FULL            IPReassType = 0
	IP_REASS_TYPE_SHALLOW_VIRTUAL IPReassType = 1
)

var IPReassType_name = map[uint32]string{
	0: "IP_REASS_TYPE_FULL",
	1: "IP_REASS_TYPE_SHALLOW_VIRTUAL",
}

var IPReassType_value = map[string]uint32{
	"IP_REASS_TYPE_FULL":            0,
	"IP_REASS_TYPE_SHALLOW_VIRTUAL": 1,
}

func (x IPReassType) String() string {
	s, ok := IPReassType_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

type LinkDuplex = interface_types.LinkDuplex

// MfibItfFlags represents VPP binary API enum 'mfib_itf_flags'.
type MfibItfFlags uint32

const (
	MFIB_API_ITF_FLAG_NONE           MfibItfFlags = 0
	MFIB_API_ITF_FLAG_NEGATE_SIGNAL  MfibItfFlags = 1
	MFIB_API_ITF_FLAG_ACCEPT         MfibItfFlags = 2
	MFIB_API_ITF_FLAG_FORWARD        MfibItfFlags = 4
	MFIB_API_ITF_FLAG_SIGNAL_PRESENT MfibItfFlags = 8
	MFIB_API_ITF_FLAG_DONT_PRESERVE  MfibItfFlags = 16
)

var MfibItfFlags_name = map[uint32]string{
	0:  "MFIB_API_ITF_FLAG_NONE",
	1:  "MFIB_API_ITF_FLAG_NEGATE_SIGNAL",
	2:  "MFIB_API_ITF_FLAG_ACCEPT",
	4:  "MFIB_API_ITF_FLAG_FORWARD",
	8:  "MFIB_API_ITF_FLAG_SIGNAL_PRESENT",
	16: "MFIB_API_ITF_FLAG_DONT_PRESERVE",
}

var MfibItfFlags_value = map[string]uint32{
	"MFIB_API_ITF_FLAG_NONE":           0,
	"MFIB_API_ITF_FLAG_NEGATE_SIGNAL":  1,
	"MFIB_API_ITF_FLAG_ACCEPT":         2,
	"MFIB_API_ITF_FLAG_FORWARD":        4,
	"MFIB_API_ITF_FLAG_SIGNAL_PRESENT": 8,
	"MFIB_API_ITF_FLAG_DONT_PRESERVE":  16,
}

func (x MfibItfFlags) String() string {
	s, ok := MfibItfFlags_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

type MtuProto = interface_types.MtuProto

type RxMode = interface_types.RxMode

type SubIfFlags = interface_types.SubIfFlags

type AddressWithPrefix = ip_types.AddressWithPrefix

type InterfaceIndex = interface_types.InterfaceIndex

type IP4Address = ip_types.IP4Address

type IP4AddressWithPrefix = ip_types.IP4AddressWithPrefix

type IP6Address = ip_types.IP6Address

type IP6AddressWithPrefix = ip_types.IP6AddressWithPrefix

type MacAddress = ethernet_types.MacAddress

type Address = ip_types.Address

type FibMplsLabel = fib_types.FibMplsLabel

type FibPath = fib_types.FibPath

type FibPathNh = fib_types.FibPathNh

type IP4Prefix = ip_types.IP4Prefix

type IP6Prefix = ip_types.IP6Prefix

// IPMroute represents VPP binary API type 'ip_mroute'.
type IPMroute struct {
	TableID    uint32
	EntryFlags uint32
	RpfID      uint32
	Prefix     Mprefix
	NPaths     uint8 `struc:"sizeof=Paths"`
	Paths      []MfibPath
}

func (*IPMroute) GetTypeName() string { return "ip_mroute" }

// IPRoute represents VPP binary API type 'ip_route'.
type IPRoute struct {
	TableID    uint32
	StatsIndex uint32
	Prefix     Prefix
	NPaths     uint8 `struc:"sizeof=Paths"`
	Paths      []FibPath
}

func (*IPRoute) GetTypeName() string { return "ip_route" }

// IPTable represents VPP binary API type 'ip_table'.
type IPTable struct {
	TableID uint32
	IsIP6   bool
	Name    string `struc:"[64]byte"`
}

func (*IPTable) GetTypeName() string { return "ip_table" }

// MfibPath represents VPP binary API type 'mfib_path'.
type MfibPath struct {
	ItfFlags MfibItfFlags
	Path     FibPath
}

func (*MfibPath) GetTypeName() string { return "mfib_path" }

type Mprefix = ip_types.Mprefix

type Prefix = ip_types.Prefix

type PrefixMatcher = ip_types.PrefixMatcher

// PuntRedirect represents VPP binary API type 'punt_redirect'.
type PuntRedirect struct {
	RxSwIfIndex InterfaceIndex
	TxSwIfIndex InterfaceIndex
	Nh          Address
}

func (*PuntRedirect) GetTypeName() string { return "punt_redirect" }

type AddressUnion = ip_types.AddressUnion

// IoamDisable represents VPP binary API message 'ioam_disable'.
type IoamDisable struct {
	ID uint16
}

func (m *IoamDisable) Reset()                        { *m = IoamDisable{} }
func (*IoamDisable) GetMessageName() string          { return "ioam_disable" }
func (*IoamDisable) GetCrcString() string            { return "6b16a45e" }
func (*IoamDisable) GetMessageType() api.MessageType { return api.RequestMessage }

// IoamDisableReply represents VPP binary API message 'ioam_disable_reply'.
type IoamDisableReply struct {
	Retval int32
}

func (m *IoamDisableReply) Reset()                        { *m = IoamDisableReply{} }
func (*IoamDisableReply) GetMessageName() string          { return "ioam_disable_reply" }
func (*IoamDisableReply) GetCrcString() string            { return "e8d4e804" }
func (*IoamDisableReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// IoamEnable represents VPP binary API message 'ioam_enable'.
type IoamEnable struct {
	ID          uint16
	Seqno       bool
	Analyse     bool
	PotEnable   bool
	TraceEnable bool
	NodeID      uint32
}

func (m *IoamEnable) Reset()                        { *m = IoamEnable{} }
func (*IoamEnable) GetMessageName() string          { return "ioam_enable" }
func (*IoamEnable) GetCrcString() string            { return "51ccd868" }
func (*IoamEnable) GetMessageType() api.MessageType { return api.RequestMessage }

// IoamEnableReply represents VPP binary API message 'ioam_enable_reply'.
type IoamEnableReply struct {
	Retval int32
}

func (m *IoamEnableReply) Reset()                        { *m = IoamEnableReply{} }
func (*IoamEnableReply) GetMessageName() string          { return "ioam_enable_reply" }
func (*IoamEnableReply) GetCrcString() string            { return "e8d4e804" }
func (*IoamEnableReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// IPAddressDetails represents VPP binary API message 'ip_address_details'.
type IPAddressDetails struct {
	SwIfIndex InterfaceIndex
	Prefix    AddressWithPrefix
}

func (m *IPAddressDetails) Reset()                        { *m = IPAddressDetails{} }
func (*IPAddressDetails) GetMessageName() string          { return "ip_address_details" }
func (*IPAddressDetails) GetCrcString() string            { return "b1199745" }
func (*IPAddressDetails) GetMessageType() api.MessageType { return api.ReplyMessage }

// IPAddressDump represents VPP binary API message 'ip_address_dump'.
type IPAddressDump struct {
	SwIfIndex InterfaceIndex
	IsIPv6    bool
}

func (m *IPAddressDump) Reset()                        { *m = IPAddressDump{} }
func (*IPAddressDump) GetMessageName() string          { return "ip_address_dump" }
func (*IPAddressDump) GetCrcString() string            { return "2d033de4" }
func (*IPAddressDump) GetMessageType() api.MessageType { return api.RequestMessage }

// IPContainerProxyAddDel represents VPP binary API message 'ip_container_proxy_add_del'.
type IPContainerProxyAddDel struct {
	Pfx       Prefix
	SwIfIndex InterfaceIndex
	IsAdd     bool
}

func (m *IPContainerProxyAddDel) Reset()                        { *m = IPContainerProxyAddDel{} }
func (*IPContainerProxyAddDel) GetMessageName() string          { return "ip_container_proxy_add_del" }
func (*IPContainerProxyAddDel) GetCrcString() string            { return "91189f40" }
func (*IPContainerProxyAddDel) GetMessageType() api.MessageType { return api.RequestMessage }

// IPContainerProxyAddDelReply represents VPP binary API message 'ip_container_proxy_add_del_reply'.
type IPContainerProxyAddDelReply struct {
	Retval int32
}

func (m *IPContainerProxyAddDelReply) Reset()                        { *m = IPContainerProxyAddDelReply{} }
func (*IPContainerProxyAddDelReply) GetMessageName() string          { return "ip_container_proxy_add_del_reply" }
func (*IPContainerProxyAddDelReply) GetCrcString() string            { return "e8d4e804" }
func (*IPContainerProxyAddDelReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// IPContainerProxyDetails represents VPP binary API message 'ip_container_proxy_details'.
type IPContainerProxyDetails struct {
	SwIfIndex InterfaceIndex
	Prefix    Prefix
}

func (m *IPContainerProxyDetails) Reset()                        { *m = IPContainerProxyDetails{} }
func (*IPContainerProxyDetails) GetMessageName() string          { return "ip_container_proxy_details" }
func (*IPContainerProxyDetails) GetCrcString() string            { return "0ee460e8" }
func (*IPContainerProxyDetails) GetMessageType() api.MessageType { return api.ReplyMessage }

// IPContainerProxyDump represents VPP binary API message 'ip_container_proxy_dump'.
type IPContainerProxyDump struct{}

func (m *IPContainerProxyDump) Reset()                        { *m = IPContainerProxyDump{} }
func (*IPContainerProxyDump) GetMessageName() string          { return "ip_container_proxy_dump" }
func (*IPContainerProxyDump) GetCrcString() string            { return "51077d14" }
func (*IPContainerProxyDump) GetMessageType() api.MessageType { return api.RequestMessage }

// IPDetails represents VPP binary API message 'ip_details'.
type IPDetails struct {
	SwIfIndex InterfaceIndex
	IsIPv6    bool
}

func (m *IPDetails) Reset()                        { *m = IPDetails{} }
func (*IPDetails) GetMessageName() string          { return "ip_details" }
func (*IPDetails) GetCrcString() string            { return "eb152d07" }
func (*IPDetails) GetMessageType() api.MessageType { return api.ReplyMessage }

// IPDump represents VPP binary API message 'ip_dump'.
type IPDump struct {
	IsIPv6 bool
}

func (m *IPDump) Reset()                        { *m = IPDump{} }
func (*IPDump) GetMessageName() string          { return "ip_dump" }
func (*IPDump) GetCrcString() string            { return "98d231ca" }
func (*IPDump) GetMessageType() api.MessageType { return api.RequestMessage }

// IPMrouteAddDel represents VPP binary API message 'ip_mroute_add_del'.
type IPMrouteAddDel struct {
	IsAdd       bool
	IsMultipath bool
	Route       IPMroute
}

func (m *IPMrouteAddDel) Reset()                        { *m = IPMrouteAddDel{} }
func (*IPMrouteAddDel) GetMessageName() string          { return "ip_mroute_add_del" }
func (*IPMrouteAddDel) GetCrcString() string            { return "f6627d17" }
func (*IPMrouteAddDel) GetMessageType() api.MessageType { return api.RequestMessage }

// IPMrouteAddDelReply represents VPP binary API message 'ip_mroute_add_del_reply'.
type IPMrouteAddDelReply struct {
	Retval     int32
	StatsIndex uint32
}

func (m *IPMrouteAddDelReply) Reset()                        { *m = IPMrouteAddDelReply{} }
func (*IPMrouteAddDelReply) GetMessageName() string          { return "ip_mroute_add_del_reply" }
func (*IPMrouteAddDelReply) GetCrcString() string            { return "1992deab" }
func (*IPMrouteAddDelReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// IPMrouteDetails represents VPP binary API message 'ip_mroute_details'.
type IPMrouteDetails struct {
	Route IPMroute
}

func (m *IPMrouteDetails) Reset()                        { *m = IPMrouteDetails{} }
func (*IPMrouteDetails) GetMessageName() string          { return "ip_mroute_details" }
func (*IPMrouteDetails) GetCrcString() string            { return "c1cb4b44" }
func (*IPMrouteDetails) GetMessageType() api.MessageType { return api.ReplyMessage }

// IPMrouteDump represents VPP binary API message 'ip_mroute_dump'.
type IPMrouteDump struct {
	Table IPTable
}

func (m *IPMrouteDump) Reset()                        { *m = IPMrouteDump{} }
func (*IPMrouteDump) GetMessageName() string          { return "ip_mroute_dump" }
func (*IPMrouteDump) GetCrcString() string            { return "b9d2e09e" }
func (*IPMrouteDump) GetMessageType() api.MessageType { return api.RequestMessage }

// IPMtableDetails represents VPP binary API message 'ip_mtable_details'.
type IPMtableDetails struct {
	Table IPTable
}

func (m *IPMtableDetails) Reset()                        { *m = IPMtableDetails{} }
func (*IPMtableDetails) GetMessageName() string          { return "ip_mtable_details" }
func (*IPMtableDetails) GetCrcString() string            { return "b9d2e09e" }
func (*IPMtableDetails) GetMessageType() api.MessageType { return api.RequestMessage }

// IPMtableDump represents VPP binary API message 'ip_mtable_dump'.
type IPMtableDump struct{}

func (m *IPMtableDump) Reset()                        { *m = IPMtableDump{} }
func (*IPMtableDump) GetMessageName() string          { return "ip_mtable_dump" }
func (*IPMtableDump) GetCrcString() string            { return "51077d14" }
func (*IPMtableDump) GetMessageType() api.MessageType { return api.RequestMessage }

// IPPuntPolice represents VPP binary API message 'ip_punt_police'.
type IPPuntPolice struct {
	PolicerIndex uint32
	IsAdd        bool
	IsIP6        bool
}

func (m *IPPuntPolice) Reset()                        { *m = IPPuntPolice{} }
func (*IPPuntPolice) GetMessageName() string          { return "ip_punt_police" }
func (*IPPuntPolice) GetCrcString() string            { return "db867cea" }
func (*IPPuntPolice) GetMessageType() api.MessageType { return api.RequestMessage }

// IPPuntPoliceReply represents VPP binary API message 'ip_punt_police_reply'.
type IPPuntPoliceReply struct {
	Retval int32
}

func (m *IPPuntPoliceReply) Reset()                        { *m = IPPuntPoliceReply{} }
func (*IPPuntPoliceReply) GetMessageName() string          { return "ip_punt_police_reply" }
func (*IPPuntPoliceReply) GetCrcString() string            { return "e8d4e804" }
func (*IPPuntPoliceReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// IPPuntRedirect represents VPP binary API message 'ip_punt_redirect'.
type IPPuntRedirect struct {
	Punt  PuntRedirect
	IsAdd bool
}

func (m *IPPuntRedirect) Reset()                        { *m = IPPuntRedirect{} }
func (*IPPuntRedirect) GetMessageName() string          { return "ip_punt_redirect" }
func (*IPPuntRedirect) GetCrcString() string            { return "a9a5592c" }
func (*IPPuntRedirect) GetMessageType() api.MessageType { return api.RequestMessage }

// IPPuntRedirectDetails represents VPP binary API message 'ip_punt_redirect_details'.
type IPPuntRedirectDetails struct {
	Punt PuntRedirect
}

func (m *IPPuntRedirectDetails) Reset()                        { *m = IPPuntRedirectDetails{} }
func (*IPPuntRedirectDetails) GetMessageName() string          { return "ip_punt_redirect_details" }
func (*IPPuntRedirectDetails) GetCrcString() string            { return "3924f5d3" }
func (*IPPuntRedirectDetails) GetMessageType() api.MessageType { return api.ReplyMessage }

// IPPuntRedirectDump represents VPP binary API message 'ip_punt_redirect_dump'.
type IPPuntRedirectDump struct {
	SwIfIndex InterfaceIndex
	IsIPv6    bool
}

func (m *IPPuntRedirectDump) Reset()                        { *m = IPPuntRedirectDump{} }
func (*IPPuntRedirectDump) GetMessageName() string          { return "ip_punt_redirect_dump" }
func (*IPPuntRedirectDump) GetCrcString() string            { return "2d033de4" }
func (*IPPuntRedirectDump) GetMessageType() api.MessageType { return api.RequestMessage }

// IPPuntRedirectReply represents VPP binary API message 'ip_punt_redirect_reply'.
type IPPuntRedirectReply struct {
	Retval int32
}

func (m *IPPuntRedirectReply) Reset()                        { *m = IPPuntRedirectReply{} }
func (*IPPuntRedirectReply) GetMessageName() string          { return "ip_punt_redirect_reply" }
func (*IPPuntRedirectReply) GetCrcString() string            { return "e8d4e804" }
func (*IPPuntRedirectReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// IPReassemblyEnableDisable represents VPP binary API message 'ip_reassembly_enable_disable'.
type IPReassemblyEnableDisable struct {
	SwIfIndex InterfaceIndex
	EnableIP4 bool
	EnableIP6 bool
	Type      IPReassType
}

func (m *IPReassemblyEnableDisable) Reset()                        { *m = IPReassemblyEnableDisable{} }
func (*IPReassemblyEnableDisable) GetMessageName() string          { return "ip_reassembly_enable_disable" }
func (*IPReassemblyEnableDisable) GetCrcString() string            { return "885c85a6" }
func (*IPReassemblyEnableDisable) GetMessageType() api.MessageType { return api.RequestMessage }

// IPReassemblyEnableDisableReply represents VPP binary API message 'ip_reassembly_enable_disable_reply'.
type IPReassemblyEnableDisableReply struct {
	Retval int32
}

func (m *IPReassemblyEnableDisableReply) Reset() { *m = IPReassemblyEnableDisableReply{} }
func (*IPReassemblyEnableDisableReply) GetMessageName() string {
	return "ip_reassembly_enable_disable_reply"
}
func (*IPReassemblyEnableDisableReply) GetCrcString() string            { return "e8d4e804" }
func (*IPReassemblyEnableDisableReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// IPReassemblyGet represents VPP binary API message 'ip_reassembly_get'.
type IPReassemblyGet struct {
	IsIP6 bool
	Type  IPReassType
}

func (m *IPReassemblyGet) Reset()                        { *m = IPReassemblyGet{} }
func (*IPReassemblyGet) GetMessageName() string          { return "ip_reassembly_get" }
func (*IPReassemblyGet) GetCrcString() string            { return "ea13ff63" }
func (*IPReassemblyGet) GetMessageType() api.MessageType { return api.RequestMessage }

// IPReassemblyGetReply represents VPP binary API message 'ip_reassembly_get_reply'.
type IPReassemblyGetReply struct {
	Retval               int32
	TimeoutMs            uint32
	MaxReassemblies      uint32
	MaxReassemblyLength  uint32
	ExpireWalkIntervalMs uint32
	IsIP6                bool
}

func (m *IPReassemblyGetReply) Reset()                        { *m = IPReassemblyGetReply{} }
func (*IPReassemblyGetReply) GetMessageName() string          { return "ip_reassembly_get_reply" }
func (*IPReassemblyGetReply) GetCrcString() string            { return "d5eb8d34" }
func (*IPReassemblyGetReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// IPReassemblySet represents VPP binary API message 'ip_reassembly_set'.
type IPReassemblySet struct {
	TimeoutMs            uint32
	MaxReassemblies      uint32
	MaxReassemblyLength  uint32
	ExpireWalkIntervalMs uint32
	IsIP6                bool
	Type                 IPReassType
}

func (m *IPReassemblySet) Reset()                        { *m = IPReassemblySet{} }
func (*IPReassemblySet) GetMessageName() string          { return "ip_reassembly_set" }
func (*IPReassemblySet) GetCrcString() string            { return "16467d25" }
func (*IPReassemblySet) GetMessageType() api.MessageType { return api.RequestMessage }

// IPReassemblySetReply represents VPP binary API message 'ip_reassembly_set_reply'.
type IPReassemblySetReply struct {
	Retval int32
}

func (m *IPReassemblySetReply) Reset()                        { *m = IPReassemblySetReply{} }
func (*IPReassemblySetReply) GetMessageName() string          { return "ip_reassembly_set_reply" }
func (*IPReassemblySetReply) GetCrcString() string            { return "e8d4e804" }
func (*IPReassemblySetReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// IPRouteAddDel represents VPP binary API message 'ip_route_add_del'.
type IPRouteAddDel struct {
	IsAdd       bool
	IsMultipath bool
	Route       IPRoute
}

func (m *IPRouteAddDel) Reset()                        { *m = IPRouteAddDel{} }
func (*IPRouteAddDel) GetMessageName() string          { return "ip_route_add_del" }
func (*IPRouteAddDel) GetCrcString() string            { return "c1ff832d" }
func (*IPRouteAddDel) GetMessageType() api.MessageType { return api.RequestMessage }

// IPRouteAddDelReply represents VPP binary API message 'ip_route_add_del_reply'.
type IPRouteAddDelReply struct {
	Retval     int32
	StatsIndex uint32
}

func (m *IPRouteAddDelReply) Reset()                        { *m = IPRouteAddDelReply{} }
func (*IPRouteAddDelReply) GetMessageName() string          { return "ip_route_add_del_reply" }
func (*IPRouteAddDelReply) GetCrcString() string            { return "1992deab" }
func (*IPRouteAddDelReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// IPRouteDetails represents VPP binary API message 'ip_route_details'.
type IPRouteDetails struct {
	Route IPRoute
}

func (m *IPRouteDetails) Reset()                        { *m = IPRouteDetails{} }
func (*IPRouteDetails) GetMessageName() string          { return "ip_route_details" }
func (*IPRouteDetails) GetCrcString() string            { return "d1ffaae1" }
func (*IPRouteDetails) GetMessageType() api.MessageType { return api.ReplyMessage }

// IPRouteDump represents VPP binary API message 'ip_route_dump'.
type IPRouteDump struct {
	Table IPTable
}

func (m *IPRouteDump) Reset()                        { *m = IPRouteDump{} }
func (*IPRouteDump) GetMessageName() string          { return "ip_route_dump" }
func (*IPRouteDump) GetCrcString() string            { return "b9d2e09e" }
func (*IPRouteDump) GetMessageType() api.MessageType { return api.RequestMessage }

// IPSourceAndPortRangeCheckAddDel represents VPP binary API message 'ip_source_and_port_range_check_add_del'.
type IPSourceAndPortRangeCheckAddDel struct {
	IsAdd          bool
	Prefix         Prefix
	NumberOfRanges uint8
	LowPorts       []uint16 `struc:"[32]uint16"`
	HighPorts      []uint16 `struc:"[32]uint16"`
	VrfID          uint32
}

func (m *IPSourceAndPortRangeCheckAddDel) Reset() { *m = IPSourceAndPortRangeCheckAddDel{} }
func (*IPSourceAndPortRangeCheckAddDel) GetMessageName() string {
	return "ip_source_and_port_range_check_add_del"
}
func (*IPSourceAndPortRangeCheckAddDel) GetCrcString() string            { return "8bfc76f2" }
func (*IPSourceAndPortRangeCheckAddDel) GetMessageType() api.MessageType { return api.RequestMessage }

// IPSourceAndPortRangeCheckAddDelReply represents VPP binary API message 'ip_source_and_port_range_check_add_del_reply'.
type IPSourceAndPortRangeCheckAddDelReply struct {
	Retval int32
}

func (m *IPSourceAndPortRangeCheckAddDelReply) Reset() { *m = IPSourceAndPortRangeCheckAddDelReply{} }
func (*IPSourceAndPortRangeCheckAddDelReply) GetMessageName() string {
	return "ip_source_and_port_range_check_add_del_reply"
}
func (*IPSourceAndPortRangeCheckAddDelReply) GetCrcString() string            { return "e8d4e804" }
func (*IPSourceAndPortRangeCheckAddDelReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// IPSourceAndPortRangeCheckInterfaceAddDel represents VPP binary API message 'ip_source_and_port_range_check_interface_add_del'.
type IPSourceAndPortRangeCheckInterfaceAddDel struct {
	IsAdd       bool
	SwIfIndex   InterfaceIndex
	TCPInVrfID  uint32
	TCPOutVrfID uint32
	UDPInVrfID  uint32
	UDPOutVrfID uint32
}

func (m *IPSourceAndPortRangeCheckInterfaceAddDel) Reset() {
	*m = IPSourceAndPortRangeCheckInterfaceAddDel{}
}
func (*IPSourceAndPortRangeCheckInterfaceAddDel) GetMessageName() string {
	return "ip_source_and_port_range_check_interface_add_del"
}
func (*IPSourceAndPortRangeCheckInterfaceAddDel) GetCrcString() string { return "e1ba8987" }
func (*IPSourceAndPortRangeCheckInterfaceAddDel) GetMessageType() api.MessageType {
	return api.RequestMessage
}

// IPSourceAndPortRangeCheckInterfaceAddDelReply represents VPP binary API message 'ip_source_and_port_range_check_interface_add_del_reply'.
type IPSourceAndPortRangeCheckInterfaceAddDelReply struct {
	Retval int32
}

func (m *IPSourceAndPortRangeCheckInterfaceAddDelReply) Reset() {
	*m = IPSourceAndPortRangeCheckInterfaceAddDelReply{}
}
func (*IPSourceAndPortRangeCheckInterfaceAddDelReply) GetMessageName() string {
	return "ip_source_and_port_range_check_interface_add_del_reply"
}
func (*IPSourceAndPortRangeCheckInterfaceAddDelReply) GetCrcString() string { return "e8d4e804" }
func (*IPSourceAndPortRangeCheckInterfaceAddDelReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

// IPSourceCheckInterfaceAddDel represents VPP binary API message 'ip_source_check_interface_add_del'.
type IPSourceCheckInterfaceAddDel struct {
	IsAdd     bool
	Loose     bool
	SwIfIndex InterfaceIndex
}

func (m *IPSourceCheckInterfaceAddDel) Reset() { *m = IPSourceCheckInterfaceAddDel{} }
func (*IPSourceCheckInterfaceAddDel) GetMessageName() string {
	return "ip_source_check_interface_add_del"
}
func (*IPSourceCheckInterfaceAddDel) GetCrcString() string            { return "6612356b" }
func (*IPSourceCheckInterfaceAddDel) GetMessageType() api.MessageType { return api.RequestMessage }

// IPSourceCheckInterfaceAddDelReply represents VPP binary API message 'ip_source_check_interface_add_del_reply'.
type IPSourceCheckInterfaceAddDelReply struct {
	Retval int32
}

func (m *IPSourceCheckInterfaceAddDelReply) Reset() { *m = IPSourceCheckInterfaceAddDelReply{} }
func (*IPSourceCheckInterfaceAddDelReply) GetMessageName() string {
	return "ip_source_check_interface_add_del_reply"
}
func (*IPSourceCheckInterfaceAddDelReply) GetCrcString() string            { return "e8d4e804" }
func (*IPSourceCheckInterfaceAddDelReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// IPTableAddDel represents VPP binary API message 'ip_table_add_del'.
type IPTableAddDel struct {
	IsAdd bool
	Table IPTable
}

func (m *IPTableAddDel) Reset()                        { *m = IPTableAddDel{} }
func (*IPTableAddDel) GetMessageName() string          { return "ip_table_add_del" }
func (*IPTableAddDel) GetCrcString() string            { return "0ffdaec0" }
func (*IPTableAddDel) GetMessageType() api.MessageType { return api.RequestMessage }

// IPTableAddDelReply represents VPP binary API message 'ip_table_add_del_reply'.
type IPTableAddDelReply struct {
	Retval int32
}

func (m *IPTableAddDelReply) Reset()                        { *m = IPTableAddDelReply{} }
func (*IPTableAddDelReply) GetMessageName() string          { return "ip_table_add_del_reply" }
func (*IPTableAddDelReply) GetCrcString() string            { return "e8d4e804" }
func (*IPTableAddDelReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// IPTableDetails represents VPP binary API message 'ip_table_details'.
type IPTableDetails struct {
	Table IPTable
}

func (m *IPTableDetails) Reset()                        { *m = IPTableDetails{} }
func (*IPTableDetails) GetMessageName() string          { return "ip_table_details" }
func (*IPTableDetails) GetCrcString() string            { return "c79fca0f" }
func (*IPTableDetails) GetMessageType() api.MessageType { return api.ReplyMessage }

// IPTableDump represents VPP binary API message 'ip_table_dump'.
type IPTableDump struct{}

func (m *IPTableDump) Reset()                        { *m = IPTableDump{} }
func (*IPTableDump) GetMessageName() string          { return "ip_table_dump" }
func (*IPTableDump) GetCrcString() string            { return "51077d14" }
func (*IPTableDump) GetMessageType() api.MessageType { return api.RequestMessage }

// IPTableFlush represents VPP binary API message 'ip_table_flush'.
type IPTableFlush struct {
	Table IPTable
}

func (m *IPTableFlush) Reset()                        { *m = IPTableFlush{} }
func (*IPTableFlush) GetMessageName() string          { return "ip_table_flush" }
func (*IPTableFlush) GetCrcString() string            { return "b9d2e09e" }
func (*IPTableFlush) GetMessageType() api.MessageType { return api.RequestMessage }

// IPTableFlushReply represents VPP binary API message 'ip_table_flush_reply'.
type IPTableFlushReply struct {
	Retval int32
}

func (m *IPTableFlushReply) Reset()                        { *m = IPTableFlushReply{} }
func (*IPTableFlushReply) GetMessageName() string          { return "ip_table_flush_reply" }
func (*IPTableFlushReply) GetCrcString() string            { return "e8d4e804" }
func (*IPTableFlushReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// IPTableReplaceBegin represents VPP binary API message 'ip_table_replace_begin'.
type IPTableReplaceBegin struct {
	Table IPTable
}

func (m *IPTableReplaceBegin) Reset()                        { *m = IPTableReplaceBegin{} }
func (*IPTableReplaceBegin) GetMessageName() string          { return "ip_table_replace_begin" }
func (*IPTableReplaceBegin) GetCrcString() string            { return "b9d2e09e" }
func (*IPTableReplaceBegin) GetMessageType() api.MessageType { return api.RequestMessage }

// IPTableReplaceBeginReply represents VPP binary API message 'ip_table_replace_begin_reply'.
type IPTableReplaceBeginReply struct {
	Retval int32
}

func (m *IPTableReplaceBeginReply) Reset()                        { *m = IPTableReplaceBeginReply{} }
func (*IPTableReplaceBeginReply) GetMessageName() string          { return "ip_table_replace_begin_reply" }
func (*IPTableReplaceBeginReply) GetCrcString() string            { return "e8d4e804" }
func (*IPTableReplaceBeginReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// IPTableReplaceEnd represents VPP binary API message 'ip_table_replace_end'.
type IPTableReplaceEnd struct {
	Table IPTable
}

func (m *IPTableReplaceEnd) Reset()                        { *m = IPTableReplaceEnd{} }
func (*IPTableReplaceEnd) GetMessageName() string          { return "ip_table_replace_end" }
func (*IPTableReplaceEnd) GetCrcString() string            { return "b9d2e09e" }
func (*IPTableReplaceEnd) GetMessageType() api.MessageType { return api.RequestMessage }

// IPTableReplaceEndReply represents VPP binary API message 'ip_table_replace_end_reply'.
type IPTableReplaceEndReply struct {
	Retval int32
}

func (m *IPTableReplaceEndReply) Reset()                        { *m = IPTableReplaceEndReply{} }
func (*IPTableReplaceEndReply) GetMessageName() string          { return "ip_table_replace_end_reply" }
func (*IPTableReplaceEndReply) GetCrcString() string            { return "e8d4e804" }
func (*IPTableReplaceEndReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// IPUnnumberedDetails represents VPP binary API message 'ip_unnumbered_details'.
type IPUnnumberedDetails struct {
	SwIfIndex   InterfaceIndex
	IPSwIfIndex InterfaceIndex
}

func (m *IPUnnumberedDetails) Reset()                        { *m = IPUnnumberedDetails{} }
func (*IPUnnumberedDetails) GetMessageName() string          { return "ip_unnumbered_details" }
func (*IPUnnumberedDetails) GetCrcString() string            { return "aa12a483" }
func (*IPUnnumberedDetails) GetMessageType() api.MessageType { return api.ReplyMessage }

// IPUnnumberedDump represents VPP binary API message 'ip_unnumbered_dump'.
type IPUnnumberedDump struct {
	SwIfIndex InterfaceIndex
}

func (m *IPUnnumberedDump) Reset()                        { *m = IPUnnumberedDump{} }
func (*IPUnnumberedDump) GetMessageName() string          { return "ip_unnumbered_dump" }
func (*IPUnnumberedDump) GetCrcString() string            { return "f9e6675e" }
func (*IPUnnumberedDump) GetMessageType() api.MessageType { return api.RequestMessage }

// MfibSignalDetails represents VPP binary API message 'mfib_signal_details'.
type MfibSignalDetails struct {
	SwIfIndex    InterfaceIndex
	TableID      uint32
	Prefix       Mprefix
	IPPacketLen  uint16
	IPPacketData []byte `struc:"[256]byte"`
}

func (m *MfibSignalDetails) Reset()                        { *m = MfibSignalDetails{} }
func (*MfibSignalDetails) GetMessageName() string          { return "mfib_signal_details" }
func (*MfibSignalDetails) GetCrcString() string            { return "64398a9a" }
func (*MfibSignalDetails) GetMessageType() api.MessageType { return api.ReplyMessage }

// MfibSignalDump represents VPP binary API message 'mfib_signal_dump'.
type MfibSignalDump struct{}

func (m *MfibSignalDump) Reset()                        { *m = MfibSignalDump{} }
func (*MfibSignalDump) GetMessageName() string          { return "mfib_signal_dump" }
func (*MfibSignalDump) GetCrcString() string            { return "51077d14" }
func (*MfibSignalDump) GetMessageType() api.MessageType { return api.RequestMessage }

// SetIPFlowHash represents VPP binary API message 'set_ip_flow_hash'.
type SetIPFlowHash struct {
	VrfID     uint32
	IsIPv6    bool
	Src       bool
	Dst       bool
	Sport     bool
	Dport     bool
	Proto     bool
	Reverse   bool
	Symmetric bool
}

func (m *SetIPFlowHash) Reset()                        { *m = SetIPFlowHash{} }
func (*SetIPFlowHash) GetMessageName() string          { return "set_ip_flow_hash" }
func (*SetIPFlowHash) GetCrcString() string            { return "084ee09e" }
func (*SetIPFlowHash) GetMessageType() api.MessageType { return api.RequestMessage }

// SetIPFlowHashReply represents VPP binary API message 'set_ip_flow_hash_reply'.
type SetIPFlowHashReply struct {
	Retval int32
}

func (m *SetIPFlowHashReply) Reset()                        { *m = SetIPFlowHashReply{} }
func (*SetIPFlowHashReply) GetMessageName() string          { return "set_ip_flow_hash_reply" }
func (*SetIPFlowHashReply) GetCrcString() string            { return "e8d4e804" }
func (*SetIPFlowHashReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// SwInterfaceIP6EnableDisable represents VPP binary API message 'sw_interface_ip6_enable_disable'.
type SwInterfaceIP6EnableDisable struct {
	SwIfIndex InterfaceIndex
	Enable    bool
}

func (m *SwInterfaceIP6EnableDisable) Reset()                        { *m = SwInterfaceIP6EnableDisable{} }
func (*SwInterfaceIP6EnableDisable) GetMessageName() string          { return "sw_interface_ip6_enable_disable" }
func (*SwInterfaceIP6EnableDisable) GetCrcString() string            { return "ae6cfcfb" }
func (*SwInterfaceIP6EnableDisable) GetMessageType() api.MessageType { return api.RequestMessage }

// SwInterfaceIP6EnableDisableReply represents VPP binary API message 'sw_interface_ip6_enable_disable_reply'.
type SwInterfaceIP6EnableDisableReply struct {
	Retval int32
}

func (m *SwInterfaceIP6EnableDisableReply) Reset() { *m = SwInterfaceIP6EnableDisableReply{} }
func (*SwInterfaceIP6EnableDisableReply) GetMessageName() string {
	return "sw_interface_ip6_enable_disable_reply"
}
func (*SwInterfaceIP6EnableDisableReply) GetCrcString() string            { return "e8d4e804" }
func (*SwInterfaceIP6EnableDisableReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// SwInterfaceIP6SetLinkLocalAddress represents VPP binary API message 'sw_interface_ip6_set_link_local_address'.
type SwInterfaceIP6SetLinkLocalAddress struct {
	SwIfIndex InterfaceIndex
	IP        IP6Address
}

func (m *SwInterfaceIP6SetLinkLocalAddress) Reset() { *m = SwInterfaceIP6SetLinkLocalAddress{} }
func (*SwInterfaceIP6SetLinkLocalAddress) GetMessageName() string {
	return "sw_interface_ip6_set_link_local_address"
}
func (*SwInterfaceIP6SetLinkLocalAddress) GetCrcString() string            { return "2931d9fa" }
func (*SwInterfaceIP6SetLinkLocalAddress) GetMessageType() api.MessageType { return api.RequestMessage }

// SwInterfaceIP6SetLinkLocalAddressReply represents VPP binary API message 'sw_interface_ip6_set_link_local_address_reply'.
type SwInterfaceIP6SetLinkLocalAddressReply struct {
	Retval int32
}

func (m *SwInterfaceIP6SetLinkLocalAddressReply) Reset() {
	*m = SwInterfaceIP6SetLinkLocalAddressReply{}
}
func (*SwInterfaceIP6SetLinkLocalAddressReply) GetMessageName() string {
	return "sw_interface_ip6_set_link_local_address_reply"
}
func (*SwInterfaceIP6SetLinkLocalAddressReply) GetCrcString() string { return "e8d4e804" }
func (*SwInterfaceIP6SetLinkLocalAddressReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func init() {
	api.RegisterMessage((*IoamDisable)(nil), "ip.IoamDisable")
	api.RegisterMessage((*IoamDisableReply)(nil), "ip.IoamDisableReply")
	api.RegisterMessage((*IoamEnable)(nil), "ip.IoamEnable")
	api.RegisterMessage((*IoamEnableReply)(nil), "ip.IoamEnableReply")
	api.RegisterMessage((*IPAddressDetails)(nil), "ip.IPAddressDetails")
	api.RegisterMessage((*IPAddressDump)(nil), "ip.IPAddressDump")
	api.RegisterMessage((*IPContainerProxyAddDel)(nil), "ip.IPContainerProxyAddDel")
	api.RegisterMessage((*IPContainerProxyAddDelReply)(nil), "ip.IPContainerProxyAddDelReply")
	api.RegisterMessage((*IPContainerProxyDetails)(nil), "ip.IPContainerProxyDetails")
	api.RegisterMessage((*IPContainerProxyDump)(nil), "ip.IPContainerProxyDump")
	api.RegisterMessage((*IPDetails)(nil), "ip.IPDetails")
	api.RegisterMessage((*IPDump)(nil), "ip.IPDump")
	api.RegisterMessage((*IPMrouteAddDel)(nil), "ip.IPMrouteAddDel")
	api.RegisterMessage((*IPMrouteAddDelReply)(nil), "ip.IPMrouteAddDelReply")
	api.RegisterMessage((*IPMrouteDetails)(nil), "ip.IPMrouteDetails")
	api.RegisterMessage((*IPMrouteDump)(nil), "ip.IPMrouteDump")
	api.RegisterMessage((*IPMtableDetails)(nil), "ip.IPMtableDetails")
	api.RegisterMessage((*IPMtableDump)(nil), "ip.IPMtableDump")
	api.RegisterMessage((*IPPuntPolice)(nil), "ip.IPPuntPolice")
	api.RegisterMessage((*IPPuntPoliceReply)(nil), "ip.IPPuntPoliceReply")
	api.RegisterMessage((*IPPuntRedirect)(nil), "ip.IPPuntRedirect")
	api.RegisterMessage((*IPPuntRedirectDetails)(nil), "ip.IPPuntRedirectDetails")
	api.RegisterMessage((*IPPuntRedirectDump)(nil), "ip.IPPuntRedirectDump")
	api.RegisterMessage((*IPPuntRedirectReply)(nil), "ip.IPPuntRedirectReply")
	api.RegisterMessage((*IPReassemblyEnableDisable)(nil), "ip.IPReassemblyEnableDisable")
	api.RegisterMessage((*IPReassemblyEnableDisableReply)(nil), "ip.IPReassemblyEnableDisableReply")
	api.RegisterMessage((*IPReassemblyGet)(nil), "ip.IPReassemblyGet")
	api.RegisterMessage((*IPReassemblyGetReply)(nil), "ip.IPReassemblyGetReply")
	api.RegisterMessage((*IPReassemblySet)(nil), "ip.IPReassemblySet")
	api.RegisterMessage((*IPReassemblySetReply)(nil), "ip.IPReassemblySetReply")
	api.RegisterMessage((*IPRouteAddDel)(nil), "ip.IPRouteAddDel")
	api.RegisterMessage((*IPRouteAddDelReply)(nil), "ip.IPRouteAddDelReply")
	api.RegisterMessage((*IPRouteDetails)(nil), "ip.IPRouteDetails")
	api.RegisterMessage((*IPRouteDump)(nil), "ip.IPRouteDump")
	api.RegisterMessage((*IPSourceAndPortRangeCheckAddDel)(nil), "ip.IPSourceAndPortRangeCheckAddDel")
	api.RegisterMessage((*IPSourceAndPortRangeCheckAddDelReply)(nil), "ip.IPSourceAndPortRangeCheckAddDelReply")
	api.RegisterMessage((*IPSourceAndPortRangeCheckInterfaceAddDel)(nil), "ip.IPSourceAndPortRangeCheckInterfaceAddDel")
	api.RegisterMessage((*IPSourceAndPortRangeCheckInterfaceAddDelReply)(nil), "ip.IPSourceAndPortRangeCheckInterfaceAddDelReply")
	api.RegisterMessage((*IPSourceCheckInterfaceAddDel)(nil), "ip.IPSourceCheckInterfaceAddDel")
	api.RegisterMessage((*IPSourceCheckInterfaceAddDelReply)(nil), "ip.IPSourceCheckInterfaceAddDelReply")
	api.RegisterMessage((*IPTableAddDel)(nil), "ip.IPTableAddDel")
	api.RegisterMessage((*IPTableAddDelReply)(nil), "ip.IPTableAddDelReply")
	api.RegisterMessage((*IPTableDetails)(nil), "ip.IPTableDetails")
	api.RegisterMessage((*IPTableDump)(nil), "ip.IPTableDump")
	api.RegisterMessage((*IPTableFlush)(nil), "ip.IPTableFlush")
	api.RegisterMessage((*IPTableFlushReply)(nil), "ip.IPTableFlushReply")
	api.RegisterMessage((*IPTableReplaceBegin)(nil), "ip.IPTableReplaceBegin")
	api.RegisterMessage((*IPTableReplaceBeginReply)(nil), "ip.IPTableReplaceBeginReply")
	api.RegisterMessage((*IPTableReplaceEnd)(nil), "ip.IPTableReplaceEnd")
	api.RegisterMessage((*IPTableReplaceEndReply)(nil), "ip.IPTableReplaceEndReply")
	api.RegisterMessage((*IPUnnumberedDetails)(nil), "ip.IPUnnumberedDetails")
	api.RegisterMessage((*IPUnnumberedDump)(nil), "ip.IPUnnumberedDump")
	api.RegisterMessage((*MfibSignalDetails)(nil), "ip.MfibSignalDetails")
	api.RegisterMessage((*MfibSignalDump)(nil), "ip.MfibSignalDump")
	api.RegisterMessage((*SetIPFlowHash)(nil), "ip.SetIPFlowHash")
	api.RegisterMessage((*SetIPFlowHashReply)(nil), "ip.SetIPFlowHashReply")
	api.RegisterMessage((*SwInterfaceIP6EnableDisable)(nil), "ip.SwInterfaceIP6EnableDisable")
	api.RegisterMessage((*SwInterfaceIP6EnableDisableReply)(nil), "ip.SwInterfaceIP6EnableDisableReply")
	api.RegisterMessage((*SwInterfaceIP6SetLinkLocalAddress)(nil), "ip.SwInterfaceIP6SetLinkLocalAddress")
	api.RegisterMessage((*SwInterfaceIP6SetLinkLocalAddressReply)(nil), "ip.SwInterfaceIP6SetLinkLocalAddressReply")
}

// Messages returns list of all messages in this module.
func AllMessages() []api.Message {
	return []api.Message{
		(*IoamDisable)(nil),
		(*IoamDisableReply)(nil),
		(*IoamEnable)(nil),
		(*IoamEnableReply)(nil),
		(*IPAddressDetails)(nil),
		(*IPAddressDump)(nil),
		(*IPContainerProxyAddDel)(nil),
		(*IPContainerProxyAddDelReply)(nil),
		(*IPContainerProxyDetails)(nil),
		(*IPContainerProxyDump)(nil),
		(*IPDetails)(nil),
		(*IPDump)(nil),
		(*IPMrouteAddDel)(nil),
		(*IPMrouteAddDelReply)(nil),
		(*IPMrouteDetails)(nil),
		(*IPMrouteDump)(nil),
		(*IPMtableDetails)(nil),
		(*IPMtableDump)(nil),
		(*IPPuntPolice)(nil),
		(*IPPuntPoliceReply)(nil),
		(*IPPuntRedirect)(nil),
		(*IPPuntRedirectDetails)(nil),
		(*IPPuntRedirectDump)(nil),
		(*IPPuntRedirectReply)(nil),
		(*IPReassemblyEnableDisable)(nil),
		(*IPReassemblyEnableDisableReply)(nil),
		(*IPReassemblyGet)(nil),
		(*IPReassemblyGetReply)(nil),
		(*IPReassemblySet)(nil),
		(*IPReassemblySetReply)(nil),
		(*IPRouteAddDel)(nil),
		(*IPRouteAddDelReply)(nil),
		(*IPRouteDetails)(nil),
		(*IPRouteDump)(nil),
		(*IPSourceAndPortRangeCheckAddDel)(nil),
		(*IPSourceAndPortRangeCheckAddDelReply)(nil),
		(*IPSourceAndPortRangeCheckInterfaceAddDel)(nil),
		(*IPSourceAndPortRangeCheckInterfaceAddDelReply)(nil),
		(*IPSourceCheckInterfaceAddDel)(nil),
		(*IPSourceCheckInterfaceAddDelReply)(nil),
		(*IPTableAddDel)(nil),
		(*IPTableAddDelReply)(nil),
		(*IPTableDetails)(nil),
		(*IPTableDump)(nil),
		(*IPTableFlush)(nil),
		(*IPTableFlushReply)(nil),
		(*IPTableReplaceBegin)(nil),
		(*IPTableReplaceBeginReply)(nil),
		(*IPTableReplaceEnd)(nil),
		(*IPTableReplaceEndReply)(nil),
		(*IPUnnumberedDetails)(nil),
		(*IPUnnumberedDump)(nil),
		(*MfibSignalDetails)(nil),
		(*MfibSignalDump)(nil),
		(*SetIPFlowHash)(nil),
		(*SetIPFlowHashReply)(nil),
		(*SwInterfaceIP6EnableDisable)(nil),
		(*SwInterfaceIP6EnableDisableReply)(nil),
		(*SwInterfaceIP6SetLinkLocalAddress)(nil),
		(*SwInterfaceIP6SetLinkLocalAddressReply)(nil),
	}
}

// RPCService represents RPC service API for ip module.
type RPCService interface {
	DumpIPAddress(ctx context.Context, in *IPAddressDump) (RPCService_DumpIPAddressClient, error)
	DumpIPContainerProxy(ctx context.Context, in *IPContainerProxyDump) (RPCService_DumpIPContainerProxyClient, error)
	DumpIP(ctx context.Context, in *IPDump) (RPCService_DumpIPClient, error)
	DumpIPMroute(ctx context.Context, in *IPMrouteDump) (RPCService_DumpIPMrouteClient, error)
	DumpIPMtable(ctx context.Context, in *IPMtableDump) (RPCService_DumpIPMtableClient, error)
	DumpIPPuntRedirect(ctx context.Context, in *IPPuntRedirectDump) (RPCService_DumpIPPuntRedirectClient, error)
	DumpIPRoute(ctx context.Context, in *IPRouteDump) (RPCService_DumpIPRouteClient, error)
	DumpIPTable(ctx context.Context, in *IPTableDump) (RPCService_DumpIPTableClient, error)
	DumpIPUnnumbered(ctx context.Context, in *IPUnnumberedDump) (RPCService_DumpIPUnnumberedClient, error)
	DumpMfibSignal(ctx context.Context, in *MfibSignalDump) (RPCService_DumpMfibSignalClient, error)
	IoamDisable(ctx context.Context, in *IoamDisable) (*IoamDisableReply, error)
	IoamEnable(ctx context.Context, in *IoamEnable) (*IoamEnableReply, error)
	IPContainerProxyAddDel(ctx context.Context, in *IPContainerProxyAddDel) (*IPContainerProxyAddDelReply, error)
	IPMrouteAddDel(ctx context.Context, in *IPMrouteAddDel) (*IPMrouteAddDelReply, error)
	IPPuntPolice(ctx context.Context, in *IPPuntPolice) (*IPPuntPoliceReply, error)
	IPPuntRedirect(ctx context.Context, in *IPPuntRedirect) (*IPPuntRedirectReply, error)
	IPReassemblyEnableDisable(ctx context.Context, in *IPReassemblyEnableDisable) (*IPReassemblyEnableDisableReply, error)
	IPReassemblyGet(ctx context.Context, in *IPReassemblyGet) (*IPReassemblyGetReply, error)
	IPReassemblySet(ctx context.Context, in *IPReassemblySet) (*IPReassemblySetReply, error)
	IPRouteAddDel(ctx context.Context, in *IPRouteAddDel) (*IPRouteAddDelReply, error)
	IPSourceAndPortRangeCheckAddDel(ctx context.Context, in *IPSourceAndPortRangeCheckAddDel) (*IPSourceAndPortRangeCheckAddDelReply, error)
	IPSourceAndPortRangeCheckInterfaceAddDel(ctx context.Context, in *IPSourceAndPortRangeCheckInterfaceAddDel) (*IPSourceAndPortRangeCheckInterfaceAddDelReply, error)
	IPSourceCheckInterfaceAddDel(ctx context.Context, in *IPSourceCheckInterfaceAddDel) (*IPSourceCheckInterfaceAddDelReply, error)
	IPTableAddDel(ctx context.Context, in *IPTableAddDel) (*IPTableAddDelReply, error)
	IPTableFlush(ctx context.Context, in *IPTableFlush) (*IPTableFlushReply, error)
	IPTableReplaceBegin(ctx context.Context, in *IPTableReplaceBegin) (*IPTableReplaceBeginReply, error)
	IPTableReplaceEnd(ctx context.Context, in *IPTableReplaceEnd) (*IPTableReplaceEndReply, error)
	SetIPFlowHash(ctx context.Context, in *SetIPFlowHash) (*SetIPFlowHashReply, error)
	SwInterfaceIP6EnableDisable(ctx context.Context, in *SwInterfaceIP6EnableDisable) (*SwInterfaceIP6EnableDisableReply, error)
	SwInterfaceIP6SetLinkLocalAddress(ctx context.Context, in *SwInterfaceIP6SetLinkLocalAddress) (*SwInterfaceIP6SetLinkLocalAddressReply, error)
}

type serviceClient struct {
	ch api.Channel
}

func NewServiceClient(ch api.Channel) RPCService {
	return &serviceClient{ch}
}

func (c *serviceClient) DumpIPAddress(ctx context.Context, in *IPAddressDump) (RPCService_DumpIPAddressClient, error) {
	stream := c.ch.SendMultiRequest(in)
	x := &serviceClient_DumpIPAddressClient{stream}
	return x, nil
}

type RPCService_DumpIPAddressClient interface {
	Recv() (*IPAddressDetails, error)
}

type serviceClient_DumpIPAddressClient struct {
	api.MultiRequestCtx
}

func (c *serviceClient_DumpIPAddressClient) Recv() (*IPAddressDetails, error) {
	m := new(IPAddressDetails)
	stop, err := c.MultiRequestCtx.ReceiveReply(m)
	if err != nil {
		return nil, err
	}
	if stop {
		return nil, io.EOF
	}
	return m, nil
}

func (c *serviceClient) DumpIPContainerProxy(ctx context.Context, in *IPContainerProxyDump) (RPCService_DumpIPContainerProxyClient, error) {
	stream := c.ch.SendMultiRequest(in)
	x := &serviceClient_DumpIPContainerProxyClient{stream}
	return x, nil
}

type RPCService_DumpIPContainerProxyClient interface {
	Recv() (*IPContainerProxyDetails, error)
}

type serviceClient_DumpIPContainerProxyClient struct {
	api.MultiRequestCtx
}

func (c *serviceClient_DumpIPContainerProxyClient) Recv() (*IPContainerProxyDetails, error) {
	m := new(IPContainerProxyDetails)
	stop, err := c.MultiRequestCtx.ReceiveReply(m)
	if err != nil {
		return nil, err
	}
	if stop {
		return nil, io.EOF
	}
	return m, nil
}

func (c *serviceClient) DumpIP(ctx context.Context, in *IPDump) (RPCService_DumpIPClient, error) {
	stream := c.ch.SendMultiRequest(in)
	x := &serviceClient_DumpIPClient{stream}
	return x, nil
}

type RPCService_DumpIPClient interface {
	Recv() (*IPDetails, error)
}

type serviceClient_DumpIPClient struct {
	api.MultiRequestCtx
}

func (c *serviceClient_DumpIPClient) Recv() (*IPDetails, error) {
	m := new(IPDetails)
	stop, err := c.MultiRequestCtx.ReceiveReply(m)
	if err != nil {
		return nil, err
	}
	if stop {
		return nil, io.EOF
	}
	return m, nil
}

func (c *serviceClient) DumpIPMroute(ctx context.Context, in *IPMrouteDump) (RPCService_DumpIPMrouteClient, error) {
	stream := c.ch.SendMultiRequest(in)
	x := &serviceClient_DumpIPMrouteClient{stream}
	return x, nil
}

type RPCService_DumpIPMrouteClient interface {
	Recv() (*IPMrouteDetails, error)
}

type serviceClient_DumpIPMrouteClient struct {
	api.MultiRequestCtx
}

func (c *serviceClient_DumpIPMrouteClient) Recv() (*IPMrouteDetails, error) {
	m := new(IPMrouteDetails)
	stop, err := c.MultiRequestCtx.ReceiveReply(m)
	if err != nil {
		return nil, err
	}
	if stop {
		return nil, io.EOF
	}
	return m, nil
}

func (c *serviceClient) DumpIPMtable(ctx context.Context, in *IPMtableDump) (RPCService_DumpIPMtableClient, error) {
	stream := c.ch.SendMultiRequest(in)
	x := &serviceClient_DumpIPMtableClient{stream}
	return x, nil
}

type RPCService_DumpIPMtableClient interface {
	Recv() (*IPMtableDetails, error)
}

type serviceClient_DumpIPMtableClient struct {
	api.MultiRequestCtx
}

func (c *serviceClient_DumpIPMtableClient) Recv() (*IPMtableDetails, error) {
	m := new(IPMtableDetails)
	stop, err := c.MultiRequestCtx.ReceiveReply(m)
	if err != nil {
		return nil, err
	}
	if stop {
		return nil, io.EOF
	}
	return m, nil
}

func (c *serviceClient) DumpIPPuntRedirect(ctx context.Context, in *IPPuntRedirectDump) (RPCService_DumpIPPuntRedirectClient, error) {
	stream := c.ch.SendMultiRequest(in)
	x := &serviceClient_DumpIPPuntRedirectClient{stream}
	return x, nil
}

type RPCService_DumpIPPuntRedirectClient interface {
	Recv() (*IPPuntRedirectDetails, error)
}

type serviceClient_DumpIPPuntRedirectClient struct {
	api.MultiRequestCtx
}

func (c *serviceClient_DumpIPPuntRedirectClient) Recv() (*IPPuntRedirectDetails, error) {
	m := new(IPPuntRedirectDetails)
	stop, err := c.MultiRequestCtx.ReceiveReply(m)
	if err != nil {
		return nil, err
	}
	if stop {
		return nil, io.EOF
	}
	return m, nil
}

func (c *serviceClient) DumpIPRoute(ctx context.Context, in *IPRouteDump) (RPCService_DumpIPRouteClient, error) {
	stream := c.ch.SendMultiRequest(in)
	x := &serviceClient_DumpIPRouteClient{stream}
	return x, nil
}

type RPCService_DumpIPRouteClient interface {
	Recv() (*IPRouteDetails, error)
}

type serviceClient_DumpIPRouteClient struct {
	api.MultiRequestCtx
}

func (c *serviceClient_DumpIPRouteClient) Recv() (*IPRouteDetails, error) {
	m := new(IPRouteDetails)
	stop, err := c.MultiRequestCtx.ReceiveReply(m)
	if err != nil {
		return nil, err
	}
	if stop {
		return nil, io.EOF
	}
	return m, nil
}

func (c *serviceClient) DumpIPTable(ctx context.Context, in *IPTableDump) (RPCService_DumpIPTableClient, error) {
	stream := c.ch.SendMultiRequest(in)
	x := &serviceClient_DumpIPTableClient{stream}
	return x, nil
}

type RPCService_DumpIPTableClient interface {
	Recv() (*IPTableDetails, error)
}

type serviceClient_DumpIPTableClient struct {
	api.MultiRequestCtx
}

func (c *serviceClient_DumpIPTableClient) Recv() (*IPTableDetails, error) {
	m := new(IPTableDetails)
	stop, err := c.MultiRequestCtx.ReceiveReply(m)
	if err != nil {
		return nil, err
	}
	if stop {
		return nil, io.EOF
	}
	return m, nil
}

func (c *serviceClient) DumpIPUnnumbered(ctx context.Context, in *IPUnnumberedDump) (RPCService_DumpIPUnnumberedClient, error) {
	stream := c.ch.SendMultiRequest(in)
	x := &serviceClient_DumpIPUnnumberedClient{stream}
	return x, nil
}

type RPCService_DumpIPUnnumberedClient interface {
	Recv() (*IPUnnumberedDetails, error)
}

type serviceClient_DumpIPUnnumberedClient struct {
	api.MultiRequestCtx
}

func (c *serviceClient_DumpIPUnnumberedClient) Recv() (*IPUnnumberedDetails, error) {
	m := new(IPUnnumberedDetails)
	stop, err := c.MultiRequestCtx.ReceiveReply(m)
	if err != nil {
		return nil, err
	}
	if stop {
		return nil, io.EOF
	}
	return m, nil
}

func (c *serviceClient) DumpMfibSignal(ctx context.Context, in *MfibSignalDump) (RPCService_DumpMfibSignalClient, error) {
	stream := c.ch.SendMultiRequest(in)
	x := &serviceClient_DumpMfibSignalClient{stream}
	return x, nil
}

type RPCService_DumpMfibSignalClient interface {
	Recv() (*MfibSignalDetails, error)
}

type serviceClient_DumpMfibSignalClient struct {
	api.MultiRequestCtx
}

func (c *serviceClient_DumpMfibSignalClient) Recv() (*MfibSignalDetails, error) {
	m := new(MfibSignalDetails)
	stop, err := c.MultiRequestCtx.ReceiveReply(m)
	if err != nil {
		return nil, err
	}
	if stop {
		return nil, io.EOF
	}
	return m, nil
}

func (c *serviceClient) IoamDisable(ctx context.Context, in *IoamDisable) (*IoamDisableReply, error) {
	out := new(IoamDisableReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) IoamEnable(ctx context.Context, in *IoamEnable) (*IoamEnableReply, error) {
	out := new(IoamEnableReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) IPContainerProxyAddDel(ctx context.Context, in *IPContainerProxyAddDel) (*IPContainerProxyAddDelReply, error) {
	out := new(IPContainerProxyAddDelReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) IPMrouteAddDel(ctx context.Context, in *IPMrouteAddDel) (*IPMrouteAddDelReply, error) {
	out := new(IPMrouteAddDelReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) IPPuntPolice(ctx context.Context, in *IPPuntPolice) (*IPPuntPoliceReply, error) {
	out := new(IPPuntPoliceReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) IPPuntRedirect(ctx context.Context, in *IPPuntRedirect) (*IPPuntRedirectReply, error) {
	out := new(IPPuntRedirectReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) IPReassemblyEnableDisable(ctx context.Context, in *IPReassemblyEnableDisable) (*IPReassemblyEnableDisableReply, error) {
	out := new(IPReassemblyEnableDisableReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) IPReassemblyGet(ctx context.Context, in *IPReassemblyGet) (*IPReassemblyGetReply, error) {
	out := new(IPReassemblyGetReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) IPReassemblySet(ctx context.Context, in *IPReassemblySet) (*IPReassemblySetReply, error) {
	out := new(IPReassemblySetReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) IPRouteAddDel(ctx context.Context, in *IPRouteAddDel) (*IPRouteAddDelReply, error) {
	out := new(IPRouteAddDelReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) IPSourceAndPortRangeCheckAddDel(ctx context.Context, in *IPSourceAndPortRangeCheckAddDel) (*IPSourceAndPortRangeCheckAddDelReply, error) {
	out := new(IPSourceAndPortRangeCheckAddDelReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) IPSourceAndPortRangeCheckInterfaceAddDel(ctx context.Context, in *IPSourceAndPortRangeCheckInterfaceAddDel) (*IPSourceAndPortRangeCheckInterfaceAddDelReply, error) {
	out := new(IPSourceAndPortRangeCheckInterfaceAddDelReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) IPSourceCheckInterfaceAddDel(ctx context.Context, in *IPSourceCheckInterfaceAddDel) (*IPSourceCheckInterfaceAddDelReply, error) {
	out := new(IPSourceCheckInterfaceAddDelReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) IPTableAddDel(ctx context.Context, in *IPTableAddDel) (*IPTableAddDelReply, error) {
	out := new(IPTableAddDelReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) IPTableFlush(ctx context.Context, in *IPTableFlush) (*IPTableFlushReply, error) {
	out := new(IPTableFlushReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) IPTableReplaceBegin(ctx context.Context, in *IPTableReplaceBegin) (*IPTableReplaceBeginReply, error) {
	out := new(IPTableReplaceBeginReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) IPTableReplaceEnd(ctx context.Context, in *IPTableReplaceEnd) (*IPTableReplaceEndReply, error) {
	out := new(IPTableReplaceEndReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) SetIPFlowHash(ctx context.Context, in *SetIPFlowHash) (*SetIPFlowHashReply, error) {
	out := new(SetIPFlowHashReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) SwInterfaceIP6EnableDisable(ctx context.Context, in *SwInterfaceIP6EnableDisable) (*SwInterfaceIP6EnableDisableReply, error) {
	out := new(SwInterfaceIP6EnableDisableReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) SwInterfaceIP6SetLinkLocalAddress(ctx context.Context, in *SwInterfaceIP6SetLinkLocalAddress) (*SwInterfaceIP6SetLinkLocalAddressReply, error) {
	out := new(SwInterfaceIP6SetLinkLocalAddressReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// This is a compile-time assertion to ensure that this generated file
// is compatible with the GoVPP api package it is being compiled against.
// A compilation error at this line likely means your copy of the
// GoVPP api package needs to be updated.
const _ = api.GoVppAPIPackageIsVersion1 // please upgrade the GoVPP api package

// Reference imports to suppress errors if they are not otherwise used.
var _ = api.RegisterMessage
var _ = bytes.NewBuffer
var _ = context.Background
var _ = io.Copy
var _ = strconv.Itoa
var _ = struc.Pack
