// Code generated by GoVPP's binapi-generator. DO NOT EDIT.
// source: /usr/share/vpp/api/plugins/dhcp.api.json

/*
Package dhcp is a generated VPP binary API for 'dhcp' module.

It consists of:
	 13 enums
	  7 aliases
	 12 types
	  1 union
	 29 messages
	 13 services
*/
package dhcp

import (
	bytes "bytes"
	context "context"
	api "git.fd.io/govpp.git/api"
	struc "github.com/lunixbochs/struc"
	io "io"
	strconv "strconv"

	ethernet_types "go.ligato.io/vpp-agent/v3/plugins/vpp/binapi/vpp2001/ethernet_types"
	interface_types "go.ligato.io/vpp-agent/v3/plugins/vpp/binapi/vpp2001/interface_types"
	ip_types "go.ligato.io/vpp-agent/v3/plugins/vpp/binapi/vpp2001/ip_types"
)

const (
	// ModuleName is the name of this module.
	ModuleName = "dhcp"
	// VersionCrc is the CRC of this module.
	VersionCrc = 0x96a5f046
)

type AddressFamily = ip_types.AddressFamily

// DHCPClientState represents VPP binary API enum 'dhcp_client_state'.
type DHCPClientState uint32

const (
	DHCP_CLIENT_STATE_API_DISCOVER DHCPClientState = 1
	DHCP_CLIENT_STATE_API_REQUEST  DHCPClientState = 2
	DHCP_CLIENT_STATE_API_BOUND    DHCPClientState = 3
)

var DHCPClientState_name = map[uint32]string{
	1: "DHCP_CLIENT_STATE_API_DISCOVER",
	2: "DHCP_CLIENT_STATE_API_REQUEST",
	3: "DHCP_CLIENT_STATE_API_BOUND",
}

var DHCPClientState_value = map[string]uint32{
	"DHCP_CLIENT_STATE_API_DISCOVER": 1,
	"DHCP_CLIENT_STATE_API_REQUEST":  2,
	"DHCP_CLIENT_STATE_API_BOUND":    3,
}

func (x DHCPClientState) String() string {
	s, ok := DHCPClientState_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// Dhcpv6MsgType represents VPP binary API enum 'dhcpv6_msg_type'.
type Dhcpv6MsgType uint32

const (
	DHCPV6_MSG_API_SOLICIT             Dhcpv6MsgType = 1
	DHCPV6_MSG_API_ADVERTISE           Dhcpv6MsgType = 2
	DHCPV6_MSG_API_REQUEST             Dhcpv6MsgType = 3
	DHCPV6_MSG_API_CONFIRM             Dhcpv6MsgType = 4
	DHCPV6_MSG_API_RENEW               Dhcpv6MsgType = 5
	DHCPV6_MSG_API_REBIND              Dhcpv6MsgType = 6
	DHCPV6_MSG_API_REPLY               Dhcpv6MsgType = 7
	DHCPV6_MSG_API_RELEASE             Dhcpv6MsgType = 8
	DHCPV6_MSG_API_DECLINE             Dhcpv6MsgType = 9
	DHCPV6_MSG_API_RECONFIGURE         Dhcpv6MsgType = 10
	DHCPV6_MSG_API_INFORMATION_REQUEST Dhcpv6MsgType = 11
	DHCPV6_MSG_API_RELAY_FORW          Dhcpv6MsgType = 12
	DHCPV6_MSG_API_RELAY_REPL          Dhcpv6MsgType = 13
)

var Dhcpv6MsgType_name = map[uint32]string{
	1:  "DHCPV6_MSG_API_SOLICIT",
	2:  "DHCPV6_MSG_API_ADVERTISE",
	3:  "DHCPV6_MSG_API_REQUEST",
	4:  "DHCPV6_MSG_API_CONFIRM",
	5:  "DHCPV6_MSG_API_RENEW",
	6:  "DHCPV6_MSG_API_REBIND",
	7:  "DHCPV6_MSG_API_REPLY",
	8:  "DHCPV6_MSG_API_RELEASE",
	9:  "DHCPV6_MSG_API_DECLINE",
	10: "DHCPV6_MSG_API_RECONFIGURE",
	11: "DHCPV6_MSG_API_INFORMATION_REQUEST",
	12: "DHCPV6_MSG_API_RELAY_FORW",
	13: "DHCPV6_MSG_API_RELAY_REPL",
}

var Dhcpv6MsgType_value = map[string]uint32{
	"DHCPV6_MSG_API_SOLICIT":             1,
	"DHCPV6_MSG_API_ADVERTISE":           2,
	"DHCPV6_MSG_API_REQUEST":             3,
	"DHCPV6_MSG_API_CONFIRM":             4,
	"DHCPV6_MSG_API_RENEW":               5,
	"DHCPV6_MSG_API_REBIND":              6,
	"DHCPV6_MSG_API_REPLY":               7,
	"DHCPV6_MSG_API_RELEASE":             8,
	"DHCPV6_MSG_API_DECLINE":             9,
	"DHCPV6_MSG_API_RECONFIGURE":         10,
	"DHCPV6_MSG_API_INFORMATION_REQUEST": 11,
	"DHCPV6_MSG_API_RELAY_FORW":          12,
	"DHCPV6_MSG_API_RELAY_REPL":          13,
}

func (x Dhcpv6MsgType) String() string {
	s, ok := Dhcpv6MsgType_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

type IfStatusFlags = interface_types.IfStatusFlags

type IfType = interface_types.IfType

type IPDscp = ip_types.IPDscp

type IPEcn = ip_types.IPEcn

type IPProto = ip_types.IPProto

type LinkDuplex = interface_types.LinkDuplex

type MtuProto = interface_types.MtuProto

type RxMode = interface_types.RxMode

type SubIfFlags = interface_types.SubIfFlags

// VssType represents VPP binary API enum 'vss_type'.
type VssType uint32

const (
	VSS_TYPE_API_ASCII   VssType = 0
	VSS_TYPE_API_VPN_ID  VssType = 1
	VSS_TYPE_API_INVALID VssType = 123
	VSS_TYPE_API_DEFAULT VssType = 255
)

var VssType_name = map[uint32]string{
	0:   "VSS_TYPE_API_ASCII",
	1:   "VSS_TYPE_API_VPN_ID",
	123: "VSS_TYPE_API_INVALID",
	255: "VSS_TYPE_API_DEFAULT",
}

var VssType_value = map[string]uint32{
	"VSS_TYPE_API_ASCII":   0,
	"VSS_TYPE_API_VPN_ID":  1,
	"VSS_TYPE_API_INVALID": 123,
	"VSS_TYPE_API_DEFAULT": 255,
}

func (x VssType) String() string {
	s, ok := VssType_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

type AddressWithPrefix = ip_types.AddressWithPrefix

type InterfaceIndex = interface_types.InterfaceIndex

type IP4Address = ip_types.IP4Address

type IP4AddressWithPrefix = ip_types.IP4AddressWithPrefix

type IP6Address = ip_types.IP6Address

type IP6AddressWithPrefix = ip_types.IP6AddressWithPrefix

type MacAddress = ethernet_types.MacAddress

type Address = ip_types.Address

// DHCP6AddressInfo represents VPP binary API type 'dhcp6_address_info'.
type DHCP6AddressInfo struct {
	Address       IP6Address
	ValidTime     uint32
	PreferredTime uint32
}

func (*DHCP6AddressInfo) GetTypeName() string { return "dhcp6_address_info" }

// DHCP6PdPrefixInfo represents VPP binary API type 'dhcp6_pd_prefix_info'.
type DHCP6PdPrefixInfo struct {
	Prefix        IP6Prefix
	ValidTime     uint32
	PreferredTime uint32
}

func (*DHCP6PdPrefixInfo) GetTypeName() string { return "dhcp6_pd_prefix_info" }

// DHCPClient represents VPP binary API type 'dhcp_client'.
type DHCPClient struct {
	SwIfIndex        InterfaceIndex
	Hostname         string `struc:"[64]byte"`
	ID               []byte `struc:"[64]byte"`
	WantDHCPEvent    bool
	SetBroadcastFlag bool
	Dscp             IPDscp
	PID              uint32
}

func (*DHCPClient) GetTypeName() string { return "dhcp_client" }

// DHCPLease represents VPP binary API type 'dhcp_lease'.
type DHCPLease struct {
	SwIfIndex     InterfaceIndex
	State         DHCPClientState
	IsIPv6        bool
	Hostname      string `struc:"[64]byte"`
	MaskWidth     uint8
	HostAddress   Address
	RouterAddress Address
	HostMac       MacAddress
	Count         uint8 `struc:"sizeof=DomainServer"`
	DomainServer  []DomainServer
}

func (*DHCPLease) GetTypeName() string { return "dhcp_lease" }

// DHCPServer represents VPP binary API type 'dhcp_server'.
type DHCPServer struct {
	ServerVrfID uint32
	DHCPServer  Address
}

func (*DHCPServer) GetTypeName() string { return "dhcp_server" }

// DomainServer represents VPP binary API type 'domain_server'.
type DomainServer struct {
	Address Address
}

func (*DomainServer) GetTypeName() string { return "domain_server" }

type IP4Prefix = ip_types.IP4Prefix

type IP6Prefix = ip_types.IP6Prefix

type Mprefix = ip_types.Mprefix

type Prefix = ip_types.Prefix

type PrefixMatcher = ip_types.PrefixMatcher

type AddressUnion = ip_types.AddressUnion

// DHCP6ClientsEnableDisable represents VPP binary API message 'dhcp6_clients_enable_disable'.
type DHCP6ClientsEnableDisable struct {
	Enable bool
}

func (m *DHCP6ClientsEnableDisable) Reset()                        { *m = DHCP6ClientsEnableDisable{} }
func (*DHCP6ClientsEnableDisable) GetMessageName() string          { return "dhcp6_clients_enable_disable" }
func (*DHCP6ClientsEnableDisable) GetCrcString() string            { return "b3e225d2" }
func (*DHCP6ClientsEnableDisable) GetMessageType() api.MessageType { return api.RequestMessage }

// DHCP6ClientsEnableDisableReply represents VPP binary API message 'dhcp6_clients_enable_disable_reply'.
type DHCP6ClientsEnableDisableReply struct {
	Retval int32
}

func (m *DHCP6ClientsEnableDisableReply) Reset() { *m = DHCP6ClientsEnableDisableReply{} }
func (*DHCP6ClientsEnableDisableReply) GetMessageName() string {
	return "dhcp6_clients_enable_disable_reply"
}
func (*DHCP6ClientsEnableDisableReply) GetCrcString() string            { return "e8d4e804" }
func (*DHCP6ClientsEnableDisableReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// DHCP6DuidLlSet represents VPP binary API message 'dhcp6_duid_ll_set'.
type DHCP6DuidLlSet struct {
	DuidLl []byte `struc:"[10]byte"`
}

func (m *DHCP6DuidLlSet) Reset()                        { *m = DHCP6DuidLlSet{} }
func (*DHCP6DuidLlSet) GetMessageName() string          { return "dhcp6_duid_ll_set" }
func (*DHCP6DuidLlSet) GetCrcString() string            { return "0f6ca323" }
func (*DHCP6DuidLlSet) GetMessageType() api.MessageType { return api.RequestMessage }

// DHCP6DuidLlSetReply represents VPP binary API message 'dhcp6_duid_ll_set_reply'.
type DHCP6DuidLlSetReply struct {
	Retval int32
}

func (m *DHCP6DuidLlSetReply) Reset()                        { *m = DHCP6DuidLlSetReply{} }
func (*DHCP6DuidLlSetReply) GetMessageName() string          { return "dhcp6_duid_ll_set_reply" }
func (*DHCP6DuidLlSetReply) GetCrcString() string            { return "e8d4e804" }
func (*DHCP6DuidLlSetReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// DHCP6PdReplyEvent represents VPP binary API message 'dhcp6_pd_reply_event'.
type DHCP6PdReplyEvent struct {
	PID             uint32
	SwIfIndex       InterfaceIndex
	ServerIndex     uint32
	MsgType         Dhcpv6MsgType
	T1              uint32
	T2              uint32
	InnerStatusCode uint16
	StatusCode      uint16
	Preference      uint8
	NPrefixes       uint32 `struc:"sizeof=Prefixes"`
	Prefixes        []DHCP6PdPrefixInfo
}

func (m *DHCP6PdReplyEvent) Reset()                        { *m = DHCP6PdReplyEvent{} }
func (*DHCP6PdReplyEvent) GetMessageName() string          { return "dhcp6_pd_reply_event" }
func (*DHCP6PdReplyEvent) GetCrcString() string            { return "cb3e462b" }
func (*DHCP6PdReplyEvent) GetMessageType() api.MessageType { return api.EventMessage }

// DHCP6PdSendClientMessage represents VPP binary API message 'dhcp6_pd_send_client_message'.
type DHCP6PdSendClientMessage struct {
	SwIfIndex   InterfaceIndex
	ServerIndex uint32
	Irt         uint32
	Mrt         uint32
	Mrc         uint32
	Mrd         uint32
	Stop        bool
	MsgType     Dhcpv6MsgType
	T1          uint32
	T2          uint32
	NPrefixes   uint32 `struc:"sizeof=Prefixes"`
	Prefixes    []DHCP6PdPrefixInfo
}

func (m *DHCP6PdSendClientMessage) Reset()                        { *m = DHCP6PdSendClientMessage{} }
func (*DHCP6PdSendClientMessage) GetMessageName() string          { return "dhcp6_pd_send_client_message" }
func (*DHCP6PdSendClientMessage) GetCrcString() string            { return "064badb8" }
func (*DHCP6PdSendClientMessage) GetMessageType() api.MessageType { return api.RequestMessage }

// DHCP6PdSendClientMessageReply represents VPP binary API message 'dhcp6_pd_send_client_message_reply'.
type DHCP6PdSendClientMessageReply struct {
	Retval int32
}

func (m *DHCP6PdSendClientMessageReply) Reset() { *m = DHCP6PdSendClientMessageReply{} }
func (*DHCP6PdSendClientMessageReply) GetMessageName() string {
	return "dhcp6_pd_send_client_message_reply"
}
func (*DHCP6PdSendClientMessageReply) GetCrcString() string            { return "e8d4e804" }
func (*DHCP6PdSendClientMessageReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// DHCP6ReplyEvent represents VPP binary API message 'dhcp6_reply_event'.
type DHCP6ReplyEvent struct {
	PID             uint32
	SwIfIndex       InterfaceIndex
	ServerIndex     uint32
	MsgType         Dhcpv6MsgType
	T1              uint32
	T2              uint32
	InnerStatusCode uint16
	StatusCode      uint16
	Preference      uint8
	NAddresses      uint32 `struc:"sizeof=Addresses"`
	Addresses       []DHCP6AddressInfo
}

func (m *DHCP6ReplyEvent) Reset()                        { *m = DHCP6ReplyEvent{} }
func (*DHCP6ReplyEvent) GetMessageName() string          { return "dhcp6_reply_event" }
func (*DHCP6ReplyEvent) GetCrcString() string            { return "9f3af9e5" }
func (*DHCP6ReplyEvent) GetMessageType() api.MessageType { return api.EventMessage }

// DHCP6SendClientMessage represents VPP binary API message 'dhcp6_send_client_message'.
type DHCP6SendClientMessage struct {
	SwIfIndex   InterfaceIndex
	ServerIndex uint32
	Irt         uint32
	Mrt         uint32
	Mrc         uint32
	Mrd         uint32
	Stop        bool
	MsgType     Dhcpv6MsgType
	T1          uint32
	T2          uint32
	NAddresses  uint32 `struc:"sizeof=Addresses"`
	Addresses   []DHCP6AddressInfo
}

func (m *DHCP6SendClientMessage) Reset()                        { *m = DHCP6SendClientMessage{} }
func (*DHCP6SendClientMessage) GetMessageName() string          { return "dhcp6_send_client_message" }
func (*DHCP6SendClientMessage) GetCrcString() string            { return "f6f14ef0" }
func (*DHCP6SendClientMessage) GetMessageType() api.MessageType { return api.RequestMessage }

// DHCP6SendClientMessageReply represents VPP binary API message 'dhcp6_send_client_message_reply'.
type DHCP6SendClientMessageReply struct {
	Retval int32
}

func (m *DHCP6SendClientMessageReply) Reset()                        { *m = DHCP6SendClientMessageReply{} }
func (*DHCP6SendClientMessageReply) GetMessageName() string          { return "dhcp6_send_client_message_reply" }
func (*DHCP6SendClientMessageReply) GetCrcString() string            { return "e8d4e804" }
func (*DHCP6SendClientMessageReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// DHCPClientConfig represents VPP binary API message 'dhcp_client_config'.
type DHCPClientConfig struct {
	IsAdd  bool
	Client DHCPClient
}

func (m *DHCPClientConfig) Reset()                        { *m = DHCPClientConfig{} }
func (*DHCPClientConfig) GetMessageName() string          { return "dhcp_client_config" }
func (*DHCPClientConfig) GetCrcString() string            { return "959b80a3" }
func (*DHCPClientConfig) GetMessageType() api.MessageType { return api.RequestMessage }

// DHCPClientConfigReply represents VPP binary API message 'dhcp_client_config_reply'.
type DHCPClientConfigReply struct {
	Retval int32
}

func (m *DHCPClientConfigReply) Reset()                        { *m = DHCPClientConfigReply{} }
func (*DHCPClientConfigReply) GetMessageName() string          { return "dhcp_client_config_reply" }
func (*DHCPClientConfigReply) GetCrcString() string            { return "e8d4e804" }
func (*DHCPClientConfigReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// DHCPClientDetails represents VPP binary API message 'dhcp_client_details'.
type DHCPClientDetails struct {
	Client DHCPClient
	Lease  DHCPLease
}

func (m *DHCPClientDetails) Reset()                        { *m = DHCPClientDetails{} }
func (*DHCPClientDetails) GetMessageName() string          { return "dhcp_client_details" }
func (*DHCPClientDetails) GetCrcString() string            { return "acd82f5a" }
func (*DHCPClientDetails) GetMessageType() api.MessageType { return api.ReplyMessage }

// DHCPClientDump represents VPP binary API message 'dhcp_client_dump'.
type DHCPClientDump struct{}

func (m *DHCPClientDump) Reset()                        { *m = DHCPClientDump{} }
func (*DHCPClientDump) GetMessageName() string          { return "dhcp_client_dump" }
func (*DHCPClientDump) GetCrcString() string            { return "51077d14" }
func (*DHCPClientDump) GetMessageType() api.MessageType { return api.RequestMessage }

// DHCPComplEvent represents VPP binary API message 'dhcp_compl_event'.
type DHCPComplEvent struct {
	PID   uint32
	Lease DHCPLease
}

func (m *DHCPComplEvent) Reset()                        { *m = DHCPComplEvent{} }
func (*DHCPComplEvent) GetMessageName() string          { return "dhcp_compl_event" }
func (*DHCPComplEvent) GetCrcString() string            { return "e908fd1d" }
func (*DHCPComplEvent) GetMessageType() api.MessageType { return api.EventMessage }

// DHCPPluginControlPing represents VPP binary API message 'dhcp_plugin_control_ping'.
type DHCPPluginControlPing struct{}

func (m *DHCPPluginControlPing) Reset()                        { *m = DHCPPluginControlPing{} }
func (*DHCPPluginControlPing) GetMessageName() string          { return "dhcp_plugin_control_ping" }
func (*DHCPPluginControlPing) GetCrcString() string            { return "51077d14" }
func (*DHCPPluginControlPing) GetMessageType() api.MessageType { return api.RequestMessage }

// DHCPPluginControlPingReply represents VPP binary API message 'dhcp_plugin_control_ping_reply'.
type DHCPPluginControlPingReply struct {
	Retval      int32
	ClientIndex uint32
	VpePID      uint32
}

func (m *DHCPPluginControlPingReply) Reset()                        { *m = DHCPPluginControlPingReply{} }
func (*DHCPPluginControlPingReply) GetMessageName() string          { return "dhcp_plugin_control_ping_reply" }
func (*DHCPPluginControlPingReply) GetCrcString() string            { return "f6b0b8ca" }
func (*DHCPPluginControlPingReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// DHCPPluginGetVersion represents VPP binary API message 'dhcp_plugin_get_version'.
type DHCPPluginGetVersion struct{}

func (m *DHCPPluginGetVersion) Reset()                        { *m = DHCPPluginGetVersion{} }
func (*DHCPPluginGetVersion) GetMessageName() string          { return "dhcp_plugin_get_version" }
func (*DHCPPluginGetVersion) GetCrcString() string            { return "51077d14" }
func (*DHCPPluginGetVersion) GetMessageType() api.MessageType { return api.RequestMessage }

// DHCPPluginGetVersionReply represents VPP binary API message 'dhcp_plugin_get_version_reply'.
type DHCPPluginGetVersionReply struct {
	Major uint32
	Minor uint32
}

func (m *DHCPPluginGetVersionReply) Reset()                        { *m = DHCPPluginGetVersionReply{} }
func (*DHCPPluginGetVersionReply) GetMessageName() string          { return "dhcp_plugin_get_version_reply" }
func (*DHCPPluginGetVersionReply) GetCrcString() string            { return "9b32cf86" }
func (*DHCPPluginGetVersionReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// DHCPProxyConfig represents VPP binary API message 'dhcp_proxy_config'.
type DHCPProxyConfig struct {
	RxVrfID        uint32
	ServerVrfID    uint32
	IsAdd          bool
	DHCPServer     Address
	DHCPSrcAddress Address
}

func (m *DHCPProxyConfig) Reset()                        { *m = DHCPProxyConfig{} }
func (*DHCPProxyConfig) GetMessageName() string          { return "dhcp_proxy_config" }
func (*DHCPProxyConfig) GetCrcString() string            { return "6767230e" }
func (*DHCPProxyConfig) GetMessageType() api.MessageType { return api.RequestMessage }

// DHCPProxyConfigReply represents VPP binary API message 'dhcp_proxy_config_reply'.
type DHCPProxyConfigReply struct {
	Retval int32
}

func (m *DHCPProxyConfigReply) Reset()                        { *m = DHCPProxyConfigReply{} }
func (*DHCPProxyConfigReply) GetMessageName() string          { return "dhcp_proxy_config_reply" }
func (*DHCPProxyConfigReply) GetCrcString() string            { return "e8d4e804" }
func (*DHCPProxyConfigReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// DHCPProxyDetails represents VPP binary API message 'dhcp_proxy_details'.
type DHCPProxyDetails struct {
	RxVrfID        uint32
	VssOui         uint32
	VssFibID       uint32
	VssType        VssType
	IsIPv6         bool
	VssVPNAsciiID  string `struc:"[129]byte"`
	DHCPSrcAddress Address
	Count          uint8 `struc:"sizeof=Servers"`
	Servers        []DHCPServer
}

func (m *DHCPProxyDetails) Reset()                        { *m = DHCPProxyDetails{} }
func (*DHCPProxyDetails) GetMessageName() string          { return "dhcp_proxy_details" }
func (*DHCPProxyDetails) GetCrcString() string            { return "ce16f044" }
func (*DHCPProxyDetails) GetMessageType() api.MessageType { return api.ReplyMessage }

// DHCPProxyDump represents VPP binary API message 'dhcp_proxy_dump'.
type DHCPProxyDump struct {
	IsIP6 bool
}

func (m *DHCPProxyDump) Reset()                        { *m = DHCPProxyDump{} }
func (*DHCPProxyDump) GetMessageName() string          { return "dhcp_proxy_dump" }
func (*DHCPProxyDump) GetCrcString() string            { return "5c5b063f" }
func (*DHCPProxyDump) GetMessageType() api.MessageType { return api.RequestMessage }

// DHCPProxySetVss represents VPP binary API message 'dhcp_proxy_set_vss'.
type DHCPProxySetVss struct {
	TblID      uint32
	VssType    VssType
	VPNAsciiID string `struc:"[129]byte"`
	Oui        uint32
	VPNIndex   uint32
	IsIPv6     bool
	IsAdd      bool
}

func (m *DHCPProxySetVss) Reset()                        { *m = DHCPProxySetVss{} }
func (*DHCPProxySetVss) GetMessageName() string          { return "dhcp_proxy_set_vss" }
func (*DHCPProxySetVss) GetCrcString() string            { return "50537301" }
func (*DHCPProxySetVss) GetMessageType() api.MessageType { return api.RequestMessage }

// DHCPProxySetVssReply represents VPP binary API message 'dhcp_proxy_set_vss_reply'.
type DHCPProxySetVssReply struct {
	Retval int32
}

func (m *DHCPProxySetVssReply) Reset()                        { *m = DHCPProxySetVssReply{} }
func (*DHCPProxySetVssReply) GetMessageName() string          { return "dhcp_proxy_set_vss_reply" }
func (*DHCPProxySetVssReply) GetCrcString() string            { return "e8d4e804" }
func (*DHCPProxySetVssReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// WantDHCP6PdReplyEvents represents VPP binary API message 'want_dhcp6_pd_reply_events'.
type WantDHCP6PdReplyEvents struct {
	EnableDisable bool
	PID           uint32
}

func (m *WantDHCP6PdReplyEvents) Reset()                        { *m = WantDHCP6PdReplyEvents{} }
func (*WantDHCP6PdReplyEvents) GetMessageName() string          { return "want_dhcp6_pd_reply_events" }
func (*WantDHCP6PdReplyEvents) GetCrcString() string            { return "c5e2af94" }
func (*WantDHCP6PdReplyEvents) GetMessageType() api.MessageType { return api.RequestMessage }

// WantDHCP6PdReplyEventsReply represents VPP binary API message 'want_dhcp6_pd_reply_events_reply'.
type WantDHCP6PdReplyEventsReply struct {
	Retval int32
}

func (m *WantDHCP6PdReplyEventsReply) Reset()                        { *m = WantDHCP6PdReplyEventsReply{} }
func (*WantDHCP6PdReplyEventsReply) GetMessageName() string          { return "want_dhcp6_pd_reply_events_reply" }
func (*WantDHCP6PdReplyEventsReply) GetCrcString() string            { return "e8d4e804" }
func (*WantDHCP6PdReplyEventsReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// WantDHCP6ReplyEvents represents VPP binary API message 'want_dhcp6_reply_events'.
type WantDHCP6ReplyEvents struct {
	EnableDisable uint8
	PID           uint32
}

func (m *WantDHCP6ReplyEvents) Reset()                        { *m = WantDHCP6ReplyEvents{} }
func (*WantDHCP6ReplyEvents) GetMessageName() string          { return "want_dhcp6_reply_events" }
func (*WantDHCP6ReplyEvents) GetCrcString() string            { return "05b454b5" }
func (*WantDHCP6ReplyEvents) GetMessageType() api.MessageType { return api.RequestMessage }

// WantDHCP6ReplyEventsReply represents VPP binary API message 'want_dhcp6_reply_events_reply'.
type WantDHCP6ReplyEventsReply struct {
	Retval int32
}

func (m *WantDHCP6ReplyEventsReply) Reset()                        { *m = WantDHCP6ReplyEventsReply{} }
func (*WantDHCP6ReplyEventsReply) GetMessageName() string          { return "want_dhcp6_reply_events_reply" }
func (*WantDHCP6ReplyEventsReply) GetCrcString() string            { return "e8d4e804" }
func (*WantDHCP6ReplyEventsReply) GetMessageType() api.MessageType { return api.ReplyMessage }

func init() {
	api.RegisterMessage((*DHCP6ClientsEnableDisable)(nil), "dhcp.DHCP6ClientsEnableDisable")
	api.RegisterMessage((*DHCP6ClientsEnableDisableReply)(nil), "dhcp.DHCP6ClientsEnableDisableReply")
	api.RegisterMessage((*DHCP6DuidLlSet)(nil), "dhcp.DHCP6DuidLlSet")
	api.RegisterMessage((*DHCP6DuidLlSetReply)(nil), "dhcp.DHCP6DuidLlSetReply")
	api.RegisterMessage((*DHCP6PdReplyEvent)(nil), "dhcp.DHCP6PdReplyEvent")
	api.RegisterMessage((*DHCP6PdSendClientMessage)(nil), "dhcp.DHCP6PdSendClientMessage")
	api.RegisterMessage((*DHCP6PdSendClientMessageReply)(nil), "dhcp.DHCP6PdSendClientMessageReply")
	api.RegisterMessage((*DHCP6ReplyEvent)(nil), "dhcp.DHCP6ReplyEvent")
	api.RegisterMessage((*DHCP6SendClientMessage)(nil), "dhcp.DHCP6SendClientMessage")
	api.RegisterMessage((*DHCP6SendClientMessageReply)(nil), "dhcp.DHCP6SendClientMessageReply")
	api.RegisterMessage((*DHCPClientConfig)(nil), "dhcp.DHCPClientConfig")
	api.RegisterMessage((*DHCPClientConfigReply)(nil), "dhcp.DHCPClientConfigReply")
	api.RegisterMessage((*DHCPClientDetails)(nil), "dhcp.DHCPClientDetails")
	api.RegisterMessage((*DHCPClientDump)(nil), "dhcp.DHCPClientDump")
	api.RegisterMessage((*DHCPComplEvent)(nil), "dhcp.DHCPComplEvent")
	api.RegisterMessage((*DHCPPluginControlPing)(nil), "dhcp.DHCPPluginControlPing")
	api.RegisterMessage((*DHCPPluginControlPingReply)(nil), "dhcp.DHCPPluginControlPingReply")
	api.RegisterMessage((*DHCPPluginGetVersion)(nil), "dhcp.DHCPPluginGetVersion")
	api.RegisterMessage((*DHCPPluginGetVersionReply)(nil), "dhcp.DHCPPluginGetVersionReply")
	api.RegisterMessage((*DHCPProxyConfig)(nil), "dhcp.DHCPProxyConfig")
	api.RegisterMessage((*DHCPProxyConfigReply)(nil), "dhcp.DHCPProxyConfigReply")
	api.RegisterMessage((*DHCPProxyDetails)(nil), "dhcp.DHCPProxyDetails")
	api.RegisterMessage((*DHCPProxyDump)(nil), "dhcp.DHCPProxyDump")
	api.RegisterMessage((*DHCPProxySetVss)(nil), "dhcp.DHCPProxySetVss")
	api.RegisterMessage((*DHCPProxySetVssReply)(nil), "dhcp.DHCPProxySetVssReply")
	api.RegisterMessage((*WantDHCP6PdReplyEvents)(nil), "dhcp.WantDHCP6PdReplyEvents")
	api.RegisterMessage((*WantDHCP6PdReplyEventsReply)(nil), "dhcp.WantDHCP6PdReplyEventsReply")
	api.RegisterMessage((*WantDHCP6ReplyEvents)(nil), "dhcp.WantDHCP6ReplyEvents")
	api.RegisterMessage((*WantDHCP6ReplyEventsReply)(nil), "dhcp.WantDHCP6ReplyEventsReply")
}

// Messages returns list of all messages in this module.
func AllMessages() []api.Message {
	return []api.Message{
		(*DHCP6ClientsEnableDisable)(nil),
		(*DHCP6ClientsEnableDisableReply)(nil),
		(*DHCP6DuidLlSet)(nil),
		(*DHCP6DuidLlSetReply)(nil),
		(*DHCP6PdReplyEvent)(nil),
		(*DHCP6PdSendClientMessage)(nil),
		(*DHCP6PdSendClientMessageReply)(nil),
		(*DHCP6ReplyEvent)(nil),
		(*DHCP6SendClientMessage)(nil),
		(*DHCP6SendClientMessageReply)(nil),
		(*DHCPClientConfig)(nil),
		(*DHCPClientConfigReply)(nil),
		(*DHCPClientDetails)(nil),
		(*DHCPClientDump)(nil),
		(*DHCPComplEvent)(nil),
		(*DHCPPluginControlPing)(nil),
		(*DHCPPluginControlPingReply)(nil),
		(*DHCPPluginGetVersion)(nil),
		(*DHCPPluginGetVersionReply)(nil),
		(*DHCPProxyConfig)(nil),
		(*DHCPProxyConfigReply)(nil),
		(*DHCPProxyDetails)(nil),
		(*DHCPProxyDump)(nil),
		(*DHCPProxySetVss)(nil),
		(*DHCPProxySetVssReply)(nil),
		(*WantDHCP6PdReplyEvents)(nil),
		(*WantDHCP6PdReplyEventsReply)(nil),
		(*WantDHCP6ReplyEvents)(nil),
		(*WantDHCP6ReplyEventsReply)(nil),
	}
}

// RPCService represents RPC service API for dhcp module.
type RPCService interface {
	DumpDHCPClient(ctx context.Context, in *DHCPClientDump) (RPCService_DumpDHCPClientClient, error)
	DumpDHCPProxy(ctx context.Context, in *DHCPProxyDump) (RPCService_DumpDHCPProxyClient, error)
	DHCP6ClientsEnableDisable(ctx context.Context, in *DHCP6ClientsEnableDisable) (*DHCP6ClientsEnableDisableReply, error)
	DHCP6DuidLlSet(ctx context.Context, in *DHCP6DuidLlSet) (*DHCP6DuidLlSetReply, error)
	DHCP6PdSendClientMessage(ctx context.Context, in *DHCP6PdSendClientMessage) (*DHCP6PdSendClientMessageReply, error)
	DHCP6SendClientMessage(ctx context.Context, in *DHCP6SendClientMessage) (*DHCP6SendClientMessageReply, error)
	DHCPClientConfig(ctx context.Context, in *DHCPClientConfig) (*DHCPClientConfigReply, error)
	DHCPPluginControlPing(ctx context.Context, in *DHCPPluginControlPing) (*DHCPPluginControlPingReply, error)
	DHCPPluginGetVersion(ctx context.Context, in *DHCPPluginGetVersion) (*DHCPPluginGetVersionReply, error)
	DHCPProxyConfig(ctx context.Context, in *DHCPProxyConfig) (*DHCPProxyConfigReply, error)
	DHCPProxySetVss(ctx context.Context, in *DHCPProxySetVss) (*DHCPProxySetVssReply, error)
	WantDHCP6PdReplyEvents(ctx context.Context, in *WantDHCP6PdReplyEvents) (*WantDHCP6PdReplyEventsReply, error)
	WantDHCP6ReplyEvents(ctx context.Context, in *WantDHCP6ReplyEvents) (*WantDHCP6ReplyEventsReply, error)
}

type serviceClient struct {
	ch api.Channel
}

func NewServiceClient(ch api.Channel) RPCService {
	return &serviceClient{ch}
}

func (c *serviceClient) DumpDHCPClient(ctx context.Context, in *DHCPClientDump) (RPCService_DumpDHCPClientClient, error) {
	stream := c.ch.SendMultiRequest(in)
	x := &serviceClient_DumpDHCPClientClient{stream}
	return x, nil
}

type RPCService_DumpDHCPClientClient interface {
	Recv() (*DHCPClientDetails, error)
}

type serviceClient_DumpDHCPClientClient struct {
	api.MultiRequestCtx
}

func (c *serviceClient_DumpDHCPClientClient) Recv() (*DHCPClientDetails, error) {
	m := new(DHCPClientDetails)
	stop, err := c.MultiRequestCtx.ReceiveReply(m)
	if err != nil {
		return nil, err
	}
	if stop {
		return nil, io.EOF
	}
	return m, nil
}

func (c *serviceClient) DumpDHCPProxy(ctx context.Context, in *DHCPProxyDump) (RPCService_DumpDHCPProxyClient, error) {
	stream := c.ch.SendMultiRequest(in)
	x := &serviceClient_DumpDHCPProxyClient{stream}
	return x, nil
}

type RPCService_DumpDHCPProxyClient interface {
	Recv() (*DHCPProxyDetails, error)
}

type serviceClient_DumpDHCPProxyClient struct {
	api.MultiRequestCtx
}

func (c *serviceClient_DumpDHCPProxyClient) Recv() (*DHCPProxyDetails, error) {
	m := new(DHCPProxyDetails)
	stop, err := c.MultiRequestCtx.ReceiveReply(m)
	if err != nil {
		return nil, err
	}
	if stop {
		return nil, io.EOF
	}
	return m, nil
}

func (c *serviceClient) DHCP6ClientsEnableDisable(ctx context.Context, in *DHCP6ClientsEnableDisable) (*DHCP6ClientsEnableDisableReply, error) {
	out := new(DHCP6ClientsEnableDisableReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DHCP6DuidLlSet(ctx context.Context, in *DHCP6DuidLlSet) (*DHCP6DuidLlSetReply, error) {
	out := new(DHCP6DuidLlSetReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DHCP6PdSendClientMessage(ctx context.Context, in *DHCP6PdSendClientMessage) (*DHCP6PdSendClientMessageReply, error) {
	out := new(DHCP6PdSendClientMessageReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DHCP6SendClientMessage(ctx context.Context, in *DHCP6SendClientMessage) (*DHCP6SendClientMessageReply, error) {
	out := new(DHCP6SendClientMessageReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DHCPClientConfig(ctx context.Context, in *DHCPClientConfig) (*DHCPClientConfigReply, error) {
	out := new(DHCPClientConfigReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DHCPPluginControlPing(ctx context.Context, in *DHCPPluginControlPing) (*DHCPPluginControlPingReply, error) {
	out := new(DHCPPluginControlPingReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DHCPPluginGetVersion(ctx context.Context, in *DHCPPluginGetVersion) (*DHCPPluginGetVersionReply, error) {
	out := new(DHCPPluginGetVersionReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DHCPProxyConfig(ctx context.Context, in *DHCPProxyConfig) (*DHCPProxyConfigReply, error) {
	out := new(DHCPProxyConfigReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DHCPProxySetVss(ctx context.Context, in *DHCPProxySetVss) (*DHCPProxySetVssReply, error) {
	out := new(DHCPProxySetVssReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) WantDHCP6PdReplyEvents(ctx context.Context, in *WantDHCP6PdReplyEvents) (*WantDHCP6PdReplyEventsReply, error) {
	out := new(WantDHCP6PdReplyEventsReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) WantDHCP6ReplyEvents(ctx context.Context, in *WantDHCP6ReplyEvents) (*WantDHCP6ReplyEventsReply, error) {
	out := new(WantDHCP6ReplyEventsReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// This is a compile-time assertion to ensure that this generated file
// is compatible with the GoVPP api package it is being compiled against.
// A compilation error at this line likely means your copy of the
// GoVPP api package needs to be updated.
const _ = api.GoVppAPIPackageIsVersion1 // please upgrade the GoVPP api package

// Reference imports to suppress errors if they are not otherwise used.
var _ = api.RegisterMessage
var _ = bytes.NewBuffer
var _ = context.Background
var _ = io.Copy
var _ = strconv.Itoa
var _ = struc.Pack
