// Code generated by GoVPP's binapi-generator. DO NOT EDIT.
// source: /usr/share/vpp/api/core/ipsec_types.api.json

/*
Package ipsec_types is a generated VPP binary API for 'ipsec_types' module.

It consists of:
	  8 enums
	  5 aliases
	  8 types
	  1 union
*/
package ipsec_types

import (
	bytes "bytes"
	context "context"
	api "git.fd.io/govpp.git/api"
	struc "github.com/lunixbochs/struc"
	io "io"
	strconv "strconv"

	ip_types "go.ligato.io/vpp-agent/v3/plugins/vpp/binapi/vpp2001/ip_types"
)

const (
	// ModuleName is the name of this module.
	ModuleName = "ipsec_types"
	// VersionCrc is the CRC of this module.
	VersionCrc = 0x6e9f4c73
)

type AddressFamily = ip_types.AddressFamily

type IPDscp = ip_types.IPDscp

type IPEcn = ip_types.IPEcn

type IPProto = ip_types.IPProto

// IpsecCryptoAlg represents VPP binary API enum 'ipsec_crypto_alg'.
type IpsecCryptoAlg uint32

const (
	IPSEC_API_CRYPTO_ALG_NONE        IpsecCryptoAlg = 0
	IPSEC_API_CRYPTO_ALG_AES_CBC_128 IpsecCryptoAlg = 1
	IPSEC_API_CRYPTO_ALG_AES_CBC_192 IpsecCryptoAlg = 2
	IPSEC_API_CRYPTO_ALG_AES_CBC_256 IpsecCryptoAlg = 3
	IPSEC_API_CRYPTO_ALG_AES_CTR_128 IpsecCryptoAlg = 4
	IPSEC_API_CRYPTO_ALG_AES_CTR_192 IpsecCryptoAlg = 5
	IPSEC_API_CRYPTO_ALG_AES_CTR_256 IpsecCryptoAlg = 6
	IPSEC_API_CRYPTO_ALG_AES_GCM_128 IpsecCryptoAlg = 7
	IPSEC_API_CRYPTO_ALG_AES_GCM_192 IpsecCryptoAlg = 8
	IPSEC_API_CRYPTO_ALG_AES_GCM_256 IpsecCryptoAlg = 9
	IPSEC_API_CRYPTO_ALG_DES_CBC     IpsecCryptoAlg = 10
	IPSEC_API_CRYPTO_ALG_3DES_CBC    IpsecCryptoAlg = 11
)

var IpsecCryptoAlg_name = map[uint32]string{
	0:  "IPSEC_API_CRYPTO_ALG_NONE",
	1:  "IPSEC_API_CRYPTO_ALG_AES_CBC_128",
	2:  "IPSEC_API_CRYPTO_ALG_AES_CBC_192",
	3:  "IPSEC_API_CRYPTO_ALG_AES_CBC_256",
	4:  "IPSEC_API_CRYPTO_ALG_AES_CTR_128",
	5:  "IPSEC_API_CRYPTO_ALG_AES_CTR_192",
	6:  "IPSEC_API_CRYPTO_ALG_AES_CTR_256",
	7:  "IPSEC_API_CRYPTO_ALG_AES_GCM_128",
	8:  "IPSEC_API_CRYPTO_ALG_AES_GCM_192",
	9:  "IPSEC_API_CRYPTO_ALG_AES_GCM_256",
	10: "IPSEC_API_CRYPTO_ALG_DES_CBC",
	11: "IPSEC_API_CRYPTO_ALG_3DES_CBC",
}

var IpsecCryptoAlg_value = map[string]uint32{
	"IPSEC_API_CRYPTO_ALG_NONE":        0,
	"IPSEC_API_CRYPTO_ALG_AES_CBC_128": 1,
	"IPSEC_API_CRYPTO_ALG_AES_CBC_192": 2,
	"IPSEC_API_CRYPTO_ALG_AES_CBC_256": 3,
	"IPSEC_API_CRYPTO_ALG_AES_CTR_128": 4,
	"IPSEC_API_CRYPTO_ALG_AES_CTR_192": 5,
	"IPSEC_API_CRYPTO_ALG_AES_CTR_256": 6,
	"IPSEC_API_CRYPTO_ALG_AES_GCM_128": 7,
	"IPSEC_API_CRYPTO_ALG_AES_GCM_192": 8,
	"IPSEC_API_CRYPTO_ALG_AES_GCM_256": 9,
	"IPSEC_API_CRYPTO_ALG_DES_CBC":     10,
	"IPSEC_API_CRYPTO_ALG_3DES_CBC":    11,
}

func (x IpsecCryptoAlg) String() string {
	s, ok := IpsecCryptoAlg_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// IpsecIntegAlg represents VPP binary API enum 'ipsec_integ_alg'.
type IpsecIntegAlg uint32

const (
	IPSEC_API_INTEG_ALG_NONE        IpsecIntegAlg = 0
	IPSEC_API_INTEG_ALG_MD5_96      IpsecIntegAlg = 1
	IPSEC_API_INTEG_ALG_SHA1_96     IpsecIntegAlg = 2
	IPSEC_API_INTEG_ALG_SHA_256_96  IpsecIntegAlg = 3
	IPSEC_API_INTEG_ALG_SHA_256_128 IpsecIntegAlg = 4
	IPSEC_API_INTEG_ALG_SHA_384_192 IpsecIntegAlg = 5
	IPSEC_API_INTEG_ALG_SHA_512_256 IpsecIntegAlg = 6
)

var IpsecIntegAlg_name = map[uint32]string{
	0: "IPSEC_API_INTEG_ALG_NONE",
	1: "IPSEC_API_INTEG_ALG_MD5_96",
	2: "IPSEC_API_INTEG_ALG_SHA1_96",
	3: "IPSEC_API_INTEG_ALG_SHA_256_96",
	4: "IPSEC_API_INTEG_ALG_SHA_256_128",
	5: "IPSEC_API_INTEG_ALG_SHA_384_192",
	6: "IPSEC_API_INTEG_ALG_SHA_512_256",
}

var IpsecIntegAlg_value = map[string]uint32{
	"IPSEC_API_INTEG_ALG_NONE":        0,
	"IPSEC_API_INTEG_ALG_MD5_96":      1,
	"IPSEC_API_INTEG_ALG_SHA1_96":     2,
	"IPSEC_API_INTEG_ALG_SHA_256_96":  3,
	"IPSEC_API_INTEG_ALG_SHA_256_128": 4,
	"IPSEC_API_INTEG_ALG_SHA_384_192": 5,
	"IPSEC_API_INTEG_ALG_SHA_512_256": 6,
}

func (x IpsecIntegAlg) String() string {
	s, ok := IpsecIntegAlg_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// IpsecProto represents VPP binary API enum 'ipsec_proto'.
type IpsecProto uint32

const (
	IPSEC_API_PROTO_ESP IpsecProto = 1
	IPSEC_API_PROTO_AH  IpsecProto = 2
)

var IpsecProto_name = map[uint32]string{
	1: "IPSEC_API_PROTO_ESP",
	2: "IPSEC_API_PROTO_AH",
}

var IpsecProto_value = map[string]uint32{
	"IPSEC_API_PROTO_ESP": 1,
	"IPSEC_API_PROTO_AH":  2,
}

func (x IpsecProto) String() string {
	s, ok := IpsecProto_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// IpsecSadFlags represents VPP binary API enum 'ipsec_sad_flags'.
type IpsecSadFlags uint32

const (
	IPSEC_API_SAD_FLAG_NONE            IpsecSadFlags = 0
	IPSEC_API_SAD_FLAG_USE_ESN         IpsecSadFlags = 1
	IPSEC_API_SAD_FLAG_USE_ANTI_REPLAY IpsecSadFlags = 2
	IPSEC_API_SAD_FLAG_IS_TUNNEL       IpsecSadFlags = 4
	IPSEC_API_SAD_FLAG_IS_TUNNEL_V6    IpsecSadFlags = 8
	IPSEC_API_SAD_FLAG_UDP_ENCAP       IpsecSadFlags = 16
)

var IpsecSadFlags_name = map[uint32]string{
	0:  "IPSEC_API_SAD_FLAG_NONE",
	1:  "IPSEC_API_SAD_FLAG_USE_ESN",
	2:  "IPSEC_API_SAD_FLAG_USE_ANTI_REPLAY",
	4:  "IPSEC_API_SAD_FLAG_IS_TUNNEL",
	8:  "IPSEC_API_SAD_FLAG_IS_TUNNEL_V6",
	16: "IPSEC_API_SAD_FLAG_UDP_ENCAP",
}

var IpsecSadFlags_value = map[string]uint32{
	"IPSEC_API_SAD_FLAG_NONE":            0,
	"IPSEC_API_SAD_FLAG_USE_ESN":         1,
	"IPSEC_API_SAD_FLAG_USE_ANTI_REPLAY": 2,
	"IPSEC_API_SAD_FLAG_IS_TUNNEL":       4,
	"IPSEC_API_SAD_FLAG_IS_TUNNEL_V6":    8,
	"IPSEC_API_SAD_FLAG_UDP_ENCAP":       16,
}

func (x IpsecSadFlags) String() string {
	s, ok := IpsecSadFlags_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

type AddressWithPrefix = ip_types.AddressWithPrefix

type IP4Address = ip_types.IP4Address

type IP4AddressWithPrefix = ip_types.IP4AddressWithPrefix

type IP6Address = ip_types.IP6Address

type IP6AddressWithPrefix = ip_types.IP6AddressWithPrefix

type Address = ip_types.Address

type IP4Prefix = ip_types.IP4Prefix

type IP6Prefix = ip_types.IP6Prefix

// IpsecSadEntry represents VPP binary API type 'ipsec_sad_entry'.
type IpsecSadEntry struct {
	SadID              uint32
	Spi                uint32
	Protocol           IpsecProto
	CryptoAlgorithm    IpsecCryptoAlg
	CryptoKey          Key
	IntegrityAlgorithm IpsecIntegAlg
	IntegrityKey       Key
	Flags              IpsecSadFlags
	TunnelSrc          Address
	TunnelDst          Address
	TxTableID          uint32
	Salt               uint32
}

func (*IpsecSadEntry) GetTypeName() string { return "ipsec_sad_entry" }

// Key represents VPP binary API type 'key'.
type Key struct {
	Length uint8
	Data   []byte `struc:"[128]byte"`
}

func (*Key) GetTypeName() string { return "key" }

type Mprefix = ip_types.Mprefix

type Prefix = ip_types.Prefix

type PrefixMatcher = ip_types.PrefixMatcher

type AddressUnion = ip_types.AddressUnion

// This is a compile-time assertion to ensure that this generated file
// is compatible with the GoVPP api package it is being compiled against.
// A compilation error at this line likely means your copy of the
// GoVPP api package needs to be updated.
const _ = api.GoVppAPIPackageIsVersion1 // please upgrade the GoVPP api package

// Reference imports to suppress errors if they are not otherwise used.
var _ = api.RegisterMessage
var _ = bytes.NewBuffer
var _ = context.Background
var _ = io.Copy
var _ = strconv.Itoa
var _ = struc.Pack
