// Code generated by GoVPP's binapi-generator. DO NOT EDIT.
// source: /usr/share/vpp/api/plugins/flowprobe.api.json

/*
Package flowprobe is a generated VPP binary API for 'flowprobe' module.

It consists of:
	  8 enums
	  1 alias
	  4 messages
	  2 services
*/
package flowprobe

import (
	"bytes"
	"context"
	"io"
	"strconv"

	api "git.fd.io/govpp.git/api"
	struc "github.com/lunixbochs/struc"

	interface_types "go.ligato.io/vpp-agent/v3/plugins/vpp/binapi/vpp2001/interface_types"
)

const (
	// ModuleName is the name of this module.
	ModuleName = "flowprobe"
	// VersionCrc is the CRC of this module.
	VersionCrc = 0xbb4dfc0d
)

// FlowprobeRecordFlags represents VPP binary API enum 'flowprobe_record_flags'.
type FlowprobeRecordFlags uint8

const (
	FLOWPROBE_RECORD_FLAG_L2 FlowprobeRecordFlags = 1
	FLOWPROBE_RECORD_FLAG_L3 FlowprobeRecordFlags = 2
	FLOWPROBE_RECORD_FLAG_L4 FlowprobeRecordFlags = 4
)

var FlowprobeRecordFlags_name = map[uint8]string{
	1: "FLOWPROBE_RECORD_FLAG_L2",
	2: "FLOWPROBE_RECORD_FLAG_L3",
	4: "FLOWPROBE_RECORD_FLAG_L4",
}

var FlowprobeRecordFlags_value = map[string]uint8{
	"FLOWPROBE_RECORD_FLAG_L2": 1,
	"FLOWPROBE_RECORD_FLAG_L3": 2,
	"FLOWPROBE_RECORD_FLAG_L4": 4,
}

func (x FlowprobeRecordFlags) String() string {
	s, ok := FlowprobeRecordFlags_name[uint8(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// FlowprobeWhichFlags represents VPP binary API enum 'flowprobe_which_flags'.
type FlowprobeWhichFlags uint8

const (
	FLOWPROBE_WHICH_FLAG_IP4 FlowprobeWhichFlags = 1
	FLOWPROBE_WHICH_FLAG_L2  FlowprobeWhichFlags = 2
	FLOWPROBE_WHICH_FLAG_IP6 FlowprobeWhichFlags = 4
)

var FlowprobeWhichFlags_name = map[uint8]string{
	1: "FLOWPROBE_WHICH_FLAG_IP4",
	2: "FLOWPROBE_WHICH_FLAG_L2",
	4: "FLOWPROBE_WHICH_FLAG_IP6",
}

var FlowprobeWhichFlags_value = map[string]uint8{
	"FLOWPROBE_WHICH_FLAG_IP4": 1,
	"FLOWPROBE_WHICH_FLAG_L2":  2,
	"FLOWPROBE_WHICH_FLAG_IP6": 4,
}

func (x FlowprobeWhichFlags) String() string {
	s, ok := FlowprobeWhichFlags_name[uint8(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

type IfStatusFlags = interface_types.IfStatusFlags

type IfType = interface_types.IfType

type LinkDuplex = interface_types.LinkDuplex

type MtuProto = interface_types.MtuProto

type RxMode = interface_types.RxMode

type SubIfFlags = interface_types.SubIfFlags

type InterfaceIndex = interface_types.InterfaceIndex

// FlowprobeParams represents VPP binary API message 'flowprobe_params'.
type FlowprobeParams struct {
	RecordFlags  FlowprobeRecordFlags
	ActiveTimer  uint32
	PassiveTimer uint32
}

func (m *FlowprobeParams) Reset()                        { *m = FlowprobeParams{} }
func (*FlowprobeParams) GetMessageName() string          { return "flowprobe_params" }
func (*FlowprobeParams) GetCrcString() string            { return "baa46c09" }
func (*FlowprobeParams) GetMessageType() api.MessageType { return api.RequestMessage }

// FlowprobeParamsReply represents VPP binary API message 'flowprobe_params_reply'.
type FlowprobeParamsReply struct {
	Retval int32
}

func (m *FlowprobeParamsReply) Reset()                        { *m = FlowprobeParamsReply{} }
func (*FlowprobeParamsReply) GetMessageName() string          { return "flowprobe_params_reply" }
func (*FlowprobeParamsReply) GetCrcString() string            { return "e8d4e804" }
func (*FlowprobeParamsReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// FlowprobeTxInterfaceAddDel represents VPP binary API message 'flowprobe_tx_interface_add_del'.
type FlowprobeTxInterfaceAddDel struct {
	IsAdd     bool
	Which     FlowprobeWhichFlags
	SwIfIndex InterfaceIndex
}

func (m *FlowprobeTxInterfaceAddDel) Reset()                        { *m = FlowprobeTxInterfaceAddDel{} }
func (*FlowprobeTxInterfaceAddDel) GetMessageName() string          { return "flowprobe_tx_interface_add_del" }
func (*FlowprobeTxInterfaceAddDel) GetCrcString() string            { return "b782c976" }
func (*FlowprobeTxInterfaceAddDel) GetMessageType() api.MessageType { return api.RequestMessage }

// FlowprobeTxInterfaceAddDelReply represents VPP binary API message 'flowprobe_tx_interface_add_del_reply'.
type FlowprobeTxInterfaceAddDelReply struct {
	Retval int32
}

func (m *FlowprobeTxInterfaceAddDelReply) Reset() { *m = FlowprobeTxInterfaceAddDelReply{} }
func (*FlowprobeTxInterfaceAddDelReply) GetMessageName() string {
	return "flowprobe_tx_interface_add_del_reply"
}
func (*FlowprobeTxInterfaceAddDelReply) GetCrcString() string            { return "e8d4e804" }
func (*FlowprobeTxInterfaceAddDelReply) GetMessageType() api.MessageType { return api.ReplyMessage }

func init() {
	api.RegisterMessage((*FlowprobeParams)(nil), "flowprobe.FlowprobeParams")
	api.RegisterMessage((*FlowprobeParamsReply)(nil), "flowprobe.FlowprobeParamsReply")
	api.RegisterMessage((*FlowprobeTxInterfaceAddDel)(nil), "flowprobe.FlowprobeTxInterfaceAddDel")
	api.RegisterMessage((*FlowprobeTxInterfaceAddDelReply)(nil), "flowprobe.FlowprobeTxInterfaceAddDelReply")
}

// Messages returns list of all messages in this module.
func AllMessages() []api.Message {
	return []api.Message{
		(*FlowprobeParams)(nil),
		(*FlowprobeParamsReply)(nil),
		(*FlowprobeTxInterfaceAddDel)(nil),
		(*FlowprobeTxInterfaceAddDelReply)(nil),
	}
}

// RPCService represents RPC service API for flowprobe module.
type RPCService interface {
	FlowprobeParams(ctx context.Context, in *FlowprobeParams) (*FlowprobeParamsReply, error)
	FlowprobeTxInterfaceAddDel(ctx context.Context, in *FlowprobeTxInterfaceAddDel) (*FlowprobeTxInterfaceAddDelReply, error)
}

type serviceClient struct {
	ch api.Channel
}

func NewServiceClient(ch api.Channel) RPCService {
	return &serviceClient{ch}
}

func (c *serviceClient) FlowprobeParams(ctx context.Context, in *FlowprobeParams) (*FlowprobeParamsReply, error) {
	out := new(FlowprobeParamsReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) FlowprobeTxInterfaceAddDel(ctx context.Context, in *FlowprobeTxInterfaceAddDel) (*FlowprobeTxInterfaceAddDelReply, error) {
	out := new(FlowprobeTxInterfaceAddDelReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// This is a compile-time assertion to ensure that this generated file
// is compatible with the GoVPP api package it is being compiled against.
// A compilation error at this line likely means your copy of the
// GoVPP api package needs to be updated.
const _ = api.GoVppAPIPackageIsVersion1 // please upgrade the GoVPP api package

// Reference imports to suppress errors if they are not otherwise used.
var _ = api.RegisterMessage
var _ = bytes.NewBuffer
var _ = context.Background
var _ = io.Copy
var _ = strconv.Itoa
var _ = struc.Pack
