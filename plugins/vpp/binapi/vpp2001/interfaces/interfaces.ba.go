// Code generated by GoVPP's binapi-generator. DO NOT EDIT.
// source: /usr/share/vpp/api/core/interface.api.json

/*
Package interfaces is a generated VPP binary API for 'interface' module.

It consists of:
	 10 enums
	  4 aliases
	  6 types
	  1 union
	 51 messages
	 25 services
*/
package interfaces

import (
	bytes "bytes"
	context "context"
	api "git.fd.io/govpp.git/api"
	struc "github.com/lunixbochs/struc"
	io "io"
	strconv "strconv"
)

const (
	// ModuleName is the name of this module.
	ModuleName = "interface"
	// APIVersion is the API version of this module.
	APIVersion = "3.1.0"
	// VersionCrc is the CRC of this module.
	VersionCrc = 0xd61ab705
)

// AddressFamily represents VPP binary API enum 'address_family'.
type AddressFamily uint32

const (
	ADDRESS_IP4 AddressFamily = 0
	ADDRESS_IP6 AddressFamily = 1
)

var AddressFamily_name = map[uint32]string{
	0: "ADDRESS_IP4",
	1: "ADDRESS_IP6",
}

var AddressFamily_value = map[string]uint32{
	"ADDRESS_IP4": 0,
	"ADDRESS_IP6": 1,
}

func (x AddressFamily) String() string {
	s, ok := AddressFamily_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// IfStatusFlags represents VPP binary API enum 'if_status_flags'.
type IfStatusFlags uint32

const (
	IF_STATUS_API_FLAG_ADMIN_UP IfStatusFlags = 1
	IF_STATUS_API_FLAG_LINK_UP  IfStatusFlags = 2
)

var IfStatusFlags_name = map[uint32]string{
	1: "IF_STATUS_API_FLAG_ADMIN_UP",
	2: "IF_STATUS_API_FLAG_LINK_UP",
}

var IfStatusFlags_value = map[string]uint32{
	"IF_STATUS_API_FLAG_ADMIN_UP": 1,
	"IF_STATUS_API_FLAG_LINK_UP":  2,
}

func (x IfStatusFlags) String() string {
	s, ok := IfStatusFlags_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// IfType represents VPP binary API enum 'if_type'.
type IfType uint32

const (
	IF_API_TYPE_HARDWARE IfType = 1
	IF_API_TYPE_SUB      IfType = 2
	IF_API_TYPE_P2P      IfType = 3
	IF_API_TYPE_PIPE     IfType = 4
)

var IfType_name = map[uint32]string{
	1: "IF_API_TYPE_HARDWARE",
	2: "IF_API_TYPE_SUB",
	3: "IF_API_TYPE_P2P",
	4: "IF_API_TYPE_PIPE",
}

var IfType_value = map[string]uint32{
	"IF_API_TYPE_HARDWARE": 1,
	"IF_API_TYPE_SUB":      2,
	"IF_API_TYPE_P2P":      3,
	"IF_API_TYPE_PIPE":     4,
}

func (x IfType) String() string {
	s, ok := IfType_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// IPDscp represents VPP binary API enum 'ip_dscp'.
type IPDscp uint8

const (
	IP_API_DSCP_CS0  IPDscp = 0
	IP_API_DSCP_CS1  IPDscp = 8
	IP_API_DSCP_AF11 IPDscp = 10
	IP_API_DSCP_AF12 IPDscp = 12
	IP_API_DSCP_AF13 IPDscp = 14
	IP_API_DSCP_CS2  IPDscp = 16
	IP_API_DSCP_AF21 IPDscp = 18
	IP_API_DSCP_AF22 IPDscp = 20
	IP_API_DSCP_AF23 IPDscp = 22
	IP_API_DSCP_CS3  IPDscp = 24
	IP_API_DSCP_AF31 IPDscp = 26
	IP_API_DSCP_AF32 IPDscp = 28
	IP_API_DSCP_AF33 IPDscp = 30
	IP_API_DSCP_CS4  IPDscp = 32
	IP_API_DSCP_AF41 IPDscp = 34
	IP_API_DSCP_AF42 IPDscp = 36
	IP_API_DSCP_AF43 IPDscp = 38
	IP_API_DSCP_CS5  IPDscp = 40
	IP_API_DSCP_EF   IPDscp = 46
	IP_API_DSCP_CS6  IPDscp = 48
	IP_API_DSCP_CS7  IPDscp = 50
)

var IPDscp_name = map[uint8]string{
	0:  "IP_API_DSCP_CS0",
	8:  "IP_API_DSCP_CS1",
	10: "IP_API_DSCP_AF11",
	12: "IP_API_DSCP_AF12",
	14: "IP_API_DSCP_AF13",
	16: "IP_API_DSCP_CS2",
	18: "IP_API_DSCP_AF21",
	20: "IP_API_DSCP_AF22",
	22: "IP_API_DSCP_AF23",
	24: "IP_API_DSCP_CS3",
	26: "IP_API_DSCP_AF31",
	28: "IP_API_DSCP_AF32",
	30: "IP_API_DSCP_AF33",
	32: "IP_API_DSCP_CS4",
	34: "IP_API_DSCP_AF41",
	36: "IP_API_DSCP_AF42",
	38: "IP_API_DSCP_AF43",
	40: "IP_API_DSCP_CS5",
	46: "IP_API_DSCP_EF",
	48: "IP_API_DSCP_CS6",
	50: "IP_API_DSCP_CS7",
}

var IPDscp_value = map[string]uint8{
	"IP_API_DSCP_CS0":  0,
	"IP_API_DSCP_CS1":  8,
	"IP_API_DSCP_AF11": 10,
	"IP_API_DSCP_AF12": 12,
	"IP_API_DSCP_AF13": 14,
	"IP_API_DSCP_CS2":  16,
	"IP_API_DSCP_AF21": 18,
	"IP_API_DSCP_AF22": 20,
	"IP_API_DSCP_AF23": 22,
	"IP_API_DSCP_CS3":  24,
	"IP_API_DSCP_AF31": 26,
	"IP_API_DSCP_AF32": 28,
	"IP_API_DSCP_AF33": 30,
	"IP_API_DSCP_CS4":  32,
	"IP_API_DSCP_AF41": 34,
	"IP_API_DSCP_AF42": 36,
	"IP_API_DSCP_AF43": 38,
	"IP_API_DSCP_CS5":  40,
	"IP_API_DSCP_EF":   46,
	"IP_API_DSCP_CS6":  48,
	"IP_API_DSCP_CS7":  50,
}

func (x IPDscp) String() string {
	s, ok := IPDscp_name[uint8(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// IPEcn represents VPP binary API enum 'ip_ecn'.
type IPEcn uint8

const (
	IP_API_ECN_NONE IPEcn = 0
	IP_API_ECN_ECT0 IPEcn = 1
	IP_API_ECN_ECT1 IPEcn = 2
	IP_API_ECN_CE   IPEcn = 3
)

var IPEcn_name = map[uint8]string{
	0: "IP_API_ECN_NONE",
	1: "IP_API_ECN_ECT0",
	2: "IP_API_ECN_ECT1",
	3: "IP_API_ECN_CE",
}

var IPEcn_value = map[string]uint8{
	"IP_API_ECN_NONE": 0,
	"IP_API_ECN_ECT0": 1,
	"IP_API_ECN_ECT1": 2,
	"IP_API_ECN_CE":   3,
}

func (x IPEcn) String() string {
	s, ok := IPEcn_name[uint8(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// IPProto represents VPP binary API enum 'ip_proto'.
type IPProto uint32

const (
	IP_API_PROTO_HOPOPT   IPProto = 0
	IP_API_PROTO_ICMP     IPProto = 1
	IP_API_PROTO_IGMP     IPProto = 2
	IP_API_PROTO_TCP      IPProto = 6
	IP_API_PROTO_UDP      IPProto = 17
	IP_API_PROTO_GRE      IPProto = 47
	IP_API_PROTO_AH       IPProto = 50
	IP_API_PROTO_ESP      IPProto = 51
	IP_API_PROTO_EIGRP    IPProto = 88
	IP_API_PROTO_OSPF     IPProto = 89
	IP_API_PROTO_SCTP     IPProto = 132
	IP_API_PROTO_RESERVED IPProto = 255
)

var IPProto_name = map[uint32]string{
	0:   "IP_API_PROTO_HOPOPT",
	1:   "IP_API_PROTO_ICMP",
	2:   "IP_API_PROTO_IGMP",
	6:   "IP_API_PROTO_TCP",
	17:  "IP_API_PROTO_UDP",
	47:  "IP_API_PROTO_GRE",
	50:  "IP_API_PROTO_AH",
	51:  "IP_API_PROTO_ESP",
	88:  "IP_API_PROTO_EIGRP",
	89:  "IP_API_PROTO_OSPF",
	132: "IP_API_PROTO_SCTP",
	255: "IP_API_PROTO_RESERVED",
}

var IPProto_value = map[string]uint32{
	"IP_API_PROTO_HOPOPT":   0,
	"IP_API_PROTO_ICMP":     1,
	"IP_API_PROTO_IGMP":     2,
	"IP_API_PROTO_TCP":      6,
	"IP_API_PROTO_UDP":      17,
	"IP_API_PROTO_GRE":      47,
	"IP_API_PROTO_AH":       50,
	"IP_API_PROTO_ESP":      51,
	"IP_API_PROTO_EIGRP":    88,
	"IP_API_PROTO_OSPF":     89,
	"IP_API_PROTO_SCTP":     132,
	"IP_API_PROTO_RESERVED": 255,
}

func (x IPProto) String() string {
	s, ok := IPProto_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// LinkDuplex represents VPP binary API enum 'link_duplex'.
type LinkDuplex uint32

const (
	LINK_DUPLEX_API_UNKNOWN LinkDuplex = 0
	LINK_DUPLEX_API_HALF    LinkDuplex = 1
	LINK_DUPLEX_API_FULL    LinkDuplex = 2
)

var LinkDuplex_name = map[uint32]string{
	0: "LINK_DUPLEX_API_UNKNOWN",
	1: "LINK_DUPLEX_API_HALF",
	2: "LINK_DUPLEX_API_FULL",
}

var LinkDuplex_value = map[string]uint32{
	"LINK_DUPLEX_API_UNKNOWN": 0,
	"LINK_DUPLEX_API_HALF":    1,
	"LINK_DUPLEX_API_FULL":    2,
}

func (x LinkDuplex) String() string {
	s, ok := LinkDuplex_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// MtuProto represents VPP binary API enum 'mtu_proto'.
type MtuProto uint32

const (
	MTU_PROTO_API_L3   MtuProto = 1
	MTU_PROTO_API_IP4  MtuProto = 2
	MTU_PROTO_API_IP6  MtuProto = 3
	MTU_PROTO_API_MPLS MtuProto = 4
	MTU_PROTO_API_N    MtuProto = 5
)

var MtuProto_name = map[uint32]string{
	1: "MTU_PROTO_API_L3",
	2: "MTU_PROTO_API_IP4",
	3: "MTU_PROTO_API_IP6",
	4: "MTU_PROTO_API_MPLS",
	5: "MTU_PROTO_API_N",
}

var MtuProto_value = map[string]uint32{
	"MTU_PROTO_API_L3":   1,
	"MTU_PROTO_API_IP4":  2,
	"MTU_PROTO_API_IP6":  3,
	"MTU_PROTO_API_MPLS": 4,
	"MTU_PROTO_API_N":    5,
}

func (x MtuProto) String() string {
	s, ok := MtuProto_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// RxMode represents VPP binary API enum 'rx_mode'.
type RxMode uint32

const (
	RX_MODE_API_UNKNOWN   RxMode = 0
	RX_MODE_API_POLLING   RxMode = 1
	RX_MODE_API_INTERRUPT RxMode = 2
	RX_MODE_API_ADAPTIVE  RxMode = 3
	RX_MODE_API_DEFAULT   RxMode = 4
)

var RxMode_name = map[uint32]string{
	0: "RX_MODE_API_UNKNOWN",
	1: "RX_MODE_API_POLLING",
	2: "RX_MODE_API_INTERRUPT",
	3: "RX_MODE_API_ADAPTIVE",
	4: "RX_MODE_API_DEFAULT",
}

var RxMode_value = map[string]uint32{
	"RX_MODE_API_UNKNOWN":   0,
	"RX_MODE_API_POLLING":   1,
	"RX_MODE_API_INTERRUPT": 2,
	"RX_MODE_API_ADAPTIVE":  3,
	"RX_MODE_API_DEFAULT":   4,
}

func (x RxMode) String() string {
	s, ok := RxMode_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// SubIfFlags represents VPP binary API enum 'sub_if_flags'.
type SubIfFlags uint32

const (
	SUB_IF_API_FLAG_NO_TAGS           SubIfFlags = 1
	SUB_IF_API_FLAG_ONE_TAG           SubIfFlags = 2
	SUB_IF_API_FLAG_TWO_TAGS          SubIfFlags = 4
	SUB_IF_API_FLAG_DOT1AD            SubIfFlags = 8
	SUB_IF_API_FLAG_EXACT_MATCH       SubIfFlags = 16
	SUB_IF_API_FLAG_DEFAULT           SubIfFlags = 32
	SUB_IF_API_FLAG_OUTER_VLAN_ID_ANY SubIfFlags = 64
	SUB_IF_API_FLAG_INNER_VLAN_ID_ANY SubIfFlags = 128
	SUB_IF_API_FLAG_MASK_VNET         SubIfFlags = 254
	SUB_IF_API_FLAG_DOT1AH            SubIfFlags = 256
)

var SubIfFlags_name = map[uint32]string{
	1:   "SUB_IF_API_FLAG_NO_TAGS",
	2:   "SUB_IF_API_FLAG_ONE_TAG",
	4:   "SUB_IF_API_FLAG_TWO_TAGS",
	8:   "SUB_IF_API_FLAG_DOT1AD",
	16:  "SUB_IF_API_FLAG_EXACT_MATCH",
	32:  "SUB_IF_API_FLAG_DEFAULT",
	64:  "SUB_IF_API_FLAG_OUTER_VLAN_ID_ANY",
	128: "SUB_IF_API_FLAG_INNER_VLAN_ID_ANY",
	254: "SUB_IF_API_FLAG_MASK_VNET",
	256: "SUB_IF_API_FLAG_DOT1AH",
}

var SubIfFlags_value = map[string]uint32{
	"SUB_IF_API_FLAG_NO_TAGS":           1,
	"SUB_IF_API_FLAG_ONE_TAG":           2,
	"SUB_IF_API_FLAG_TWO_TAGS":          4,
	"SUB_IF_API_FLAG_DOT1AD":            8,
	"SUB_IF_API_FLAG_EXACT_MATCH":       16,
	"SUB_IF_API_FLAG_DEFAULT":           32,
	"SUB_IF_API_FLAG_OUTER_VLAN_ID_ANY": 64,
	"SUB_IF_API_FLAG_INNER_VLAN_ID_ANY": 128,
	"SUB_IF_API_FLAG_MASK_VNET":         254,
	"SUB_IF_API_FLAG_DOT1AH":            256,
}

func (x SubIfFlags) String() string {
	s, ok := SubIfFlags_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// InterfaceIndex represents VPP binary API alias 'interface_index'.
type InterfaceIndex uint32

// IP4Address represents VPP binary API alias 'ip4_address'.
type IP4Address [4]uint8

// IP6Address represents VPP binary API alias 'ip6_address'.
type IP6Address [16]uint8

// MacAddress represents VPP binary API alias 'mac_address'.
type MacAddress [6]uint8

// Address represents VPP binary API type 'address'.
type Address struct {
	Af AddressFamily
	Un AddressUnion
}

func (*Address) GetTypeName() string {
	return "address"
}

// IP4Prefix represents VPP binary API type 'ip4_prefix'.
type IP4Prefix struct {
	Address IP4Address
	Len     uint8
}

func (*IP4Prefix) GetTypeName() string {
	return "ip4_prefix"
}

// IP6Prefix represents VPP binary API type 'ip6_prefix'.
type IP6Prefix struct {
	Address IP6Address
	Len     uint8
}

func (*IP6Prefix) GetTypeName() string {
	return "ip6_prefix"
}

// Mprefix represents VPP binary API type 'mprefix'.
type Mprefix struct {
	Af               AddressFamily
	GrpAddressLength uint16
	GrpAddress       AddressUnion
	SrcAddress       AddressUnion
}

func (*Mprefix) GetTypeName() string {
	return "mprefix"
}

// Prefix represents VPP binary API type 'prefix'.
type Prefix struct {
	Address Address
	Len     uint8
}

func (*Prefix) GetTypeName() string {
	return "prefix"
}

// PrefixMatcher represents VPP binary API type 'prefix_matcher'.
type PrefixMatcher struct {
	Le uint8
	Ge uint8
}

func (*PrefixMatcher) GetTypeName() string {
	return "prefix_matcher"
}

// AddressUnion represents VPP binary API union 'address_union'.
type AddressUnion struct {
	XXX_UnionData [16]byte
}

func (*AddressUnion) GetTypeName() string {
	return "address_union"
}

func AddressUnionIP4(a IP4Address) (u AddressUnion) {
	u.SetIP4(a)
	return
}
func (u *AddressUnion) SetIP4(a IP4Address) {
	var b = new(bytes.Buffer)
	if err := struc.Pack(b, &a); err != nil {
		return
	}
	copy(u.XXX_UnionData[:], b.Bytes())
}
func (u *AddressUnion) GetIP4() (a IP4Address) {
	var b = bytes.NewReader(u.XXX_UnionData[:])
	struc.Unpack(b, &a)
	return
}

func AddressUnionIP6(a IP6Address) (u AddressUnion) {
	u.SetIP6(a)
	return
}
func (u *AddressUnion) SetIP6(a IP6Address) {
	var b = new(bytes.Buffer)
	if err := struc.Pack(b, &a); err != nil {
		return
	}
	copy(u.XXX_UnionData[:], b.Bytes())
}
func (u *AddressUnion) GetIP6() (a IP6Address) {
	var b = bytes.NewReader(u.XXX_UnionData[:])
	struc.Unpack(b, &a)
	return
}

// CollectDetailedInterfaceStats represents VPP binary API message 'collect_detailed_interface_stats'.
type CollectDetailedInterfaceStats struct {
	SwIfIndex     InterfaceIndex
	EnableDisable bool
}

func (*CollectDetailedInterfaceStats) GetMessageName() string {
	return "collect_detailed_interface_stats"
}
func (*CollectDetailedInterfaceStats) GetCrcString() string {
	return "35049db2"
}
func (*CollectDetailedInterfaceStats) GetMessageType() api.MessageType {
	return api.RequestMessage
}

// CollectDetailedInterfaceStatsReply represents VPP binary API message 'collect_detailed_interface_stats_reply'.
type CollectDetailedInterfaceStatsReply struct {
	Retval int32
}

func (*CollectDetailedInterfaceStatsReply) GetMessageName() string {
	return "collect_detailed_interface_stats_reply"
}
func (*CollectDetailedInterfaceStatsReply) GetCrcString() string {
	return "e8d4e804"
}
func (*CollectDetailedInterfaceStatsReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

// CreateLoopback represents VPP binary API message 'create_loopback'.
type CreateLoopback struct {
	MacAddress MacAddress
}

func (*CreateLoopback) GetMessageName() string {
	return "create_loopback"
}
func (*CreateLoopback) GetCrcString() string {
	return "16e13d38"
}
func (*CreateLoopback) GetMessageType() api.MessageType {
	return api.RequestMessage
}

// CreateLoopbackInstance represents VPP binary API message 'create_loopback_instance'.
type CreateLoopbackInstance struct {
	MacAddress   MacAddress
	IsSpecified  bool
	UserInstance uint32
}

func (*CreateLoopbackInstance) GetMessageName() string {
	return "create_loopback_instance"
}
func (*CreateLoopbackInstance) GetCrcString() string {
	return "c9794285"
}
func (*CreateLoopbackInstance) GetMessageType() api.MessageType {
	return api.RequestMessage
}

// CreateLoopbackInstanceReply represents VPP binary API message 'create_loopback_instance_reply'.
type CreateLoopbackInstanceReply struct {
	Retval    int32
	SwIfIndex InterfaceIndex
}

func (*CreateLoopbackInstanceReply) GetMessageName() string {
	return "create_loopback_instance_reply"
}
func (*CreateLoopbackInstanceReply) GetCrcString() string {
	return "903324db"
}
func (*CreateLoopbackInstanceReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

// CreateLoopbackReply represents VPP binary API message 'create_loopback_reply'.
type CreateLoopbackReply struct {
	Retval    int32
	SwIfIndex InterfaceIndex
}

func (*CreateLoopbackReply) GetMessageName() string {
	return "create_loopback_reply"
}
func (*CreateLoopbackReply) GetCrcString() string {
	return "903324db"
}
func (*CreateLoopbackReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

// CreateSubif represents VPP binary API message 'create_subif'.
type CreateSubif struct {
	SwIfIndex   InterfaceIndex
	SubID       uint32
	SubIfFlags  SubIfFlags
	OuterVlanID uint16
	InnerVlanID uint16
}

func (*CreateSubif) GetMessageName() string {
	return "create_subif"
}
func (*CreateSubif) GetCrcString() string {
	return "a51a5dd3"
}
func (*CreateSubif) GetMessageType() api.MessageType {
	return api.RequestMessage
}

// CreateSubifReply represents VPP binary API message 'create_subif_reply'.
type CreateSubifReply struct {
	Retval    int32
	SwIfIndex InterfaceIndex
}

func (*CreateSubifReply) GetMessageName() string {
	return "create_subif_reply"
}
func (*CreateSubifReply) GetCrcString() string {
	return "903324db"
}
func (*CreateSubifReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

// CreateVlanSubif represents VPP binary API message 'create_vlan_subif'.
type CreateVlanSubif struct {
	SwIfIndex InterfaceIndex
	VlanID    uint32
}

func (*CreateVlanSubif) GetMessageName() string {
	return "create_vlan_subif"
}
func (*CreateVlanSubif) GetCrcString() string {
	return "bc534dd3"
}
func (*CreateVlanSubif) GetMessageType() api.MessageType {
	return api.RequestMessage
}

// CreateVlanSubifReply represents VPP binary API message 'create_vlan_subif_reply'.
type CreateVlanSubifReply struct {
	Retval    int32
	SwIfIndex InterfaceIndex
}

func (*CreateVlanSubifReply) GetMessageName() string {
	return "create_vlan_subif_reply"
}
func (*CreateVlanSubifReply) GetCrcString() string {
	return "903324db"
}
func (*CreateVlanSubifReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

// DeleteLoopback represents VPP binary API message 'delete_loopback'.
type DeleteLoopback struct {
	SwIfIndex InterfaceIndex
}

func (*DeleteLoopback) GetMessageName() string {
	return "delete_loopback"
}
func (*DeleteLoopback) GetCrcString() string {
	return "d85aab0d"
}
func (*DeleteLoopback) GetMessageType() api.MessageType {
	return api.RequestMessage
}

// DeleteLoopbackReply represents VPP binary API message 'delete_loopback_reply'.
type DeleteLoopbackReply struct {
	Retval int32
}

func (*DeleteLoopbackReply) GetMessageName() string {
	return "delete_loopback_reply"
}
func (*DeleteLoopbackReply) GetCrcString() string {
	return "e8d4e804"
}
func (*DeleteLoopbackReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

// DeleteSubif represents VPP binary API message 'delete_subif'.
type DeleteSubif struct {
	SwIfIndex InterfaceIndex
}

func (*DeleteSubif) GetMessageName() string {
	return "delete_subif"
}
func (*DeleteSubif) GetCrcString() string {
	return "d85aab0d"
}
func (*DeleteSubif) GetMessageType() api.MessageType {
	return api.RequestMessage
}

// DeleteSubifReply represents VPP binary API message 'delete_subif_reply'.
type DeleteSubifReply struct {
	Retval int32
}

func (*DeleteSubifReply) GetMessageName() string {
	return "delete_subif_reply"
}
func (*DeleteSubifReply) GetCrcString() string {
	return "e8d4e804"
}
func (*DeleteSubifReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

// HwInterfaceSetMtu represents VPP binary API message 'hw_interface_set_mtu'.
type HwInterfaceSetMtu struct {
	SwIfIndex InterfaceIndex
	Mtu       uint16
}

func (*HwInterfaceSetMtu) GetMessageName() string {
	return "hw_interface_set_mtu"
}
func (*HwInterfaceSetMtu) GetCrcString() string {
	return "e6c533aa"
}
func (*HwInterfaceSetMtu) GetMessageType() api.MessageType {
	return api.RequestMessage
}

// HwInterfaceSetMtuReply represents VPP binary API message 'hw_interface_set_mtu_reply'.
type HwInterfaceSetMtuReply struct {
	Retval int32
}

func (*HwInterfaceSetMtuReply) GetMessageName() string {
	return "hw_interface_set_mtu_reply"
}
func (*HwInterfaceSetMtuReply) GetCrcString() string {
	return "e8d4e804"
}
func (*HwInterfaceSetMtuReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

// InterfaceNameRenumber represents VPP binary API message 'interface_name_renumber'.
type InterfaceNameRenumber struct {
	SwIfIndex          InterfaceIndex
	NewShowDevInstance uint32
}

func (*InterfaceNameRenumber) GetMessageName() string {
	return "interface_name_renumber"
}
func (*InterfaceNameRenumber) GetCrcString() string {
	return "642d5410"
}
func (*InterfaceNameRenumber) GetMessageType() api.MessageType {
	return api.RequestMessage
}

// InterfaceNameRenumberReply represents VPP binary API message 'interface_name_renumber_reply'.
type InterfaceNameRenumberReply struct {
	Retval int32
}

func (*InterfaceNameRenumberReply) GetMessageName() string {
	return "interface_name_renumber_reply"
}
func (*InterfaceNameRenumberReply) GetCrcString() string {
	return "e8d4e804"
}
func (*InterfaceNameRenumberReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

// SwInterfaceAddDelAddress represents VPP binary API message 'sw_interface_add_del_address'.
type SwInterfaceAddDelAddress struct {
	SwIfIndex InterfaceIndex
	IsAdd     bool
	DelAll    bool
	Prefix    Prefix
}

func (*SwInterfaceAddDelAddress) GetMessageName() string {
	return "sw_interface_add_del_address"
}
func (*SwInterfaceAddDelAddress) GetCrcString() string {
	return "43a487bd"
}
func (*SwInterfaceAddDelAddress) GetMessageType() api.MessageType {
	return api.RequestMessage
}

// SwInterfaceAddDelAddressReply represents VPP binary API message 'sw_interface_add_del_address_reply'.
type SwInterfaceAddDelAddressReply struct {
	Retval int32
}

func (*SwInterfaceAddDelAddressReply) GetMessageName() string {
	return "sw_interface_add_del_address_reply"
}
func (*SwInterfaceAddDelAddressReply) GetCrcString() string {
	return "e8d4e804"
}
func (*SwInterfaceAddDelAddressReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

// SwInterfaceClearStats represents VPP binary API message 'sw_interface_clear_stats'.
type SwInterfaceClearStats struct {
	SwIfIndex InterfaceIndex
}

func (*SwInterfaceClearStats) GetMessageName() string {
	return "sw_interface_clear_stats"
}
func (*SwInterfaceClearStats) GetCrcString() string {
	return "d85aab0d"
}
func (*SwInterfaceClearStats) GetMessageType() api.MessageType {
	return api.RequestMessage
}

// SwInterfaceClearStatsReply represents VPP binary API message 'sw_interface_clear_stats_reply'.
type SwInterfaceClearStatsReply struct {
	Retval int32
}

func (*SwInterfaceClearStatsReply) GetMessageName() string {
	return "sw_interface_clear_stats_reply"
}
func (*SwInterfaceClearStatsReply) GetCrcString() string {
	return "e8d4e804"
}
func (*SwInterfaceClearStatsReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

// SwInterfaceDetails represents VPP binary API message 'sw_interface_details'.
type SwInterfaceDetails struct {
	SwIfIndex       InterfaceIndex
	SupSwIfIndex    uint32
	L2Address       MacAddress
	Flags           IfStatusFlags
	Type            IfType
	LinkDuplex      LinkDuplex
	LinkSpeed       uint32
	LinkMtu         uint16
	Mtu             []uint32 `struc:"[4]uint32"`
	SubID           uint32
	SubNumberOfTags uint8
	SubOuterVlanID  uint16
	SubInnerVlanID  uint16
	SubIfFlags      SubIfFlags
	VtrOp           uint32
	VtrPushDot1q    uint32
	VtrTag1         uint32
	VtrTag2         uint32
	OuterTag        uint16
	BDmac           MacAddress
	BSmac           MacAddress
	BVlanid         uint16
	ISid            uint32
	InterfaceName   string `struc:"[64]byte"`
	Tag             string `struc:"[64]byte"`
}

func (*SwInterfaceDetails) GetMessageName() string {
	return "sw_interface_details"
}
func (*SwInterfaceDetails) GetCrcString() string {
	return "e67d02b6"
}
func (*SwInterfaceDetails) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

// SwInterfaceDump represents VPP binary API message 'sw_interface_dump'.
type SwInterfaceDump struct {
	SwIfIndex         InterfaceIndex
	NameFilterValid   bool
	XXX_NameFilterLen uint32 `struc:"sizeof=NameFilter"`
	NameFilter        string
}

func (*SwInterfaceDump) GetMessageName() string {
	return "sw_interface_dump"
}
func (*SwInterfaceDump) GetCrcString() string {
	return "4ecaa564"
}
func (*SwInterfaceDump) GetMessageType() api.MessageType {
	return api.RequestMessage
}

// SwInterfaceEvent represents VPP binary API message 'sw_interface_event'.
type SwInterfaceEvent struct {
	PID       uint32
	SwIfIndex InterfaceIndex
	Flags     IfStatusFlags
	Deleted   bool
}

func (*SwInterfaceEvent) GetMessageName() string {
	return "sw_interface_event"
}
func (*SwInterfaceEvent) GetCrcString() string {
	return "a98c55b5"
}
func (*SwInterfaceEvent) GetMessageType() api.MessageType {
	return api.EventMessage
}

// SwInterfaceGetMacAddress represents VPP binary API message 'sw_interface_get_mac_address'.
type SwInterfaceGetMacAddress struct {
	SwIfIndex InterfaceIndex
}

func (*SwInterfaceGetMacAddress) GetMessageName() string {
	return "sw_interface_get_mac_address"
}
func (*SwInterfaceGetMacAddress) GetCrcString() string {
	return "d85aab0d"
}
func (*SwInterfaceGetMacAddress) GetMessageType() api.MessageType {
	return api.RequestMessage
}

// SwInterfaceGetMacAddressReply represents VPP binary API message 'sw_interface_get_mac_address_reply'.
type SwInterfaceGetMacAddressReply struct {
	Retval     int32
	MacAddress MacAddress
}

func (*SwInterfaceGetMacAddressReply) GetMessageName() string {
	return "sw_interface_get_mac_address_reply"
}
func (*SwInterfaceGetMacAddressReply) GetCrcString() string {
	return "f7723cdb"
}
func (*SwInterfaceGetMacAddressReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

// SwInterfaceGetTable represents VPP binary API message 'sw_interface_get_table'.
type SwInterfaceGetTable struct {
	SwIfIndex InterfaceIndex
	IsIPv6    bool
}

func (*SwInterfaceGetTable) GetMessageName() string {
	return "sw_interface_get_table"
}
func (*SwInterfaceGetTable) GetCrcString() string {
	return "6cfbc675"
}
func (*SwInterfaceGetTable) GetMessageType() api.MessageType {
	return api.RequestMessage
}

// SwInterfaceGetTableReply represents VPP binary API message 'sw_interface_get_table_reply'.
type SwInterfaceGetTableReply struct {
	Retval int32
	VrfID  uint32
}

func (*SwInterfaceGetTableReply) GetMessageName() string {
	return "sw_interface_get_table_reply"
}
func (*SwInterfaceGetTableReply) GetCrcString() string {
	return "a6eb0109"
}
func (*SwInterfaceGetTableReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

// SwInterfaceRxPlacementDetails represents VPP binary API message 'sw_interface_rx_placement_details'.
type SwInterfaceRxPlacementDetails struct {
	SwIfIndex InterfaceIndex
	QueueID   uint32
	WorkerID  uint32
	Mode      RxMode
}

func (*SwInterfaceRxPlacementDetails) GetMessageName() string {
	return "sw_interface_rx_placement_details"
}
func (*SwInterfaceRxPlacementDetails) GetCrcString() string {
	return "93d413ec"
}
func (*SwInterfaceRxPlacementDetails) GetMessageType() api.MessageType {
	return api.RequestMessage
}

// SwInterfaceRxPlacementDump represents VPP binary API message 'sw_interface_rx_placement_dump'.
type SwInterfaceRxPlacementDump struct {
	SwIfIndex InterfaceIndex
}

func (*SwInterfaceRxPlacementDump) GetMessageName() string {
	return "sw_interface_rx_placement_dump"
}
func (*SwInterfaceRxPlacementDump) GetCrcString() string {
	return "d85aab0d"
}
func (*SwInterfaceRxPlacementDump) GetMessageType() api.MessageType {
	return api.RequestMessage
}

// SwInterfaceSetFlags represents VPP binary API message 'sw_interface_set_flags'.
type SwInterfaceSetFlags struct {
	SwIfIndex InterfaceIndex
	Flags     IfStatusFlags
}

func (*SwInterfaceSetFlags) GetMessageName() string {
	return "sw_interface_set_flags"
}
func (*SwInterfaceSetFlags) GetCrcString() string {
	return "b2dc5eb2"
}
func (*SwInterfaceSetFlags) GetMessageType() api.MessageType {
	return api.RequestMessage
}

// SwInterfaceSetFlagsReply represents VPP binary API message 'sw_interface_set_flags_reply'.
type SwInterfaceSetFlagsReply struct {
	Retval int32
}

func (*SwInterfaceSetFlagsReply) GetMessageName() string {
	return "sw_interface_set_flags_reply"
}
func (*SwInterfaceSetFlagsReply) GetCrcString() string {
	return "e8d4e804"
}
func (*SwInterfaceSetFlagsReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

// SwInterfaceSetIPDirectedBroadcast represents VPP binary API message 'sw_interface_set_ip_directed_broadcast'.
type SwInterfaceSetIPDirectedBroadcast struct {
	SwIfIndex InterfaceIndex
	Enable    bool
}

func (*SwInterfaceSetIPDirectedBroadcast) GetMessageName() string {
	return "sw_interface_set_ip_directed_broadcast"
}
func (*SwInterfaceSetIPDirectedBroadcast) GetCrcString() string {
	return "4ea0cbc4"
}
func (*SwInterfaceSetIPDirectedBroadcast) GetMessageType() api.MessageType {
	return api.RequestMessage
}

// SwInterfaceSetIPDirectedBroadcastReply represents VPP binary API message 'sw_interface_set_ip_directed_broadcast_reply'.
type SwInterfaceSetIPDirectedBroadcastReply struct {
	Retval int32
}

func (*SwInterfaceSetIPDirectedBroadcastReply) GetMessageName() string {
	return "sw_interface_set_ip_directed_broadcast_reply"
}
func (*SwInterfaceSetIPDirectedBroadcastReply) GetCrcString() string {
	return "e8d4e804"
}
func (*SwInterfaceSetIPDirectedBroadcastReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

// SwInterfaceSetMacAddress represents VPP binary API message 'sw_interface_set_mac_address'.
type SwInterfaceSetMacAddress struct {
	SwIfIndex  InterfaceIndex
	MacAddress MacAddress
}

func (*SwInterfaceSetMacAddress) GetMessageName() string {
	return "sw_interface_set_mac_address"
}
func (*SwInterfaceSetMacAddress) GetCrcString() string {
	return "5b2186bf"
}
func (*SwInterfaceSetMacAddress) GetMessageType() api.MessageType {
	return api.RequestMessage
}

// SwInterfaceSetMacAddressReply represents VPP binary API message 'sw_interface_set_mac_address_reply'.
type SwInterfaceSetMacAddressReply struct {
	Retval int32
}

func (*SwInterfaceSetMacAddressReply) GetMessageName() string {
	return "sw_interface_set_mac_address_reply"
}
func (*SwInterfaceSetMacAddressReply) GetCrcString() string {
	return "e8d4e804"
}
func (*SwInterfaceSetMacAddressReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

// SwInterfaceSetMtu represents VPP binary API message 'sw_interface_set_mtu'.
type SwInterfaceSetMtu struct {
	SwIfIndex InterfaceIndex
	Mtu       []uint32 `struc:"[4]uint32"`
}

func (*SwInterfaceSetMtu) GetMessageName() string {
	return "sw_interface_set_mtu"
}
func (*SwInterfaceSetMtu) GetCrcString() string {
	return "e768babe"
}
func (*SwInterfaceSetMtu) GetMessageType() api.MessageType {
	return api.RequestMessage
}

// SwInterfaceSetMtuReply represents VPP binary API message 'sw_interface_set_mtu_reply'.
type SwInterfaceSetMtuReply struct {
	Retval int32
}

func (*SwInterfaceSetMtuReply) GetMessageName() string {
	return "sw_interface_set_mtu_reply"
}
func (*SwInterfaceSetMtuReply) GetCrcString() string {
	return "e8d4e804"
}
func (*SwInterfaceSetMtuReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

// SwInterfaceSetRxMode represents VPP binary API message 'sw_interface_set_rx_mode'.
type SwInterfaceSetRxMode struct {
	SwIfIndex    InterfaceIndex
	QueueIDValid bool
	QueueID      uint32
	Mode         RxMode
}

func (*SwInterfaceSetRxMode) GetMessageName() string {
	return "sw_interface_set_rx_mode"
}
func (*SwInterfaceSetRxMode) GetCrcString() string {
	return "9897721c"
}
func (*SwInterfaceSetRxMode) GetMessageType() api.MessageType {
	return api.RequestMessage
}

// SwInterfaceSetRxModeReply represents VPP binary API message 'sw_interface_set_rx_mode_reply'.
type SwInterfaceSetRxModeReply struct {
	Retval int32
}

func (*SwInterfaceSetRxModeReply) GetMessageName() string {
	return "sw_interface_set_rx_mode_reply"
}
func (*SwInterfaceSetRxModeReply) GetCrcString() string {
	return "e8d4e804"
}
func (*SwInterfaceSetRxModeReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

// SwInterfaceSetRxPlacement represents VPP binary API message 'sw_interface_set_rx_placement'.
type SwInterfaceSetRxPlacement struct {
	SwIfIndex InterfaceIndex
	QueueID   uint32
	WorkerID  uint32
	IsMain    bool
}

func (*SwInterfaceSetRxPlacement) GetMessageName() string {
	return "sw_interface_set_rx_placement"
}
func (*SwInterfaceSetRxPlacement) GetCrcString() string {
	return "e462d0d9"
}
func (*SwInterfaceSetRxPlacement) GetMessageType() api.MessageType {
	return api.RequestMessage
}

// SwInterfaceSetRxPlacementReply represents VPP binary API message 'sw_interface_set_rx_placement_reply'.
type SwInterfaceSetRxPlacementReply struct {
	Retval int32
}

func (*SwInterfaceSetRxPlacementReply) GetMessageName() string {
	return "sw_interface_set_rx_placement_reply"
}
func (*SwInterfaceSetRxPlacementReply) GetCrcString() string {
	return "e8d4e804"
}
func (*SwInterfaceSetRxPlacementReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

// SwInterfaceSetTable represents VPP binary API message 'sw_interface_set_table'.
type SwInterfaceSetTable struct {
	SwIfIndex InterfaceIndex
	IsIPv6    bool
	VrfID     uint32
}

func (*SwInterfaceSetTable) GetMessageName() string {
	return "sw_interface_set_table"
}
func (*SwInterfaceSetTable) GetCrcString() string {
	return "2d412a82"
}
func (*SwInterfaceSetTable) GetMessageType() api.MessageType {
	return api.RequestMessage
}

// SwInterfaceSetTableReply represents VPP binary API message 'sw_interface_set_table_reply'.
type SwInterfaceSetTableReply struct {
	Retval int32
}

func (*SwInterfaceSetTableReply) GetMessageName() string {
	return "sw_interface_set_table_reply"
}
func (*SwInterfaceSetTableReply) GetCrcString() string {
	return "e8d4e804"
}
func (*SwInterfaceSetTableReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

// SwInterfaceSetUnnumbered represents VPP binary API message 'sw_interface_set_unnumbered'.
type SwInterfaceSetUnnumbered struct {
	SwIfIndex           InterfaceIndex
	UnnumberedSwIfIndex InterfaceIndex
	IsAdd               bool
}

func (*SwInterfaceSetUnnumbered) GetMessageName() string {
	return "sw_interface_set_unnumbered"
}
func (*SwInterfaceSetUnnumbered) GetCrcString() string {
	return "61e660a5"
}
func (*SwInterfaceSetUnnumbered) GetMessageType() api.MessageType {
	return api.RequestMessage
}

// SwInterfaceSetUnnumberedReply represents VPP binary API message 'sw_interface_set_unnumbered_reply'.
type SwInterfaceSetUnnumberedReply struct {
	Retval int32
}

func (*SwInterfaceSetUnnumberedReply) GetMessageName() string {
	return "sw_interface_set_unnumbered_reply"
}
func (*SwInterfaceSetUnnumberedReply) GetCrcString() string {
	return "e8d4e804"
}
func (*SwInterfaceSetUnnumberedReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

// SwInterfaceTagAddDel represents VPP binary API message 'sw_interface_tag_add_del'.
type SwInterfaceTagAddDel struct {
	IsAdd     bool
	SwIfIndex InterfaceIndex
	Tag       string `struc:"[64]byte"`
}

func (*SwInterfaceTagAddDel) GetMessageName() string {
	return "sw_interface_tag_add_del"
}
func (*SwInterfaceTagAddDel) GetCrcString() string {
	return "7b32df5b"
}
func (*SwInterfaceTagAddDel) GetMessageType() api.MessageType {
	return api.RequestMessage
}

// SwInterfaceTagAddDelReply represents VPP binary API message 'sw_interface_tag_add_del_reply'.
type SwInterfaceTagAddDelReply struct {
	Retval int32
}

func (*SwInterfaceTagAddDelReply) GetMessageName() string {
	return "sw_interface_tag_add_del_reply"
}
func (*SwInterfaceTagAddDelReply) GetCrcString() string {
	return "e8d4e804"
}
func (*SwInterfaceTagAddDelReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

// WantInterfaceEvents represents VPP binary API message 'want_interface_events'.
type WantInterfaceEvents struct {
	EnableDisable uint32
	PID           uint32
}

func (*WantInterfaceEvents) GetMessageName() string {
	return "want_interface_events"
}
func (*WantInterfaceEvents) GetCrcString() string {
	return "476f5a08"
}
func (*WantInterfaceEvents) GetMessageType() api.MessageType {
	return api.RequestMessage
}

// WantInterfaceEventsReply represents VPP binary API message 'want_interface_events_reply'.
type WantInterfaceEventsReply struct {
	Retval int32
}

func (*WantInterfaceEventsReply) GetMessageName() string {
	return "want_interface_events_reply"
}
func (*WantInterfaceEventsReply) GetCrcString() string {
	return "e8d4e804"
}
func (*WantInterfaceEventsReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func init() {
	api.RegisterMessage((*CollectDetailedInterfaceStats)(nil), "interface.CollectDetailedInterfaceStats")
	api.RegisterMessage((*CollectDetailedInterfaceStatsReply)(nil), "interface.CollectDetailedInterfaceStatsReply")
	api.RegisterMessage((*CreateLoopback)(nil), "interface.CreateLoopback")
	api.RegisterMessage((*CreateLoopbackInstance)(nil), "interface.CreateLoopbackInstance")
	api.RegisterMessage((*CreateLoopbackInstanceReply)(nil), "interface.CreateLoopbackInstanceReply")
	api.RegisterMessage((*CreateLoopbackReply)(nil), "interface.CreateLoopbackReply")
	api.RegisterMessage((*CreateSubif)(nil), "interface.CreateSubif")
	api.RegisterMessage((*CreateSubifReply)(nil), "interface.CreateSubifReply")
	api.RegisterMessage((*CreateVlanSubif)(nil), "interface.CreateVlanSubif")
	api.RegisterMessage((*CreateVlanSubifReply)(nil), "interface.CreateVlanSubifReply")
	api.RegisterMessage((*DeleteLoopback)(nil), "interface.DeleteLoopback")
	api.RegisterMessage((*DeleteLoopbackReply)(nil), "interface.DeleteLoopbackReply")
	api.RegisterMessage((*DeleteSubif)(nil), "interface.DeleteSubif")
	api.RegisterMessage((*DeleteSubifReply)(nil), "interface.DeleteSubifReply")
	api.RegisterMessage((*HwInterfaceSetMtu)(nil), "interface.HwInterfaceSetMtu")
	api.RegisterMessage((*HwInterfaceSetMtuReply)(nil), "interface.HwInterfaceSetMtuReply")
	api.RegisterMessage((*InterfaceNameRenumber)(nil), "interface.InterfaceNameRenumber")
	api.RegisterMessage((*InterfaceNameRenumberReply)(nil), "interface.InterfaceNameRenumberReply")
	api.RegisterMessage((*SwInterfaceAddDelAddress)(nil), "interface.SwInterfaceAddDelAddress")
	api.RegisterMessage((*SwInterfaceAddDelAddressReply)(nil), "interface.SwInterfaceAddDelAddressReply")
	api.RegisterMessage((*SwInterfaceClearStats)(nil), "interface.SwInterfaceClearStats")
	api.RegisterMessage((*SwInterfaceClearStatsReply)(nil), "interface.SwInterfaceClearStatsReply")
	api.RegisterMessage((*SwInterfaceDetails)(nil), "interface.SwInterfaceDetails")
	api.RegisterMessage((*SwInterfaceDump)(nil), "interface.SwInterfaceDump")
	api.RegisterMessage((*SwInterfaceEvent)(nil), "interface.SwInterfaceEvent")
	api.RegisterMessage((*SwInterfaceGetMacAddress)(nil), "interface.SwInterfaceGetMacAddress")
	api.RegisterMessage((*SwInterfaceGetMacAddressReply)(nil), "interface.SwInterfaceGetMacAddressReply")
	api.RegisterMessage((*SwInterfaceGetTable)(nil), "interface.SwInterfaceGetTable")
	api.RegisterMessage((*SwInterfaceGetTableReply)(nil), "interface.SwInterfaceGetTableReply")
	api.RegisterMessage((*SwInterfaceRxPlacementDetails)(nil), "interface.SwInterfaceRxPlacementDetails")
	api.RegisterMessage((*SwInterfaceRxPlacementDump)(nil), "interface.SwInterfaceRxPlacementDump")
	api.RegisterMessage((*SwInterfaceSetFlags)(nil), "interface.SwInterfaceSetFlags")
	api.RegisterMessage((*SwInterfaceSetFlagsReply)(nil), "interface.SwInterfaceSetFlagsReply")
	api.RegisterMessage((*SwInterfaceSetIPDirectedBroadcast)(nil), "interface.SwInterfaceSetIPDirectedBroadcast")
	api.RegisterMessage((*SwInterfaceSetIPDirectedBroadcastReply)(nil), "interface.SwInterfaceSetIPDirectedBroadcastReply")
	api.RegisterMessage((*SwInterfaceSetMacAddress)(nil), "interface.SwInterfaceSetMacAddress")
	api.RegisterMessage((*SwInterfaceSetMacAddressReply)(nil), "interface.SwInterfaceSetMacAddressReply")
	api.RegisterMessage((*SwInterfaceSetMtu)(nil), "interface.SwInterfaceSetMtu")
	api.RegisterMessage((*SwInterfaceSetMtuReply)(nil), "interface.SwInterfaceSetMtuReply")
	api.RegisterMessage((*SwInterfaceSetRxMode)(nil), "interface.SwInterfaceSetRxMode")
	api.RegisterMessage((*SwInterfaceSetRxModeReply)(nil), "interface.SwInterfaceSetRxModeReply")
	api.RegisterMessage((*SwInterfaceSetRxPlacement)(nil), "interface.SwInterfaceSetRxPlacement")
	api.RegisterMessage((*SwInterfaceSetRxPlacementReply)(nil), "interface.SwInterfaceSetRxPlacementReply")
	api.RegisterMessage((*SwInterfaceSetTable)(nil), "interface.SwInterfaceSetTable")
	api.RegisterMessage((*SwInterfaceSetTableReply)(nil), "interface.SwInterfaceSetTableReply")
	api.RegisterMessage((*SwInterfaceSetUnnumbered)(nil), "interface.SwInterfaceSetUnnumbered")
	api.RegisterMessage((*SwInterfaceSetUnnumberedReply)(nil), "interface.SwInterfaceSetUnnumberedReply")
	api.RegisterMessage((*SwInterfaceTagAddDel)(nil), "interface.SwInterfaceTagAddDel")
	api.RegisterMessage((*SwInterfaceTagAddDelReply)(nil), "interface.SwInterfaceTagAddDelReply")
	api.RegisterMessage((*WantInterfaceEvents)(nil), "interface.WantInterfaceEvents")
	api.RegisterMessage((*WantInterfaceEventsReply)(nil), "interface.WantInterfaceEventsReply")
}

// Messages returns list of all messages in this module.
func AllMessages() []api.Message {
	return []api.Message{
		(*CollectDetailedInterfaceStats)(nil),
		(*CollectDetailedInterfaceStatsReply)(nil),
		(*CreateLoopback)(nil),
		(*CreateLoopbackInstance)(nil),
		(*CreateLoopbackInstanceReply)(nil),
		(*CreateLoopbackReply)(nil),
		(*CreateSubif)(nil),
		(*CreateSubifReply)(nil),
		(*CreateVlanSubif)(nil),
		(*CreateVlanSubifReply)(nil),
		(*DeleteLoopback)(nil),
		(*DeleteLoopbackReply)(nil),
		(*DeleteSubif)(nil),
		(*DeleteSubifReply)(nil),
		(*HwInterfaceSetMtu)(nil),
		(*HwInterfaceSetMtuReply)(nil),
		(*InterfaceNameRenumber)(nil),
		(*InterfaceNameRenumberReply)(nil),
		(*SwInterfaceAddDelAddress)(nil),
		(*SwInterfaceAddDelAddressReply)(nil),
		(*SwInterfaceClearStats)(nil),
		(*SwInterfaceClearStatsReply)(nil),
		(*SwInterfaceDetails)(nil),
		(*SwInterfaceDump)(nil),
		(*SwInterfaceEvent)(nil),
		(*SwInterfaceGetMacAddress)(nil),
		(*SwInterfaceGetMacAddressReply)(nil),
		(*SwInterfaceGetTable)(nil),
		(*SwInterfaceGetTableReply)(nil),
		(*SwInterfaceRxPlacementDetails)(nil),
		(*SwInterfaceRxPlacementDump)(nil),
		(*SwInterfaceSetFlags)(nil),
		(*SwInterfaceSetFlagsReply)(nil),
		(*SwInterfaceSetIPDirectedBroadcast)(nil),
		(*SwInterfaceSetIPDirectedBroadcastReply)(nil),
		(*SwInterfaceSetMacAddress)(nil),
		(*SwInterfaceSetMacAddressReply)(nil),
		(*SwInterfaceSetMtu)(nil),
		(*SwInterfaceSetMtuReply)(nil),
		(*SwInterfaceSetRxMode)(nil),
		(*SwInterfaceSetRxModeReply)(nil),
		(*SwInterfaceSetRxPlacement)(nil),
		(*SwInterfaceSetRxPlacementReply)(nil),
		(*SwInterfaceSetTable)(nil),
		(*SwInterfaceSetTableReply)(nil),
		(*SwInterfaceSetUnnumbered)(nil),
		(*SwInterfaceSetUnnumberedReply)(nil),
		(*SwInterfaceTagAddDel)(nil),
		(*SwInterfaceTagAddDelReply)(nil),
		(*WantInterfaceEvents)(nil),
		(*WantInterfaceEventsReply)(nil),
	}
}

// RPCService represents RPC service API for interface module.
type RPCService interface {
	DumpSwInterface(ctx context.Context, in *SwInterfaceDump) (RPCService_DumpSwInterfaceClient, error)
	DumpSwInterfaceRxPlacement(ctx context.Context, in *SwInterfaceRxPlacementDump) (RPCService_DumpSwInterfaceRxPlacementClient, error)
	CollectDetailedInterfaceStats(ctx context.Context, in *CollectDetailedInterfaceStats) (*CollectDetailedInterfaceStatsReply, error)
	CreateLoopback(ctx context.Context, in *CreateLoopback) (*CreateLoopbackReply, error)
	CreateLoopbackInstance(ctx context.Context, in *CreateLoopbackInstance) (*CreateLoopbackInstanceReply, error)
	CreateSubif(ctx context.Context, in *CreateSubif) (*CreateSubifReply, error)
	CreateVlanSubif(ctx context.Context, in *CreateVlanSubif) (*CreateVlanSubifReply, error)
	DeleteLoopback(ctx context.Context, in *DeleteLoopback) (*DeleteLoopbackReply, error)
	DeleteSubif(ctx context.Context, in *DeleteSubif) (*DeleteSubifReply, error)
	HwInterfaceSetMtu(ctx context.Context, in *HwInterfaceSetMtu) (*HwInterfaceSetMtuReply, error)
	InterfaceNameRenumber(ctx context.Context, in *InterfaceNameRenumber) (*InterfaceNameRenumberReply, error)
	SwInterfaceAddDelAddress(ctx context.Context, in *SwInterfaceAddDelAddress) (*SwInterfaceAddDelAddressReply, error)
	SwInterfaceClearStats(ctx context.Context, in *SwInterfaceClearStats) (*SwInterfaceClearStatsReply, error)
	SwInterfaceGetMacAddress(ctx context.Context, in *SwInterfaceGetMacAddress) (*SwInterfaceGetMacAddressReply, error)
	SwInterfaceGetTable(ctx context.Context, in *SwInterfaceGetTable) (*SwInterfaceGetTableReply, error)
	SwInterfaceSetFlags(ctx context.Context, in *SwInterfaceSetFlags) (*SwInterfaceSetFlagsReply, error)
	SwInterfaceSetIPDirectedBroadcast(ctx context.Context, in *SwInterfaceSetIPDirectedBroadcast) (*SwInterfaceSetIPDirectedBroadcastReply, error)
	SwInterfaceSetMacAddress(ctx context.Context, in *SwInterfaceSetMacAddress) (*SwInterfaceSetMacAddressReply, error)
	SwInterfaceSetMtu(ctx context.Context, in *SwInterfaceSetMtu) (*SwInterfaceSetMtuReply, error)
	SwInterfaceSetRxMode(ctx context.Context, in *SwInterfaceSetRxMode) (*SwInterfaceSetRxModeReply, error)
	SwInterfaceSetRxPlacement(ctx context.Context, in *SwInterfaceSetRxPlacement) (*SwInterfaceSetRxPlacementReply, error)
	SwInterfaceSetTable(ctx context.Context, in *SwInterfaceSetTable) (*SwInterfaceSetTableReply, error)
	SwInterfaceSetUnnumbered(ctx context.Context, in *SwInterfaceSetUnnumbered) (*SwInterfaceSetUnnumberedReply, error)
	SwInterfaceTagAddDel(ctx context.Context, in *SwInterfaceTagAddDel) (*SwInterfaceTagAddDelReply, error)
	WantInterfaceEvents(ctx context.Context, in *WantInterfaceEvents) (*WantInterfaceEventsReply, error)
}

type serviceClient struct {
	ch api.Channel
}

func NewServiceClient(ch api.Channel) RPCService {
	return &serviceClient{ch}
}

func (c *serviceClient) DumpSwInterface(ctx context.Context, in *SwInterfaceDump) (RPCService_DumpSwInterfaceClient, error) {
	stream := c.ch.SendMultiRequest(in)
	x := &serviceClient_DumpSwInterfaceClient{stream}
	return x, nil
}

type RPCService_DumpSwInterfaceClient interface {
	Recv() (*SwInterfaceDetails, error)
}

type serviceClient_DumpSwInterfaceClient struct {
	api.MultiRequestCtx
}

func (c *serviceClient_DumpSwInterfaceClient) Recv() (*SwInterfaceDetails, error) {
	m := new(SwInterfaceDetails)
	stop, err := c.MultiRequestCtx.ReceiveReply(m)
	if err != nil {
		return nil, err
	}
	if stop {
		return nil, io.EOF
	}
	return m, nil
}

func (c *serviceClient) DumpSwInterfaceRxPlacement(ctx context.Context, in *SwInterfaceRxPlacementDump) (RPCService_DumpSwInterfaceRxPlacementClient, error) {
	stream := c.ch.SendMultiRequest(in)
	x := &serviceClient_DumpSwInterfaceRxPlacementClient{stream}
	return x, nil
}

type RPCService_DumpSwInterfaceRxPlacementClient interface {
	Recv() (*SwInterfaceRxPlacementDetails, error)
}

type serviceClient_DumpSwInterfaceRxPlacementClient struct {
	api.MultiRequestCtx
}

func (c *serviceClient_DumpSwInterfaceRxPlacementClient) Recv() (*SwInterfaceRxPlacementDetails, error) {
	m := new(SwInterfaceRxPlacementDetails)
	stop, err := c.MultiRequestCtx.ReceiveReply(m)
	if err != nil {
		return nil, err
	}
	if stop {
		return nil, io.EOF
	}
	return m, nil
}

func (c *serviceClient) CollectDetailedInterfaceStats(ctx context.Context, in *CollectDetailedInterfaceStats) (*CollectDetailedInterfaceStatsReply, error) {
	out := new(CollectDetailedInterfaceStatsReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) CreateLoopback(ctx context.Context, in *CreateLoopback) (*CreateLoopbackReply, error) {
	out := new(CreateLoopbackReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) CreateLoopbackInstance(ctx context.Context, in *CreateLoopbackInstance) (*CreateLoopbackInstanceReply, error) {
	out := new(CreateLoopbackInstanceReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) CreateSubif(ctx context.Context, in *CreateSubif) (*CreateSubifReply, error) {
	out := new(CreateSubifReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) CreateVlanSubif(ctx context.Context, in *CreateVlanSubif) (*CreateVlanSubifReply, error) {
	out := new(CreateVlanSubifReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DeleteLoopback(ctx context.Context, in *DeleteLoopback) (*DeleteLoopbackReply, error) {
	out := new(DeleteLoopbackReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DeleteSubif(ctx context.Context, in *DeleteSubif) (*DeleteSubifReply, error) {
	out := new(DeleteSubifReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) HwInterfaceSetMtu(ctx context.Context, in *HwInterfaceSetMtu) (*HwInterfaceSetMtuReply, error) {
	out := new(HwInterfaceSetMtuReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) InterfaceNameRenumber(ctx context.Context, in *InterfaceNameRenumber) (*InterfaceNameRenumberReply, error) {
	out := new(InterfaceNameRenumberReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) SwInterfaceAddDelAddress(ctx context.Context, in *SwInterfaceAddDelAddress) (*SwInterfaceAddDelAddressReply, error) {
	out := new(SwInterfaceAddDelAddressReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) SwInterfaceClearStats(ctx context.Context, in *SwInterfaceClearStats) (*SwInterfaceClearStatsReply, error) {
	out := new(SwInterfaceClearStatsReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) SwInterfaceGetMacAddress(ctx context.Context, in *SwInterfaceGetMacAddress) (*SwInterfaceGetMacAddressReply, error) {
	out := new(SwInterfaceGetMacAddressReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) SwInterfaceGetTable(ctx context.Context, in *SwInterfaceGetTable) (*SwInterfaceGetTableReply, error) {
	out := new(SwInterfaceGetTableReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) SwInterfaceSetFlags(ctx context.Context, in *SwInterfaceSetFlags) (*SwInterfaceSetFlagsReply, error) {
	out := new(SwInterfaceSetFlagsReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) SwInterfaceSetIPDirectedBroadcast(ctx context.Context, in *SwInterfaceSetIPDirectedBroadcast) (*SwInterfaceSetIPDirectedBroadcastReply, error) {
	out := new(SwInterfaceSetIPDirectedBroadcastReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) SwInterfaceSetMacAddress(ctx context.Context, in *SwInterfaceSetMacAddress) (*SwInterfaceSetMacAddressReply, error) {
	out := new(SwInterfaceSetMacAddressReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) SwInterfaceSetMtu(ctx context.Context, in *SwInterfaceSetMtu) (*SwInterfaceSetMtuReply, error) {
	out := new(SwInterfaceSetMtuReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) SwInterfaceSetRxMode(ctx context.Context, in *SwInterfaceSetRxMode) (*SwInterfaceSetRxModeReply, error) {
	out := new(SwInterfaceSetRxModeReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) SwInterfaceSetRxPlacement(ctx context.Context, in *SwInterfaceSetRxPlacement) (*SwInterfaceSetRxPlacementReply, error) {
	out := new(SwInterfaceSetRxPlacementReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) SwInterfaceSetTable(ctx context.Context, in *SwInterfaceSetTable) (*SwInterfaceSetTableReply, error) {
	out := new(SwInterfaceSetTableReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) SwInterfaceSetUnnumbered(ctx context.Context, in *SwInterfaceSetUnnumbered) (*SwInterfaceSetUnnumberedReply, error) {
	out := new(SwInterfaceSetUnnumberedReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) SwInterfaceTagAddDel(ctx context.Context, in *SwInterfaceTagAddDel) (*SwInterfaceTagAddDelReply, error) {
	out := new(SwInterfaceTagAddDelReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) WantInterfaceEvents(ctx context.Context, in *WantInterfaceEvents) (*WantInterfaceEventsReply, error) {
	out := new(WantInterfaceEventsReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// This is a compile-time assertion to ensure that this generated file
// is compatible with the GoVPP api package it is being compiled against.
// A compilation error at this line likely means your copy of the
// GoVPP api package needs to be updated.
const _ = api.GoVppAPIPackageIsVersion1 // please upgrade the GoVPP api package

// Reference imports to suppress errors if they are not otherwise used.
var _ = api.RegisterMessage
var _ = bytes.NewBuffer
var _ = context.Background
var _ = io.Copy
var _ = strconv.Itoa
var _ = struc.Pack
