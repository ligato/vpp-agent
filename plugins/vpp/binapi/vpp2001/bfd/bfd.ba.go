// Code generated by GoVPP's binapi-generator. DO NOT EDIT.
// source: /usr/share/vpp/api/core/bfd.api.json

/*
Package bfd is a generated VPP binary API for 'bfd' module.

It consists of:
	 11 enums
	  3 aliases
	  6 types
	  1 union
	 28 messages
	 14 services
*/
package bfd

import (
	bytes "bytes"
	context "context"
	api "git.fd.io/govpp.git/api"
	struc "github.com/lunixbochs/struc"
	io "io"
	strconv "strconv"
)

const (
	// ModuleName is the name of this module.
	ModuleName = "bfd"
	// APIVersion is the API version of this module.
	APIVersion = "2.0.0"
	// VersionCrc is the CRC of this module.
	VersionCrc = 0xf9832e53
)

// AddressFamily represents VPP binary API enum 'address_family'.
type AddressFamily uint32

const (
	ADDRESS_IP4 AddressFamily = 0
	ADDRESS_IP6 AddressFamily = 1
)

var AddressFamily_name = map[uint32]string{
	0: "ADDRESS_IP4",
	1: "ADDRESS_IP6",
}

var AddressFamily_value = map[string]uint32{
	"ADDRESS_IP4": 0,
	"ADDRESS_IP6": 1,
}

func (x AddressFamily) String() string {
	s, ok := AddressFamily_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// BfdState represents VPP binary API enum 'bfd_state'.
type BfdState uint32

const (
	BFD_STATE_API_ADMIN_DOWN BfdState = 0
	BFD_STATE_API_DOWN       BfdState = 1
	BFD_STATE_API_INIT       BfdState = 2
	BFD_STATE_API_UP         BfdState = 3
)

var BfdState_name = map[uint32]string{
	0: "BFD_STATE_API_ADMIN_DOWN",
	1: "BFD_STATE_API_DOWN",
	2: "BFD_STATE_API_INIT",
	3: "BFD_STATE_API_UP",
}

var BfdState_value = map[string]uint32{
	"BFD_STATE_API_ADMIN_DOWN": 0,
	"BFD_STATE_API_DOWN":       1,
	"BFD_STATE_API_INIT":       2,
	"BFD_STATE_API_UP":         3,
}

func (x BfdState) String() string {
	s, ok := BfdState_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// IfStatusFlags represents VPP binary API enum 'if_status_flags'.
type IfStatusFlags uint32

const (
	IF_STATUS_API_FLAG_ADMIN_UP IfStatusFlags = 1
	IF_STATUS_API_FLAG_LINK_UP  IfStatusFlags = 2
)

var IfStatusFlags_name = map[uint32]string{
	1: "IF_STATUS_API_FLAG_ADMIN_UP",
	2: "IF_STATUS_API_FLAG_LINK_UP",
}

var IfStatusFlags_value = map[string]uint32{
	"IF_STATUS_API_FLAG_ADMIN_UP": 1,
	"IF_STATUS_API_FLAG_LINK_UP":  2,
}

func (x IfStatusFlags) String() string {
	s, ok := IfStatusFlags_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// IfType represents VPP binary API enum 'if_type'.
type IfType uint32

const (
	IF_API_TYPE_HARDWARE IfType = 1
	IF_API_TYPE_SUB      IfType = 2
	IF_API_TYPE_P2P      IfType = 3
	IF_API_TYPE_PIPE     IfType = 4
)

var IfType_name = map[uint32]string{
	1: "IF_API_TYPE_HARDWARE",
	2: "IF_API_TYPE_SUB",
	3: "IF_API_TYPE_P2P",
	4: "IF_API_TYPE_PIPE",
}

var IfType_value = map[string]uint32{
	"IF_API_TYPE_HARDWARE": 1,
	"IF_API_TYPE_SUB":      2,
	"IF_API_TYPE_P2P":      3,
	"IF_API_TYPE_PIPE":     4,
}

func (x IfType) String() string {
	s, ok := IfType_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// IPDscp represents VPP binary API enum 'ip_dscp'.
type IPDscp uint8

const (
	IP_API_DSCP_CS0  IPDscp = 0
	IP_API_DSCP_CS1  IPDscp = 8
	IP_API_DSCP_AF11 IPDscp = 10
	IP_API_DSCP_AF12 IPDscp = 12
	IP_API_DSCP_AF13 IPDscp = 14
	IP_API_DSCP_CS2  IPDscp = 16
	IP_API_DSCP_AF21 IPDscp = 18
	IP_API_DSCP_AF22 IPDscp = 20
	IP_API_DSCP_AF23 IPDscp = 22
	IP_API_DSCP_CS3  IPDscp = 24
	IP_API_DSCP_AF31 IPDscp = 26
	IP_API_DSCP_AF32 IPDscp = 28
	IP_API_DSCP_AF33 IPDscp = 30
	IP_API_DSCP_CS4  IPDscp = 32
	IP_API_DSCP_AF41 IPDscp = 34
	IP_API_DSCP_AF42 IPDscp = 36
	IP_API_DSCP_AF43 IPDscp = 38
	IP_API_DSCP_CS5  IPDscp = 40
	IP_API_DSCP_EF   IPDscp = 46
	IP_API_DSCP_CS6  IPDscp = 48
	IP_API_DSCP_CS7  IPDscp = 50
)

var IPDscp_name = map[uint8]string{
	0:  "IP_API_DSCP_CS0",
	8:  "IP_API_DSCP_CS1",
	10: "IP_API_DSCP_AF11",
	12: "IP_API_DSCP_AF12",
	14: "IP_API_DSCP_AF13",
	16: "IP_API_DSCP_CS2",
	18: "IP_API_DSCP_AF21",
	20: "IP_API_DSCP_AF22",
	22: "IP_API_DSCP_AF23",
	24: "IP_API_DSCP_CS3",
	26: "IP_API_DSCP_AF31",
	28: "IP_API_DSCP_AF32",
	30: "IP_API_DSCP_AF33",
	32: "IP_API_DSCP_CS4",
	34: "IP_API_DSCP_AF41",
	36: "IP_API_DSCP_AF42",
	38: "IP_API_DSCP_AF43",
	40: "IP_API_DSCP_CS5",
	46: "IP_API_DSCP_EF",
	48: "IP_API_DSCP_CS6",
	50: "IP_API_DSCP_CS7",
}

var IPDscp_value = map[string]uint8{
	"IP_API_DSCP_CS0":  0,
	"IP_API_DSCP_CS1":  8,
	"IP_API_DSCP_AF11": 10,
	"IP_API_DSCP_AF12": 12,
	"IP_API_DSCP_AF13": 14,
	"IP_API_DSCP_CS2":  16,
	"IP_API_DSCP_AF21": 18,
	"IP_API_DSCP_AF22": 20,
	"IP_API_DSCP_AF23": 22,
	"IP_API_DSCP_CS3":  24,
	"IP_API_DSCP_AF31": 26,
	"IP_API_DSCP_AF32": 28,
	"IP_API_DSCP_AF33": 30,
	"IP_API_DSCP_CS4":  32,
	"IP_API_DSCP_AF41": 34,
	"IP_API_DSCP_AF42": 36,
	"IP_API_DSCP_AF43": 38,
	"IP_API_DSCP_CS5":  40,
	"IP_API_DSCP_EF":   46,
	"IP_API_DSCP_CS6":  48,
	"IP_API_DSCP_CS7":  50,
}

func (x IPDscp) String() string {
	s, ok := IPDscp_name[uint8(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// IPEcn represents VPP binary API enum 'ip_ecn'.
type IPEcn uint8

const (
	IP_API_ECN_NONE IPEcn = 0
	IP_API_ECN_ECT0 IPEcn = 1
	IP_API_ECN_ECT1 IPEcn = 2
	IP_API_ECN_CE   IPEcn = 3
)

var IPEcn_name = map[uint8]string{
	0: "IP_API_ECN_NONE",
	1: "IP_API_ECN_ECT0",
	2: "IP_API_ECN_ECT1",
	3: "IP_API_ECN_CE",
}

var IPEcn_value = map[string]uint8{
	"IP_API_ECN_NONE": 0,
	"IP_API_ECN_ECT0": 1,
	"IP_API_ECN_ECT1": 2,
	"IP_API_ECN_CE":   3,
}

func (x IPEcn) String() string {
	s, ok := IPEcn_name[uint8(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// IPProto represents VPP binary API enum 'ip_proto'.
type IPProto uint32

const (
	IP_API_PROTO_HOPOPT   IPProto = 0
	IP_API_PROTO_ICMP     IPProto = 1
	IP_API_PROTO_IGMP     IPProto = 2
	IP_API_PROTO_TCP      IPProto = 6
	IP_API_PROTO_UDP      IPProto = 17
	IP_API_PROTO_GRE      IPProto = 47
	IP_API_PROTO_AH       IPProto = 50
	IP_API_PROTO_ESP      IPProto = 51
	IP_API_PROTO_EIGRP    IPProto = 88
	IP_API_PROTO_OSPF     IPProto = 89
	IP_API_PROTO_SCTP     IPProto = 132
	IP_API_PROTO_RESERVED IPProto = 255
)

var IPProto_name = map[uint32]string{
	0:   "IP_API_PROTO_HOPOPT",
	1:   "IP_API_PROTO_ICMP",
	2:   "IP_API_PROTO_IGMP",
	6:   "IP_API_PROTO_TCP",
	17:  "IP_API_PROTO_UDP",
	47:  "IP_API_PROTO_GRE",
	50:  "IP_API_PROTO_AH",
	51:  "IP_API_PROTO_ESP",
	88:  "IP_API_PROTO_EIGRP",
	89:  "IP_API_PROTO_OSPF",
	132: "IP_API_PROTO_SCTP",
	255: "IP_API_PROTO_RESERVED",
}

var IPProto_value = map[string]uint32{
	"IP_API_PROTO_HOPOPT":   0,
	"IP_API_PROTO_ICMP":     1,
	"IP_API_PROTO_IGMP":     2,
	"IP_API_PROTO_TCP":      6,
	"IP_API_PROTO_UDP":      17,
	"IP_API_PROTO_GRE":      47,
	"IP_API_PROTO_AH":       50,
	"IP_API_PROTO_ESP":      51,
	"IP_API_PROTO_EIGRP":    88,
	"IP_API_PROTO_OSPF":     89,
	"IP_API_PROTO_SCTP":     132,
	"IP_API_PROTO_RESERVED": 255,
}

func (x IPProto) String() string {
	s, ok := IPProto_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// LinkDuplex represents VPP binary API enum 'link_duplex'.
type LinkDuplex uint32

const (
	LINK_DUPLEX_API_UNKNOWN LinkDuplex = 0
	LINK_DUPLEX_API_HALF    LinkDuplex = 1
	LINK_DUPLEX_API_FULL    LinkDuplex = 2
)

var LinkDuplex_name = map[uint32]string{
	0: "LINK_DUPLEX_API_UNKNOWN",
	1: "LINK_DUPLEX_API_HALF",
	2: "LINK_DUPLEX_API_FULL",
}

var LinkDuplex_value = map[string]uint32{
	"LINK_DUPLEX_API_UNKNOWN": 0,
	"LINK_DUPLEX_API_HALF":    1,
	"LINK_DUPLEX_API_FULL":    2,
}

func (x LinkDuplex) String() string {
	s, ok := LinkDuplex_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// MtuProto represents VPP binary API enum 'mtu_proto'.
type MtuProto uint32

const (
	MTU_PROTO_API_L3   MtuProto = 1
	MTU_PROTO_API_IP4  MtuProto = 2
	MTU_PROTO_API_IP6  MtuProto = 3
	MTU_PROTO_API_MPLS MtuProto = 4
	MTU_PROTO_API_N    MtuProto = 5
)

var MtuProto_name = map[uint32]string{
	1: "MTU_PROTO_API_L3",
	2: "MTU_PROTO_API_IP4",
	3: "MTU_PROTO_API_IP6",
	4: "MTU_PROTO_API_MPLS",
	5: "MTU_PROTO_API_N",
}

var MtuProto_value = map[string]uint32{
	"MTU_PROTO_API_L3":   1,
	"MTU_PROTO_API_IP4":  2,
	"MTU_PROTO_API_IP6":  3,
	"MTU_PROTO_API_MPLS": 4,
	"MTU_PROTO_API_N":    5,
}

func (x MtuProto) String() string {
	s, ok := MtuProto_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// RxMode represents VPP binary API enum 'rx_mode'.
type RxMode uint32

const (
	RX_MODE_API_UNKNOWN   RxMode = 0
	RX_MODE_API_POLLING   RxMode = 1
	RX_MODE_API_INTERRUPT RxMode = 2
	RX_MODE_API_ADAPTIVE  RxMode = 3
	RX_MODE_API_DEFAULT   RxMode = 4
)

var RxMode_name = map[uint32]string{
	0: "RX_MODE_API_UNKNOWN",
	1: "RX_MODE_API_POLLING",
	2: "RX_MODE_API_INTERRUPT",
	3: "RX_MODE_API_ADAPTIVE",
	4: "RX_MODE_API_DEFAULT",
}

var RxMode_value = map[string]uint32{
	"RX_MODE_API_UNKNOWN":   0,
	"RX_MODE_API_POLLING":   1,
	"RX_MODE_API_INTERRUPT": 2,
	"RX_MODE_API_ADAPTIVE":  3,
	"RX_MODE_API_DEFAULT":   4,
}

func (x RxMode) String() string {
	s, ok := RxMode_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// SubIfFlags represents VPP binary API enum 'sub_if_flags'.
type SubIfFlags uint32

const (
	SUB_IF_API_FLAG_NO_TAGS           SubIfFlags = 1
	SUB_IF_API_FLAG_ONE_TAG           SubIfFlags = 2
	SUB_IF_API_FLAG_TWO_TAGS          SubIfFlags = 4
	SUB_IF_API_FLAG_DOT1AD            SubIfFlags = 8
	SUB_IF_API_FLAG_EXACT_MATCH       SubIfFlags = 16
	SUB_IF_API_FLAG_DEFAULT           SubIfFlags = 32
	SUB_IF_API_FLAG_OUTER_VLAN_ID_ANY SubIfFlags = 64
	SUB_IF_API_FLAG_INNER_VLAN_ID_ANY SubIfFlags = 128
	SUB_IF_API_FLAG_MASK_VNET         SubIfFlags = 254
	SUB_IF_API_FLAG_DOT1AH            SubIfFlags = 256
)

var SubIfFlags_name = map[uint32]string{
	1:   "SUB_IF_API_FLAG_NO_TAGS",
	2:   "SUB_IF_API_FLAG_ONE_TAG",
	4:   "SUB_IF_API_FLAG_TWO_TAGS",
	8:   "SUB_IF_API_FLAG_DOT1AD",
	16:  "SUB_IF_API_FLAG_EXACT_MATCH",
	32:  "SUB_IF_API_FLAG_DEFAULT",
	64:  "SUB_IF_API_FLAG_OUTER_VLAN_ID_ANY",
	128: "SUB_IF_API_FLAG_INNER_VLAN_ID_ANY",
	254: "SUB_IF_API_FLAG_MASK_VNET",
	256: "SUB_IF_API_FLAG_DOT1AH",
}

var SubIfFlags_value = map[string]uint32{
	"SUB_IF_API_FLAG_NO_TAGS":           1,
	"SUB_IF_API_FLAG_ONE_TAG":           2,
	"SUB_IF_API_FLAG_TWO_TAGS":          4,
	"SUB_IF_API_FLAG_DOT1AD":            8,
	"SUB_IF_API_FLAG_EXACT_MATCH":       16,
	"SUB_IF_API_FLAG_DEFAULT":           32,
	"SUB_IF_API_FLAG_OUTER_VLAN_ID_ANY": 64,
	"SUB_IF_API_FLAG_INNER_VLAN_ID_ANY": 128,
	"SUB_IF_API_FLAG_MASK_VNET":         254,
	"SUB_IF_API_FLAG_DOT1AH":            256,
}

func (x SubIfFlags) String() string {
	s, ok := SubIfFlags_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// InterfaceIndex represents VPP binary API alias 'interface_index'.
type InterfaceIndex uint32

// IP4Address represents VPP binary API alias 'ip4_address'.
type IP4Address [4]uint8

// IP6Address represents VPP binary API alias 'ip6_address'.
type IP6Address [16]uint8

// Address represents VPP binary API type 'address'.
type Address struct {
	Af AddressFamily
	Un AddressUnion
}

func (*Address) GetTypeName() string {
	return "address"
}

// IP4Prefix represents VPP binary API type 'ip4_prefix'.
type IP4Prefix struct {
	Address IP4Address
	Len     uint8
}

func (*IP4Prefix) GetTypeName() string {
	return "ip4_prefix"
}

// IP6Prefix represents VPP binary API type 'ip6_prefix'.
type IP6Prefix struct {
	Address IP6Address
	Len     uint8
}

func (*IP6Prefix) GetTypeName() string {
	return "ip6_prefix"
}

// Mprefix represents VPP binary API type 'mprefix'.
type Mprefix struct {
	Af               AddressFamily
	GrpAddressLength uint16
	GrpAddress       AddressUnion
	SrcAddress       AddressUnion
}

func (*Mprefix) GetTypeName() string {
	return "mprefix"
}

// Prefix represents VPP binary API type 'prefix'.
type Prefix struct {
	Address Address
	Len     uint8
}

func (*Prefix) GetTypeName() string {
	return "prefix"
}

// PrefixMatcher represents VPP binary API type 'prefix_matcher'.
type PrefixMatcher struct {
	Le uint8
	Ge uint8
}

func (*PrefixMatcher) GetTypeName() string {
	return "prefix_matcher"
}

// AddressUnion represents VPP binary API union 'address_union'.
type AddressUnion struct {
	XXX_UnionData [16]byte
}

func (*AddressUnion) GetTypeName() string {
	return "address_union"
}

func AddressUnionIP4(a IP4Address) (u AddressUnion) {
	u.SetIP4(a)
	return
}
func (u *AddressUnion) SetIP4(a IP4Address) {
	var b = new(bytes.Buffer)
	if err := struc.Pack(b, &a); err != nil {
		return
	}
	copy(u.XXX_UnionData[:], b.Bytes())
}
func (u *AddressUnion) GetIP4() (a IP4Address) {
	var b = bytes.NewReader(u.XXX_UnionData[:])
	struc.Unpack(b, &a)
	return
}

func AddressUnionIP6(a IP6Address) (u AddressUnion) {
	u.SetIP6(a)
	return
}
func (u *AddressUnion) SetIP6(a IP6Address) {
	var b = new(bytes.Buffer)
	if err := struc.Pack(b, &a); err != nil {
		return
	}
	copy(u.XXX_UnionData[:], b.Bytes())
}
func (u *AddressUnion) GetIP6() (a IP6Address) {
	var b = bytes.NewReader(u.XXX_UnionData[:])
	struc.Unpack(b, &a)
	return
}

// BfdAuthDelKey represents VPP binary API message 'bfd_auth_del_key'.
type BfdAuthDelKey struct {
	ConfKeyID uint32
}

func (*BfdAuthDelKey) GetMessageName() string {
	return "bfd_auth_del_key"
}
func (*BfdAuthDelKey) GetCrcString() string {
	return "65310b22"
}
func (*BfdAuthDelKey) GetMessageType() api.MessageType {
	return api.RequestMessage
}

// BfdAuthDelKeyReply represents VPP binary API message 'bfd_auth_del_key_reply'.
type BfdAuthDelKeyReply struct {
	Retval int32
}

func (*BfdAuthDelKeyReply) GetMessageName() string {
	return "bfd_auth_del_key_reply"
}
func (*BfdAuthDelKeyReply) GetCrcString() string {
	return "e8d4e804"
}
func (*BfdAuthDelKeyReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

// BfdAuthKeysDetails represents VPP binary API message 'bfd_auth_keys_details'.
type BfdAuthKeysDetails struct {
	ConfKeyID uint32
	UseCount  uint32
	AuthType  uint8
}

func (*BfdAuthKeysDetails) GetMessageName() string {
	return "bfd_auth_keys_details"
}
func (*BfdAuthKeysDetails) GetCrcString() string {
	return "84130e9f"
}
func (*BfdAuthKeysDetails) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

// BfdAuthKeysDump represents VPP binary API message 'bfd_auth_keys_dump'.
type BfdAuthKeysDump struct{}

func (*BfdAuthKeysDump) GetMessageName() string {
	return "bfd_auth_keys_dump"
}
func (*BfdAuthKeysDump) GetCrcString() string {
	return "51077d14"
}
func (*BfdAuthKeysDump) GetMessageType() api.MessageType {
	return api.RequestMessage
}

// BfdAuthSetKey represents VPP binary API message 'bfd_auth_set_key'.
type BfdAuthSetKey struct {
	ConfKeyID uint32
	KeyLen    uint8
	AuthType  uint8
	Key       []byte `struc:"[20]byte"`
}

func (*BfdAuthSetKey) GetMessageName() string {
	return "bfd_auth_set_key"
}
func (*BfdAuthSetKey) GetCrcString() string {
	return "690b8877"
}
func (*BfdAuthSetKey) GetMessageType() api.MessageType {
	return api.RequestMessage
}

// BfdAuthSetKeyReply represents VPP binary API message 'bfd_auth_set_key_reply'.
type BfdAuthSetKeyReply struct {
	Retval int32
}

func (*BfdAuthSetKeyReply) GetMessageName() string {
	return "bfd_auth_set_key_reply"
}
func (*BfdAuthSetKeyReply) GetCrcString() string {
	return "e8d4e804"
}
func (*BfdAuthSetKeyReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

// BfdUDPAdd represents VPP binary API message 'bfd_udp_add'.
type BfdUDPAdd struct {
	SwIfIndex       InterfaceIndex
	DesiredMinTx    uint32
	RequiredMinRx   uint32
	LocalAddr       Address
	PeerAddr        Address
	DetectMult      uint8
	IsAuthenticated bool
	BfdKeyID        uint8
	ConfKeyID       uint32
}

func (*BfdUDPAdd) GetMessageName() string {
	return "bfd_udp_add"
}
func (*BfdUDPAdd) GetCrcString() string {
	return "438c89b5"
}
func (*BfdUDPAdd) GetMessageType() api.MessageType {
	return api.RequestMessage
}

// BfdUDPAddReply represents VPP binary API message 'bfd_udp_add_reply'.
type BfdUDPAddReply struct {
	Retval int32
}

func (*BfdUDPAddReply) GetMessageName() string {
	return "bfd_udp_add_reply"
}
func (*BfdUDPAddReply) GetCrcString() string {
	return "e8d4e804"
}
func (*BfdUDPAddReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

// BfdUDPAuthActivate represents VPP binary API message 'bfd_udp_auth_activate'.
type BfdUDPAuthActivate struct {
	SwIfIndex InterfaceIndex
	LocalAddr Address
	PeerAddr  Address
	IsDelayed bool
	BfdKeyID  uint8
	ConfKeyID uint32
}

func (*BfdUDPAuthActivate) GetMessageName() string {
	return "bfd_udp_auth_activate"
}
func (*BfdUDPAuthActivate) GetCrcString() string {
	return "76d0bcc0"
}
func (*BfdUDPAuthActivate) GetMessageType() api.MessageType {
	return api.RequestMessage
}

// BfdUDPAuthActivateReply represents VPP binary API message 'bfd_udp_auth_activate_reply'.
type BfdUDPAuthActivateReply struct {
	Retval int32
}

func (*BfdUDPAuthActivateReply) GetMessageName() string {
	return "bfd_udp_auth_activate_reply"
}
func (*BfdUDPAuthActivateReply) GetCrcString() string {
	return "e8d4e804"
}
func (*BfdUDPAuthActivateReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

// BfdUDPAuthDeactivate represents VPP binary API message 'bfd_udp_auth_deactivate'.
type BfdUDPAuthDeactivate struct {
	SwIfIndex InterfaceIndex
	LocalAddr Address
	PeerAddr  Address
	IsDelayed bool
}

func (*BfdUDPAuthDeactivate) GetMessageName() string {
	return "bfd_udp_auth_deactivate"
}
func (*BfdUDPAuthDeactivate) GetCrcString() string {
	return "a5a3adf2"
}
func (*BfdUDPAuthDeactivate) GetMessageType() api.MessageType {
	return api.RequestMessage
}

// BfdUDPAuthDeactivateReply represents VPP binary API message 'bfd_udp_auth_deactivate_reply'.
type BfdUDPAuthDeactivateReply struct {
	Retval int32
}

func (*BfdUDPAuthDeactivateReply) GetMessageName() string {
	return "bfd_udp_auth_deactivate_reply"
}
func (*BfdUDPAuthDeactivateReply) GetCrcString() string {
	return "e8d4e804"
}
func (*BfdUDPAuthDeactivateReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

// BfdUDPDel represents VPP binary API message 'bfd_udp_del'.
type BfdUDPDel struct {
	SwIfIndex InterfaceIndex
	LocalAddr Address
	PeerAddr  Address
}

func (*BfdUDPDel) GetMessageName() string {
	return "bfd_udp_del"
}
func (*BfdUDPDel) GetCrcString() string {
	return "b5acf44c"
}
func (*BfdUDPDel) GetMessageType() api.MessageType {
	return api.RequestMessage
}

// BfdUDPDelEchoSource represents VPP binary API message 'bfd_udp_del_echo_source'.
type BfdUDPDelEchoSource struct{}

func (*BfdUDPDelEchoSource) GetMessageName() string {
	return "bfd_udp_del_echo_source"
}
func (*BfdUDPDelEchoSource) GetCrcString() string {
	return "51077d14"
}
func (*BfdUDPDelEchoSource) GetMessageType() api.MessageType {
	return api.RequestMessage
}

// BfdUDPDelEchoSourceReply represents VPP binary API message 'bfd_udp_del_echo_source_reply'.
type BfdUDPDelEchoSourceReply struct {
	Retval int32
}

func (*BfdUDPDelEchoSourceReply) GetMessageName() string {
	return "bfd_udp_del_echo_source_reply"
}
func (*BfdUDPDelEchoSourceReply) GetCrcString() string {
	return "e8d4e804"
}
func (*BfdUDPDelEchoSourceReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

// BfdUDPDelReply represents VPP binary API message 'bfd_udp_del_reply'.
type BfdUDPDelReply struct {
	Retval int32
}

func (*BfdUDPDelReply) GetMessageName() string {
	return "bfd_udp_del_reply"
}
func (*BfdUDPDelReply) GetCrcString() string {
	return "e8d4e804"
}
func (*BfdUDPDelReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

// BfdUDPGetEchoSource represents VPP binary API message 'bfd_udp_get_echo_source'.
type BfdUDPGetEchoSource struct{}

func (*BfdUDPGetEchoSource) GetMessageName() string {
	return "bfd_udp_get_echo_source"
}
func (*BfdUDPGetEchoSource) GetCrcString() string {
	return "51077d14"
}
func (*BfdUDPGetEchoSource) GetMessageType() api.MessageType {
	return api.RequestMessage
}

// BfdUDPGetEchoSourceReply represents VPP binary API message 'bfd_udp_get_echo_source_reply'.
type BfdUDPGetEchoSourceReply struct {
	Retval        int32
	SwIfIndex     InterfaceIndex
	IsSet         bool
	HaveUsableIP4 bool
	IP4Addr       IP4Address
	HaveUsableIP6 bool
	IP6Addr       IP6Address
}

func (*BfdUDPGetEchoSourceReply) GetMessageName() string {
	return "bfd_udp_get_echo_source_reply"
}
func (*BfdUDPGetEchoSourceReply) GetCrcString() string {
	return "8334ab75"
}
func (*BfdUDPGetEchoSourceReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

// BfdUDPMod represents VPP binary API message 'bfd_udp_mod'.
type BfdUDPMod struct {
	SwIfIndex     InterfaceIndex
	DesiredMinTx  uint32
	RequiredMinRx uint32
	LocalAddr     Address
	PeerAddr      Address
	DetectMult    uint8
}

func (*BfdUDPMod) GetMessageName() string {
	return "bfd_udp_mod"
}
func (*BfdUDPMod) GetCrcString() string {
	return "4c260e28"
}
func (*BfdUDPMod) GetMessageType() api.MessageType {
	return api.RequestMessage
}

// BfdUDPModReply represents VPP binary API message 'bfd_udp_mod_reply'.
type BfdUDPModReply struct {
	Retval int32
}

func (*BfdUDPModReply) GetMessageName() string {
	return "bfd_udp_mod_reply"
}
func (*BfdUDPModReply) GetCrcString() string {
	return "e8d4e804"
}
func (*BfdUDPModReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

// BfdUDPSessionDetails represents VPP binary API message 'bfd_udp_session_details'.
type BfdUDPSessionDetails struct {
	SwIfIndex       InterfaceIndex
	LocalAddr       Address
	PeerAddr        Address
	State           BfdState
	IsAuthenticated bool
	BfdKeyID        uint8
	ConfKeyID       uint32
	RequiredMinRx   uint32
	DesiredMinTx    uint32
	DetectMult      uint8
}

func (*BfdUDPSessionDetails) GetMessageName() string {
	return "bfd_udp_session_details"
}
func (*BfdUDPSessionDetails) GetCrcString() string {
	return "275671fd"
}
func (*BfdUDPSessionDetails) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

// BfdUDPSessionDump represents VPP binary API message 'bfd_udp_session_dump'.
type BfdUDPSessionDump struct{}

func (*BfdUDPSessionDump) GetMessageName() string {
	return "bfd_udp_session_dump"
}
func (*BfdUDPSessionDump) GetCrcString() string {
	return "51077d14"
}
func (*BfdUDPSessionDump) GetMessageType() api.MessageType {
	return api.RequestMessage
}

// BfdUDPSessionSetFlags represents VPP binary API message 'bfd_udp_session_set_flags'.
type BfdUDPSessionSetFlags struct {
	SwIfIndex InterfaceIndex
	LocalAddr Address
	PeerAddr  Address
	Flags     IfStatusFlags
}

func (*BfdUDPSessionSetFlags) GetMessageName() string {
	return "bfd_udp_session_set_flags"
}
func (*BfdUDPSessionSetFlags) GetCrcString() string {
	return "0b7af34d"
}
func (*BfdUDPSessionSetFlags) GetMessageType() api.MessageType {
	return api.RequestMessage
}

// BfdUDPSessionSetFlagsReply represents VPP binary API message 'bfd_udp_session_set_flags_reply'.
type BfdUDPSessionSetFlagsReply struct {
	Retval int32
}

func (*BfdUDPSessionSetFlagsReply) GetMessageName() string {
	return "bfd_udp_session_set_flags_reply"
}
func (*BfdUDPSessionSetFlagsReply) GetCrcString() string {
	return "e8d4e804"
}
func (*BfdUDPSessionSetFlagsReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

// BfdUDPSetEchoSource represents VPP binary API message 'bfd_udp_set_echo_source'.
type BfdUDPSetEchoSource struct {
	SwIfIndex InterfaceIndex
}

func (*BfdUDPSetEchoSource) GetMessageName() string {
	return "bfd_udp_set_echo_source"
}
func (*BfdUDPSetEchoSource) GetCrcString() string {
	return "d85aab0d"
}
func (*BfdUDPSetEchoSource) GetMessageType() api.MessageType {
	return api.RequestMessage
}

// BfdUDPSetEchoSourceReply represents VPP binary API message 'bfd_udp_set_echo_source_reply'.
type BfdUDPSetEchoSourceReply struct {
	Retval int32
}

func (*BfdUDPSetEchoSourceReply) GetMessageName() string {
	return "bfd_udp_set_echo_source_reply"
}
func (*BfdUDPSetEchoSourceReply) GetCrcString() string {
	return "e8d4e804"
}
func (*BfdUDPSetEchoSourceReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

// WantBfdEvents represents VPP binary API message 'want_bfd_events'.
type WantBfdEvents struct {
	EnableDisable bool
	PID           uint32
}

func (*WantBfdEvents) GetMessageName() string {
	return "want_bfd_events"
}
func (*WantBfdEvents) GetCrcString() string {
	return "c5e2af94"
}
func (*WantBfdEvents) GetMessageType() api.MessageType {
	return api.RequestMessage
}

// WantBfdEventsReply represents VPP binary API message 'want_bfd_events_reply'.
type WantBfdEventsReply struct {
	Retval int32
}

func (*WantBfdEventsReply) GetMessageName() string {
	return "want_bfd_events_reply"
}
func (*WantBfdEventsReply) GetCrcString() string {
	return "e8d4e804"
}
func (*WantBfdEventsReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func init() {
	api.RegisterMessage((*BfdAuthDelKey)(nil), "bfd.BfdAuthDelKey")
	api.RegisterMessage((*BfdAuthDelKeyReply)(nil), "bfd.BfdAuthDelKeyReply")
	api.RegisterMessage((*BfdAuthKeysDetails)(nil), "bfd.BfdAuthKeysDetails")
	api.RegisterMessage((*BfdAuthKeysDump)(nil), "bfd.BfdAuthKeysDump")
	api.RegisterMessage((*BfdAuthSetKey)(nil), "bfd.BfdAuthSetKey")
	api.RegisterMessage((*BfdAuthSetKeyReply)(nil), "bfd.BfdAuthSetKeyReply")
	api.RegisterMessage((*BfdUDPAdd)(nil), "bfd.BfdUDPAdd")
	api.RegisterMessage((*BfdUDPAddReply)(nil), "bfd.BfdUDPAddReply")
	api.RegisterMessage((*BfdUDPAuthActivate)(nil), "bfd.BfdUDPAuthActivate")
	api.RegisterMessage((*BfdUDPAuthActivateReply)(nil), "bfd.BfdUDPAuthActivateReply")
	api.RegisterMessage((*BfdUDPAuthDeactivate)(nil), "bfd.BfdUDPAuthDeactivate")
	api.RegisterMessage((*BfdUDPAuthDeactivateReply)(nil), "bfd.BfdUDPAuthDeactivateReply")
	api.RegisterMessage((*BfdUDPDel)(nil), "bfd.BfdUDPDel")
	api.RegisterMessage((*BfdUDPDelEchoSource)(nil), "bfd.BfdUDPDelEchoSource")
	api.RegisterMessage((*BfdUDPDelEchoSourceReply)(nil), "bfd.BfdUDPDelEchoSourceReply")
	api.RegisterMessage((*BfdUDPDelReply)(nil), "bfd.BfdUDPDelReply")
	api.RegisterMessage((*BfdUDPGetEchoSource)(nil), "bfd.BfdUDPGetEchoSource")
	api.RegisterMessage((*BfdUDPGetEchoSourceReply)(nil), "bfd.BfdUDPGetEchoSourceReply")
	api.RegisterMessage((*BfdUDPMod)(nil), "bfd.BfdUDPMod")
	api.RegisterMessage((*BfdUDPModReply)(nil), "bfd.BfdUDPModReply")
	api.RegisterMessage((*BfdUDPSessionDetails)(nil), "bfd.BfdUDPSessionDetails")
	api.RegisterMessage((*BfdUDPSessionDump)(nil), "bfd.BfdUDPSessionDump")
	api.RegisterMessage((*BfdUDPSessionSetFlags)(nil), "bfd.BfdUDPSessionSetFlags")
	api.RegisterMessage((*BfdUDPSessionSetFlagsReply)(nil), "bfd.BfdUDPSessionSetFlagsReply")
	api.RegisterMessage((*BfdUDPSetEchoSource)(nil), "bfd.BfdUDPSetEchoSource")
	api.RegisterMessage((*BfdUDPSetEchoSourceReply)(nil), "bfd.BfdUDPSetEchoSourceReply")
	api.RegisterMessage((*WantBfdEvents)(nil), "bfd.WantBfdEvents")
	api.RegisterMessage((*WantBfdEventsReply)(nil), "bfd.WantBfdEventsReply")
}

// Messages returns list of all messages in this module.
func AllMessages() []api.Message {
	return []api.Message{
		(*BfdAuthDelKey)(nil),
		(*BfdAuthDelKeyReply)(nil),
		(*BfdAuthKeysDetails)(nil),
		(*BfdAuthKeysDump)(nil),
		(*BfdAuthSetKey)(nil),
		(*BfdAuthSetKeyReply)(nil),
		(*BfdUDPAdd)(nil),
		(*BfdUDPAddReply)(nil),
		(*BfdUDPAuthActivate)(nil),
		(*BfdUDPAuthActivateReply)(nil),
		(*BfdUDPAuthDeactivate)(nil),
		(*BfdUDPAuthDeactivateReply)(nil),
		(*BfdUDPDel)(nil),
		(*BfdUDPDelEchoSource)(nil),
		(*BfdUDPDelEchoSourceReply)(nil),
		(*BfdUDPDelReply)(nil),
		(*BfdUDPGetEchoSource)(nil),
		(*BfdUDPGetEchoSourceReply)(nil),
		(*BfdUDPMod)(nil),
		(*BfdUDPModReply)(nil),
		(*BfdUDPSessionDetails)(nil),
		(*BfdUDPSessionDump)(nil),
		(*BfdUDPSessionSetFlags)(nil),
		(*BfdUDPSessionSetFlagsReply)(nil),
		(*BfdUDPSetEchoSource)(nil),
		(*BfdUDPSetEchoSourceReply)(nil),
		(*WantBfdEvents)(nil),
		(*WantBfdEventsReply)(nil),
	}
}

// RPCService represents RPC service API for bfd module.
type RPCService interface {
	DumpBfdAuthKeys(ctx context.Context, in *BfdAuthKeysDump) (RPCService_DumpBfdAuthKeysClient, error)
	DumpBfdUDPSession(ctx context.Context, in *BfdUDPSessionDump) (RPCService_DumpBfdUDPSessionClient, error)
	BfdAuthDelKey(ctx context.Context, in *BfdAuthDelKey) (*BfdAuthDelKeyReply, error)
	BfdAuthSetKey(ctx context.Context, in *BfdAuthSetKey) (*BfdAuthSetKeyReply, error)
	BfdUDPAdd(ctx context.Context, in *BfdUDPAdd) (*BfdUDPAddReply, error)
	BfdUDPAuthActivate(ctx context.Context, in *BfdUDPAuthActivate) (*BfdUDPAuthActivateReply, error)
	BfdUDPAuthDeactivate(ctx context.Context, in *BfdUDPAuthDeactivate) (*BfdUDPAuthDeactivateReply, error)
	BfdUDPDel(ctx context.Context, in *BfdUDPDel) (*BfdUDPDelReply, error)
	BfdUDPDelEchoSource(ctx context.Context, in *BfdUDPDelEchoSource) (*BfdUDPDelEchoSourceReply, error)
	BfdUDPGetEchoSource(ctx context.Context, in *BfdUDPGetEchoSource) (*BfdUDPGetEchoSourceReply, error)
	BfdUDPMod(ctx context.Context, in *BfdUDPMod) (*BfdUDPModReply, error)
	BfdUDPSessionSetFlags(ctx context.Context, in *BfdUDPSessionSetFlags) (*BfdUDPSessionSetFlagsReply, error)
	BfdUDPSetEchoSource(ctx context.Context, in *BfdUDPSetEchoSource) (*BfdUDPSetEchoSourceReply, error)
	WantBfdEvents(ctx context.Context, in *WantBfdEvents) (*WantBfdEventsReply, error)
}

type serviceClient struct {
	ch api.Channel
}

func NewServiceClient(ch api.Channel) RPCService {
	return &serviceClient{ch}
}

func (c *serviceClient) DumpBfdAuthKeys(ctx context.Context, in *BfdAuthKeysDump) (RPCService_DumpBfdAuthKeysClient, error) {
	stream := c.ch.SendMultiRequest(in)
	x := &serviceClient_DumpBfdAuthKeysClient{stream}
	return x, nil
}

type RPCService_DumpBfdAuthKeysClient interface {
	Recv() (*BfdAuthKeysDetails, error)
}

type serviceClient_DumpBfdAuthKeysClient struct {
	api.MultiRequestCtx
}

func (c *serviceClient_DumpBfdAuthKeysClient) Recv() (*BfdAuthKeysDetails, error) {
	m := new(BfdAuthKeysDetails)
	stop, err := c.MultiRequestCtx.ReceiveReply(m)
	if err != nil {
		return nil, err
	}
	if stop {
		return nil, io.EOF
	}
	return m, nil
}

func (c *serviceClient) DumpBfdUDPSession(ctx context.Context, in *BfdUDPSessionDump) (RPCService_DumpBfdUDPSessionClient, error) {
	stream := c.ch.SendMultiRequest(in)
	x := &serviceClient_DumpBfdUDPSessionClient{stream}
	return x, nil
}

type RPCService_DumpBfdUDPSessionClient interface {
	Recv() (*BfdUDPSessionDetails, error)
}

type serviceClient_DumpBfdUDPSessionClient struct {
	api.MultiRequestCtx
}

func (c *serviceClient_DumpBfdUDPSessionClient) Recv() (*BfdUDPSessionDetails, error) {
	m := new(BfdUDPSessionDetails)
	stop, err := c.MultiRequestCtx.ReceiveReply(m)
	if err != nil {
		return nil, err
	}
	if stop {
		return nil, io.EOF
	}
	return m, nil
}

func (c *serviceClient) BfdAuthDelKey(ctx context.Context, in *BfdAuthDelKey) (*BfdAuthDelKeyReply, error) {
	out := new(BfdAuthDelKeyReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) BfdAuthSetKey(ctx context.Context, in *BfdAuthSetKey) (*BfdAuthSetKeyReply, error) {
	out := new(BfdAuthSetKeyReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) BfdUDPAdd(ctx context.Context, in *BfdUDPAdd) (*BfdUDPAddReply, error) {
	out := new(BfdUDPAddReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) BfdUDPAuthActivate(ctx context.Context, in *BfdUDPAuthActivate) (*BfdUDPAuthActivateReply, error) {
	out := new(BfdUDPAuthActivateReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) BfdUDPAuthDeactivate(ctx context.Context, in *BfdUDPAuthDeactivate) (*BfdUDPAuthDeactivateReply, error) {
	out := new(BfdUDPAuthDeactivateReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) BfdUDPDel(ctx context.Context, in *BfdUDPDel) (*BfdUDPDelReply, error) {
	out := new(BfdUDPDelReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) BfdUDPDelEchoSource(ctx context.Context, in *BfdUDPDelEchoSource) (*BfdUDPDelEchoSourceReply, error) {
	out := new(BfdUDPDelEchoSourceReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) BfdUDPGetEchoSource(ctx context.Context, in *BfdUDPGetEchoSource) (*BfdUDPGetEchoSourceReply, error) {
	out := new(BfdUDPGetEchoSourceReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) BfdUDPMod(ctx context.Context, in *BfdUDPMod) (*BfdUDPModReply, error) {
	out := new(BfdUDPModReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) BfdUDPSessionSetFlags(ctx context.Context, in *BfdUDPSessionSetFlags) (*BfdUDPSessionSetFlagsReply, error) {
	out := new(BfdUDPSessionSetFlagsReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) BfdUDPSetEchoSource(ctx context.Context, in *BfdUDPSetEchoSource) (*BfdUDPSetEchoSourceReply, error) {
	out := new(BfdUDPSetEchoSourceReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) WantBfdEvents(ctx context.Context, in *WantBfdEvents) (*WantBfdEventsReply, error) {
	out := new(WantBfdEventsReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// This is a compile-time assertion to ensure that this generated file
// is compatible with the GoVPP api package it is being compiled against.
// A compilation error at this line likely means your copy of the
// GoVPP api package needs to be updated.
const _ = api.GoVppAPIPackageIsVersion1 // please upgrade the GoVPP api package

// Reference imports to suppress errors if they are not otherwise used.
var _ = api.RegisterMessage
var _ = bytes.NewBuffer
var _ = context.Background
var _ = io.Copy
var _ = strconv.Itoa
var _ = struc.Pack
