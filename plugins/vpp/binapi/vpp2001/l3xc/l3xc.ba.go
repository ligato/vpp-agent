// Code generated by GoVPP's binapi-generator. DO NOT EDIT.
// source: /usr/share/vpp/api/plugins/l3xc.api.json

/*
Package l3xc is a generated VPP binary API for 'l3xc' module.

It consists of:
	 13 enums
	  6 aliases
	 10 types
	  1 union
	  8 messages
	  4 services
*/
package l3xc

import (
	bytes "bytes"
	context "context"
	api "git.fd.io/govpp.git/api"
	struc "github.com/lunixbochs/struc"
	io "io"
	strconv "strconv"

	fib_types "go.ligato.io/vpp-agent/v3/plugins/vpp/binapi/vpp2001/fib_types"
	interface_types "go.ligato.io/vpp-agent/v3/plugins/vpp/binapi/vpp2001/interface_types"
	ip_types "go.ligato.io/vpp-agent/v3/plugins/vpp/binapi/vpp2001/ip_types"
)

const (
	// ModuleName is the name of this module.
	ModuleName = "l3xc"
	// VersionCrc is the CRC of this module.
	VersionCrc = 0x80b00c99
)

type AddressFamily = ip_types.AddressFamily

type FibPathFlags = fib_types.FibPathFlags

type FibPathNhProto = fib_types.FibPathNhProto

type FibPathType = fib_types.FibPathType

type IfStatusFlags = interface_types.IfStatusFlags

type IfType = interface_types.IfType

type IPDscp = ip_types.IPDscp

type IPEcn = ip_types.IPEcn

type IPProto = ip_types.IPProto

type LinkDuplex = interface_types.LinkDuplex

type MtuProto = interface_types.MtuProto

type RxMode = interface_types.RxMode

type SubIfFlags = interface_types.SubIfFlags

type AddressWithPrefix = ip_types.AddressWithPrefix

type InterfaceIndex = interface_types.InterfaceIndex

type IP4Address = ip_types.IP4Address

type IP4AddressWithPrefix = ip_types.IP4AddressWithPrefix

type IP6Address = ip_types.IP6Address

type IP6AddressWithPrefix = ip_types.IP6AddressWithPrefix

type Address = ip_types.Address

type FibMplsLabel = fib_types.FibMplsLabel

type FibPath = fib_types.FibPath

type FibPathNh = fib_types.FibPathNh

type IP4Prefix = ip_types.IP4Prefix

type IP6Prefix = ip_types.IP6Prefix

// L3xc represents VPP binary API type 'l3xc'.
type L3xc struct {
	SwIfIndex InterfaceIndex
	IsIP6     bool
	NPaths    uint8 `struc:"sizeof=Paths"`
	Paths     []FibPath
}

func (*L3xc) GetTypeName() string { return "l3xc" }

type Mprefix = ip_types.Mprefix

type Prefix = ip_types.Prefix

type PrefixMatcher = ip_types.PrefixMatcher

type AddressUnion = ip_types.AddressUnion

// L3xcDel represents VPP binary API message 'l3xc_del'.
type L3xcDel struct {
	SwIfIndex InterfaceIndex
	IsIP6     bool
}

func (m *L3xcDel) Reset()                        { *m = L3xcDel{} }
func (*L3xcDel) GetMessageName() string          { return "l3xc_del" }
func (*L3xcDel) GetCrcString() string            { return "e7dbef91" }
func (*L3xcDel) GetMessageType() api.MessageType { return api.RequestMessage }

// L3xcDelReply represents VPP binary API message 'l3xc_del_reply'.
type L3xcDelReply struct {
	Retval int32
}

func (m *L3xcDelReply) Reset()                        { *m = L3xcDelReply{} }
func (*L3xcDelReply) GetMessageName() string          { return "l3xc_del_reply" }
func (*L3xcDelReply) GetCrcString() string            { return "e8d4e804" }
func (*L3xcDelReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// L3xcDetails represents VPP binary API message 'l3xc_details'.
type L3xcDetails struct {
	L3xc L3xc
}

func (m *L3xcDetails) Reset()                        { *m = L3xcDetails{} }
func (*L3xcDetails) GetMessageName() string          { return "l3xc_details" }
func (*L3xcDetails) GetCrcString() string            { return "d4f69627" }
func (*L3xcDetails) GetMessageType() api.MessageType { return api.ReplyMessage }

// L3xcDump represents VPP binary API message 'l3xc_dump'.
type L3xcDump struct {
	SwIfIndex InterfaceIndex
}

func (m *L3xcDump) Reset()                        { *m = L3xcDump{} }
func (*L3xcDump) GetMessageName() string          { return "l3xc_dump" }
func (*L3xcDump) GetCrcString() string            { return "f9e6675e" }
func (*L3xcDump) GetMessageType() api.MessageType { return api.RequestMessage }

// L3xcPluginGetVersion represents VPP binary API message 'l3xc_plugin_get_version'.
type L3xcPluginGetVersion struct{}

func (m *L3xcPluginGetVersion) Reset()                        { *m = L3xcPluginGetVersion{} }
func (*L3xcPluginGetVersion) GetMessageName() string          { return "l3xc_plugin_get_version" }
func (*L3xcPluginGetVersion) GetCrcString() string            { return "51077d14" }
func (*L3xcPluginGetVersion) GetMessageType() api.MessageType { return api.RequestMessage }

// L3xcPluginGetVersionReply represents VPP binary API message 'l3xc_plugin_get_version_reply'.
type L3xcPluginGetVersionReply struct {
	Major uint32
	Minor uint32
}

func (m *L3xcPluginGetVersionReply) Reset()                        { *m = L3xcPluginGetVersionReply{} }
func (*L3xcPluginGetVersionReply) GetMessageName() string          { return "l3xc_plugin_get_version_reply" }
func (*L3xcPluginGetVersionReply) GetCrcString() string            { return "9b32cf86" }
func (*L3xcPluginGetVersionReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// L3xcUpdate represents VPP binary API message 'l3xc_update'.
type L3xcUpdate struct {
	L3xc L3xc
}

func (m *L3xcUpdate) Reset()                        { *m = L3xcUpdate{} }
func (*L3xcUpdate) GetMessageName() string          { return "l3xc_update" }
func (*L3xcUpdate) GetCrcString() string            { return "0787b1d3" }
func (*L3xcUpdate) GetMessageType() api.MessageType { return api.RequestMessage }

// L3xcUpdateReply represents VPP binary API message 'l3xc_update_reply'.
type L3xcUpdateReply struct {
	Retval     int32
	StatsIndex uint32
}

func (m *L3xcUpdateReply) Reset()                        { *m = L3xcUpdateReply{} }
func (*L3xcUpdateReply) GetMessageName() string          { return "l3xc_update_reply" }
func (*L3xcUpdateReply) GetCrcString() string            { return "1992deab" }
func (*L3xcUpdateReply) GetMessageType() api.MessageType { return api.ReplyMessage }

func init() {
	api.RegisterMessage((*L3xcDel)(nil), "l3xc.L3xcDel")
	api.RegisterMessage((*L3xcDelReply)(nil), "l3xc.L3xcDelReply")
	api.RegisterMessage((*L3xcDetails)(nil), "l3xc.L3xcDetails")
	api.RegisterMessage((*L3xcDump)(nil), "l3xc.L3xcDump")
	api.RegisterMessage((*L3xcPluginGetVersion)(nil), "l3xc.L3xcPluginGetVersion")
	api.RegisterMessage((*L3xcPluginGetVersionReply)(nil), "l3xc.L3xcPluginGetVersionReply")
	api.RegisterMessage((*L3xcUpdate)(nil), "l3xc.L3xcUpdate")
	api.RegisterMessage((*L3xcUpdateReply)(nil), "l3xc.L3xcUpdateReply")
}

// Messages returns list of all messages in this module.
func AllMessages() []api.Message {
	return []api.Message{
		(*L3xcDel)(nil),
		(*L3xcDelReply)(nil),
		(*L3xcDetails)(nil),
		(*L3xcDump)(nil),
		(*L3xcPluginGetVersion)(nil),
		(*L3xcPluginGetVersionReply)(nil),
		(*L3xcUpdate)(nil),
		(*L3xcUpdateReply)(nil),
	}
}

// RPCService represents RPC service API for l3xc module.
type RPCService interface {
	DumpL3xc(ctx context.Context, in *L3xcDump) (RPCService_DumpL3xcClient, error)
	L3xcDel(ctx context.Context, in *L3xcDel) (*L3xcDelReply, error)
	L3xcPluginGetVersion(ctx context.Context, in *L3xcPluginGetVersion) (*L3xcPluginGetVersionReply, error)
	L3xcUpdate(ctx context.Context, in *L3xcUpdate) (*L3xcUpdateReply, error)
}

type serviceClient struct {
	ch api.Channel
}

func NewServiceClient(ch api.Channel) RPCService {
	return &serviceClient{ch}
}

func (c *serviceClient) DumpL3xc(ctx context.Context, in *L3xcDump) (RPCService_DumpL3xcClient, error) {
	stream := c.ch.SendMultiRequest(in)
	x := &serviceClient_DumpL3xcClient{stream}
	return x, nil
}

type RPCService_DumpL3xcClient interface {
	Recv() (*L3xcDetails, error)
}

type serviceClient_DumpL3xcClient struct {
	api.MultiRequestCtx
}

func (c *serviceClient_DumpL3xcClient) Recv() (*L3xcDetails, error) {
	m := new(L3xcDetails)
	stop, err := c.MultiRequestCtx.ReceiveReply(m)
	if err != nil {
		return nil, err
	}
	if stop {
		return nil, io.EOF
	}
	return m, nil
}

func (c *serviceClient) L3xcDel(ctx context.Context, in *L3xcDel) (*L3xcDelReply, error) {
	out := new(L3xcDelReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) L3xcPluginGetVersion(ctx context.Context, in *L3xcPluginGetVersion) (*L3xcPluginGetVersionReply, error) {
	out := new(L3xcPluginGetVersionReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) L3xcUpdate(ctx context.Context, in *L3xcUpdate) (*L3xcUpdateReply, error) {
	out := new(L3xcUpdateReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// This is a compile-time assertion to ensure that this generated file
// is compatible with the GoVPP api package it is being compiled against.
// A compilation error at this line likely means your copy of the
// GoVPP api package needs to be updated.
const _ = api.GoVppAPIPackageIsVersion1 // please upgrade the GoVPP api package

// Reference imports to suppress errors if they are not otherwise used.
var _ = api.RegisterMessage
var _ = bytes.NewBuffer
var _ = context.Background
var _ = io.Copy
var _ = strconv.Itoa
var _ = struc.Pack
