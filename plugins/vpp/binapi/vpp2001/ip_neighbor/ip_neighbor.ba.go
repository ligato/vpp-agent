// Code generated by GoVPP's binapi-generator. DO NOT EDIT.
// source: /usr/share/vpp/api/core/ip_neighbor.api.json

/*
Package ip_neighbor is a generated VPP binary API for 'ip_neighbor' module.

It consists of:
	 11 enums
	  7 aliases
	  7 types
	  1 union
	  9 messages
	  4 services
*/
package ip_neighbor

import (
	bytes "bytes"
	context "context"
	api "git.fd.io/govpp.git/api"
	struc "github.com/lunixbochs/struc"
	io "io"
	strconv "strconv"

	ethernet_types "go.ligato.io/vpp-agent/v3/plugins/vpp/binapi/vpp2001/ethernet_types"
	interface_types "go.ligato.io/vpp-agent/v3/plugins/vpp/binapi/vpp2001/interface_types"
	ip_types "go.ligato.io/vpp-agent/v3/plugins/vpp/binapi/vpp2001/ip_types"
)

const (
	// ModuleName is the name of this module.
	ModuleName = "ip_neighbor"
	// VersionCrc is the CRC of this module.
	VersionCrc = 0xdae37c55
)

type AddressFamily = ip_types.AddressFamily

type IfStatusFlags = interface_types.IfStatusFlags

type IfType = interface_types.IfType

type IPDscp = ip_types.IPDscp

type IPEcn = ip_types.IPEcn

// IPNeighborFlags represents VPP binary API enum 'ip_neighbor_flags'.
type IPNeighborFlags uint8

const (
	IP_API_NEIGHBOR_FLAG_NONE         IPNeighborFlags = 0
	IP_API_NEIGHBOR_FLAG_STATIC       IPNeighborFlags = 1
	IP_API_NEIGHBOR_FLAG_NO_FIB_ENTRY IPNeighborFlags = 2
)

var IPNeighborFlags_name = map[uint8]string{
	0: "IP_API_NEIGHBOR_FLAG_NONE",
	1: "IP_API_NEIGHBOR_FLAG_STATIC",
	2: "IP_API_NEIGHBOR_FLAG_NO_FIB_ENTRY",
}

var IPNeighborFlags_value = map[string]uint8{
	"IP_API_NEIGHBOR_FLAG_NONE":         0,
	"IP_API_NEIGHBOR_FLAG_STATIC":       1,
	"IP_API_NEIGHBOR_FLAG_NO_FIB_ENTRY": 2,
}

func (x IPNeighborFlags) String() string {
	s, ok := IPNeighborFlags_name[uint8(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

type IPProto = ip_types.IPProto

type LinkDuplex = interface_types.LinkDuplex

type MtuProto = interface_types.MtuProto

type RxMode = interface_types.RxMode

type SubIfFlags = interface_types.SubIfFlags

type AddressWithPrefix = ip_types.AddressWithPrefix

type InterfaceIndex = interface_types.InterfaceIndex

type IP4Address = ip_types.IP4Address

type IP4AddressWithPrefix = ip_types.IP4AddressWithPrefix

type IP6Address = ip_types.IP6Address

type IP6AddressWithPrefix = ip_types.IP6AddressWithPrefix

type MacAddress = ethernet_types.MacAddress

type Address = ip_types.Address

type IP4Prefix = ip_types.IP4Prefix

type IP6Prefix = ip_types.IP6Prefix

// IPNeighbor represents VPP binary API type 'ip_neighbor'.
type IPNeighbor struct {
	SwIfIndex  InterfaceIndex
	Flags      IPNeighborFlags
	MacAddress MacAddress
	IPAddress  Address
}

func (*IPNeighbor) GetTypeName() string { return "ip_neighbor" }

type Mprefix = ip_types.Mprefix

type Prefix = ip_types.Prefix

type PrefixMatcher = ip_types.PrefixMatcher

type AddressUnion = ip_types.AddressUnion

// IPNeighborAddDel represents VPP binary API message 'ip_neighbor_add_del'.
type IPNeighborAddDel struct {
	IsAdd    bool
	Neighbor IPNeighbor
}

func (m *IPNeighborAddDel) Reset()                        { *m = IPNeighborAddDel{} }
func (*IPNeighborAddDel) GetMessageName() string          { return "ip_neighbor_add_del" }
func (*IPNeighborAddDel) GetCrcString() string            { return "105518b6" }
func (*IPNeighborAddDel) GetMessageType() api.MessageType { return api.RequestMessage }

// IPNeighborAddDelReply represents VPP binary API message 'ip_neighbor_add_del_reply'.
type IPNeighborAddDelReply struct {
	Retval     int32
	StatsIndex uint32
}

func (m *IPNeighborAddDelReply) Reset()                        { *m = IPNeighborAddDelReply{} }
func (*IPNeighborAddDelReply) GetMessageName() string          { return "ip_neighbor_add_del_reply" }
func (*IPNeighborAddDelReply) GetCrcString() string            { return "1992deab" }
func (*IPNeighborAddDelReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// IPNeighborConfig represents VPP binary API message 'ip_neighbor_config'.
type IPNeighborConfig struct {
	Af        AddressFamily
	MaxNumber uint32
	MaxAge    uint32
	Recycle   bool
}

func (m *IPNeighborConfig) Reset()                        { *m = IPNeighborConfig{} }
func (*IPNeighborConfig) GetMessageName() string          { return "ip_neighbor_config" }
func (*IPNeighborConfig) GetCrcString() string            { return "f4a5cf44" }
func (*IPNeighborConfig) GetMessageType() api.MessageType { return api.RequestMessage }

// IPNeighborConfigReply represents VPP binary API message 'ip_neighbor_config_reply'.
type IPNeighborConfigReply struct {
	Retval int32
}

func (m *IPNeighborConfigReply) Reset()                        { *m = IPNeighborConfigReply{} }
func (*IPNeighborConfigReply) GetMessageName() string          { return "ip_neighbor_config_reply" }
func (*IPNeighborConfigReply) GetCrcString() string            { return "e8d4e804" }
func (*IPNeighborConfigReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// IPNeighborDetails represents VPP binary API message 'ip_neighbor_details'.
type IPNeighborDetails struct {
	Neighbor IPNeighbor
}

func (m *IPNeighborDetails) Reset()                        { *m = IPNeighborDetails{} }
func (*IPNeighborDetails) GetMessageName() string          { return "ip_neighbor_details" }
func (*IPNeighborDetails) GetCrcString() string            { return "59121ce9" }
func (*IPNeighborDetails) GetMessageType() api.MessageType { return api.ReplyMessage }

// IPNeighborDump represents VPP binary API message 'ip_neighbor_dump'.
type IPNeighborDump struct {
	SwIfIndex InterfaceIndex
	Af        AddressFamily
}

func (m *IPNeighborDump) Reset()                        { *m = IPNeighborDump{} }
func (*IPNeighborDump) GetMessageName() string          { return "ip_neighbor_dump" }
func (*IPNeighborDump) GetCrcString() string            { return "cd831298" }
func (*IPNeighborDump) GetMessageType() api.MessageType { return api.RequestMessage }

// IPNeighborEvent represents VPP binary API message 'ip_neighbor_event'.
type IPNeighborEvent struct {
	PID      uint32
	Neighbor IPNeighbor
}

func (m *IPNeighborEvent) Reset()                        { *m = IPNeighborEvent{} }
func (*IPNeighborEvent) GetMessageName() string          { return "ip_neighbor_event" }
func (*IPNeighborEvent) GetCrcString() string            { return "83933131" }
func (*IPNeighborEvent) GetMessageType() api.MessageType { return api.EventMessage }

// WantIPNeighborEvents represents VPP binary API message 'want_ip_neighbor_events'.
type WantIPNeighborEvents struct {
	Enable    bool
	PID       uint32
	IP        Address
	SwIfIndex InterfaceIndex
}

func (m *WantIPNeighborEvents) Reset()                        { *m = WantIPNeighborEvents{} }
func (*WantIPNeighborEvents) GetMessageName() string          { return "want_ip_neighbor_events" }
func (*WantIPNeighborEvents) GetCrcString() string            { return "1a312870" }
func (*WantIPNeighborEvents) GetMessageType() api.MessageType { return api.RequestMessage }

// WantIPNeighborEventsReply represents VPP binary API message 'want_ip_neighbor_events_reply'.
type WantIPNeighborEventsReply struct {
	Retval int32
}

func (m *WantIPNeighborEventsReply) Reset()                        { *m = WantIPNeighborEventsReply{} }
func (*WantIPNeighborEventsReply) GetMessageName() string          { return "want_ip_neighbor_events_reply" }
func (*WantIPNeighborEventsReply) GetCrcString() string            { return "e8d4e804" }
func (*WantIPNeighborEventsReply) GetMessageType() api.MessageType { return api.ReplyMessage }

func init() {
	api.RegisterMessage((*IPNeighborAddDel)(nil), "ip_neighbor.IPNeighborAddDel")
	api.RegisterMessage((*IPNeighborAddDelReply)(nil), "ip_neighbor.IPNeighborAddDelReply")
	api.RegisterMessage((*IPNeighborConfig)(nil), "ip_neighbor.IPNeighborConfig")
	api.RegisterMessage((*IPNeighborConfigReply)(nil), "ip_neighbor.IPNeighborConfigReply")
	api.RegisterMessage((*IPNeighborDetails)(nil), "ip_neighbor.IPNeighborDetails")
	api.RegisterMessage((*IPNeighborDump)(nil), "ip_neighbor.IPNeighborDump")
	api.RegisterMessage((*IPNeighborEvent)(nil), "ip_neighbor.IPNeighborEvent")
	api.RegisterMessage((*WantIPNeighborEvents)(nil), "ip_neighbor.WantIPNeighborEvents")
	api.RegisterMessage((*WantIPNeighborEventsReply)(nil), "ip_neighbor.WantIPNeighborEventsReply")
}

// Messages returns list of all messages in this module.
func AllMessages() []api.Message {
	return []api.Message{
		(*IPNeighborAddDel)(nil),
		(*IPNeighborAddDelReply)(nil),
		(*IPNeighborConfig)(nil),
		(*IPNeighborConfigReply)(nil),
		(*IPNeighborDetails)(nil),
		(*IPNeighborDump)(nil),
		(*IPNeighborEvent)(nil),
		(*WantIPNeighborEvents)(nil),
		(*WantIPNeighborEventsReply)(nil),
	}
}

// RPCService represents RPC service API for ip_neighbor module.
type RPCService interface {
	DumpIPNeighbor(ctx context.Context, in *IPNeighborDump) (RPCService_DumpIPNeighborClient, error)
	IPNeighborAddDel(ctx context.Context, in *IPNeighborAddDel) (*IPNeighborAddDelReply, error)
	IPNeighborConfig(ctx context.Context, in *IPNeighborConfig) (*IPNeighborConfigReply, error)
	WantIPNeighborEvents(ctx context.Context, in *WantIPNeighborEvents) (*WantIPNeighborEventsReply, error)
}

type serviceClient struct {
	ch api.Channel
}

func NewServiceClient(ch api.Channel) RPCService {
	return &serviceClient{ch}
}

func (c *serviceClient) DumpIPNeighbor(ctx context.Context, in *IPNeighborDump) (RPCService_DumpIPNeighborClient, error) {
	stream := c.ch.SendMultiRequest(in)
	x := &serviceClient_DumpIPNeighborClient{stream}
	return x, nil
}

type RPCService_DumpIPNeighborClient interface {
	Recv() (*IPNeighborDetails, error)
}

type serviceClient_DumpIPNeighborClient struct {
	api.MultiRequestCtx
}

func (c *serviceClient_DumpIPNeighborClient) Recv() (*IPNeighborDetails, error) {
	m := new(IPNeighborDetails)
	stop, err := c.MultiRequestCtx.ReceiveReply(m)
	if err != nil {
		return nil, err
	}
	if stop {
		return nil, io.EOF
	}
	return m, nil
}

func (c *serviceClient) IPNeighborAddDel(ctx context.Context, in *IPNeighborAddDel) (*IPNeighborAddDelReply, error) {
	out := new(IPNeighborAddDelReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) IPNeighborConfig(ctx context.Context, in *IPNeighborConfig) (*IPNeighborConfigReply, error) {
	out := new(IPNeighborConfigReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) WantIPNeighborEvents(ctx context.Context, in *WantIPNeighborEvents) (*WantIPNeighborEventsReply, error) {
	out := new(WantIPNeighborEventsReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// This is a compile-time assertion to ensure that this generated file
// is compatible with the GoVPP api package it is being compiled against.
// A compilation error at this line likely means your copy of the
// GoVPP api package needs to be updated.
const _ = api.GoVppAPIPackageIsVersion1 // please upgrade the GoVPP api package

// Reference imports to suppress errors if they are not otherwise used.
var _ = api.RegisterMessage
var _ = bytes.NewBuffer
var _ = context.Background
var _ = io.Copy
var _ = strconv.Itoa
var _ = struc.Pack
