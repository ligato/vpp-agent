// Code generated by GoVPP's binapi-generator. DO NOT EDIT.
// source: /usr/share/vpp/api/tap.api.json

/*
Package tap is a generated VPP binary API for 'tap' module.

It consists of:
	  8 messages
	  4 services
*/
package tap

import (
	bytes "bytes"
	context "context"
	api "git.fd.io/govpp.git/api"
	struc "github.com/lunixbochs/struc"
	io "io"
	strconv "strconv"
)

const (
	// ModuleName is the name of this module.
	ModuleName = "tap"
	// VersionCrc is the CRC of this module.
	VersionCrc = 0xacec1ba1
)

// SwInterfaceTapDetails represents VPP binary API message 'sw_interface_tap_details'.
type SwInterfaceTapDetails struct {
	SwIfIndex uint32
	DevName   []byte `struc:"[64]byte"`
}

func (*SwInterfaceTapDetails) GetMessageName() string {
	return "sw_interface_tap_details"
}
func (*SwInterfaceTapDetails) GetCrcString() string {
	return "76229a57"
}
func (*SwInterfaceTapDetails) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

// SwInterfaceTapDump represents VPP binary API message 'sw_interface_tap_dump'.
type SwInterfaceTapDump struct{}

func (*SwInterfaceTapDump) GetMessageName() string {
	return "sw_interface_tap_dump"
}
func (*SwInterfaceTapDump) GetCrcString() string {
	return "51077d14"
}
func (*SwInterfaceTapDump) GetMessageType() api.MessageType {
	return api.RequestMessage
}

// TapConnect represents VPP binary API message 'tap_connect'.
type TapConnect struct {
	UseRandomMac      uint8
	TapName           []byte `struc:"[64]byte"`
	MacAddress        []byte `struc:"[6]byte"`
	Renumber          uint8
	CustomDevInstance uint32
	IP4AddressSet     uint8
	IP4Address        []byte `struc:"[4]byte"`
	IP4MaskWidth      uint8
	IP6AddressSet     uint8
	IP6Address        []byte `struc:"[16]byte"`
	IP6MaskWidth      uint8
	Tag               []byte `struc:"[64]byte"`
}

func (*TapConnect) GetMessageName() string {
	return "tap_connect"
}
func (*TapConnect) GetCrcString() string {
	return "9b9c396f"
}
func (*TapConnect) GetMessageType() api.MessageType {
	return api.RequestMessage
}

// TapConnectReply represents VPP binary API message 'tap_connect_reply'.
type TapConnectReply struct {
	Retval    int32
	SwIfIndex uint32
}

func (*TapConnectReply) GetMessageName() string {
	return "tap_connect_reply"
}
func (*TapConnectReply) GetCrcString() string {
	return "fda5941f"
}
func (*TapConnectReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

// TapDelete represents VPP binary API message 'tap_delete'.
type TapDelete struct {
	SwIfIndex uint32
}

func (*TapDelete) GetMessageName() string {
	return "tap_delete"
}
func (*TapDelete) GetCrcString() string {
	return "529cb13f"
}
func (*TapDelete) GetMessageType() api.MessageType {
	return api.RequestMessage
}

// TapDeleteReply represents VPP binary API message 'tap_delete_reply'.
type TapDeleteReply struct {
	Retval int32
}

func (*TapDeleteReply) GetMessageName() string {
	return "tap_delete_reply"
}
func (*TapDeleteReply) GetCrcString() string {
	return "e8d4e804"
}
func (*TapDeleteReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

// TapModify represents VPP binary API message 'tap_modify'.
type TapModify struct {
	SwIfIndex         uint32
	UseRandomMac      uint8
	TapName           []byte `struc:"[64]byte"`
	MacAddress        []byte `struc:"[6]byte"`
	Renumber          uint8
	CustomDevInstance uint32
}

func (*TapModify) GetMessageName() string {
	return "tap_modify"
}
func (*TapModify) GetCrcString() string {
	return "8047ae5c"
}
func (*TapModify) GetMessageType() api.MessageType {
	return api.RequestMessage
}

// TapModifyReply represents VPP binary API message 'tap_modify_reply'.
type TapModifyReply struct {
	Retval    int32
	SwIfIndex uint32
}

func (*TapModifyReply) GetMessageName() string {
	return "tap_modify_reply"
}
func (*TapModifyReply) GetCrcString() string {
	return "fda5941f"
}
func (*TapModifyReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func init() {
	api.RegisterMessage((*SwInterfaceTapDetails)(nil), "tap.SwInterfaceTapDetails")
	api.RegisterMessage((*SwInterfaceTapDump)(nil), "tap.SwInterfaceTapDump")
	api.RegisterMessage((*TapConnect)(nil), "tap.TapConnect")
	api.RegisterMessage((*TapConnectReply)(nil), "tap.TapConnectReply")
	api.RegisterMessage((*TapDelete)(nil), "tap.TapDelete")
	api.RegisterMessage((*TapDeleteReply)(nil), "tap.TapDeleteReply")
	api.RegisterMessage((*TapModify)(nil), "tap.TapModify")
	api.RegisterMessage((*TapModifyReply)(nil), "tap.TapModifyReply")
}

// Messages returns list of all messages in this module.
func AllMessages() []api.Message {
	return []api.Message{
		(*SwInterfaceTapDetails)(nil),
		(*SwInterfaceTapDump)(nil),
		(*TapConnect)(nil),
		(*TapConnectReply)(nil),
		(*TapDelete)(nil),
		(*TapDeleteReply)(nil),
		(*TapModify)(nil),
		(*TapModifyReply)(nil),
	}
}

// RPCService represents RPC service API for tap module.
type RPCService interface {
	DumpSwInterfaceTap(ctx context.Context, in *SwInterfaceTapDump) (RPCService_DumpSwInterfaceTapClient, error)
	TapConnect(ctx context.Context, in *TapConnect) (*TapConnectReply, error)
	TapDelete(ctx context.Context, in *TapDelete) (*TapDeleteReply, error)
	TapModify(ctx context.Context, in *TapModify) (*TapModifyReply, error)
}

type serviceClient struct {
	ch api.Channel
}

func NewServiceClient(ch api.Channel) RPCService {
	return &serviceClient{ch}
}

func (c *serviceClient) DumpSwInterfaceTap(ctx context.Context, in *SwInterfaceTapDump) (RPCService_DumpSwInterfaceTapClient, error) {
	stream := c.ch.SendMultiRequest(in)
	x := &serviceClient_DumpSwInterfaceTapClient{stream}
	return x, nil
}

type RPCService_DumpSwInterfaceTapClient interface {
	Recv() (*SwInterfaceTapDetails, error)
}

type serviceClient_DumpSwInterfaceTapClient struct {
	api.MultiRequestCtx
}

func (c *serviceClient_DumpSwInterfaceTapClient) Recv() (*SwInterfaceTapDetails, error) {
	m := new(SwInterfaceTapDetails)
	stop, err := c.MultiRequestCtx.ReceiveReply(m)
	if err != nil {
		return nil, err
	}
	if stop {
		return nil, io.EOF
	}
	return m, nil
}

func (c *serviceClient) TapConnect(ctx context.Context, in *TapConnect) (*TapConnectReply, error) {
	out := new(TapConnectReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) TapDelete(ctx context.Context, in *TapDelete) (*TapDeleteReply, error) {
	out := new(TapDeleteReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) TapModify(ctx context.Context, in *TapModify) (*TapModifyReply, error) {
	out := new(TapModifyReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// This is a compile-time assertion to ensure that this generated file
// is compatible with the GoVPP api package it is being compiled against.
// A compilation error at this line likely means your copy of the
// GoVPP api package needs to be updated.
const _ = api.GoVppAPIPackageIsVersion1 // please upgrade the GoVPP api package

// Reference imports to suppress errors if they are not otherwise used.
var _ = api.RegisterMessage
var _ = bytes.NewBuffer
var _ = context.Background
var _ = io.Copy
var _ = strconv.Itoa
var _ = struc.Pack
