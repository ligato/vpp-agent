// Code generated by govpp binapi-generator DO NOT EDIT.
// Package dhcp represents the VPP binary API of the 'dhcp' VPP module.
// Generated from '/usr/share/vpp/api/dhcp.api.json'
package dhcp

import "git.fd.io/govpp.git/api"

// DhcpClient represents the VPP binary API data type 'dhcp_client'.
// Generated from '/usr/share/vpp/api/dhcp.api.json', line 626:
//
//            "dhcp_client",
//            [
//                "u32",
//                "sw_if_index"
//            ],
//            [
//                "u8",
//                "hostname",
//                64
//            ],
//            [
//                "u8",
//                "id",
//                64
//            ],
//            [
//                "u8",
//                "want_dhcp_event"
//            ],
//            [
//                "u8",
//                "set_broadcast_flag"
//            ],
//            [
//                "u32",
//                "pid"
//            ],
//            {
//                "crc": "0x527f7935"
//            }
//
type DhcpClient struct {
	SwIfIndex        uint32
	Hostname         []byte `struc:"[64]byte"`
	ID               []byte `struc:"[64]byte"`
	WantDhcpEvent    uint8
	SetBroadcastFlag uint8
	Pid              uint32
}

func (*DhcpClient) GetTypeName() string {
	return "dhcp_client"
}
func (*DhcpClient) GetCrcString() string {
	return "527f7935"
}

// DhcpLease represents the VPP binary API data type 'dhcp_lease'.
// Generated from '/usr/share/vpp/api/dhcp.api.json', line 658:
//
//            "dhcp_lease",
//            [
//                "u32",
//                "sw_if_index"
//            ],
//            [
//                "u8",
//                "state"
//            ],
//            [
//                "u8",
//                "hostname",
//                64
//            ],
//            [
//                "u8",
//                "is_ipv6"
//            ],
//            [
//                "u8",
//                "mask_width"
//            ],
//            [
//                "u8",
//                "host_address",
//                16
//            ],
//            [
//                "u8",
//                "router_address",
//                16
//            ],
//            [
//                "u8",
//                "host_mac",
//                6
//            ],
//            {
//                "crc": "0x61090276"
//            }
//
type DhcpLease struct {
	SwIfIndex     uint32
	State         uint8
	Hostname      []byte `struc:"[64]byte"`
	IsIpv6        uint8
	MaskWidth     uint8
	HostAddress   []byte `struc:"[16]byte"`
	RouterAddress []byte `struc:"[16]byte"`
	HostMac       []byte `struc:"[6]byte"`
}

func (*DhcpLease) GetTypeName() string {
	return "dhcp_lease"
}
func (*DhcpLease) GetCrcString() string {
	return "61090276"
}

// DhcpServer represents the VPP binary API data type 'dhcp_server'.
// Generated from '/usr/share/vpp/api/dhcp.api.json', line 700:
//
//            "dhcp_server",
//            [
//                "u32",
//                "server_vrf_id"
//            ],
//            [
//                "u8",
//                "dhcp_server",
//                16
//            ],
//            {
//                "crc": "0xf16506c4"
//            }
//
type DhcpServer struct {
	ServerVrfID uint32
	DhcpServer  []byte `struc:"[16]byte"`
}

func (*DhcpServer) GetTypeName() string {
	return "dhcp_server"
}
func (*DhcpServer) GetCrcString() string {
	return "f16506c4"
}

// Dhcp6PdPrefixInfo represents the VPP binary API data type 'dhcp6_pd_prefix_info'.
// Generated from '/usr/share/vpp/api/dhcp.api.json', line 715:
//
//            "dhcp6_pd_prefix_info",
//            [
//                "u8",
//                "prefix",
//                16
//            ],
//            [
//                "u8",
//                "prefix_length"
//            ],
//            [
//                "u32",
//                "valid_time"
//            ],
//            [
//                "u32",
//                "preferred_time"
//            ],
//            {
//                "crc": "0xc459690e"
//            }
//
type Dhcp6PdPrefixInfo struct {
	Prefix        []byte `struc:"[16]byte"`
	PrefixLength  uint8
	ValidTime     uint32
	PreferredTime uint32
}

func (*Dhcp6PdPrefixInfo) GetTypeName() string {
	return "dhcp6_pd_prefix_info"
}
func (*Dhcp6PdPrefixInfo) GetCrcString() string {
	return "c459690e"
}

// DhcpProxyConfig represents the VPP binary API message 'dhcp_proxy_config'.
// Generated from '/usr/share/vpp/api/dhcp.api.json', line 4:
//
//            "dhcp_proxy_config",
//            [
//                "u16",
//                "_vl_msg_id"
//            ],
//            [
//                "u32",
//                "client_index"
//            ],
//            [
//                "u32",
//                "context"
//            ],
//            [
//                "u32",
//                "rx_vrf_id"
//            ],
//            [
//                "u32",
//                "server_vrf_id"
//            ],
//            [
//                "u8",
//                "is_ipv6"
//            ],
//            [
//                "u8",
//                "is_add"
//            ],
//            [
//                "u8",
//                "dhcp_server",
//                16
//            ],
//            [
//                "u8",
//                "dhcp_src_address",
//                16
//            ],
//            {
//                "crc": "0x6af4b645"
//            }
//
type DhcpProxyConfig struct {
	RxVrfID        uint32
	ServerVrfID    uint32
	IsIpv6         uint8
	IsAdd          uint8
	DhcpServer     []byte `struc:"[16]byte"`
	DhcpSrcAddress []byte `struc:"[16]byte"`
}

func (*DhcpProxyConfig) GetMessageName() string {
	return "dhcp_proxy_config"
}
func (*DhcpProxyConfig) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (*DhcpProxyConfig) GetCrcString() string {
	return "6af4b645"
}
func NewDhcpProxyConfig() api.Message {
	return &DhcpProxyConfig{}
}

// DhcpProxyConfigReply represents the VPP binary API message 'dhcp_proxy_config_reply'.
// Generated from '/usr/share/vpp/api/dhcp.api.json', line 48:
//
//            "dhcp_proxy_config_reply",
//            [
//                "u16",
//                "_vl_msg_id"
//            ],
//            [
//                "u32",
//                "context"
//            ],
//            [
//                "i32",
//                "retval"
//            ],
//            {
//                "crc": "0xe8d4e804"
//            }
//
type DhcpProxyConfigReply struct {
	Retval int32
}

func (*DhcpProxyConfigReply) GetMessageName() string {
	return "dhcp_proxy_config_reply"
}
func (*DhcpProxyConfigReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (*DhcpProxyConfigReply) GetCrcString() string {
	return "e8d4e804"
}
func NewDhcpProxyConfigReply() api.Message {
	return &DhcpProxyConfigReply{}
}

// DhcpProxySetVss represents the VPP binary API message 'dhcp_proxy_set_vss'.
// Generated from '/usr/share/vpp/api/dhcp.api.json', line 66:
//
//            "dhcp_proxy_set_vss",
//            [
//                "u16",
//                "_vl_msg_id"
//            ],
//            [
//                "u32",
//                "client_index"
//            ],
//            [
//                "u32",
//                "context"
//            ],
//            [
//                "u32",
//                "tbl_id"
//            ],
//            [
//                "u8",
//                "vss_type"
//            ],
//            [
//                "u8",
//                "vpn_ascii_id",
//                129
//            ],
//            [
//                "u32",
//                "oui"
//            ],
//            [
//                "u32",
//                "vpn_index"
//            ],
//            [
//                "u8",
//                "is_ipv6"
//            ],
//            [
//                "u8",
//                "is_add"
//            ],
//            {
//                "crc": "0x606535aa"
//            }
//
type DhcpProxySetVss struct {
	TblID      uint32
	VssType    uint8
	VpnASCIIID []byte `struc:"[129]byte"`
	Oui        uint32
	VpnIndex   uint32
	IsIpv6     uint8
	IsAdd      uint8
}

func (*DhcpProxySetVss) GetMessageName() string {
	return "dhcp_proxy_set_vss"
}
func (*DhcpProxySetVss) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (*DhcpProxySetVss) GetCrcString() string {
	return "606535aa"
}
func NewDhcpProxySetVss() api.Message {
	return &DhcpProxySetVss{}
}

// DhcpProxySetVssReply represents the VPP binary API message 'dhcp_proxy_set_vss_reply'.
// Generated from '/usr/share/vpp/api/dhcp.api.json', line 113:
//
//            "dhcp_proxy_set_vss_reply",
//            [
//                "u16",
//                "_vl_msg_id"
//            ],
//            [
//                "u32",
//                "context"
//            ],
//            [
//                "i32",
//                "retval"
//            ],
//            {
//                "crc": "0xe8d4e804"
//            }
//
type DhcpProxySetVssReply struct {
	Retval int32
}

func (*DhcpProxySetVssReply) GetMessageName() string {
	return "dhcp_proxy_set_vss_reply"
}
func (*DhcpProxySetVssReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (*DhcpProxySetVssReply) GetCrcString() string {
	return "e8d4e804"
}
func NewDhcpProxySetVssReply() api.Message {
	return &DhcpProxySetVssReply{}
}

// DhcpClientConfig represents the VPP binary API message 'dhcp_client_config'.
// Generated from '/usr/share/vpp/api/dhcp.api.json', line 131:
//
//            "dhcp_client_config",
//            [
//                "u16",
//                "_vl_msg_id"
//            ],
//            [
//                "u32",
//                "client_index"
//            ],
//            [
//                "u32",
//                "context"
//            ],
//            [
//                "u8",
//                "is_add"
//            ],
//            [
//                "vl_api_dhcp_client_t",
//                "client"
//            ],
//            {
//                "crc": "0xc32ccdfe"
//            }
//
type DhcpClientConfig struct {
	IsAdd  uint8
	Client DhcpClient
}

func (*DhcpClientConfig) GetMessageName() string {
	return "dhcp_client_config"
}
func (*DhcpClientConfig) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (*DhcpClientConfig) GetCrcString() string {
	return "c32ccdfe"
}
func NewDhcpClientConfig() api.Message {
	return &DhcpClientConfig{}
}

// DhcpClientConfigReply represents the VPP binary API message 'dhcp_client_config_reply'.
// Generated from '/usr/share/vpp/api/dhcp.api.json', line 157:
//
//            "dhcp_client_config_reply",
//            [
//                "u16",
//                "_vl_msg_id"
//            ],
//            [
//                "u32",
//                "context"
//            ],
//            [
//                "i32",
//                "retval"
//            ],
//            {
//                "crc": "0xe8d4e804"
//            }
//
type DhcpClientConfigReply struct {
	Retval int32
}

func (*DhcpClientConfigReply) GetMessageName() string {
	return "dhcp_client_config_reply"
}
func (*DhcpClientConfigReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (*DhcpClientConfigReply) GetCrcString() string {
	return "e8d4e804"
}
func NewDhcpClientConfigReply() api.Message {
	return &DhcpClientConfigReply{}
}

// DhcpComplEvent represents the VPP binary API message 'dhcp_compl_event'.
// Generated from '/usr/share/vpp/api/dhcp.api.json', line 175:
//
//            "dhcp_compl_event",
//            [
//                "u16",
//                "_vl_msg_id"
//            ],
//            [
//                "u32",
//                "client_index"
//            ],
//            [
//                "u32",
//                "pid"
//            ],
//            [
//                "vl_api_dhcp_lease_t",
//                "lease"
//            ],
//            {
//                "crc": "0x2105c31b"
//            }
//
type DhcpComplEvent struct {
	Pid   uint32
	Lease DhcpLease
}

func (*DhcpComplEvent) GetMessageName() string {
	return "dhcp_compl_event"
}
func (*DhcpComplEvent) GetMessageType() api.MessageType {
	return api.EventMessage
}
func (*DhcpComplEvent) GetCrcString() string {
	return "2105c31b"
}
func NewDhcpComplEvent() api.Message {
	return &DhcpComplEvent{}
}

// DhcpClientDump represents the VPP binary API message 'dhcp_client_dump'.
// Generated from '/usr/share/vpp/api/dhcp.api.json', line 197:
//
//            "dhcp_client_dump",
//            [
//                "u16",
//                "_vl_msg_id"
//            ],
//            [
//                "u32",
//                "client_index"
//            ],
//            [
//                "u32",
//                "context"
//            ],
//            {
//                "crc": "0x51077d14"
//            }
//
type DhcpClientDump struct {
}

func (*DhcpClientDump) GetMessageName() string {
	return "dhcp_client_dump"
}
func (*DhcpClientDump) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (*DhcpClientDump) GetCrcString() string {
	return "51077d14"
}
func NewDhcpClientDump() api.Message {
	return &DhcpClientDump{}
}

// DhcpClientDetails represents the VPP binary API message 'dhcp_client_details'.
// Generated from '/usr/share/vpp/api/dhcp.api.json', line 215:
//
//            "dhcp_client_details",
//            [
//                "u16",
//                "_vl_msg_id"
//            ],
//            [
//                "u32",
//                "context"
//            ],
//            [
//                "vl_api_dhcp_client_t",
//                "client"
//            ],
//            [
//                "vl_api_dhcp_lease_t",
//                "lease"
//            ],
//            {
//                "crc": "0x7ea3a745"
//            }
//
type DhcpClientDetails struct {
	Client DhcpClient
	Lease  DhcpLease
}

func (*DhcpClientDetails) GetMessageName() string {
	return "dhcp_client_details"
}
func (*DhcpClientDetails) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (*DhcpClientDetails) GetCrcString() string {
	return "7ea3a745"
}
func NewDhcpClientDetails() api.Message {
	return &DhcpClientDetails{}
}

// DhcpProxyDump represents the VPP binary API message 'dhcp_proxy_dump'.
// Generated from '/usr/share/vpp/api/dhcp.api.json', line 237:
//
//            "dhcp_proxy_dump",
//            [
//                "u16",
//                "_vl_msg_id"
//            ],
//            [
//                "u32",
//                "client_index"
//            ],
//            [
//                "u32",
//                "context"
//            ],
//            [
//                "u8",
//                "is_ip6"
//            ],
//            {
//                "crc": "0x6fe91190"
//            }
//
type DhcpProxyDump struct {
	IsIP6 uint8
}

func (*DhcpProxyDump) GetMessageName() string {
	return "dhcp_proxy_dump"
}
func (*DhcpProxyDump) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (*DhcpProxyDump) GetCrcString() string {
	return "6fe91190"
}
func NewDhcpProxyDump() api.Message {
	return &DhcpProxyDump{}
}

// DhcpProxyDetails represents the VPP binary API message 'dhcp_proxy_details'.
// Generated from '/usr/share/vpp/api/dhcp.api.json', line 259:
//
//            "dhcp_proxy_details",
//            [
//                "u16",
//                "_vl_msg_id"
//            ],
//            [
//                "u32",
//                "context"
//            ],
//            [
//                "u32",
//                "rx_vrf_id"
//            ],
//            [
//                "u32",
//                "vss_oui"
//            ],
//            [
//                "u32",
//                "vss_fib_id"
//            ],
//            [
//                "u8",
//                "vss_type"
//            ],
//            [
//                "u8",
//                "vss_vpn_ascii_id",
//                129
//            ],
//            [
//                "u8",
//                "is_ipv6"
//            ],
//            [
//                "u8",
//                "dhcp_src_address",
//                16
//            ],
//            [
//                "u8",
//                "count"
//            ],
//            [
//                "vl_api_dhcp_server_t",
//                "servers",
//                0,
//                "count"
//            ],
//            {
//                "crc": "0xa5f2ad84"
//            }
//
type DhcpProxyDetails struct {
	RxVrfID        uint32
	VssOui         uint32
	VssFibID       uint32
	VssType        uint8
	VssVpnASCIIID  []byte `struc:"[129]byte"`
	IsIpv6         uint8
	DhcpSrcAddress []byte `struc:"[16]byte"`
	Count          uint8  `struc:"sizeof=Servers"`
	Servers        []DhcpServer
}

func (*DhcpProxyDetails) GetMessageName() string {
	return "dhcp_proxy_details"
}
func (*DhcpProxyDetails) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (*DhcpProxyDetails) GetCrcString() string {
	return "a5f2ad84"
}
func NewDhcpProxyDetails() api.Message {
	return &DhcpProxyDetails{}
}

// Dhcp6DuidLlSet represents the VPP binary API message 'dhcp6_duid_ll_set'.
// Generated from '/usr/share/vpp/api/dhcp.api.json', line 313:
//
//            "dhcp6_duid_ll_set",
//            [
//                "u16",
//                "_vl_msg_id"
//            ],
//            [
//                "u32",
//                "client_index"
//            ],
//            [
//                "u32",
//                "context"
//            ],
//            [
//                "u8",
//                "duid_ll",
//                10
//            ],
//            {
//                "crc": "0x0f6ca323"
//            }
//
type Dhcp6DuidLlSet struct {
	DuidLl []byte `struc:"[10]byte"`
}

func (*Dhcp6DuidLlSet) GetMessageName() string {
	return "dhcp6_duid_ll_set"
}
func (*Dhcp6DuidLlSet) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (*Dhcp6DuidLlSet) GetCrcString() string {
	return "0f6ca323"
}
func NewDhcp6DuidLlSet() api.Message {
	return &Dhcp6DuidLlSet{}
}

// Dhcp6DuidLlSetReply represents the VPP binary API message 'dhcp6_duid_ll_set_reply'.
// Generated from '/usr/share/vpp/api/dhcp.api.json', line 336:
//
//            "dhcp6_duid_ll_set_reply",
//            [
//                "u16",
//                "_vl_msg_id"
//            ],
//            [
//                "u32",
//                "context"
//            ],
//            [
//                "i32",
//                "retval"
//            ],
//            {
//                "crc": "0xe8d4e804"
//            }
//
type Dhcp6DuidLlSetReply struct {
	Retval int32
}

func (*Dhcp6DuidLlSetReply) GetMessageName() string {
	return "dhcp6_duid_ll_set_reply"
}
func (*Dhcp6DuidLlSetReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (*Dhcp6DuidLlSetReply) GetCrcString() string {
	return "e8d4e804"
}
func NewDhcp6DuidLlSetReply() api.Message {
	return &Dhcp6DuidLlSetReply{}
}

// Dhcp6ClientsEnableDisable represents the VPP binary API message 'dhcp6_clients_enable_disable'.
// Generated from '/usr/share/vpp/api/dhcp.api.json', line 354:
//
//            "dhcp6_clients_enable_disable",
//            [
//                "u16",
//                "_vl_msg_id"
//            ],
//            [
//                "u32",
//                "client_index"
//            ],
//            [
//                "u32",
//                "context"
//            ],
//            [
//                "u8",
//                "enable"
//            ],
//            {
//                "crc": "0x8050327d"
//            }
//
type Dhcp6ClientsEnableDisable struct {
	Enable uint8
}

func (*Dhcp6ClientsEnableDisable) GetMessageName() string {
	return "dhcp6_clients_enable_disable"
}
func (*Dhcp6ClientsEnableDisable) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (*Dhcp6ClientsEnableDisable) GetCrcString() string {
	return "8050327d"
}
func NewDhcp6ClientsEnableDisable() api.Message {
	return &Dhcp6ClientsEnableDisable{}
}

// Dhcp6ClientsEnableDisableReply represents the VPP binary API message 'dhcp6_clients_enable_disable_reply'.
// Generated from '/usr/share/vpp/api/dhcp.api.json', line 376:
//
//            "dhcp6_clients_enable_disable_reply",
//            [
//                "u16",
//                "_vl_msg_id"
//            ],
//            [
//                "u32",
//                "context"
//            ],
//            [
//                "i32",
//                "retval"
//            ],
//            {
//                "crc": "0xe8d4e804"
//            }
//
type Dhcp6ClientsEnableDisableReply struct {
	Retval int32
}

func (*Dhcp6ClientsEnableDisableReply) GetMessageName() string {
	return "dhcp6_clients_enable_disable_reply"
}
func (*Dhcp6ClientsEnableDisableReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (*Dhcp6ClientsEnableDisableReply) GetCrcString() string {
	return "e8d4e804"
}
func NewDhcp6ClientsEnableDisableReply() api.Message {
	return &Dhcp6ClientsEnableDisableReply{}
}

// Dhcp6PdSendClientMessage represents the VPP binary API message 'dhcp6_pd_send_client_message'.
// Generated from '/usr/share/vpp/api/dhcp.api.json', line 394:
//
//            "dhcp6_pd_send_client_message",
//            [
//                "u16",
//                "_vl_msg_id"
//            ],
//            [
//                "u32",
//                "client_index"
//            ],
//            [
//                "u32",
//                "context"
//            ],
//            [
//                "u32",
//                "sw_if_index"
//            ],
//            [
//                "u32",
//                "server_index"
//            ],
//            [
//                "u32",
//                "irt"
//            ],
//            [
//                "u32",
//                "mrt"
//            ],
//            [
//                "u32",
//                "mrc"
//            ],
//            [
//                "u32",
//                "mrd"
//            ],
//            [
//                "u8",
//                "stop"
//            ],
//            [
//                "u8",
//                "msg_type"
//            ],
//            [
//                "u32",
//                "T1"
//            ],
//            [
//                "u32",
//                "T2"
//            ],
//            [
//                "u32",
//                "n_prefixes"
//            ],
//            [
//                "vl_api_dhcp6_pd_prefix_info_t",
//                "prefixes",
//                0,
//                "n_prefixes"
//            ],
//            {
//                "crc": "0x5a063fbc"
//            }
//
type Dhcp6PdSendClientMessage struct {
	SwIfIndex   uint32
	ServerIndex uint32
	Irt         uint32
	Mrt         uint32
	Mrc         uint32
	Mrd         uint32
	Stop        uint8
	MsgType     uint8
	T1          uint32
	T2          uint32
	NPrefixes   uint32 `struc:"sizeof=Prefixes"`
	Prefixes    []Dhcp6PdPrefixInfo
}

func (*Dhcp6PdSendClientMessage) GetMessageName() string {
	return "dhcp6_pd_send_client_message"
}
func (*Dhcp6PdSendClientMessage) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (*Dhcp6PdSendClientMessage) GetCrcString() string {
	return "5a063fbc"
}
func NewDhcp6PdSendClientMessage() api.Message {
	return &Dhcp6PdSendClientMessage{}
}

// Dhcp6PdSendClientMessageReply represents the VPP binary API message 'dhcp6_pd_send_client_message_reply'.
// Generated from '/usr/share/vpp/api/dhcp.api.json', line 462:
//
//            "dhcp6_pd_send_client_message_reply",
//            [
//                "u16",
//                "_vl_msg_id"
//            ],
//            [
//                "u32",
//                "context"
//            ],
//            [
//                "i32",
//                "retval"
//            ],
//            {
//                "crc": "0xe8d4e804"
//            }
//
type Dhcp6PdSendClientMessageReply struct {
	Retval int32
}

func (*Dhcp6PdSendClientMessageReply) GetMessageName() string {
	return "dhcp6_pd_send_client_message_reply"
}
func (*Dhcp6PdSendClientMessageReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (*Dhcp6PdSendClientMessageReply) GetCrcString() string {
	return "e8d4e804"
}
func NewDhcp6PdSendClientMessageReply() api.Message {
	return &Dhcp6PdSendClientMessageReply{}
}

// WantDhcp6PdReplyEvents represents the VPP binary API message 'want_dhcp6_pd_reply_events'.
// Generated from '/usr/share/vpp/api/dhcp.api.json', line 480:
//
//            "want_dhcp6_pd_reply_events",
//            [
//                "u16",
//                "_vl_msg_id"
//            ],
//            [
//                "u32",
//                "client_index"
//            ],
//            [
//                "u32",
//                "context"
//            ],
//            [
//                "u8",
//                "enable_disable"
//            ],
//            [
//                "u32",
//                "pid"
//            ],
//            {
//                "crc": "0x05b454b5"
//            }
//
type WantDhcp6PdReplyEvents struct {
	EnableDisable uint8
	Pid           uint32
}

func (*WantDhcp6PdReplyEvents) GetMessageName() string {
	return "want_dhcp6_pd_reply_events"
}
func (*WantDhcp6PdReplyEvents) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (*WantDhcp6PdReplyEvents) GetCrcString() string {
	return "05b454b5"
}
func NewWantDhcp6PdReplyEvents() api.Message {
	return &WantDhcp6PdReplyEvents{}
}

// WantDhcp6PdReplyEventsReply represents the VPP binary API message 'want_dhcp6_pd_reply_events_reply'.
// Generated from '/usr/share/vpp/api/dhcp.api.json', line 506:
//
//            "want_dhcp6_pd_reply_events_reply",
//            [
//                "u16",
//                "_vl_msg_id"
//            ],
//            [
//                "u32",
//                "context"
//            ],
//            [
//                "i32",
//                "retval"
//            ],
//            {
//                "crc": "0xe8d4e804"
//            }
//
type WantDhcp6PdReplyEventsReply struct {
	Retval int32
}

func (*WantDhcp6PdReplyEventsReply) GetMessageName() string {
	return "want_dhcp6_pd_reply_events_reply"
}
func (*WantDhcp6PdReplyEventsReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (*WantDhcp6PdReplyEventsReply) GetCrcString() string {
	return "e8d4e804"
}
func NewWantDhcp6PdReplyEventsReply() api.Message {
	return &WantDhcp6PdReplyEventsReply{}
}

// Dhcp6PdReplyEvent represents the VPP binary API message 'dhcp6_pd_reply_event'.
// Generated from '/usr/share/vpp/api/dhcp.api.json', line 524:
//
//            "dhcp6_pd_reply_event",
//            [
//                "u16",
//                "_vl_msg_id"
//            ],
//            [
//                "u32",
//                "client_index"
//            ],
//            [
//                "u32",
//                "pid"
//            ],
//            [
//                "u32",
//                "sw_if_index"
//            ],
//            [
//                "u32",
//                "server_index"
//            ],
//            [
//                "u8",
//                "msg_type"
//            ],
//            [
//                "u32",
//                "T1"
//            ],
//            [
//                "u32",
//                "T2"
//            ],
//            [
//                "u16",
//                "inner_status_code"
//            ],
//            [
//                "u16",
//                "status_code"
//            ],
//            [
//                "u8",
//                "preference"
//            ],
//            [
//                "u32",
//                "n_prefixes"
//            ],
//            [
//                "vl_api_dhcp6_pd_prefix_info_t",
//                "prefixes",
//                0,
//                "n_prefixes"
//            ],
//            {
//                "crc": "0x48e73c36"
//            }
//
type Dhcp6PdReplyEvent struct {
	Pid             uint32
	SwIfIndex       uint32
	ServerIndex     uint32
	MsgType         uint8
	T1              uint32
	T2              uint32
	InnerStatusCode uint16
	StatusCode      uint16
	Preference      uint8
	NPrefixes       uint32 `struc:"sizeof=Prefixes"`
	Prefixes        []Dhcp6PdPrefixInfo
}

func (*Dhcp6PdReplyEvent) GetMessageName() string {
	return "dhcp6_pd_reply_event"
}
func (*Dhcp6PdReplyEvent) GetMessageType() api.MessageType {
	return api.EventMessage
}
func (*Dhcp6PdReplyEvent) GetCrcString() string {
	return "48e73c36"
}
func NewDhcp6PdReplyEvent() api.Message {
	return &Dhcp6PdReplyEvent{}
}
