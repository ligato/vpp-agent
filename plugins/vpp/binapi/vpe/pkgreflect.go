// Code generated by github.com/ungerik/pkgreflect DO NOT EDIT.

package vpe

import "reflect"

var Types = map[string]reflect.Type{
	"AddNodeNext": reflect.TypeOf((*AddNodeNext)(nil)).Elem(),
	"AddNodeNextReply": reflect.TypeOf((*AddNodeNextReply)(nil)).Elem(),
	"Cli": reflect.TypeOf((*Cli)(nil)).Elem(),
	"CliInband": reflect.TypeOf((*CliInband)(nil)).Elem(),
	"CliInbandReply": reflect.TypeOf((*CliInbandReply)(nil)).Elem(),
	"CliReply": reflect.TypeOf((*CliReply)(nil)).Elem(),
	"ControlPing": reflect.TypeOf((*ControlPing)(nil)).Elem(),
	"ControlPingReply": reflect.TypeOf((*ControlPingReply)(nil)).Elem(),
	"GetNextIndex": reflect.TypeOf((*GetNextIndex)(nil)).Elem(),
	"GetNextIndexReply": reflect.TypeOf((*GetNextIndexReply)(nil)).Elem(),
	"GetNodeGraph": reflect.TypeOf((*GetNodeGraph)(nil)).Elem(),
	"GetNodeGraphReply": reflect.TypeOf((*GetNodeGraphReply)(nil)).Elem(),
	"GetNodeIndex": reflect.TypeOf((*GetNodeIndex)(nil)).Elem(),
	"GetNodeIndexReply": reflect.TypeOf((*GetNodeIndexReply)(nil)).Elem(),
	"Services": reflect.TypeOf((*Services)(nil)).Elem(),
	"ShowVersion": reflect.TypeOf((*ShowVersion)(nil)).Elem(),
	"ShowVersionReply": reflect.TypeOf((*ShowVersionReply)(nil)).Elem(),
}

var Functions = map[string]reflect.Value{
	"NewAddNodeNext": reflect.ValueOf(NewAddNodeNext),
	"NewAddNodeNextReply": reflect.ValueOf(NewAddNodeNextReply),
	"NewCli": reflect.ValueOf(NewCli),
	"NewCliInband": reflect.ValueOf(NewCliInband),
	"NewCliInbandReply": reflect.ValueOf(NewCliInbandReply),
	"NewCliReply": reflect.ValueOf(NewCliReply),
	"NewControlPing": reflect.ValueOf(NewControlPing),
	"NewControlPingReply": reflect.ValueOf(NewControlPingReply),
	"NewGetNextIndex": reflect.ValueOf(NewGetNextIndex),
	"NewGetNextIndexReply": reflect.ValueOf(NewGetNextIndexReply),
	"NewGetNodeGraph": reflect.ValueOf(NewGetNodeGraph),
	"NewGetNodeGraphReply": reflect.ValueOf(NewGetNodeGraphReply),
	"NewGetNodeIndex": reflect.ValueOf(NewGetNodeIndex),
	"NewGetNodeIndexReply": reflect.ValueOf(NewGetNodeIndexReply),
	"NewShowVersion": reflect.ValueOf(NewShowVersion),
	"NewShowVersionReply": reflect.ValueOf(NewShowVersionReply),
}

var Variables = map[string]reflect.Value{
}

var Consts = map[string]reflect.Value{
}

