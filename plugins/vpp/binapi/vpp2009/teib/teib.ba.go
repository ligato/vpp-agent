// Code generated by GoVPP's binapi-generator. DO NOT EDIT.
// source: /usr/share/vpp/api/core/teib.api.json

/*
Package teib is a generated VPP binary API for 'teib' module.

It consists of:
	 10 enums
	  6 aliases
	  9 types
	  1 union
	  4 messages
	  2 services
*/
package teib

import (
	"bytes"
	"context"
	"io"
	"strconv"

	api "git.fd.io/govpp.git/api"
	struc "github.com/lunixbochs/struc"

	interface_types "go.ligato.io/vpp-agent/v3/plugins/vpp/binapi/vpp2009/interface_types"
	ip_types "go.ligato.io/vpp-agent/v3/plugins/vpp/binapi/vpp2009/ip_types"
)

const (
	// ModuleName is the name of this module.
	ModuleName = "teib"
	// APIVersion is the API version of this module.
	APIVersion = "1.0.0"
	// VersionCrc is the CRC of this module.
	VersionCrc = 0x8a148700
)

type AddressFamily = ip_types.AddressFamily

type IfStatusFlags = interface_types.IfStatusFlags

type IfType = interface_types.IfType

type IPDscp = ip_types.IPDscp

type IPEcn = ip_types.IPEcn

type IPProto = ip_types.IPProto

type LinkDuplex = interface_types.LinkDuplex

type MtuProto = interface_types.MtuProto

type RxMode = interface_types.RxMode

type SubIfFlags = interface_types.SubIfFlags

type AddressWithPrefix = ip_types.AddressWithPrefix

type InterfaceIndex = interface_types.InterfaceIndex

type IP4Address = ip_types.IP4Address

type IP4AddressWithPrefix = ip_types.IP4AddressWithPrefix

type IP6Address = ip_types.IP6Address

type IP6AddressWithPrefix = ip_types.IP6AddressWithPrefix

type Address = ip_types.Address

type IP4AddressAndMask = ip_types.IP4AddressAndMask

type IP4Prefix = ip_types.IP4Prefix

type IP6AddressAndMask = ip_types.IP6AddressAndMask

type IP6Prefix = ip_types.IP6Prefix

type Mprefix = ip_types.Mprefix

type Prefix = ip_types.Prefix

type PrefixMatcher = ip_types.PrefixMatcher

// TeibEntry represents VPP binary API type 'teib_entry'.
type TeibEntry struct {
	SwIfIndex InterfaceIndex
	Peer      Address
	Nh        Address
	NhTableID uint32
}

func (*TeibEntry) GetTypeName() string { return "teib_entry" }

type AddressUnion = ip_types.AddressUnion

// TeibDetails represents VPP binary API message 'teib_details'.
type TeibDetails struct {
	Entry TeibEntry
}

func (m *TeibDetails) Reset()                        { *m = TeibDetails{} }
func (*TeibDetails) GetMessageName() string          { return "teib_details" }
func (*TeibDetails) GetCrcString() string            { return "e3b6a503" }
func (*TeibDetails) GetMessageType() api.MessageType { return api.ReplyMessage }

// TeibDump represents VPP binary API message 'teib_dump'.
type TeibDump struct{}

func (m *TeibDump) Reset()                        { *m = TeibDump{} }
func (*TeibDump) GetMessageName() string          { return "teib_dump" }
func (*TeibDump) GetCrcString() string            { return "51077d14" }
func (*TeibDump) GetMessageType() api.MessageType { return api.RequestMessage }

// TeibEntryAddDel represents VPP binary API message 'teib_entry_add_del'.
type TeibEntryAddDel struct {
	IsAdd uint8
	Entry TeibEntry
}

func (m *TeibEntryAddDel) Reset()                        { *m = TeibEntryAddDel{} }
func (*TeibEntryAddDel) GetMessageName() string          { return "teib_entry_add_del" }
func (*TeibEntryAddDel) GetCrcString() string            { return "5aa0a538" }
func (*TeibEntryAddDel) GetMessageType() api.MessageType { return api.RequestMessage }

// TeibEntryAddDelReply represents VPP binary API message 'teib_entry_add_del_reply'.
type TeibEntryAddDelReply struct {
	Retval int32
}

func (m *TeibEntryAddDelReply) Reset()                        { *m = TeibEntryAddDelReply{} }
func (*TeibEntryAddDelReply) GetMessageName() string          { return "teib_entry_add_del_reply" }
func (*TeibEntryAddDelReply) GetCrcString() string            { return "e8d4e804" }
func (*TeibEntryAddDelReply) GetMessageType() api.MessageType { return api.ReplyMessage }

func init() {
	api.RegisterMessage((*TeibDetails)(nil), "teib.TeibDetails")
	api.RegisterMessage((*TeibDump)(nil), "teib.TeibDump")
	api.RegisterMessage((*TeibEntryAddDel)(nil), "teib.TeibEntryAddDel")
	api.RegisterMessage((*TeibEntryAddDelReply)(nil), "teib.TeibEntryAddDelReply")
}

// Messages returns list of all messages in this module.
func AllMessages() []api.Message {
	return []api.Message{
		(*TeibDetails)(nil),
		(*TeibDump)(nil),
		(*TeibEntryAddDel)(nil),
		(*TeibEntryAddDelReply)(nil),
	}
}

// RPCService represents RPC service API for teib module.
type RPCService interface {
	DumpTeib(ctx context.Context, in *TeibDump) (RPCService_DumpTeibClient, error)
	TeibEntryAddDel(ctx context.Context, in *TeibEntryAddDel) (*TeibEntryAddDelReply, error)
}

type serviceClient struct {
	ch api.Channel
}

func NewServiceClient(ch api.Channel) RPCService {
	return &serviceClient{ch}
}

func (c *serviceClient) DumpTeib(ctx context.Context, in *TeibDump) (RPCService_DumpTeibClient, error) {
	stream := c.ch.SendMultiRequest(in)
	x := &serviceClient_DumpTeibClient{stream}
	return x, nil
}

type RPCService_DumpTeibClient interface {
	Recv() (*TeibDetails, error)
}

type serviceClient_DumpTeibClient struct {
	api.MultiRequestCtx
}

func (c *serviceClient_DumpTeibClient) Recv() (*TeibDetails, error) {
	m := new(TeibDetails)
	stop, err := c.MultiRequestCtx.ReceiveReply(m)
	if err != nil {
		return nil, err
	}
	if stop {
		return nil, io.EOF
	}
	return m, nil
}

func (c *serviceClient) TeibEntryAddDel(ctx context.Context, in *TeibEntryAddDel) (*TeibEntryAddDelReply, error) {
	out := new(TeibEntryAddDelReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// This is a compile-time assertion to ensure that this generated file
// is compatible with the GoVPP api package it is being compiled against.
// A compilation error at this line likely means your copy of the
// GoVPP api package needs to be updated.
const _ = api.GoVppAPIPackageIsVersion1 // please upgrade the GoVPP api package

// Reference imports to suppress errors if they are not otherwise used.
var _ = api.RegisterMessage
var _ = bytes.NewBuffer
var _ = context.Background
var _ = io.Copy
var _ = strconv.Itoa
var _ = struc.Pack
