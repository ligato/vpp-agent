//  Copyright (c) 2018 Cisco and/or its affiliates.
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at:
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: acl.proto

package acl

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Action for this Access List Rule
type Acl_Rule_Action int32

const (
	Acl_Rule_DENY    Acl_Rule_Action = 0
	Acl_Rule_PERMIT  Acl_Rule_Action = 1
	Acl_Rule_REFLECT Acl_Rule_Action = 2
)

var Acl_Rule_Action_name = map[int32]string{
	0: "DENY",
	1: "PERMIT",
	2: "REFLECT",
}
var Acl_Rule_Action_value = map[string]int32{
	"DENY":    0,
	"PERMIT":  1,
	"REFLECT": 2,
}

func (x Acl_Rule_Action) String() string {
	return proto.EnumName(Acl_Rule_Action_name, int32(x))
}
func (Acl_Rule_Action) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_acl_9f8f3a3194cc1211, []int{0, 0, 0}
}

// An Access Control List (ACL) is an ordered list of Access List Rules.
type Acl struct {
	// The name of access list. A device MAY restrict the length
	// and value of this name, possibly spaces and special
	// characters are not allowed.
	Name  string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Rules []*Acl_Rule `protobuf:"bytes,2,rep,name=rules" json:"rules,omitempty"`
	// The set of interfaces that has assigned this ACL on ingres or egress.
	Interfaces           *Acl_Interfaces `protobuf:"bytes,3,opt,name=interfaces" json:"interfaces,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Acl) Reset()         { *m = Acl{} }
func (m *Acl) String() string { return proto.CompactTextString(m) }
func (*Acl) ProtoMessage()    {}
func (*Acl) Descriptor() ([]byte, []int) {
	return fileDescriptor_acl_9f8f3a3194cc1211, []int{0}
}
func (m *Acl) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Acl.Unmarshal(m, b)
}
func (m *Acl) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Acl.Marshal(b, m, deterministic)
}
func (dst *Acl) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Acl.Merge(dst, src)
}
func (m *Acl) XXX_Size() int {
	return xxx_messageInfo_Acl.Size(m)
}
func (m *Acl) XXX_DiscardUnknown() {
	xxx_messageInfo_Acl.DiscardUnknown(m)
}

var xxx_messageInfo_Acl proto.InternalMessageInfo

func (m *Acl) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Acl) GetRules() []*Acl_Rule {
	if m != nil {
		return m.Rules
	}
	return nil
}

func (m *Acl) GetInterfaces() *Acl_Interfaces {
	if m != nil {
		return m.Interfaces
	}
	return nil
}

// List of access list entries (Rules). Each Access Control Rule has
// a list of match criteria and a list of actions.
// Access List entry that can define:
// - IPv4/IPv6 src ip prefix
// - src MAC address mask
// - src MAC address value
// - can be used only for static ACLs.
type Acl_Rule struct {
	// A unique name identifying this Access List Entry (Rule)
	RuleName             string          `protobuf:"bytes,1,opt,name=rule_name,json=ruleName,proto3" json:"rule_name,omitempty"`
	AclAction            Acl_Rule_Action `protobuf:"varint,2,opt,name=acl_action,json=aclAction,proto3,enum=acl.Acl_Rule_Action" json:"acl_action,omitempty"`
	Match                *Acl_Rule_Match `protobuf:"bytes,3,opt,name=match" json:"match,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Acl_Rule) Reset()         { *m = Acl_Rule{} }
func (m *Acl_Rule) String() string { return proto.CompactTextString(m) }
func (*Acl_Rule) ProtoMessage()    {}
func (*Acl_Rule) Descriptor() ([]byte, []int) {
	return fileDescriptor_acl_9f8f3a3194cc1211, []int{0, 0}
}
func (m *Acl_Rule) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Acl_Rule.Unmarshal(m, b)
}
func (m *Acl_Rule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Acl_Rule.Marshal(b, m, deterministic)
}
func (dst *Acl_Rule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Acl_Rule.Merge(dst, src)
}
func (m *Acl_Rule) XXX_Size() int {
	return xxx_messageInfo_Acl_Rule.Size(m)
}
func (m *Acl_Rule) XXX_DiscardUnknown() {
	xxx_messageInfo_Acl_Rule.DiscardUnknown(m)
}

var xxx_messageInfo_Acl_Rule proto.InternalMessageInfo

func (m *Acl_Rule) GetRuleName() string {
	if m != nil {
		return m.RuleName
	}
	return ""
}

func (m *Acl_Rule) GetAclAction() Acl_Rule_Action {
	if m != nil {
		return m.AclAction
	}
	return Acl_Rule_DENY
}

func (m *Acl_Rule) GetMatch() *Acl_Rule_Match {
	if m != nil {
		return m.Match
	}
	return nil
}

// Definitions for match criteria for this Access List Rule
type Acl_Rule_Match struct {
	IpRule               *Acl_Rule_Match_IpRule    `protobuf:"bytes,1,opt,name=ip_rule,json=ipRule" json:"ip_rule,omitempty"`
	MacipRule            *Acl_Rule_Match_MacIpRule `protobuf:"bytes,2,opt,name=macip_rule,json=macipRule" json:"macip_rule,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *Acl_Rule_Match) Reset()         { *m = Acl_Rule_Match{} }
func (m *Acl_Rule_Match) String() string { return proto.CompactTextString(m) }
func (*Acl_Rule_Match) ProtoMessage()    {}
func (*Acl_Rule_Match) Descriptor() ([]byte, []int) {
	return fileDescriptor_acl_9f8f3a3194cc1211, []int{0, 0, 0}
}
func (m *Acl_Rule_Match) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Acl_Rule_Match.Unmarshal(m, b)
}
func (m *Acl_Rule_Match) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Acl_Rule_Match.Marshal(b, m, deterministic)
}
func (dst *Acl_Rule_Match) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Acl_Rule_Match.Merge(dst, src)
}
func (m *Acl_Rule_Match) XXX_Size() int {
	return xxx_messageInfo_Acl_Rule_Match.Size(m)
}
func (m *Acl_Rule_Match) XXX_DiscardUnknown() {
	xxx_messageInfo_Acl_Rule_Match.DiscardUnknown(m)
}

var xxx_messageInfo_Acl_Rule_Match proto.InternalMessageInfo

func (m *Acl_Rule_Match) GetIpRule() *Acl_Rule_Match_IpRule {
	if m != nil {
		return m.IpRule
	}
	return nil
}

func (m *Acl_Rule_Match) GetMacipRule() *Acl_Rule_Match_MacIpRule {
	if m != nil {
		return m.MacipRule
	}
	return nil
}

// Access List entry that can define:
// - IPv4/IPv6 src/dst IP prefix
// - Internet Protocol number
// - selected L4 headers:
//   * ICMP (type range)
//   * UDP (port range)
//   * TCP (port range, flags mask, flags value)
type Acl_Rule_Match_IpRule struct {
	Ip                   *Acl_Rule_Match_IpRule_Ip   `protobuf:"bytes,1,opt,name=ip" json:"ip,omitempty"`
	Icmp                 *Acl_Rule_Match_IpRule_Icmp `protobuf:"bytes,2,opt,name=icmp" json:"icmp,omitempty"`
	Tcp                  *Acl_Rule_Match_IpRule_Tcp  `protobuf:"bytes,3,opt,name=tcp" json:"tcp,omitempty"`
	Udp                  *Acl_Rule_Match_IpRule_Udp  `protobuf:"bytes,4,opt,name=udp" json:"udp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *Acl_Rule_Match_IpRule) Reset()         { *m = Acl_Rule_Match_IpRule{} }
func (m *Acl_Rule_Match_IpRule) String() string { return proto.CompactTextString(m) }
func (*Acl_Rule_Match_IpRule) ProtoMessage()    {}
func (*Acl_Rule_Match_IpRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_acl_9f8f3a3194cc1211, []int{0, 0, 0, 0}
}
func (m *Acl_Rule_Match_IpRule) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Acl_Rule_Match_IpRule.Unmarshal(m, b)
}
func (m *Acl_Rule_Match_IpRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Acl_Rule_Match_IpRule.Marshal(b, m, deterministic)
}
func (dst *Acl_Rule_Match_IpRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Acl_Rule_Match_IpRule.Merge(dst, src)
}
func (m *Acl_Rule_Match_IpRule) XXX_Size() int {
	return xxx_messageInfo_Acl_Rule_Match_IpRule.Size(m)
}
func (m *Acl_Rule_Match_IpRule) XXX_DiscardUnknown() {
	xxx_messageInfo_Acl_Rule_Match_IpRule.DiscardUnknown(m)
}

var xxx_messageInfo_Acl_Rule_Match_IpRule proto.InternalMessageInfo

func (m *Acl_Rule_Match_IpRule) GetIp() *Acl_Rule_Match_IpRule_Ip {
	if m != nil {
		return m.Ip
	}
	return nil
}

func (m *Acl_Rule_Match_IpRule) GetIcmp() *Acl_Rule_Match_IpRule_Icmp {
	if m != nil {
		return m.Icmp
	}
	return nil
}

func (m *Acl_Rule_Match_IpRule) GetTcp() *Acl_Rule_Match_IpRule_Tcp {
	if m != nil {
		return m.Tcp
	}
	return nil
}

func (m *Acl_Rule_Match_IpRule) GetUdp() *Acl_Rule_Match_IpRule_Udp {
	if m != nil {
		return m.Udp
	}
	return nil
}

// IP version used in this Access List Entry.
type Acl_Rule_Match_IpRule_Ip struct {
	// Destination IPv4/IPv6 network address (<ip>/<network>)
	DestinationNetwork string `protobuf:"bytes,1,opt,name=destination_network,json=destinationNetwork,proto3" json:"destination_network,omitempty"`
	// Destination IPv4/IPv6 network address (<ip>/<network>)
	SourceNetwork        string   `protobuf:"bytes,2,opt,name=source_network,json=sourceNetwork,proto3" json:"source_network,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Acl_Rule_Match_IpRule_Ip) Reset()         { *m = Acl_Rule_Match_IpRule_Ip{} }
func (m *Acl_Rule_Match_IpRule_Ip) String() string { return proto.CompactTextString(m) }
func (*Acl_Rule_Match_IpRule_Ip) ProtoMessage()    {}
func (*Acl_Rule_Match_IpRule_Ip) Descriptor() ([]byte, []int) {
	return fileDescriptor_acl_9f8f3a3194cc1211, []int{0, 0, 0, 0, 0}
}
func (m *Acl_Rule_Match_IpRule_Ip) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Acl_Rule_Match_IpRule_Ip.Unmarshal(m, b)
}
func (m *Acl_Rule_Match_IpRule_Ip) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Acl_Rule_Match_IpRule_Ip.Marshal(b, m, deterministic)
}
func (dst *Acl_Rule_Match_IpRule_Ip) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Acl_Rule_Match_IpRule_Ip.Merge(dst, src)
}
func (m *Acl_Rule_Match_IpRule_Ip) XXX_Size() int {
	return xxx_messageInfo_Acl_Rule_Match_IpRule_Ip.Size(m)
}
func (m *Acl_Rule_Match_IpRule_Ip) XXX_DiscardUnknown() {
	xxx_messageInfo_Acl_Rule_Match_IpRule_Ip.DiscardUnknown(m)
}

var xxx_messageInfo_Acl_Rule_Match_IpRule_Ip proto.InternalMessageInfo

func (m *Acl_Rule_Match_IpRule_Ip) GetDestinationNetwork() string {
	if m != nil {
		return m.DestinationNetwork
	}
	return ""
}

func (m *Acl_Rule_Match_IpRule_Ip) GetSourceNetwork() string {
	if m != nil {
		return m.SourceNetwork
	}
	return ""
}

type Acl_Rule_Match_IpRule_Icmp struct {
	// ICMPv6 flag, if false ICMPv4 will be used
	Icmpv6 bool `protobuf:"varint,1,opt,name=icmpv6,proto3" json:"icmpv6,omitempty"`
	// Inclusive range representing icmp codes to be used.
	IcmpCodeRange        *Acl_Rule_Match_IpRule_Icmp_Range `protobuf:"bytes,2,opt,name=icmp_code_range,json=icmpCodeRange" json:"icmp_code_range,omitempty"`
	IcmpTypeRange        *Acl_Rule_Match_IpRule_Icmp_Range `protobuf:"bytes,3,opt,name=icmp_type_range,json=icmpTypeRange" json:"icmp_type_range,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *Acl_Rule_Match_IpRule_Icmp) Reset()         { *m = Acl_Rule_Match_IpRule_Icmp{} }
func (m *Acl_Rule_Match_IpRule_Icmp) String() string { return proto.CompactTextString(m) }
func (*Acl_Rule_Match_IpRule_Icmp) ProtoMessage()    {}
func (*Acl_Rule_Match_IpRule_Icmp) Descriptor() ([]byte, []int) {
	return fileDescriptor_acl_9f8f3a3194cc1211, []int{0, 0, 0, 0, 1}
}
func (m *Acl_Rule_Match_IpRule_Icmp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Acl_Rule_Match_IpRule_Icmp.Unmarshal(m, b)
}
func (m *Acl_Rule_Match_IpRule_Icmp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Acl_Rule_Match_IpRule_Icmp.Marshal(b, m, deterministic)
}
func (dst *Acl_Rule_Match_IpRule_Icmp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Acl_Rule_Match_IpRule_Icmp.Merge(dst, src)
}
func (m *Acl_Rule_Match_IpRule_Icmp) XXX_Size() int {
	return xxx_messageInfo_Acl_Rule_Match_IpRule_Icmp.Size(m)
}
func (m *Acl_Rule_Match_IpRule_Icmp) XXX_DiscardUnknown() {
	xxx_messageInfo_Acl_Rule_Match_IpRule_Icmp.DiscardUnknown(m)
}

var xxx_messageInfo_Acl_Rule_Match_IpRule_Icmp proto.InternalMessageInfo

func (m *Acl_Rule_Match_IpRule_Icmp) GetIcmpv6() bool {
	if m != nil {
		return m.Icmpv6
	}
	return false
}

func (m *Acl_Rule_Match_IpRule_Icmp) GetIcmpCodeRange() *Acl_Rule_Match_IpRule_Icmp_Range {
	if m != nil {
		return m.IcmpCodeRange
	}
	return nil
}

func (m *Acl_Rule_Match_IpRule_Icmp) GetIcmpTypeRange() *Acl_Rule_Match_IpRule_Icmp_Range {
	if m != nil {
		return m.IcmpTypeRange
	}
	return nil
}

type Acl_Rule_Match_IpRule_Icmp_Range struct {
	// Lower boundary for range
	First uint32 `protobuf:"varint,1,opt,name=first,proto3" json:"first,omitempty"`
	// Upper boundary for range
	Last                 uint32   `protobuf:"varint,2,opt,name=last,proto3" json:"last,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Acl_Rule_Match_IpRule_Icmp_Range) Reset()         { *m = Acl_Rule_Match_IpRule_Icmp_Range{} }
func (m *Acl_Rule_Match_IpRule_Icmp_Range) String() string { return proto.CompactTextString(m) }
func (*Acl_Rule_Match_IpRule_Icmp_Range) ProtoMessage()    {}
func (*Acl_Rule_Match_IpRule_Icmp_Range) Descriptor() ([]byte, []int) {
	return fileDescriptor_acl_9f8f3a3194cc1211, []int{0, 0, 0, 0, 1, 0}
}
func (m *Acl_Rule_Match_IpRule_Icmp_Range) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Acl_Rule_Match_IpRule_Icmp_Range.Unmarshal(m, b)
}
func (m *Acl_Rule_Match_IpRule_Icmp_Range) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Acl_Rule_Match_IpRule_Icmp_Range.Marshal(b, m, deterministic)
}
func (dst *Acl_Rule_Match_IpRule_Icmp_Range) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Acl_Rule_Match_IpRule_Icmp_Range.Merge(dst, src)
}
func (m *Acl_Rule_Match_IpRule_Icmp_Range) XXX_Size() int {
	return xxx_messageInfo_Acl_Rule_Match_IpRule_Icmp_Range.Size(m)
}
func (m *Acl_Rule_Match_IpRule_Icmp_Range) XXX_DiscardUnknown() {
	xxx_messageInfo_Acl_Rule_Match_IpRule_Icmp_Range.DiscardUnknown(m)
}

var xxx_messageInfo_Acl_Rule_Match_IpRule_Icmp_Range proto.InternalMessageInfo

func (m *Acl_Rule_Match_IpRule_Icmp_Range) GetFirst() uint32 {
	if m != nil {
		return m.First
	}
	return 0
}

func (m *Acl_Rule_Match_IpRule_Icmp_Range) GetLast() uint32 {
	if m != nil {
		return m.Last
	}
	return 0
}

// Inclusive range representing destination ports to be used. When
// only lower-port is present, it represents a single port.
type Acl_Rule_Match_IpRule_PortRange struct {
	// Lower boundary for port.
	LowerPort uint32 `protobuf:"varint,1,opt,name=lower_port,json=lowerPort,proto3" json:"lower_port,omitempty"`
	// Upper boundary for port. If existing, the upper port must
	// be greater or equal to lower-port
	UpperPort            uint32   `protobuf:"varint,2,opt,name=upper_port,json=upperPort,proto3" json:"upper_port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Acl_Rule_Match_IpRule_PortRange) Reset()         { *m = Acl_Rule_Match_IpRule_PortRange{} }
func (m *Acl_Rule_Match_IpRule_PortRange) String() string { return proto.CompactTextString(m) }
func (*Acl_Rule_Match_IpRule_PortRange) ProtoMessage()    {}
func (*Acl_Rule_Match_IpRule_PortRange) Descriptor() ([]byte, []int) {
	return fileDescriptor_acl_9f8f3a3194cc1211, []int{0, 0, 0, 0, 2}
}
func (m *Acl_Rule_Match_IpRule_PortRange) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Acl_Rule_Match_IpRule_PortRange.Unmarshal(m, b)
}
func (m *Acl_Rule_Match_IpRule_PortRange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Acl_Rule_Match_IpRule_PortRange.Marshal(b, m, deterministic)
}
func (dst *Acl_Rule_Match_IpRule_PortRange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Acl_Rule_Match_IpRule_PortRange.Merge(dst, src)
}
func (m *Acl_Rule_Match_IpRule_PortRange) XXX_Size() int {
	return xxx_messageInfo_Acl_Rule_Match_IpRule_PortRange.Size(m)
}
func (m *Acl_Rule_Match_IpRule_PortRange) XXX_DiscardUnknown() {
	xxx_messageInfo_Acl_Rule_Match_IpRule_PortRange.DiscardUnknown(m)
}

var xxx_messageInfo_Acl_Rule_Match_IpRule_PortRange proto.InternalMessageInfo

func (m *Acl_Rule_Match_IpRule_PortRange) GetLowerPort() uint32 {
	if m != nil {
		return m.LowerPort
	}
	return 0
}

func (m *Acl_Rule_Match_IpRule_PortRange) GetUpperPort() uint32 {
	if m != nil {
		return m.UpperPort
	}
	return 0
}

type Acl_Rule_Match_IpRule_Tcp struct {
	DestinationPortRange *Acl_Rule_Match_IpRule_PortRange `protobuf:"bytes,1,opt,name=destination_port_range,json=destinationPortRange" json:"destination_port_range,omitempty"`
	SourcePortRange      *Acl_Rule_Match_IpRule_PortRange `protobuf:"bytes,2,opt,name=source_port_range,json=sourcePortRange" json:"source_port_range,omitempty"`
	// Binary mask for tcp flags to match. MSB order (FIN at position 0).
	// Applied as logical AND to tcp flags field of the packet being matched,
	// before it is compared with tcp-flags-value.
	TcpFlagsMask uint32 `protobuf:"varint,3,opt,name=tcp_flags_mask,json=tcpFlagsMask,proto3" json:"tcp_flags_mask,omitempty"`
	// Binary value for tcp flags to match. MSB order (FIN at position 0).
	// Before tcp-flags-value is compared with tcp flags field of the packet being matched,
	// tcp-flags-mask is applied to packet field value.
	TcpFlagsValue        uint32   `protobuf:"varint,4,opt,name=tcp_flags_value,json=tcpFlagsValue,proto3" json:"tcp_flags_value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Acl_Rule_Match_IpRule_Tcp) Reset()         { *m = Acl_Rule_Match_IpRule_Tcp{} }
func (m *Acl_Rule_Match_IpRule_Tcp) String() string { return proto.CompactTextString(m) }
func (*Acl_Rule_Match_IpRule_Tcp) ProtoMessage()    {}
func (*Acl_Rule_Match_IpRule_Tcp) Descriptor() ([]byte, []int) {
	return fileDescriptor_acl_9f8f3a3194cc1211, []int{0, 0, 0, 0, 3}
}
func (m *Acl_Rule_Match_IpRule_Tcp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Acl_Rule_Match_IpRule_Tcp.Unmarshal(m, b)
}
func (m *Acl_Rule_Match_IpRule_Tcp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Acl_Rule_Match_IpRule_Tcp.Marshal(b, m, deterministic)
}
func (dst *Acl_Rule_Match_IpRule_Tcp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Acl_Rule_Match_IpRule_Tcp.Merge(dst, src)
}
func (m *Acl_Rule_Match_IpRule_Tcp) XXX_Size() int {
	return xxx_messageInfo_Acl_Rule_Match_IpRule_Tcp.Size(m)
}
func (m *Acl_Rule_Match_IpRule_Tcp) XXX_DiscardUnknown() {
	xxx_messageInfo_Acl_Rule_Match_IpRule_Tcp.DiscardUnknown(m)
}

var xxx_messageInfo_Acl_Rule_Match_IpRule_Tcp proto.InternalMessageInfo

func (m *Acl_Rule_Match_IpRule_Tcp) GetDestinationPortRange() *Acl_Rule_Match_IpRule_PortRange {
	if m != nil {
		return m.DestinationPortRange
	}
	return nil
}

func (m *Acl_Rule_Match_IpRule_Tcp) GetSourcePortRange() *Acl_Rule_Match_IpRule_PortRange {
	if m != nil {
		return m.SourcePortRange
	}
	return nil
}

func (m *Acl_Rule_Match_IpRule_Tcp) GetTcpFlagsMask() uint32 {
	if m != nil {
		return m.TcpFlagsMask
	}
	return 0
}

func (m *Acl_Rule_Match_IpRule_Tcp) GetTcpFlagsValue() uint32 {
	if m != nil {
		return m.TcpFlagsValue
	}
	return 0
}

type Acl_Rule_Match_IpRule_Udp struct {
	DestinationPortRange *Acl_Rule_Match_IpRule_PortRange `protobuf:"bytes,1,opt,name=destination_port_range,json=destinationPortRange" json:"destination_port_range,omitempty"`
	SourcePortRange      *Acl_Rule_Match_IpRule_PortRange `protobuf:"bytes,2,opt,name=source_port_range,json=sourcePortRange" json:"source_port_range,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *Acl_Rule_Match_IpRule_Udp) Reset()         { *m = Acl_Rule_Match_IpRule_Udp{} }
func (m *Acl_Rule_Match_IpRule_Udp) String() string { return proto.CompactTextString(m) }
func (*Acl_Rule_Match_IpRule_Udp) ProtoMessage()    {}
func (*Acl_Rule_Match_IpRule_Udp) Descriptor() ([]byte, []int) {
	return fileDescriptor_acl_9f8f3a3194cc1211, []int{0, 0, 0, 0, 4}
}
func (m *Acl_Rule_Match_IpRule_Udp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Acl_Rule_Match_IpRule_Udp.Unmarshal(m, b)
}
func (m *Acl_Rule_Match_IpRule_Udp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Acl_Rule_Match_IpRule_Udp.Marshal(b, m, deterministic)
}
func (dst *Acl_Rule_Match_IpRule_Udp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Acl_Rule_Match_IpRule_Udp.Merge(dst, src)
}
func (m *Acl_Rule_Match_IpRule_Udp) XXX_Size() int {
	return xxx_messageInfo_Acl_Rule_Match_IpRule_Udp.Size(m)
}
func (m *Acl_Rule_Match_IpRule_Udp) XXX_DiscardUnknown() {
	xxx_messageInfo_Acl_Rule_Match_IpRule_Udp.DiscardUnknown(m)
}

var xxx_messageInfo_Acl_Rule_Match_IpRule_Udp proto.InternalMessageInfo

func (m *Acl_Rule_Match_IpRule_Udp) GetDestinationPortRange() *Acl_Rule_Match_IpRule_PortRange {
	if m != nil {
		return m.DestinationPortRange
	}
	return nil
}

func (m *Acl_Rule_Match_IpRule_Udp) GetSourcePortRange() *Acl_Rule_Match_IpRule_PortRange {
	if m != nil {
		return m.SourcePortRange
	}
	return nil
}

type Acl_Rule_Match_MacIpRule struct {
	// Source IP address.
	SourceAddress string `protobuf:"bytes,1,opt,name=source_address,json=sourceAddress,proto3" json:"source_address,omitempty"`
	// Source IP address prefix.
	SourceAddressPrefix uint32 `protobuf:"varint,2,opt,name=source_address_prefix,json=sourceAddressPrefix,proto3" json:"source_address_prefix,omitempty"`
	// Source MAC address.
	// Before source-mac-address is compared with source mac address field of the packet
	// being matched, source-mac-address-mask is applied to packet field value.
	SourceMacAddress string `protobuf:"bytes,3,opt,name=source_mac_address,json=sourceMacAddress,proto3" json:"source_mac_address,omitempty"`
	// Source MAC address mask.
	// Applied as logical AND with source mac address field of the packet being matched,
	// before it is compared with source-mac-address.
	SourceMacAddressMask string   `protobuf:"bytes,4,opt,name=source_mac_address_mask,json=sourceMacAddressMask,proto3" json:"source_mac_address_mask,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Acl_Rule_Match_MacIpRule) Reset()         { *m = Acl_Rule_Match_MacIpRule{} }
func (m *Acl_Rule_Match_MacIpRule) String() string { return proto.CompactTextString(m) }
func (*Acl_Rule_Match_MacIpRule) ProtoMessage()    {}
func (*Acl_Rule_Match_MacIpRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_acl_9f8f3a3194cc1211, []int{0, 0, 0, 1}
}
func (m *Acl_Rule_Match_MacIpRule) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Acl_Rule_Match_MacIpRule.Unmarshal(m, b)
}
func (m *Acl_Rule_Match_MacIpRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Acl_Rule_Match_MacIpRule.Marshal(b, m, deterministic)
}
func (dst *Acl_Rule_Match_MacIpRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Acl_Rule_Match_MacIpRule.Merge(dst, src)
}
func (m *Acl_Rule_Match_MacIpRule) XXX_Size() int {
	return xxx_messageInfo_Acl_Rule_Match_MacIpRule.Size(m)
}
func (m *Acl_Rule_Match_MacIpRule) XXX_DiscardUnknown() {
	xxx_messageInfo_Acl_Rule_Match_MacIpRule.DiscardUnknown(m)
}

var xxx_messageInfo_Acl_Rule_Match_MacIpRule proto.InternalMessageInfo

func (m *Acl_Rule_Match_MacIpRule) GetSourceAddress() string {
	if m != nil {
		return m.SourceAddress
	}
	return ""
}

func (m *Acl_Rule_Match_MacIpRule) GetSourceAddressPrefix() uint32 {
	if m != nil {
		return m.SourceAddressPrefix
	}
	return 0
}

func (m *Acl_Rule_Match_MacIpRule) GetSourceMacAddress() string {
	if m != nil {
		return m.SourceMacAddress
	}
	return ""
}

func (m *Acl_Rule_Match_MacIpRule) GetSourceMacAddressMask() string {
	if m != nil {
		return m.SourceMacAddressMask
	}
	return ""
}

type Acl_Interfaces struct {
	Egress               []string `protobuf:"bytes,1,rep,name=egress" json:"egress,omitempty"`
	Ingress              []string `protobuf:"bytes,2,rep,name=ingress" json:"ingress,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Acl_Interfaces) Reset()         { *m = Acl_Interfaces{} }
func (m *Acl_Interfaces) String() string { return proto.CompactTextString(m) }
func (*Acl_Interfaces) ProtoMessage()    {}
func (*Acl_Interfaces) Descriptor() ([]byte, []int) {
	return fileDescriptor_acl_9f8f3a3194cc1211, []int{0, 1}
}
func (m *Acl_Interfaces) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Acl_Interfaces.Unmarshal(m, b)
}
func (m *Acl_Interfaces) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Acl_Interfaces.Marshal(b, m, deterministic)
}
func (dst *Acl_Interfaces) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Acl_Interfaces.Merge(dst, src)
}
func (m *Acl_Interfaces) XXX_Size() int {
	return xxx_messageInfo_Acl_Interfaces.Size(m)
}
func (m *Acl_Interfaces) XXX_DiscardUnknown() {
	xxx_messageInfo_Acl_Interfaces.DiscardUnknown(m)
}

var xxx_messageInfo_Acl_Interfaces proto.InternalMessageInfo

func (m *Acl_Interfaces) GetEgress() []string {
	if m != nil {
		return m.Egress
	}
	return nil
}

func (m *Acl_Interfaces) GetIngress() []string {
	if m != nil {
		return m.Ingress
	}
	return nil
}

func init() {
	proto.RegisterType((*Acl)(nil), "acl.Acl")
	proto.RegisterType((*Acl_Rule)(nil), "acl.Acl.Rule")
	proto.RegisterType((*Acl_Rule_Match)(nil), "acl.Acl.Rule.Match")
	proto.RegisterType((*Acl_Rule_Match_IpRule)(nil), "acl.Acl.Rule.Match.IpRule")
	proto.RegisterType((*Acl_Rule_Match_IpRule_Ip)(nil), "acl.Acl.Rule.Match.IpRule.Ip")
	proto.RegisterType((*Acl_Rule_Match_IpRule_Icmp)(nil), "acl.Acl.Rule.Match.IpRule.Icmp")
	proto.RegisterType((*Acl_Rule_Match_IpRule_Icmp_Range)(nil), "acl.Acl.Rule.Match.IpRule.Icmp.Range")
	proto.RegisterType((*Acl_Rule_Match_IpRule_PortRange)(nil), "acl.Acl.Rule.Match.IpRule.PortRange")
	proto.RegisterType((*Acl_Rule_Match_IpRule_Tcp)(nil), "acl.Acl.Rule.Match.IpRule.Tcp")
	proto.RegisterType((*Acl_Rule_Match_IpRule_Udp)(nil), "acl.Acl.Rule.Match.IpRule.Udp")
	proto.RegisterType((*Acl_Rule_Match_MacIpRule)(nil), "acl.Acl.Rule.Match.MacIpRule")
	proto.RegisterType((*Acl_Interfaces)(nil), "acl.Acl.Interfaces")
	proto.RegisterEnum("acl.Acl_Rule_Action", Acl_Rule_Action_name, Acl_Rule_Action_value)
}

func init() { proto.RegisterFile("acl.proto", fileDescriptor_acl_9f8f3a3194cc1211) }

var fileDescriptor_acl_9f8f3a3194cc1211 = []byte{
	// 737 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x55, 0x5d, 0x6e, 0xd3, 0x4a,
	0x14, 0xbe, 0xb6, 0x93, 0x34, 0x3e, 0xa9, 0xdb, 0xdc, 0x69, 0x6e, 0x6f, 0xe4, 0xab, 0x5e, 0xa2,
	0xd2, 0xa2, 0x20, 0x20, 0x40, 0x22, 0x78, 0x42, 0x48, 0x51, 0x49, 0xa5, 0x48, 0xa4, 0x8a, 0x46,
	0x29, 0x12, 0x08, 0xc9, 0x1a, 0xc6, 0x93, 0x62, 0xd5, 0x89, 0x47, 0xb6, 0xd3, 0xd2, 0x47, 0xd6,
	0x82, 0x58, 0x01, 0xcb, 0x60, 0x05, 0xac, 0x02, 0x96, 0x80, 0xe6, 0xc7, 0x8e, 0x4b, 0x4b, 0xab,
	0x3e, 0xf2, 0xe4, 0x99, 0xf3, 0xfd, 0x9c, 0x73, 0x7c, 0x66, 0x6c, 0xb0, 0x09, 0x0d, 0x3b, 0x3c,
	0x8e, 0xd2, 0x08, 0x59, 0x84, 0x86, 0xdb, 0xdf, 0x1c, 0xb0, 0xfa, 0x34, 0x44, 0x08, 0x4a, 0x73,
	0x32, 0x63, 0x4d, 0xa3, 0x65, 0xb4, 0x6d, 0x2c, 0xd7, 0xe8, 0x36, 0x94, 0xe3, 0x45, 0xc8, 0x92,
	0xa6, 0xd9, 0xb2, 0xda, 0xb5, 0xae, 0xd3, 0x11, 0xda, 0x3e, 0x0d, 0x3b, 0x78, 0x11, 0x32, 0xac,
	0x30, 0xd4, 0x03, 0x08, 0xe6, 0x29, 0x8b, 0xa7, 0x84, 0xb2, 0xa4, 0x69, 0xb5, 0x8c, 0x76, 0xad,
	0xbb, 0x91, 0x33, 0x87, 0x39, 0x84, 0x0b, 0x34, 0xf7, 0xd3, 0x2a, 0x94, 0x84, 0x09, 0xfa, 0x0f,
	0x6c, 0x61, 0xe3, 0x15, 0x72, 0x57, 0x45, 0xe0, 0x40, 0xe4, 0xef, 0x01, 0x10, 0x1a, 0x7a, 0x84,
	0xa6, 0x41, 0x34, 0x6f, 0x9a, 0x2d, 0xa3, 0xbd, 0xd6, 0x6d, 0x9c, 0x2b, 0xa2, 0xd3, 0x97, 0x18,
	0x16, 0x5d, 0xa9, 0x25, 0xba, 0x0b, 0xe5, 0x19, 0x49, 0xe9, 0xfb, 0x0b, 0xa5, 0x48, 0xfe, 0x48,
	0x40, 0x58, 0x31, 0xdc, 0x1f, 0x00, 0x65, 0x19, 0x40, 0x3d, 0x58, 0x09, 0xb8, 0x27, 0x12, 0xcb,
	0x22, 0x6a, 0x5d, 0xf7, 0x12, 0x59, 0x67, 0xc8, 0x65, 0xe3, 0x95, 0x40, 0x3e, 0xd1, 0x33, 0x80,
	0x19, 0xa1, 0x99, 0xce, 0x94, 0xba, 0xad, 0xcb, 0x74, 0x23, 0x42, 0xb5, 0xd4, 0x96, 0x02, 0xb1,
	0x74, 0x3f, 0x57, 0xa1, 0xa2, 0xa2, 0xe8, 0x01, 0x98, 0x01, 0xd7, 0x89, 0xb7, 0x7e, 0x9f, 0x58,
	0x3c, 0xcc, 0x80, 0xa3, 0x1e, 0x94, 0x02, 0x3a, 0xe3, 0x3a, 0xe3, 0xad, 0xab, 0x04, 0x74, 0xc6,
	0xb1, 0x24, 0xa3, 0x47, 0x60, 0xa5, 0x94, 0xeb, 0x97, 0xf2, 0xff, 0x15, 0x9a, 0x09, 0xe5, 0x58,
	0x50, 0x85, 0x62, 0xe1, 0xf3, 0x66, 0xe9, 0x5a, 0xc5, 0xa1, 0xcf, 0xb1, 0xa0, 0xba, 0x6f, 0xc1,
	0x1c, 0x72, 0xf4, 0x10, 0x36, 0x7c, 0x96, 0xa4, 0xc1, 0x9c, 0x88, 0x79, 0x78, 0x73, 0x96, 0x9e,
	0x46, 0xf1, 0xb1, 0x1e, 0x2e, 0x2a, 0x40, 0x07, 0x0a, 0x41, 0xbb, 0xb0, 0x96, 0x44, 0x8b, 0x98,
	0xb2, 0x9c, 0x6b, 0x4a, 0xae, 0xa3, 0xa2, 0x9a, 0xe6, 0x7e, 0x37, 0xa0, 0x24, 0x1a, 0x42, 0x9b,
	0x50, 0x11, 0x2d, 0x9d, 0x3c, 0x95, 0x9e, 0x55, 0xac, 0x77, 0x68, 0x04, 0xeb, 0x62, 0xe5, 0xd1,
	0xc8, 0x67, 0x5e, 0x4c, 0xe6, 0x47, 0xd9, 0x50, 0x76, 0xaf, 0x79, 0x45, 0x1d, 0x2c, 0xc8, 0xd8,
	0x11, 0xea, 0xbd, 0xc8, 0x67, 0x72, 0x9b, 0xdb, 0xa5, 0x67, 0x3c, 0xb3, 0xb3, 0x6e, 0x6c, 0x37,
	0x39, 0xe3, 0xca, 0xce, 0x7d, 0x0c, 0x65, 0xe5, 0xdb, 0x80, 0xf2, 0x34, 0x88, 0x93, 0x54, 0x56,
	0xef, 0x60, 0xb5, 0x11, 0xf7, 0x2f, 0x24, 0x49, 0x2a, 0x2b, 0x76, 0xb0, 0x5c, 0xbb, 0x43, 0xb0,
	0xc7, 0x51, 0x9c, 0x2a, 0xd9, 0x16, 0x40, 0x18, 0x9d, 0xb2, 0xd8, 0xe3, 0x51, 0x9c, 0x69, 0x6d,
	0x19, 0x11, 0x1c, 0x01, 0x2f, 0x38, 0xcf, 0x60, 0xe5, 0x62, 0xcb, 0x88, 0x80, 0xdd, 0x8f, 0x26,
	0x58, 0x13, 0xca, 0xd1, 0x1b, 0xd8, 0x2c, 0x0e, 0x47, 0x90, 0x75, 0x6f, 0xea, 0xf8, 0xed, 0x5c,
	0xd1, 0x5b, 0x5e, 0x0b, 0x6e, 0x14, 0x3c, 0x96, 0x15, 0x8e, 0xe1, 0x6f, 0x3d, 0xc7, 0x82, 0xad,
	0x79, 0x03, 0xdb, 0x75, 0x25, 0x5f, 0x3a, 0xee, 0xc0, 0x5a, 0x4a, 0xb9, 0x37, 0x0d, 0xc9, 0x51,
	0xe2, 0xcd, 0x48, 0x72, 0x2c, 0x27, 0xe0, 0xe0, 0xd5, 0x94, 0xf2, 0x7d, 0x11, 0x1c, 0x91, 0xe4,
	0x18, 0xdd, 0x81, 0xf5, 0x25, 0xeb, 0x84, 0x84, 0x0b, 0x26, 0x0f, 0xad, 0x83, 0x9d, 0x8c, 0xf6,
	0x4a, 0x04, 0xdd, 0x2f, 0x06, 0x58, 0x87, 0xfe, 0x1f, 0xf6, 0x0e, 0xdc, 0xaf, 0x06, 0xd8, 0xf9,
	0x07, 0xa4, 0x70, 0x57, 0x88, 0xef, 0xc7, 0x2c, 0x49, 0xf4, 0xbd, 0xd2, 0x77, 0xa5, 0xaf, 0x82,
	0xa8, 0x0b, 0xff, 0x9c, 0xa7, 0x79, 0x3c, 0x66, 0xd3, 0xe0, 0x83, 0x3e, 0x18, 0x1b, 0xe7, 0xd8,
	0x63, 0x09, 0xa1, 0xfb, 0x80, 0xb4, 0x66, 0x46, 0x68, 0x6e, 0x6f, 0x49, 0xfb, 0xba, 0x42, 0x46,
	0x84, 0x66, 0x19, 0x9e, 0xc0, 0xbf, 0x17, 0xd9, 0x6a, 0x46, 0x25, 0x29, 0x69, 0xfc, 0x2a, 0x11,
	0xb3, 0xda, 0xbe, 0x07, 0x15, 0xfd, 0x9d, 0xae, 0x42, 0xe9, 0xc5, 0xe0, 0xe0, 0x75, 0xfd, 0x2f,
	0x04, 0x50, 0x19, 0x0f, 0xf0, 0x68, 0x38, 0xa9, 0x1b, 0xa8, 0x06, 0x2b, 0x78, 0xb0, 0xff, 0x72,
	0xb0, 0x37, 0xa9, 0x9b, 0xee, 0x73, 0x80, 0xe5, 0xff, 0x43, 0x5c, 0x7b, 0x76, 0xa4, 0x5b, 0xb6,
	0xda, 0x36, 0xd6, 0x3b, 0xd4, 0x84, 0x95, 0x60, 0xae, 0x00, 0x53, 0x02, 0xd9, 0xf6, 0x5d, 0x45,
	0xfe, 0xe7, 0x7a, 0x3f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xe1, 0xc4, 0xc0, 0x9d, 0xf4, 0x06, 0x00,
	0x00,
}
