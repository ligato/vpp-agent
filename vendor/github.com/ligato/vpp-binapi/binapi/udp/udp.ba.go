// Code generated by GoVPP binapi-generator. DO NOT EDIT.
//  source: vppapi/udp.api.json

/*
 Package udp is a generated from VPP binary API module 'udp'.

 It contains following objects:
	  6 messages
	  6 types
	  2 aliases
	  1 enum
	  1 union
	  3 services

*/
package udp

import "git.fd.io/govpp.git/api"
import "github.com/lunixbochs/struc"
import "bytes"

// Reference imports to suppress errors if they are not otherwise used.
var _ = api.RegisterMessage
var _ = struc.Pack
var _ = bytes.NewBuffer

// VlAPIVersion represents version of the binary API module.
const VlAPIVersion = 0x30992452

// Services represents VPP binary API services:
//
//	"services": {
//	    "udp_encap_del": {
//	        "reply": "udp_encap_del_reply"
//	    },
//	    "udp_encap_add": {
//	        "reply": "udp_encap_add_reply"
//	    },
//	    "udp_encap_dump": {
//	        "reply": "udp_encap_details",
//	        "stream": true
//	    }
//	},
//
type Services interface {
	DumpUDPEncap(*UDPEncapDump) ([]*UDPEncapDetails, error)
	UDPEncapAdd(*UDPEncapAdd) (*UDPEncapAddReply, error)
	UDPEncapDel(*UDPEncapDel) (*UDPEncapDelReply, error)
}

/* Enums */

// AddressFamily represents VPP binary API enum 'address_family':
//
//	"address_family",
//	[
//	    "ADDRESS_IP4",
//	    0
//	],
//	[
//	    "ADDRESS_IP6",
//	    1
//	],
//	{
//	    "enumtype": "u32"
//	}
//
type AddressFamily uint32

const (
	ADDRESS_IP4 AddressFamily = 0
	ADDRESS_IP6 AddressFamily = 1
)

/* Aliases */

// IP4Address represents VPP binary API alias 'ip4_address':
//
//	"ip4_address": {
//	    "length": 4,
//	    "type": "u8"
//	}
//
type IP4Address [4]uint8

// IP6Address represents VPP binary API alias 'ip6_address':
//
//	"ip6_address": {
//	    "length": 16,
//	    "type": "u8"
//	},
//
type IP6Address [16]uint8

/* Types */

// Address represents VPP binary API type 'address':
//
//	"address",
//	[
//	    "vl_api_address_family_t",
//	    "af"
//	],
//	[
//	    "vl_api_address_union_t",
//	    "un"
//	],
//	{
//	    "crc": "0x09f11671"
//	}
//
type Address struct {
	Af AddressFamily
	Un AddressUnion
}

func (*Address) GetTypeName() string {
	return "address"
}
func (*Address) GetCrcString() string {
	return "09f11671"
}

// Prefix represents VPP binary API type 'prefix':
//
//	"prefix",
//	[
//	    "vl_api_address_t",
//	    "address"
//	],
//	[
//	    "u8",
//	    "address_length"
//	],
//	{
//	    "crc": "0x0403aebc"
//	}
//
type Prefix struct {
	Address       Address
	AddressLength uint8
}

func (*Prefix) GetTypeName() string {
	return "prefix"
}
func (*Prefix) GetCrcString() string {
	return "0403aebc"
}

// Mprefix represents VPP binary API type 'mprefix':
//
//	"mprefix",
//	[
//	    "vl_api_address_family_t",
//	    "af"
//	],
//	[
//	    "u16",
//	    "grp_address_length"
//	],
//	[
//	    "vl_api_address_union_t",
//	    "grp_address"
//	],
//	[
//	    "vl_api_address_union_t",
//	    "src_address"
//	],
//	{
//	    "crc": "0x1c4cba05"
//	}
//
type Mprefix struct {
	Af               AddressFamily
	GrpAddressLength uint16
	GrpAddress       AddressUnion
	SrcAddress       AddressUnion
}

func (*Mprefix) GetTypeName() string {
	return "mprefix"
}
func (*Mprefix) GetCrcString() string {
	return "1c4cba05"
}

// IP6Prefix represents VPP binary API type 'ip6_prefix':
//
//	"ip6_prefix",
//	[
//	    "vl_api_ip6_address_t",
//	    "prefix"
//	],
//	[
//	    "u8",
//	    "len"
//	],
//	{
//	    "crc": "0x779fd64f"
//	}
//
type IP6Prefix struct {
	Prefix IP6Address
	Len    uint8
}

func (*IP6Prefix) GetTypeName() string {
	return "ip6_prefix"
}
func (*IP6Prefix) GetCrcString() string {
	return "779fd64f"
}

// IP4Prefix represents VPP binary API type 'ip4_prefix':
//
//	"ip4_prefix",
//	[
//	    "vl_api_ip4_address_t",
//	    "prefix"
//	],
//	[
//	    "u8",
//	    "len"
//	],
//	{
//	    "crc": "0xea8dc11d"
//	}
//
type IP4Prefix struct {
	Prefix IP4Address
	Len    uint8
}

func (*IP4Prefix) GetTypeName() string {
	return "ip4_prefix"
}
func (*IP4Prefix) GetCrcString() string {
	return "ea8dc11d"
}

// UDPEncap represents VPP binary API type 'udp_encap':
//
//	"udp_encap",
//	[
//	    "u32",
//	    "table_id"
//	],
//	[
//	    "u16",
//	    "src_port"
//	],
//	[
//	    "u16",
//	    "dst_port"
//	],
//	[
//	    "vl_api_address_t",
//	    "src_ip"
//	],
//	[
//	    "vl_api_address_t",
//	    "dst_ip"
//	],
//	[
//	    "u32",
//	    "id"
//	],
//	{
//	    "crc": "0x68624faa"
//	}
//
type UDPEncap struct {
	TableID uint32
	SrcPort uint16
	DstPort uint16
	SrcIP   Address
	DstIP   Address
	ID      uint32
}

func (*UDPEncap) GetTypeName() string {
	return "udp_encap"
}
func (*UDPEncap) GetCrcString() string {
	return "68624faa"
}

/* Unions */

// AddressUnion represents VPP binary API union 'address_union':
//
//	"address_union",
//	[
//	    "vl_api_ip4_address_t",
//	    "ip4"
//	],
//	[
//	    "vl_api_ip6_address_t",
//	    "ip6"
//	],
//	{
//	    "crc": "0xd68a2fb4"
//	}
//
type AddressUnion struct {
	Union_data [16]byte
}

func (*AddressUnion) GetTypeName() string {
	return "address_union"
}
func (*AddressUnion) GetCrcString() string {
	return "d68a2fb4"
}

func (u *AddressUnion) SetIP4(a IP4Address) {
	var b = new(bytes.Buffer)
	if err := struc.Pack(b, &a); err != nil {
		return
	}
	copy(u.Union_data[:], b.Bytes())
}
func (u *AddressUnion) GetIP4() (a IP4Address) {
	var b = bytes.NewReader(u.Union_data[:])
	struc.Unpack(b, &a)
	return
}

func (u *AddressUnion) SetIP6(a IP6Address) {
	var b = new(bytes.Buffer)
	if err := struc.Pack(b, &a); err != nil {
		return
	}
	copy(u.Union_data[:], b.Bytes())
}
func (u *AddressUnion) GetIP6() (a IP6Address) {
	var b = bytes.NewReader(u.Union_data[:])
	struc.Unpack(b, &a)
	return
}

/* Messages */

// UDPEncapAdd represents VPP binary API message 'udp_encap_add':
//
//	"udp_encap_add",
//	[
//	    "u16",
//	    "_vl_msg_id"
//	],
//	[
//	    "u32",
//	    "client_index"
//	],
//	[
//	    "u32",
//	    "context"
//	],
//	[
//	    "vl_api_udp_encap_t",
//	    "udp_encap"
//	],
//	{
//	    "crc": "0x0ff437bb"
//	}
//
type UDPEncapAdd struct {
	UDPEncap UDPEncap
}

func (*UDPEncapAdd) GetMessageName() string {
	return "udp_encap_add"
}
func (*UDPEncapAdd) GetCrcString() string {
	return "0ff437bb"
}
func (*UDPEncapAdd) GetMessageType() api.MessageType {
	return api.RequestMessage
}

// UDPEncapAddReply represents VPP binary API message 'udp_encap_add_reply':
//
//	"udp_encap_add_reply",
//	[
//	    "u16",
//	    "_vl_msg_id"
//	],
//	[
//	    "u32",
//	    "context"
//	],
//	[
//	    "i32",
//	    "retval"
//	],
//	[
//	    "u32",
//	    "id"
//	],
//	{
//	    "crc": "0xe2fc8294"
//	}
//
type UDPEncapAddReply struct {
	Retval int32
	ID     uint32
}

func (*UDPEncapAddReply) GetMessageName() string {
	return "udp_encap_add_reply"
}
func (*UDPEncapAddReply) GetCrcString() string {
	return "e2fc8294"
}
func (*UDPEncapAddReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

// UDPEncapDel represents VPP binary API message 'udp_encap_del':
//
//	"udp_encap_del",
//	[
//	    "u16",
//	    "_vl_msg_id"
//	],
//	[
//	    "u32",
//	    "client_index"
//	],
//	[
//	    "u32",
//	    "context"
//	],
//	[
//	    "u32",
//	    "id"
//	],
//	{
//	    "crc": "0x3a91bde5"
//	}
//
type UDPEncapDel struct {
	ID uint32
}

func (*UDPEncapDel) GetMessageName() string {
	return "udp_encap_del"
}
func (*UDPEncapDel) GetCrcString() string {
	return "3a91bde5"
}
func (*UDPEncapDel) GetMessageType() api.MessageType {
	return api.RequestMessage
}

// UDPEncapDelReply represents VPP binary API message 'udp_encap_del_reply':
//
//	"udp_encap_del_reply",
//	[
//	    "u16",
//	    "_vl_msg_id"
//	],
//	[
//	    "u32",
//	    "context"
//	],
//	[
//	    "i32",
//	    "retval"
//	],
//	{
//	    "crc": "0xe8d4e804"
//	}
//
type UDPEncapDelReply struct {
	Retval int32
}

func (*UDPEncapDelReply) GetMessageName() string {
	return "udp_encap_del_reply"
}
func (*UDPEncapDelReply) GetCrcString() string {
	return "e8d4e804"
}
func (*UDPEncapDelReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

// UDPEncapDump represents VPP binary API message 'udp_encap_dump':
//
//	"udp_encap_dump",
//	[
//	    "u16",
//	    "_vl_msg_id"
//	],
//	[
//	    "u32",
//	    "client_index"
//	],
//	[
//	    "u32",
//	    "context"
//	],
//	{
//	    "crc": "0x51077d14"
//	}
//
type UDPEncapDump struct{}

func (*UDPEncapDump) GetMessageName() string {
	return "udp_encap_dump"
}
func (*UDPEncapDump) GetCrcString() string {
	return "51077d14"
}
func (*UDPEncapDump) GetMessageType() api.MessageType {
	return api.RequestMessage
}

// UDPEncapDetails represents VPP binary API message 'udp_encap_details':
//
//	"udp_encap_details",
//	[
//	    "u16",
//	    "_vl_msg_id"
//	],
//	[
//	    "u32",
//	    "context"
//	],
//	[
//	    "vl_api_udp_encap_t",
//	    "udp_encap"
//	],
//	{
//	    "crc": "0xb31b3805"
//	}
//
type UDPEncapDetails struct {
	UDPEncap UDPEncap
}

func (*UDPEncapDetails) GetMessageName() string {
	return "udp_encap_details"
}
func (*UDPEncapDetails) GetCrcString() string {
	return "b31b3805"
}
func (*UDPEncapDetails) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func init() {
	api.RegisterMessage((*UDPEncapAdd)(nil), "udp.UDPEncapAdd")
	api.RegisterMessage((*UDPEncapAddReply)(nil), "udp.UDPEncapAddReply")
	api.RegisterMessage((*UDPEncapDel)(nil), "udp.UDPEncapDel")
	api.RegisterMessage((*UDPEncapDelReply)(nil), "udp.UDPEncapDelReply")
	api.RegisterMessage((*UDPEncapDump)(nil), "udp.UDPEncapDump")
	api.RegisterMessage((*UDPEncapDetails)(nil), "udp.UDPEncapDetails")
}
