// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package vppagent

import (
	"context"
	"go.ligato.io/cn-infra/v2"
	"go.ligato.io/cn-infra/v2/config"
	"go.ligato.io/cn-infra/v2/datasync"
	"go.ligato.io/cn-infra/v2/datasync/kvdbsync/local"
	"go.ligato.io/cn-infra/v2/datasync/resync"
	"go.ligato.io/cn-infra/v2/health/probe"
	"go.ligato.io/cn-infra/v2/logging"
	"go.ligato.io/cn-infra/v2/logging/logmanager"
	"go.ligato.io/cn-infra/v2/rpc/prometheus"
	"go.ligato.io/vpp-agent/v3/plugins/configurator"
	"go.ligato.io/vpp-agent/v3/plugins/govppmux"
	"go.ligato.io/vpp-agent/v3/plugins/kvscheduler"
	ifplugin2 "go.ligato.io/vpp-agent/v3/plugins/linux/ifplugin"
	"go.ligato.io/vpp-agent/v3/plugins/linux/iptablesplugin"
	l3plugin2 "go.ligato.io/vpp-agent/v3/plugins/linux/l3plugin"
	"go.ligato.io/vpp-agent/v3/plugins/linux/nsplugin"
	"go.ligato.io/vpp-agent/v3/plugins/netalloc"
	"go.ligato.io/vpp-agent/v3/plugins/orchestrator"
	"go.ligato.io/vpp-agent/v3/plugins/restapi"
	"go.ligato.io/vpp-agent/v3/plugins/telemetry"
	"go.ligato.io/vpp-agent/v3/plugins/vpp/abfplugin"
	"go.ligato.io/vpp-agent/v3/plugins/vpp/aclplugin"
	"go.ligato.io/vpp-agent/v3/plugins/vpp/ifplugin"
	"go.ligato.io/vpp-agent/v3/plugins/vpp/ipsecplugin"
	"go.ligato.io/vpp-agent/v3/plugins/vpp/l2plugin"
	"go.ligato.io/vpp-agent/v3/plugins/vpp/l3plugin"
	"go.ligato.io/vpp-agent/v3/plugins/vpp/natplugin"
	"go.ligato.io/vpp-agent/v3/plugins/vpp/puntplugin"
	"go.ligato.io/vpp-agent/v3/plugins/vpp/srplugin"
	"go.ligato.io/vpp-agent/v3/plugins/vpp/stnplugin"
)

// Injectors from wire.go:

func InjectDefaultVPPAgent(ctx context.Context) (Agent, func(), error) {
	config := _wireConfigValue
	base, cleanup, err := cninfra.InjectDefaultBase(ctx, config)
	if err != nil {
		return Agent{}, nil, err
	}
	server, cleanup2, err := cninfra.InjectDefaultServer(ctx, config)
	if err != nil {
		cleanup()
		return Agent{}, nil, err
	}
	readerAPI := cninfra.ProvideServiceLabelReaderAPI(base)
	registry := _wireRegistryValue
	httpHandlers := cninfra.ProvideRestHTTPHandlers(server)
	deps := logmanager.Deps{
		ServiceLabel: readerAPI,
		LogRegistry:  registry,
		HTTP:         httpHandlers,
	}
	logmanagerConfig := logmanager.ConfigProvider(config)
	plugin, err := logmanager.Provider(deps, logmanagerConfig)
	if err != nil {
		cleanup2()
		cleanup()
		return Agent{}, nil, err
	}
	statusReader := cninfra.ProvideStatusCheckStatusReader(base)
	prometheusDeps := prometheus.Deps{
		HTTP: httpHandlers,
	}
	prometheusPlugin, err := prometheus.Provider(prometheusDeps)
	if err != nil {
		cleanup2()
		cleanup()
		return Agent{}, nil, err
	}
	probeDeps := probe.Deps{
		ServiceLabel: readerAPI,
		StatusCheck:  statusReader,
		HTTP:         httpHandlers,
		Prometheus:   prometheusPlugin,
	}
	probePlugin, err := probe.Provider(probeDeps)
	if err != nil {
		cleanup2()
		cleanup()
		return Agent{}, nil, err
	}
	kvschedulerDeps := kvscheduler.Deps{
		HTTPHandlers: httpHandlers,
	}
	scheduler, cleanup3, err := KVSchedulerProvider(kvschedulerDeps)
	if err != nil {
		cleanup2()
		cleanup()
		return Agent{}, nil, err
	}
	grpcServer := cninfra.ProvideGrpcServer(server)
	keyValProtoWatcher := _wireSyncbaseRegistryValue
	keyProtoValWriter := _wireKeyProtoValWriterValue
	orchestratorDeps := orchestrator.Deps{
		GRPC:            grpcServer,
		KVScheduler:     scheduler,
		Watcher:         keyValProtoWatcher,
		StatusPublisher: keyProtoValWriter,
	}
	orchestratorPlugin, err := OrchestratorProvider(orchestratorDeps)
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return Agent{}, nil, err
	}
	netallocDeps := netalloc.DepsProvider(scheduler)
	netallocPlugin, err := netalloc.Provider(netallocDeps)
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return Agent{}, nil, err
	}
	pluginStatusWriter := cninfra.ProvideStatusCheckPluginStatusWriter(base)
	resyncPlugin, cleanup4, err := resync.Provider()
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return Agent{}, nil, err
	}
	govppmuxDeps := govppmux.Deps{
		HTTPHandlers: httpHandlers,
		StatusCheck:  pluginStatusWriter,
		Resync:       resyncPlugin,
	}
	govppmuxPlugin, cleanup5, err := GovppProvider(govppmuxDeps)
	if err != nil {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return Agent{}, nil, err
	}
	nspluginDeps := nsplugin.DepsProvider(scheduler)
	nspluginConfig := nsplugin.ConfigProvider(config)
	nsPlugin, cleanup6, err := nsplugin.Provider(nspluginDeps, nspluginConfig)
	if err != nil {
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return Agent{}, nil, err
	}
	ifpluginDeps := ifplugin.DepsProvider(scheduler, govppmuxPlugin, netallocPlugin, nsPlugin, pluginStatusWriter)
	ifPlugin, cleanup7, err := ifplugin.Provider(ifpluginDeps)
	if err != nil {
		cleanup6()
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return Agent{}, nil, err
	}
	aclpluginDeps := aclplugin.DepsProvider(scheduler, govppmuxPlugin, ifPlugin, pluginStatusWriter)
	aclPlugin, err := aclplugin.Provider(aclpluginDeps)
	if err != nil {
		cleanup7()
		cleanup6()
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return Agent{}, nil, err
	}
	abfpluginDeps := abfplugin.DepsProvider(scheduler, govppmuxPlugin, aclPlugin, ifPlugin, pluginStatusWriter)
	abfPlugin, err := abfplugin.Provider(abfpluginDeps)
	if err != nil {
		cleanup7()
		cleanup6()
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return Agent{}, nil, err
	}
	ipsecpluginDeps := ipsecplugin.DepsProvider(scheduler, govppmuxPlugin, ifPlugin, pluginStatusWriter)
	ipSecPlugin, err := ipsecplugin.Provider(ipsecpluginDeps)
	if err != nil {
		cleanup7()
		cleanup6()
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return Agent{}, nil, err
	}
	l2pluginDeps := l2plugin.DepsProvider(scheduler, govppmuxPlugin, ifPlugin, pluginStatusWriter)
	l2Plugin, err := l2plugin.Provider(l2pluginDeps)
	if err != nil {
		cleanup7()
		cleanup6()
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return Agent{}, nil, err
	}
	l3pluginDeps := l3plugin.DepsProvider(scheduler, govppmuxPlugin, netallocPlugin, ifPlugin, pluginStatusWriter)
	l3Plugin, err := l3plugin.Provider(l3pluginDeps)
	if err != nil {
		cleanup7()
		cleanup6()
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return Agent{}, nil, err
	}
	natpluginDeps := natplugin.DepsProvider(scheduler, govppmuxPlugin, ifPlugin, pluginStatusWriter)
	natPlugin, err := natplugin.Provider(natpluginDeps)
	if err != nil {
		cleanup7()
		cleanup6()
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return Agent{}, nil, err
	}
	puntpluginDeps := puntplugin.DepsProvider(scheduler, govppmuxPlugin, ifPlugin, pluginStatusWriter)
	puntPlugin, err := puntplugin.Provider(puntpluginDeps)
	if err != nil {
		cleanup7()
		cleanup6()
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return Agent{}, nil, err
	}
	stnpluginDeps := stnplugin.DepsProvider(scheduler, govppmuxPlugin, ifPlugin, pluginStatusWriter)
	stnPlugin, err := stnplugin.Provider(stnpluginDeps)
	if err != nil {
		cleanup7()
		cleanup6()
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return Agent{}, nil, err
	}
	srpluginDeps := srplugin.DepsProvider(scheduler, govppmuxPlugin, ifPlugin, pluginStatusWriter)
	srPlugin, err := srplugin.Provider(srpluginDeps)
	if err != nil {
		cleanup7()
		cleanup6()
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return Agent{}, nil, err
	}
	vpp := VPP{
		ABF:       abfPlugin,
		ACL:       aclPlugin,
		Interface: ifPlugin,
		IPSec:     ipSecPlugin,
		L2:        l2Plugin,
		L3:        l3Plugin,
		NAT:       natPlugin,
		Punt:      puntPlugin,
		STN:       stnPlugin,
		SR:        srPlugin,
	}
	deps2 := ifplugin2.DepsProvider(scheduler, netallocPlugin, nsPlugin, ifPlugin, readerAPI)
	ifpluginIfPlugin, cleanup8, err := ifplugin2.Provider(deps2)
	if err != nil {
		cleanup7()
		cleanup6()
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return Agent{}, nil, err
	}
	deps3 := l3plugin2.DepsProvider(scheduler, netallocPlugin, nsPlugin, ifpluginIfPlugin)
	l3pluginConfig := l3plugin2.ConfigProvider(config)
	l3pluginL3Plugin, err := l3plugin2.Provider(deps3, l3pluginConfig)
	if err != nil {
		cleanup8()
		cleanup7()
		cleanup6()
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return Agent{}, nil, err
	}
	iptablespluginDeps := iptablesplugin.DepsProvider(scheduler, nsPlugin)
	iptablespluginConfig := iptablesplugin.ConfigProvider(config)
	ipTablesPlugin, err := iptablesplugin.Provider(iptablespluginDeps, iptablespluginConfig)
	if err != nil {
		cleanup8()
		cleanup7()
		cleanup6()
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return Agent{}, nil, err
	}
	linux := Linux{
		Interface: ifpluginIfPlugin,
		L3:        l3pluginL3Plugin,
		NS:        nsPlugin,
		IPTables:  ipTablesPlugin,
	}
	configuratorDeps := configurator.Deps{
		GRPCServer:    grpcServer,
		Dispatch:      orchestratorPlugin,
		VPP:           govppmuxPlugin,
		ServiceLabel:  readerAPI,
		AddrAlloc:     netallocPlugin,
		VPPACLPlugin:  aclPlugin,
		VPPIfPlugin:   ifPlugin,
		VPPL2Plugin:   l2Plugin,
		VPPL3Plugin:   l3Plugin,
		LinuxIfPlugin: ifpluginIfPlugin,
		NsPlugin:      nsPlugin,
	}
	configuratorPlugin, err := ConfiguratorProvider(configuratorDeps)
	if err != nil {
		cleanup8()
		cleanup7()
		cleanup6()
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return Agent{}, nil, err
	}
	restapiDeps := restapi.Deps{
		HTTPHandlers:  httpHandlers,
		VPP:           govppmuxPlugin,
		ServiceLabel:  readerAPI,
		AddrAlloc:     netallocPlugin,
		VPPACLPlugin:  aclPlugin,
		VPPIfPlugin:   ifPlugin,
		VPPL2Plugin:   l2Plugin,
		VPPL3Plugin:   l3Plugin,
		LinuxIfPlugin: ifpluginIfPlugin,
		NsPlugin:      nsPlugin,
	}
	restapiPlugin, err := RestapiProvider(restapiDeps)
	if err != nil {
		cleanup8()
		cleanup7()
		cleanup6()
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return Agent{}, nil, err
	}
	telemetryDeps := telemetry.Deps{
		ServiceLabel: readerAPI,
		VPP:          govppmuxPlugin,
		Prometheus:   prometheusPlugin,
		GRPC:         grpcServer,
		HTTPHandlers: httpHandlers,
		IfPlugin:     ifPlugin,
	}
	telemetryPlugin, cleanup9, err := TelemetryProvider(telemetryDeps)
	if err != nil {
		cleanup8()
		cleanup7()
		cleanup6()
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return Agent{}, nil, err
	}
	agent := Agent{
		Base:         base,
		Server:       server,
		LogManager:   plugin,
		Probe:        probePlugin,
		Prometheus:   prometheusPlugin,
		KVScheduler:  scheduler,
		Orchestrator: orchestratorPlugin,
		Netalloc:     netallocPlugin,
		VPP:          vpp,
		VPPClient:    govppmuxPlugin,
		Linux:        linux,
		Configurator: configuratorPlugin,
		RestAPI:      restapiPlugin,
		Telemetry:    telemetryPlugin,
	}
	return agent, func() {
		cleanup9()
		cleanup8()
		cleanup7()
		cleanup6()
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}

var (
	_wireConfigValue            = config.DefaultConfig
	_wireRegistryValue          = logging.DefaultRegistry
	_wireSyncbaseRegistryValue  = local.DefaultRegistry
	_wireKeyProtoValWriterValue = (datasync.KeyProtoValWriter)(nil)
)

func InjectAgent(ctx context.Context, conf config.Config, core cninfra.Base, server cninfra.Server) (Agent, func(), error) {
	plugin := core.ServiceLabel
	registry := _wireRegistryValue
	httpHandlers := cninfra.ProvideRestHTTPHandlers(server)
	deps := logmanager.Deps{
		ServiceLabel: plugin,
		LogRegistry:  registry,
		HTTP:         httpHandlers,
	}
	logmanagerConfig := logmanager.ConfigProvider(conf)
	logmanagerPlugin, err := logmanager.Provider(deps, logmanagerConfig)
	if err != nil {
		return Agent{}, nil, err
	}
	statuscheckPlugin := core.StatusCheck
	prometheusDeps := prometheus.Deps{
		HTTP: httpHandlers,
	}
	prometheusPlugin, err := prometheus.Provider(prometheusDeps)
	if err != nil {
		return Agent{}, nil, err
	}
	probeDeps := probe.Deps{
		ServiceLabel: plugin,
		StatusCheck:  statuscheckPlugin,
		HTTP:         httpHandlers,
		Prometheus:   prometheusPlugin,
	}
	probePlugin, err := probe.Provider(probeDeps)
	if err != nil {
		return Agent{}, nil, err
	}
	kvschedulerDeps := kvscheduler.Deps{
		HTTPHandlers: httpHandlers,
	}
	scheduler, cleanup, err := KVSchedulerProvider(kvschedulerDeps)
	if err != nil {
		return Agent{}, nil, err
	}
	grpcPlugin := server.GRPC
	keyValProtoWatcher := _wireSyncbaseRegistryValue
	keyProtoValWriter := _wireKeyProtoValWriterValue
	orchestratorDeps := orchestrator.Deps{
		GRPC:            grpcPlugin,
		KVScheduler:     scheduler,
		Watcher:         keyValProtoWatcher,
		StatusPublisher: keyProtoValWriter,
	}
	orchestratorPlugin, err := OrchestratorProvider(orchestratorDeps)
	if err != nil {
		cleanup()
		return Agent{}, nil, err
	}
	netallocDeps := netalloc.DepsProvider(scheduler)
	netallocPlugin, err := netalloc.Provider(netallocDeps)
	if err != nil {
		cleanup()
		return Agent{}, nil, err
	}
	resyncPlugin, cleanup2, err := resync.Provider()
	if err != nil {
		cleanup()
		return Agent{}, nil, err
	}
	govppmuxDeps := govppmux.Deps{
		HTTPHandlers: httpHandlers,
		StatusCheck:  statuscheckPlugin,
		Resync:       resyncPlugin,
	}
	govppmuxPlugin, cleanup3, err := GovppProvider(govppmuxDeps)
	if err != nil {
		cleanup2()
		cleanup()
		return Agent{}, nil, err
	}
	nspluginDeps := nsplugin.DepsProvider(scheduler)
	nspluginConfig := nsplugin.ConfigProvider(conf)
	nsPlugin, cleanup4, err := nsplugin.Provider(nspluginDeps, nspluginConfig)
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return Agent{}, nil, err
	}
	ifpluginDeps := ifplugin.DepsProvider(scheduler, govppmuxPlugin, netallocPlugin, nsPlugin, statuscheckPlugin)
	ifPlugin, cleanup5, err := ifplugin.Provider(ifpluginDeps)
	if err != nil {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return Agent{}, nil, err
	}
	aclpluginDeps := aclplugin.DepsProvider(scheduler, govppmuxPlugin, ifPlugin, statuscheckPlugin)
	aclPlugin, err := aclplugin.Provider(aclpluginDeps)
	if err != nil {
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return Agent{}, nil, err
	}
	abfpluginDeps := abfplugin.DepsProvider(scheduler, govppmuxPlugin, aclPlugin, ifPlugin, statuscheckPlugin)
	abfPlugin, err := abfplugin.Provider(abfpluginDeps)
	if err != nil {
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return Agent{}, nil, err
	}
	ipsecpluginDeps := ipsecplugin.DepsProvider(scheduler, govppmuxPlugin, ifPlugin, statuscheckPlugin)
	ipSecPlugin, err := ipsecplugin.Provider(ipsecpluginDeps)
	if err != nil {
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return Agent{}, nil, err
	}
	l2pluginDeps := l2plugin.DepsProvider(scheduler, govppmuxPlugin, ifPlugin, statuscheckPlugin)
	l2Plugin, err := l2plugin.Provider(l2pluginDeps)
	if err != nil {
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return Agent{}, nil, err
	}
	l3pluginDeps := l3plugin.DepsProvider(scheduler, govppmuxPlugin, netallocPlugin, ifPlugin, statuscheckPlugin)
	l3Plugin, err := l3plugin.Provider(l3pluginDeps)
	if err != nil {
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return Agent{}, nil, err
	}
	natpluginDeps := natplugin.DepsProvider(scheduler, govppmuxPlugin, ifPlugin, statuscheckPlugin)
	natPlugin, err := natplugin.Provider(natpluginDeps)
	if err != nil {
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return Agent{}, nil, err
	}
	puntpluginDeps := puntplugin.DepsProvider(scheduler, govppmuxPlugin, ifPlugin, statuscheckPlugin)
	puntPlugin, err := puntplugin.Provider(puntpluginDeps)
	if err != nil {
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return Agent{}, nil, err
	}
	stnpluginDeps := stnplugin.DepsProvider(scheduler, govppmuxPlugin, ifPlugin, statuscheckPlugin)
	stnPlugin, err := stnplugin.Provider(stnpluginDeps)
	if err != nil {
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return Agent{}, nil, err
	}
	srpluginDeps := srplugin.DepsProvider(scheduler, govppmuxPlugin, ifPlugin, statuscheckPlugin)
	srPlugin, err := srplugin.Provider(srpluginDeps)
	if err != nil {
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return Agent{}, nil, err
	}
	vpp := VPP{
		ABF:       abfPlugin,
		ACL:       aclPlugin,
		Interface: ifPlugin,
		IPSec:     ipSecPlugin,
		L2:        l2Plugin,
		L3:        l3Plugin,
		NAT:       natPlugin,
		Punt:      puntPlugin,
		STN:       stnPlugin,
		SR:        srPlugin,
	}
	deps2 := ifplugin2.DepsProvider(scheduler, netallocPlugin, nsPlugin, ifPlugin, plugin)
	ifpluginIfPlugin, cleanup6, err := ifplugin2.Provider(deps2)
	if err != nil {
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return Agent{}, nil, err
	}
	deps3 := l3plugin2.DepsProvider(scheduler, netallocPlugin, nsPlugin, ifpluginIfPlugin)
	l3pluginConfig := l3plugin2.ConfigProvider(conf)
	l3pluginL3Plugin, err := l3plugin2.Provider(deps3, l3pluginConfig)
	if err != nil {
		cleanup6()
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return Agent{}, nil, err
	}
	iptablespluginDeps := iptablesplugin.DepsProvider(scheduler, nsPlugin)
	iptablespluginConfig := iptablesplugin.ConfigProvider(conf)
	ipTablesPlugin, err := iptablesplugin.Provider(iptablespluginDeps, iptablespluginConfig)
	if err != nil {
		cleanup6()
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return Agent{}, nil, err
	}
	linux := Linux{
		Interface: ifpluginIfPlugin,
		L3:        l3pluginL3Plugin,
		NS:        nsPlugin,
		IPTables:  ipTablesPlugin,
	}
	configuratorDeps := configurator.Deps{
		GRPCServer:    grpcPlugin,
		Dispatch:      orchestratorPlugin,
		VPP:           govppmuxPlugin,
		ServiceLabel:  plugin,
		AddrAlloc:     netallocPlugin,
		VPPACLPlugin:  aclPlugin,
		VPPIfPlugin:   ifPlugin,
		VPPL2Plugin:   l2Plugin,
		VPPL3Plugin:   l3Plugin,
		LinuxIfPlugin: ifpluginIfPlugin,
		NsPlugin:      nsPlugin,
	}
	configuratorPlugin, err := ConfiguratorProvider(configuratorDeps)
	if err != nil {
		cleanup6()
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return Agent{}, nil, err
	}
	restapiDeps := restapi.Deps{
		HTTPHandlers:  httpHandlers,
		VPP:           govppmuxPlugin,
		ServiceLabel:  plugin,
		AddrAlloc:     netallocPlugin,
		VPPACLPlugin:  aclPlugin,
		VPPIfPlugin:   ifPlugin,
		VPPL2Plugin:   l2Plugin,
		VPPL3Plugin:   l3Plugin,
		LinuxIfPlugin: ifpluginIfPlugin,
		NsPlugin:      nsPlugin,
	}
	restapiPlugin, err := RestapiProvider(restapiDeps)
	if err != nil {
		cleanup6()
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return Agent{}, nil, err
	}
	telemetryDeps := telemetry.Deps{
		ServiceLabel: plugin,
		VPP:          govppmuxPlugin,
		Prometheus:   prometheusPlugin,
		GRPC:         grpcPlugin,
		HTTPHandlers: httpHandlers,
		IfPlugin:     ifPlugin,
	}
	telemetryPlugin, cleanup7, err := TelemetryProvider(telemetryDeps)
	if err != nil {
		cleanup6()
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return Agent{}, nil, err
	}
	agent := Agent{
		Base:         core,
		Server:       server,
		LogManager:   logmanagerPlugin,
		Probe:        probePlugin,
		Prometheus:   prometheusPlugin,
		KVScheduler:  scheduler,
		Orchestrator: orchestratorPlugin,
		Netalloc:     netallocPlugin,
		VPP:          vpp,
		VPPClient:    govppmuxPlugin,
		Linux:        linux,
		Configurator: configuratorPlugin,
		RestAPI:      restapiPlugin,
		Telemetry:    telemetryPlugin,
	}
	return agent, func() {
		cleanup7()
		cleanup6()
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}
